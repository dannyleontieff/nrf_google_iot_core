
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0000c000 <_vector_table>:
    c000:	20034898 	.word	0x20034898
    c004:	0001aef9 	.word	0x0001aef9
    c008:	00035443 	.word	0x00035443
    c00c:	0001af29 	.word	0x0001af29
    c010:	0001af29 	.word	0x0001af29
    c014:	0001af29 	.word	0x0001af29
    c018:	0001af29 	.word	0x0001af29
    c01c:	0001af29 	.word	0x0001af29
	...
    c02c:	0001abbd 	.word	0x0001abbd
    c030:	0001af29 	.word	0x0001af29
    c034:	00000000 	.word	0x00000000
    c038:	0001ab0d 	.word	0x0001ab0d
    c03c:	0001a2a9 	.word	0x0001a2a9

0000c040 <_irq_vector_table>:
    c040:	0001aeb9 0001aeb9 0001aeb9 0001aeb9     ................
    c050:	0001aeb9 0001aeb9 0001aeb9 0001aeb9     ................
    c060:	0001aeb9 0001aeb9 0001aeb9 0001aeb9     ................
    c070:	0001aeb9 0001aeb9 0001aeb9 0001aeb9     ................
    c080:	0001aeb9 0001aeb9 0001aeb9 0001aeb9     ................
    c090:	0001aeb9 0001aeb9 0001aeb9 0001aeb9     ................
    c0a0:	0001aeb9 0001aeb9 0001aeb9 0001aeb9     ................
    c0b0:	0001feb1 000380fd 0001aeb9 0001aeb9     ................
    c0c0:	0001aeb9 0001aeb9 0001aeb9 0001aeb9     ................
    c0d0:	0001aeb9 0001aeb9 0001aeb9 0001aeb9     ................
    c0e0:	0001aeb9 0001aeb9 0003811b 0001aeb9     ................
    c0f0:	0001aeb9 0001aeb9 0001aeb9 0001aeb9     ................
    c100:	0001aeb9 0001aeb9 0001aeb9 0001aeb9     ................
    c110:	0001aeb9 0001aeb9 0001aeb9 0001aeb9     ................
    c120:	0001aeb9 0001aeb9 0001aeb9 0001aeb9     ................
    c130:	0001aeb9 0001aeb9 0001aeb9 0001aeb9     ................
    c140:	0001aeb9                                ....

0000c144 <_vector_end>:
	...

0000c200 <m_firmware_info>:
    c200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
    c210:	00035294 00000001 0000c000 0000c000     .R..............
    c220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0000c240 <bsec_codegen_sensor_control>:
    c240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c244:	ed2d 8b02 	vpush	{d8}
    c248:	b087      	sub	sp, #28
    c24a:	2100      	movs	r1, #0
    c24c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    c24e:	9e12      	ldr	r6, [sp, #72]	; 0x48
    c250:	6121      	str	r1, [r4, #16]
    c252:	e9c4 1102 	strd	r1, r1, [r4, #8]
    c256:	7521      	strb	r1, [r4, #20]
    c258:	461f      	mov	r7, r3
    c25a:	7031      	strb	r1, [r6, #0]
    c25c:	f500 793c 	add.w	r9, r0, #752	; 0x2f0
    c260:	4616      	mov	r6, r2
    c262:	4605      	mov	r5, r0
    c264:	e9cd 6702 	strd	r6, r7, [sp, #8]
    c268:	f8b0 840e 	ldrh.w	r8, [r0, #1038]	; 0x40e
    c26c:	f001 ffe0 	bl	e230 <bsec_Bsec_applyUpdateSubscription>
    c270:	e9d9 2300 	ldrd	r2, r3, [r9]
    c274:	ea52 0103 	orrs.w	r1, r2, r3
    c278:	d02d      	beq.n	c2d6 <bsec_codegen_sensor_control+0x96>
    c27a:	1ab6      	subs	r6, r6, r2
    c27c:	ed9f 1bc4 	vldr	d1, [pc, #784]	; c590 <bsec_codegen_sensor_control+0x350>
    c280:	ed9f 0bc5 	vldr	d0, [pc, #788]	; c598 <bsec_codegen_sensor_control+0x358>
    c284:	eb67 0703 	sbc.w	r7, r7, r3
    c288:	f8b5 a40c 	ldrh.w	sl, [r5, #1036]	; 0x40c
    c28c:	f006 ff58 	bl	13140 <pow>
    c290:	f000 fd0e 	bl	ccb0 <bsec_rt_roundd>
    c294:	ec51 0b10 	vmov	r0, r1, d0
    c298:	f005 feb2 	bl	12000 <__aeabi_d2lz>
    c29c:	fba0 230a 	umull	r2, r3, r0, sl
    c2a0:	fb01 330a 	mla	r3, r1, sl, r3
    c2a4:	ea4f 1a12 	mov.w	sl, r2, lsr #4
    c2a8:	1b90      	subs	r0, r2, r6
    c2aa:	ea4a 7a03 	orr.w	sl, sl, r3, lsl #28
    c2ae:	eb63 0107 	sbc.w	r1, r3, r7
    c2b2:	ea4f 1b23 	mov.w	fp, r3, asr #4
    c2b6:	4582      	cmp	sl, r0
    c2b8:	eb7b 0101 	sbcs.w	r1, fp, r1
    c2bc:	f2c0 8144 	blt.w	c548 <bsec_codegen_sensor_control+0x308>
    c2c0:	1ab0      	subs	r0, r6, r2
    c2c2:	eb67 0103 	sbc.w	r1, r7, r3
    c2c6:	460b      	mov	r3, r1
    c2c8:	4582      	cmp	sl, r0
    c2ca:	eb7b 0303 	sbcs.w	r3, fp, r3
    c2ce:	da02      	bge.n	c2d6 <bsec_codegen_sensor_control+0x96>
    c2d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
    c2d2:	2364      	movs	r3, #100	; 0x64
    c2d4:	7013      	strb	r3, [r2, #0]
    c2d6:	2300      	movs	r3, #0
    c2d8:	f10d 0b16 	add.w	fp, sp, #22
    c2dc:	e9c4 3300 	strd	r3, r3, [r4]
    c2e0:	e9c4 3302 	strd	r3, r3, [r4, #8]
    c2e4:	6123      	str	r3, [r4, #16]
    c2e6:	7523      	strb	r3, [r4, #20]
    c2e8:	4622      	mov	r2, r4
    c2ea:	f10d 0315 	add.w	r3, sp, #21
    c2ee:	f8cd b000 	str.w	fp, [sp]
    c2f2:	2101      	movs	r1, #1
    c2f4:	4628      	mov	r0, r5
    c2f6:	f001 ffa1 	bl	e23c <bsec_Bsec_checkIfSensorRequired>
    c2fa:	f89d 3015 	ldrb.w	r3, [sp, #21]
    c2fe:	f8bd a016 	ldrh.w	sl, [sp, #22]
    c302:	b12b      	cbz	r3, c310 <bsec_codegen_sensor_control+0xd0>
    c304:	f895 3459 	ldrb.w	r3, [r5, #1113]	; 0x459
    c308:	7463      	strb	r3, [r4, #17]
    c30a:	f895 3457 	ldrb.w	r3, [r5, #1111]	; 0x457
    c30e:	74a3      	strb	r3, [r4, #18]
    c310:	f10d 0315 	add.w	r3, sp, #21
    c314:	4622      	mov	r2, r4
    c316:	f8cd b000 	str.w	fp, [sp]
    c31a:	2102      	movs	r1, #2
    c31c:	4628      	mov	r0, r5
    c31e:	f001 ff8d 	bl	e23c <bsec_Bsec_checkIfSensorRequired>
    c322:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    c326:	f89d 3015 	ldrb.w	r3, [sp, #21]
    c32a:	4592      	cmp	sl, r2
    c32c:	bf28      	it	cs
    c32e:	4692      	movcs	sl, r2
    c330:	b12b      	cbz	r3, c33e <bsec_codegen_sensor_control+0xfe>
    c332:	f895 3458 	ldrb.w	r3, [r5, #1112]	; 0x458
    c336:	74e3      	strb	r3, [r4, #19]
    c338:	f895 3457 	ldrb.w	r3, [r5, #1111]	; 0x457
    c33c:	74a3      	strb	r3, [r4, #18]
    c33e:	f10d 0315 	add.w	r3, sp, #21
    c342:	4622      	mov	r2, r4
    c344:	f8cd b000 	str.w	fp, [sp]
    c348:	2103      	movs	r1, #3
    c34a:	4628      	mov	r0, r5
    c34c:	f001 ff76 	bl	e23c <bsec_Bsec_checkIfSensorRequired>
    c350:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    c354:	f89d 3015 	ldrb.w	r3, [sp, #21]
    c358:	4592      	cmp	sl, r2
    c35a:	bf28      	it	cs
    c35c:	4692      	movcs	sl, r2
    c35e:	b113      	cbz	r3, c366 <bsec_codegen_sensor_control+0x126>
    c360:	f895 3457 	ldrb.w	r3, [r5, #1111]	; 0x457
    c364:	74a3      	strb	r3, [r4, #18]
    c366:	f10d 0315 	add.w	r3, sp, #21
    c36a:	4622      	mov	r2, r4
    c36c:	f8cd b000 	str.w	fp, [sp]
    c370:	2104      	movs	r1, #4
    c372:	4628      	mov	r0, r5
    c374:	f001 ff62 	bl	e23c <bsec_Bsec_checkIfSensorRequired>
    c378:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    c37c:	f89d 2015 	ldrb.w	r2, [sp, #21]
    c380:	459a      	cmp	sl, r3
    c382:	bf28      	it	cs
    c384:	469a      	movcs	sl, r3
    c386:	45c2      	cmp	sl, r8
    c388:	bf28      	it	cs
    c38a:	46c2      	movcs	sl, r8
    c38c:	2a00      	cmp	r2, #0
    c38e:	d16d      	bne.n	c46c <bsec_codegen_sensor_control+0x22c>
    c390:	f505 783e 	add.w	r8, r5, #760	; 0x2f8
    c394:	f8b5 3454 	ldrh.w	r3, [r5, #1108]	; 0x454
    c398:	fbb3 f2fa 	udiv	r2, r3, sl
    c39c:	fb0a 3212 	mls	r2, sl, r2, r3
    c3a0:	ebaa 0a02 	sub.w	sl, sl, r2
    c3a4:	fa1f fa8a 	uxth.w	sl, sl
    c3a8:	f8b5 1410 	ldrh.w	r1, [r5, #1040]	; 0x410
    c3ac:	f8ad 1016 	strh.w	r1, [sp, #22]
    c3b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    c3b4:	4453      	add	r3, sl
    c3b6:	b29b      	uxth	r3, r3
    c3b8:	fbb3 f2f1 	udiv	r2, r3, r1
    c3bc:	fb01 3312 	mls	r3, r1, r2, r3
    c3c0:	e9c9 6700 	strd	r6, r7, [r9]
    c3c4:	ed9f 1b72 	vldr	d1, [pc, #456]	; c590 <bsec_codegen_sensor_control+0x350>
    c3c8:	f8a5 3454 	strh.w	r3, [r5, #1108]	; 0x454
    c3cc:	f8a5 a40c 	strh.w	sl, [r5, #1036]	; 0x40c
    c3d0:	ed9f 0b71 	vldr	d0, [pc, #452]	; c598 <bsec_codegen_sensor_control+0x358>
    c3d4:	f006 feb4 	bl	13140 <pow>
    c3d8:	f000 fc6a 	bl	ccb0 <bsec_rt_roundd>
    c3dc:	ec51 0b10 	vmov	r0, r1, d0
    c3e0:	f005 fe0e 	bl	12000 <__aeabi_d2lz>
    c3e4:	e9d8 8900 	ldrd	r8, r9, [r8]
    c3e8:	fba0 230a 	umull	r2, r3, r0, sl
    c3ec:	fb01 330a 	mla	r3, r1, sl, r3
    c3f0:	18b6      	adds	r6, r6, r2
    c3f2:	415f      	adcs	r7, r3
    c3f4:	f04f 0a00 	mov.w	sl, #0
    c3f8:	ebb6 0008 	subs.w	r0, r6, r8
    c3fc:	e9c4 6700 	strd	r6, r7, [r4]
    c400:	eb67 0109 	sbc.w	r1, r7, r9
    c404:	f885 a45b 	strb.w	sl, [r5, #1115]	; 0x45b
    c408:	f005 fdbc 	bl	11f84 <__aeabi_l2f>
    c40c:	eddf 8a64 	vldr	s17, [pc, #400]	; c5a0 <bsec_codegen_sensor_control+0x360>
    c410:	ed9f 8a64 	vldr	s16, [pc, #400]	; c5a4 <bsec_codegen_sensor_control+0x364>
    c414:	ee07 0a90 	vmov	s15, r0
    c418:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    c41c:	eef4 7ac8 	vcmpe.f32	s15, s16
    c420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c424:	d47b      	bmi.n	c51e <bsec_codegen_sensor_control+0x2de>
    c426:	ed9f 7a60 	vldr	s14, [pc, #384]	; c5a8 <bsec_codegen_sensor_control+0x368>
    c42a:	eef4 7ac7 	vcmpe.f32	s15, s14
    c42e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c432:	dc74      	bgt.n	c51e <bsec_codegen_sensor_control+0x2de>
    c434:	f505 7340 	add.w	r3, r5, #768	; 0x300
    c438:	e9d3 3400 	ldrd	r3, r4, [r3]
    c43c:	1af0      	subs	r0, r6, r3
    c43e:	eb67 0104 	sbc.w	r1, r7, r4
    c442:	f005 fd9f 	bl	11f84 <__aeabi_l2f>
    c446:	ee07 0a90 	vmov	s15, r0
    c44a:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    c44e:	eef4 7ac8 	vcmpe.f32	s15, s16
    c452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c456:	bf46      	itte	mi
    c458:	2366      	movmi	r3, #102	; 0x66
    c45a:	f885 345c 	strbmi.w	r3, [r5, #1116]	; 0x45c
    c45e:	f885 a45c 	strbpl.w	sl, [r5, #1116]	; 0x45c
    c462:	b007      	add	sp, #28
    c464:	ecbd 8b02 	vpop	{d8}
    c468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c46c:	2301      	movs	r3, #1
    c46e:	7423      	strb	r3, [r4, #16]
    c470:	f895 3456 	ldrb.w	r3, [r5, #1110]	; 0x456
    c474:	4a4d      	ldr	r2, [pc, #308]	; (c5ac <bsec_codegen_sensor_control+0x36c>)
    c476:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    c47a:	7d52      	ldrb	r2, [r2, #21]
    c47c:	f8b3 1420 	ldrh.w	r1, [r3, #1056]	; 0x420
    c480:	81a1      	strh	r1, [r4, #12]
    c482:	f895 1458 	ldrb.w	r1, [r5, #1112]	; 0x458
    c486:	74e1      	strb	r1, [r4, #19]
    c488:	f895 1457 	ldrb.w	r1, [r5, #1111]	; 0x457
    c48c:	74a1      	strb	r1, [r4, #18]
    c48e:	eb05 0282 	add.w	r2, r5, r2, lsl #2
    c492:	edd2 7a89 	vldr	s15, [r2, #548]	; 0x224
    c496:	eef5 7a40 	vcmp.f32	s15, #0.0
    c49a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c49e:	d10c      	bne.n	c4ba <bsec_codegen_sensor_control+0x27a>
    c4a0:	f895 245b 	ldrb.w	r2, [r5, #1115]	; 0x45b
    c4a4:	b94a      	cbnz	r2, c4ba <bsec_codegen_sensor_control+0x27a>
    c4a6:	f8b3 3418 	ldrh.w	r3, [r3, #1048]	; 0x418
    c4aa:	81e3      	strh	r3, [r4, #14]
    c4ac:	f505 783e 	add.w	r8, r5, #760	; 0x2f8
    c4b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c4b4:	e9c8 2300 	strd	r2, r3, [r8]
    c4b8:	e76c      	b.n	c394 <bsec_codegen_sensor_control+0x154>
    c4ba:	f505 783e 	add.w	r8, r5, #760	; 0x2f8
    c4be:	f505 7b40 	add.w	fp, r5, #768	; 0x300
    c4c2:	e9d8 6700 	ldrd	r6, r7, [r8]
    c4c6:	e9db 2300 	ldrd	r2, r3, [fp]
    c4ca:	4296      	cmp	r6, r2
    c4cc:	eb77 0103 	sbcs.w	r1, r7, r3
    c4d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c4d4:	bfbc      	itt	lt
    c4d6:	4616      	movlt	r6, r2
    c4d8:	461f      	movlt	r7, r3
    c4da:	1b80      	subs	r0, r0, r6
    c4dc:	eb61 0107 	sbc.w	r1, r1, r7
    c4e0:	f005 fd50 	bl	11f84 <__aeabi_l2f>
    c4e4:	ed9f 0a2e 	vldr	s0, [pc, #184]	; c5a0 <bsec_codegen_sensor_control+0x360>
    c4e8:	ee07 0a90 	vmov	s15, r0
    c4ec:	ee87 0a80 	vdiv.f32	s0, s15, s0
    c4f0:	f002 f884 	bl	e5fc <bsec_Bsec_getModHeatingDuration>
    c4f4:	f895 345b 	ldrb.w	r3, [r5, #1115]	; 0x45b
    c4f8:	81e0      	strh	r0, [r4, #14]
    c4fa:	b9c3      	cbnz	r3, c52e <bsec_codegen_sensor_control+0x2ee>
    c4fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c500:	2116      	movs	r1, #22
    c502:	4628      	mov	r0, r5
    c504:	ed9f 0a2a 	vldr	s0, [pc, #168]	; c5b0 <bsec_codegen_sensor_control+0x370>
    c508:	f003 f98a 	bl	f820 <bsec_ChannelHub_setInput>
    c50c:	f895 345b 	ldrb.w	r3, [r5, #1115]	; 0x45b
    c510:	2b00      	cmp	r3, #0
    c512:	d0cd      	beq.n	c4b0 <bsec_codegen_sensor_control+0x270>
    c514:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c518:	e9cb 2300 	strd	r2, r3, [fp]
    c51c:	e73a      	b.n	c394 <bsec_codegen_sensor_control+0x154>
    c51e:	2365      	movs	r3, #101	; 0x65
    c520:	f885 345c 	strb.w	r3, [r5, #1116]	; 0x45c
    c524:	b007      	add	sp, #28
    c526:	ecbd 8b02 	vpop	{d8}
    c52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c52e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c532:	2116      	movs	r1, #22
    c534:	4628      	mov	r0, r5
    c536:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    c53a:	f003 f971 	bl	f820 <bsec_ChannelHub_setInput>
    c53e:	68a3      	ldr	r3, [r4, #8]
    c540:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    c544:	60a3      	str	r3, [r4, #8]
    c546:	e7e1      	b.n	c50c <bsec_codegen_sensor_control+0x2cc>
    c548:	ed9f 1b11 	vldr	d1, [pc, #68]	; c590 <bsec_codegen_sensor_control+0x350>
    c54c:	ed9f 0b12 	vldr	d0, [pc, #72]	; c598 <bsec_codegen_sensor_control+0x358>
    c550:	e9d9 ab00 	ldrd	sl, fp, [r9]
    c554:	f8b5 840c 	ldrh.w	r8, [r5, #1036]	; 0x40c
    c558:	f006 fdf2 	bl	13140 <pow>
    c55c:	f000 fba8 	bl	ccb0 <bsec_rt_roundd>
    c560:	ec51 0b10 	vmov	r0, r1, d0
    c564:	f005 fd4c 	bl	12000 <__aeabi_d2lz>
    c568:	fba0 2308 	umull	r2, r3, r0, r8
    c56c:	eb1a 0602 	adds.w	r6, sl, r2
    c570:	fb01 3308 	mla	r3, r1, r8, r3
    c574:	9a12      	ldr	r2, [sp, #72]	; 0x48
    c576:	eb4b 0703 	adc.w	r7, fp, r3
    c57a:	2364      	movs	r3, #100	; 0x64
    c57c:	e9c4 6700 	strd	r6, r7, [r4]
    c580:	7013      	strb	r3, [r2, #0]
    c582:	b007      	add	sp, #28
    c584:	ecbd 8b02 	vpop	{d8}
    c588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c58c:	f3af 8000 	nop.w
    c590:	00000000 	.word	0x00000000
    c594:	401c0000 	.word	0x401c0000
    c598:	00000000 	.word	0x00000000
    c59c:	40240000 	.word	0x40240000
    c5a0:	4e6e6b28 	.word	0x4e6e6b28
    c5a4:	42700000 	.word	0x42700000
    c5a8:	43700000 	.word	0x43700000
    c5ac:	0003ad70 	.word	0x0003ad70
	...

0000c5b8 <bsec_codegen_update_subscription>:
    c5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c5bc:	ed2d 8b04 	vpush	{d8-d9}
    c5c0:	b08d      	sub	sp, #52	; 0x34
    c5c2:	e9dd 9a1a 	ldrd	r9, sl, [sp, #104]	; 0x68
    c5c6:	2500      	movs	r5, #0
    c5c8:	4616      	mov	r6, r2
    c5ca:	4604      	mov	r4, r0
    c5cc:	460f      	mov	r7, r1
    c5ce:	f889 5000 	strb.w	r5, [r9]
    c5d2:	f200 412a 	addw	r1, r0, #1066	; 0x42a
    c5d6:	221c      	movs	r2, #28
    c5d8:	a805      	add	r0, sp, #20
    c5da:	469b      	mov	fp, r3
    c5dc:	f02c fcf1 	bl	38fc2 <memcpy>
    c5e0:	2e00      	cmp	r6, #0
    c5e2:	f000 8097 	beq.w	c714 <bsec_codegen_update_subscription+0x15c>
    c5e6:	793b      	ldrb	r3, [r7, #4]
    c5e8:	3b01      	subs	r3, #1
    c5ea:	b2da      	uxtb	r2, r3
    c5ec:	2a01      	cmp	r2, #1
    c5ee:	f240 8106 	bls.w	c7fe <bsec_codegen_update_subscription+0x246>
    c5f2:	9501      	str	r5, [sp, #4]
    c5f4:	ed9f 8abe 	vldr	s16, [pc, #760]	; c8f0 <bsec_codegen_update_subscription+0x338>
    c5f8:	ed9f 9abe 	vldr	s18, [pc, #760]	; c8f4 <bsec_codegen_update_subscription+0x33c>
    c5fc:	eddf 8abe 	vldr	s17, [pc, #760]	; c8f8 <bsec_codegen_update_subscription+0x340>
    c600:	f8cd a06c 	str.w	sl, [sp, #108]	; 0x6c
    c604:	2501      	movs	r5, #1
    c606:	e016      	b.n	c636 <bsec_codegen_update_subscription+0x7e>
    c608:	4abc      	ldr	r2, [pc, #752]	; (c8fc <bsec_codegen_update_subscription+0x344>)
    c60a:	411a      	asrs	r2, r3
    c60c:	07d1      	lsls	r1, r2, #31
    c60e:	d515      	bpl.n	c63c <bsec_codegen_update_subscription+0x84>
    c610:	2201      	movs	r2, #1
    c612:	fa02 f303 	lsl.w	r3, r2, r3
    c616:	9a01      	ldr	r2, [sp, #4]
    c618:	4213      	tst	r3, r2
    c61a:	f000 80b4 	beq.w	c786 <bsec_codegen_update_subscription+0x1ce>
    c61e:	23f3      	movs	r3, #243	; 0xf3
    c620:	f889 3000 	strb.w	r3, [r9]
    c624:	3501      	adds	r5, #1
    c626:	b2ed      	uxtb	r5, r5
    c628:	42ae      	cmp	r6, r5
    c62a:	d30e      	bcc.n	c64a <bsec_codegen_update_subscription+0x92>
    c62c:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
    c630:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    c634:	3b01      	subs	r3, #1
    c636:	b2db      	uxtb	r3, r3
    c638:	2b14      	cmp	r3, #20
    c63a:	d9e5      	bls.n	c608 <bsec_codegen_update_subscription+0x50>
    c63c:	3501      	adds	r5, #1
    c63e:	b2ed      	uxtb	r5, r5
    c640:	230a      	movs	r3, #10
    c642:	42ae      	cmp	r6, r5
    c644:	f889 3000 	strb.w	r3, [r9]
    c648:	d2f0      	bcs.n	c62c <bsec_codegen_update_subscription+0x74>
    c64a:	f999 3000 	ldrsb.w	r3, [r9]
    c64e:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
    c652:	2b00      	cmp	r3, #0
    c654:	da61      	bge.n	c71a <bsec_codegen_update_subscription+0x162>
    c656:	f89b 3000 	ldrb.w	r3, [fp]
    c65a:	2b07      	cmp	r3, #7
    c65c:	f240 8087 	bls.w	c76e <bsec_codegen_update_subscription+0x1b6>
    c660:	2300      	movs	r3, #0
    c662:	f8df 92a4 	ldr.w	r9, [pc, #676]	; c908 <bsec_codegen_update_subscription+0x350>
    c666:	ed9f 6aa2 	vldr	s12, [pc, #648]	; c8f0 <bsec_codegen_update_subscription+0x338>
    c66a:	49a4      	ldr	r1, [pc, #656]	; (c8fc <bsec_codegen_update_subscription+0x344>)
    c66c:	4ea4      	ldr	r6, [pc, #656]	; (c900 <bsec_codegen_update_subscription+0x348>)
    c66e:	f8df e294 	ldr.w	lr, [pc, #660]	; c904 <bsec_codegen_update_subscription+0x34c>
    c672:	eddf 5aa1 	vldr	s11, [pc, #644]	; c8f8 <bsec_codegen_update_subscription+0x340>
    c676:	469c      	mov	ip, r3
    c678:	e002      	b.n	c680 <bsec_codegen_update_subscription+0xc8>
    c67a:	2f18      	cmp	r7, #24
    c67c:	463b      	mov	r3, r7
    c67e:	d07b      	beq.n	c778 <bsec_codegen_update_subscription+0x1c0>
    c680:	fa49 f203 	asr.w	r2, r9, r3
    c684:	1c5f      	adds	r7, r3, #1
    c686:	07d0      	lsls	r0, r2, #31
    c688:	fa5f f887 	uxtb.w	r8, r7
    c68c:	d5f5      	bpl.n	c67a <bsec_codegen_update_subscription+0xc2>
    c68e:	f10c 0c01 	add.w	ip, ip, #1
    c692:	fa5f fc8c 	uxtb.w	ip, ip
    c696:	f10c 5000 	add.w	r0, ip, #536870912	; 0x20000000
    c69a:	3801      	subs	r0, #1
    c69c:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
    c6a0:	2501      	movs	r5, #1
    c6a2:	f880 8004 	strb.w	r8, [r0, #4]
    c6a6:	409d      	lsls	r5, r3
    c6a8:	ed80 6a00 	vstr	s12, [r0]
    c6ac:	2300      	movs	r3, #0
    c6ae:	f64f 78ff 	movw	r8, #65535	; 0xffff
    c6b2:	e00c      	b.n	c6ce <bsec_codegen_update_subscription+0x116>
    c6b4:	4542      	cmp	r2, r8
    c6b6:	d007      	beq.n	c6c8 <bsec_codegen_update_subscription+0x110>
    c6b8:	ee07 2a90 	vmov	s15, r2
    c6bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c6c0:	ee85 7aa7 	vdiv.f32	s14, s11, s15
    c6c4:	ed80 7a00 	vstr	s14, [r0]
    c6c8:	3301      	adds	r3, #1
    c6ca:	2b15      	cmp	r3, #21
    c6cc:	d0d5      	beq.n	c67a <bsec_codegen_update_subscription+0xc2>
    c6ce:	fa41 f203 	asr.w	r2, r1, r3
    c6d2:	07d2      	lsls	r2, r2, #31
    c6d4:	d5f8      	bpl.n	c6c8 <bsec_codegen_update_subscription+0x110>
    c6d6:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
    c6da:	4215      	tst	r5, r2
    c6dc:	d0f4      	beq.n	c6c8 <bsec_codegen_update_subscription+0x110>
    c6de:	f813 200e 	ldrb.w	r2, [r3, lr]
    c6e2:	ed90 7a00 	vldr	s14, [r0]
    c6e6:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    c6ea:	eeb4 7a46 	vcmp.f32	s14, s12
    c6ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c6f2:	f8b2 2428 	ldrh.w	r2, [r2, #1064]	; 0x428
    c6f6:	d0dd      	beq.n	c6b4 <bsec_codegen_update_subscription+0xfc>
    c6f8:	ee07 2a90 	vmov	s15, r2
    c6fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c700:	eec5 6aa7 	vdiv.f32	s13, s11, s15
    c704:	eeb4 7ae6 	vcmpe.f32	s14, s13
    c708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c70c:	bf48      	it	mi
    c70e:	edc0 6a00 	vstrmi	s13, [r0]
    c712:	e7d9      	b.n	c6c8 <bsec_codegen_update_subscription+0x110>
    c714:	230c      	movs	r3, #12
    c716:	f889 3000 	strb.w	r3, [r9]
    c71a:	a905      	add	r1, sp, #20
    c71c:	4620      	mov	r0, r4
    c71e:	f001 fdb9 	bl	e294 <bsec_Bsec_checkSamplIntvlCompatibilty>
    c722:	2800      	cmp	r0, #0
    c724:	d168      	bne.n	c7f8 <bsec_codegen_update_subscription+0x240>
    c726:	f999 0000 	ldrsb.w	r0, [r9]
    c72a:	2800      	cmp	r0, #0
    c72c:	db93      	blt.n	c656 <bsec_codegen_update_subscription+0x9e>
    c72e:	4e73      	ldr	r6, [pc, #460]	; (c8fc <bsec_codegen_update_subscription+0x344>)
    c730:	4f74      	ldr	r7, [pc, #464]	; (c904 <bsec_codegen_update_subscription+0x34c>)
    c732:	2300      	movs	r3, #0
    c734:	fa46 f203 	asr.w	r2, r6, r3
    c738:	1c5d      	adds	r5, r3, #1
    c73a:	07d2      	lsls	r2, r2, #31
    c73c:	b2e9      	uxtb	r1, r5
    c73e:	d50e      	bpl.n	c75e <bsec_codegen_update_subscription+0x1a6>
    c740:	5ddb      	ldrb	r3, [r3, r7]
    c742:	aa0c      	add	r2, sp, #48	; 0x30
    c744:	eb02 0243 	add.w	r2, r2, r3, lsl #1
    c748:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    c74c:	f832 2c1e 	ldrh.w	r2, [r2, #-30]
    c750:	f8b3 3428 	ldrh.w	r3, [r3, #1064]	; 0x428
    c754:	4293      	cmp	r3, r2
    c756:	4620      	mov	r0, r4
    c758:	d001      	beq.n	c75e <bsec_codegen_update_subscription+0x1a6>
    c75a:	f001 ffd7 	bl	e70c <bsec_Bsec_requestOutput>
    c75e:	2d15      	cmp	r5, #21
    c760:	462b      	mov	r3, r5
    c762:	d1e7      	bne.n	c734 <bsec_codegen_update_subscription+0x17c>
    c764:	f89b 3000 	ldrb.w	r3, [fp]
    c768:	2b07      	cmp	r3, #7
    c76a:	f63f af79 	bhi.w	c660 <bsec_codegen_update_subscription+0xa8>
    c76e:	23f1      	movs	r3, #241	; 0xf1
    c770:	f889 3000 	strb.w	r3, [r9]
    c774:	f04f 0c00 	mov.w	ip, #0
    c778:	f88b c000 	strb.w	ip, [fp]
    c77c:	b00d      	add	sp, #52	; 0x34
    c77e:	ecbd 8b04 	vpop	{d8-d9}
    c782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c786:	f105 5200 	add.w	r2, r5, #536870912	; 0x20000000
    c78a:	3a01      	subs	r2, #1
    c78c:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
    c790:	ed98 0a00 	vldr	s0, [r8]
    c794:	9a01      	ldr	r2, [sp, #4]
    c796:	eeb5 0a40 	vcmp.f32	s0, #0.0
    c79a:	431a      	orrs	r2, r3
    c79c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c7a0:	9201      	str	r2, [sp, #4]
    c7a2:	d143      	bne.n	c82c <bsec_codegen_update_subscription+0x274>
    c7a4:	23f6      	movs	r3, #246	; 0xf6
    c7a6:	f889 3000 	strb.w	r3, [r9]
    c7aa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    c7ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c7b2:	dd04      	ble.n	c7be <bsec_codegen_update_subscription+0x206>
    c7b4:	eeb4 0ac8 	vcmpe.f32	s0, s16
    c7b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c7bc:	d454      	bmi.n	c868 <bsec_codegen_update_subscription+0x2b0>
    c7be:	eeb5 0a40 	vcmp.f32	s0, #0.0
    c7c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c7c6:	bf14      	ite	ne
    c7c8:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    c7cc:	2300      	moveq	r3, #0
    c7ce:	b29b      	uxth	r3, r3
    c7d0:	9302      	str	r3, [sp, #8]
    c7d2:	f999 3000 	ldrsb.w	r3, [r9]
    c7d6:	2b00      	cmp	r3, #0
    c7d8:	f47f af24 	bne.w	c624 <bsec_codegen_update_subscription+0x6c>
    c7dc:	4a49      	ldr	r2, [pc, #292]	; (c904 <bsec_codegen_update_subscription+0x34c>)
    c7de:	f898 3004 	ldrb.w	r3, [r8, #4]
    c7e2:	4413      	add	r3, r2
    c7e4:	aa0c      	add	r2, sp, #48	; 0x30
    c7e6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    c7ea:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    c7ee:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    c7f2:	f823 2c1e 	strh.w	r2, [r3, #-30]
    c7f6:	e715      	b.n	c624 <bsec_codegen_update_subscription+0x6c>
    c7f8:	f889 0000 	strb.w	r0, [r9]
    c7fc:	e795      	b.n	c72a <bsec_codegen_update_subscription+0x172>
    c7fe:	edd7 7a00 	vldr	s15, [r7]
    c802:	eef5 7a40 	vcmp.f32	s15, #0.0
    c806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c80a:	f47f aef2 	bne.w	c5f2 <bsec_codegen_update_subscription+0x3a>
    c80e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    c812:	f247 5330 	movw	r3, #30000	; 0x7530
    c816:	429a      	cmp	r2, r3
    c818:	d01d      	beq.n	c856 <bsec_codegen_update_subscription+0x29e>
    c81a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    c81e:	429a      	cmp	r2, r3
    c820:	d019      	beq.n	c856 <bsec_codegen_update_subscription+0x29e>
    c822:	230b      	movs	r3, #11
    c824:	46ac      	mov	ip, r5
    c826:	f889 3000 	strb.w	r3, [r9]
    c82a:	e7a5      	b.n	c778 <bsec_codegen_update_subscription+0x1c0>
    c82c:	eeb4 0a48 	vcmp.f32	s0, s16
    c830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c834:	d0c3      	beq.n	c7be <bsec_codegen_update_subscription+0x206>
    c836:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    c83a:	eeb4 0ae7 	vcmpe.f32	s0, s15
    c83e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c842:	dc04      	bgt.n	c84e <bsec_codegen_update_subscription+0x296>
    c844:	eeb4 0ac9 	vcmpe.f32	s0, s18
    c848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c84c:	d5ad      	bpl.n	c7aa <bsec_codegen_update_subscription+0x1f2>
    c84e:	23f2      	movs	r3, #242	; 0xf2
    c850:	f889 3000 	strb.w	r3, [r9]
    c854:	e7a9      	b.n	c7aa <bsec_codegen_update_subscription+0x1f2>
    c856:	f994 345c 	ldrsb.w	r3, [r4, #1116]	; 0x45c
    c85a:	2b00      	cmp	r3, #0
    c85c:	d188      	bne.n	c770 <bsec_codegen_update_subscription+0x1b8>
    c85e:	2201      	movs	r2, #1
    c860:	469c      	mov	ip, r3
    c862:	f884 245b 	strb.w	r2, [r4, #1115]	; 0x45b
    c866:	e787      	b.n	c778 <bsec_codegen_update_subscription+0x1c0>
    c868:	ee88 0a80 	vdiv.f32	s0, s17, s0
    c86c:	f022 fe3e 	bl	2f4ec <roundf>
    c870:	f04f 0a00 	mov.w	sl, #0
    c874:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    c878:	ee10 3a10 	vmov	r3, s0
    c87c:	b29b      	uxth	r3, r3
    c87e:	e9cd 3502 	strd	r3, r5, [sp, #8]
    c882:	4a20      	ldr	r2, [pc, #128]	; (c904 <bsec_codegen_update_subscription+0x34c>)
    c884:	f898 3004 	ldrb.w	r3, [r8, #4]
    c888:	4413      	add	r3, r2
    c88a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    c88e:	4453      	add	r3, sl
    c890:	f203 13a3 	addw	r3, r3, #419	; 0x1a3
    c894:	f10a 0a0e 	add.w	sl, sl, #14
    c898:	f834 5013 	ldrh.w	r5, [r4, r3, lsl #1]
    c89c:	4628      	mov	r0, r5
    c89e:	f000 fb8b 	bl	cfb8 <__aeabi_ui2d>
    c8a2:	a311      	add	r3, pc, #68	; (adr r3, c8e8 <bsec_codegen_update_subscription+0x330>)
    c8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
    c8a8:	f000 fc00 	bl	d0ac <__aeabi_dmul>
    c8ac:	ec41 0b10 	vmov	d0, r0, r1
    c8b0:	f000 f9fe 	bl	ccb0 <bsec_rt_roundd>
    c8b4:	ec51 0b10 	vmov	r0, r1, d0
    c8b8:	f005 fa74 	bl	11da4 <__aeabi_d2uiz>
    c8bc:	b280      	uxth	r0, r0
    c8be:	1a2b      	subs	r3, r5, r0
    c8c0:	9a02      	ldr	r2, [sp, #8]
    c8c2:	b29b      	uxth	r3, r3
    c8c4:	4405      	add	r5, r0
    c8c6:	4293      	cmp	r3, r2
    c8c8:	b2ad      	uxth	r5, r5
    c8ca:	d803      	bhi.n	c8d4 <bsec_codegen_update_subscription+0x31c>
    c8cc:	4295      	cmp	r5, r2
    c8ce:	d301      	bcc.n	c8d4 <bsec_codegen_update_subscription+0x31c>
    c8d0:	9d03      	ldr	r5, [sp, #12]
    c8d2:	e77e      	b.n	c7d2 <bsec_codegen_update_subscription+0x21a>
    c8d4:	f1ba 0f54 	cmp.w	sl, #84	; 0x54
    c8d8:	d1d3      	bne.n	c882 <bsec_codegen_update_subscription+0x2ca>
    c8da:	23f4      	movs	r3, #244	; 0xf4
    c8dc:	9d03      	ldr	r5, [sp, #12]
    c8de:	f889 3000 	strb.w	r3, [r9]
    c8e2:	e69f      	b.n	c624 <bsec_codegen_update_subscription+0x6c>
    c8e4:	f3af 8000 	nop.w
    c8e8:	47ae147b 	.word	0x47ae147b
    c8ec:	3f847ae1 	.word	0x3f847ae1
    c8f0:	477fff00 	.word	0x477fff00
    c8f4:	3ada740e 	.word	0x3ada740e
    c8f8:	42c80000 	.word	0x42c80000
    c8fc:	001279ef 	.word	0x001279ef
    c900:	0003ad04 	.word	0x0003ad04
    c904:	0003ad58 	.word	0x0003ad58
    c908:	00e0200f 	.word	0x00e0200f
    c90c:	00000000 	.word	0x00000000

0000c910 <bsec_SensorHeatCompensator_SensorHeatCompensator>:
    c910:	4916      	ldr	r1, [pc, #88]	; (c96c <bsec_SensorHeatCompensator_SensorHeatCompensator+0x5c>)
    c912:	6041      	str	r1, [r0, #4]
    c914:	b430      	push	{r4, r5}
    c916:	2109      	movs	r1, #9
    c918:	4d15      	ldr	r5, [pc, #84]	; (c970 <bsec_SensorHeatCompensator_SensorHeatCompensator+0x60>)
    c91a:	4c16      	ldr	r4, [pc, #88]	; (c974 <bsec_SensorHeatCompensator_SensorHeatCompensator+0x64>)
    c91c:	7001      	strb	r1, [r0, #0]
    c91e:	4916      	ldr	r1, [pc, #88]	; (c978 <bsec_SensorHeatCompensator_SensorHeatCompensator+0x68>)
    c920:	4a16      	ldr	r2, [pc, #88]	; (c97c <bsec_SensorHeatCompensator_SensorHeatCompensator+0x6c>)
    c922:	6181      	str	r1, [r0, #24]
    c924:	62c5      	str	r5, [r0, #44]	; 0x2c
    c926:	4916      	ldr	r1, [pc, #88]	; (c980 <bsec_SensorHeatCompensator_SensorHeatCompensator+0x70>)
    c928:	4d16      	ldr	r5, [pc, #88]	; (c984 <bsec_SensorHeatCompensator_SensorHeatCompensator+0x74>)
    c92a:	6404      	str	r4, [r0, #64]	; 0x40
    c92c:	4c16      	ldr	r4, [pc, #88]	; (c988 <bsec_SensorHeatCompensator_SensorHeatCompensator+0x78>)
    c92e:	6102      	str	r2, [r0, #16]
    c930:	6241      	str	r1, [r0, #36]	; 0x24
    c932:	4a16      	ldr	r2, [pc, #88]	; (c98c <bsec_SensorHeatCompensator_SensorHeatCompensator+0x7c>)
    c934:	4916      	ldr	r1, [pc, #88]	; (c990 <bsec_SensorHeatCompensator_SensorHeatCompensator+0x80>)
    c936:	6385      	str	r5, [r0, #56]	; 0x38
    c938:	64c4      	str	r4, [r0, #76]	; 0x4c
    c93a:	4d16      	ldr	r5, [pc, #88]	; (c994 <bsec_SensorHeatCompensator_SensorHeatCompensator+0x84>)
    c93c:	4c16      	ldr	r4, [pc, #88]	; (c998 <bsec_SensorHeatCompensator_SensorHeatCompensator+0x88>)
    c93e:	6142      	str	r2, [r0, #20]
    c940:	6281      	str	r1, [r0, #40]	; 0x28
    c942:	2200      	movs	r2, #0
    c944:	4915      	ldr	r1, [pc, #84]	; (c99c <bsec_SensorHeatCompensator_SensorHeatCompensator+0x8c>)
    c946:	63c5      	str	r5, [r0, #60]	; 0x3c
    c948:	6504      	str	r4, [r0, #80]	; 0x50
    c94a:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    c94e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    c952:	e9c0 4516 	strd	r4, r5, [r0, #88]	; 0x58
    c956:	6601      	str	r1, [r0, #96]	; 0x60
    c958:	6082      	str	r2, [r0, #8]
    c95a:	61c2      	str	r2, [r0, #28]
    c95c:	6302      	str	r2, [r0, #48]	; 0x30
    c95e:	6442      	str	r2, [r0, #68]	; 0x44
    c960:	60c2      	str	r2, [r0, #12]
    c962:	6202      	str	r2, [r0, #32]
    c964:	6342      	str	r2, [r0, #52]	; 0x34
    c966:	6482      	str	r2, [r0, #72]	; 0x48
    c968:	bc30      	pop	{r4, r5}
    c96a:	4770      	bx	lr
    c96c:	3d96f007 	.word	0x3d96f007
    c970:	c04c3fe6 	.word	0xc04c3fe6
    c974:	408350b1 	.word	0x408350b1
    c978:	40a00000 	.word	0x40a00000
    c97c:	3de17c1c 	.word	0x3de17c1c
    c980:	3e0ccccd 	.word	0x3e0ccccd
    c984:	bf3ced91 	.word	0xbf3ced91
    c988:	3ee3fe5d 	.word	0x3ee3fe5d
    c98c:	3fd78034 	.word	0x3fd78034
    c990:	3e27d567 	.word	0x3e27d567
    c994:	3f403afb 	.word	0x3f403afb
    c998:	bf853c36 	.word	0xbf853c36
    c99c:	40400000 	.word	0x40400000

0000c9a0 <bsec_SensorHeatCompensator_configure>:
    c9a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c9a4:	b086      	sub	sp, #24
    c9a6:	ab04      	add	r3, sp, #16
    c9a8:	ae05      	add	r6, sp, #20
    c9aa:	4605      	mov	r5, r0
    c9ac:	7800      	ldrb	r0, [r0, #0]
    c9ae:	9300      	str	r3, [sp, #0]
    c9b0:	9601      	str	r6, [sp, #4]
    c9b2:	f10d 030f 	add.w	r3, sp, #15
    c9b6:	460f      	mov	r7, r1
    c9b8:	f005 f83a 	bl	11a30 <bsec_Serialization_checkSerializationHeader>
    c9bc:	f99d 000f 	ldrsb.w	r0, [sp, #15]
    c9c0:	b9f8      	cbnz	r0, ca02 <bsec_SensorHeatCompensator_configure+0x62>
    c9c2:	2401      	movs	r4, #1
    c9c4:	f105 0a40 	add.w	sl, r5, #64	; 0x40
    c9c8:	f105 092c 	add.w	r9, r5, #44	; 0x2c
    c9cc:	f105 0818 	add.w	r8, r5, #24
    c9d0:	1ea3      	subs	r3, r4, #2
    c9d2:	2b03      	cmp	r3, #3
    c9d4:	d803      	bhi.n	c9de <bsec_SensorHeatCompensator_configure+0x3e>
    c9d6:	e8df f003 	tbb	[pc, r3]
    c9da:	1d23      	.short	0x1d23
    c9dc:	0c17      	.short	0x0c17
    c9de:	1d2a      	adds	r2, r5, #4
    c9e0:	4631      	mov	r1, r6
    c9e2:	4638      	mov	r0, r7
    c9e4:	f003 fb8e 	bl	10104 <bsec_q_Entity_parseAndDeserialize>
    c9e8:	2c05      	cmp	r4, #5
    c9ea:	d01f      	beq.n	ca2c <bsec_SensorHeatCompensator_configure+0x8c>
    c9ec:	3401      	adds	r4, #1
    c9ee:	b2e4      	uxtb	r4, r4
    c9f0:	e7ee      	b.n	c9d0 <bsec_SensorHeatCompensator_configure+0x30>
    c9f2:	4638      	mov	r0, r7
    c9f4:	4631      	mov	r1, r6
    c9f6:	f003 f8e7 	bl	fbc8 <bsec_e_Entity_parseAndDeserialize>
    c9fa:	f99d 000f 	ldrsb.w	r0, [sp, #15]
    c9fe:	ed85 0a18 	vstr	s0, [r5, #96]	; 0x60
    ca02:	b006      	add	sp, #24
    ca04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ca08:	4652      	mov	r2, sl
    ca0a:	4631      	mov	r1, r6
    ca0c:	4638      	mov	r0, r7
    ca0e:	f003 fb79 	bl	10104 <bsec_q_Entity_parseAndDeserialize>
    ca12:	e7eb      	b.n	c9ec <bsec_SensorHeatCompensator_configure+0x4c>
    ca14:	464a      	mov	r2, r9
    ca16:	4631      	mov	r1, r6
    ca18:	4638      	mov	r0, r7
    ca1a:	f003 fb73 	bl	10104 <bsec_q_Entity_parseAndDeserialize>
    ca1e:	e7e5      	b.n	c9ec <bsec_SensorHeatCompensator_configure+0x4c>
    ca20:	4642      	mov	r2, r8
    ca22:	4631      	mov	r1, r6
    ca24:	4638      	mov	r0, r7
    ca26:	f003 fb6d 	bl	10104 <bsec_q_Entity_parseAndDeserialize>
    ca2a:	e7df      	b.n	c9ec <bsec_SensorHeatCompensator_configure+0x4c>
    ca2c:	f99d 000f 	ldrsb.w	r0, [sp, #15]
    ca30:	e7e7      	b.n	ca02 <bsec_SensorHeatCompensator_configure+0x62>
    ca32:	bf00      	nop

0000ca34 <bsec_SensorHeatCompensator_doStep>:
    ca34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ca38:	ed2d 8b04 	vpush	{d8-d9}
    ca3c:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
    ca40:	f5b1 6fe1 	cmp.w	r1, #1800	; 0x708
    ca44:	4606      	mov	r6, r0
    ca46:	eeb0 8a40 	vmov.f32	s16, s0
    ca4a:	4614      	mov	r4, r2
    ca4c:	461d      	mov	r5, r3
    ca4e:	eef0 8a60 	vmov.f32	s17, s1
    ca52:	d06a      	beq.n	cb2a <bsec_SensorHeatCompensator_doStep+0xf6>
    ca54:	d846      	bhi.n	cae4 <bsec_SensorHeatCompensator_doStep+0xb0>
    ca56:	2964      	cmp	r1, #100	; 0x64
    ca58:	d065      	beq.n	cb26 <bsec_SensorHeatCompensator_doStep+0xf2>
    ca5a:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    ca5e:	d14b      	bne.n	caf8 <bsec_SensorHeatCompensator_doStep+0xc4>
    ca60:	2704      	movs	r7, #4
    ca62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ca66:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    ca6a:	e9d6 0116 	ldrd	r0, r1, [r6, #88]	; 0x58
    ca6e:	f005 f8a7 	bl	11bc0 <bsec_isequal>
    ca72:	2800      	cmp	r0, #0
    ca74:	d140      	bne.n	caf8 <bsec_SensorHeatCompensator_doStep+0xc4>
    ca76:	e9d6 0116 	ldrd	r0, r1, [r6, #88]	; 0x58
    ca7a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    ca7e:	1a12      	subs	r2, r2, r0
    ca80:	eb63 0301 	sbc.w	r3, r3, r1
    ca84:	4610      	mov	r0, r2
    ca86:	4619      	mov	r1, r3
    ca88:	f000 fae2 	bl	d050 <__aeabi_l2d>
    ca8c:	a329      	add	r3, pc, #164	; (adr r3, cb34 <bsec_SensorHeatCompensator_doStep+0x100>)
    ca8e:	e9d3 2300 	ldrd	r2, r3, [r3]
    ca92:	f000 fc35 	bl	d300 <__aeabi_ddiv>
    ca96:	4680      	mov	r8, r0
    ca98:	4689      	mov	r9, r1
    ca9a:	f000 fdc9 	bl	d630 <__aeabi_d2f>
    ca9e:	eb06 0787 	add.w	r7, r6, r7, lsl #2
    caa2:	ee07 0a90 	vmov	s15, r0
    caa6:	edd7 9a00 	vldr	s19, [r7]
    caaa:	ed97 7a05 	vldr	s14, [r7, #20]
    caae:	ed97 9a0a 	vldr	s18, [r7, #40]	; 0x28
    cab2:	ee67 9aa9 	vmul.f32	s19, s15, s19
    cab6:	4642      	mov	r2, r8
    cab8:	464b      	mov	r3, r9
    caba:	4640      	mov	r0, r8
    cabc:	4649      	mov	r1, r9
    cabe:	ee27 9a89 	vmul.f32	s18, s15, s18
    cac2:	ee79 9a87 	vadd.f32	s19, s19, s14
    cac6:	f000 faf1 	bl	d0ac <__aeabi_dmul>
    caca:	f000 fdb1 	bl	d630 <__aeabi_d2f>
    cace:	ee07 0a90 	vmov	s15, r0
    cad2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
    cad6:	ee79 7a27 	vadd.f32	s15, s18, s15
    cada:	ee77 7a87 	vadd.f32	s15, s15, s14
    cade:	ee89 9aa7 	vdiv.f32	s18, s19, s15
    cae2:	e00b      	b.n	cafc <bsec_SensorHeatCompensator_doStep+0xc8>
    cae4:	f241 7370 	movw	r3, #6000	; 0x1770
    cae8:	4299      	cmp	r1, r3
    caea:	d01a      	beq.n	cb22 <bsec_SensorHeatCompensator_doStep+0xee>
    caec:	f247 5330 	movw	r3, #30000	; 0x7530
    caf0:	4299      	cmp	r1, r3
    caf2:	d101      	bne.n	caf8 <bsec_SensorHeatCompensator_doStep+0xc4>
    caf4:	2701      	movs	r7, #1
    caf6:	e7b4      	b.n	ca62 <bsec_SensorHeatCompensator_doStep+0x2e>
    caf8:	ed9f 9a0d 	vldr	s18, [pc, #52]	; cb30 <bsec_SensorHeatCompensator_doStep+0xfc>
    cafc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    cb00:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    cb04:	4620      	mov	r0, r4
    cb06:	4629      	mov	r1, r5
    cb08:	f005 f85a 	bl	11bc0 <bsec_isequal>
    cb0c:	b908      	cbnz	r0, cb12 <bsec_SensorHeatCompensator_doStep+0xde>
    cb0e:	e9c6 4516 	strd	r4, r5, [r6, #88]	; 0x58
    cb12:	ee38 0a49 	vsub.f32	s0, s16, s18
    cb16:	ee30 0a68 	vsub.f32	s0, s0, s17
    cb1a:	ecbd 8b04 	vpop	{d8-d9}
    cb1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cb22:	2702      	movs	r7, #2
    cb24:	e79d      	b.n	ca62 <bsec_SensorHeatCompensator_doStep+0x2e>
    cb26:	2705      	movs	r7, #5
    cb28:	e79b      	b.n	ca62 <bsec_SensorHeatCompensator_doStep+0x2e>
    cb2a:	ed90 9a18 	vldr	s18, [r0, #96]	; 0x60
    cb2e:	e7e5      	b.n	cafc <bsec_SensorHeatCompensator_doStep+0xc8>
	...
    cb38:	41cdcd65 	.word	0x41cdcd65

0000cb3c <bsec_SensorHeatCompensator_getConfiguration>:
    cb3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    cb40:	b085      	sub	sp, #20
    cb42:	ac04      	add	r4, sp, #16
    cb44:	2505      	movs	r5, #5
    cb46:	f804 5d09 	strb.w	r5, [r4, #-9]!
    cb4a:	4606      	mov	r6, r0
    cb4c:	4617      	mov	r7, r2
    cb4e:	7800      	ldrb	r0, [r0, #0]
    cb50:	4622      	mov	r2, r4
    cb52:	460d      	mov	r5, r1
    cb54:	f004 ff9a 	bl	11a8c <bsec_Serialization_prepareSerializationHeader>
    cb58:	f89d 2007 	ldrb.w	r2, [sp, #7]
    cb5c:	9003      	str	r0, [sp, #12]
    cb5e:	b1d2      	cbz	r2, cb96 <bsec_SensorHeatCompensator_getConfiguration+0x5a>
    cb60:	2401      	movs	r4, #1
    cb62:	f106 0940 	add.w	r9, r6, #64	; 0x40
    cb66:	f106 082c 	add.w	r8, r6, #44	; 0x2c
    cb6a:	1e63      	subs	r3, r4, #1
    cb6c:	2b04      	cmp	r3, #4
    cb6e:	d80d      	bhi.n	cb8c <bsec_SensorHeatCompensator_getConfiguration+0x50>
    cb70:	e8df f003 	tbb	[pc, r3]
    cb74:	2c35223e 	.word	0x2c35223e
    cb78:	03          	.byte	0x03
    cb79:	00          	.byte	0x00
    cb7a:	aa03      	add	r2, sp, #12
    cb7c:	4639      	mov	r1, r7
    cb7e:	4628      	mov	r0, r5
    cb80:	ed96 0a18 	vldr	s0, [r6, #96]	; 0x60
    cb84:	f003 f83a 	bl	fbfc <bsec_e_Entity_serializeAndAdd>
    cb88:	f89d 2007 	ldrb.w	r2, [sp, #7]
    cb8c:	3401      	adds	r4, #1
    cb8e:	b2e4      	uxtb	r4, r4
    cb90:	42a2      	cmp	r2, r4
    cb92:	d2ea      	bcs.n	cb6a <bsec_SensorHeatCompensator_getConfiguration+0x2e>
    cb94:	9803      	ldr	r0, [sp, #12]
    cb96:	a904      	add	r1, sp, #16
    cb98:	2202      	movs	r2, #2
    cb9a:	f821 0d06 	strh.w	r0, [r1, #-6]!
    cb9e:	a802      	add	r0, sp, #8
    cba0:	f02c fa0f 	bl	38fc2 <memcpy>
    cba4:	f89d 2008 	ldrb.w	r2, [sp, #8]
    cba8:	f89d 3009 	ldrb.w	r3, [sp, #9]
    cbac:	9803      	ldr	r0, [sp, #12]
    cbae:	702a      	strb	r2, [r5, #0]
    cbb0:	706b      	strb	r3, [r5, #1]
    cbb2:	b005      	add	sp, #20
    cbb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    cbb8:	463a      	mov	r2, r7
    cbba:	ab03      	add	r3, sp, #12
    cbbc:	4629      	mov	r1, r5
    cbbe:	f106 0018 	add.w	r0, r6, #24
    cbc2:	f003 fa11 	bl	ffe8 <bsec_n_Entity_serializeAndAdd>
    cbc6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    cbca:	e7df      	b.n	cb8c <bsec_SensorHeatCompensator_getConfiguration+0x50>
    cbcc:	463a      	mov	r2, r7
    cbce:	ab03      	add	r3, sp, #12
    cbd0:	4629      	mov	r1, r5
    cbd2:	4648      	mov	r0, r9
    cbd4:	f003 fa08 	bl	ffe8 <bsec_n_Entity_serializeAndAdd>
    cbd8:	f89d 2007 	ldrb.w	r2, [sp, #7]
    cbdc:	e7d6      	b.n	cb8c <bsec_SensorHeatCompensator_getConfiguration+0x50>
    cbde:	463a      	mov	r2, r7
    cbe0:	ab03      	add	r3, sp, #12
    cbe2:	4629      	mov	r1, r5
    cbe4:	4640      	mov	r0, r8
    cbe6:	f003 f9ff 	bl	ffe8 <bsec_n_Entity_serializeAndAdd>
    cbea:	f89d 2007 	ldrb.w	r2, [sp, #7]
    cbee:	e7cd      	b.n	cb8c <bsec_SensorHeatCompensator_getConfiguration+0x50>
    cbf0:	463a      	mov	r2, r7
    cbf2:	ab03      	add	r3, sp, #12
    cbf4:	4629      	mov	r1, r5
    cbf6:	1d30      	adds	r0, r6, #4
    cbf8:	f003 f9f6 	bl	ffe8 <bsec_n_Entity_serializeAndAdd>
    cbfc:	f89d 2007 	ldrb.w	r2, [sp, #7]
    cc00:	e7c4      	b.n	cb8c <bsec_SensorHeatCompensator_getConfiguration+0x50>
    cc02:	bf00      	nop

0000cc04 <bsec_SensorHeatCompensator_getState>:
    cc04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cc08:	b086      	sub	sp, #24
    cc0a:	ad06      	add	r5, sp, #24
    cc0c:	2401      	movs	r4, #1
    cc0e:	f805 4d09 	strb.w	r4, [r5, #-9]!
    cc12:	4607      	mov	r7, r0
    cc14:	4690      	mov	r8, r2
    cc16:	7800      	ldrb	r0, [r0, #0]
    cc18:	462a      	mov	r2, r5
    cc1a:	460e      	mov	r6, r1
    cc1c:	f004 ff36 	bl	11a8c <bsec_Serialization_prepareSerializationHeader>
    cc20:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cc24:	9005      	str	r0, [sp, #20]
    cc26:	b1ab      	cbz	r3, cc54 <bsec_SensorHeatCompensator_getState+0x50>
    cc28:	ad05      	add	r5, sp, #20
    cc2a:	e003      	b.n	cc34 <bsec_SensorHeatCompensator_getState+0x30>
    cc2c:	3401      	adds	r4, #1
    cc2e:	b2e4      	uxtb	r4, r4
    cc30:	42a3      	cmp	r3, r4
    cc32:	d30e      	bcc.n	cc52 <bsec_SensorHeatCompensator_getState+0x4e>
    cc34:	2c01      	cmp	r4, #1
    cc36:	d1f9      	bne.n	cc2c <bsec_SensorHeatCompensator_getState+0x28>
    cc38:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
    cc3c:	4643      	mov	r3, r8
    cc3e:	9500      	str	r5, [sp, #0]
    cc40:	4632      	mov	r2, r6
    cc42:	f003 f84d 	bl	fce0 <bsec_g_Entity_serializeAndAdd>
    cc46:	3401      	adds	r4, #1
    cc48:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cc4c:	b2e4      	uxtb	r4, r4
    cc4e:	42a3      	cmp	r3, r4
    cc50:	d2f0      	bcs.n	cc34 <bsec_SensorHeatCompensator_getState+0x30>
    cc52:	9805      	ldr	r0, [sp, #20]
    cc54:	a906      	add	r1, sp, #24
    cc56:	2202      	movs	r2, #2
    cc58:	f821 0d06 	strh.w	r0, [r1, #-6]!
    cc5c:	a804      	add	r0, sp, #16
    cc5e:	f02c f9b0 	bl	38fc2 <memcpy>
    cc62:	f89d 2010 	ldrb.w	r2, [sp, #16]
    cc66:	f89d 3011 	ldrb.w	r3, [sp, #17]
    cc6a:	9805      	ldr	r0, [sp, #20]
    cc6c:	7032      	strb	r2, [r6, #0]
    cc6e:	7073      	strb	r3, [r6, #1]
    cc70:	b006      	add	sp, #24
    cc72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cc76:	bf00      	nop

0000cc78 <bsec_SensorHeatCompensator_setState>:
    cc78:	b570      	push	{r4, r5, r6, lr}
    cc7a:	b086      	sub	sp, #24
    cc7c:	ab04      	add	r3, sp, #16
    cc7e:	ad05      	add	r5, sp, #20
    cc80:	4604      	mov	r4, r0
    cc82:	7800      	ldrb	r0, [r0, #0]
    cc84:	9300      	str	r3, [sp, #0]
    cc86:	9501      	str	r5, [sp, #4]
    cc88:	f10d 030f 	add.w	r3, sp, #15
    cc8c:	460e      	mov	r6, r1
    cc8e:	f004 fecf 	bl	11a30 <bsec_Serialization_checkSerializationHeader>
    cc92:	f99d 000f 	ldrsb.w	r0, [sp, #15]
    cc96:	b938      	cbnz	r0, cca8 <bsec_SensorHeatCompensator_setState+0x30>
    cc98:	4629      	mov	r1, r5
    cc9a:	4630      	mov	r0, r6
    cc9c:	f003 f804 	bl	fca8 <bsec_g_Entity_parseAndDeserialize>
    cca0:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    cca4:	f99d 000f 	ldrsb.w	r0, [sp, #15]
    cca8:	b006      	add	sp, #24
    ccaa:	bd70      	pop	{r4, r5, r6, pc}
    ccac:	0000      	movs	r0, r0
	...

0000ccb0 <bsec_rt_roundd>:
    ccb0:	b538      	push	{r3, r4, r5, lr}
    ccb2:	ec55 4b10 	vmov	r4, r5, d0
    ccb6:	f022 fbab 	bl	2f410 <fabs>
    ccba:	2200      	movs	r2, #0
    ccbc:	4b1a      	ldr	r3, [pc, #104]	; (cd28 <bsec_rt_roundd+0x78>)
    ccbe:	ec51 0b10 	vmov	r0, r1, d0
    ccc2:	f000 fc65 	bl	d590 <__aeabi_dcmplt>
    ccc6:	b180      	cbz	r0, ccea <bsec_rt_roundd+0x3a>
    ccc8:	2200      	movs	r2, #0
    ccca:	4b18      	ldr	r3, [pc, #96]	; (cd2c <bsec_rt_roundd+0x7c>)
    cccc:	4620      	mov	r0, r4
    ccce:	4629      	mov	r1, r5
    ccd0:	f000 fc72 	bl	d5b8 <__aeabi_dcmpge>
    ccd4:	b960      	cbnz	r0, ccf0 <bsec_rt_roundd+0x40>
    ccd6:	2200      	movs	r2, #0
    ccd8:	4b15      	ldr	r3, [pc, #84]	; (cd30 <bsec_rt_roundd+0x80>)
    ccda:	4620      	mov	r0, r4
    ccdc:	4629      	mov	r1, r5
    ccde:	f000 fc75 	bl	d5cc <__aeabi_dcmpgt>
    cce2:	b188      	cbz	r0, cd08 <bsec_rt_roundd+0x58>
    cce4:	ed9f 0b0e 	vldr	d0, [pc, #56]	; cd20 <bsec_rt_roundd+0x70>
    cce8:	bd38      	pop	{r3, r4, r5, pc}
    ccea:	ec45 4b10 	vmov	d0, r4, r5
    ccee:	bd38      	pop	{r3, r4, r5, pc}
    ccf0:	4620      	mov	r0, r4
    ccf2:	4629      	mov	r1, r5
    ccf4:	4b0d      	ldr	r3, [pc, #52]	; (cd2c <bsec_rt_roundd+0x7c>)
    ccf6:	2200      	movs	r2, #0
    ccf8:	f000 f822 	bl	cd40 <__adddf3>
    ccfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    cd00:	ec41 0b10 	vmov	d0, r0, r1
    cd04:	f006 b998 	b.w	13038 <floor>
    cd08:	4620      	mov	r0, r4
    cd0a:	4629      	mov	r1, r5
    cd0c:	4b07      	ldr	r3, [pc, #28]	; (cd2c <bsec_rt_roundd+0x7c>)
    cd0e:	2200      	movs	r2, #0
    cd10:	f000 f814 	bl	cd3c <__aeabi_dsub>
    cd14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    cd18:	ec41 0b10 	vmov	d0, r0, r1
    cd1c:	f006 b90c 	b.w	12f38 <ceil>
	...
    cd28:	43300000 	.word	0x43300000
    cd2c:	3fe00000 	.word	0x3fe00000
    cd30:	bfe00000 	.word	0xbfe00000

0000cd34 <__aeabi_drsub>:
    cd34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    cd38:	e002      	b.n	cd40 <__adddf3>
    cd3a:	bf00      	nop

0000cd3c <__aeabi_dsub>:
    cd3c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000cd40 <__adddf3>:
    cd40:	b530      	push	{r4, r5, lr}
    cd42:	ea4f 0441 	mov.w	r4, r1, lsl #1
    cd46:	ea4f 0543 	mov.w	r5, r3, lsl #1
    cd4a:	ea94 0f05 	teq	r4, r5
    cd4e:	bf08      	it	eq
    cd50:	ea90 0f02 	teqeq	r0, r2
    cd54:	bf1f      	itttt	ne
    cd56:	ea54 0c00 	orrsne.w	ip, r4, r0
    cd5a:	ea55 0c02 	orrsne.w	ip, r5, r2
    cd5e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    cd62:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    cd66:	f000 80e2 	beq.w	cf2e <__adddf3+0x1ee>
    cd6a:	ea4f 5454 	mov.w	r4, r4, lsr #21
    cd6e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    cd72:	bfb8      	it	lt
    cd74:	426d      	neglt	r5, r5
    cd76:	dd0c      	ble.n	cd92 <__adddf3+0x52>
    cd78:	442c      	add	r4, r5
    cd7a:	ea80 0202 	eor.w	r2, r0, r2
    cd7e:	ea81 0303 	eor.w	r3, r1, r3
    cd82:	ea82 0000 	eor.w	r0, r2, r0
    cd86:	ea83 0101 	eor.w	r1, r3, r1
    cd8a:	ea80 0202 	eor.w	r2, r0, r2
    cd8e:	ea81 0303 	eor.w	r3, r1, r3
    cd92:	2d36      	cmp	r5, #54	; 0x36
    cd94:	bf88      	it	hi
    cd96:	bd30      	pophi	{r4, r5, pc}
    cd98:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    cd9c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    cda0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    cda4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    cda8:	d002      	beq.n	cdb0 <__adddf3+0x70>
    cdaa:	4240      	negs	r0, r0
    cdac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    cdb0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    cdb4:	ea4f 3303 	mov.w	r3, r3, lsl #12
    cdb8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    cdbc:	d002      	beq.n	cdc4 <__adddf3+0x84>
    cdbe:	4252      	negs	r2, r2
    cdc0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    cdc4:	ea94 0f05 	teq	r4, r5
    cdc8:	f000 80a7 	beq.w	cf1a <__adddf3+0x1da>
    cdcc:	f1a4 0401 	sub.w	r4, r4, #1
    cdd0:	f1d5 0e20 	rsbs	lr, r5, #32
    cdd4:	db0d      	blt.n	cdf2 <__adddf3+0xb2>
    cdd6:	fa02 fc0e 	lsl.w	ip, r2, lr
    cdda:	fa22 f205 	lsr.w	r2, r2, r5
    cdde:	1880      	adds	r0, r0, r2
    cde0:	f141 0100 	adc.w	r1, r1, #0
    cde4:	fa03 f20e 	lsl.w	r2, r3, lr
    cde8:	1880      	adds	r0, r0, r2
    cdea:	fa43 f305 	asr.w	r3, r3, r5
    cdee:	4159      	adcs	r1, r3
    cdf0:	e00e      	b.n	ce10 <__adddf3+0xd0>
    cdf2:	f1a5 0520 	sub.w	r5, r5, #32
    cdf6:	f10e 0e20 	add.w	lr, lr, #32
    cdfa:	2a01      	cmp	r2, #1
    cdfc:	fa03 fc0e 	lsl.w	ip, r3, lr
    ce00:	bf28      	it	cs
    ce02:	f04c 0c02 	orrcs.w	ip, ip, #2
    ce06:	fa43 f305 	asr.w	r3, r3, r5
    ce0a:	18c0      	adds	r0, r0, r3
    ce0c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    ce10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    ce14:	d507      	bpl.n	ce26 <__adddf3+0xe6>
    ce16:	f04f 0e00 	mov.w	lr, #0
    ce1a:	f1dc 0c00 	rsbs	ip, ip, #0
    ce1e:	eb7e 0000 	sbcs.w	r0, lr, r0
    ce22:	eb6e 0101 	sbc.w	r1, lr, r1
    ce26:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    ce2a:	d31b      	bcc.n	ce64 <__adddf3+0x124>
    ce2c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    ce30:	d30c      	bcc.n	ce4c <__adddf3+0x10c>
    ce32:	0849      	lsrs	r1, r1, #1
    ce34:	ea5f 0030 	movs.w	r0, r0, rrx
    ce38:	ea4f 0c3c 	mov.w	ip, ip, rrx
    ce3c:	f104 0401 	add.w	r4, r4, #1
    ce40:	ea4f 5244 	mov.w	r2, r4, lsl #21
    ce44:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    ce48:	f080 809a 	bcs.w	cf80 <__adddf3+0x240>
    ce4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    ce50:	bf08      	it	eq
    ce52:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    ce56:	f150 0000 	adcs.w	r0, r0, #0
    ce5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    ce5e:	ea41 0105 	orr.w	r1, r1, r5
    ce62:	bd30      	pop	{r4, r5, pc}
    ce64:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    ce68:	4140      	adcs	r0, r0
    ce6a:	eb41 0101 	adc.w	r1, r1, r1
    ce6e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    ce72:	f1a4 0401 	sub.w	r4, r4, #1
    ce76:	d1e9      	bne.n	ce4c <__adddf3+0x10c>
    ce78:	f091 0f00 	teq	r1, #0
    ce7c:	bf04      	itt	eq
    ce7e:	4601      	moveq	r1, r0
    ce80:	2000      	moveq	r0, #0
    ce82:	fab1 f381 	clz	r3, r1
    ce86:	bf08      	it	eq
    ce88:	3320      	addeq	r3, #32
    ce8a:	f1a3 030b 	sub.w	r3, r3, #11
    ce8e:	f1b3 0220 	subs.w	r2, r3, #32
    ce92:	da0c      	bge.n	ceae <__adddf3+0x16e>
    ce94:	320c      	adds	r2, #12
    ce96:	dd08      	ble.n	ceaa <__adddf3+0x16a>
    ce98:	f102 0c14 	add.w	ip, r2, #20
    ce9c:	f1c2 020c 	rsb	r2, r2, #12
    cea0:	fa01 f00c 	lsl.w	r0, r1, ip
    cea4:	fa21 f102 	lsr.w	r1, r1, r2
    cea8:	e00c      	b.n	cec4 <__adddf3+0x184>
    ceaa:	f102 0214 	add.w	r2, r2, #20
    ceae:	bfd8      	it	le
    ceb0:	f1c2 0c20 	rsble	ip, r2, #32
    ceb4:	fa01 f102 	lsl.w	r1, r1, r2
    ceb8:	fa20 fc0c 	lsr.w	ip, r0, ip
    cebc:	bfdc      	itt	le
    cebe:	ea41 010c 	orrle.w	r1, r1, ip
    cec2:	4090      	lslle	r0, r2
    cec4:	1ae4      	subs	r4, r4, r3
    cec6:	bfa2      	ittt	ge
    cec8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    cecc:	4329      	orrge	r1, r5
    cece:	bd30      	popge	{r4, r5, pc}
    ced0:	ea6f 0404 	mvn.w	r4, r4
    ced4:	3c1f      	subs	r4, #31
    ced6:	da1c      	bge.n	cf12 <__adddf3+0x1d2>
    ced8:	340c      	adds	r4, #12
    ceda:	dc0e      	bgt.n	cefa <__adddf3+0x1ba>
    cedc:	f104 0414 	add.w	r4, r4, #20
    cee0:	f1c4 0220 	rsb	r2, r4, #32
    cee4:	fa20 f004 	lsr.w	r0, r0, r4
    cee8:	fa01 f302 	lsl.w	r3, r1, r2
    ceec:	ea40 0003 	orr.w	r0, r0, r3
    cef0:	fa21 f304 	lsr.w	r3, r1, r4
    cef4:	ea45 0103 	orr.w	r1, r5, r3
    cef8:	bd30      	pop	{r4, r5, pc}
    cefa:	f1c4 040c 	rsb	r4, r4, #12
    cefe:	f1c4 0220 	rsb	r2, r4, #32
    cf02:	fa20 f002 	lsr.w	r0, r0, r2
    cf06:	fa01 f304 	lsl.w	r3, r1, r4
    cf0a:	ea40 0003 	orr.w	r0, r0, r3
    cf0e:	4629      	mov	r1, r5
    cf10:	bd30      	pop	{r4, r5, pc}
    cf12:	fa21 f004 	lsr.w	r0, r1, r4
    cf16:	4629      	mov	r1, r5
    cf18:	bd30      	pop	{r4, r5, pc}
    cf1a:	f094 0f00 	teq	r4, #0
    cf1e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    cf22:	bf06      	itte	eq
    cf24:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    cf28:	3401      	addeq	r4, #1
    cf2a:	3d01      	subne	r5, #1
    cf2c:	e74e      	b.n	cdcc <__adddf3+0x8c>
    cf2e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    cf32:	bf18      	it	ne
    cf34:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    cf38:	d029      	beq.n	cf8e <__adddf3+0x24e>
    cf3a:	ea94 0f05 	teq	r4, r5
    cf3e:	bf08      	it	eq
    cf40:	ea90 0f02 	teqeq	r0, r2
    cf44:	d005      	beq.n	cf52 <__adddf3+0x212>
    cf46:	ea54 0c00 	orrs.w	ip, r4, r0
    cf4a:	bf04      	itt	eq
    cf4c:	4619      	moveq	r1, r3
    cf4e:	4610      	moveq	r0, r2
    cf50:	bd30      	pop	{r4, r5, pc}
    cf52:	ea91 0f03 	teq	r1, r3
    cf56:	bf1e      	ittt	ne
    cf58:	2100      	movne	r1, #0
    cf5a:	2000      	movne	r0, #0
    cf5c:	bd30      	popne	{r4, r5, pc}
    cf5e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    cf62:	d105      	bne.n	cf70 <__adddf3+0x230>
    cf64:	0040      	lsls	r0, r0, #1
    cf66:	4149      	adcs	r1, r1
    cf68:	bf28      	it	cs
    cf6a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    cf6e:	bd30      	pop	{r4, r5, pc}
    cf70:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    cf74:	bf3c      	itt	cc
    cf76:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    cf7a:	bd30      	popcc	{r4, r5, pc}
    cf7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    cf80:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    cf84:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    cf88:	f04f 0000 	mov.w	r0, #0
    cf8c:	bd30      	pop	{r4, r5, pc}
    cf8e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    cf92:	bf1a      	itte	ne
    cf94:	4619      	movne	r1, r3
    cf96:	4610      	movne	r0, r2
    cf98:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    cf9c:	bf1c      	itt	ne
    cf9e:	460b      	movne	r3, r1
    cfa0:	4602      	movne	r2, r0
    cfa2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    cfa6:	bf06      	itte	eq
    cfa8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    cfac:	ea91 0f03 	teqeq	r1, r3
    cfb0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    cfb4:	bd30      	pop	{r4, r5, pc}
    cfb6:	bf00      	nop

0000cfb8 <__aeabi_ui2d>:
    cfb8:	f090 0f00 	teq	r0, #0
    cfbc:	bf04      	itt	eq
    cfbe:	2100      	moveq	r1, #0
    cfc0:	4770      	bxeq	lr
    cfc2:	b530      	push	{r4, r5, lr}
    cfc4:	f44f 6480 	mov.w	r4, #1024	; 0x400
    cfc8:	f104 0432 	add.w	r4, r4, #50	; 0x32
    cfcc:	f04f 0500 	mov.w	r5, #0
    cfd0:	f04f 0100 	mov.w	r1, #0
    cfd4:	e750      	b.n	ce78 <__adddf3+0x138>
    cfd6:	bf00      	nop

0000cfd8 <__aeabi_i2d>:
    cfd8:	f090 0f00 	teq	r0, #0
    cfdc:	bf04      	itt	eq
    cfde:	2100      	moveq	r1, #0
    cfe0:	4770      	bxeq	lr
    cfe2:	b530      	push	{r4, r5, lr}
    cfe4:	f44f 6480 	mov.w	r4, #1024	; 0x400
    cfe8:	f104 0432 	add.w	r4, r4, #50	; 0x32
    cfec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    cff0:	bf48      	it	mi
    cff2:	4240      	negmi	r0, r0
    cff4:	f04f 0100 	mov.w	r1, #0
    cff8:	e73e      	b.n	ce78 <__adddf3+0x138>
    cffa:	bf00      	nop

0000cffc <__aeabi_f2d>:
    cffc:	0042      	lsls	r2, r0, #1
    cffe:	ea4f 01e2 	mov.w	r1, r2, asr #3
    d002:	ea4f 0131 	mov.w	r1, r1, rrx
    d006:	ea4f 7002 	mov.w	r0, r2, lsl #28
    d00a:	bf1f      	itttt	ne
    d00c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    d010:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    d014:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    d018:	4770      	bxne	lr
    d01a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    d01e:	bf08      	it	eq
    d020:	4770      	bxeq	lr
    d022:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    d026:	bf04      	itt	eq
    d028:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    d02c:	4770      	bxeq	lr
    d02e:	b530      	push	{r4, r5, lr}
    d030:	f44f 7460 	mov.w	r4, #896	; 0x380
    d034:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    d038:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    d03c:	e71c      	b.n	ce78 <__adddf3+0x138>
    d03e:	bf00      	nop

0000d040 <__aeabi_ul2d>:
    d040:	ea50 0201 	orrs.w	r2, r0, r1
    d044:	bf08      	it	eq
    d046:	4770      	bxeq	lr
    d048:	b530      	push	{r4, r5, lr}
    d04a:	f04f 0500 	mov.w	r5, #0
    d04e:	e00a      	b.n	d066 <__aeabi_l2d+0x16>

0000d050 <__aeabi_l2d>:
    d050:	ea50 0201 	orrs.w	r2, r0, r1
    d054:	bf08      	it	eq
    d056:	4770      	bxeq	lr
    d058:	b530      	push	{r4, r5, lr}
    d05a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    d05e:	d502      	bpl.n	d066 <__aeabi_l2d+0x16>
    d060:	4240      	negs	r0, r0
    d062:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    d066:	f44f 6480 	mov.w	r4, #1024	; 0x400
    d06a:	f104 0432 	add.w	r4, r4, #50	; 0x32
    d06e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    d072:	f43f aed8 	beq.w	ce26 <__adddf3+0xe6>
    d076:	f04f 0203 	mov.w	r2, #3
    d07a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    d07e:	bf18      	it	ne
    d080:	3203      	addne	r2, #3
    d082:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    d086:	bf18      	it	ne
    d088:	3203      	addne	r2, #3
    d08a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    d08e:	f1c2 0320 	rsb	r3, r2, #32
    d092:	fa00 fc03 	lsl.w	ip, r0, r3
    d096:	fa20 f002 	lsr.w	r0, r0, r2
    d09a:	fa01 fe03 	lsl.w	lr, r1, r3
    d09e:	ea40 000e 	orr.w	r0, r0, lr
    d0a2:	fa21 f102 	lsr.w	r1, r1, r2
    d0a6:	4414      	add	r4, r2
    d0a8:	e6bd      	b.n	ce26 <__adddf3+0xe6>
    d0aa:	bf00      	nop

0000d0ac <__aeabi_dmul>:
    d0ac:	b570      	push	{r4, r5, r6, lr}
    d0ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
    d0b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    d0b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    d0ba:	bf1d      	ittte	ne
    d0bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    d0c0:	ea94 0f0c 	teqne	r4, ip
    d0c4:	ea95 0f0c 	teqne	r5, ip
    d0c8:	f000 f8de 	bleq	d288 <__aeabi_dmul+0x1dc>
    d0cc:	442c      	add	r4, r5
    d0ce:	ea81 0603 	eor.w	r6, r1, r3
    d0d2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    d0d6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    d0da:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    d0de:	bf18      	it	ne
    d0e0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    d0e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    d0e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d0ec:	d038      	beq.n	d160 <__aeabi_dmul+0xb4>
    d0ee:	fba0 ce02 	umull	ip, lr, r0, r2
    d0f2:	f04f 0500 	mov.w	r5, #0
    d0f6:	fbe1 e502 	umlal	lr, r5, r1, r2
    d0fa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    d0fe:	fbe0 e503 	umlal	lr, r5, r0, r3
    d102:	f04f 0600 	mov.w	r6, #0
    d106:	fbe1 5603 	umlal	r5, r6, r1, r3
    d10a:	f09c 0f00 	teq	ip, #0
    d10e:	bf18      	it	ne
    d110:	f04e 0e01 	orrne.w	lr, lr, #1
    d114:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    d118:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    d11c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    d120:	d204      	bcs.n	d12c <__aeabi_dmul+0x80>
    d122:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    d126:	416d      	adcs	r5, r5
    d128:	eb46 0606 	adc.w	r6, r6, r6
    d12c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    d130:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    d134:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    d138:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    d13c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    d140:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    d144:	bf88      	it	hi
    d146:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    d14a:	d81e      	bhi.n	d18a <__aeabi_dmul+0xde>
    d14c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    d150:	bf08      	it	eq
    d152:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    d156:	f150 0000 	adcs.w	r0, r0, #0
    d15a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    d15e:	bd70      	pop	{r4, r5, r6, pc}
    d160:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    d164:	ea46 0101 	orr.w	r1, r6, r1
    d168:	ea40 0002 	orr.w	r0, r0, r2
    d16c:	ea81 0103 	eor.w	r1, r1, r3
    d170:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    d174:	bfc2      	ittt	gt
    d176:	ebd4 050c 	rsbsgt	r5, r4, ip
    d17a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    d17e:	bd70      	popgt	{r4, r5, r6, pc}
    d180:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    d184:	f04f 0e00 	mov.w	lr, #0
    d188:	3c01      	subs	r4, #1
    d18a:	f300 80ab 	bgt.w	d2e4 <__aeabi_dmul+0x238>
    d18e:	f114 0f36 	cmn.w	r4, #54	; 0x36
    d192:	bfde      	ittt	le
    d194:	2000      	movle	r0, #0
    d196:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    d19a:	bd70      	pople	{r4, r5, r6, pc}
    d19c:	f1c4 0400 	rsb	r4, r4, #0
    d1a0:	3c20      	subs	r4, #32
    d1a2:	da35      	bge.n	d210 <__aeabi_dmul+0x164>
    d1a4:	340c      	adds	r4, #12
    d1a6:	dc1b      	bgt.n	d1e0 <__aeabi_dmul+0x134>
    d1a8:	f104 0414 	add.w	r4, r4, #20
    d1ac:	f1c4 0520 	rsb	r5, r4, #32
    d1b0:	fa00 f305 	lsl.w	r3, r0, r5
    d1b4:	fa20 f004 	lsr.w	r0, r0, r4
    d1b8:	fa01 f205 	lsl.w	r2, r1, r5
    d1bc:	ea40 0002 	orr.w	r0, r0, r2
    d1c0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    d1c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    d1c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    d1cc:	fa21 f604 	lsr.w	r6, r1, r4
    d1d0:	eb42 0106 	adc.w	r1, r2, r6
    d1d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    d1d8:	bf08      	it	eq
    d1da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    d1de:	bd70      	pop	{r4, r5, r6, pc}
    d1e0:	f1c4 040c 	rsb	r4, r4, #12
    d1e4:	f1c4 0520 	rsb	r5, r4, #32
    d1e8:	fa00 f304 	lsl.w	r3, r0, r4
    d1ec:	fa20 f005 	lsr.w	r0, r0, r5
    d1f0:	fa01 f204 	lsl.w	r2, r1, r4
    d1f4:	ea40 0002 	orr.w	r0, r0, r2
    d1f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    d1fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    d200:	f141 0100 	adc.w	r1, r1, #0
    d204:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    d208:	bf08      	it	eq
    d20a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    d20e:	bd70      	pop	{r4, r5, r6, pc}
    d210:	f1c4 0520 	rsb	r5, r4, #32
    d214:	fa00 f205 	lsl.w	r2, r0, r5
    d218:	ea4e 0e02 	orr.w	lr, lr, r2
    d21c:	fa20 f304 	lsr.w	r3, r0, r4
    d220:	fa01 f205 	lsl.w	r2, r1, r5
    d224:	ea43 0302 	orr.w	r3, r3, r2
    d228:	fa21 f004 	lsr.w	r0, r1, r4
    d22c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    d230:	fa21 f204 	lsr.w	r2, r1, r4
    d234:	ea20 0002 	bic.w	r0, r0, r2
    d238:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    d23c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    d240:	bf08      	it	eq
    d242:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    d246:	bd70      	pop	{r4, r5, r6, pc}
    d248:	f094 0f00 	teq	r4, #0
    d24c:	d10f      	bne.n	d26e <__aeabi_dmul+0x1c2>
    d24e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    d252:	0040      	lsls	r0, r0, #1
    d254:	eb41 0101 	adc.w	r1, r1, r1
    d258:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    d25c:	bf08      	it	eq
    d25e:	3c01      	subeq	r4, #1
    d260:	d0f7      	beq.n	d252 <__aeabi_dmul+0x1a6>
    d262:	ea41 0106 	orr.w	r1, r1, r6
    d266:	f095 0f00 	teq	r5, #0
    d26a:	bf18      	it	ne
    d26c:	4770      	bxne	lr
    d26e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    d272:	0052      	lsls	r2, r2, #1
    d274:	eb43 0303 	adc.w	r3, r3, r3
    d278:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    d27c:	bf08      	it	eq
    d27e:	3d01      	subeq	r5, #1
    d280:	d0f7      	beq.n	d272 <__aeabi_dmul+0x1c6>
    d282:	ea43 0306 	orr.w	r3, r3, r6
    d286:	4770      	bx	lr
    d288:	ea94 0f0c 	teq	r4, ip
    d28c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    d290:	bf18      	it	ne
    d292:	ea95 0f0c 	teqne	r5, ip
    d296:	d00c      	beq.n	d2b2 <__aeabi_dmul+0x206>
    d298:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    d29c:	bf18      	it	ne
    d29e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    d2a2:	d1d1      	bne.n	d248 <__aeabi_dmul+0x19c>
    d2a4:	ea81 0103 	eor.w	r1, r1, r3
    d2a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    d2ac:	f04f 0000 	mov.w	r0, #0
    d2b0:	bd70      	pop	{r4, r5, r6, pc}
    d2b2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    d2b6:	bf06      	itte	eq
    d2b8:	4610      	moveq	r0, r2
    d2ba:	4619      	moveq	r1, r3
    d2bc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    d2c0:	d019      	beq.n	d2f6 <__aeabi_dmul+0x24a>
    d2c2:	ea94 0f0c 	teq	r4, ip
    d2c6:	d102      	bne.n	d2ce <__aeabi_dmul+0x222>
    d2c8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    d2cc:	d113      	bne.n	d2f6 <__aeabi_dmul+0x24a>
    d2ce:	ea95 0f0c 	teq	r5, ip
    d2d2:	d105      	bne.n	d2e0 <__aeabi_dmul+0x234>
    d2d4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    d2d8:	bf1c      	itt	ne
    d2da:	4610      	movne	r0, r2
    d2dc:	4619      	movne	r1, r3
    d2de:	d10a      	bne.n	d2f6 <__aeabi_dmul+0x24a>
    d2e0:	ea81 0103 	eor.w	r1, r1, r3
    d2e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    d2e8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    d2ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d2f0:	f04f 0000 	mov.w	r0, #0
    d2f4:	bd70      	pop	{r4, r5, r6, pc}
    d2f6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    d2fa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    d2fe:	bd70      	pop	{r4, r5, r6, pc}

0000d300 <__aeabi_ddiv>:
    d300:	b570      	push	{r4, r5, r6, lr}
    d302:	f04f 0cff 	mov.w	ip, #255	; 0xff
    d306:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    d30a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    d30e:	bf1d      	ittte	ne
    d310:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    d314:	ea94 0f0c 	teqne	r4, ip
    d318:	ea95 0f0c 	teqne	r5, ip
    d31c:	f000 f8a7 	bleq	d46e <__aeabi_ddiv+0x16e>
    d320:	eba4 0405 	sub.w	r4, r4, r5
    d324:	ea81 0e03 	eor.w	lr, r1, r3
    d328:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    d32c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    d330:	f000 8088 	beq.w	d444 <__aeabi_ddiv+0x144>
    d334:	ea4f 3303 	mov.w	r3, r3, lsl #12
    d338:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    d33c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    d340:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    d344:	ea4f 2202 	mov.w	r2, r2, lsl #8
    d348:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    d34c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    d350:	ea4f 2600 	mov.w	r6, r0, lsl #8
    d354:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    d358:	429d      	cmp	r5, r3
    d35a:	bf08      	it	eq
    d35c:	4296      	cmpeq	r6, r2
    d35e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    d362:	f504 7440 	add.w	r4, r4, #768	; 0x300
    d366:	d202      	bcs.n	d36e <__aeabi_ddiv+0x6e>
    d368:	085b      	lsrs	r3, r3, #1
    d36a:	ea4f 0232 	mov.w	r2, r2, rrx
    d36e:	1ab6      	subs	r6, r6, r2
    d370:	eb65 0503 	sbc.w	r5, r5, r3
    d374:	085b      	lsrs	r3, r3, #1
    d376:	ea4f 0232 	mov.w	r2, r2, rrx
    d37a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    d37e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    d382:	ebb6 0e02 	subs.w	lr, r6, r2
    d386:	eb75 0e03 	sbcs.w	lr, r5, r3
    d38a:	bf22      	ittt	cs
    d38c:	1ab6      	subcs	r6, r6, r2
    d38e:	4675      	movcs	r5, lr
    d390:	ea40 000c 	orrcs.w	r0, r0, ip
    d394:	085b      	lsrs	r3, r3, #1
    d396:	ea4f 0232 	mov.w	r2, r2, rrx
    d39a:	ebb6 0e02 	subs.w	lr, r6, r2
    d39e:	eb75 0e03 	sbcs.w	lr, r5, r3
    d3a2:	bf22      	ittt	cs
    d3a4:	1ab6      	subcs	r6, r6, r2
    d3a6:	4675      	movcs	r5, lr
    d3a8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    d3ac:	085b      	lsrs	r3, r3, #1
    d3ae:	ea4f 0232 	mov.w	r2, r2, rrx
    d3b2:	ebb6 0e02 	subs.w	lr, r6, r2
    d3b6:	eb75 0e03 	sbcs.w	lr, r5, r3
    d3ba:	bf22      	ittt	cs
    d3bc:	1ab6      	subcs	r6, r6, r2
    d3be:	4675      	movcs	r5, lr
    d3c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    d3c4:	085b      	lsrs	r3, r3, #1
    d3c6:	ea4f 0232 	mov.w	r2, r2, rrx
    d3ca:	ebb6 0e02 	subs.w	lr, r6, r2
    d3ce:	eb75 0e03 	sbcs.w	lr, r5, r3
    d3d2:	bf22      	ittt	cs
    d3d4:	1ab6      	subcs	r6, r6, r2
    d3d6:	4675      	movcs	r5, lr
    d3d8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    d3dc:	ea55 0e06 	orrs.w	lr, r5, r6
    d3e0:	d018      	beq.n	d414 <__aeabi_ddiv+0x114>
    d3e2:	ea4f 1505 	mov.w	r5, r5, lsl #4
    d3e6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    d3ea:	ea4f 1606 	mov.w	r6, r6, lsl #4
    d3ee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    d3f2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    d3f6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    d3fa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    d3fe:	d1c0      	bne.n	d382 <__aeabi_ddiv+0x82>
    d400:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    d404:	d10b      	bne.n	d41e <__aeabi_ddiv+0x11e>
    d406:	ea41 0100 	orr.w	r1, r1, r0
    d40a:	f04f 0000 	mov.w	r0, #0
    d40e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    d412:	e7b6      	b.n	d382 <__aeabi_ddiv+0x82>
    d414:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    d418:	bf04      	itt	eq
    d41a:	4301      	orreq	r1, r0
    d41c:	2000      	moveq	r0, #0
    d41e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    d422:	bf88      	it	hi
    d424:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    d428:	f63f aeaf 	bhi.w	d18a <__aeabi_dmul+0xde>
    d42c:	ebb5 0c03 	subs.w	ip, r5, r3
    d430:	bf04      	itt	eq
    d432:	ebb6 0c02 	subseq.w	ip, r6, r2
    d436:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    d43a:	f150 0000 	adcs.w	r0, r0, #0
    d43e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    d442:	bd70      	pop	{r4, r5, r6, pc}
    d444:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    d448:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    d44c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    d450:	bfc2      	ittt	gt
    d452:	ebd4 050c 	rsbsgt	r5, r4, ip
    d456:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    d45a:	bd70      	popgt	{r4, r5, r6, pc}
    d45c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    d460:	f04f 0e00 	mov.w	lr, #0
    d464:	3c01      	subs	r4, #1
    d466:	e690      	b.n	d18a <__aeabi_dmul+0xde>
    d468:	ea45 0e06 	orr.w	lr, r5, r6
    d46c:	e68d      	b.n	d18a <__aeabi_dmul+0xde>
    d46e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    d472:	ea94 0f0c 	teq	r4, ip
    d476:	bf08      	it	eq
    d478:	ea95 0f0c 	teqeq	r5, ip
    d47c:	f43f af3b 	beq.w	d2f6 <__aeabi_dmul+0x24a>
    d480:	ea94 0f0c 	teq	r4, ip
    d484:	d10a      	bne.n	d49c <__aeabi_ddiv+0x19c>
    d486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    d48a:	f47f af34 	bne.w	d2f6 <__aeabi_dmul+0x24a>
    d48e:	ea95 0f0c 	teq	r5, ip
    d492:	f47f af25 	bne.w	d2e0 <__aeabi_dmul+0x234>
    d496:	4610      	mov	r0, r2
    d498:	4619      	mov	r1, r3
    d49a:	e72c      	b.n	d2f6 <__aeabi_dmul+0x24a>
    d49c:	ea95 0f0c 	teq	r5, ip
    d4a0:	d106      	bne.n	d4b0 <__aeabi_ddiv+0x1b0>
    d4a2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    d4a6:	f43f aefd 	beq.w	d2a4 <__aeabi_dmul+0x1f8>
    d4aa:	4610      	mov	r0, r2
    d4ac:	4619      	mov	r1, r3
    d4ae:	e722      	b.n	d2f6 <__aeabi_dmul+0x24a>
    d4b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    d4b4:	bf18      	it	ne
    d4b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    d4ba:	f47f aec5 	bne.w	d248 <__aeabi_dmul+0x19c>
    d4be:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    d4c2:	f47f af0d 	bne.w	d2e0 <__aeabi_dmul+0x234>
    d4c6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    d4ca:	f47f aeeb 	bne.w	d2a4 <__aeabi_dmul+0x1f8>
    d4ce:	e712      	b.n	d2f6 <__aeabi_dmul+0x24a>

0000d4d0 <__gedf2>:
    d4d0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    d4d4:	e006      	b.n	d4e4 <__cmpdf2+0x4>
    d4d6:	bf00      	nop

0000d4d8 <__ledf2>:
    d4d8:	f04f 0c01 	mov.w	ip, #1
    d4dc:	e002      	b.n	d4e4 <__cmpdf2+0x4>
    d4de:	bf00      	nop

0000d4e0 <__cmpdf2>:
    d4e0:	f04f 0c01 	mov.w	ip, #1
    d4e4:	f84d cd04 	str.w	ip, [sp, #-4]!
    d4e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    d4ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    d4f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    d4f4:	bf18      	it	ne
    d4f6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    d4fa:	d01b      	beq.n	d534 <__cmpdf2+0x54>
    d4fc:	b001      	add	sp, #4
    d4fe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    d502:	bf0c      	ite	eq
    d504:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    d508:	ea91 0f03 	teqne	r1, r3
    d50c:	bf02      	ittt	eq
    d50e:	ea90 0f02 	teqeq	r0, r2
    d512:	2000      	moveq	r0, #0
    d514:	4770      	bxeq	lr
    d516:	f110 0f00 	cmn.w	r0, #0
    d51a:	ea91 0f03 	teq	r1, r3
    d51e:	bf58      	it	pl
    d520:	4299      	cmppl	r1, r3
    d522:	bf08      	it	eq
    d524:	4290      	cmpeq	r0, r2
    d526:	bf2c      	ite	cs
    d528:	17d8      	asrcs	r0, r3, #31
    d52a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    d52e:	f040 0001 	orr.w	r0, r0, #1
    d532:	4770      	bx	lr
    d534:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    d538:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    d53c:	d102      	bne.n	d544 <__cmpdf2+0x64>
    d53e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    d542:	d107      	bne.n	d554 <__cmpdf2+0x74>
    d544:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    d548:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    d54c:	d1d6      	bne.n	d4fc <__cmpdf2+0x1c>
    d54e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    d552:	d0d3      	beq.n	d4fc <__cmpdf2+0x1c>
    d554:	f85d 0b04 	ldr.w	r0, [sp], #4
    d558:	4770      	bx	lr
    d55a:	bf00      	nop

0000d55c <__aeabi_cdrcmple>:
    d55c:	4684      	mov	ip, r0
    d55e:	4610      	mov	r0, r2
    d560:	4662      	mov	r2, ip
    d562:	468c      	mov	ip, r1
    d564:	4619      	mov	r1, r3
    d566:	4663      	mov	r3, ip
    d568:	e000      	b.n	d56c <__aeabi_cdcmpeq>
    d56a:	bf00      	nop

0000d56c <__aeabi_cdcmpeq>:
    d56c:	b501      	push	{r0, lr}
    d56e:	f7ff ffb7 	bl	d4e0 <__cmpdf2>
    d572:	2800      	cmp	r0, #0
    d574:	bf48      	it	mi
    d576:	f110 0f00 	cmnmi.w	r0, #0
    d57a:	bd01      	pop	{r0, pc}

0000d57c <__aeabi_dcmpeq>:
    d57c:	f84d ed08 	str.w	lr, [sp, #-8]!
    d580:	f7ff fff4 	bl	d56c <__aeabi_cdcmpeq>
    d584:	bf0c      	ite	eq
    d586:	2001      	moveq	r0, #1
    d588:	2000      	movne	r0, #0
    d58a:	f85d fb08 	ldr.w	pc, [sp], #8
    d58e:	bf00      	nop

0000d590 <__aeabi_dcmplt>:
    d590:	f84d ed08 	str.w	lr, [sp, #-8]!
    d594:	f7ff ffea 	bl	d56c <__aeabi_cdcmpeq>
    d598:	bf34      	ite	cc
    d59a:	2001      	movcc	r0, #1
    d59c:	2000      	movcs	r0, #0
    d59e:	f85d fb08 	ldr.w	pc, [sp], #8
    d5a2:	bf00      	nop

0000d5a4 <__aeabi_dcmple>:
    d5a4:	f84d ed08 	str.w	lr, [sp, #-8]!
    d5a8:	f7ff ffe0 	bl	d56c <__aeabi_cdcmpeq>
    d5ac:	bf94      	ite	ls
    d5ae:	2001      	movls	r0, #1
    d5b0:	2000      	movhi	r0, #0
    d5b2:	f85d fb08 	ldr.w	pc, [sp], #8
    d5b6:	bf00      	nop

0000d5b8 <__aeabi_dcmpge>:
    d5b8:	f84d ed08 	str.w	lr, [sp, #-8]!
    d5bc:	f7ff ffce 	bl	d55c <__aeabi_cdrcmple>
    d5c0:	bf94      	ite	ls
    d5c2:	2001      	movls	r0, #1
    d5c4:	2000      	movhi	r0, #0
    d5c6:	f85d fb08 	ldr.w	pc, [sp], #8
    d5ca:	bf00      	nop

0000d5cc <__aeabi_dcmpgt>:
    d5cc:	f84d ed08 	str.w	lr, [sp, #-8]!
    d5d0:	f7ff ffc4 	bl	d55c <__aeabi_cdrcmple>
    d5d4:	bf34      	ite	cc
    d5d6:	2001      	movcc	r0, #1
    d5d8:	2000      	movcs	r0, #0
    d5da:	f85d fb08 	ldr.w	pc, [sp], #8
    d5de:	bf00      	nop

0000d5e0 <__aeabi_d2iz>:
    d5e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
    d5e4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    d5e8:	d215      	bcs.n	d616 <__aeabi_d2iz+0x36>
    d5ea:	d511      	bpl.n	d610 <__aeabi_d2iz+0x30>
    d5ec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    d5f0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    d5f4:	d912      	bls.n	d61c <__aeabi_d2iz+0x3c>
    d5f6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    d5fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    d5fe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    d602:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    d606:	fa23 f002 	lsr.w	r0, r3, r2
    d60a:	bf18      	it	ne
    d60c:	4240      	negne	r0, r0
    d60e:	4770      	bx	lr
    d610:	f04f 0000 	mov.w	r0, #0
    d614:	4770      	bx	lr
    d616:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    d61a:	d105      	bne.n	d628 <__aeabi_d2iz+0x48>
    d61c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    d620:	bf08      	it	eq
    d622:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    d626:	4770      	bx	lr
    d628:	f04f 0000 	mov.w	r0, #0
    d62c:	4770      	bx	lr
    d62e:	bf00      	nop

0000d630 <__aeabi_d2f>:
    d630:	ea4f 0241 	mov.w	r2, r1, lsl #1
    d634:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    d638:	bf24      	itt	cs
    d63a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    d63e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    d642:	d90d      	bls.n	d660 <__aeabi_d2f+0x30>
    d644:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    d648:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    d64c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    d650:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d654:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    d658:	bf08      	it	eq
    d65a:	f020 0001 	biceq.w	r0, r0, #1
    d65e:	4770      	bx	lr
    d660:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    d664:	d121      	bne.n	d6aa <__aeabi_d2f+0x7a>
    d666:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    d66a:	bfbc      	itt	lt
    d66c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    d670:	4770      	bxlt	lr
    d672:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    d676:	ea4f 5252 	mov.w	r2, r2, lsr #21
    d67a:	f1c2 0218 	rsb	r2, r2, #24
    d67e:	f1c2 0c20 	rsb	ip, r2, #32
    d682:	fa10 f30c 	lsls.w	r3, r0, ip
    d686:	fa20 f002 	lsr.w	r0, r0, r2
    d68a:	bf18      	it	ne
    d68c:	f040 0001 	orrne.w	r0, r0, #1
    d690:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    d694:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    d698:	fa03 fc0c 	lsl.w	ip, r3, ip
    d69c:	ea40 000c 	orr.w	r0, r0, ip
    d6a0:	fa23 f302 	lsr.w	r3, r3, r2
    d6a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
    d6a8:	e7cc      	b.n	d644 <__aeabi_d2f+0x14>
    d6aa:	ea7f 5362 	mvns.w	r3, r2, asr #21
    d6ae:	d107      	bne.n	d6c0 <__aeabi_d2f+0x90>
    d6b0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    d6b4:	bf1e      	ittt	ne
    d6b6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    d6ba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    d6be:	4770      	bxne	lr
    d6c0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    d6c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    d6c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    d6cc:	4770      	bx	lr
    d6ce:	bf00      	nop

0000d6d0 <__aeabi_ldivmod>:
    d6d0:	b97b      	cbnz	r3, d6f2 <__aeabi_ldivmod+0x22>
    d6d2:	b972      	cbnz	r2, d6f2 <__aeabi_ldivmod+0x22>
    d6d4:	2900      	cmp	r1, #0
    d6d6:	bfbe      	ittt	lt
    d6d8:	2000      	movlt	r0, #0
    d6da:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    d6de:	e006      	blt.n	d6ee <__aeabi_ldivmod+0x1e>
    d6e0:	bf08      	it	eq
    d6e2:	2800      	cmpeq	r0, #0
    d6e4:	bf1c      	itt	ne
    d6e6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    d6ea:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    d6ee:	f000 b9bb 	b.w	da68 <__aeabi_idiv0>
    d6f2:	f1ad 0c08 	sub.w	ip, sp, #8
    d6f6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    d6fa:	2900      	cmp	r1, #0
    d6fc:	db09      	blt.n	d712 <__aeabi_ldivmod+0x42>
    d6fe:	2b00      	cmp	r3, #0
    d700:	db1a      	blt.n	d738 <__aeabi_ldivmod+0x68>
    d702:	f000 f84d 	bl	d7a0 <__udivmoddi4>
    d706:	f8dd e004 	ldr.w	lr, [sp, #4]
    d70a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    d70e:	b004      	add	sp, #16
    d710:	4770      	bx	lr
    d712:	4240      	negs	r0, r0
    d714:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    d718:	2b00      	cmp	r3, #0
    d71a:	db1b      	blt.n	d754 <__aeabi_ldivmod+0x84>
    d71c:	f000 f840 	bl	d7a0 <__udivmoddi4>
    d720:	f8dd e004 	ldr.w	lr, [sp, #4]
    d724:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    d728:	b004      	add	sp, #16
    d72a:	4240      	negs	r0, r0
    d72c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    d730:	4252      	negs	r2, r2
    d732:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    d736:	4770      	bx	lr
    d738:	4252      	negs	r2, r2
    d73a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    d73e:	f000 f82f 	bl	d7a0 <__udivmoddi4>
    d742:	f8dd e004 	ldr.w	lr, [sp, #4]
    d746:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    d74a:	b004      	add	sp, #16
    d74c:	4240      	negs	r0, r0
    d74e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    d752:	4770      	bx	lr
    d754:	4252      	negs	r2, r2
    d756:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    d75a:	f000 f821 	bl	d7a0 <__udivmoddi4>
    d75e:	f8dd e004 	ldr.w	lr, [sp, #4]
    d762:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    d766:	b004      	add	sp, #16
    d768:	4252      	negs	r2, r2
    d76a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    d76e:	4770      	bx	lr

0000d770 <__aeabi_uldivmod>:
    d770:	b953      	cbnz	r3, d788 <__aeabi_uldivmod+0x18>
    d772:	b94a      	cbnz	r2, d788 <__aeabi_uldivmod+0x18>
    d774:	2900      	cmp	r1, #0
    d776:	bf08      	it	eq
    d778:	2800      	cmpeq	r0, #0
    d77a:	bf1c      	itt	ne
    d77c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    d780:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    d784:	f000 b970 	b.w	da68 <__aeabi_idiv0>
    d788:	f1ad 0c08 	sub.w	ip, sp, #8
    d78c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    d790:	f000 f806 	bl	d7a0 <__udivmoddi4>
    d794:	f8dd e004 	ldr.w	lr, [sp, #4]
    d798:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    d79c:	b004      	add	sp, #16
    d79e:	4770      	bx	lr

0000d7a0 <__udivmoddi4>:
    d7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d7a4:	9e09      	ldr	r6, [sp, #36]	; 0x24
    d7a6:	4604      	mov	r4, r0
    d7a8:	4689      	mov	r9, r1
    d7aa:	2b00      	cmp	r3, #0
    d7ac:	f040 8083 	bne.w	d8b6 <__udivmoddi4+0x116>
    d7b0:	428a      	cmp	r2, r1
    d7b2:	4615      	mov	r5, r2
    d7b4:	d945      	bls.n	d842 <__udivmoddi4+0xa2>
    d7b6:	fab2 f282 	clz	r2, r2
    d7ba:	b14a      	cbz	r2, d7d0 <__udivmoddi4+0x30>
    d7bc:	f1c2 0720 	rsb	r7, r2, #32
    d7c0:	fa01 f302 	lsl.w	r3, r1, r2
    d7c4:	4095      	lsls	r5, r2
    d7c6:	4094      	lsls	r4, r2
    d7c8:	fa20 f707 	lsr.w	r7, r0, r7
    d7cc:	ea47 0903 	orr.w	r9, r7, r3
    d7d0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    d7d4:	0c23      	lsrs	r3, r4, #16
    d7d6:	fa1f f885 	uxth.w	r8, r5
    d7da:	fbb9 fcfe 	udiv	ip, r9, lr
    d7de:	fb0e 991c 	mls	r9, lr, ip, r9
    d7e2:	fb0c f108 	mul.w	r1, ip, r8
    d7e6:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
    d7ea:	4299      	cmp	r1, r3
    d7ec:	d90a      	bls.n	d804 <__udivmoddi4+0x64>
    d7ee:	18eb      	adds	r3, r5, r3
    d7f0:	bf2c      	ite	cs
    d7f2:	2001      	movcs	r0, #1
    d7f4:	2000      	movcc	r0, #0
    d7f6:	4299      	cmp	r1, r3
    d7f8:	d902      	bls.n	d800 <__udivmoddi4+0x60>
    d7fa:	2800      	cmp	r0, #0
    d7fc:	f000 811d 	beq.w	da3a <__udivmoddi4+0x29a>
    d800:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    d804:	1a59      	subs	r1, r3, r1
    d806:	b2a3      	uxth	r3, r4
    d808:	fbb1 f0fe 	udiv	r0, r1, lr
    d80c:	fb0e 1110 	mls	r1, lr, r0, r1
    d810:	fb00 f808 	mul.w	r8, r0, r8
    d814:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    d818:	45a0      	cmp	r8, r4
    d81a:	d905      	bls.n	d828 <__udivmoddi4+0x88>
    d81c:	192c      	adds	r4, r5, r4
    d81e:	d202      	bcs.n	d826 <__udivmoddi4+0x86>
    d820:	45a0      	cmp	r8, r4
    d822:	f200 810e 	bhi.w	da42 <__udivmoddi4+0x2a2>
    d826:	3801      	subs	r0, #1
    d828:	eba4 0408 	sub.w	r4, r4, r8
    d82c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    d830:	2700      	movs	r7, #0
    d832:	b11e      	cbz	r6, d83c <__udivmoddi4+0x9c>
    d834:	40d4      	lsrs	r4, r2
    d836:	2300      	movs	r3, #0
    d838:	e9c6 4300 	strd	r4, r3, [r6]
    d83c:	4639      	mov	r1, r7
    d83e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d842:	2a00      	cmp	r2, #0
    d844:	d051      	beq.n	d8ea <__udivmoddi4+0x14a>
    d846:	fab2 f282 	clz	r2, r2
    d84a:	2a00      	cmp	r2, #0
    d84c:	f040 80af 	bne.w	d9ae <__udivmoddi4+0x20e>
    d850:	1b49      	subs	r1, r1, r5
    d852:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    d856:	fa1f f885 	uxth.w	r8, r5
    d85a:	2701      	movs	r7, #1
    d85c:	0c23      	lsrs	r3, r4, #16
    d85e:	fbb1 fcfe 	udiv	ip, r1, lr
    d862:	fb0e 111c 	mls	r1, lr, ip, r1
    d866:	fb08 f00c 	mul.w	r0, r8, ip
    d86a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    d86e:	4298      	cmp	r0, r3
    d870:	d90a      	bls.n	d888 <__udivmoddi4+0xe8>
    d872:	18eb      	adds	r3, r5, r3
    d874:	bf2c      	ite	cs
    d876:	2101      	movcs	r1, #1
    d878:	2100      	movcc	r1, #0
    d87a:	4298      	cmp	r0, r3
    d87c:	d902      	bls.n	d884 <__udivmoddi4+0xe4>
    d87e:	2900      	cmp	r1, #0
    d880:	f000 80d7 	beq.w	da32 <__udivmoddi4+0x292>
    d884:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    d888:	1a19      	subs	r1, r3, r0
    d88a:	b2a3      	uxth	r3, r4
    d88c:	fbb1 f0fe 	udiv	r0, r1, lr
    d890:	fb0e 1110 	mls	r1, lr, r0, r1
    d894:	fb08 f800 	mul.w	r8, r8, r0
    d898:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    d89c:	45a0      	cmp	r8, r4
    d89e:	d905      	bls.n	d8ac <__udivmoddi4+0x10c>
    d8a0:	192c      	adds	r4, r5, r4
    d8a2:	d202      	bcs.n	d8aa <__udivmoddi4+0x10a>
    d8a4:	45a0      	cmp	r8, r4
    d8a6:	f200 80c1 	bhi.w	da2c <__udivmoddi4+0x28c>
    d8aa:	3801      	subs	r0, #1
    d8ac:	eba4 0408 	sub.w	r4, r4, r8
    d8b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    d8b4:	e7bd      	b.n	d832 <__udivmoddi4+0x92>
    d8b6:	428b      	cmp	r3, r1
    d8b8:	d908      	bls.n	d8cc <__udivmoddi4+0x12c>
    d8ba:	2e00      	cmp	r6, #0
    d8bc:	d074      	beq.n	d9a8 <__udivmoddi4+0x208>
    d8be:	2700      	movs	r7, #0
    d8c0:	e9c6 0100 	strd	r0, r1, [r6]
    d8c4:	4638      	mov	r0, r7
    d8c6:	4639      	mov	r1, r7
    d8c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d8cc:	fab3 f783 	clz	r7, r3
    d8d0:	b967      	cbnz	r7, d8ec <__udivmoddi4+0x14c>
    d8d2:	428b      	cmp	r3, r1
    d8d4:	f0c0 80a4 	bcc.w	da20 <__udivmoddi4+0x280>
    d8d8:	4282      	cmp	r2, r0
    d8da:	f240 80a1 	bls.w	da20 <__udivmoddi4+0x280>
    d8de:	4638      	mov	r0, r7
    d8e0:	2e00      	cmp	r6, #0
    d8e2:	d0ab      	beq.n	d83c <__udivmoddi4+0x9c>
    d8e4:	e9c6 4900 	strd	r4, r9, [r6]
    d8e8:	e7a8      	b.n	d83c <__udivmoddi4+0x9c>
    d8ea:	deff      	udf	#255	; 0xff
    d8ec:	f1c7 0520 	rsb	r5, r7, #32
    d8f0:	40bb      	lsls	r3, r7
    d8f2:	fa02 fc07 	lsl.w	ip, r2, r7
    d8f6:	fa01 f407 	lsl.w	r4, r1, r7
    d8fa:	40ea      	lsrs	r2, r5
    d8fc:	fa20 f805 	lsr.w	r8, r0, r5
    d900:	40e9      	lsrs	r1, r5
    d902:	fa00 fe07 	lsl.w	lr, r0, r7
    d906:	431a      	orrs	r2, r3
    d908:	ea48 0404 	orr.w	r4, r8, r4
    d90c:	ea4f 4812 	mov.w	r8, r2, lsr #16
    d910:	0c20      	lsrs	r0, r4, #16
    d912:	fa1f f982 	uxth.w	r9, r2
    d916:	fbb1 faf8 	udiv	sl, r1, r8
    d91a:	fb08 111a 	mls	r1, r8, sl, r1
    d91e:	fb0a fb09 	mul.w	fp, sl, r9
    d922:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    d926:	458b      	cmp	fp, r1
    d928:	d90a      	bls.n	d940 <__udivmoddi4+0x1a0>
    d92a:	1851      	adds	r1, r2, r1
    d92c:	bf2c      	ite	cs
    d92e:	2301      	movcs	r3, #1
    d930:	2300      	movcc	r3, #0
    d932:	458b      	cmp	fp, r1
    d934:	d902      	bls.n	d93c <__udivmoddi4+0x19c>
    d936:	2b00      	cmp	r3, #0
    d938:	f000 8088 	beq.w	da4c <__udivmoddi4+0x2ac>
    d93c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    d940:	eba1 010b 	sub.w	r1, r1, fp
    d944:	b2a4      	uxth	r4, r4
    d946:	fbb1 f0f8 	udiv	r0, r1, r8
    d94a:	fb08 1110 	mls	r1, r8, r0, r1
    d94e:	fb00 f909 	mul.w	r9, r0, r9
    d952:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
    d956:	4589      	cmp	r9, r1
    d958:	d904      	bls.n	d964 <__udivmoddi4+0x1c4>
    d95a:	1851      	adds	r1, r2, r1
    d95c:	d201      	bcs.n	d962 <__udivmoddi4+0x1c2>
    d95e:	4589      	cmp	r9, r1
    d960:	d87b      	bhi.n	da5a <__udivmoddi4+0x2ba>
    d962:	3801      	subs	r0, #1
    d964:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    d968:	eba1 0109 	sub.w	r1, r1, r9
    d96c:	fba0 890c 	umull	r8, r9, r0, ip
    d970:	4549      	cmp	r1, r9
    d972:	4644      	mov	r4, r8
    d974:	464b      	mov	r3, r9
    d976:	d302      	bcc.n	d97e <__udivmoddi4+0x1de>
    d978:	d106      	bne.n	d988 <__udivmoddi4+0x1e8>
    d97a:	45c6      	cmp	lr, r8
    d97c:	d204      	bcs.n	d988 <__udivmoddi4+0x1e8>
    d97e:	3801      	subs	r0, #1
    d980:	ebb8 040c 	subs.w	r4, r8, ip
    d984:	eb69 0302 	sbc.w	r3, r9, r2
    d988:	2e00      	cmp	r6, #0
    d98a:	d05d      	beq.n	da48 <__udivmoddi4+0x2a8>
    d98c:	ebbe 0204 	subs.w	r2, lr, r4
    d990:	eb61 0103 	sbc.w	r1, r1, r3
    d994:	fa01 f505 	lsl.w	r5, r1, r5
    d998:	fa22 f307 	lsr.w	r3, r2, r7
    d99c:	40f9      	lsrs	r1, r7
    d99e:	2700      	movs	r7, #0
    d9a0:	431d      	orrs	r5, r3
    d9a2:	e9c6 5100 	strd	r5, r1, [r6]
    d9a6:	e749      	b.n	d83c <__udivmoddi4+0x9c>
    d9a8:	4637      	mov	r7, r6
    d9aa:	4630      	mov	r0, r6
    d9ac:	e746      	b.n	d83c <__udivmoddi4+0x9c>
    d9ae:	f1c2 0020 	rsb	r0, r2, #32
    d9b2:	4095      	lsls	r5, r2
    d9b4:	fa01 f702 	lsl.w	r7, r1, r2
    d9b8:	fa21 f300 	lsr.w	r3, r1, r0
    d9bc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    d9c0:	fa24 f100 	lsr.w	r1, r4, r0
    d9c4:	fa1f f885 	uxth.w	r8, r5
    d9c8:	4094      	lsls	r4, r2
    d9ca:	4339      	orrs	r1, r7
    d9cc:	fbb3 f0fe 	udiv	r0, r3, lr
    d9d0:	0c0f      	lsrs	r7, r1, #16
    d9d2:	fb0e 3310 	mls	r3, lr, r0, r3
    d9d6:	fb00 fc08 	mul.w	ip, r0, r8
    d9da:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
    d9de:	459c      	cmp	ip, r3
    d9e0:	d907      	bls.n	d9f2 <__udivmoddi4+0x252>
    d9e2:	18eb      	adds	r3, r5, r3
    d9e4:	bf2c      	ite	cs
    d9e6:	2701      	movcs	r7, #1
    d9e8:	2700      	movcc	r7, #0
    d9ea:	459c      	cmp	ip, r3
    d9ec:	d900      	bls.n	d9f0 <__udivmoddi4+0x250>
    d9ee:	b38f      	cbz	r7, da54 <__udivmoddi4+0x2b4>
    d9f0:	3801      	subs	r0, #1
    d9f2:	eba3 030c 	sub.w	r3, r3, ip
    d9f6:	b289      	uxth	r1, r1
    d9f8:	fbb3 f7fe 	udiv	r7, r3, lr
    d9fc:	fb0e 3317 	mls	r3, lr, r7, r3
    da00:	fb07 fc08 	mul.w	ip, r7, r8
    da04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    da08:	458c      	cmp	ip, r1
    da0a:	d904      	bls.n	da16 <__udivmoddi4+0x276>
    da0c:	1869      	adds	r1, r5, r1
    da0e:	d201      	bcs.n	da14 <__udivmoddi4+0x274>
    da10:	458c      	cmp	ip, r1
    da12:	d825      	bhi.n	da60 <__udivmoddi4+0x2c0>
    da14:	3f01      	subs	r7, #1
    da16:	eba1 010c 	sub.w	r1, r1, ip
    da1a:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
    da1e:	e71d      	b.n	d85c <__udivmoddi4+0xbc>
    da20:	1a84      	subs	r4, r0, r2
    da22:	eb61 0303 	sbc.w	r3, r1, r3
    da26:	2001      	movs	r0, #1
    da28:	4699      	mov	r9, r3
    da2a:	e759      	b.n	d8e0 <__udivmoddi4+0x140>
    da2c:	3802      	subs	r0, #2
    da2e:	442c      	add	r4, r5
    da30:	e73c      	b.n	d8ac <__udivmoddi4+0x10c>
    da32:	f1ac 0c02 	sub.w	ip, ip, #2
    da36:	442b      	add	r3, r5
    da38:	e726      	b.n	d888 <__udivmoddi4+0xe8>
    da3a:	f1ac 0c02 	sub.w	ip, ip, #2
    da3e:	442b      	add	r3, r5
    da40:	e6e0      	b.n	d804 <__udivmoddi4+0x64>
    da42:	3802      	subs	r0, #2
    da44:	442c      	add	r4, r5
    da46:	e6ef      	b.n	d828 <__udivmoddi4+0x88>
    da48:	4637      	mov	r7, r6
    da4a:	e6f7      	b.n	d83c <__udivmoddi4+0x9c>
    da4c:	f1aa 0a02 	sub.w	sl, sl, #2
    da50:	4411      	add	r1, r2
    da52:	e775      	b.n	d940 <__udivmoddi4+0x1a0>
    da54:	3802      	subs	r0, #2
    da56:	442b      	add	r3, r5
    da58:	e7cb      	b.n	d9f2 <__udivmoddi4+0x252>
    da5a:	3802      	subs	r0, #2
    da5c:	4411      	add	r1, r2
    da5e:	e781      	b.n	d964 <__udivmoddi4+0x1c4>
    da60:	3f02      	subs	r7, #2
    da62:	4429      	add	r1, r5
    da64:	e7d7      	b.n	da16 <__udivmoddi4+0x276>
    da66:	bf00      	nop

0000da68 <__aeabi_idiv0>:
    da68:	4770      	bx	lr
    da6a:	bf00      	nop

0000da6c <bsec_get_version>:
    da6c:	b508      	push	{r3, lr}
    da6e:	4601      	mov	r1, r0
    da70:	4802      	ldr	r0, [pc, #8]	; (da7c <bsec_get_version+0x10>)
    da72:	f000 fa7b 	bl	df6c <bsec_codegen_get_version>
    da76:	2000      	movs	r0, #0
    da78:	bd08      	pop	{r3, pc}
    da7a:	bf00      	nop
    da7c:	20020a10 	.word	0x20020a10

0000da80 <bsec_init>:
    da80:	b508      	push	{r3, lr}
    da82:	4802      	ldr	r0, [pc, #8]	; (da8c <bsec_init+0xc>)
    da84:	f000 fa7a 	bl	df7c <bsec_codegen_init>
    da88:	2000      	movs	r0, #0
    da8a:	bd08      	pop	{r3, pc}
    da8c:	20020a10 	.word	0x20020a10

0000da90 <bsec_reset_output>:
    da90:	4601      	mov	r1, r0
    da92:	4801      	ldr	r0, [pc, #4]	; (da98 <bsec_reset_output+0x8>)
    da94:	f000 ba74 	b.w	df80 <bsec_codegen_reset_output>
    da98:	20020a10 	.word	0x20020a10

0000da9c <bsec_update_subscription>:
    da9c:	b510      	push	{r4, lr}
    da9e:	b084      	sub	sp, #16
    daa0:	f10d 040f 	add.w	r4, sp, #15
    daa4:	e9cd 4200 	strd	r4, r2, [sp]
    daa8:	460a      	mov	r2, r1
    daaa:	4601      	mov	r1, r0
    daac:	4803      	ldr	r0, [pc, #12]	; (dabc <bsec_update_subscription+0x20>)
    daae:	f7fe fd83 	bl	c5b8 <bsec_codegen_update_subscription>
    dab2:	f99d 000f 	ldrsb.w	r0, [sp, #15]
    dab6:	b004      	add	sp, #16
    dab8:	bd10      	pop	{r4, pc}
    daba:	bf00      	nop
    dabc:	20020a10 	.word	0x20020a10

0000dac0 <bsec_do_steps>:
    dac0:	b510      	push	{r4, lr}
    dac2:	b084      	sub	sp, #16
    dac4:	f10d 040f 	add.w	r4, sp, #15
    dac8:	e9cd 4200 	strd	r4, r2, [sp]
    dacc:	460a      	mov	r2, r1
    dace:	4601      	mov	r1, r0
    dad0:	4803      	ldr	r0, [pc, #12]	; (dae0 <bsec_do_steps+0x20>)
    dad2:	f000 f869 	bl	dba8 <bsec_codegen_do_steps>
    dad6:	f99d 000f 	ldrsb.w	r0, [sp, #15]
    dada:	b004      	add	sp, #16
    dadc:	bd10      	pop	{r4, pc}
    dade:	bf00      	nop
    dae0:	20020a10 	.word	0x20020a10

0000dae4 <bsec_set_configuration>:
    dae4:	b500      	push	{lr}
    dae6:	b083      	sub	sp, #12
    dae8:	9300      	str	r3, [sp, #0]
    daea:	4613      	mov	r3, r2
    daec:	460a      	mov	r2, r1
    daee:	4601      	mov	r1, r0
    daf0:	4802      	ldr	r0, [pc, #8]	; (dafc <bsec_set_configuration+0x18>)
    daf2:	f000 fa5f 	bl	dfb4 <bsec_codegen_set_configuration>
    daf6:	b003      	add	sp, #12
    daf8:	f85d fb04 	ldr.w	pc, [sp], #4
    dafc:	20020a10 	.word	0x20020a10

0000db00 <bsec_set_state>:
    db00:	b500      	push	{lr}
    db02:	b083      	sub	sp, #12
    db04:	9300      	str	r3, [sp, #0]
    db06:	4613      	mov	r3, r2
    db08:	460a      	mov	r2, r1
    db0a:	4601      	mov	r1, r0
    db0c:	4802      	ldr	r0, [pc, #8]	; (db18 <bsec_set_state+0x18>)
    db0e:	f000 fa9f 	bl	e050 <bsec_codegen_set_state>
    db12:	b003      	add	sp, #12
    db14:	f85d fb04 	ldr.w	pc, [sp], #4
    db18:	20020a10 	.word	0x20020a10

0000db1c <bsec_get_configuration>:
    db1c:	b570      	push	{r4, r5, r6, lr}
    db1e:	b086      	sub	sp, #24
    db20:	f10d 0413 	add.w	r4, sp, #19
    db24:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    db26:	9300      	str	r3, [sp, #0]
    db28:	ad05      	add	r5, sp, #20
    db2a:	4613      	mov	r3, r2
    db2c:	9402      	str	r4, [sp, #8]
    db2e:	460a      	mov	r2, r1
    db30:	9601      	str	r6, [sp, #4]
    db32:	4601      	mov	r1, r0
    db34:	9503      	str	r5, [sp, #12]
    db36:	4805      	ldr	r0, [pc, #20]	; (db4c <bsec_get_configuration+0x30>)
    db38:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    db3a:	f000 f95d 	bl	ddf8 <bsec_codegen_get_configuration>
    db3e:	9b05      	ldr	r3, [sp, #20]
    db40:	f99d 0013 	ldrsb.w	r0, [sp, #19]
    db44:	6023      	str	r3, [r4, #0]
    db46:	b006      	add	sp, #24
    db48:	bd70      	pop	{r4, r5, r6, pc}
    db4a:	bf00      	nop
    db4c:	20020a10 	.word	0x20020a10

0000db50 <bsec_get_state>:
    db50:	b570      	push	{r4, r5, r6, lr}
    db52:	b086      	sub	sp, #24
    db54:	f10d 0413 	add.w	r4, sp, #19
    db58:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    db5a:	9300      	str	r3, [sp, #0]
    db5c:	ad05      	add	r5, sp, #20
    db5e:	4613      	mov	r3, r2
    db60:	9402      	str	r4, [sp, #8]
    db62:	460a      	mov	r2, r1
    db64:	9601      	str	r6, [sp, #4]
    db66:	4601      	mov	r1, r0
    db68:	9503      	str	r5, [sp, #12]
    db6a:	4805      	ldr	r0, [pc, #20]	; (db80 <bsec_get_state+0x30>)
    db6c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    db6e:	f000 f9a1 	bl	deb4 <bsec_codegen_get_state>
    db72:	9b05      	ldr	r3, [sp, #20]
    db74:	f99d 0013 	ldrsb.w	r0, [sp, #19]
    db78:	6023      	str	r3, [r4, #0]
    db7a:	b006      	add	sp, #24
    db7c:	bd70      	pop	{r4, r5, r6, pc}
    db7e:	bf00      	nop
    db80:	20020a10 	.word	0x20020a10

0000db84 <bsec_sensor_control>:
    db84:	b500      	push	{lr}
    db86:	b085      	sub	sp, #20
    db88:	f10d 030f 	add.w	r3, sp, #15
    db8c:	e9cd 3200 	strd	r3, r2, [sp]
    db90:	4602      	mov	r2, r0
    db92:	460b      	mov	r3, r1
    db94:	4803      	ldr	r0, [pc, #12]	; (dba4 <bsec_sensor_control+0x20>)
    db96:	f7fe fb53 	bl	c240 <bsec_codegen_sensor_control>
    db9a:	f99d 000f 	ldrsb.w	r0, [sp, #15]
    db9e:	b005      	add	sp, #20
    dba0:	f85d fb04 	ldr.w	pc, [sp], #4
    dba4:	20020a10 	.word	0x20020a10

0000dba8 <bsec_codegen_do_steps>:
    dba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dbac:	b089      	sub	sp, #36	; 0x24
    dbae:	461e      	mov	r6, r3
    dbb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    dbb2:	f04f 0c00 	mov.w	ip, #0
    dbb6:	f883 c000 	strb.w	ip, [r3]
    dbba:	7835      	ldrb	r5, [r6, #0]
    dbbc:	4604      	mov	r4, r0
    dbbe:	460b      	mov	r3, r1
    dbc0:	b1dd      	cbz	r5, dbfa <bsec_codegen_do_steps+0x52>
    dbc2:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
    dbc6:	f04f 0800 	mov.w	r8, #0
    dbca:	2701      	movs	r7, #1
    dbcc:	f06f 4e70 	mvn.w	lr, #4026531840	; 0xf0000000
    dbd0:	2000      	movs	r0, #0
    dbd2:	2100      	movs	r1, #0
    dbd4:	eb07 050e 	add.w	r5, r7, lr
    dbd8:	eb09 1505 	add.w	r5, r9, r5, lsl #4
    dbdc:	e9c5 0100 	strd	r0, r1, [r5]
    dbe0:	f885 c00d 	strb.w	ip, [r5, #13]
    dbe4:	f8c5 8008 	str.w	r8, [r5, #8]
    dbe8:	f885 c00c 	strb.w	ip, [r5, #12]
    dbec:	f885 c00e 	strb.w	ip, [r5, #14]
    dbf0:	3701      	adds	r7, #1
    dbf2:	7835      	ldrb	r5, [r6, #0]
    dbf4:	b2ff      	uxtb	r7, r7
    dbf6:	42bd      	cmp	r5, r7
    dbf8:	d2ec      	bcs.n	dbd4 <bsec_codegen_do_steps+0x2c>
    dbfa:	2a00      	cmp	r2, #0
    dbfc:	d075      	beq.n	dcea <bsec_codegen_do_steps+0x142>
    dbfe:	7b59      	ldrb	r1, [r3, #13]
    dc00:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
    dc04:	fa5f f58a 	uxtb.w	r5, sl
    dc08:	2d17      	cmp	r5, #23
    dc0a:	f200 809f 	bhi.w	dd4c <bsec_codegen_do_steps+0x1a4>
    dc0e:	4f76      	ldr	r7, [pc, #472]	; (dde8 <bsec_codegen_do_steps+0x240>)
    dc10:	fa47 f005 	asr.w	r0, r7, r5
    dc14:	07c0      	lsls	r0, r0, #31
    dc16:	f140 8099 	bpl.w	dd4c <bsec_codegen_do_steps+0x1a4>
    dc1a:	f04f 0a01 	mov.w	sl, #1
    dc1e:	4650      	mov	r0, sl
    dc20:	46bc      	mov	ip, r7
    dc22:	fa0a fa05 	lsl.w	sl, sl, r5
    dc26:	4686      	mov	lr, r0
    dc28:	4689      	mov	r9, r1
    dc2a:	461d      	mov	r5, r3
    dc2c:	2700      	movs	r7, #0
    dc2e:	9103      	str	r1, [sp, #12]
    dc30:	e013      	b.n	dc5a <bsec_codegen_do_steps+0xb2>
    dc32:	f895 900d 	ldrb.w	r9, [r5, #13]
    dc36:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
    dc3a:	fa5f f888 	uxtb.w	r8, r8
    dc3e:	f1b8 0f17 	cmp.w	r8, #23
    dc42:	fa4c fb08 	asr.w	fp, ip, r8
    dc46:	fa0e fa08 	lsl.w	sl, lr, r8
    dc4a:	d87f      	bhi.n	dd4c <bsec_codegen_do_steps+0x1a4>
    dc4c:	f01b 0f01 	tst.w	fp, #1
    dc50:	d07c      	beq.n	dd4c <bsec_codegen_do_steps+0x1a4>
    dc52:	ea1a 0f07 	tst.w	sl, r7
    dc56:	f040 80b6 	bne.w	ddc6 <bsec_codegen_do_steps+0x21e>
    dc5a:	4964      	ldr	r1, [pc, #400]	; (ddec <bsec_codegen_do_steps+0x244>)
    dc5c:	edd5 7a02 	vldr	s15, [r5, #8]
    dc60:	4489      	add	r9, r1
    dc62:	3001      	adds	r0, #1
    dc64:	f819 8c01 	ldrb.w	r8, [r9, #-1]
    dc68:	eb04 0b88 	add.w	fp, r4, r8, lsl #2
    dc6c:	ed9b 7ac1 	vldr	s14, [fp, #772]	; 0x304
    dc70:	b2c0      	uxtb	r0, r0
    dc72:	eef4 7ac7 	vcmpe.f32	s15, s14
    dc76:	f108 092e 	add.w	r9, r8, #46	; 0x2e
    dc7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dc7e:	f100 5880 	add.w	r8, r0, #268435456	; 0x10000000
    dc82:	eb04 09c9 	add.w	r9, r4, r9, lsl #3
    dc86:	ea47 070a 	orr.w	r7, r7, sl
    dc8a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    dc8e:	f100 8094 	bmi.w	ddba <bsec_codegen_do_steps+0x212>
    dc92:	ed9b 7ac9 	vldr	s14, [fp, #804]	; 0x324
    dc96:	eef4 7ac7 	vcmpe.f32	s15, s14
    dc9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dc9e:	f300 808c 	bgt.w	ddba <bsec_codegen_do_steps+0x212>
    dca2:	e9d5 ab00 	ldrd	sl, fp, [r5]
    dca6:	eb03 1508 	add.w	r5, r3, r8, lsl #4
    dcaa:	e9d9 8900 	ldrd	r8, r9, [r9]
    dcae:	45cb      	cmp	fp, r9
    dcb0:	bf08      	it	eq
    dcb2:	45c2      	cmpeq	sl, r8
    dcb4:	d104      	bne.n	dcc0 <bsec_codegen_do_steps+0x118>
    dcb6:	9912      	ldr	r1, [sp, #72]	; 0x48
    dcb8:	f04f 0804 	mov.w	r8, #4
    dcbc:	f881 8000 	strb.w	r8, [r1]
    dcc0:	4282      	cmp	r2, r0
    dcc2:	d2b6      	bcs.n	dc32 <bsec_codegen_do_steps+0x8a>
    dcc4:	3a01      	subs	r2, #1
    dcc6:	b2d2      	uxtb	r2, r2
    dcc8:	f103 0710 	add.w	r7, r3, #16
    dccc:	9903      	ldr	r1, [sp, #12]
    dcce:	461d      	mov	r5, r3
    dcd0:	eb07 1702 	add.w	r7, r7, r2, lsl #4
    dcd4:	e000      	b.n	dcd8 <bsec_codegen_do_steps+0x130>
    dcd6:	7b69      	ldrb	r1, [r5, #13]
    dcd8:	ed95 0a02 	vldr	s0, [r5, #8]
    dcdc:	e8f5 2304 	ldrd	r2, r3, [r5], #16
    dce0:	4620      	mov	r0, r4
    dce2:	f001 fd9d 	bl	f820 <bsec_ChannelHub_setInput>
    dce6:	42bd      	cmp	r5, r7
    dce8:	d1f5      	bne.n	dcd6 <bsec_codegen_do_steps+0x12e>
    dcea:	4620      	mov	r0, r4
    dcec:	f001 f8a2 	bl	ee34 <bsec_ChannelHub_do>
    dcf0:	f896 9000 	ldrb.w	r9, [r6]
    dcf4:	f1b9 0f00 	cmp.w	r9, #0
    dcf8:	d06b      	beq.n	ddd2 <bsec_codegen_do_steps+0x22a>
    dcfa:	2300      	movs	r3, #0
    dcfc:	f8df 80f0 	ldr.w	r8, [pc, #240]	; ddf0 <bsec_codegen_do_steps+0x248>
    dd00:	f8df b0f0 	ldr.w	fp, [pc, #240]	; ddf4 <bsec_codegen_do_steps+0x24c>
    dd04:	4699      	mov	r9, r3
    dd06:	f64f 7aff 	movw	sl, #65535	; 0xffff
    dd0a:	fa48 f203 	asr.w	r2, r8, r3
    dd0e:	1c5d      	adds	r5, r3, #1
    dd10:	07d2      	lsls	r2, r2, #31
    dd12:	b2ef      	uxtb	r7, r5
    dd14:	d50c      	bpl.n	dd30 <bsec_codegen_do_steps+0x188>
    dd16:	f813 300b 	ldrb.w	r3, [r3, fp]
    dd1a:	f203 135b 	addw	r3, r3, #347	; 0x15b
    dd1e:	4639      	mov	r1, r7
    dd20:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    dd24:	4553      	cmp	r3, sl
    dd26:	4620      	mov	r0, r4
    dd28:	d002      	beq.n	dd30 <bsec_codegen_do_steps+0x188>
    dd2a:	f001 fc9d 	bl	f668 <bsec_ChannelHub_isOutputValid>
    dd2e:	b9b8      	cbnz	r0, dd60 <bsec_codegen_do_steps+0x1b8>
    dd30:	2d15      	cmp	r5, #21
    dd32:	462b      	mov	r3, r5
    dd34:	d1e9      	bne.n	dd0a <bsec_codegen_do_steps+0x162>
    dd36:	2300      	movs	r3, #0
    dd38:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
    dd3c:	4620      	mov	r0, r4
    dd3e:	f000 fa77 	bl	e230 <bsec_Bsec_applyUpdateSubscription>
    dd42:	f886 9000 	strb.w	r9, [r6]
    dd46:	b009      	add	sp, #36	; 0x24
    dd48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    dd4e:	23ff      	movs	r3, #255	; 0xff
    dd50:	7013      	strb	r3, [r2, #0]
    dd52:	f04f 0900 	mov.w	r9, #0
    dd56:	f886 9000 	strb.w	r9, [r6]
    dd5a:	b009      	add	sp, #36	; 0x24
    dd5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd60:	f10d 0313 	add.w	r3, sp, #19
    dd64:	9300      	str	r3, [sp, #0]
    dd66:	aa05      	add	r2, sp, #20
    dd68:	ab06      	add	r3, sp, #24
    dd6a:	4639      	mov	r1, r7
    dd6c:	4620      	mov	r0, r4
    dd6e:	f001 fc57 	bl	f620 <bsec_ChannelHub_getOutput>
    dd72:	7833      	ldrb	r3, [r6, #0]
    dd74:	454b      	cmp	r3, r9
    dd76:	f109 0201 	add.w	r2, r9, #1
    dd7a:	d809      	bhi.n	dd90 <bsec_codegen_do_steps+0x1e8>
    dd7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    dd7e:	2303      	movs	r3, #3
    dd80:	7013      	strb	r3, [r2, #0]
    dd82:	2300      	movs	r3, #0
    dd84:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
    dd88:	4620      	mov	r0, r4
    dd8a:	f000 fa51 	bl	e230 <bsec_Bsec_applyUpdateSubscription>
    dd8e:	e7d8      	b.n	dd42 <bsec_codegen_do_steps+0x19a>
    dd90:	fa5f f982 	uxtb.w	r9, r2
    dd94:	9813      	ldr	r0, [sp, #76]	; 0x4c
    dd96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    dd9a:	f109 5180 	add.w	r1, r9, #268435456	; 0x10000000
    dd9e:	3901      	subs	r1, #1
    dda0:	eb00 1101 	add.w	r1, r0, r1, lsl #4
    dda4:	e9c1 2300 	strd	r2, r3, [r1]
    dda8:	9805      	ldr	r0, [sp, #20]
    ddaa:	f89d 3013 	ldrb.w	r3, [sp, #19]
    ddae:	734f      	strb	r7, [r1, #13]
    ddb0:	2201      	movs	r2, #1
    ddb2:	6088      	str	r0, [r1, #8]
    ddb4:	730a      	strb	r2, [r1, #12]
    ddb6:	738b      	strb	r3, [r1, #14]
    ddb8:	e7ba      	b.n	dd30 <bsec_codegen_do_steps+0x188>
    ddba:	9a12      	ldr	r2, [sp, #72]	; 0x48
    ddbc:	23fe      	movs	r3, #254	; 0xfe
    ddbe:	7013      	strb	r3, [r2, #0]
    ddc0:	f04f 0900 	mov.w	r9, #0
    ddc4:	e7c7      	b.n	dd56 <bsec_codegen_do_steps+0x1ae>
    ddc6:	9a12      	ldr	r2, [sp, #72]	; 0x48
    ddc8:	23fa      	movs	r3, #250	; 0xfa
    ddca:	7013      	strb	r3, [r2, #0]
    ddcc:	f04f 0900 	mov.w	r9, #0
    ddd0:	e7c1      	b.n	dd56 <bsec_codegen_do_steps+0x1ae>
    ddd2:	9a12      	ldr	r2, [sp, #72]	; 0x48
    ddd4:	2302      	movs	r3, #2
    ddd6:	7013      	strb	r3, [r2, #0]
    ddd8:	2300      	movs	r3, #0
    ddda:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
    ddde:	4620      	mov	r0, r4
    dde0:	f000 fa26 	bl	e230 <bsec_Bsec_applyUpdateSubscription>
    dde4:	e7ad      	b.n	dd42 <bsec_codegen_do_steps+0x19a>
    dde6:	bf00      	nop
    dde8:	00e0200f 	.word	0x00e0200f
    ddec:	0003ad70 	.word	0x0003ad70
    ddf0:	001279ef 	.word	0x001279ef
    ddf4:	0003ad58 	.word	0x0003ad58

0000ddf8 <bsec_codegen_get_configuration>:
    ddf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ddfc:	b085      	sub	sp, #20
    ddfe:	e9dd 5710 	ldrd	r5, r7, [sp, #64]	; 0x40
    de02:	24df      	movs	r4, #223	; 0xdf
    de04:	702c      	strb	r4, [r5, #0]
    de06:	2600      	movs	r6, #0
    de08:	2410      	movs	r4, #16
    de0a:	2b17      	cmp	r3, #23
    de0c:	603e      	str	r6, [r7, #0]
    de0e:	9403      	str	r4, [sp, #12]
    de10:	d928      	bls.n	de64 <bsec_codegen_get_configuration+0x6c>
    de12:	bb39      	cbnz	r1, de64 <bsec_codegen_get_configuration+0x6c>
    de14:	461e      	mov	r6, r3
    de16:	4691      	mov	r9, r2
    de18:	4680      	mov	r8, r0
    de1a:	460b      	mov	r3, r1
    de1c:	7029      	strb	r1, [r5, #0]
    de1e:	468b      	mov	fp, r1
    de20:	f240 3a17 	movw	sl, #791	; 0x317
    de24:	e002      	b.n	de2c <bsec_codegen_get_configuration+0x34>
    de26:	2c0a      	cmp	r4, #10
    de28:	4623      	mov	r3, r4
    de2a:	d01e      	beq.n	de6a <bsec_codegen_get_configuration+0x72>
    de2c:	1c5c      	adds	r4, r3, #1
    de2e:	fa4a f303 	asr.w	r3, sl, r3
    de32:	07db      	lsls	r3, r3, #31
    de34:	b2e1      	uxtb	r1, r4
    de36:	d5f6      	bpl.n	de26 <bsec_codegen_get_configuration+0x2e>
    de38:	f8cd b000 	str.w	fp, [sp]
    de3c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    de40:	4640      	mov	r0, r8
    de42:	f001 fb15 	bl	f470 <bsec_ChannelHub_getChannelConfiguration>
    de46:	2800      	cmp	r0, #0
    de48:	d0ed      	beq.n	de26 <bsec_codegen_get_configuration+0x2e>
    de4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    de4c:	9301      	str	r3, [sp, #4]
    de4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    de50:	9300      	str	r3, [sp, #0]
    de52:	aa03      	add	r2, sp, #12
    de54:	4603      	mov	r3, r0
    de56:	4631      	mov	r1, r6
    de58:	4648      	mov	r0, r9
    de5a:	f000 f9c5 	bl	e1e8 <bsec_Bsec_append>
    de5e:	7028      	strb	r0, [r5, #0]
    de60:	2800      	cmp	r0, #0
    de62:	d0e0      	beq.n	de26 <bsec_codegen_get_configuration+0x2e>
    de64:	b005      	add	sp, #20
    de66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de6a:	f995 3000 	ldrsb.w	r3, [r5]
    de6e:	2b00      	cmp	r3, #0
    de70:	d1f8      	bne.n	de64 <bsec_codegen_get_configuration+0x6c>
    de72:	4640      	mov	r0, r8
    de74:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
    de78:	f000 fb44 	bl	e504 <bsec_Bsec_getHyperConfiguration>
    de7c:	b968      	cbnz	r0, de9a <bsec_codegen_get_configuration+0xa2>
    de7e:	f995 4000 	ldrsb.w	r4, [r5]
    de82:	2c00      	cmp	r4, #0
    de84:	d1ee      	bne.n	de64 <bsec_codegen_get_configuration+0x6c>
    de86:	9b03      	ldr	r3, [sp, #12]
    de88:	603b      	str	r3, [r7, #0]
    de8a:	4648      	mov	r0, r9
    de8c:	4639      	mov	r1, r7
    de8e:	f000 fae3 	bl	e458 <bsec_Bsec_frameSerializedData>
    de92:	702c      	strb	r4, [r5, #0]
    de94:	b005      	add	sp, #20
    de96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    de9c:	9301      	str	r3, [sp, #4]
    de9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    dea0:	9300      	str	r3, [sp, #0]
    dea2:	4631      	mov	r1, r6
    dea4:	4603      	mov	r3, r0
    dea6:	aa03      	add	r2, sp, #12
    dea8:	4648      	mov	r0, r9
    deaa:	f000 f99d 	bl	e1e8 <bsec_Bsec_append>
    deae:	4604      	mov	r4, r0
    deb0:	7028      	strb	r0, [r5, #0]
    deb2:	e7e6      	b.n	de82 <bsec_codegen_get_configuration+0x8a>

0000deb4 <bsec_codegen_get_state>:
    deb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    deb8:	b085      	sub	sp, #20
    deba:	e9dd 5710 	ldrd	r5, r7, [sp, #64]	; 0x40
    debe:	24df      	movs	r4, #223	; 0xdf
    dec0:	702c      	strb	r4, [r5, #0]
    dec2:	2600      	movs	r6, #0
    dec4:	2410      	movs	r4, #16
    dec6:	2b18      	cmp	r3, #24
    dec8:	603e      	str	r6, [r7, #0]
    deca:	9403      	str	r4, [sp, #12]
    decc:	d928      	bls.n	df20 <bsec_codegen_get_state+0x6c>
    dece:	bb39      	cbnz	r1, df20 <bsec_codegen_get_state+0x6c>
    ded0:	461e      	mov	r6, r3
    ded2:	4691      	mov	r9, r2
    ded4:	4680      	mov	r8, r0
    ded6:	460b      	mov	r3, r1
    ded8:	7029      	strb	r1, [r5, #0]
    deda:	468b      	mov	fp, r1
    dedc:	f240 3a17 	movw	sl, #791	; 0x317
    dee0:	e002      	b.n	dee8 <bsec_codegen_get_state+0x34>
    dee2:	2c0a      	cmp	r4, #10
    dee4:	4623      	mov	r3, r4
    dee6:	d01e      	beq.n	df26 <bsec_codegen_get_state+0x72>
    dee8:	1c5c      	adds	r4, r3, #1
    deea:	fa4a f303 	asr.w	r3, sl, r3
    deee:	07db      	lsls	r3, r3, #31
    def0:	b2e1      	uxtb	r1, r4
    def2:	d5f6      	bpl.n	dee2 <bsec_codegen_get_state+0x2e>
    def4:	f8cd b000 	str.w	fp, [sp]
    def8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    defc:	4640      	mov	r0, r8
    defe:	f001 fb23 	bl	f548 <bsec_ChannelHub_getChannelState>
    df02:	2800      	cmp	r0, #0
    df04:	d0ed      	beq.n	dee2 <bsec_codegen_get_state+0x2e>
    df06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    df08:	9301      	str	r3, [sp, #4]
    df0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    df0c:	9300      	str	r3, [sp, #0]
    df0e:	aa03      	add	r2, sp, #12
    df10:	4603      	mov	r3, r0
    df12:	4631      	mov	r1, r6
    df14:	4648      	mov	r0, r9
    df16:	f000 f967 	bl	e1e8 <bsec_Bsec_append>
    df1a:	7028      	strb	r0, [r5, #0]
    df1c:	2800      	cmp	r0, #0
    df1e:	d0e0      	beq.n	dee2 <bsec_codegen_get_state+0x2e>
    df20:	b005      	add	sp, #20
    df22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    df26:	f995 3000 	ldrsb.w	r3, [r5]
    df2a:	2b00      	cmp	r3, #0
    df2c:	d1f8      	bne.n	df20 <bsec_codegen_get_state+0x6c>
    df2e:	f000 fb63 	bl	e5f8 <bsec_Bsec_getHyperState>
    df32:	b968      	cbnz	r0, df50 <bsec_codegen_get_state+0x9c>
    df34:	f995 4000 	ldrsb.w	r4, [r5]
    df38:	2c00      	cmp	r4, #0
    df3a:	d1f1      	bne.n	df20 <bsec_codegen_get_state+0x6c>
    df3c:	9b03      	ldr	r3, [sp, #12]
    df3e:	603b      	str	r3, [r7, #0]
    df40:	4648      	mov	r0, r9
    df42:	4639      	mov	r1, r7
    df44:	f000 fa88 	bl	e458 <bsec_Bsec_frameSerializedData>
    df48:	702c      	strb	r4, [r5, #0]
    df4a:	b005      	add	sp, #20
    df4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    df50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    df52:	9301      	str	r3, [sp, #4]
    df54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    df56:	9300      	str	r3, [sp, #0]
    df58:	4631      	mov	r1, r6
    df5a:	4603      	mov	r3, r0
    df5c:	aa03      	add	r2, sp, #12
    df5e:	4648      	mov	r0, r9
    df60:	f000 f942 	bl	e1e8 <bsec_Bsec_append>
    df64:	4604      	mov	r4, r0
    df66:	7028      	strb	r0, [r5, #0]
    df68:	e7e6      	b.n	df38 <bsec_codegen_get_state+0x84>
    df6a:	bf00      	nop

0000df6c <bsec_codegen_get_version>:
    df6c:	2304      	movs	r3, #4
    df6e:	2001      	movs	r0, #1
    df70:	2207      	movs	r2, #7
    df72:	7008      	strb	r0, [r1, #0]
    df74:	708a      	strb	r2, [r1, #2]
    df76:	704b      	strb	r3, [r1, #1]
    df78:	70cb      	strb	r3, [r1, #3]
    df7a:	4770      	bx	lr

0000df7c <bsec_codegen_init>:
    df7c:	f000 b8b8 	b.w	e0f0 <bsec_constructor_bsec>

0000df80 <bsec_codegen_reset_output>:
    df80:	3901      	subs	r1, #1
    df82:	2903      	cmp	r1, #3
    df84:	d901      	bls.n	df8a <bsec_codegen_reset_output+0xa>
    df86:	2000      	movs	r0, #0
    df88:	4770      	bx	lr
    df8a:	b510      	push	{r4, lr}
    df8c:	4604      	mov	r4, r0
    df8e:	3068      	adds	r0, #104	; 0x68
    df90:	f002 fd90 	bl	10ab4 <bsec_GasHumidityBaselineTracker_setState>
    df94:	4620      	mov	r0, r4
    df96:	2101      	movs	r1, #1
    df98:	f001 fce6 	bl	f968 <bsec_b_ChannelHub_updateChannelInterfaceDependency>
    df9c:	4b04      	ldr	r3, [pc, #16]	; (dfb0 <bsec_codegen_reset_output+0x30>)
    df9e:	6623      	str	r3, [r4, #96]	; 0x60
    dfa0:	4620      	mov	r0, r4
    dfa2:	6663      	str	r3, [r4, #100]	; 0x64
    dfa4:	2102      	movs	r1, #2
    dfa6:	f001 fcdf 	bl	f968 <bsec_b_ChannelHub_updateChannelInterfaceDependency>
    dfaa:	2000      	movs	r0, #0
    dfac:	bd10      	pop	{r4, pc}
    dfae:	bf00      	nop
    dfb0:	41c80000 	.word	0x41c80000

0000dfb4 <bsec_codegen_set_configuration>:
    dfb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dfb8:	b089      	sub	sp, #36	; 0x24
    dfba:	4688      	mov	r8, r1
    dfbc:	4616      	mov	r6, r2
    dfbe:	f10d 0a16 	add.w	sl, sp, #22
    dfc2:	f10d 0918 	add.w	r9, sp, #24
    dfc6:	4607      	mov	r7, r0
    dfc8:	461c      	mov	r4, r3
    dfca:	9a12      	ldr	r2, [sp, #72]	; 0x48
    dfcc:	f8cd 9000 	str.w	r9, [sp]
    dfd0:	4653      	mov	r3, sl
    dfd2:	4631      	mov	r1, r6
    dfd4:	4640      	mov	r0, r8
    dfd6:	f000 fd03 	bl	e9e0 <bsec_Bsec_validateSerialization>
    dfda:	f99d 3016 	ldrsb.w	r3, [sp, #22]
    dfde:	bb1b      	cbnz	r3, e028 <bsec_codegen_set_configuration+0x74>
    dfe0:	3e08      	subs	r6, #8
    dfe2:	f10d 0b1c 	add.w	fp, sp, #28
    dfe6:	9d06      	ldr	r5, [sp, #24]
    dfe8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    dfea:	42b5      	cmp	r5, r6
    dfec:	4622      	mov	r2, r4
    dfee:	4649      	mov	r1, r9
    dff0:	4640      	mov	r0, r8
    dff2:	d227      	bcs.n	e044 <bsec_codegen_set_configuration+0x90>
    dff4:	f10d 0517 	add.w	r5, sp, #23
    dff8:	f8cd b008 	str.w	fp, [sp, #8]
    dffc:	e9cd a500 	strd	sl, r5, [sp]
    e000:	f000 fb44 	bl	e68c <bsec_Bsec_parse>
    e004:	f99d 3016 	ldrsb.w	r3, [sp, #22]
    e008:	4621      	mov	r1, r4
    e00a:	4638      	mov	r0, r7
    e00c:	b963      	cbnz	r3, e028 <bsec_codegen_set_configuration+0x74>
    e00e:	f89d 5017 	ldrb.w	r5, [sp, #23]
    e012:	9b07      	ldr	r3, [sp, #28]
    e014:	2dfe      	cmp	r5, #254	; 0xfe
    e016:	461a      	mov	r2, r3
    e018:	d10a      	bne.n	e030 <bsec_codegen_set_configuration+0x7c>
    e01a:	f000 fd5f 	bl	eadc <bsec_b_Bsec_setHyperConfiguration>
    e01e:	4603      	mov	r3, r0
    e020:	f88d 0016 	strb.w	r0, [sp, #22]
    e024:	2b00      	cmp	r3, #0
    e026:	d0de      	beq.n	dfe6 <bsec_codegen_set_configuration+0x32>
    e028:	4618      	mov	r0, r3
    e02a:	b009      	add	sp, #36	; 0x24
    e02c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e030:	4629      	mov	r1, r5
    e032:	4622      	mov	r2, r4
    e034:	f000 fec8 	bl	edc8 <bsec_ChannelHub_configureChannel>
    e038:	4603      	mov	r3, r0
    e03a:	f88d 0016 	strb.w	r0, [sp, #22]
    e03e:	2b00      	cmp	r3, #0
    e040:	d0d1      	beq.n	dfe6 <bsec_codegen_set_configuration+0x32>
    e042:	e7f1      	b.n	e028 <bsec_codegen_set_configuration+0x74>
    e044:	f99d 3016 	ldrsb.w	r3, [sp, #22]
    e048:	4618      	mov	r0, r3
    e04a:	b009      	add	sp, #36	; 0x24
    e04c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000e050 <bsec_codegen_set_state>:
    e050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e054:	b08b      	sub	sp, #44	; 0x2c
    e056:	460f      	mov	r7, r1
    e058:	4616      	mov	r6, r2
    e05a:	f10d 091e 	add.w	r9, sp, #30
    e05e:	f10d 0820 	add.w	r8, sp, #32
    e062:	4682      	mov	sl, r0
    e064:	461c      	mov	r4, r3
    e066:	9a14      	ldr	r2, [sp, #80]	; 0x50
    e068:	f8cd 8000 	str.w	r8, [sp]
    e06c:	464b      	mov	r3, r9
    e06e:	4631      	mov	r1, r6
    e070:	4638      	mov	r0, r7
    e072:	f000 fcb5 	bl	e9e0 <bsec_Bsec_validateSerialization>
    e076:	f99d 301e 	ldrsb.w	r3, [sp, #30]
    e07a:	bb23      	cbnz	r3, e0c6 <bsec_codegen_set_state+0x76>
    e07c:	f10d 031f 	add.w	r3, sp, #31
    e080:	3e08      	subs	r6, #8
    e082:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
    e086:	9305      	str	r3, [sp, #20]
    e088:	9d08      	ldr	r5, [sp, #32]
    e08a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    e08c:	42b5      	cmp	r5, r6
    e08e:	4622      	mov	r2, r4
    e090:	4641      	mov	r1, r8
    e092:	4638      	mov	r0, r7
    e094:	d226      	bcs.n	e0e4 <bsec_codegen_set_state+0x94>
    e096:	9d05      	ldr	r5, [sp, #20]
    e098:	f8cd b008 	str.w	fp, [sp, #8]
    e09c:	e9cd 9500 	strd	r9, r5, [sp]
    e0a0:	f000 faf4 	bl	e68c <bsec_Bsec_parse>
    e0a4:	f99d 301e 	ldrsb.w	r3, [sp, #30]
    e0a8:	4620      	mov	r0, r4
    e0aa:	b963      	cbnz	r3, e0c6 <bsec_codegen_set_state+0x76>
    e0ac:	f89d 201f 	ldrb.w	r2, [sp, #31]
    e0b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e0b2:	2afe      	cmp	r2, #254	; 0xfe
    e0b4:	4619      	mov	r1, r3
    e0b6:	d10a      	bne.n	e0ce <bsec_codegen_set_state+0x7e>
    e0b8:	f000 fdc4 	bl	ec44 <bsec_b_Bsec_setHyperState>
    e0bc:	4603      	mov	r3, r0
    e0be:	f88d 001e 	strb.w	r0, [sp, #30]
    e0c2:	2b00      	cmp	r3, #0
    e0c4:	d0e0      	beq.n	e088 <bsec_codegen_set_state+0x38>
    e0c6:	4618      	mov	r0, r3
    e0c8:	b00b      	add	sp, #44	; 0x2c
    e0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e0ce:	4611      	mov	r1, r2
    e0d0:	4650      	mov	r0, sl
    e0d2:	4622      	mov	r2, r4
    e0d4:	f001 fb6e 	bl	f7b4 <bsec_ChannelHub_setChannelState>
    e0d8:	4603      	mov	r3, r0
    e0da:	f88d 001e 	strb.w	r0, [sp, #30]
    e0de:	2b00      	cmp	r3, #0
    e0e0:	d0d2      	beq.n	e088 <bsec_codegen_set_state+0x38>
    e0e2:	e7f0      	b.n	e0c6 <bsec_codegen_set_state+0x76>
    e0e4:	f99d 301e 	ldrsb.w	r3, [sp, #30]
    e0e8:	4618      	mov	r0, r3
    e0ea:	b00b      	add	sp, #44	; 0x2c
    e0ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000e0f0 <bsec_constructor_bsec>:
    e0f0:	b510      	push	{r4, lr}
    e0f2:	4604      	mov	r4, r0
    e0f4:	f000 fdfc 	bl	ecf0 <bsec_ChannelHub_ChannelHub>
    e0f8:	4620      	mov	r0, r4
    e0fa:	f000 fc41 	bl	e980 <bsec_Bsec_setHyperState>
    e0fe:	4620      	mov	r0, r4
    e100:	f000 fb1e 	bl	e740 <bsec_Bsec_setHyperConfiguration>
    e104:	4620      	mov	r0, r4
    e106:	bd10      	pop	{r4, pc}

0000e108 <bsec_Bsec_applyUpdateSubscription.part.0>:
    e108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e10c:	4606      	mov	r6, r0
    e10e:	4f32      	ldr	r7, [pc, #200]	; (e1d8 <bsec_Bsec_applyUpdateSubscription.part.0+0xd0>)
    e110:	4d32      	ldr	r5, [pc, #200]	; (e1dc <bsec_Bsec_applyUpdateSubscription.part.0+0xd4>)
    e112:	f001 fb23 	bl	f75c <bsec_ChannelHub_resetSamplIntvls>
    e116:	2300      	movs	r3, #0
    e118:	e002      	b.n	e120 <bsec_Bsec_applyUpdateSubscription.part.0+0x18>
    e11a:	2c15      	cmp	r4, #21
    e11c:	4623      	mov	r3, r4
    e11e:	d010      	beq.n	e142 <bsec_Bsec_applyUpdateSubscription.part.0+0x3a>
    e120:	fa47 f203 	asr.w	r2, r7, r3
    e124:	1c5c      	adds	r4, r3, #1
    e126:	07d0      	lsls	r0, r2, #31
    e128:	b2e1      	uxtb	r1, r4
    e12a:	d5f6      	bpl.n	e11a <bsec_Bsec_applyUpdateSubscription.part.0+0x12>
    e12c:	5d5b      	ldrb	r3, [r3, r5]
    e12e:	eb06 0343 	add.w	r3, r6, r3, lsl #1
    e132:	4630      	mov	r0, r6
    e134:	f8b3 2428 	ldrh.w	r2, [r3, #1064]	; 0x428
    e138:	f001 fbca 	bl	f8d0 <bsec_ChannelHub_updateOutputSamplIntvl>
    e13c:	2c15      	cmp	r4, #21
    e13e:	4623      	mov	r3, r4
    e140:	d1ee      	bne.n	e120 <bsec_Bsec_applyUpdateSubscription.part.0+0x18>
    e142:	4630      	mov	r0, r6
    e144:	f001 fa98 	bl	f678 <bsec_ChannelHub_recalculateDownsampling>
    e148:	4f23      	ldr	r7, [pc, #140]	; (e1d8 <bsec_Bsec_applyUpdateSubscription.part.0+0xd0>)
    e14a:	f8df 8090 	ldr.w	r8, [pc, #144]	; e1dc <bsec_Bsec_applyUpdateSubscription.part.0+0xd4>
    e14e:	f8df 9094 	ldr.w	r9, [pc, #148]	; e1e4 <bsec_Bsec_applyUpdateSubscription.part.0+0xdc>
    e152:	2500      	movs	r5, #0
    e154:	e002      	b.n	e15c <bsec_Bsec_applyUpdateSubscription.part.0+0x54>
    e156:	3501      	adds	r5, #1
    e158:	2d15      	cmp	r5, #21
    e15a:	d01b      	beq.n	e194 <bsec_Bsec_applyUpdateSubscription.part.0+0x8c>
    e15c:	fa47 f305 	asr.w	r3, r7, r5
    e160:	07da      	lsls	r2, r3, #31
    e162:	d5f8      	bpl.n	e156 <bsec_Bsec_applyUpdateSubscription.part.0+0x4e>
    e164:	f815 3008 	ldrb.w	r3, [r5, r8]
    e168:	4433      	add	r3, r6
    e16a:	f893 3445 	ldrb.w	r3, [r3, #1093]	; 0x445
    e16e:	2b00      	cmp	r3, #0
    e170:	d0f1      	beq.n	e156 <bsec_Bsec_applyUpdateSubscription.part.0+0x4e>
    e172:	f939 a015 	ldrsh.w	sl, [r9, r5, lsl #1]
    e176:	2300      	movs	r3, #0
    e178:	e002      	b.n	e180 <bsec_Bsec_applyUpdateSubscription.part.0+0x78>
    e17a:	2c0a      	cmp	r4, #10
    e17c:	4623      	mov	r3, r4
    e17e:	d0ea      	beq.n	e156 <bsec_Bsec_applyUpdateSubscription.part.0+0x4e>
    e180:	1c5c      	adds	r4, r3, #1
    e182:	fa4a f303 	asr.w	r3, sl, r3
    e186:	07db      	lsls	r3, r3, #31
    e188:	b2e1      	uxtb	r1, r4
    e18a:	d5f6      	bpl.n	e17a <bsec_Bsec_applyUpdateSubscription.part.0+0x72>
    e18c:	4630      	mov	r0, r6
    e18e:	f001 fb67 	bl	f860 <bsec_ChannelHub_updateChannelInterfaceDependency>
    e192:	e7f2      	b.n	e17a <bsec_Bsec_applyUpdateSubscription.part.0+0x72>
    e194:	2400      	movs	r4, #0
    e196:	4621      	mov	r1, r4
    e198:	f886 445a 	strb.w	r4, [r6, #1114]	; 0x45a
    e19c:	220e      	movs	r2, #14
    e19e:	f206 4046 	addw	r0, r6, #1094	; 0x446
    e1a2:	f02a ff48 	bl	39036 <memset>
    e1a6:	4b0e      	ldr	r3, [pc, #56]	; (e1e0 <bsec_Bsec_applyUpdateSubscription.part.0+0xd8>)
    e1a8:	f886 4456 	strb.w	r4, [r6, #1110]	; 0x456
    e1ac:	78db      	ldrb	r3, [r3, #3]
    e1ae:	f203 1353 	addw	r3, r3, #339	; 0x153
    e1b2:	4621      	mov	r1, r4
    e1b4:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
    e1b8:	f206 4312 	addw	r3, r6, #1042	; 0x412
    e1bc:	f833 2b02 	ldrh.w	r2, [r3], #2
    e1c0:	4290      	cmp	r0, r2
    e1c2:	f101 0101 	add.w	r1, r1, #1
    e1c6:	d003      	beq.n	e1d0 <bsec_Bsec_applyUpdateSubscription.part.0+0xc8>
    e1c8:	2904      	cmp	r1, #4
    e1ca:	d1f7      	bne.n	e1bc <bsec_Bsec_applyUpdateSubscription.part.0+0xb4>
    e1cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e1d0:	f886 1456 	strb.w	r1, [r6, #1110]	; 0x456
    e1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e1d8:	001279ef 	.word	0x001279ef
    e1dc:	0003ad58 	.word	0x0003ad58
    e1e0:	0003ad70 	.word	0x0003ad70
    e1e4:	0003acd8 	.word	0x0003acd8

0000e1e8 <bsec_Bsec_append>:
    e1e8:	b4f0      	push	{r4, r5, r6, r7}
    e1ea:	6816      	ldr	r6, [r2, #0]
    e1ec:	18f4      	adds	r4, r6, r3
    e1ee:	428c      	cmp	r4, r1
    e1f0:	d818      	bhi.n	e224 <bsec_Bsec_append+0x3c>
    e1f2:	9905      	ldr	r1, [sp, #20]
    e1f4:	428b      	cmp	r3, r1
    e1f6:	d818      	bhi.n	e22a <bsec_Bsec_append+0x42>
    e1f8:	b183      	cbz	r3, e21c <bsec_Bsec_append+0x34>
    e1fa:	9904      	ldr	r1, [sp, #16]
    e1fc:	1c5f      	adds	r7, r3, #1
    e1fe:	1e4d      	subs	r5, r1, #1
    e200:	2101      	movs	r1, #1
    e202:	e000      	b.n	e206 <bsec_Bsec_append+0x1e>
    e204:	6816      	ldr	r6, [r2, #0]
    e206:	1844      	adds	r4, r0, r1
    e208:	4434      	add	r4, r6
    e20a:	3101      	adds	r1, #1
    e20c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    e210:	f804 6c01 	strb.w	r6, [r4, #-1]
    e214:	428f      	cmp	r7, r1
    e216:	d1f5      	bne.n	e204 <bsec_Bsec_append+0x1c>
    e218:	6814      	ldr	r4, [r2, #0]
    e21a:	441c      	add	r4, r3
    e21c:	6014      	str	r4, [r2, #0]
    e21e:	2000      	movs	r0, #0
    e220:	bcf0      	pop	{r4, r5, r6, r7}
    e222:	4770      	bx	lr
    e224:	f06f 0028 	mvn.w	r0, #40	; 0x28
    e228:	e7fa      	b.n	e220 <bsec_Bsec_append+0x38>
    e22a:	f06f 0025 	mvn.w	r0, #37	; 0x25
    e22e:	e7f7      	b.n	e220 <bsec_Bsec_append+0x38>

0000e230 <bsec_Bsec_applyUpdateSubscription>:
    e230:	f890 345a 	ldrb.w	r3, [r0, #1114]	; 0x45a
    e234:	b903      	cbnz	r3, e238 <bsec_Bsec_applyUpdateSubscription+0x8>
    e236:	4770      	bx	lr
    e238:	e766      	b.n	e108 <bsec_Bsec_applyUpdateSubscription.part.0>
    e23a:	bf00      	nop

0000e23c <bsec_Bsec_checkIfSensorRequired>:
    e23c:	b470      	push	{r4, r5, r6}
    e23e:	3901      	subs	r1, #1
    e240:	4c13      	ldr	r4, [pc, #76]	; (e290 <bsec_Bsec_checkIfSensorRequired+0x54>)
    e242:	9d03      	ldr	r5, [sp, #12]
    e244:	5c64      	ldrb	r4, [r4, r1]
    e246:	f204 1453 	addw	r4, r4, #339	; 0x153
    e24a:	2600      	movs	r6, #0
    e24c:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
    e250:	701e      	strb	r6, [r3, #0]
    e252:	f64f 76ff 	movw	r6, #65535	; 0xffff
    e256:	42b4      	cmp	r4, r6
    e258:	802c      	strh	r4, [r5, #0]
    e25a:	d010      	beq.n	e27e <bsec_Bsec_checkIfSensorRequired+0x42>
    e25c:	f8b0 6454 	ldrh.w	r6, [r0, #1108]	; 0x454
    e260:	fbb6 f5f4 	udiv	r5, r6, r4
    e264:	fb04 6415 	mls	r4, r4, r5, r6
    e268:	b2a4      	uxth	r4, r4
    e26a:	b954      	cbnz	r4, e282 <bsec_Bsec_checkIfSensorRequired+0x46>
    e26c:	2401      	movs	r4, #1
    e26e:	6890      	ldr	r0, [r2, #8]
    e270:	701c      	strb	r4, [r3, #0]
    e272:	b2c9      	uxtb	r1, r1
    e274:	fa04 f101 	lsl.w	r1, r4, r1
    e278:	4301      	orrs	r1, r0
    e27a:	7514      	strb	r4, [r2, #20]
    e27c:	6091      	str	r1, [r2, #8]
    e27e:	bc70      	pop	{r4, r5, r6}
    e280:	4770      	bx	lr
    e282:	f890 045b 	ldrb.w	r0, [r0, #1115]	; 0x45b
    e286:	2800      	cmp	r0, #0
    e288:	d1f0      	bne.n	e26c <bsec_Bsec_checkIfSensorRequired+0x30>
    e28a:	bc70      	pop	{r4, r5, r6}
    e28c:	4770      	bx	lr
    e28e:	bf00      	nop
    e290:	0003ad70 	.word	0x0003ad70

0000e294 <bsec_Bsec_checkSamplIntvlCompatibilty>:
    e294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e298:	4c6a      	ldr	r4, [pc, #424]	; (e444 <bsec_Bsec_checkSamplIntvlCompatibilty+0x1b0>)
    e29a:	4e6b      	ldr	r6, [pc, #428]	; (e448 <bsec_Bsec_checkSamplIntvlCompatibilty+0x1b4>)
    e29c:	2300      	movs	r3, #0
    e29e:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    e2a2:	f64f 77ff 	movw	r7, #65535	; 0xffff
    e2a6:	fa44 f203 	asr.w	r2, r4, r3
    e2aa:	07d2      	lsls	r2, r2, #31
    e2ac:	f140 80b0 	bpl.w	e410 <bsec_Bsec_checkSamplIntvlCompatibilty+0x17c>
    e2b0:	5cf2      	ldrb	r2, [r6, r3]
    e2b2:	442a      	add	r2, r5
    e2b4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
    e2b8:	f5b2 6fe1 	cmp.w	r2, #1800	; 0x708
    e2bc:	f000 80a8 	beq.w	e410 <bsec_Bsec_checkSamplIntvlCompatibilty+0x17c>
    e2c0:	42ba      	cmp	r2, r7
    e2c2:	f000 80a5 	beq.w	e410 <bsec_Bsec_checkSamplIntvlCompatibilty+0x17c>
    e2c6:	f8b0 c40e 	ldrh.w	ip, [r0, #1038]	; 0x40e
    e2ca:	4d5e      	ldr	r5, [pc, #376]	; (e444 <bsec_Bsec_checkSamplIntvlCompatibilty+0x1b0>)
    e2cc:	4664      	mov	r4, ip
    e2ce:	2300      	movs	r3, #0
    e2d0:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
    e2d4:	fa45 f203 	asr.w	r2, r5, r3
    e2d8:	07d2      	lsls	r2, r2, #31
    e2da:	d506      	bpl.n	e2ea <bsec_Bsec_checkSamplIntvlCompatibilty+0x56>
    e2dc:	5cf2      	ldrb	r2, [r6, r3]
    e2de:	443a      	add	r2, r7
    e2e0:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
    e2e4:	4294      	cmp	r4, r2
    e2e6:	bf28      	it	cs
    e2e8:	4614      	movcs	r4, r2
    e2ea:	3301      	adds	r3, #1
    e2ec:	2b15      	cmp	r3, #21
    e2ee:	d1f1      	bne.n	e2d4 <bsec_Bsec_checkSamplIntvlCompatibilty+0x40>
    e2f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e2f4:	4294      	cmp	r4, r2
    e2f6:	d01f      	beq.n	e338 <bsec_Bsec_checkSamplIntvlCompatibilty+0xa4>
    e2f8:	fbbc f3f4 	udiv	r3, ip, r4
    e2fc:	fb04 c313 	mls	r3, r4, r3, ip
    e300:	b29b      	uxth	r3, r3
    e302:	2b00      	cmp	r3, #0
    e304:	f040 809b 	bne.w	e43e <bsec_Bsec_checkSamplIntvlCompatibilty+0x1aa>
    e308:	4f4e      	ldr	r7, [pc, #312]	; (e444 <bsec_Bsec_checkSamplIntvlCompatibilty+0x1b0>)
    e30a:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
    e30e:	fa47 f503 	asr.w	r5, r7, r3
    e312:	07ed      	lsls	r5, r5, #31
    e314:	d50d      	bpl.n	e332 <bsec_Bsec_checkSamplIntvlCompatibilty+0x9e>
    e316:	5cf5      	ldrb	r5, [r6, r3]
    e318:	4465      	add	r5, ip
    e31a:	f831 e015 	ldrh.w	lr, [r1, r5, lsl #1]
    e31e:	4596      	cmp	lr, r2
    e320:	d007      	beq.n	e332 <bsec_Bsec_checkSamplIntvlCompatibilty+0x9e>
    e322:	fbbe f5f4 	udiv	r5, lr, r4
    e326:	fb04 e515 	mls	r5, r4, r5, lr
    e32a:	b2ad      	uxth	r5, r5
    e32c:	2d00      	cmp	r5, #0
    e32e:	f040 8086 	bne.w	e43e <bsec_Bsec_checkSamplIntvlCompatibilty+0x1aa>
    e332:	3301      	adds	r3, #1
    e334:	2b15      	cmp	r3, #21
    e336:	d1ea      	bne.n	e30e <bsec_Bsec_checkSamplIntvlCompatibilty+0x7a>
    e338:	f64f 75ff 	movw	r5, #65535	; 0xffff
    e33c:	4a43      	ldr	r2, [pc, #268]	; (e44c <bsec_Bsec_checkSamplIntvlCompatibilty+0x1b8>)
    e33e:	4f41      	ldr	r7, [pc, #260]	; (e444 <bsec_Bsec_checkSamplIntvlCompatibilty+0x1b0>)
    e340:	46ae      	mov	lr, r5
    e342:	2300      	movs	r3, #0
    e344:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
    e348:	f852 4b04 	ldr.w	r4, [r2], #4
    e34c:	0724      	lsls	r4, r4, #28
    e34e:	fa47 fc03 	asr.w	ip, r7, r3
    e352:	d502      	bpl.n	e35a <bsec_Bsec_checkSamplIntvlCompatibilty+0xc6>
    e354:	f01c 0f01 	tst.w	ip, #1
    e358:	d15f      	bne.n	e41a <bsec_Bsec_checkSamplIntvlCompatibilty+0x186>
    e35a:	3301      	adds	r3, #1
    e35c:	2b15      	cmp	r3, #21
    e35e:	d1f3      	bne.n	e348 <bsec_Bsec_checkSamplIntvlCompatibilty+0xb4>
    e360:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e364:	429d      	cmp	r5, r3
    e366:	d066      	beq.n	e436 <bsec_Bsec_checkSamplIntvlCompatibilty+0x1a2>
    e368:	f200 4212 	addw	r2, r0, #1042	; 0x412
    e36c:	2300      	movs	r3, #0
    e36e:	e002      	b.n	e376 <bsec_Bsec_checkSamplIntvlCompatibilty+0xe2>
    e370:	3301      	adds	r3, #1
    e372:	2b04      	cmp	r3, #4
    e374:	d009      	beq.n	e38a <bsec_Bsec_checkSamplIntvlCompatibilty+0xf6>
    e376:	f832 4b02 	ldrh.w	r4, [r2], #2
    e37a:	42ac      	cmp	r4, r5
    e37c:	d1f8      	bne.n	e370 <bsec_Bsec_checkSamplIntvlCompatibilty+0xdc>
    e37e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    e382:	f8b3 341a 	ldrh.w	r3, [r3, #1050]	; 0x41a
    e386:	3304      	adds	r3, #4
    e388:	b29b      	uxth	r3, r3
    e38a:	4d2e      	ldr	r5, [pc, #184]	; (e444 <bsec_Bsec_checkSamplIntvlCompatibilty+0x1b0>)
    e38c:	ed9f 6a30 	vldr	s12, [pc, #192]	; e450 <bsec_Bsec_checkSamplIntvlCompatibilty+0x1bc>
    e390:	eddf 6a30 	vldr	s13, [pc, #192]	; e454 <bsec_Bsec_checkSamplIntvlCompatibilty+0x1c0>
    e394:	2400      	movs	r4, #0
    e396:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
    e39a:	f64f 7cff 	movw	ip, #65535	; 0xffff
    e39e:	fa45 f204 	asr.w	r2, r5, r4
    e3a2:	07d2      	lsls	r2, r2, #31
    e3a4:	d52e      	bpl.n	e404 <bsec_Bsec_checkSamplIntvlCompatibilty+0x170>
    e3a6:	f890 e457 	ldrb.w	lr, [r0, #1111]	; 0x457
    e3aa:	f890 8459 	ldrb.w	r8, [r0, #1113]	; 0x459
    e3ae:	f890 2458 	ldrb.w	r2, [r0, #1112]	; 0x458
    e3b2:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
    e3b6:	ea4f 0848 	mov.w	r8, r8, lsl #1
    e3ba:	fa5f fe8e 	uxtb.w	lr, lr
    e3be:	fa5f f888 	uxtb.w	r8, r8
    e3c2:	0052      	lsls	r2, r2, #1
    e3c4:	44c6      	add	lr, r8
    e3c6:	b2d2      	uxtb	r2, r2
    e3c8:	4472      	add	r2, lr
    e3ca:	441a      	add	r2, r3
    e3cc:	b292      	uxth	r2, r2
    e3ce:	ee07 2a90 	vmov	s15, r2
    e3d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    e3d6:	5d32      	ldrb	r2, [r6, r4]
    e3d8:	ee67 7a86 	vmul.f32	s15, s15, s12
    e3dc:	443a      	add	r2, r7
    e3de:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    e3e2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
    e3e6:	ee07 2a90 	vmov	s15, r2
    e3ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    e3ee:	eef4 7ac7 	vcmpe.f32	s15, s14
    e3f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e3f6:	d505      	bpl.n	e404 <bsec_Bsec_checkSamplIntvlCompatibilty+0x170>
    e3f8:	4562      	cmp	r2, ip
    e3fa:	d003      	beq.n	e404 <bsec_Bsec_checkSamplIntvlCompatibilty+0x170>
    e3fc:	f06f 0011 	mvn.w	r0, #17
    e400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e404:	3401      	adds	r4, #1
    e406:	2c15      	cmp	r4, #21
    e408:	d1c9      	bne.n	e39e <bsec_Bsec_checkSamplIntvlCompatibilty+0x10a>
    e40a:	2000      	movs	r0, #0
    e40c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e410:	3301      	adds	r3, #1
    e412:	2b15      	cmp	r3, #21
    e414:	f47f af47 	bne.w	e2a6 <bsec_Bsec_checkSamplIntvlCompatibilty+0x12>
    e418:	e7f7      	b.n	e40a <bsec_Bsec_checkSamplIntvlCompatibilty+0x176>
    e41a:	5cf4      	ldrb	r4, [r6, r3]
    e41c:	4444      	add	r4, r8
    e41e:	f831 4014 	ldrh.w	r4, [r1, r4, lsl #1]
    e422:	4574      	cmp	r4, lr
    e424:	d099      	beq.n	e35a <bsec_Bsec_checkSamplIntvlCompatibilty+0xc6>
    e426:	4575      	cmp	r5, lr
    e428:	d007      	beq.n	e43a <bsec_Bsec_checkSamplIntvlCompatibilty+0x1a6>
    e42a:	42ac      	cmp	r4, r5
    e42c:	d095      	beq.n	e35a <bsec_Bsec_checkSamplIntvlCompatibilty+0xc6>
    e42e:	f06f 0010 	mvn.w	r0, #16
    e432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e436:	2304      	movs	r3, #4
    e438:	e7a7      	b.n	e38a <bsec_Bsec_checkSamplIntvlCompatibilty+0xf6>
    e43a:	4625      	mov	r5, r4
    e43c:	e78d      	b.n	e35a <bsec_Bsec_checkSamplIntvlCompatibilty+0xc6>
    e43e:	f06f 000f 	mvn.w	r0, #15
    e442:	e7e3      	b.n	e40c <bsec_Bsec_checkSamplIntvlCompatibilty+0x178>
    e444:	001279ef 	.word	0x001279ef
    e448:	0003ad58 	.word	0x0003ad58
    e44c:	0003ad04 	.word	0x0003ad04
    e450:	42c80000 	.word	0x42c80000
    e454:	447a0000 	.word	0x447a0000

0000e458 <bsec_Bsec_frameSerializedData>:
    e458:	b570      	push	{r4, r5, r6, lr}
    e45a:	b088      	sub	sp, #32
    e45c:	ae08      	add	r6, sp, #32
    e45e:	4b28      	ldr	r3, [pc, #160]	; (e500 <bsec_Bsec_frameSerializedData+0xa8>)
    e460:	f846 3d18 	str.w	r3, [r6, #-24]!
    e464:	4604      	mov	r4, r0
    e466:	2204      	movs	r2, #4
    e468:	460d      	mov	r5, r1
    e46a:	a803      	add	r0, sp, #12
    e46c:	4631      	mov	r1, r6
    e46e:	f02a fda8 	bl	38fc2 <memcpy>
    e472:	aa03      	add	r2, sp, #12
    e474:	1e63      	subs	r3, r4, #1
    e476:	1ce0      	adds	r0, r4, #3
    e478:	f812 1b01 	ldrb.w	r1, [r2], #1
    e47c:	f803 1f01 	strb.w	r1, [r3, #1]!
    e480:	4283      	cmp	r3, r0
    e482:	d1f9      	bne.n	e478 <bsec_Bsec_frameSerializedData+0x20>
    e484:	2300      	movs	r3, #0
    e486:	a908      	add	r1, sp, #32
    e488:	223d      	movs	r2, #61	; 0x3d
    e48a:	e961 2304 	strd	r2, r3, [r1, #-16]!
    e48e:	a806      	add	r0, sp, #24
    e490:	2208      	movs	r2, #8
    e492:	f02a fd96 	bl	38fc2 <memcpy>
    e496:	a906      	add	r1, sp, #24
    e498:	2208      	movs	r2, #8
    e49a:	1d20      	adds	r0, r4, #4
    e49c:	f02a fd91 	bl	38fc2 <memcpy>
    e4a0:	682b      	ldr	r3, [r5, #0]
    e4a2:	4631      	mov	r1, r6
    e4a4:	3b10      	subs	r3, #16
    e4a6:	a803      	add	r0, sp, #12
    e4a8:	2204      	movs	r2, #4
    e4aa:	9302      	str	r3, [sp, #8]
    e4ac:	f02a fd89 	bl	38fc2 <memcpy>
    e4b0:	f89d 000c 	ldrb.w	r0, [sp, #12]
    e4b4:	f89d 100d 	ldrb.w	r1, [sp, #13]
    e4b8:	f89d 200e 	ldrb.w	r2, [sp, #14]
    e4bc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e4c0:	7320      	strb	r0, [r4, #12]
    e4c2:	73a2      	strb	r2, [r4, #14]
    e4c4:	73e3      	strb	r3, [r4, #15]
    e4c6:	7361      	strb	r1, [r4, #13]
    e4c8:	6829      	ldr	r1, [r5, #0]
    e4ca:	aa01      	add	r2, sp, #4
    e4cc:	4620      	mov	r0, r4
    e4ce:	f003 fb59 	bl	11b84 <bsec_crcCcitt2>
    e4d2:	682b      	ldr	r3, [r5, #0]
    e4d4:	f89d 0004 	ldrb.w	r0, [sp, #4]
    e4d8:	f89d 1005 	ldrb.w	r1, [sp, #5]
    e4dc:	4423      	add	r3, r4
    e4de:	2200      	movs	r2, #0
    e4e0:	7118      	strb	r0, [r3, #4]
    e4e2:	682b      	ldr	r3, [r5, #0]
    e4e4:	4423      	add	r3, r4
    e4e6:	7159      	strb	r1, [r3, #5]
    e4e8:	682b      	ldr	r3, [r5, #0]
    e4ea:	4423      	add	r3, r4
    e4ec:	719a      	strb	r2, [r3, #6]
    e4ee:	682b      	ldr	r3, [r5, #0]
    e4f0:	441c      	add	r4, r3
    e4f2:	71e2      	strb	r2, [r4, #7]
    e4f4:	682b      	ldr	r3, [r5, #0]
    e4f6:	3308      	adds	r3, #8
    e4f8:	602b      	str	r3, [r5, #0]
    e4fa:	b008      	add	sp, #32
    e4fc:	bd70      	pop	{r4, r5, r6, pc}
    e4fe:	bf00      	nop
    e500:	01040704 	.word	0x01040704

0000e504 <bsec_Bsec_getHyperConfiguration>:
    e504:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e508:	b085      	sub	sp, #20
    e50a:	ac04      	add	r4, sp, #16
    e50c:	2507      	movs	r5, #7
    e50e:	f804 5d09 	strb.w	r5, [r4, #-9]!
    e512:	4606      	mov	r6, r0
    e514:	4617      	mov	r7, r2
    e516:	20fe      	movs	r0, #254	; 0xfe
    e518:	4622      	mov	r2, r4
    e51a:	460d      	mov	r5, r1
    e51c:	f003 fab6 	bl	11a8c <bsec_Serialization_prepareSerializationHeader>
    e520:	f89d 2007 	ldrb.w	r2, [sp, #7]
    e524:	9003      	str	r0, [sp, #12]
    e526:	b1da      	cbz	r2, e560 <bsec_Bsec_getHyperConfiguration+0x5c>
    e528:	2401      	movs	r4, #1
    e52a:	f506 797c 	add.w	r9, r6, #1008	; 0x3f0
    e52e:	f506 7852 	add.w	r8, r6, #840	; 0x348
    e532:	1e63      	subs	r3, r4, #1
    e534:	2b06      	cmp	r3, #6
    e536:	d80e      	bhi.n	e556 <bsec_Bsec_getHyperConfiguration+0x52>
    e538:	e8df f003 	tbb	[pc, r3]
    e53c:	4953353f 	.word	0x4953353f
    e540:	232c      	.short	0x232c
    e542:	04          	.byte	0x04
    e543:	00          	.byte	0x00
    e544:	463a      	mov	r2, r7
    e546:	ab03      	add	r3, sp, #12
    e548:	4629      	mov	r1, r5
    e54a:	f8b6 040e 	ldrh.w	r0, [r6, #1038]	; 0x40e
    e54e:	f001 fadd 	bl	fb0c <bsec_c_Entity_serializeAndAdd>
    e552:	f89d 2007 	ldrb.w	r2, [sp, #7]
    e556:	3401      	adds	r4, #1
    e558:	b2e4      	uxtb	r4, r4
    e55a:	42a2      	cmp	r2, r4
    e55c:	d2e9      	bcs.n	e532 <bsec_Bsec_getHyperConfiguration+0x2e>
    e55e:	9803      	ldr	r0, [sp, #12]
    e560:	a904      	add	r1, sp, #16
    e562:	2202      	movs	r2, #2
    e564:	f821 0d06 	strh.w	r0, [r1, #-6]!
    e568:	a802      	add	r0, sp, #8
    e56a:	f02a fd2a 	bl	38fc2 <memcpy>
    e56e:	f89d 2008 	ldrb.w	r2, [sp, #8]
    e572:	f89d 3009 	ldrb.w	r3, [sp, #9]
    e576:	9803      	ldr	r0, [sp, #12]
    e578:	702a      	strb	r2, [r5, #0]
    e57a:	706b      	strb	r3, [r5, #1]
    e57c:	b005      	add	sp, #20
    e57e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e582:	463a      	mov	r2, r7
    e584:	ab03      	add	r3, sp, #12
    e586:	4629      	mov	r1, r5
    e588:	4648      	mov	r0, r9
    e58a:	f001 fdd5 	bl	10138 <bsec_q_Entity_serializeAndAdd>
    e58e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    e592:	e7e0      	b.n	e556 <bsec_Bsec_getHyperConfiguration+0x52>
    e594:	463a      	mov	r2, r7
    e596:	ab03      	add	r3, sp, #12
    e598:	4629      	mov	r1, r5
    e59a:	4640      	mov	r0, r8
    e59c:	f001 fd8a 	bl	100b4 <bsec_p_Entity_serializeAndAdd>
    e5a0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    e5a4:	e7d7      	b.n	e556 <bsec_Bsec_getHyperConfiguration+0x52>
    e5a6:	463a      	mov	r2, r7
    e5a8:	ab03      	add	r3, sp, #12
    e5aa:	4629      	mov	r1, r5
    e5ac:	f896 0458 	ldrb.w	r0, [r6, #1112]	; 0x458
    e5b0:	f001 fb5c 	bl	fc6c <bsec_f_Entity_serializeAndAdd>
    e5b4:	f89d 2007 	ldrb.w	r2, [sp, #7]
    e5b8:	e7cd      	b.n	e556 <bsec_Bsec_getHyperConfiguration+0x52>
    e5ba:	463a      	mov	r2, r7
    e5bc:	ab03      	add	r3, sp, #12
    e5be:	4629      	mov	r1, r5
    e5c0:	f896 0457 	ldrb.w	r0, [r6, #1111]	; 0x457
    e5c4:	f001 fb52 	bl	fc6c <bsec_f_Entity_serializeAndAdd>
    e5c8:	f89d 2007 	ldrb.w	r2, [sp, #7]
    e5cc:	e7c3      	b.n	e556 <bsec_Bsec_getHyperConfiguration+0x52>
    e5ce:	463a      	mov	r2, r7
    e5d0:	ab03      	add	r3, sp, #12
    e5d2:	4629      	mov	r1, r5
    e5d4:	f206 4012 	addw	r0, r6, #1042	; 0x412
    e5d8:	f001 fd42 	bl	10060 <bsec_o_Entity_serializeAndAdd>
    e5dc:	f89d 2007 	ldrb.w	r2, [sp, #7]
    e5e0:	e7b9      	b.n	e556 <bsec_Bsec_getHyperConfiguration+0x52>
    e5e2:	463a      	mov	r2, r7
    e5e4:	ab03      	add	r3, sp, #12
    e5e6:	4629      	mov	r1, r5
    e5e8:	f896 0459 	ldrb.w	r0, [r6, #1113]	; 0x459
    e5ec:	f001 fb3e 	bl	fc6c <bsec_f_Entity_serializeAndAdd>
    e5f0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    e5f4:	e7af      	b.n	e556 <bsec_Bsec_getHyperConfiguration+0x52>
    e5f6:	bf00      	nop

0000e5f8 <bsec_Bsec_getHyperState>:
    e5f8:	2000      	movs	r0, #0
    e5fa:	4770      	bx	lr

0000e5fc <bsec_Bsec_getModHeatingDuration>:
    e5fc:	b508      	push	{r3, lr}
    e5fe:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
    e602:	ed2d 8b02 	vpush	{d8}
    e606:	eef0 8a40 	vmov.f32	s17, s0
    e60a:	f021 f867 	bl	2f6dc <powf>
    e60e:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
    e612:	eeb0 8a40 	vmov.f32	s16, s0
    e616:	eeb0 0a68 	vmov.f32	s0, s17
    e61a:	f021 f85f 	bl	2f6dc <powf>
    e61e:	ed9f 5a15 	vldr	s10, [pc, #84]	; e674 <bsec_Bsec_getModHeatingDuration+0x78>
    e622:	eddf 7a15 	vldr	s15, [pc, #84]	; e678 <bsec_Bsec_getModHeatingDuration+0x7c>
    e626:	eddf 5a15 	vldr	s11, [pc, #84]	; e67c <bsec_Bsec_getModHeatingDuration+0x80>
    e62a:	ed9f 6a15 	vldr	s12, [pc, #84]	; e680 <bsec_Bsec_getModHeatingDuration+0x84>
    e62e:	eddf 6a15 	vldr	s13, [pc, #84]	; e684 <bsec_Bsec_getModHeatingDuration+0x88>
    e632:	ed9f 7a15 	vldr	s14, [pc, #84]	; e688 <bsec_Bsec_getModHeatingDuration+0x8c>
    e636:	ee60 7a27 	vmul.f32	s15, s0, s15
    e63a:	ee28 8a05 	vmul.f32	s16, s16, s10
    e63e:	ee28 0aa8 	vmul.f32	s0, s17, s17
    e642:	ee38 8a27 	vadd.f32	s16, s16, s15
    e646:	ee20 0a25 	vmul.f32	s0, s0, s11
    e64a:	ee68 8a86 	vmul.f32	s17, s17, s12
    e64e:	ee38 0a00 	vadd.f32	s0, s16, s0
    e652:	ee30 0a28 	vadd.f32	s0, s0, s17
    e656:	ee30 0a26 	vadd.f32	s0, s0, s13
    e65a:	ee20 0a07 	vmul.f32	s0, s0, s14
    e65e:	f020 ff45 	bl	2f4ec <roundf>
    e662:	ecbd 8b02 	vpop	{d8}
    e666:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    e66a:	ee10 3a10 	vmov	r3, s0
    e66e:	b298      	uxth	r0, r3
    e670:	bd08      	pop	{r3, pc}
    e672:	bf00      	nop
    e674:	b0078259 	.word	0xb0078259
    e678:	34c2e0df 	.word	0x34c2e0df
    e67c:	b8d96737 	.word	0xb8d96737
    e680:	3c868e5a 	.word	0x3c868e5a
    e684:	3ee4926a 	.word	0x3ee4926a
    e688:	447a0000 	.word	0x447a0000

0000e68c <bsec_Bsec_parse>:
    e68c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e690:	b082      	sub	sp, #8
    e692:	e9dd 790a 	ldrd	r7, r9, [sp, #40]	; 0x28
    e696:	460c      	mov	r4, r1
    e698:	2100      	movs	r1, #0
    e69a:	7039      	strb	r1, [r7, #0]
    e69c:	f889 1000 	strb.w	r1, [r9]
    e6a0:	6821      	ldr	r1, [r4, #0]
    e6a2:	4605      	mov	r5, r0
    e6a4:	4408      	add	r0, r1
    e6a6:	4690      	mov	r8, r2
    e6a8:	7842      	ldrb	r2, [r0, #1]
    e6aa:	f815 c001 	ldrb.w	ip, [r5, r1]
    e6ae:	f88d 2005 	strb.w	r2, [sp, #5]
    e6b2:	a901      	add	r1, sp, #4
    e6b4:	2202      	movs	r2, #2
    e6b6:	f10d 0006 	add.w	r0, sp, #6
    e6ba:	469a      	mov	sl, r3
    e6bc:	f88d c004 	strb.w	ip, [sp, #4]
    e6c0:	f02a fc7f 	bl	38fc2 <memcpy>
    e6c4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    e6c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e6ca:	4550      	cmp	r0, sl
    e6cc:	6018      	str	r0, [r3, #0]
    e6ce:	d818      	bhi.n	e702 <bsec_Bsec_parse+0x76>
    e6d0:	b168      	cbz	r0, e6ee <bsec_Bsec_parse+0x62>
    e6d2:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
    e6d6:	1c47      	adds	r7, r0, #1
    e6d8:	2301      	movs	r3, #1
    e6da:	6826      	ldr	r6, [r4, #0]
    e6dc:	18ea      	adds	r2, r5, r3
    e6de:	4432      	add	r2, r6
    e6e0:	3301      	adds	r3, #1
    e6e2:	f812 2c01 	ldrb.w	r2, [r2, #-1]
    e6e6:	f801 2f01 	strb.w	r2, [r1, #1]!
    e6ea:	429f      	cmp	r7, r3
    e6ec:	d1f5      	bne.n	e6da <bsec_Bsec_parse+0x4e>
    e6ee:	f898 3002 	ldrb.w	r3, [r8, #2]
    e6f2:	f889 3000 	strb.w	r3, [r9]
    e6f6:	6823      	ldr	r3, [r4, #0]
    e6f8:	4403      	add	r3, r0
    e6fa:	6023      	str	r3, [r4, #0]
    e6fc:	b002      	add	sp, #8
    e6fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e702:	23e0      	movs	r3, #224	; 0xe0
    e704:	703b      	strb	r3, [r7, #0]
    e706:	b002      	add	sp, #8
    e708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000e70c <bsec_Bsec_requestOutput>:
    e70c:	4b0b      	ldr	r3, [pc, #44]	; (e73c <bsec_Bsec_requestOutput+0x30>)
    e70e:	4419      	add	r1, r3
    e710:	b410      	push	{r4}
    e712:	f811 3c01 	ldrb.w	r3, [r1, #-1]
    e716:	eb00 0143 	add.w	r1, r0, r3, lsl #1
    e71a:	f8b1 4428 	ldrh.w	r4, [r1, #1064]	; 0x428
    e71e:	4294      	cmp	r4, r2
    e720:	d004      	beq.n	e72c <bsec_Bsec_requestOutput+0x20>
    e722:	3b01      	subs	r3, #1
    e724:	4403      	add	r3, r0
    e726:	2401      	movs	r4, #1
    e728:	f883 4446 	strb.w	r4, [r3, #1094]	; 0x446
    e72c:	2301      	movs	r3, #1
    e72e:	f8a1 2428 	strh.w	r2, [r1, #1064]	; 0x428
    e732:	f85d 4b04 	ldr.w	r4, [sp], #4
    e736:	f880 345a 	strb.w	r3, [r0, #1114]	; 0x45a
    e73a:	4770      	bx	lr
    e73c:	0003ad58 	.word	0x0003ad58

0000e740 <bsec_Bsec_setHyperConfiguration>:
    e740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e744:	2305      	movs	r3, #5
    e746:	4606      	mov	r6, r0
    e748:	2102      	movs	r1, #2
    e74a:	2201      	movs	r2, #1
    e74c:	f880 1457 	strb.w	r1, [r0, #1111]	; 0x457
    e750:	f880 2458 	strb.w	r2, [r0, #1112]	; 0x458
    e754:	f880 3459 	strb.w	r3, [r0, #1113]	; 0x459
    e758:	2218      	movs	r2, #24
    e75a:	f200 4012 	addw	r0, r0, #1042	; 0x412
    e75e:	4975      	ldr	r1, [pc, #468]	; (e934 <bsec_Bsec_setHyperConfiguration+0x1f4>)
    e760:	f206 3546 	addw	r5, r6, #838	; 0x346
    e764:	f02a fc2d 	bl	38fc2 <memcpy>
    e768:	462c      	mov	r4, r5
    e76a:	f206 32ee 	addw	r2, r6, #1006	; 0x3ee
    e76e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e772:	f824 3f02 	strh.w	r3, [r4, #2]!
    e776:	42a2      	cmp	r2, r4
    e778:	d1fb      	bne.n	e772 <bsec_Bsec_setHyperConfiguration+0x32>
    e77a:	f240 51dc 	movw	r1, #1500	; 0x5dc
    e77e:	4b6e      	ldr	r3, [pc, #440]	; (e938 <bsec_Bsec_setHyperConfiguration+0x1f8>)
    e780:	f8df c1e4 	ldr.w	ip, [pc, #484]	; e968 <bsec_Bsec_setHyperConfiguration+0x228>
    e784:	4f6d      	ldr	r7, [pc, #436]	; (e93c <bsec_Bsec_setHyperConfiguration+0x1fc>)
    e786:	486e      	ldr	r0, [pc, #440]	; (e940 <bsec_Bsec_setHyperConfiguration+0x200>)
    e788:	f8df e1e0 	ldr.w	lr, [pc, #480]	; e96c <bsec_Bsec_setHyperConfiguration+0x22c>
    e78c:	f8df 81e0 	ldr.w	r8, [pc, #480]	; e970 <bsec_Bsec_setHyperConfiguration+0x230>
    e790:	4a6c      	ldr	r2, [pc, #432]	; (e944 <bsec_Bsec_setHyperConfiguration+0x204>)
    e792:	f8a6 13e0 	strh.w	r1, [r6, #992]	; 0x3e0
    e796:	f04f 1164 	mov.w	r1, #6553700	; 0x640064
    e79a:	f8c6 e3dc 	str.w	lr, [r6, #988]	; 0x3dc
    e79e:	f8c6 c360 	str.w	ip, [r6, #864]	; 0x360
    e7a2:	f8c6 c36c 	str.w	ip, [r6, #876]	; 0x36c
    e7a6:	f8c6 c348 	str.w	ip, [r6, #840]	; 0x348
    e7aa:	f8c6 c34c 	str.w	ip, [r6, #844]	; 0x34c
    e7ae:	f8c6 c358 	str.w	ip, [r6, #856]	; 0x358
    e7b2:	f8c6 33b8 	str.w	r3, [r6, #952]	; 0x3b8
    e7b6:	f8c6 33bc 	str.w	r3, [r6, #956]	; 0x3bc
    e7ba:	f8c6 33c0 	str.w	r3, [r6, #960]	; 0x3c0
    e7be:	f8c6 33c4 	str.w	r3, [r6, #964]	; 0x3c4
    e7c2:	f8c6 33c8 	str.w	r3, [r6, #968]	; 0x3c8
    e7c6:	f8c6 33d0 	str.w	r3, [r6, #976]	; 0x3d0
    e7ca:	f8c6 1364 	str.w	r1, [r6, #868]	; 0x364
    e7ce:	f8c6 1368 	str.w	r1, [r6, #872]	; 0x368
    e7d2:	f8c6 1374 	str.w	r1, [r6, #884]	; 0x374
    e7d6:	f8c6 137c 	str.w	r1, [r6, #892]	; 0x37c
    e7da:	f8c6 1350 	str.w	r1, [r6, #848]	; 0x350
    e7de:	f8c6 8370 	str.w	r8, [r6, #880]	; 0x370
    e7e2:	f8c6 7380 	str.w	r7, [r6, #896]	; 0x380
    e7e6:	f8c6 7384 	str.w	r7, [r6, #900]	; 0x384
    e7ea:	f8c6 7388 	str.w	r7, [r6, #904]	; 0x388
    e7ee:	f8c6 738c 	str.w	r7, [r6, #908]	; 0x38c
    e7f2:	f8c6 7390 	str.w	r7, [r6, #912]	; 0x390
    e7f6:	f8c6 7398 	str.w	r7, [r6, #920]	; 0x398
    e7fa:	f8c6 039c 	str.w	r0, [r6, #924]	; 0x39c
    e7fe:	f8c6 03a0 	str.w	r0, [r6, #928]	; 0x3a0
    e802:	f8c6 03a4 	str.w	r0, [r6, #932]	; 0x3a4
    e806:	f8c6 03a8 	str.w	r0, [r6, #936]	; 0x3a8
    e80a:	f8c6 03ac 	str.w	r0, [r6, #940]	; 0x3ac
    e80e:	f8c6 03b4 	str.w	r0, [r6, #948]	; 0x3b4
    e812:	f8c6 2354 	str.w	r2, [r6, #852]	; 0x354
    e816:	f8c6 135c 	str.w	r1, [r6, #860]	; 0x35c
    e81a:	2240      	movs	r2, #64	; 0x40
    e81c:	494a      	ldr	r1, [pc, #296]	; (e948 <bsec_Bsec_setHyperConfiguration+0x208>)
    e81e:	f8c6 e3e8 	str.w	lr, [r6, #1000]	; 0x3e8
    e822:	f8c6 c378 	str.w	ip, [r6, #888]	; 0x378
    e826:	f8c6 7394 	str.w	r7, [r6, #916]	; 0x394
    e82a:	f8c6 03b0 	str.w	r0, [r6, #944]	; 0x3b0
    e82e:	f8c6 33cc 	str.w	r3, [r6, #972]	; 0x3cc
    e832:	f506 7042 	add.w	r0, r6, #776	; 0x308
    e836:	f02a fbc4 	bl	38fc2 <memcpy>
    e83a:	4a44      	ldr	r2, [pc, #272]	; (e94c <bsec_Bsec_setHyperConfiguration+0x20c>)
    e83c:	4944      	ldr	r1, [pc, #272]	; (e950 <bsec_Bsec_setHyperConfiguration+0x210>)
    e83e:	f8df 8134 	ldr.w	r8, [pc, #308]	; e974 <bsec_Bsec_setHyperConfiguration+0x234>
    e842:	f8df e134 	ldr.w	lr, [pc, #308]	; e978 <bsec_Bsec_setHyperConfiguration+0x238>
    e846:	f8df c134 	ldr.w	ip, [pc, #308]	; e97c <bsec_Bsec_setHyperConfiguration+0x23c>
    e84a:	4f42      	ldr	r7, [pc, #264]	; (e954 <bsec_Bsec_setHyperConfiguration+0x214>)
    e84c:	4842      	ldr	r0, [pc, #264]	; (e958 <bsec_Bsec_setHyperConfiguration+0x218>)
    e84e:	f8c6 2310 	str.w	r2, [r6, #784]	; 0x310
    e852:	2300      	movs	r3, #0
    e854:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    e858:	f8c6 330c 	str.w	r3, [r6, #780]	; 0x30c
    e85c:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
    e860:	f8c6 331c 	str.w	r3, [r6, #796]	; 0x31c
    e864:	f8c6 3320 	str.w	r3, [r6, #800]	; 0x320
    e868:	f8c6 3324 	str.w	r3, [r6, #804]	; 0x324
    e86c:	f8c6 233c 	str.w	r2, [r6, #828]	; 0x33c
    e870:	f8c6 2340 	str.w	r2, [r6, #832]	; 0x340
    e874:	f8c6 1344 	str.w	r1, [r6, #836]	; 0x344
    e878:	f8c6 8314 	str.w	r8, [r6, #788]	; 0x314
    e87c:	f8c6 e330 	str.w	lr, [r6, #816]	; 0x330
    e880:	f8c6 c32c 	str.w	ip, [r6, #812]	; 0x32c
    e884:	f8c6 7328 	str.w	r7, [r6, #808]	; 0x328
    e888:	f8c6 0334 	str.w	r0, [r6, #820]	; 0x334
    e88c:	4623      	mov	r3, r4
    e88e:	f206 410a 	addw	r1, r6, #1034	; 0x40a
    e892:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e896:	f823 2f02 	strh.w	r2, [r3, #2]!
    e89a:	4299      	cmp	r1, r3
    e89c:	d1fb      	bne.n	e896 <bsec_Bsec_setHyperConfiguration+0x156>
    e89e:	f247 5230 	movw	r2, #30000	; 0x7530
    e8a2:	2300      	movs	r3, #0
    e8a4:	f8a6 240e 	strh.w	r2, [r6, #1038]	; 0x40e
    e8a8:	f8a6 3410 	strh.w	r3, [r6, #1040]	; 0x410
    e8ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e8b0:	f835 3f02 	ldrh.w	r3, [r5, #2]!
    e8b4:	428b      	cmp	r3, r1
    e8b6:	d005      	beq.n	e8c4 <bsec_Bsec_setHyperConfiguration+0x184>
    e8b8:	f8b6 2410 	ldrh.w	r2, [r6, #1040]	; 0x410
    e8bc:	429a      	cmp	r2, r3
    e8be:	bf38      	it	cc
    e8c0:	f8a6 3410 	strhcc.w	r3, [r6, #1040]	; 0x410
    e8c4:	42a5      	cmp	r5, r4
    e8c6:	d1f3      	bne.n	e8b0 <bsec_Bsec_setHyperConfiguration+0x170>
    e8c8:	4824      	ldr	r0, [pc, #144]	; (e95c <bsec_Bsec_setHyperConfiguration+0x21c>)
    e8ca:	4c25      	ldr	r4, [pc, #148]	; (e960 <bsec_Bsec_setHyperConfiguration+0x220>)
    e8cc:	4f25      	ldr	r7, [pc, #148]	; (e964 <bsec_Bsec_setHyperConfiguration+0x224>)
    e8ce:	2300      	movs	r3, #0
    e8d0:	2501      	movs	r5, #1
    e8d2:	fa40 f203 	asr.w	r2, r0, r3
    e8d6:	07d2      	lsls	r2, r2, #31
    e8d8:	d516      	bpl.n	e908 <bsec_Bsec_setHyperConfiguration+0x1c8>
    e8da:	5dd9      	ldrb	r1, [r3, r7]
    e8dc:	5d1a      	ldrb	r2, [r3, r4]
    e8de:	4421      	add	r1, r4
    e8e0:	f202 12f7 	addw	r2, r2, #503	; 0x1f7
    e8e4:	f811 1c01 	ldrb.w	r1, [r1, #-1]
    e8e8:	f836 c012 	ldrh.w	ip, [r6, r2, lsl #1]
    e8ec:	eb06 0241 	add.w	r2, r6, r1, lsl #1
    e8f0:	3901      	subs	r1, #1
    e8f2:	f8b2 e428 	ldrh.w	lr, [r2, #1064]	; 0x428
    e8f6:	45e6      	cmp	lr, ip
    e8f8:	bf1c      	itt	ne
    e8fa:	1989      	addne	r1, r1, r6
    e8fc:	f881 5446 	strbne.w	r5, [r1, #1094]	; 0x446
    e900:	f8a2 c428 	strh.w	ip, [r2, #1064]	; 0x428
    e904:	f886 545a 	strb.w	r5, [r6, #1114]	; 0x45a
    e908:	3301      	adds	r3, #1
    e90a:	2b15      	cmp	r3, #21
    e90c:	d1e1      	bne.n	e8d2 <bsec_Bsec_setHyperConfiguration+0x192>
    e90e:	f206 4345 	addw	r3, r6, #1093	; 0x445
    e912:	f206 4153 	addw	r1, r6, #1107	; 0x453
    e916:	2201      	movs	r2, #1
    e918:	f803 2f01 	strb.w	r2, [r3, #1]!
    e91c:	428b      	cmp	r3, r1
    e91e:	d1fb      	bne.n	e918 <bsec_Bsec_setHyperConfiguration+0x1d8>
    e920:	f896 345a 	ldrb.w	r3, [r6, #1114]	; 0x45a
    e924:	b90b      	cbnz	r3, e92a <bsec_Bsec_setHyperConfiguration+0x1ea>
    e926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e92a:	4630      	mov	r0, r6
    e92c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e930:	f7ff bbea 	b.w	e108 <bsec_Bsec_applyUpdateSubscription.part.0>
    e934:	0003ac94 	.word	0x0003ac94
    e938:	17701770 	.word	0x17701770
    e93c:	012c012c 	.word	0x012c012c
    e940:	07080708 	.word	0x07080708
    e944:	75300064 	.word	0x75300064
    e948:	0003ac54 	.word	0x0003ac54
    e94c:	c2820000 	.word	0xc2820000
    e950:	41100000 	.word	0x41100000
    e954:	49f42400 	.word	0x49f42400
    e958:	4b496a80 	.word	0x4b496a80
    e95c:	001279ef 	.word	0x001279ef
    e960:	0003ad58 	.word	0x0003ad58
    e964:	0003ac3c 	.word	0x0003ac3c
    e968:	75307530 	.word	0x75307530
    e96c:	05dc05dc 	.word	0x05dc05dc
    e970:	00647530 	.word	0x00647530
    e974:	432a0000 	.word	0x432a0000
    e978:	42fa0000 	.word	0x42fa0000
    e97c:	42c80000 	.word	0x42c80000

0000e980 <bsec_Bsec_setHyperState>:
    e980:	b470      	push	{r4, r5, r6}
    e982:	2200      	movs	r2, #0
    e984:	2300      	movs	r3, #0
    e986:	f500 743c 	add.w	r4, r0, #752	; 0x2f0
    e98a:	2100      	movs	r1, #0
    e98c:	f880 1456 	strb.w	r1, [r0, #1110]	; 0x456
    e990:	f8a0 1454 	strh.w	r1, [r0, #1108]	; 0x454
    e994:	f500 7540 	add.w	r5, r0, #768	; 0x300
    e998:	e9c4 2300 	strd	r2, r3, [r4]
    e99c:	f500 763e 	add.w	r6, r0, #760	; 0x2f8
    e9a0:	f247 5430 	movw	r4, #30000	; 0x7530
    e9a4:	e9c6 2300 	strd	r2, r3, [r6]
    e9a8:	e9c5 2300 	strd	r2, r3, [r5]
    e9ac:	f8a0 440c 	strh.w	r4, [r0, #1036]	; 0x40c
    e9b0:	f500 6385 	add.w	r3, r0, #1064	; 0x428
    e9b4:	f200 4245 	addw	r2, r0, #1093	; 0x445
    e9b8:	f200 4544 	addw	r5, r0, #1092	; 0x444
    e9bc:	f64f 74ff 	movw	r4, #65535	; 0xffff
    e9c0:	f823 4f02 	strh.w	r4, [r3, #2]!
    e9c4:	42ab      	cmp	r3, r5
    e9c6:	f802 1f01 	strb.w	r1, [r2, #1]!
    e9ca:	d1f9      	bne.n	e9c0 <bsec_Bsec_setHyperState+0x40>
    e9cc:	2366      	movs	r3, #102	; 0x66
    e9ce:	f880 145a 	strb.w	r1, [r0, #1114]	; 0x45a
    e9d2:	f880 145b 	strb.w	r1, [r0, #1115]	; 0x45b
    e9d6:	f880 345c 	strb.w	r3, [r0, #1116]	; 0x45c
    e9da:	bc70      	pop	{r4, r5, r6}
    e9dc:	4770      	bx	lr
    e9de:	bf00      	nop

0000e9e0 <bsec_Bsec_validateSerialization>:
    e9e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e9e2:	b089      	sub	sp, #36	; 0x24
    e9e4:	2400      	movs	r4, #0
    e9e6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    e9e8:	2917      	cmp	r1, #23
    e9ea:	602c      	str	r4, [r5, #0]
    e9ec:	d920      	bls.n	ea30 <bsec_Bsec_validateSerialization+0x50>
    e9ee:	4291      	cmp	r1, r2
    e9f0:	d81a      	bhi.n	ea28 <bsec_Bsec_validateSerialization+0x48>
    e9f2:	ac03      	add	r4, sp, #12
    e9f4:	1e42      	subs	r2, r0, #1
    e9f6:	1cc7      	adds	r7, r0, #3
    e9f8:	f812 6f01 	ldrb.w	r6, [r2, #1]!
    e9fc:	f804 6b01 	strb.w	r6, [r4], #1
    ea00:	42ba      	cmp	r2, r7
    ea02:	d1f9      	bne.n	e9f8 <bsec_Bsec_validateSerialization+0x18>
    ea04:	2204      	movs	r2, #4
    ea06:	4604      	mov	r4, r0
    ea08:	460f      	mov	r7, r1
    ea0a:	a802      	add	r0, sp, #8
    ea0c:	a903      	add	r1, sp, #12
    ea0e:	461e      	mov	r6, r3
    ea10:	f02a fad7 	bl	38fc2 <memcpy>
    ea14:	9b02      	ldr	r3, [sp, #8]
    ea16:	4a30      	ldr	r2, [pc, #192]	; (ead8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x78>)
    ea18:	4293      	cmp	r3, r2
    ea1a:	d00d      	beq.n	ea38 <bsec_Bsec_validateSerialization+0x58>
    ea1c:	3301      	adds	r3, #1
    ea1e:	d00b      	beq.n	ea38 <bsec_Bsec_validateSerialization+0x58>
    ea20:	23de      	movs	r3, #222	; 0xde
    ea22:	7033      	strb	r3, [r6, #0]
    ea24:	b009      	add	sp, #36	; 0x24
    ea26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ea28:	22da      	movs	r2, #218	; 0xda
    ea2a:	701a      	strb	r2, [r3, #0]
    ea2c:	b009      	add	sp, #36	; 0x24
    ea2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ea30:	22db      	movs	r2, #219	; 0xdb
    ea32:	701a      	strb	r2, [r3, #0]
    ea34:	b009      	add	sp, #36	; 0x24
    ea36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ea38:	2208      	movs	r2, #8
    ea3a:	1d21      	adds	r1, r4, #4
    ea3c:	a806      	add	r0, sp, #24
    ea3e:	f02a fac0 	bl	38fc2 <memcpy>
    ea42:	2208      	movs	r2, #8
    ea44:	a906      	add	r1, sp, #24
    ea46:	a804      	add	r0, sp, #16
    ea48:	f02a fabb 	bl	38fc2 <memcpy>
    ea4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    ea50:	2b00      	cmp	r3, #0
    ea52:	bf08      	it	eq
    ea54:	2a3d      	cmpeq	r2, #61	; 0x3d
    ea56:	d007      	beq.n	ea68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8>
    ea58:	2b00      	cmp	r3, #0
    ea5a:	bf08      	it	eq
    ea5c:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    ea60:	d002      	beq.n	ea68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8>
    ea62:	23dd      	movs	r3, #221	; 0xdd
    ea64:	7033      	strb	r3, [r6, #0]
    ea66:	e7e1      	b.n	ea2c <bsec_Bsec_validateSerialization+0x4c>
    ea68:	7b22      	ldrb	r2, [r4, #12]
    ea6a:	7b63      	ldrb	r3, [r4, #13]
    ea6c:	f88d 200c 	strb.w	r2, [sp, #12]
    ea70:	7ba2      	ldrb	r2, [r4, #14]
    ea72:	f88d 300d 	strb.w	r3, [sp, #13]
    ea76:	f88d 200e 	strb.w	r2, [sp, #14]
    ea7a:	7be3      	ldrb	r3, [r4, #15]
    ea7c:	f88d 300f 	strb.w	r3, [sp, #15]
    ea80:	a903      	add	r1, sp, #12
    ea82:	a802      	add	r0, sp, #8
    ea84:	2204      	movs	r2, #4
    ea86:	f02a fa9c 	bl	38fc2 <memcpy>
    ea8a:	9d02      	ldr	r5, [sp, #8]
    ea8c:	f105 0318 	add.w	r3, r5, #24
    ea90:	42bb      	cmp	r3, r7
    ea92:	d002      	beq.n	ea9a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3a>
    ea94:	23d8      	movs	r3, #216	; 0xd8
    ea96:	7033      	strb	r3, [r6, #0]
    ea98:	e7c8      	b.n	ea2c <bsec_Bsec_validateSerialization+0x4c>
    ea9a:	aa01      	add	r2, sp, #4
    ea9c:	4620      	mov	r0, r4
    ea9e:	f105 0110 	add.w	r1, r5, #16
    eaa2:	f003 f86f 	bl	11b84 <bsec_crcCcitt2>
    eaa6:	1960      	adds	r0, r4, r5
    eaa8:	f89d 2004 	ldrb.w	r2, [sp, #4]
    eaac:	7d03      	ldrb	r3, [r0, #20]
    eaae:	429a      	cmp	r2, r3
    eab0:	d002      	beq.n	eab8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x58>
    eab2:	23dc      	movs	r3, #220	; 0xdc
    eab4:	7033      	strb	r3, [r6, #0]
    eab6:	e7b9      	b.n	ea2c <bsec_Bsec_validateSerialization+0x4c>
    eab8:	f89d 2005 	ldrb.w	r2, [sp, #5]
    eabc:	7d43      	ldrb	r3, [r0, #21]
    eabe:	429a      	cmp	r2, r3
    eac0:	d1f7      	bne.n	eab2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x52>
    eac2:	7d83      	ldrb	r3, [r0, #22]
    eac4:	2b00      	cmp	r3, #0
    eac6:	d1f4      	bne.n	eab2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x52>
    eac8:	7dc3      	ldrb	r3, [r0, #23]
    eaca:	2b00      	cmp	r3, #0
    eacc:	d1f1      	bne.n	eab2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x52>
    eace:	990e      	ldr	r1, [sp, #56]	; 0x38
    ead0:	2210      	movs	r2, #16
    ead2:	600a      	str	r2, [r1, #0]
    ead4:	7033      	strb	r3, [r6, #0]
    ead6:	e7a9      	b.n	ea2c <bsec_Bsec_validateSerialization+0x4c>
    ead8:	01040704 	.word	0x01040704

0000eadc <bsec_b_Bsec_setHyperConfiguration>:
    eadc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eae0:	b0bc      	sub	sp, #240	; 0xf0
    eae2:	ab03      	add	r3, sp, #12
    eae4:	ae04      	add	r6, sp, #16
    eae6:	e9cd 3600 	strd	r3, r6, [sp]
    eaea:	4604      	mov	r4, r0
    eaec:	f10d 030b 	add.w	r3, sp, #11
    eaf0:	20fe      	movs	r0, #254	; 0xfe
    eaf2:	460f      	mov	r7, r1
    eaf4:	f002 ff9c 	bl	11a30 <bsec_Serialization_checkSerializationHeader>
    eaf8:	f99d 000b 	ldrsb.w	r0, [sp, #11]
    eafc:	2800      	cmp	r0, #0
    eafe:	d166      	bne.n	ebce <bsec_b_Bsec_setHyperConfiguration+0xf2>
    eb00:	2502      	movs	r5, #2
    eb02:	f504 787c 	add.w	r8, r4, #1008	; 0x3f0
    eb06:	1e6b      	subs	r3, r5, #1
    eb08:	b2db      	uxtb	r3, r3
    eb0a:	3b02      	subs	r3, #2
    eb0c:	2b05      	cmp	r3, #5
    eb0e:	d804      	bhi.n	eb1a <bsec_b_Bsec_setHyperConfiguration+0x3e>
    eb10:	e8df f003 	tbb	[pc, r3]
    eb14:	6b77838a 	.word	0x6b77838a
    eb18:	0e60      	.short	0x0e60
    eb1a:	4631      	mov	r1, r6
    eb1c:	4638      	mov	r0, r7
    eb1e:	f001 f891 	bl	fc44 <bsec_f_Entity_parseAndDeserialize>
    eb22:	2d08      	cmp	r5, #8
    eb24:	f884 0457 	strb.w	r0, [r4, #1111]	; 0x457
    eb28:	d008      	beq.n	eb3c <bsec_b_Bsec_setHyperConfiguration+0x60>
    eb2a:	3501      	adds	r5, #1
    eb2c:	b2ed      	uxtb	r5, r5
    eb2e:	e7ea      	b.n	eb06 <bsec_b_Bsec_setHyperConfiguration+0x2a>
    eb30:	4631      	mov	r1, r6
    eb32:	4638      	mov	r0, r7
    eb34:	f000 ffd2 	bl	fadc <bsec_c_Entity_parseAndDeserialize>
    eb38:	f8a4 040e 	strh.w	r0, [r4, #1038]	; 0x40e
    eb3c:	2300      	movs	r3, #0
    eb3e:	f8a4 3410 	strh.w	r3, [r4, #1040]	; 0x410
    eb42:	f204 35ee 	addw	r5, r4, #1006	; 0x3ee
    eb46:	f204 3346 	addw	r3, r4, #838	; 0x346
    eb4a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    eb4e:	f833 2f02 	ldrh.w	r2, [r3, #2]!
    eb52:	4282      	cmp	r2, r0
    eb54:	d005      	beq.n	eb62 <bsec_b_Bsec_setHyperConfiguration+0x86>
    eb56:	f8b4 1410 	ldrh.w	r1, [r4, #1040]	; 0x410
    eb5a:	4291      	cmp	r1, r2
    eb5c:	bf38      	it	cc
    eb5e:	f8a4 2410 	strhcc.w	r2, [r4, #1040]	; 0x410
    eb62:	42ab      	cmp	r3, r5
    eb64:	d1f3      	bne.n	eb4e <bsec_b_Bsec_setHyperConfiguration+0x72>
    eb66:	4834      	ldr	r0, [pc, #208]	; (ec38 <bsec_b_Bsec_setHyperConfiguration+0x15c>)
    eb68:	4d34      	ldr	r5, [pc, #208]	; (ec3c <bsec_b_Bsec_setHyperConfiguration+0x160>)
    eb6a:	4f35      	ldr	r7, [pc, #212]	; (ec40 <bsec_b_Bsec_setHyperConfiguration+0x164>)
    eb6c:	2300      	movs	r3, #0
    eb6e:	2601      	movs	r6, #1
    eb70:	fa40 f203 	asr.w	r2, r0, r3
    eb74:	07d2      	lsls	r2, r2, #31
    eb76:	d516      	bpl.n	eba6 <bsec_b_Bsec_setHyperConfiguration+0xca>
    eb78:	5dd9      	ldrb	r1, [r3, r7]
    eb7a:	5d5a      	ldrb	r2, [r3, r5]
    eb7c:	4429      	add	r1, r5
    eb7e:	f202 12f7 	addw	r2, r2, #503	; 0x1f7
    eb82:	f811 1c01 	ldrb.w	r1, [r1, #-1]
    eb86:	f834 c012 	ldrh.w	ip, [r4, r2, lsl #1]
    eb8a:	eb04 0241 	add.w	r2, r4, r1, lsl #1
    eb8e:	3901      	subs	r1, #1
    eb90:	f8b2 e428 	ldrh.w	lr, [r2, #1064]	; 0x428
    eb94:	45e6      	cmp	lr, ip
    eb96:	bf1c      	itt	ne
    eb98:	1909      	addne	r1, r1, r4
    eb9a:	f881 6446 	strbne.w	r6, [r1, #1094]	; 0x446
    eb9e:	f8a2 c428 	strh.w	ip, [r2, #1064]	; 0x428
    eba2:	f884 645a 	strb.w	r6, [r4, #1114]	; 0x45a
    eba6:	3301      	adds	r3, #1
    eba8:	2b15      	cmp	r3, #21
    ebaa:	d1e1      	bne.n	eb70 <bsec_b_Bsec_setHyperConfiguration+0x94>
    ebac:	f204 4345 	addw	r3, r4, #1093	; 0x445
    ebb0:	f204 4153 	addw	r1, r4, #1107	; 0x453
    ebb4:	2201      	movs	r2, #1
    ebb6:	f803 2f01 	strb.w	r2, [r3, #1]!
    ebba:	428b      	cmp	r3, r1
    ebbc:	d1fb      	bne.n	ebb6 <bsec_b_Bsec_setHyperConfiguration+0xda>
    ebbe:	f894 345a 	ldrb.w	r3, [r4, #1114]	; 0x45a
    ebc2:	b113      	cbz	r3, ebca <bsec_b_Bsec_setHyperConfiguration+0xee>
    ebc4:	4620      	mov	r0, r4
    ebc6:	f7ff fa9f 	bl	e108 <bsec_Bsec_applyUpdateSubscription.part.0>
    ebca:	f99d 000b 	ldrsb.w	r0, [sp, #11]
    ebce:	b03c      	add	sp, #240	; 0xf0
    ebd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ebd4:	aa0b      	add	r2, sp, #44	; 0x2c
    ebd6:	4631      	mov	r1, r6
    ebd8:	4638      	mov	r0, r7
    ebda:	f001 f93d 	bl	fe58 <bsec_k_Entity_parseAndDeserialize>
    ebde:	221c      	movs	r2, #28
    ebe0:	a90b      	add	r1, sp, #44	; 0x2c
    ebe2:	4640      	mov	r0, r8
    ebe4:	f02a f9ed 	bl	38fc2 <memcpy>
    ebe8:	e79f      	b.n	eb2a <bsec_b_Bsec_setHyperConfiguration+0x4e>
    ebea:	aa12      	add	r2, sp, #72	; 0x48
    ebec:	4631      	mov	r1, r6
    ebee:	4638      	mov	r0, r7
    ebf0:	f001 f8f0 	bl	fdd4 <bsec_j_Entity_parseAndDeserialize>
    ebf4:	a912      	add	r1, sp, #72	; 0x48
    ebf6:	22a8      	movs	r2, #168	; 0xa8
    ebf8:	f504 7052 	add.w	r0, r4, #840	; 0x348
    ebfc:	f02a f9e1 	bl	38fc2 <memcpy>
    ec00:	e793      	b.n	eb2a <bsec_b_Bsec_setHyperConfiguration+0x4e>
    ec02:	aa05      	add	r2, sp, #20
    ec04:	4631      	mov	r1, r6
    ec06:	4638      	mov	r0, r7
    ec08:	f001 f8a2 	bl	fd50 <bsec_i_Entity_parseAndDeserialize>
    ec0c:	a905      	add	r1, sp, #20
    ec0e:	2218      	movs	r2, #24
    ec10:	f204 4012 	addw	r0, r4, #1042	; 0x412
    ec14:	f02a f9d5 	bl	38fc2 <memcpy>
    ec18:	e787      	b.n	eb2a <bsec_b_Bsec_setHyperConfiguration+0x4e>
    ec1a:	4631      	mov	r1, r6
    ec1c:	4638      	mov	r0, r7
    ec1e:	f001 f811 	bl	fc44 <bsec_f_Entity_parseAndDeserialize>
    ec22:	f884 0459 	strb.w	r0, [r4, #1113]	; 0x459
    ec26:	e780      	b.n	eb2a <bsec_b_Bsec_setHyperConfiguration+0x4e>
    ec28:	4631      	mov	r1, r6
    ec2a:	4638      	mov	r0, r7
    ec2c:	f001 f80a 	bl	fc44 <bsec_f_Entity_parseAndDeserialize>
    ec30:	f884 0458 	strb.w	r0, [r4, #1112]	; 0x458
    ec34:	e779      	b.n	eb2a <bsec_b_Bsec_setHyperConfiguration+0x4e>
    ec36:	bf00      	nop
    ec38:	001279ef 	.word	0x001279ef
    ec3c:	0003ad58 	.word	0x0003ad58
    ec40:	0003ac3c 	.word	0x0003ac3c

0000ec44 <bsec_b_Bsec_setHyperState>:
    ec44:	2903      	cmp	r1, #3
    ec46:	d916      	bls.n	ec76 <bsec_b_Bsec_setHyperState+0x32>
    ec48:	b510      	push	{r4, lr}
    ec4a:	b082      	sub	sp, #8
    ec4c:	7802      	ldrb	r2, [r0, #0]
    ec4e:	7843      	ldrb	r3, [r0, #1]
    ec50:	f88d 2004 	strb.w	r2, [sp, #4]
    ec54:	4604      	mov	r4, r0
    ec56:	2202      	movs	r2, #2
    ec58:	a901      	add	r1, sp, #4
    ec5a:	f10d 0006 	add.w	r0, sp, #6
    ec5e:	f88d 3005 	strb.w	r3, [sp, #5]
    ec62:	f02a f9ae 	bl	38fc2 <memcpy>
    ec66:	78a3      	ldrb	r3, [r4, #2]
    ec68:	2bfe      	cmp	r3, #254	; 0xfe
    ec6a:	bf0c      	ite	eq
    ec6c:	2000      	moveq	r0, #0
    ec6e:	f06f 0063 	mvnne.w	r0, #99	; 0x63
    ec72:	b002      	add	sp, #8
    ec74:	bd10      	pop	{r4, pc}
    ec76:	f06f 0067 	mvn.w	r0, #103	; 0x67
    ec7a:	4770      	bx	lr

0000ec7c <bsec_ChannelHub_isChannelReady.part.0>:
    ec7c:	3901      	subs	r1, #1
    ec7e:	4b19      	ldr	r3, [pc, #100]	; (ece4 <bsec_ChannelHub_isChannelReady.part.0+0x68>)
    ec80:	5c5b      	ldrb	r3, [r3, r1]
    ec82:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    ec86:	b470      	push	{r4, r5, r6}
    ec88:	f8b3 429a 	ldrh.w	r4, [r3, #666]	; 0x29a
    ec8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ec90:	4294      	cmp	r4, r2
    ec92:	d006      	beq.n	eca2 <bsec_ChannelHub_isChannelReady.part.0+0x26>
    ec94:	4a14      	ldr	r2, [pc, #80]	; (ece8 <bsec_ChannelHub_isChannelReady.part.0+0x6c>)
    ec96:	f8d0 4298 	ldr.w	r4, [r0, #664]	; 0x298
    ec9a:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
    ec9e:	43a2      	bics	r2, r4
    eca0:	d002      	beq.n	eca8 <bsec_ChannelHub_isChannelReady.part.0+0x2c>
    eca2:	2000      	movs	r0, #0
    eca4:	bc70      	pop	{r4, r5, r6}
    eca6:	4770      	bx	lr
    eca8:	4a10      	ldr	r2, [pc, #64]	; (ecec <bsec_ChannelHub_isChannelReady.part.0+0x70>)
    ecaa:	f8d0 5280 	ldr.w	r5, [r0, #640]	; 0x280
    ecae:	5652      	ldrsb	r2, [r2, r1]
    ecb0:	43aa      	bics	r2, r5
    ecb2:	d1f6      	bne.n	eca2 <bsec_ChannelHub_isChannelReady.part.0+0x26>
    ecb4:	f8b3 52de 	ldrh.w	r5, [r3, #734]	; 0x2de
    ecb8:	f8b3 62d2 	ldrh.w	r6, [r3, #722]	; 0x2d2
    ecbc:	1c6a      	adds	r2, r5, #1
    ecbe:	b295      	uxth	r5, r2
    ecc0:	fbb5 f2f6 	udiv	r2, r5, r6
    ecc4:	fb06 5212 	mls	r2, r6, r2, r5
    ecc8:	b292      	uxth	r2, r2
    ecca:	f8a3 22de 	strh.w	r2, [r3, #734]	; 0x2de
    ecce:	2a00      	cmp	r2, #0
    ecd0:	d1e7      	bne.n	eca2 <bsec_ChannelHub_isChannelReady.part.0+0x26>
    ecd2:	2201      	movs	r2, #1
    ecd4:	fa02 f301 	lsl.w	r3, r2, r1
    ecd8:	4323      	orrs	r3, r4
    ecda:	f8c0 3298 	str.w	r3, [r0, #664]	; 0x298
    ecde:	4610      	mov	r0, r2
    ece0:	e7e0      	b.n	eca4 <bsec_ChannelHub_isChannelReady.part.0+0x28>
    ece2:	bf00      	nop
    ece4:	0003accc 	.word	0x0003accc
    ece8:	0003acac 	.word	0x0003acac
    ecec:	0003acc0 	.word	0x0003acc0

0000ecf0 <bsec_ChannelHub_ChannelHub>:
    ecf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ecf2:	4604      	mov	r4, r0
    ecf4:	f001 fff6 	bl	10ce4 <bsec_GasHumidityPreProcessor_GasHumidityPreProcessor>
    ecf8:	f504 7098 	add.w	r0, r4, #304	; 0x130
    ecfc:	f002 fcbc 	bl	11678 <bsec_SensorStatusTracker_SensorStatusTracker>
    ed00:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    ed04:	f002 fa02 	bl	1110c <bsec_IaqEstimator_IaqEstimator>
    ed08:	f104 0068 	add.w	r0, r4, #104	; 0x68
    ed0c:	f001 faaa 	bl	10264 <bsec_GasHumidityBaselineTracker_GasHumidityBaselineTracker>
    ed10:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    ed14:	f7fd fdfc 	bl	c910 <bsec_SensorHeatCompensator_SensorHeatCompensator>
    ed18:	210a      	movs	r1, #10
    ed1a:	f504 70b0 	add.w	r0, r4, #352	; 0x160
    ed1e:	f002 f8b9 	bl	10e94 <bsec_HumidityTemperatureCorrector_HumidityTemperatureCorrector>
    ed22:	2600      	movs	r6, #0
    ed24:	f504 730a 	add.w	r3, r4, #552	; 0x228
    ed28:	f504 72bc 	add.w	r2, r4, #376	; 0x178
    ed2c:	f504 7512 	add.w	r5, r4, #584	; 0x248
    ed30:	2000      	movs	r0, #0
    ed32:	2100      	movs	r1, #0
    ed34:	f843 6b04 	str.w	r6, [r3], #4
    ed38:	42ab      	cmp	r3, r5
    ed3a:	e8e2 0102 	strd	r0, r1, [r2], #8
    ed3e:	d1f9      	bne.n	ed34 <bsec_ChannelHub_ChannelHub+0x44>
    ed40:	2000      	movs	r0, #0
    ed42:	f04f 0c00 	mov.w	ip, #0
    ed46:	f8c4 0280 	str.w	r0, [r4, #640]	; 0x280
    ed4a:	f504 71d8 	add.w	r1, r4, #432	; 0x1b0
    ed4e:	f204 2283 	addw	r2, r4, #643	; 0x283
    ed52:	f504 7520 	add.w	r5, r4, #640	; 0x280
    ed56:	2600      	movs	r6, #0
    ed58:	2700      	movs	r7, #0
    ed5a:	f843 cb04 	str.w	ip, [r3], #4
    ed5e:	42ab      	cmp	r3, r5
    ed60:	e9e1 6702 	strd	r6, r7, [r1, #8]!
    ed64:	f802 0f01 	strb.w	r0, [r2, #1]!
    ed68:	d1f7      	bne.n	ed5a <bsec_ChannelHub_ChannelHub+0x6a>
    ed6a:	f8c4 0294 	str.w	r0, [r4, #660]	; 0x294
    ed6e:	f8c4 0298 	str.w	r0, [r4, #664]	; 0x298
    ed72:	f504 7327 	add.w	r3, r4, #668	; 0x29c
    ed76:	f504 752a 	add.w	r5, r4, #680	; 0x2a8
    ed7a:	2001      	movs	r0, #1
    ed7c:	2100      	movs	r1, #0
    ed7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ed82:	8718      	strh	r0, [r3, #56]	; 0x38
    ed84:	f8a3 1044 	strh.w	r1, [r3, #68]	; 0x44
    ed88:	f823 2b02 	strh.w	r2, [r3], #2
    ed8c:	429d      	cmp	r5, r3
    ed8e:	d1f8      	bne.n	ed82 <bsec_ChannelHub_ChannelHub+0x92>
    ed90:	f8a4 22a8 	strh.w	r2, [r4, #680]	; 0x2a8
    ed94:	f8a4 22aa 	strh.w	r2, [r4, #682]	; 0x2aa
    ed98:	f8a4 22ac 	strh.w	r2, [r4, #684]	; 0x2ac
    ed9c:	f8a4 22ae 	strh.w	r2, [r4, #686]	; 0x2ae
    eda0:	f8a4 22b0 	strh.w	r2, [r4, #688]	; 0x2b0
    eda4:	f8a4 22b2 	strh.w	r2, [r4, #690]	; 0x2b2
    eda8:	f8a4 22b4 	strh.w	r2, [r4, #692]	; 0x2b4
    edac:	f8a4 22b6 	strh.w	r2, [r4, #694]	; 0x2b6
    edb0:	f204 23b6 	addw	r3, r4, #694	; 0x2b6
    edb4:	f204 21d2 	addw	r1, r4, #722	; 0x2d2
    edb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    edbc:	f823 2f02 	strh.w	r2, [r3, #2]!
    edc0:	428b      	cmp	r3, r1
    edc2:	d1fb      	bne.n	edbc <bsec_ChannelHub_ChannelHub+0xcc>
    edc4:	4620      	mov	r0, r4
    edc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000edc8 <bsec_ChannelHub_configureChannel>:
    edc8:	b410      	push	{r4}
    edca:	1e4c      	subs	r4, r1, #1
    edcc:	4611      	mov	r1, r2
    edce:	2c09      	cmp	r4, #9
    edd0:	d82b      	bhi.n	ee2a <bsec_ChannelHub_configureChannel+0x62>
    edd2:	e8df f004 	tbb	[pc, r4]
    edd6:	110b      	.short	0x110b
    edd8:	2a232a17 	.word	0x2a232a17
    eddc:	1c052a2a 	.word	0x1c052a2a
    ede0:	461a      	mov	r2, r3
    ede2:	30c8      	adds	r0, #200	; 0xc8
    ede4:	f85d 4b04 	ldr.w	r4, [sp], #4
    ede8:	f7fd bdda 	b.w	c9a0 <bsec_SensorHeatCompensator_configure>
    edec:	461a      	mov	r2, r3
    edee:	3068      	adds	r0, #104	; 0x68
    edf0:	f85d 4b04 	ldr.w	r4, [sp], #4
    edf4:	f001 ba72 	b.w	102dc <bsec_GasHumidityBaselineTracker_configure>
    edf8:	461a      	mov	r2, r3
    edfa:	302c      	adds	r0, #44	; 0x2c
    edfc:	f85d 4b04 	ldr.w	r4, [sp], #4
    ee00:	f002 bbda 	b.w	115b8 <bsec_b_IaqEstimator_configure>
    ee04:	461a      	mov	r2, r3
    ee06:	f85d 4b04 	ldr.w	r4, [sp], #4
    ee0a:	f001 bf77 	b.w	10cfc <bsec_GasHumidityPreProcessor_configure>
    ee0e:	461a      	mov	r2, r3
    ee10:	f500 70b0 	add.w	r0, r0, #352	; 0x160
    ee14:	f85d 4b04 	ldr.w	r4, [sp], #4
    ee18:	f002 b848 	b.w	10eac <bsec_HumidityTemperatureCorrector_configure>
    ee1c:	461a      	mov	r2, r3
    ee1e:	f500 7098 	add.w	r0, r0, #304	; 0x130
    ee22:	f85d 4b04 	ldr.w	r4, [sp], #4
    ee26:	f002 bde1 	b.w	119ec <bsec_b_SensorStatusTracker_configure>
    ee2a:	f06f 0063 	mvn.w	r0, #99	; 0x63
    ee2e:	f85d 4b04 	ldr.w	r4, [sp], #4
    ee32:	4770      	bx	lr

0000ee34 <bsec_ChannelHub_do>:
    ee34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ee38:	ed2d 8b02 	vpush	{d8}
    ee3c:	2300      	movs	r3, #0
    ee3e:	b09b      	sub	sp, #108	; 0x6c
    ee40:	ed9f 8aae 	vldr	s16, [pc, #696]	; f0fc <bsec_ChannelHub_do+0x2c8>
    ee44:	f8c0 3298 	str.w	r3, [r0, #664]	; 0x298
    ee48:	2105      	movs	r1, #5
    ee4a:	4604      	mov	r4, r0
    ee4c:	f88d 3012 	strb.w	r3, [sp, #18]
    ee50:	f88d 3013 	strb.w	r3, [sp, #19]
    ee54:	ed8d 8a05 	vstr	s16, [sp, #20]
    ee58:	ed8d 8a06 	vstr	s16, [sp, #24]
    ee5c:	ed8d 8a07 	vstr	s16, [sp, #28]
    ee60:	ed8d 8a14 	vstr	s16, [sp, #80]	; 0x50
    ee64:	ed8d 8a15 	vstr	s16, [sp, #84]	; 0x54
    ee68:	ed8d 8a16 	vstr	s16, [sp, #88]	; 0x58
    ee6c:	ed8d 8a17 	vstr	s16, [sp, #92]	; 0x5c
    ee70:	ed8d 8a18 	vstr	s16, [sp, #96]	; 0x60
    ee74:	ed8d 8a19 	vstr	s16, [sp, #100]	; 0x64
    ee78:	ed8d 8a08 	vstr	s16, [sp, #32]
    ee7c:	ed8d 8a09 	vstr	s16, [sp, #36]	; 0x24
    ee80:	f7ff fefc 	bl	ec7c <bsec_ChannelHub_isChannelReady.part.0>
    ee84:	2800      	cmp	r0, #0
    ee86:	f000 8090 	beq.w	efaa <bsec_ChannelHub_do+0x176>
    ee8a:	edd4 7a91 	vldr	s15, [r4, #580]	; 0x244
    ee8e:	eef4 7a48 	vcmp.f32	s15, s16
    ee92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ee96:	f000 8135 	beq.w	f104 <bsec_ChannelHub_do+0x2d0>
    ee9a:	2103      	movs	r1, #3
    ee9c:	4620      	mov	r0, r4
    ee9e:	4d98      	ldr	r5, [pc, #608]	; (f100 <bsec_ChannelHub_do+0x2cc>)
    eea0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    eea4:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
    eea8:	f7ff fee8 	bl	ec7c <bsec_ChannelHub_isChannelReady.part.0>
    eeac:	2800      	cmp	r0, #0
    eeae:	f040 8088 	bne.w	efc2 <bsec_ChannelHub_do+0x18e>
    eeb2:	2101      	movs	r1, #1
    eeb4:	4620      	mov	r0, r4
    eeb6:	f7ff fee1 	bl	ec7c <bsec_ChannelHub_isChannelReady.part.0>
    eeba:	b138      	cbz	r0, eecc <bsec_ChannelHub_do+0x98>
    eebc:	edd4 7a91 	vldr	s15, [r4, #580]	; 0x244
    eec0:	eef5 7a40 	vcmp.f32	s15, #0.0
    eec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    eec8:	f000 8179 	beq.w	f1be <bsec_ChannelHub_do+0x38a>
    eecc:	2102      	movs	r1, #2
    eece:	4620      	mov	r0, r4
    eed0:	f7ff fed4 	bl	ec7c <bsec_ChannelHub_isChannelReady.part.0>
    eed4:	b138      	cbz	r0, eee6 <bsec_ChannelHub_do+0xb2>
    eed6:	edd4 7a91 	vldr	s15, [r4, #580]	; 0x244
    eeda:	eef5 7a40 	vcmp.f32	s15, #0.0
    eede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    eee2:	f000 81ab 	beq.w	f23c <bsec_ChannelHub_do+0x408>
    eee6:	2109      	movs	r1, #9
    eee8:	4620      	mov	r0, r4
    eeea:	f7ff fec7 	bl	ec7c <bsec_ChannelHub_isChannelReady.part.0>
    eeee:	b138      	cbz	r0, ef00 <bsec_ChannelHub_do+0xcc>
    eef0:	edd4 7a91 	vldr	s15, [r4, #580]	; 0x244
    eef4:	eef5 7a40 	vcmp.f32	s15, #0.0
    eef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    eefc:	f000 8250 	beq.w	f3a0 <bsec_ChannelHub_do+0x56c>
    ef00:	ed9f 8a7e 	vldr	s16, [pc, #504]	; f0fc <bsec_ChannelHub_do+0x2c8>
    ef04:	210a      	movs	r1, #10
    ef06:	4620      	mov	r0, r4
    ef08:	f7ff feb8 	bl	ec7c <bsec_ChannelHub_isChannelReady.part.0>
    ef0c:	b138      	cbz	r0, ef1e <bsec_ChannelHub_do+0xea>
    ef0e:	edd4 7a91 	vldr	s15, [r4, #580]	; 0x244
    ef12:	eef5 7a40 	vcmp.f32	s15, #0.0
    ef16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ef1a:	f000 8274 	beq.w	f406 <bsec_ChannelHub_do+0x5d2>
    ef1e:	796b      	ldrb	r3, [r5, #5]
    ef20:	f203 115b 	addw	r1, r3, #347	; 0x15b
    ef24:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ef28:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
    ef2c:	4291      	cmp	r1, r2
    ef2e:	f103 36ff 	add.w	r6, r3, #4294967295	; 0xffffffff
    ef32:	d004      	beq.n	ef3e <bsec_ChannelHub_do+0x10a>
    ef34:	f8d4 2280 	ldr.w	r2, [r4, #640]	; 0x280
    ef38:	0757      	lsls	r7, r2, #29
    ef3a:	f100 80bd 	bmi.w	f0b8 <bsec_ChannelHub_do+0x284>
    ef3e:	79ab      	ldrb	r3, [r5, #6]
    ef40:	f203 115b 	addw	r1, r3, #347	; 0x15b
    ef44:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ef48:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
    ef4c:	4291      	cmp	r1, r2
    ef4e:	f103 36ff 	add.w	r6, r3, #4294967295	; 0xffffffff
    ef52:	d004      	beq.n	ef5e <bsec_ChannelHub_do+0x12a>
    ef54:	f8d4 2280 	ldr.w	r2, [r4, #640]	; 0x280
    ef58:	07d0      	lsls	r0, r2, #31
    ef5a:	f100 808b 	bmi.w	f074 <bsec_ChannelHub_do+0x240>
    ef5e:	79eb      	ldrb	r3, [r5, #7]
    ef60:	f203 115b 	addw	r1, r3, #347	; 0x15b
    ef64:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ef68:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
    ef6c:	4291      	cmp	r1, r2
    ef6e:	f103 36ff 	add.w	r6, r3, #4294967295	; 0xffffffff
    ef72:	d003      	beq.n	ef7c <bsec_ChannelHub_do+0x148>
    ef74:	f8d4 2280 	ldr.w	r2, [r4, #640]	; 0x280
    ef78:	0791      	lsls	r1, r2, #30
    ef7a:	d459      	bmi.n	f030 <bsec_ChannelHub_do+0x1fc>
    ef7c:	7a2b      	ldrb	r3, [r5, #8]
    ef7e:	f203 115b 	addw	r1, r3, #347	; 0x15b
    ef82:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ef86:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
    ef8a:	4291      	cmp	r1, r2
    ef8c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
    ef90:	d003      	beq.n	ef9a <bsec_ChannelHub_do+0x166>
    ef92:	f8d4 2280 	ldr.w	r2, [r4, #640]	; 0x280
    ef96:	0712      	lsls	r2, r2, #28
    ef98:	d428      	bmi.n	efec <bsec_ChannelHub_do+0x1b8>
    ef9a:	2300      	movs	r3, #0
    ef9c:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
    efa0:	b01b      	add	sp, #108	; 0x6c
    efa2:	ecbd 8b02 	vpop	{d8}
    efa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    efaa:	4d55      	ldr	r5, [pc, #340]	; (f100 <bsec_ChannelHub_do+0x2cc>)
    efac:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    efb0:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
    efb4:	2103      	movs	r1, #3
    efb6:	4620      	mov	r0, r4
    efb8:	f7ff fe60 	bl	ec7c <bsec_ChannelHub_isChannelReady.part.0>
    efbc:	2800      	cmp	r0, #0
    efbe:	f43f af78 	beq.w	eeb2 <bsec_ChannelHub_do+0x7e>
    efc2:	edd4 7a91 	vldr	s15, [r4, #580]	; 0x244
    efc6:	eef5 7a40 	vcmp.f32	s15, #0.0
    efca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    efce:	f47f af70 	bne.w	eeb2 <bsec_ChannelHub_do+0x7e>
    efd2:	ab07      	add	r3, sp, #28
    efd4:	aa06      	add	r2, sp, #24
    efd6:	a905      	add	r1, sp, #20
    efd8:	ed94 1a8b 	vldr	s2, [r4, #556]	; 0x22c
    efdc:	edd4 0a8c 	vldr	s1, [r4, #560]	; 0x230
    efe0:	ed94 0a8d 	vldr	s0, [r4, #564]	; 0x234
    efe4:	4620      	mov	r0, r4
    efe6:	f001 fea3 	bl	10d30 <bsec_GasHumidityPreProcessor_doStep>
    efea:	e762      	b.n	eeb2 <bsec_ChannelHub_do+0x7e>
    efec:	f504 72c8 	add.w	r2, r4, #400	; 0x190
    eff0:	e9d2 0100 	ldrd	r0, r1, [r2]
    eff4:	f103 0236 	add.w	r2, r3, #54	; 0x36
    eff8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    effc:	f8d4 6234 	ldr.w	r6, [r4, #564]	; 0x234
    f000:	f8c3 6244 	str.w	r6, [r3, #580]	; 0x244
    f004:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    f008:	ed9f 0a3c 	vldr	s0, [pc, #240]	; f0fc <bsec_ChannelHub_do+0x2c8>
    f00c:	e9c2 0100 	strd	r0, r1, [r2]
    f010:	f020 fa6c 	bl	2f4ec <roundf>
    f014:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    f018:	4425      	add	r5, r4
    f01a:	ee17 3a90 	vmov	r3, s15
    f01e:	f885 3284 	strb.w	r3, [r5, #644]	; 0x284
    f022:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
    f026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    f02a:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
    f02e:	e7b4      	b.n	ef9a <bsec_ChannelHub_do+0x166>
    f030:	f504 72c0 	add.w	r2, r4, #384	; 0x180
    f034:	e9d2 0100 	ldrd	r0, r1, [r2]
    f038:	f103 0236 	add.w	r2, r3, #54	; 0x36
    f03c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    f040:	f8d4 722c 	ldr.w	r7, [r4, #556]	; 0x22c
    f044:	f8c3 7244 	str.w	r7, [r3, #580]	; 0x244
    f048:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    f04c:	ed9f 0a2b 	vldr	s0, [pc, #172]	; f0fc <bsec_ChannelHub_do+0x2c8>
    f050:	e9c2 0100 	strd	r0, r1, [r2]
    f054:	f020 fa4a 	bl	2f4ec <roundf>
    f058:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    f05c:	4426      	add	r6, r4
    f05e:	ee17 3a90 	vmov	r3, s15
    f062:	f886 3284 	strb.w	r3, [r6, #644]	; 0x284
    f066:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
    f06a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f06e:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
    f072:	e783      	b.n	ef7c <bsec_ChannelHub_do+0x148>
    f074:	f504 72bc 	add.w	r2, r4, #376	; 0x178
    f078:	e9d2 0100 	ldrd	r0, r1, [r2]
    f07c:	f103 0236 	add.w	r2, r3, #54	; 0x36
    f080:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    f084:	f8d4 7228 	ldr.w	r7, [r4, #552]	; 0x228
    f088:	f8c3 7244 	str.w	r7, [r3, #580]	; 0x244
    f08c:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    f090:	ed9f 0a1a 	vldr	s0, [pc, #104]	; f0fc <bsec_ChannelHub_do+0x2c8>
    f094:	e9c2 0100 	strd	r0, r1, [r2]
    f098:	f020 fa28 	bl	2f4ec <roundf>
    f09c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    f0a0:	4426      	add	r6, r4
    f0a2:	ee17 3a90 	vmov	r3, s15
    f0a6:	f886 3284 	strb.w	r3, [r6, #644]	; 0x284
    f0aa:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
    f0ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f0b2:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
    f0b6:	e752      	b.n	ef5e <bsec_ChannelHub_do+0x12a>
    f0b8:	f504 72c4 	add.w	r2, r4, #392	; 0x188
    f0bc:	e9d2 0100 	ldrd	r0, r1, [r2]
    f0c0:	f103 0236 	add.w	r2, r3, #54	; 0x36
    f0c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    f0c8:	f8d4 7230 	ldr.w	r7, [r4, #560]	; 0x230
    f0cc:	f8c3 7244 	str.w	r7, [r3, #580]	; 0x244
    f0d0:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    f0d4:	ed9f 0a09 	vldr	s0, [pc, #36]	; f0fc <bsec_ChannelHub_do+0x2c8>
    f0d8:	e9c2 0100 	strd	r0, r1, [r2]
    f0dc:	f020 fa06 	bl	2f4ec <roundf>
    f0e0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    f0e4:	4426      	add	r6, r4
    f0e6:	ee17 3a90 	vmov	r3, s15
    f0ea:	f886 3284 	strb.w	r3, [r6, #644]	; 0x284
    f0ee:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
    f0f2:	f043 0320 	orr.w	r3, r3, #32
    f0f6:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
    f0fa:	e720      	b.n	ef3e <bsec_ChannelHub_do+0x10a>
    f0fc:	00000000 	.word	0x00000000
    f100:	0003ad58 	.word	0x0003ad58
    f104:	f504 73c8 	add.w	r3, r4, #400	; 0x190
    f108:	e9d3 6700 	ldrd	r6, r7, [r3]
    f10c:	f10d 0112 	add.w	r1, sp, #18
    f110:	ab09      	add	r3, sp, #36	; 0x24
    f112:	f10d 0013 	add.w	r0, sp, #19
    f116:	e9cd 1000 	strd	r1, r0, [sp]
    f11a:	9302      	str	r3, [sp, #8]
    f11c:	f504 7098 	add.w	r0, r4, #304	; 0x130
    f120:	4632      	mov	r2, r6
    f122:	463b      	mov	r3, r7
    f124:	f002 fac4 	bl	116b0 <bsec_SensorStatusTracker_doStep>
    f128:	4dcf      	ldr	r5, [pc, #828]	; (f468 <bsec_ChannelHub_do+0x634>)
    f12a:	f89d 2012 	ldrb.w	r2, [sp, #18]
    f12e:	7aeb      	ldrb	r3, [r5, #11]
    f130:	ee07 2a90 	vmov	s15, r2
    f134:	f103 0236 	add.w	r2, r3, #54	; 0x36
    f138:	eef8 7a67 	vcvt.f32.u32	s15, s15
    f13c:	eb04 0183 	add.w	r1, r4, r3, lsl #2
    f140:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    f144:	edc1 7a91 	vstr	s15, [r1, #580]	; 0x244
    f148:	eeb0 0a48 	vmov.f32	s0, s16
    f14c:	e9c2 6700 	strd	r6, r7, [r2]
    f150:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    f154:	f020 f9ca 	bl	2f4ec <roundf>
    f158:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    f15c:	44a0      	add	r8, r4
    f15e:	ee17 2a90 	vmov	r2, s15
    f162:	f888 2284 	strb.w	r2, [r8, #644]	; 0x284
    f166:	f89d 2013 	ldrb.w	r2, [sp, #19]
    f16a:	7b2b      	ldrb	r3, [r5, #12]
    f16c:	f8d4 1294 	ldr.w	r1, [r4, #660]	; 0x294
    f170:	ee07 2a90 	vmov	s15, r2
    f174:	f103 0236 	add.w	r2, r3, #54	; 0x36
    f178:	eef8 7a67 	vcvt.f32.u32	s15, s15
    f17c:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    f180:	eb04 0083 	add.w	r0, r4, r3, lsl #2
    f184:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    f188:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
    f18c:	eeb0 0a48 	vmov.f32	s0, s16
    f190:	edc0 7a91 	vstr	s15, [r0, #580]	; 0x244
    f194:	e9c2 6700 	strd	r6, r7, [r2]
    f198:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    f19c:	f020 f9a6 	bl	2f4ec <roundf>
    f1a0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    f1a4:	eb04 0308 	add.w	r3, r4, r8
    f1a8:	ee17 2a90 	vmov	r2, s15
    f1ac:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284
    f1b0:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
    f1b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    f1b8:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
    f1bc:	e6fa      	b.n	efb4 <bsec_ChannelHub_do+0x180>
    f1be:	edd4 7a8f 	vldr	s15, [r4, #572]	; 0x23c
    f1c2:	edd4 1a90 	vldr	s3, [r4, #576]	; 0x240
    f1c6:	f89d 2013 	ldrb.w	r2, [sp, #19]
    f1ca:	f89d 1012 	ldrb.w	r1, [sp, #18]
    f1ce:	ed9d 1a07 	vldr	s2, [sp, #28]
    f1d2:	eddd 0a06 	vldr	s1, [sp, #24]
    f1d6:	ed9d 0a05 	vldr	s0, [sp, #20]
    f1da:	eef5 7a40 	vcmp.f32	s15, #0.0
    f1de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f1e2:	f10d 0c20 	add.w	ip, sp, #32
    f1e6:	a814      	add	r0, sp, #80	; 0x50
    f1e8:	bf14      	ite	ne
    f1ea:	2301      	movne	r3, #1
    f1ec:	2300      	moveq	r3, #0
    f1ee:	e9cd 0c00 	strd	r0, ip, [sp]
    f1f2:	f104 0068 	add.w	r0, r4, #104	; 0x68
    f1f6:	f001 f8cd 	bl	10394 <bsec_GasHumidityBaselineTracker_doStep>
    f1fa:	7c6b      	ldrb	r3, [r5, #17]
    f1fc:	9808      	ldr	r0, [sp, #32]
    f1fe:	ed9f 0a9b 	vldr	s0, [pc, #620]	; f46c <bsec_ChannelHub_do+0x638>
    f202:	f103 0236 	add.w	r2, r3, #54	; 0x36
    f206:	eb04 0183 	add.w	r1, r4, r3, lsl #2
    f20a:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    f20e:	f8c1 0244 	str.w	r0, [r1, #580]	; 0x244
    f212:	e9c2 6700 	strd	r6, r7, [r2]
    f216:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    f21a:	f020 f967 	bl	2f4ec <roundf>
    f21e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    f222:	eb04 0308 	add.w	r3, r4, r8
    f226:	ee17 2a90 	vmov	r2, s15
    f22a:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284
    f22e:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
    f232:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    f236:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
    f23a:	e647      	b.n	eecc <bsec_ChannelHub_do+0x98>
    f23c:	a912      	add	r1, sp, #72	; 0x48
    f23e:	aa10      	add	r2, sp, #64	; 0x40
    f240:	ab0e      	add	r3, sp, #56	; 0x38
    f242:	eddd 0a09 	vldr	s1, [sp, #36]	; 0x24
    f246:	ed9d 0a08 	vldr	s0, [sp, #32]
    f24a:	9300      	str	r3, [sp, #0]
    f24c:	e9cd 2101 	strd	r2, r1, [sp, #4]
    f250:	ab0c      	add	r3, sp, #48	; 0x30
    f252:	aa0a      	add	r2, sp, #40	; 0x28
    f254:	a914      	add	r1, sp, #80	; 0x50
    f256:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    f25a:	f001 ff87 	bl	1116c <bsec_IaqEstimator_doStep>
    f25e:	782b      	ldrb	r3, [r5, #0]
    f260:	980a      	ldr	r0, [sp, #40]	; 0x28
    f262:	ed9d 0a0b 	vldr	s0, [sp, #44]	; 0x2c
    f266:	eb04 0183 	add.w	r1, r4, r3, lsl #2
    f26a:	f103 0236 	add.w	r2, r3, #54	; 0x36
    f26e:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    f272:	f8c1 0244 	str.w	r0, [r1, #580]	; 0x244
    f276:	e9c2 6700 	strd	r6, r7, [r2]
    f27a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    f27e:	f020 f935 	bl	2f4ec <roundf>
    f282:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    f286:	44a0      	add	r8, r4
    f288:	ee17 2a90 	vmov	r2, s15
    f28c:	786b      	ldrb	r3, [r5, #1]
    f28e:	f888 2284 	strb.w	r2, [r8, #644]	; 0x284
    f292:	f8d4 1294 	ldr.w	r1, [r4, #660]	; 0x294
    f296:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
    f29a:	ed9d 0a0d 	vldr	s0, [sp, #52]	; 0x34
    f29e:	eb04 0083 	add.w	r0, r4, r3, lsl #2
    f2a2:	f103 0236 	add.w	r2, r3, #54	; 0x36
    f2a6:	f041 0101 	orr.w	r1, r1, #1
    f2aa:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    f2ae:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
    f2b2:	f8c0 c244 	str.w	ip, [r0, #580]	; 0x244
    f2b6:	e9c2 6700 	strd	r6, r7, [r2]
    f2ba:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    f2be:	f020 f915 	bl	2f4ec <roundf>
    f2c2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    f2c6:	44a0      	add	r8, r4
    f2c8:	ee17 2a90 	vmov	r2, s15
    f2cc:	78ab      	ldrb	r3, [r5, #2]
    f2ce:	f888 2284 	strb.w	r2, [r8, #644]	; 0x284
    f2d2:	f8d4 1294 	ldr.w	r1, [r4, #660]	; 0x294
    f2d6:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    f2da:	ed9d 0a0f 	vldr	s0, [sp, #60]	; 0x3c
    f2de:	eb04 0083 	add.w	r0, r4, r3, lsl #2
    f2e2:	f103 0236 	add.w	r2, r3, #54	; 0x36
    f2e6:	f041 0102 	orr.w	r1, r1, #2
    f2ea:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    f2ee:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
    f2f2:	f8c0 c244 	str.w	ip, [r0, #580]	; 0x244
    f2f6:	e9c2 6700 	strd	r6, r7, [r2]
    f2fa:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    f2fe:	f020 f8f5 	bl	2f4ec <roundf>
    f302:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    f306:	44a0      	add	r8, r4
    f308:	ee17 2a90 	vmov	r2, s15
    f30c:	78eb      	ldrb	r3, [r5, #3]
    f30e:	f888 2284 	strb.w	r2, [r8, #644]	; 0x284
    f312:	f8d4 1294 	ldr.w	r1, [r4, #660]	; 0x294
    f316:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    f31a:	ed9d 0a11 	vldr	s0, [sp, #68]	; 0x44
    f31e:	eb04 0083 	add.w	r0, r4, r3, lsl #2
    f322:	f103 0236 	add.w	r2, r3, #54	; 0x36
    f326:	f041 0104 	orr.w	r1, r1, #4
    f32a:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    f32e:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
    f332:	f8c0 c244 	str.w	ip, [r0, #580]	; 0x244
    f336:	e9c2 6700 	strd	r6, r7, [r2]
    f33a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    f33e:	f020 f8d5 	bl	2f4ec <roundf>
    f342:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    f346:	44a0      	add	r8, r4
    f348:	ee17 2a90 	vmov	r2, s15
    f34c:	7d2b      	ldrb	r3, [r5, #20]
    f34e:	f888 2284 	strb.w	r2, [r8, #644]	; 0x284
    f352:	f8d4 1294 	ldr.w	r1, [r4, #660]	; 0x294
    f356:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
    f35a:	ed9d 0a13 	vldr	s0, [sp, #76]	; 0x4c
    f35e:	f103 0236 	add.w	r2, r3, #54	; 0x36
    f362:	eb04 0083 	add.w	r0, r4, r3, lsl #2
    f366:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    f36a:	f041 0108 	orr.w	r1, r1, #8
    f36e:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
    f372:	f8c0 c244 	str.w	ip, [r0, #580]	; 0x244
    f376:	e9c2 6700 	strd	r6, r7, [r2]
    f37a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    f37e:	f020 f8b5 	bl	2f4ec <roundf>
    f382:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    f386:	eb04 0308 	add.w	r3, r4, r8
    f38a:	ee17 2a90 	vmov	r2, s15
    f38e:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284
    f392:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
    f396:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    f39a:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
    f39e:	e5a2      	b.n	eee6 <bsec_ChannelHub_do+0xb2>
    f3a0:	f504 73c4 	add.w	r3, r4, #392	; 0x188
    f3a4:	e9d3 8900 	ldrd	r8, r9, [r3]
    f3a8:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
    f3ac:	edd4 0a8e 	vldr	s1, [r4, #568]	; 0x238
    f3b0:	ed94 0a8c 	vldr	s0, [r4, #560]	; 0x230
    f3b4:	9302      	str	r3, [sp, #8]
    f3b6:	4632      	mov	r2, r6
    f3b8:	463b      	mov	r3, r7
    f3ba:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    f3be:	e9cd 8900 	strd	r8, r9, [sp]
    f3c2:	f7fd fb37 	bl	ca34 <bsec_SensorHeatCompensator_doStep>
    f3c6:	7b6b      	ldrb	r3, [r5, #13]
    f3c8:	f103 0236 	add.w	r2, r3, #54	; 0x36
    f3cc:	eb04 0183 	add.w	r1, r4, r3, lsl #2
    f3d0:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    f3d4:	eeb0 8a40 	vmov.f32	s16, s0
    f3d8:	ed81 8a91 	vstr	s16, [r1, #580]	; 0x244
    f3dc:	ed9f 0a23 	vldr	s0, [pc, #140]	; f46c <bsec_ChannelHub_do+0x638>
    f3e0:	e9c2 8900 	strd	r8, r9, [r2]
    f3e4:	1e5e      	subs	r6, r3, #1
    f3e6:	f020 f881 	bl	2f4ec <roundf>
    f3ea:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    f3ee:	19a3      	adds	r3, r4, r6
    f3f0:	ee17 2a90 	vmov	r2, s15
    f3f4:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284
    f3f8:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
    f3fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    f400:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
    f404:	e57e      	b.n	ef04 <bsec_ChannelHub_do+0xd0>
    f406:	f504 73c4 	add.w	r3, r4, #392	; 0x188
    f40a:	eef0 0a48 	vmov.f32	s1, s16
    f40e:	ed94 1a8b 	vldr	s2, [r4, #556]	; 0x22c
    f412:	ed94 0a8c 	vldr	s0, [r4, #560]	; 0x230
    f416:	f504 70b0 	add.w	r0, r4, #352	; 0x160
    f41a:	e9d3 6700 	ldrd	r6, r7, [r3]
    f41e:	f001 fd5f 	bl	10ee0 <bsec_HumidityTemperatureCorrector_doStep>
    f422:	7bab      	ldrb	r3, [r5, #14]
    f424:	f103 0236 	add.w	r2, r3, #54	; 0x36
    f428:	eef0 7a40 	vmov.f32	s15, s0
    f42c:	eb04 0183 	add.w	r1, r4, r3, lsl #2
    f430:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    f434:	edc1 7a91 	vstr	s15, [r1, #580]	; 0x244
    f438:	ed9f 0a0c 	vldr	s0, [pc, #48]	; f46c <bsec_ChannelHub_do+0x638>
    f43c:	edcd 7a05 	vstr	s15, [sp, #20]
    f440:	e9c2 6700 	strd	r6, r7, [r2]
    f444:	1e5e      	subs	r6, r3, #1
    f446:	f020 f851 	bl	2f4ec <roundf>
    f44a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    f44e:	19a3      	adds	r3, r4, r6
    f450:	ee17 2a90 	vmov	r2, s15
    f454:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284
    f458:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
    f45c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    f460:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
    f464:	e55b      	b.n	ef1e <bsec_ChannelHub_do+0xea>
    f466:	bf00      	nop
    f468:	0003ad58 	.word	0x0003ad58
    f46c:	00000000 	.word	0x00000000

0000f470 <bsec_ChannelHub_getChannelConfiguration>:
    f470:	b5f0      	push	{r4, r5, r6, r7, lr}
    f472:	b085      	sub	sp, #20
    f474:	2400      	movs	r4, #0
    f476:	3901      	subs	r1, #1
    f478:	461f      	mov	r7, r3
    f47a:	4606      	mov	r6, r0
    f47c:	4615      	mov	r5, r2
    f47e:	9403      	str	r4, [sp, #12]
    f480:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    f484:	2909      	cmp	r1, #9
    f486:	d85c      	bhi.n	f542 <bsec_ChannelHub_getChannelConfiguration+0xd2>
    f488:	e8df f001 	tbb	[pc, r1]
    f48c:	5b1a130c 	.word	0x5b1a130c
    f490:	5b5b5b53 	.word	0x5b5b5b53
    f494:	4b05      	.short	0x4b05
    f496:	463a      	mov	r2, r7
    f498:	4629      	mov	r1, r5
    f49a:	30c8      	adds	r0, #200	; 0xc8
    f49c:	f7fd fb4e 	bl	cb3c <bsec_SensorHeatCompensator_getConfiguration>
    f4a0:	b005      	add	sp, #20
    f4a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f4a4:	463a      	mov	r2, r7
    f4a6:	4629      	mov	r1, r5
    f4a8:	3068      	adds	r0, #104	; 0x68
    f4aa:	f001 f9bf 	bl	1082c <bsec_GasHumidityBaselineTracker_getConfiguration>
    f4ae:	b005      	add	sp, #20
    f4b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f4b2:	463a      	mov	r2, r7
    f4b4:	4629      	mov	r1, r5
    f4b6:	302c      	adds	r0, #44	; 0x2c
    f4b8:	f001 ff3e 	bl	11338 <bsec_IaqEstimator_getConfiguration>
    f4bc:	b005      	add	sp, #20
    f4be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f4c0:	aa04      	add	r2, sp, #16
    f4c2:	2401      	movs	r4, #1
    f4c4:	f802 4d09 	strb.w	r4, [r2, #-9]!
    f4c8:	4629      	mov	r1, r5
    f4ca:	7800      	ldrb	r0, [r0, #0]
    f4cc:	f002 fade 	bl	11a8c <bsec_Serialization_prepareSerializationHeader>
    f4d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f4d4:	9003      	str	r0, [sp, #12]
    f4d6:	b1a3      	cbz	r3, f502 <bsec_ChannelHub_getChannelConfiguration+0x92>
    f4d8:	3620      	adds	r6, #32
    f4da:	e003      	b.n	f4e4 <bsec_ChannelHub_getChannelConfiguration+0x74>
    f4dc:	3401      	adds	r4, #1
    f4de:	b2e4      	uxtb	r4, r4
    f4e0:	42a3      	cmp	r3, r4
    f4e2:	d30d      	bcc.n	f500 <bsec_ChannelHub_getChannelConfiguration+0x90>
    f4e4:	2c01      	cmp	r4, #1
    f4e6:	d1f9      	bne.n	f4dc <bsec_ChannelHub_getChannelConfiguration+0x6c>
    f4e8:	ab03      	add	r3, sp, #12
    f4ea:	463a      	mov	r2, r7
    f4ec:	4629      	mov	r1, r5
    f4ee:	4630      	mov	r0, r6
    f4f0:	f000 fa8e 	bl	fa10 <bsec_Entity_serializeAndAdd>
    f4f4:	3401      	adds	r4, #1
    f4f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f4fa:	b2e4      	uxtb	r4, r4
    f4fc:	42a3      	cmp	r3, r4
    f4fe:	d2f1      	bcs.n	f4e4 <bsec_ChannelHub_getChannelConfiguration+0x74>
    f500:	9803      	ldr	r0, [sp, #12]
    f502:	a904      	add	r1, sp, #16
    f504:	2202      	movs	r2, #2
    f506:	f821 0d06 	strh.w	r0, [r1, #-6]!
    f50a:	a802      	add	r0, sp, #8
    f50c:	f029 fd59 	bl	38fc2 <memcpy>
    f510:	f89d 2008 	ldrb.w	r2, [sp, #8]
    f514:	f89d 3009 	ldrb.w	r3, [sp, #9]
    f518:	9803      	ldr	r0, [sp, #12]
    f51a:	702a      	strb	r2, [r5, #0]
    f51c:	706b      	strb	r3, [r5, #1]
    f51e:	b005      	add	sp, #20
    f520:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f522:	463a      	mov	r2, r7
    f524:	4629      	mov	r1, r5
    f526:	f500 70b0 	add.w	r0, r0, #352	; 0x160
    f52a:	f001 fd23 	bl	10f74 <bsec_HumidityTemperatureCorrector_getConfiguration>
    f52e:	b005      	add	sp, #20
    f530:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f532:	463a      	mov	r2, r7
    f534:	4629      	mov	r1, r5
    f536:	f500 7098 	add.w	r0, r0, #304	; 0x130
    f53a:	f002 f93f 	bl	117bc <bsec_SensorStatusTracker_getConfiguration>
    f53e:	b005      	add	sp, #20
    f540:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f542:	2000      	movs	r0, #0
    f544:	e7ac      	b.n	f4a0 <bsec_ChannelHub_getChannelConfiguration+0x30>
    f546:	bf00      	nop

0000f548 <bsec_ChannelHub_getChannelState>:
    f548:	b5f0      	push	{r4, r5, r6, r7, lr}
    f54a:	b085      	sub	sp, #20
    f54c:	2400      	movs	r4, #0
    f54e:	3901      	subs	r1, #1
    f550:	461f      	mov	r7, r3
    f552:	4606      	mov	r6, r0
    f554:	4615      	mov	r5, r2
    f556:	9403      	str	r4, [sp, #12]
    f558:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    f55c:	2909      	cmp	r1, #9
    f55e:	d85c      	bhi.n	f61a <bsec_ChannelHub_getChannelState+0xd2>
    f560:	e8df f001 	tbb	[pc, r1]
    f564:	5b1a130c 	.word	0x5b1a130c
    f568:	5b5b5b53 	.word	0x5b5b5b53
    f56c:	4b05      	.short	0x4b05
    f56e:	463a      	mov	r2, r7
    f570:	4629      	mov	r1, r5
    f572:	30c8      	adds	r0, #200	; 0xc8
    f574:	f7fd fb46 	bl	cc04 <bsec_SensorHeatCompensator_getState>
    f578:	b005      	add	sp, #20
    f57a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f57c:	463a      	mov	r2, r7
    f57e:	4629      	mov	r1, r5
    f580:	3068      	adds	r0, #104	; 0x68
    f582:	f001 f9cd 	bl	10920 <bsec_GasHumidityBaselineTracker_getState>
    f586:	b005      	add	sp, #20
    f588:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f58a:	463a      	mov	r2, r7
    f58c:	4629      	mov	r1, r5
    f58e:	302c      	adds	r0, #44	; 0x2c
    f590:	f001 ff50 	bl	11434 <bsec_IaqEstimator_getState>
    f594:	b005      	add	sp, #20
    f596:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f598:	aa04      	add	r2, sp, #16
    f59a:	2401      	movs	r4, #1
    f59c:	f802 4d09 	strb.w	r4, [r2, #-9]!
    f5a0:	4629      	mov	r1, r5
    f5a2:	7800      	ldrb	r0, [r0, #0]
    f5a4:	f002 fa72 	bl	11a8c <bsec_Serialization_prepareSerializationHeader>
    f5a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f5ac:	9003      	str	r0, [sp, #12]
    f5ae:	b1a3      	cbz	r3, f5da <bsec_ChannelHub_getChannelState+0x92>
    f5b0:	3610      	adds	r6, #16
    f5b2:	e003      	b.n	f5bc <bsec_ChannelHub_getChannelState+0x74>
    f5b4:	3401      	adds	r4, #1
    f5b6:	b2e4      	uxtb	r4, r4
    f5b8:	42a3      	cmp	r3, r4
    f5ba:	d30d      	bcc.n	f5d8 <bsec_ChannelHub_getChannelState+0x90>
    f5bc:	2c01      	cmp	r4, #1
    f5be:	d1f9      	bne.n	f5b4 <bsec_ChannelHub_getChannelState+0x6c>
    f5c0:	ab03      	add	r3, sp, #12
    f5c2:	463a      	mov	r2, r7
    f5c4:	4629      	mov	r1, r5
    f5c6:	4630      	mov	r0, r6
    f5c8:	f000 fa22 	bl	fa10 <bsec_Entity_serializeAndAdd>
    f5cc:	3401      	adds	r4, #1
    f5ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f5d2:	b2e4      	uxtb	r4, r4
    f5d4:	42a3      	cmp	r3, r4
    f5d6:	d2f1      	bcs.n	f5bc <bsec_ChannelHub_getChannelState+0x74>
    f5d8:	9803      	ldr	r0, [sp, #12]
    f5da:	a904      	add	r1, sp, #16
    f5dc:	2202      	movs	r2, #2
    f5de:	f821 0d06 	strh.w	r0, [r1, #-6]!
    f5e2:	a802      	add	r0, sp, #8
    f5e4:	f029 fced 	bl	38fc2 <memcpy>
    f5e8:	f89d 2008 	ldrb.w	r2, [sp, #8]
    f5ec:	f89d 3009 	ldrb.w	r3, [sp, #9]
    f5f0:	9803      	ldr	r0, [sp, #12]
    f5f2:	702a      	strb	r2, [r5, #0]
    f5f4:	706b      	strb	r3, [r5, #1]
    f5f6:	b005      	add	sp, #20
    f5f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f5fa:	463a      	mov	r2, r7
    f5fc:	4629      	mov	r1, r5
    f5fe:	f500 70b0 	add.w	r0, r0, #352	; 0x160
    f602:	f001 fced 	bl	10fe0 <bsec_HumidityTemperatureCorrector_getState>
    f606:	b005      	add	sp, #20
    f608:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f60a:	463a      	mov	r2, r7
    f60c:	4629      	mov	r1, r5
    f60e:	f500 7098 	add.w	r0, r0, #304	; 0x130
    f612:	f002 f915 	bl	11840 <bsec_SensorStatusTracker_getState>
    f616:	b005      	add	sp, #20
    f618:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f61a:	2000      	movs	r0, #0
    f61c:	e7ac      	b.n	f578 <bsec_ChannelHub_getChannelState+0x30>
    f61e:	bf00      	nop

0000f620 <bsec_ChannelHub_getOutput>:
    f620:	b4f0      	push	{r4, r5, r6, r7}
    f622:	3901      	subs	r1, #1
    f624:	4c0f      	ldr	r4, [pc, #60]	; (f664 <bsec_ChannelHub_getOutput+0x44>)
    f626:	9d04      	ldr	r5, [sp, #16]
    f628:	5c64      	ldrb	r4, [r4, r1]
    f62a:	eb00 0784 	add.w	r7, r0, r4, lsl #2
    f62e:	f104 0636 	add.w	r6, r4, #54	; 0x36
    f632:	f8d7 7244 	ldr.w	r7, [r7, #580]	; 0x244
    f636:	6017      	str	r7, [r2, #0]
    f638:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
    f63c:	e9d6 6700 	ldrd	r6, r7, [r6]
    f640:	e9c3 6700 	strd	r6, r7, [r3]
    f644:	4404      	add	r4, r0
    f646:	2201      	movs	r2, #1
    f648:	f894 3283 	ldrb.w	r3, [r4, #643]	; 0x283
    f64c:	702b      	strb	r3, [r5, #0]
    f64e:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
    f652:	fa02 f101 	lsl.w	r1, r2, r1
    f656:	ea23 0301 	bic.w	r3, r3, r1
    f65a:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
    f65e:	bcf0      	pop	{r4, r5, r6, r7}
    f660:	4770      	bx	lr
    f662:	bf00      	nop
    f664:	0003ad58 	.word	0x0003ad58

0000f668 <bsec_ChannelHub_isOutputValid>:
    f668:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
    f66c:	3901      	subs	r1, #1
    f66e:	b2c9      	uxtb	r1, r1
    f670:	4108      	asrs	r0, r1
    f672:	f000 0001 	and.w	r0, r0, #1
    f676:	4770      	bx	lr

0000f678 <bsec_ChannelHub_recalculateDownsampling>:
    f678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f67c:	4932      	ldr	r1, [pc, #200]	; (f748 <bsec_ChannelHub_recalculateDownsampling+0xd0>)
    f67e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; f754 <bsec_ChannelHub_recalculateDownsampling+0xdc>
    f682:	4a32      	ldr	r2, [pc, #200]	; (f74c <bsec_ChannelHub_recalculateDownsampling+0xd4>)
    f684:	f8df 90d0 	ldr.w	r9, [pc, #208]	; f758 <bsec_ChannelHub_recalculateDownsampling+0xe0>
    f688:	2500      	movs	r5, #0
    f68a:	f240 3717 	movw	r7, #791	; 0x317
    f68e:	f64f 7cff 	movw	ip, #65535	; 0xffff
    f692:	fa47 f305 	asr.w	r3, r7, r5
    f696:	07de      	lsls	r6, r3, #31
    f698:	d54e      	bpl.n	f738 <bsec_ChannelHub_recalculateDownsampling+0xc0>
    f69a:	4b2d      	ldr	r3, [pc, #180]	; (f750 <bsec_ChannelHub_recalculateDownsampling+0xd8>)
    f69c:	f813 e005 	ldrb.w	lr, [r3, r5]
    f6a0:	eb00 0e4e 	add.w	lr, r0, lr, lsl #1
    f6a4:	f8be 829a 	ldrh.w	r8, [lr, #666]	; 0x29a
    f6a8:	45e0      	cmp	r8, ip
    f6aa:	d045      	beq.n	f738 <bsec_ChannelHub_recalculateDownsampling+0xc0>
    f6ac:	2300      	movs	r3, #0
    f6ae:	461e      	mov	r6, r3
    f6b0:	ea4f 0b45 	mov.w	fp, r5, lsl #1
    f6b4:	fa47 f403 	asr.w	r4, r7, r3
    f6b8:	07e4      	lsls	r4, r4, #31
    f6ba:	d50f      	bpl.n	f6dc <bsec_ChannelHub_recalculateDownsampling+0x64>
    f6bc:	f93b 400a 	ldrsh.w	r4, [fp, sl]
    f6c0:	411c      	asrs	r4, r3
    f6c2:	07e4      	lsls	r4, r4, #31
    f6c4:	d50a      	bpl.n	f6dc <bsec_ChannelHub_recalculateDownsampling+0x64>
    f6c6:	4c22      	ldr	r4, [pc, #136]	; (f750 <bsec_ChannelHub_recalculateDownsampling+0xd8>)
    f6c8:	5ce4      	ldrb	r4, [r4, r3]
    f6ca:	eb00 0444 	add.w	r4, r0, r4, lsl #1
    f6ce:	f8b4 429a 	ldrh.w	r4, [r4, #666]	; 0x29a
    f6d2:	4564      	cmp	r4, ip
    f6d4:	d002      	beq.n	f6dc <bsec_ChannelHub_recalculateDownsampling+0x64>
    f6d6:	42a6      	cmp	r6, r4
    f6d8:	bf38      	it	cc
    f6da:	4626      	movcc	r6, r4
    f6dc:	3301      	adds	r3, #1
    f6de:	2b0a      	cmp	r3, #10
    f6e0:	d1e8      	bne.n	f6b4 <bsec_ChannelHub_recalculateDownsampling+0x3c>
    f6e2:	2300      	movs	r3, #0
    f6e4:	fa42 f403 	asr.w	r4, r2, r3
    f6e8:	07e4      	lsls	r4, r4, #31
    f6ea:	d50f      	bpl.n	f70c <bsec_ChannelHub_recalculateDownsampling+0x94>
    f6ec:	f991 4000 	ldrsb.w	r4, [r1]
    f6f0:	411c      	asrs	r4, r3
    f6f2:	07e4      	lsls	r4, r4, #31
    f6f4:	d50a      	bpl.n	f70c <bsec_ChannelHub_recalculateDownsampling+0x94>
    f6f6:	f813 4009 	ldrb.w	r4, [r3, r9]
    f6fa:	f204 1453 	addw	r4, r4, #339	; 0x153
    f6fe:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
    f702:	4564      	cmp	r4, ip
    f704:	d002      	beq.n	f70c <bsec_ChannelHub_recalculateDownsampling+0x94>
    f706:	42a6      	cmp	r6, r4
    f708:	bf38      	it	cc
    f70a:	4626      	movcc	r6, r4
    f70c:	3301      	adds	r3, #1
    f70e:	2b18      	cmp	r3, #24
    f710:	d1e8      	bne.n	f6e4 <bsec_ChannelHub_recalculateDownsampling+0x6c>
    f712:	b18e      	cbz	r6, f738 <bsec_ChannelHub_recalculateDownsampling+0xc0>
    f714:	fbb8 f4f6 	udiv	r4, r8, r6
    f718:	fb06 8814 	mls	r8, r6, r4, r8
    f71c:	fa1f f388 	uxth.w	r3, r8
    f720:	b2a4      	uxth	r4, r4
    f722:	b13b      	cbz	r3, f734 <bsec_ChannelHub_recalculateDownsampling+0xbc>
    f724:	f006 0801 	and.w	r8, r6, #1
    f728:	eb08 0656 	add.w	r6, r8, r6, lsr #1
    f72c:	42b3      	cmp	r3, r6
    f72e:	bfa4      	itt	ge
    f730:	3401      	addge	r4, #1
    f732:	b2a4      	uxthge	r4, r4
    f734:	f8ae 42d2 	strh.w	r4, [lr, #722]	; 0x2d2
    f738:	3501      	adds	r5, #1
    f73a:	2d0a      	cmp	r5, #10
    f73c:	f101 0101 	add.w	r1, r1, #1
    f740:	d1a7      	bne.n	f692 <bsec_ChannelHub_recalculateDownsampling+0x1a>
    f742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f746:	bf00      	nop
    f748:	0003acc0 	.word	0x0003acc0
    f74c:	00e0200f 	.word	0x00e0200f
    f750:	0003accc 	.word	0x0003accc
    f754:	0003acac 	.word	0x0003acac
    f758:	0003ad70 	.word	0x0003ad70

0000f75c <bsec_ChannelHub_resetSamplIntvls>:
    f75c:	b430      	push	{r4, r5}
    f75e:	f500 7327 	add.w	r3, r0, #668	; 0x29c
    f762:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
    f766:	2401      	movs	r4, #1
    f768:	2100      	movs	r1, #0
    f76a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f76e:	871c      	strh	r4, [r3, #56]	; 0x38
    f770:	f8a3 1044 	strh.w	r1, [r3, #68]	; 0x44
    f774:	f823 2b02 	strh.w	r2, [r3], #2
    f778:	429d      	cmp	r5, r3
    f77a:	d1f8      	bne.n	f76e <bsec_ChannelHub_resetSamplIntvls+0x12>
    f77c:	f8a0 22a8 	strh.w	r2, [r0, #680]	; 0x2a8
    f780:	f8a0 22aa 	strh.w	r2, [r0, #682]	; 0x2aa
    f784:	f8a0 22ac 	strh.w	r2, [r0, #684]	; 0x2ac
    f788:	f8a0 22ae 	strh.w	r2, [r0, #686]	; 0x2ae
    f78c:	f8a0 22b0 	strh.w	r2, [r0, #688]	; 0x2b0
    f790:	f8a0 22b2 	strh.w	r2, [r0, #690]	; 0x2b2
    f794:	f8a0 22b4 	strh.w	r2, [r0, #692]	; 0x2b4
    f798:	f8a0 22b6 	strh.w	r2, [r0, #694]	; 0x2b6
    f79c:	f200 23b6 	addw	r3, r0, #694	; 0x2b6
    f7a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f7a4:	f200 20d2 	addw	r0, r0, #722	; 0x2d2
    f7a8:	f823 2f02 	strh.w	r2, [r3, #2]!
    f7ac:	4283      	cmp	r3, r0
    f7ae:	d1fb      	bne.n	f7a8 <bsec_ChannelHub_resetSamplIntvls+0x4c>
    f7b0:	bc30      	pop	{r4, r5}
    f7b2:	4770      	bx	lr

0000f7b4 <bsec_ChannelHub_setChannelState>:
    f7b4:	b410      	push	{r4}
    f7b6:	1e4c      	subs	r4, r1, #1
    f7b8:	4611      	mov	r1, r2
    f7ba:	2c09      	cmp	r4, #9
    f7bc:	d82b      	bhi.n	f816 <bsec_ChannelHub_setChannelState+0x62>
    f7be:	e8df f004 	tbb	[pc, r4]
    f7c2:	110b      	.short	0x110b
    f7c4:	2a232a17 	.word	0x2a232a17
    f7c8:	1c052a2a 	.word	0x1c052a2a
    f7cc:	461a      	mov	r2, r3
    f7ce:	30c8      	adds	r0, #200	; 0xc8
    f7d0:	f85d 4b04 	ldr.w	r4, [sp], #4
    f7d4:	f7fd ba50 	b.w	cc78 <bsec_SensorHeatCompensator_setState>
    f7d8:	461a      	mov	r2, r3
    f7da:	3068      	adds	r0, #104	; 0x68
    f7dc:	f85d 4b04 	ldr.w	r4, [sp], #4
    f7e0:	f001 ba0c 	b.w	10bfc <bsec_b_GasHumidityBaselineTracker_setState>
    f7e4:	461a      	mov	r2, r3
    f7e6:	302c      	adds	r0, #44	; 0x2c
    f7e8:	f85d 4b04 	ldr.w	r4, [sp], #4
    f7ec:	f001 be64 	b.w	114b8 <bsec_IaqEstimator_setState>
    f7f0:	461a      	mov	r2, r3
    f7f2:	f85d 4b04 	ldr.w	r4, [sp], #4
    f7f6:	f001 baff 	b.w	10df8 <bsec_GasHumidityPreProcessor_setState>
    f7fa:	461a      	mov	r2, r3
    f7fc:	f500 70b0 	add.w	r0, r0, #352	; 0x160
    f800:	f85d 4b04 	ldr.w	r4, [sp], #4
    f804:	f001 bc22 	b.w	1104c <bsec_HumidityTemperatureCorrector_setState>
    f808:	461a      	mov	r2, r3
    f80a:	f500 7098 	add.w	r0, r0, #304	; 0x130
    f80e:	f85d 4b04 	ldr.w	r4, [sp], #4
    f812:	f002 b877 	b.w	11904 <bsec_SensorStatusTracker_setState>
    f816:	f06f 0063 	mvn.w	r0, #99	; 0x63
    f81a:	f85d 4b04 	ldr.w	r4, [sp], #4
    f81e:	4770      	bx	lr

0000f820 <bsec_ChannelHub_setInput>:
    f820:	b4f0      	push	{r4, r5, r6, r7}
    f822:	3901      	subs	r1, #1
    f824:	4c0d      	ldr	r4, [pc, #52]	; (f85c <bsec_ChannelHub_setInput+0x3c>)
    f826:	5c65      	ldrb	r5, [r4, r1]
    f828:	eb00 04c5 	add.w	r4, r0, r5, lsl #3
    f82c:	f504 74b8 	add.w	r4, r4, #368	; 0x170
    f830:	e9d4 6700 	ldrd	r6, r7, [r4]
    f834:	429f      	cmp	r7, r3
    f836:	bf08      	it	eq
    f838:	4296      	cmpeq	r6, r2
    f83a:	d00d      	beq.n	f858 <bsec_ChannelHub_setInput+0x38>
    f83c:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    f840:	ed85 0a89 	vstr	s0, [r5, #548]	; 0x224
    f844:	e9c4 2300 	strd	r2, r3, [r4]
    f848:	2201      	movs	r2, #1
    f84a:	f8d0 3280 	ldr.w	r3, [r0, #640]	; 0x280
    f84e:	fa02 f101 	lsl.w	r1, r2, r1
    f852:	430b      	orrs	r3, r1
    f854:	f8c0 3280 	str.w	r3, [r0, #640]	; 0x280
    f858:	bcf0      	pop	{r4, r5, r6, r7}
    f85a:	4770      	bx	lr
    f85c:	0003ad70 	.word	0x0003ad70

0000f860 <bsec_ChannelHub_updateChannelInterfaceDependency>:
    f860:	1e4b      	subs	r3, r1, #1
    f862:	b2da      	uxtb	r2, r3
    f864:	2a09      	cmp	r2, #9
    f866:	d900      	bls.n	f86a <bsec_ChannelHub_updateChannelInterfaceDependency+0xa>
    f868:	4770      	bx	lr
    f86a:	4a18      	ldr	r2, [pc, #96]	; (f8cc <bsec_ChannelHub_updateChannelInterfaceDependency+0x6c>)
    f86c:	4411      	add	r1, r2
    f86e:	f811 2c01 	ldrb.w	r2, [r1, #-1]
    f872:	eb00 0242 	add.w	r2, r0, r2, lsl #1
    f876:	f8b2 129a 	ldrh.w	r1, [r2, #666]	; 0x29a
    f87a:	2b09      	cmp	r3, #9
    f87c:	d8f4      	bhi.n	f868 <bsec_ChannelHub_updateChannelInterfaceDependency+0x8>
    f87e:	a201      	add	r2, pc, #4	; (adr r2, f884 <bsec_ChannelHub_updateChannelInterfaceDependency+0x24>)
    f880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    f884:	0000f8b5 	.word	0x0000f8b5
    f888:	0000f8bb 	.word	0x0000f8bb
    f88c:	0000f8c1 	.word	0x0000f8c1
    f890:	0000f869 	.word	0x0000f869
    f894:	0000f8ad 	.word	0x0000f8ad
    f898:	0000f869 	.word	0x0000f869
    f89c:	0000f869 	.word	0x0000f869
    f8a0:	0000f869 	.word	0x0000f869
    f8a4:	0000f869 	.word	0x0000f869
    f8a8:	0000f8c5 	.word	0x0000f8c5
    f8ac:	f500 7098 	add.w	r0, r0, #304	; 0x130
    f8b0:	f002 b866 	b.w	11980 <bsec_SensorStatusTracker_updateInterfaceDependency>
    f8b4:	3068      	adds	r0, #104	; 0x68
    f8b6:	f001 b915 	b.w	10ae4 <bsec_GasHumidityBaselineTracker_updateInterfaceDependency>
    f8ba:	302c      	adds	r0, #44	; 0x2c
    f8bc:	f001 be1c 	b.w	114f8 <bsec_IaqEstimator_updateInterfaceDependency>
    f8c0:	f001 baba 	b.w	10e38 <bsec_GasHumidityPreProcessor_updateInterfaceDependency>
    f8c4:	f500 70b0 	add.w	r0, r0, #352	; 0x160
    f8c8:	f001 bbda 	b.w	11080 <bsec_HumidityTemperatureCorrector_updateInterfaceDependency>
    f8cc:	0003accc 	.word	0x0003accc

0000f8d0 <bsec_ChannelHub_updateOutputSamplIntvl>:
    f8d0:	3901      	subs	r1, #1
    f8d2:	4b1f      	ldr	r3, [pc, #124]	; (f950 <bsec_ChannelHub_updateOutputSamplIntvl+0x80>)
    f8d4:	5c5b      	ldrb	r3, [r3, r1]
    f8d6:	f203 135b 	addw	r3, r3, #347	; 0x15b
    f8da:	b4f0      	push	{r4, r5, r6, r7}
    f8dc:	4e1d      	ldr	r6, [pc, #116]	; (f954 <bsec_ChannelHub_updateOutputSamplIntvl+0x84>)
    f8de:	4f1e      	ldr	r7, [pc, #120]	; (f958 <bsec_ChannelHub_updateOutputSamplIntvl+0x88>)
    f8e0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
    f8e4:	f240 3517 	movw	r5, #791	; 0x317
    f8e8:	2300      	movs	r3, #0
    f8ea:	fa45 f403 	asr.w	r4, r5, r3
    f8ee:	07e4      	lsls	r4, r4, #31
    f8f0:	d50d      	bpl.n	f90e <bsec_ChannelHub_updateOutputSamplIntvl+0x3e>
    f8f2:	f936 4011 	ldrsh.w	r4, [r6, r1, lsl #1]
    f8f6:	411c      	asrs	r4, r3
    f8f8:	07e4      	lsls	r4, r4, #31
    f8fa:	d508      	bpl.n	f90e <bsec_ChannelHub_updateOutputSamplIntvl+0x3e>
    f8fc:	5cfc      	ldrb	r4, [r7, r3]
    f8fe:	eb00 0444 	add.w	r4, r0, r4, lsl #1
    f902:	f8b4 c29a 	ldrh.w	ip, [r4, #666]	; 0x29a
    f906:	4594      	cmp	ip, r2
    f908:	bf88      	it	hi
    f90a:	f8a4 229a 	strhhi.w	r2, [r4, #666]	; 0x29a
    f90e:	3301      	adds	r3, #1
    f910:	2b0a      	cmp	r3, #10
    f912:	d1ea      	bne.n	f8ea <bsec_ChannelHub_updateOutputSamplIntvl+0x1a>
    f914:	4d11      	ldr	r5, [pc, #68]	; (f95c <bsec_ChannelHub_updateOutputSamplIntvl+0x8c>)
    f916:	4e12      	ldr	r6, [pc, #72]	; (f960 <bsec_ChannelHub_updateOutputSamplIntvl+0x90>)
    f918:	f8df c048 	ldr.w	ip, [pc, #72]	; f964 <bsec_ChannelHub_updateOutputSamplIntvl+0x94>
    f91c:	2300      	movs	r3, #0
    f91e:	fa45 f403 	asr.w	r4, r5, r3
    f922:	07e7      	lsls	r7, r4, #31
    f924:	d50e      	bpl.n	f944 <bsec_ChannelHub_updateOutputSamplIntvl+0x74>
    f926:	f856 4021 	ldr.w	r4, [r6, r1, lsl #2]
    f92a:	411c      	asrs	r4, r3
    f92c:	07e4      	lsls	r4, r4, #31
    f92e:	d509      	bpl.n	f944 <bsec_ChannelHub_updateOutputSamplIntvl+0x74>
    f930:	f81c 4003 	ldrb.w	r4, [ip, r3]
    f934:	eb00 0444 	add.w	r4, r0, r4, lsl #1
    f938:	f8b4 72a6 	ldrh.w	r7, [r4, #678]	; 0x2a6
    f93c:	4297      	cmp	r7, r2
    f93e:	bf88      	it	hi
    f940:	f8a4 22a6 	strhhi.w	r2, [r4, #678]	; 0x2a6
    f944:	3301      	adds	r3, #1
    f946:	2b18      	cmp	r3, #24
    f948:	d1e9      	bne.n	f91e <bsec_ChannelHub_updateOutputSamplIntvl+0x4e>
    f94a:	bcf0      	pop	{r4, r5, r6, r7}
    f94c:	4770      	bx	lr
    f94e:	bf00      	nop
    f950:	0003ad58 	.word	0x0003ad58
    f954:	0003acd8 	.word	0x0003acd8
    f958:	0003accc 	.word	0x0003accc
    f95c:	00e0200f 	.word	0x00e0200f
    f960:	0003ad04 	.word	0x0003ad04
    f964:	0003ad70 	.word	0x0003ad70

0000f968 <bsec_b_ChannelHub_updateChannelInterfaceDependency>:
    f968:	1e4b      	subs	r3, r1, #1
    f96a:	b2da      	uxtb	r2, r3
    f96c:	2a09      	cmp	r2, #9
    f96e:	d900      	bls.n	f972 <bsec_b_ChannelHub_updateChannelInterfaceDependency+0xa>
    f970:	4770      	bx	lr
    f972:	4a18      	ldr	r2, [pc, #96]	; (f9d4 <bsec_b_ChannelHub_updateChannelInterfaceDependency+0x6c>)
    f974:	4411      	add	r1, r2
    f976:	f811 2c01 	ldrb.w	r2, [r1, #-1]
    f97a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
    f97e:	f8b2 129a 	ldrh.w	r1, [r2, #666]	; 0x29a
    f982:	2b09      	cmp	r3, #9
    f984:	d8f4      	bhi.n	f970 <bsec_b_ChannelHub_updateChannelInterfaceDependency+0x8>
    f986:	a201      	add	r2, pc, #4	; (adr r2, f98c <bsec_b_ChannelHub_updateChannelInterfaceDependency+0x24>)
    f988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    f98c:	0000f9bd 	.word	0x0000f9bd
    f990:	0000f9c3 	.word	0x0000f9c3
    f994:	0000f9c9 	.word	0x0000f9c9
    f998:	0000f971 	.word	0x0000f971
    f99c:	0000f9b5 	.word	0x0000f9b5
    f9a0:	0000f971 	.word	0x0000f971
    f9a4:	0000f971 	.word	0x0000f971
    f9a8:	0000f971 	.word	0x0000f971
    f9ac:	0000f971 	.word	0x0000f971
    f9b0:	0000f9cd 	.word	0x0000f9cd
    f9b4:	f500 7098 	add.w	r0, r0, #304	; 0x130
    f9b8:	f001 bfe2 	b.w	11980 <bsec_SensorStatusTracker_updateInterfaceDependency>
    f9bc:	3068      	adds	r0, #104	; 0x68
    f9be:	f001 b891 	b.w	10ae4 <bsec_GasHumidityBaselineTracker_updateInterfaceDependency>
    f9c2:	302c      	adds	r0, #44	; 0x2c
    f9c4:	f001 bd98 	b.w	114f8 <bsec_IaqEstimator_updateInterfaceDependency>
    f9c8:	f001 ba36 	b.w	10e38 <bsec_GasHumidityPreProcessor_updateInterfaceDependency>
    f9cc:	f500 70b0 	add.w	r0, r0, #352	; 0x160
    f9d0:	f001 bb56 	b.w	11080 <bsec_HumidityTemperatureCorrector_updateInterfaceDependency>
    f9d4:	0003accc 	.word	0x0003accc

0000f9d8 <bsec_Entity_parseAndDeserialize>:
    f9d8:	b570      	push	{r4, r5, r6, lr}
    f9da:	460e      	mov	r6, r1
    f9dc:	6809      	ldr	r1, [r1, #0]
    f9de:	4603      	mov	r3, r0
    f9e0:	f100 050b 	add.w	r5, r0, #11
    f9e4:	b084      	sub	sp, #16
    f9e6:	1e48      	subs	r0, r1, #1
    f9e8:	440d      	add	r5, r1
    f9ea:	4403      	add	r3, r0
    f9ec:	a901      	add	r1, sp, #4
    f9ee:	f813 4f01 	ldrb.w	r4, [r3, #1]!
    f9f2:	f801 4b01 	strb.w	r4, [r1], #1
    f9f6:	42ab      	cmp	r3, r5
    f9f8:	d1f9      	bne.n	f9ee <bsec_Entity_parseAndDeserialize+0x16>
    f9fa:	a901      	add	r1, sp, #4
    f9fc:	4610      	mov	r0, r2
    f9fe:	220c      	movs	r2, #12
    fa00:	f029 fadf 	bl	38fc2 <memcpy>
    fa04:	6833      	ldr	r3, [r6, #0]
    fa06:	330c      	adds	r3, #12
    fa08:	6033      	str	r3, [r6, #0]
    fa0a:	b004      	add	sp, #16
    fa0c:	bd70      	pop	{r4, r5, r6, pc}
    fa0e:	bf00      	nop

0000fa10 <bsec_Entity_serializeAndAdd>:
    fa10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fa14:	681c      	ldr	r4, [r3, #0]
    fa16:	340c      	adds	r4, #12
    fa18:	4294      	cmp	r4, r2
    fa1a:	b084      	sub	sp, #16
    fa1c:	d904      	bls.n	fa28 <bsec_Entity_serializeAndAdd+0x18>
    fa1e:	3201      	adds	r2, #1
    fa20:	601a      	str	r2, [r3, #0]
    fa22:	b004      	add	sp, #16
    fa24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fa28:	220c      	movs	r2, #12
    fa2a:	4688      	mov	r8, r1
    fa2c:	4601      	mov	r1, r0
    fa2e:	a801      	add	r0, sp, #4
    fa30:	461f      	mov	r7, r3
    fa32:	f029 fac6 	bl	38fc2 <memcpy>
    fa36:	a801      	add	r0, sp, #4
    fa38:	2200      	movs	r2, #0
    fa3a:	eb08 0502 	add.w	r5, r8, r2
    fa3e:	683c      	ldr	r4, [r7, #0]
    fa40:	f810 6b01 	ldrb.w	r6, [r0], #1
    fa44:	552e      	strb	r6, [r5, r4]
    fa46:	3201      	adds	r2, #1
    fa48:	2a0c      	cmp	r2, #12
    fa4a:	d1f6      	bne.n	fa3a <bsec_Entity_serializeAndAdd+0x2a>
    fa4c:	683b      	ldr	r3, [r7, #0]
    fa4e:	330c      	adds	r3, #12
    fa50:	603b      	str	r3, [r7, #0]
    fa52:	b004      	add	sp, #16
    fa54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000fa58 <bsec_b_Entity_parseAndDeserialize>:
    fa58:	b530      	push	{r4, r5, lr}
    fa5a:	460d      	mov	r5, r1
    fa5c:	6809      	ldr	r1, [r1, #0]
    fa5e:	b083      	sub	sp, #12
    fa60:	f10d 33ff 	add.w	r3, sp, #4294967295	; 0xffffffff
    fa64:	4408      	add	r0, r1
    fa66:	f10d 0407 	add.w	r4, sp, #7
    fa6a:	f810 1b01 	ldrb.w	r1, [r0], #1
    fa6e:	f803 1f01 	strb.w	r1, [r3, #1]!
    fa72:	42a3      	cmp	r3, r4
    fa74:	d1f9      	bne.n	fa6a <bsec_b_Entity_parseAndDeserialize+0x12>
    fa76:	4610      	mov	r0, r2
    fa78:	4669      	mov	r1, sp
    fa7a:	2208      	movs	r2, #8
    fa7c:	f029 faa1 	bl	38fc2 <memcpy>
    fa80:	682b      	ldr	r3, [r5, #0]
    fa82:	3308      	adds	r3, #8
    fa84:	602b      	str	r3, [r5, #0]
    fa86:	b003      	add	sp, #12
    fa88:	bd30      	pop	{r4, r5, pc}
    fa8a:	bf00      	nop

0000fa8c <bsec_b_Entity_serializeAndAdd>:
    fa8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    fa8e:	681d      	ldr	r5, [r3, #0]
    fa90:	3508      	adds	r5, #8
    fa92:	4295      	cmp	r5, r2
    fa94:	b085      	sub	sp, #20
    fa96:	d903      	bls.n	faa0 <bsec_b_Entity_serializeAndAdd+0x14>
    fa98:	3201      	adds	r2, #1
    fa9a:	601a      	str	r2, [r3, #0]
    fa9c:	b005      	add	sp, #20
    fa9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    faa0:	2208      	movs	r2, #8
    faa2:	460f      	mov	r7, r1
    faa4:	4601      	mov	r1, r0
    faa6:	4668      	mov	r0, sp
    faa8:	461c      	mov	r4, r3
    faaa:	f029 fa8a 	bl	38fc2 <memcpy>
    faae:	2208      	movs	r2, #8
    fab0:	eb0d 0002 	add.w	r0, sp, r2
    fab4:	4669      	mov	r1, sp
    fab6:	f029 fa84 	bl	38fc2 <memcpy>
    faba:	f10d 0307 	add.w	r3, sp, #7
    fabe:	2200      	movs	r2, #0
    fac0:	18bd      	adds	r5, r7, r2
    fac2:	6820      	ldr	r0, [r4, #0]
    fac4:	f813 6f01 	ldrb.w	r6, [r3, #1]!
    fac8:	542e      	strb	r6, [r5, r0]
    faca:	3201      	adds	r2, #1
    facc:	2a08      	cmp	r2, #8
    face:	d1f7      	bne.n	fac0 <bsec_b_Entity_serializeAndAdd+0x34>
    fad0:	6823      	ldr	r3, [r4, #0]
    fad2:	3308      	adds	r3, #8
    fad4:	6023      	str	r3, [r4, #0]
    fad6:	b005      	add	sp, #20
    fad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fada:	bf00      	nop

0000fadc <bsec_c_Entity_parseAndDeserialize>:
    fadc:	b510      	push	{r4, lr}
    fade:	680b      	ldr	r3, [r1, #0]
    fae0:	18c2      	adds	r2, r0, r3
    fae2:	b082      	sub	sp, #8
    fae4:	460c      	mov	r4, r1
    fae6:	7852      	ldrb	r2, [r2, #1]
    fae8:	5cc3      	ldrb	r3, [r0, r3]
    faea:	f88d 2005 	strb.w	r2, [sp, #5]
    faee:	a901      	add	r1, sp, #4
    faf0:	2202      	movs	r2, #2
    faf2:	f10d 0006 	add.w	r0, sp, #6
    faf6:	f88d 3004 	strb.w	r3, [sp, #4]
    fafa:	f029 fa62 	bl	38fc2 <memcpy>
    fafe:	6823      	ldr	r3, [r4, #0]
    fb00:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    fb04:	3302      	adds	r3, #2
    fb06:	6023      	str	r3, [r4, #0]
    fb08:	b002      	add	sp, #8
    fb0a:	bd10      	pop	{r4, pc}

0000fb0c <bsec_c_Entity_serializeAndAdd>:
    fb0c:	b530      	push	{r4, r5, lr}
    fb0e:	681c      	ldr	r4, [r3, #0]
    fb10:	b085      	sub	sp, #20
    fb12:	3402      	adds	r4, #2
    fb14:	4294      	cmp	r4, r2
    fb16:	f8ad 0006 	strh.w	r0, [sp, #6]
    fb1a:	d903      	bls.n	fb24 <bsec_c_Entity_serializeAndAdd+0x18>
    fb1c:	3201      	adds	r2, #1
    fb1e:	601a      	str	r2, [r3, #0]
    fb20:	b005      	add	sp, #20
    fb22:	bd30      	pop	{r4, r5, pc}
    fb24:	461c      	mov	r4, r3
    fb26:	460d      	mov	r5, r1
    fb28:	2202      	movs	r2, #2
    fb2a:	f10d 0106 	add.w	r1, sp, #6
    fb2e:	a803      	add	r0, sp, #12
    fb30:	f029 fa47 	bl	38fc2 <memcpy>
    fb34:	6823      	ldr	r3, [r4, #0]
    fb36:	f89d 200c 	ldrb.w	r2, [sp, #12]
    fb3a:	54ea      	strb	r2, [r5, r3]
    fb3c:	6821      	ldr	r1, [r4, #0]
    fb3e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    fb42:	4429      	add	r1, r5
    fb44:	704b      	strb	r3, [r1, #1]
    fb46:	6823      	ldr	r3, [r4, #0]
    fb48:	3302      	adds	r3, #2
    fb4a:	6023      	str	r3, [r4, #0]
    fb4c:	b005      	add	sp, #20
    fb4e:	bd30      	pop	{r4, r5, pc}

0000fb50 <bsec_d_Entity_parseAndDeserialize>:
    fb50:	b530      	push	{r4, r5, lr}
    fb52:	460c      	mov	r4, r1
    fb54:	b083      	sub	sp, #12
    fb56:	6823      	ldr	r3, [r4, #0]
    fb58:	18c5      	adds	r5, r0, r3
    fb5a:	4601      	mov	r1, r0
    fb5c:	4610      	mov	r0, r2
    fb5e:	786a      	ldrb	r2, [r5, #1]
    fb60:	5ccb      	ldrb	r3, [r1, r3]
    fb62:	f88d 2005 	strb.w	r2, [sp, #5]
    fb66:	a901      	add	r1, sp, #4
    fb68:	2202      	movs	r2, #2
    fb6a:	f88d 3004 	strb.w	r3, [sp, #4]
    fb6e:	f029 fa28 	bl	38fc2 <memcpy>
    fb72:	6823      	ldr	r3, [r4, #0]
    fb74:	3302      	adds	r3, #2
    fb76:	6023      	str	r3, [r4, #0]
    fb78:	b003      	add	sp, #12
    fb7a:	bd30      	pop	{r4, r5, pc}

0000fb7c <bsec_d_Entity_serializeAndAdd>:
    fb7c:	b530      	push	{r4, r5, lr}
    fb7e:	681c      	ldr	r4, [r3, #0]
    fb80:	3402      	adds	r4, #2
    fb82:	4294      	cmp	r4, r2
    fb84:	b083      	sub	sp, #12
    fb86:	d81a      	bhi.n	fbbe <bsec_d_Entity_serializeAndAdd+0x42>
    fb88:	461c      	mov	r4, r3
    fb8a:	7802      	ldrb	r2, [r0, #0]
    fb8c:	7843      	ldrb	r3, [r0, #1]
    fb8e:	f88d 2004 	strb.w	r2, [sp, #4]
    fb92:	460d      	mov	r5, r1
    fb94:	2202      	movs	r2, #2
    fb96:	a901      	add	r1, sp, #4
    fb98:	4668      	mov	r0, sp
    fb9a:	f88d 3005 	strb.w	r3, [sp, #5]
    fb9e:	f029 fa10 	bl	38fc2 <memcpy>
    fba2:	6823      	ldr	r3, [r4, #0]
    fba4:	f89d 2000 	ldrb.w	r2, [sp]
    fba8:	54ea      	strb	r2, [r5, r3]
    fbaa:	6821      	ldr	r1, [r4, #0]
    fbac:	f89d 3001 	ldrb.w	r3, [sp, #1]
    fbb0:	440d      	add	r5, r1
    fbb2:	706b      	strb	r3, [r5, #1]
    fbb4:	6823      	ldr	r3, [r4, #0]
    fbb6:	3302      	adds	r3, #2
    fbb8:	6023      	str	r3, [r4, #0]
    fbba:	b003      	add	sp, #12
    fbbc:	bd30      	pop	{r4, r5, pc}
    fbbe:	3201      	adds	r2, #1
    fbc0:	601a      	str	r2, [r3, #0]
    fbc2:	b003      	add	sp, #12
    fbc4:	bd30      	pop	{r4, r5, pc}
    fbc6:	bf00      	nop

0000fbc8 <bsec_e_Entity_parseAndDeserialize>:
    fbc8:	b510      	push	{r4, lr}
    fbca:	680b      	ldr	r3, [r1, #0]
    fbcc:	b082      	sub	sp, #8
    fbce:	460c      	mov	r4, r1
    fbd0:	1d01      	adds	r1, r0, #4
    fbd2:	4419      	add	r1, r3
    fbd4:	4418      	add	r0, r3
    fbd6:	ab01      	add	r3, sp, #4
    fbd8:	f810 2b01 	ldrb.w	r2, [r0], #1
    fbdc:	f803 2b01 	strb.w	r2, [r3], #1
    fbe0:	4288      	cmp	r0, r1
    fbe2:	d1f9      	bne.n	fbd8 <bsec_e_Entity_parseAndDeserialize+0x10>
    fbe4:	a901      	add	r1, sp, #4
    fbe6:	2204      	movs	r2, #4
    fbe8:	4668      	mov	r0, sp
    fbea:	f029 f9ea 	bl	38fc2 <memcpy>
    fbee:	6823      	ldr	r3, [r4, #0]
    fbf0:	ed9d 0a00 	vldr	s0, [sp]
    fbf4:	3304      	adds	r3, #4
    fbf6:	6023      	str	r3, [r4, #0]
    fbf8:	b002      	add	sp, #8
    fbfa:	bd10      	pop	{r4, pc}

0000fbfc <bsec_e_Entity_serializeAndAdd>:
    fbfc:	b570      	push	{r4, r5, r6, lr}
    fbfe:	6813      	ldr	r3, [r2, #0]
    fc00:	3304      	adds	r3, #4
    fc02:	b084      	sub	sp, #16
    fc04:	428b      	cmp	r3, r1
    fc06:	ed8d 0a01 	vstr	s0, [sp, #4]
    fc0a:	d903      	bls.n	fc14 <bsec_e_Entity_serializeAndAdd+0x18>
    fc0c:	3101      	adds	r1, #1
    fc0e:	6011      	str	r1, [r2, #0]
    fc10:	b004      	add	sp, #16
    fc12:	bd70      	pop	{r4, r5, r6, pc}
    fc14:	4614      	mov	r4, r2
    fc16:	2204      	movs	r2, #4
    fc18:	eb0d 0102 	add.w	r1, sp, r2
    fc1c:	4605      	mov	r5, r0
    fc1e:	a803      	add	r0, sp, #12
    fc20:	f029 f9cf 	bl	38fc2 <memcpy>
    fc24:	aa03      	add	r2, sp, #12
    fc26:	2300      	movs	r3, #0
    fc28:	18e8      	adds	r0, r5, r3
    fc2a:	6821      	ldr	r1, [r4, #0]
    fc2c:	f812 6b01 	ldrb.w	r6, [r2], #1
    fc30:	5446      	strb	r6, [r0, r1]
    fc32:	3301      	adds	r3, #1
    fc34:	2b04      	cmp	r3, #4
    fc36:	d1f7      	bne.n	fc28 <bsec_e_Entity_serializeAndAdd+0x2c>
    fc38:	6823      	ldr	r3, [r4, #0]
    fc3a:	3304      	adds	r3, #4
    fc3c:	6023      	str	r3, [r4, #0]
    fc3e:	b004      	add	sp, #16
    fc40:	bd70      	pop	{r4, r5, r6, pc}
    fc42:	bf00      	nop

0000fc44 <bsec_f_Entity_parseAndDeserialize>:
    fc44:	b510      	push	{r4, lr}
    fc46:	460c      	mov	r4, r1
    fc48:	b082      	sub	sp, #8
    fc4a:	6823      	ldr	r3, [r4, #0]
    fc4c:	a902      	add	r1, sp, #8
    fc4e:	5cc3      	ldrb	r3, [r0, r3]
    fc50:	f801 3d01 	strb.w	r3, [r1, #-1]!
    fc54:	2201      	movs	r2, #1
    fc56:	f10d 0006 	add.w	r0, sp, #6
    fc5a:	f029 f9b2 	bl	38fc2 <memcpy>
    fc5e:	6823      	ldr	r3, [r4, #0]
    fc60:	f89d 0006 	ldrb.w	r0, [sp, #6]
    fc64:	3301      	adds	r3, #1
    fc66:	6023      	str	r3, [r4, #0]
    fc68:	b002      	add	sp, #8
    fc6a:	bd10      	pop	{r4, pc}

0000fc6c <bsec_f_Entity_serializeAndAdd>:
    fc6c:	b530      	push	{r4, r5, lr}
    fc6e:	681c      	ldr	r4, [r3, #0]
    fc70:	b085      	sub	sp, #20
    fc72:	3401      	adds	r4, #1
    fc74:	4294      	cmp	r4, r2
    fc76:	f88d 0007 	strb.w	r0, [sp, #7]
    fc7a:	d903      	bls.n	fc84 <bsec_f_Entity_serializeAndAdd+0x18>
    fc7c:	3201      	adds	r2, #1
    fc7e:	601a      	str	r2, [r3, #0]
    fc80:	b005      	add	sp, #20
    fc82:	bd30      	pop	{r4, r5, pc}
    fc84:	461c      	mov	r4, r3
    fc86:	460d      	mov	r5, r1
    fc88:	2201      	movs	r2, #1
    fc8a:	f10d 0107 	add.w	r1, sp, #7
    fc8e:	f10d 000f 	add.w	r0, sp, #15
    fc92:	f029 f996 	bl	38fc2 <memcpy>
    fc96:	6823      	ldr	r3, [r4, #0]
    fc98:	f89d 200f 	ldrb.w	r2, [sp, #15]
    fc9c:	54ea      	strb	r2, [r5, r3]
    fc9e:	6823      	ldr	r3, [r4, #0]
    fca0:	3301      	adds	r3, #1
    fca2:	6023      	str	r3, [r4, #0]
    fca4:	b005      	add	sp, #20
    fca6:	bd30      	pop	{r4, r5, pc}

0000fca8 <bsec_g_Entity_parseAndDeserialize>:
    fca8:	b510      	push	{r4, lr}
    fcaa:	680a      	ldr	r2, [r1, #0]
    fcac:	b084      	sub	sp, #16
    fcae:	460c      	mov	r4, r1
    fcb0:	f10d 0307 	add.w	r3, sp, #7
    fcb4:	f10d 010f 	add.w	r1, sp, #15
    fcb8:	4410      	add	r0, r2
    fcba:	f810 2b01 	ldrb.w	r2, [r0], #1
    fcbe:	f803 2f01 	strb.w	r2, [r3, #1]!
    fcc2:	428b      	cmp	r3, r1
    fcc4:	d1f9      	bne.n	fcba <bsec_g_Entity_parseAndDeserialize+0x12>
    fcc6:	2208      	movs	r2, #8
    fcc8:	eb0d 0102 	add.w	r1, sp, r2
    fccc:	4668      	mov	r0, sp
    fcce:	f029 f978 	bl	38fc2 <memcpy>
    fcd2:	6823      	ldr	r3, [r4, #0]
    fcd4:	e9dd 0100 	ldrd	r0, r1, [sp]
    fcd8:	3308      	adds	r3, #8
    fcda:	6023      	str	r3, [r4, #0]
    fcdc:	b004      	add	sp, #16
    fcde:	bd10      	pop	{r4, pc}

0000fce0 <bsec_g_Entity_serializeAndAdd>:
    fce0:	b5f0      	push	{r4, r5, r6, r7, lr}
    fce2:	b085      	sub	sp, #20
    fce4:	e9cd 0100 	strd	r0, r1, [sp]
    fce8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    fcea:	6825      	ldr	r5, [r4, #0]
    fcec:	3508      	adds	r5, #8
    fcee:	429d      	cmp	r5, r3
    fcf0:	d903      	bls.n	fcfa <bsec_g_Entity_serializeAndAdd+0x1a>
    fcf2:	3301      	adds	r3, #1
    fcf4:	6023      	str	r3, [r4, #0]
    fcf6:	b005      	add	sp, #20
    fcf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fcfa:	4617      	mov	r7, r2
    fcfc:	2208      	movs	r2, #8
    fcfe:	4669      	mov	r1, sp
    fd00:	eb0d 0002 	add.w	r0, sp, r2
    fd04:	f029 f95d 	bl	38fc2 <memcpy>
    fd08:	f10d 0107 	add.w	r1, sp, #7
    fd0c:	2300      	movs	r3, #0
    fd0e:	18fd      	adds	r5, r7, r3
    fd10:	6820      	ldr	r0, [r4, #0]
    fd12:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    fd16:	542e      	strb	r6, [r5, r0]
    fd18:	3301      	adds	r3, #1
    fd1a:	2b08      	cmp	r3, #8
    fd1c:	d1f7      	bne.n	fd0e <bsec_g_Entity_serializeAndAdd+0x2e>
    fd1e:	6823      	ldr	r3, [r4, #0]
    fd20:	3308      	adds	r3, #8
    fd22:	6023      	str	r3, [r4, #0]
    fd24:	b005      	add	sp, #20
    fd26:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000fd28 <bsec_h_Entity_parseAndDeserialize>:
    fd28:	680b      	ldr	r3, [r1, #0]
    fd2a:	5cc0      	ldrb	r0, [r0, r3]
    fd2c:	3301      	adds	r3, #1
    fd2e:	3000      	adds	r0, #0
    fd30:	600b      	str	r3, [r1, #0]
    fd32:	bf18      	it	ne
    fd34:	2001      	movne	r0, #1
    fd36:	4770      	bx	lr

0000fd38 <bsec_h_Entity_serializeAndAdd>:
    fd38:	b430      	push	{r4, r5}
    fd3a:	681c      	ldr	r4, [r3, #0]
    fd3c:	1c65      	adds	r5, r4, #1
    fd3e:	4295      	cmp	r5, r2
    fd40:	bf9c      	itt	ls
    fd42:	5508      	strbls	r0, [r1, r4]
    fd44:	681a      	ldrls	r2, [r3, #0]
    fd46:	3201      	adds	r2, #1
    fd48:	601a      	str	r2, [r3, #0]
    fd4a:	bc30      	pop	{r4, r5}
    fd4c:	4770      	bx	lr
    fd4e:	bf00      	nop

0000fd50 <bsec_i_Entity_parseAndDeserialize>:
    fd50:	b530      	push	{r4, r5, lr}
    fd52:	680b      	ldr	r3, [r1, #0]
    fd54:	b087      	sub	sp, #28
    fd56:	3b01      	subs	r3, #1
    fd58:	4418      	add	r0, r3
    fd5a:	460d      	mov	r5, r1
    fd5c:	f10d 33ff 	add.w	r3, sp, #4294967295	; 0xffffffff
    fd60:	f10d 0417 	add.w	r4, sp, #23
    fd64:	f810 1f01 	ldrb.w	r1, [r0, #1]!
    fd68:	f803 1f01 	strb.w	r1, [r3, #1]!
    fd6c:	42a3      	cmp	r3, r4
    fd6e:	d1f9      	bne.n	fd64 <bsec_i_Entity_parseAndDeserialize+0x14>
    fd70:	4610      	mov	r0, r2
    fd72:	4669      	mov	r1, sp
    fd74:	2218      	movs	r2, #24
    fd76:	f029 f924 	bl	38fc2 <memcpy>
    fd7a:	682b      	ldr	r3, [r5, #0]
    fd7c:	3318      	adds	r3, #24
    fd7e:	602b      	str	r3, [r5, #0]
    fd80:	b007      	add	sp, #28
    fd82:	bd30      	pop	{r4, r5, pc}

0000fd84 <bsec_i_Entity_serializeAndAdd>:
    fd84:	b5f0      	push	{r4, r5, r6, r7, lr}
    fd86:	681c      	ldr	r4, [r3, #0]
    fd88:	3410      	adds	r4, #16
    fd8a:	4294      	cmp	r4, r2
    fd8c:	b089      	sub	sp, #36	; 0x24
    fd8e:	d903      	bls.n	fd98 <bsec_i_Entity_serializeAndAdd+0x14>
    fd90:	3201      	adds	r2, #1
    fd92:	601a      	str	r2, [r3, #0]
    fd94:	b009      	add	sp, #36	; 0x24
    fd96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fd98:	2210      	movs	r2, #16
    fd9a:	eb0d 0702 	add.w	r7, sp, r2
    fd9e:	460e      	mov	r6, r1
    fda0:	4601      	mov	r1, r0
    fda2:	4668      	mov	r0, sp
    fda4:	461d      	mov	r5, r3
    fda6:	f029 f90c 	bl	38fc2 <memcpy>
    fdaa:	2210      	movs	r2, #16
    fdac:	4669      	mov	r1, sp
    fdae:	4638      	mov	r0, r7
    fdb0:	f029 f907 	bl	38fc2 <memcpy>
    fdb4:	ab08      	add	r3, sp, #32
    fdb6:	463a      	mov	r2, r7
    fdb8:	682c      	ldr	r4, [r5, #0]
    fdba:	1bd0      	subs	r0, r2, r7
    fdbc:	4420      	add	r0, r4
    fdbe:	f812 4b01 	ldrb.w	r4, [r2], #1
    fdc2:	5434      	strb	r4, [r6, r0]
    fdc4:	429a      	cmp	r2, r3
    fdc6:	d1f7      	bne.n	fdb8 <bsec_i_Entity_serializeAndAdd+0x34>
    fdc8:	682b      	ldr	r3, [r5, #0]
    fdca:	3310      	adds	r3, #16
    fdcc:	602b      	str	r3, [r5, #0]
    fdce:	b009      	add	sp, #36	; 0x24
    fdd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fdd2:	bf00      	nop

0000fdd4 <bsec_j_Entity_parseAndDeserialize>:
    fdd4:	b530      	push	{r4, r5, lr}
    fdd6:	680b      	ldr	r3, [r1, #0]
    fdd8:	b0ab      	sub	sp, #172	; 0xac
    fdda:	3b01      	subs	r3, #1
    fddc:	4418      	add	r0, r3
    fdde:	460d      	mov	r5, r1
    fde0:	f10d 33ff 	add.w	r3, sp, #4294967295	; 0xffffffff
    fde4:	f10d 04a7 	add.w	r4, sp, #167	; 0xa7
    fde8:	f810 1f01 	ldrb.w	r1, [r0, #1]!
    fdec:	f803 1f01 	strb.w	r1, [r3, #1]!
    fdf0:	42a3      	cmp	r3, r4
    fdf2:	d1f9      	bne.n	fde8 <bsec_j_Entity_parseAndDeserialize+0x14>
    fdf4:	4610      	mov	r0, r2
    fdf6:	4669      	mov	r1, sp
    fdf8:	22a8      	movs	r2, #168	; 0xa8
    fdfa:	f029 f8e2 	bl	38fc2 <memcpy>
    fdfe:	682b      	ldr	r3, [r5, #0]
    fe00:	33a8      	adds	r3, #168	; 0xa8
    fe02:	602b      	str	r3, [r5, #0]
    fe04:	b02b      	add	sp, #172	; 0xac
    fe06:	bd30      	pop	{r4, r5, pc}

0000fe08 <bsec_j_Entity_serializeAndAdd>:
    fe08:	b5f0      	push	{r4, r5, r6, r7, lr}
    fe0a:	681d      	ldr	r5, [r3, #0]
    fe0c:	3504      	adds	r5, #4
    fe0e:	4295      	cmp	r5, r2
    fe10:	b083      	sub	sp, #12
    fe12:	d81d      	bhi.n	fe50 <bsec_j_Entity_serializeAndAdd+0x48>
    fe14:	4602      	mov	r2, r0
    fe16:	460f      	mov	r7, r1
    fe18:	461c      	mov	r4, r3
    fe1a:	8811      	ldrh	r1, [r2, #0]
    fe1c:	8853      	ldrh	r3, [r2, #2]
    fe1e:	f8ad 1004 	strh.w	r1, [sp, #4]
    fe22:	2204      	movs	r2, #4
    fe24:	eb0d 0102 	add.w	r1, sp, r2
    fe28:	4668      	mov	r0, sp
    fe2a:	f8ad 3006 	strh.w	r3, [sp, #6]
    fe2e:	f029 f8c8 	bl	38fc2 <memcpy>
    fe32:	466b      	mov	r3, sp
    fe34:	2200      	movs	r2, #0
    fe36:	18bd      	adds	r5, r7, r2
    fe38:	6820      	ldr	r0, [r4, #0]
    fe3a:	f813 6b01 	ldrb.w	r6, [r3], #1
    fe3e:	542e      	strb	r6, [r5, r0]
    fe40:	3201      	adds	r2, #1
    fe42:	2a04      	cmp	r2, #4
    fe44:	d1f7      	bne.n	fe36 <bsec_j_Entity_serializeAndAdd+0x2e>
    fe46:	6823      	ldr	r3, [r4, #0]
    fe48:	3304      	adds	r3, #4
    fe4a:	6023      	str	r3, [r4, #0]
    fe4c:	b003      	add	sp, #12
    fe4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fe50:	3201      	adds	r2, #1
    fe52:	601a      	str	r2, [r3, #0]
    fe54:	b003      	add	sp, #12
    fe56:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000fe58 <bsec_k_Entity_parseAndDeserialize>:
    fe58:	b530      	push	{r4, r5, lr}
    fe5a:	680b      	ldr	r3, [r1, #0]
    fe5c:	b089      	sub	sp, #36	; 0x24
    fe5e:	3b01      	subs	r3, #1
    fe60:	4418      	add	r0, r3
    fe62:	460d      	mov	r5, r1
    fe64:	f10d 0303 	add.w	r3, sp, #3
    fe68:	f10d 041f 	add.w	r4, sp, #31
    fe6c:	f810 1f01 	ldrb.w	r1, [r0, #1]!
    fe70:	f803 1f01 	strb.w	r1, [r3, #1]!
    fe74:	42a3      	cmp	r3, r4
    fe76:	d1f9      	bne.n	fe6c <bsec_k_Entity_parseAndDeserialize+0x14>
    fe78:	4610      	mov	r0, r2
    fe7a:	a901      	add	r1, sp, #4
    fe7c:	221c      	movs	r2, #28
    fe7e:	f029 f8a0 	bl	38fc2 <memcpy>
    fe82:	682b      	ldr	r3, [r5, #0]
    fe84:	331c      	adds	r3, #28
    fe86:	602b      	str	r3, [r5, #0]
    fe88:	b009      	add	sp, #36	; 0x24
    fe8a:	bd30      	pop	{r4, r5, pc}

0000fe8c <bsec_k_Entity_serializeAndAdd>:
    fe8c:	b530      	push	{r4, r5, lr}
    fe8e:	681c      	ldr	r4, [r3, #0]
    fe90:	3402      	adds	r4, #2
    fe92:	4294      	cmp	r4, r2
    fe94:	b083      	sub	sp, #12
    fe96:	d81a      	bhi.n	fece <bsec_k_Entity_serializeAndAdd+0x42>
    fe98:	461c      	mov	r4, r3
    fe9a:	7802      	ldrb	r2, [r0, #0]
    fe9c:	7843      	ldrb	r3, [r0, #1]
    fe9e:	f88d 2004 	strb.w	r2, [sp, #4]
    fea2:	460d      	mov	r5, r1
    fea4:	2202      	movs	r2, #2
    fea6:	a901      	add	r1, sp, #4
    fea8:	4668      	mov	r0, sp
    feaa:	f88d 3005 	strb.w	r3, [sp, #5]
    feae:	f029 f888 	bl	38fc2 <memcpy>
    feb2:	6823      	ldr	r3, [r4, #0]
    feb4:	f89d 2000 	ldrb.w	r2, [sp]
    feb8:	54ea      	strb	r2, [r5, r3]
    feba:	6821      	ldr	r1, [r4, #0]
    febc:	f89d 3001 	ldrb.w	r3, [sp, #1]
    fec0:	440d      	add	r5, r1
    fec2:	706b      	strb	r3, [r5, #1]
    fec4:	6823      	ldr	r3, [r4, #0]
    fec6:	3302      	adds	r3, #2
    fec8:	6023      	str	r3, [r4, #0]
    feca:	b003      	add	sp, #12
    fecc:	bd30      	pop	{r4, r5, pc}
    fece:	3201      	adds	r2, #1
    fed0:	601a      	str	r2, [r3, #0]
    fed2:	b003      	add	sp, #12
    fed4:	bd30      	pop	{r4, r5, pc}
    fed6:	bf00      	nop

0000fed8 <bsec_l_Entity_parseAndDeserialize>:
    fed8:	b530      	push	{r4, r5, lr}
    feda:	680b      	ldr	r3, [r1, #0]
    fedc:	b085      	sub	sp, #20
    fede:	3b01      	subs	r3, #1
    fee0:	4418      	add	r0, r3
    fee2:	460d      	mov	r5, r1
    fee4:	f10d 33ff 	add.w	r3, sp, #4294967295	; 0xffffffff
    fee8:	f10d 040f 	add.w	r4, sp, #15
    feec:	f810 1f01 	ldrb.w	r1, [r0, #1]!
    fef0:	f803 1f01 	strb.w	r1, [r3, #1]!
    fef4:	42a3      	cmp	r3, r4
    fef6:	d1f9      	bne.n	feec <bsec_l_Entity_parseAndDeserialize+0x14>
    fef8:	4610      	mov	r0, r2
    fefa:	4669      	mov	r1, sp
    fefc:	2210      	movs	r2, #16
    fefe:	f029 f860 	bl	38fc2 <memcpy>
    ff02:	682b      	ldr	r3, [r5, #0]
    ff04:	3310      	adds	r3, #16
    ff06:	602b      	str	r3, [r5, #0]
    ff08:	b005      	add	sp, #20
    ff0a:	bd30      	pop	{r4, r5, pc}

0000ff0c <bsec_l_Entity_serializeAndAdd>:
    ff0c:	b530      	push	{r4, r5, lr}
    ff0e:	681c      	ldr	r4, [r3, #0]
    ff10:	b085      	sub	sp, #20
    ff12:	3401      	adds	r4, #1
    ff14:	4294      	cmp	r4, r2
    ff16:	f88d 0007 	strb.w	r0, [sp, #7]
    ff1a:	d903      	bls.n	ff24 <bsec_l_Entity_serializeAndAdd+0x18>
    ff1c:	3201      	adds	r2, #1
    ff1e:	601a      	str	r2, [r3, #0]
    ff20:	b005      	add	sp, #20
    ff22:	bd30      	pop	{r4, r5, pc}
    ff24:	461c      	mov	r4, r3
    ff26:	460d      	mov	r5, r1
    ff28:	2201      	movs	r2, #1
    ff2a:	f10d 0107 	add.w	r1, sp, #7
    ff2e:	f10d 000f 	add.w	r0, sp, #15
    ff32:	f029 f846 	bl	38fc2 <memcpy>
    ff36:	6823      	ldr	r3, [r4, #0]
    ff38:	f89d 200f 	ldrb.w	r2, [sp, #15]
    ff3c:	54ea      	strb	r2, [r5, r3]
    ff3e:	6823      	ldr	r3, [r4, #0]
    ff40:	3301      	adds	r3, #1
    ff42:	6023      	str	r3, [r4, #0]
    ff44:	b005      	add	sp, #20
    ff46:	bd30      	pop	{r4, r5, pc}

0000ff48 <bsec_m_Entity_parseAndDeserialize>:
    ff48:	b570      	push	{r4, r5, r6, lr}
    ff4a:	460e      	mov	r6, r1
    ff4c:	6809      	ldr	r1, [r1, #0]
    ff4e:	b082      	sub	sp, #8
    ff50:	1d05      	adds	r5, r0, #4
    ff52:	1843      	adds	r3, r0, r1
    ff54:	440d      	add	r5, r1
    ff56:	a901      	add	r1, sp, #4
    ff58:	f813 4b01 	ldrb.w	r4, [r3], #1
    ff5c:	f801 4b01 	strb.w	r4, [r1], #1
    ff60:	42ab      	cmp	r3, r5
    ff62:	d1f9      	bne.n	ff58 <bsec_m_Entity_parseAndDeserialize+0x10>
    ff64:	a901      	add	r1, sp, #4
    ff66:	4610      	mov	r0, r2
    ff68:	2204      	movs	r2, #4
    ff6a:	f029 f82a 	bl	38fc2 <memcpy>
    ff6e:	6833      	ldr	r3, [r6, #0]
    ff70:	3304      	adds	r3, #4
    ff72:	6033      	str	r3, [r6, #0]
    ff74:	b002      	add	sp, #8
    ff76:	bd70      	pop	{r4, r5, r6, pc}

0000ff78 <bsec_m_Entity_serializeAndAdd>:
    ff78:	b5f0      	push	{r4, r5, r6, r7, lr}
    ff7a:	681d      	ldr	r5, [r3, #0]
    ff7c:	3508      	adds	r5, #8
    ff7e:	4295      	cmp	r5, r2
    ff80:	b083      	sub	sp, #12
    ff82:	d903      	bls.n	ff8c <bsec_m_Entity_serializeAndAdd+0x14>
    ff84:	3201      	adds	r2, #1
    ff86:	601a      	str	r2, [r3, #0]
    ff88:	b003      	add	sp, #12
    ff8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ff8c:	2208      	movs	r2, #8
    ff8e:	460f      	mov	r7, r1
    ff90:	4601      	mov	r1, r0
    ff92:	4668      	mov	r0, sp
    ff94:	461c      	mov	r4, r3
    ff96:	f029 f814 	bl	38fc2 <memcpy>
    ff9a:	f10d 33ff 	add.w	r3, sp, #4294967295	; 0xffffffff
    ff9e:	2200      	movs	r2, #0
    ffa0:	18bd      	adds	r5, r7, r2
    ffa2:	6820      	ldr	r0, [r4, #0]
    ffa4:	f813 6f01 	ldrb.w	r6, [r3, #1]!
    ffa8:	542e      	strb	r6, [r5, r0]
    ffaa:	3201      	adds	r2, #1
    ffac:	2a08      	cmp	r2, #8
    ffae:	d1f7      	bne.n	ffa0 <bsec_m_Entity_serializeAndAdd+0x28>
    ffb0:	6823      	ldr	r3, [r4, #0]
    ffb2:	3308      	adds	r3, #8
    ffb4:	6023      	str	r3, [r4, #0]
    ffb6:	b003      	add	sp, #12
    ffb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ffba:	bf00      	nop

0000ffbc <bsec_n_Entity_parseAndDeserialize>:
    ffbc:	b530      	push	{r4, r5, lr}
    ffbe:	460c      	mov	r4, r1
    ffc0:	b083      	sub	sp, #12
    ffc2:	6823      	ldr	r3, [r4, #0]
    ffc4:	18c5      	adds	r5, r0, r3
    ffc6:	4601      	mov	r1, r0
    ffc8:	4610      	mov	r0, r2
    ffca:	786a      	ldrb	r2, [r5, #1]
    ffcc:	5ccb      	ldrb	r3, [r1, r3]
    ffce:	f88d 2005 	strb.w	r2, [sp, #5]
    ffd2:	a901      	add	r1, sp, #4
    ffd4:	2202      	movs	r2, #2
    ffd6:	f88d 3004 	strb.w	r3, [sp, #4]
    ffda:	f028 fff2 	bl	38fc2 <memcpy>
    ffde:	6823      	ldr	r3, [r4, #0]
    ffe0:	3302      	adds	r3, #2
    ffe2:	6023      	str	r3, [r4, #0]
    ffe4:	b003      	add	sp, #12
    ffe6:	bd30      	pop	{r4, r5, pc}

0000ffe8 <bsec_n_Entity_serializeAndAdd>:
    ffe8:	b5f0      	push	{r4, r5, r6, r7, lr}
    ffea:	681c      	ldr	r4, [r3, #0]
    ffec:	3414      	adds	r4, #20
    ffee:	4294      	cmp	r4, r2
    fff0:	b08b      	sub	sp, #44	; 0x2c
    fff2:	d903      	bls.n	fffc <bsec_n_Entity_serializeAndAdd+0x14>
    fff4:	3201      	adds	r2, #1
    fff6:	601a      	str	r2, [r3, #0]
    fff8:	b00b      	add	sp, #44	; 0x2c
    fffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fffc:	2214      	movs	r2, #20
    fffe:	eb0d 0702 	add.w	r7, sp, r2
   10002:	460e      	mov	r6, r1
   10004:	4601      	mov	r1, r0
   10006:	4668      	mov	r0, sp
   10008:	461d      	mov	r5, r3
   1000a:	f028 ffda 	bl	38fc2 <memcpy>
   1000e:	2214      	movs	r2, #20
   10010:	4669      	mov	r1, sp
   10012:	4638      	mov	r0, r7
   10014:	f028 ffd5 	bl	38fc2 <memcpy>
   10018:	ab0a      	add	r3, sp, #40	; 0x28
   1001a:	463a      	mov	r2, r7
   1001c:	682c      	ldr	r4, [r5, #0]
   1001e:	1bd0      	subs	r0, r2, r7
   10020:	4420      	add	r0, r4
   10022:	f812 4b01 	ldrb.w	r4, [r2], #1
   10026:	5434      	strb	r4, [r6, r0]
   10028:	429a      	cmp	r2, r3
   1002a:	d1f7      	bne.n	1001c <bsec_n_Entity_serializeAndAdd+0x34>
   1002c:	682b      	ldr	r3, [r5, #0]
   1002e:	3314      	adds	r3, #20
   10030:	602b      	str	r3, [r5, #0]
   10032:	b00b      	add	sp, #44	; 0x2c
   10034:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10036:	bf00      	nop

00010038 <bsec_o_Entity_parseAndDeserialize>:
   10038:	b510      	push	{r4, lr}
   1003a:	460c      	mov	r4, r1
   1003c:	b082      	sub	sp, #8
   1003e:	6823      	ldr	r3, [r4, #0]
   10040:	a902      	add	r1, sp, #8
   10042:	5cc3      	ldrb	r3, [r0, r3]
   10044:	f801 3d01 	strb.w	r3, [r1, #-1]!
   10048:	2201      	movs	r2, #1
   1004a:	f10d 0006 	add.w	r0, sp, #6
   1004e:	f028 ffb8 	bl	38fc2 <memcpy>
   10052:	6823      	ldr	r3, [r4, #0]
   10054:	f99d 0006 	ldrsb.w	r0, [sp, #6]
   10058:	3301      	adds	r3, #1
   1005a:	6023      	str	r3, [r4, #0]
   1005c:	b002      	add	sp, #8
   1005e:	bd10      	pop	{r4, pc}

00010060 <bsec_o_Entity_serializeAndAdd>:
   10060:	b5f0      	push	{r4, r5, r6, r7, lr}
   10062:	681c      	ldr	r4, [r3, #0]
   10064:	3418      	adds	r4, #24
   10066:	4294      	cmp	r4, r2
   10068:	b08d      	sub	sp, #52	; 0x34
   1006a:	d903      	bls.n	10074 <bsec_o_Entity_serializeAndAdd+0x14>
   1006c:	3201      	adds	r2, #1
   1006e:	601a      	str	r2, [r3, #0]
   10070:	b00d      	add	sp, #52	; 0x34
   10072:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10074:	2218      	movs	r2, #24
   10076:	eb0d 0702 	add.w	r7, sp, r2
   1007a:	460e      	mov	r6, r1
   1007c:	4601      	mov	r1, r0
   1007e:	4668      	mov	r0, sp
   10080:	461d      	mov	r5, r3
   10082:	f028 ff9e 	bl	38fc2 <memcpy>
   10086:	2218      	movs	r2, #24
   10088:	4669      	mov	r1, sp
   1008a:	4638      	mov	r0, r7
   1008c:	f028 ff99 	bl	38fc2 <memcpy>
   10090:	ab0c      	add	r3, sp, #48	; 0x30
   10092:	463a      	mov	r2, r7
   10094:	682c      	ldr	r4, [r5, #0]
   10096:	1bd0      	subs	r0, r2, r7
   10098:	4420      	add	r0, r4
   1009a:	f812 4b01 	ldrb.w	r4, [r2], #1
   1009e:	5434      	strb	r4, [r6, r0]
   100a0:	429a      	cmp	r2, r3
   100a2:	d1f7      	bne.n	10094 <bsec_o_Entity_serializeAndAdd+0x34>
   100a4:	682b      	ldr	r3, [r5, #0]
   100a6:	3318      	adds	r3, #24
   100a8:	602b      	str	r3, [r5, #0]
   100aa:	b00d      	add	sp, #52	; 0x34
   100ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   100ae:	bf00      	nop

000100b0 <bsec_p_Entity_parseAndDeserialize>:
   100b0:	f7ff bcd2 	b.w	fa58 <bsec_b_Entity_parseAndDeserialize>

000100b4 <bsec_p_Entity_serializeAndAdd>:
   100b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   100b6:	681c      	ldr	r4, [r3, #0]
   100b8:	34a8      	adds	r4, #168	; 0xa8
   100ba:	4294      	cmp	r4, r2
   100bc:	b0d5      	sub	sp, #340	; 0x154
   100be:	d903      	bls.n	100c8 <bsec_p_Entity_serializeAndAdd+0x14>
   100c0:	3201      	adds	r2, #1
   100c2:	601a      	str	r2, [r3, #0]
   100c4:	b055      	add	sp, #340	; 0x154
   100c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   100c8:	22a8      	movs	r2, #168	; 0xa8
   100ca:	eb0d 0702 	add.w	r7, sp, r2
   100ce:	460e      	mov	r6, r1
   100d0:	4601      	mov	r1, r0
   100d2:	4668      	mov	r0, sp
   100d4:	461d      	mov	r5, r3
   100d6:	f028 ff74 	bl	38fc2 <memcpy>
   100da:	22a8      	movs	r2, #168	; 0xa8
   100dc:	4669      	mov	r1, sp
   100de:	4638      	mov	r0, r7
   100e0:	f028 ff6f 	bl	38fc2 <memcpy>
   100e4:	ab54      	add	r3, sp, #336	; 0x150
   100e6:	463a      	mov	r2, r7
   100e8:	682c      	ldr	r4, [r5, #0]
   100ea:	1bd0      	subs	r0, r2, r7
   100ec:	4420      	add	r0, r4
   100ee:	f812 4b01 	ldrb.w	r4, [r2], #1
   100f2:	5434      	strb	r4, [r6, r0]
   100f4:	429a      	cmp	r2, r3
   100f6:	d1f7      	bne.n	100e8 <bsec_p_Entity_serializeAndAdd+0x34>
   100f8:	682b      	ldr	r3, [r5, #0]
   100fa:	33a8      	adds	r3, #168	; 0xa8
   100fc:	602b      	str	r3, [r5, #0]
   100fe:	b055      	add	sp, #340	; 0x154
   10100:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10102:	bf00      	nop

00010104 <bsec_q_Entity_parseAndDeserialize>:
   10104:	b530      	push	{r4, r5, lr}
   10106:	680b      	ldr	r3, [r1, #0]
   10108:	b087      	sub	sp, #28
   1010a:	3b01      	subs	r3, #1
   1010c:	4418      	add	r0, r3
   1010e:	460d      	mov	r5, r1
   10110:	f10d 0303 	add.w	r3, sp, #3
   10114:	f10d 0417 	add.w	r4, sp, #23
   10118:	f810 1f01 	ldrb.w	r1, [r0, #1]!
   1011c:	f803 1f01 	strb.w	r1, [r3, #1]!
   10120:	42a3      	cmp	r3, r4
   10122:	d1f9      	bne.n	10118 <bsec_q_Entity_parseAndDeserialize+0x14>
   10124:	4610      	mov	r0, r2
   10126:	a901      	add	r1, sp, #4
   10128:	2214      	movs	r2, #20
   1012a:	f028 ff4a 	bl	38fc2 <memcpy>
   1012e:	682b      	ldr	r3, [r5, #0]
   10130:	3314      	adds	r3, #20
   10132:	602b      	str	r3, [r5, #0]
   10134:	b007      	add	sp, #28
   10136:	bd30      	pop	{r4, r5, pc}

00010138 <bsec_q_Entity_serializeAndAdd>:
   10138:	b5f0      	push	{r4, r5, r6, r7, lr}
   1013a:	681c      	ldr	r4, [r3, #0]
   1013c:	341c      	adds	r4, #28
   1013e:	4294      	cmp	r4, r2
   10140:	b089      	sub	sp, #36	; 0x24
   10142:	d903      	bls.n	1014c <bsec_q_Entity_serializeAndAdd+0x14>
   10144:	3201      	adds	r2, #1
   10146:	601a      	str	r2, [r3, #0]
   10148:	b009      	add	sp, #36	; 0x24
   1014a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1014c:	af01      	add	r7, sp, #4
   1014e:	221c      	movs	r2, #28
   10150:	460e      	mov	r6, r1
   10152:	4601      	mov	r1, r0
   10154:	4638      	mov	r0, r7
   10156:	461d      	mov	r5, r3
   10158:	f028 ff33 	bl	38fc2 <memcpy>
   1015c:	ab08      	add	r3, sp, #32
   1015e:	463a      	mov	r2, r7
   10160:	682c      	ldr	r4, [r5, #0]
   10162:	1bd0      	subs	r0, r2, r7
   10164:	4420      	add	r0, r4
   10166:	f812 4b01 	ldrb.w	r4, [r2], #1
   1016a:	5434      	strb	r4, [r6, r0]
   1016c:	429a      	cmp	r2, r3
   1016e:	d1f7      	bne.n	10160 <bsec_q_Entity_serializeAndAdd+0x28>
   10170:	682b      	ldr	r3, [r5, #0]
   10172:	331c      	adds	r3, #28
   10174:	602b      	str	r3, [r5, #0]
   10176:	b009      	add	sp, #36	; 0x24
   10178:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1017a:	bf00      	nop

0001017c <bsec_GasHumidityBaselineTracker_filterRobustMaxMin>:
   1017c:	b538      	push	{r3, r4, r5, lr}
   1017e:	460c      	mov	r4, r1
   10180:	ed2d 8b02 	vpush	{d8}
   10184:	1e59      	subs	r1, r3, #1
   10186:	edd4 7a00 	vldr	s15, [r4]
   1018a:	4615      	mov	r5, r2
   1018c:	bbea      	cbnz	r2, 1020a <bsec_GasHumidityBaselineTracker_filterRobustMaxMin+0x8e>
   1018e:	ed90 7a01 	vldr	s14, [r0, #4]
   10192:	ed9f 8a31 	vldr	s16, [pc, #196]	; 10258 <bsec_GasHumidityBaselineTracker_filterRobustMaxMin+0xdc>
   10196:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   1019a:	edd3 6a03 	vldr	s13, [r3, #12]
   1019e:	ee27 8a08 	vmul.f32	s16, s14, s16
   101a2:	ee38 8a26 	vadd.f32	s16, s16, s13
   101a6:	8843      	ldrh	r3, [r0, #2]
   101a8:	eddf 5a2c 	vldr	s11, [pc, #176]	; 1025c <bsec_GasHumidityBaselineTracker_filterRobustMaxMin+0xe0>
   101ac:	ee06 3a90 	vmov	s13, r3
   101b0:	ee70 8a67 	vsub.f32	s17, s0, s15
   101b4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
   101b8:	eef5 8ac0 	vcmpe.f32	s17, #0.0
   101bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   101c0:	ee86 6aa5 	vdiv.f32	s12, s13, s11
   101c4:	dd34      	ble.n	10230 <bsec_GasHumidityBaselineTracker_filterRobustMaxMin+0xb4>
   101c6:	eddf 5a26 	vldr	s11, [pc, #152]	; 10260 <bsec_GasHumidityBaselineTracker_filterRobustMaxMin+0xe4>
   101ca:	edd0 6a10 	vldr	s13, [r0, #64]	; 0x40
   101ce:	ee27 7a25 	vmul.f32	s14, s14, s11
   101d2:	ee87 0a26 	vdiv.f32	s0, s14, s13
   101d6:	ee20 0a06 	vmul.f32	s0, s0, s12
   101da:	eef4 8ac0 	vcmpe.f32	s17, s0
   101de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   101e2:	bfd8      	it	le
   101e4:	eeb0 0a68 	vmovle.f32	s0, s17
   101e8:	ee30 0a27 	vadd.f32	s0, s0, s15
   101ec:	eeb4 0a48 	vcmp.f32	s0, s16
   101f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   101f4:	bf48      	it	mi
   101f6:	eeb0 0a48 	vmovmi.f32	s0, s16
   101fa:	b10d      	cbz	r5, 10200 <bsec_GasHumidityBaselineTracker_filterRobustMaxMin+0x84>
   101fc:	eeb1 0a40 	vneg.f32	s0, s0
   10200:	ecbd 8b02 	vpop	{d8}
   10204:	ed84 0a00 	vstr	s0, [r4]
   10208:	bd38      	pop	{r3, r4, r5, pc}
   1020a:	eef1 7a67 	vneg.f32	s15, s15
   1020e:	edc4 7a00 	vstr	s15, [r4]
   10212:	ed90 7a01 	vldr	s14, [r0, #4]
   10216:	ed9f 8a10 	vldr	s16, [pc, #64]	; 10258 <bsec_GasHumidityBaselineTracker_filterRobustMaxMin+0xdc>
   1021a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   1021e:	ee27 8a08 	vmul.f32	s16, s14, s16
   10222:	edd3 6a01 	vldr	s13, [r3, #4]
   10226:	eeb1 0a40 	vneg.f32	s0, s0
   1022a:	ee38 8a66 	vsub.f32	s16, s16, s13
   1022e:	e7ba      	b.n	101a6 <bsec_GasHumidityBaselineTracker_filterRobustMaxMin+0x2a>
   10230:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   10234:	edd0 7a11 	vldr	s15, [r0, #68]	; 0x44
   10238:	eeb1 0a46 	vneg.f32	s0, s12
   1023c:	ee80 0a27 	vdiv.f32	s0, s0, s15
   10240:	f01f f9a2 	bl	2f588 <expf>
   10244:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   10248:	ee37 0ac0 	vsub.f32	s0, s15, s0
   1024c:	edd4 7a00 	vldr	s15, [r4]
   10250:	ee20 0a28 	vmul.f32	s0, s0, s17
   10254:	e7c8      	b.n	101e8 <bsec_GasHumidityBaselineTracker_filterRobustMaxMin+0x6c>
   10256:	bf00      	nop
   10258:	3dc678c1 	.word	0x3dc678c1
   1025c:	42c80000 	.word	0x42c80000
   10260:	3ecbbecb 	.word	0x3ecbbecb

00010264 <bsec_GasHumidityBaselineTracker_GasHumidityBaselineTracker>:
   10264:	b430      	push	{r4, r5}
   10266:	4917      	ldr	r1, [pc, #92]	; (102c4 <bsec_GasHumidityBaselineTracker_GasHumidityBaselineTracker+0x60>)
   10268:	4d17      	ldr	r5, [pc, #92]	; (102c8 <bsec_GasHumidityBaselineTracker_GasHumidityBaselineTracker+0x64>)
   1026a:	62c1      	str	r1, [r0, #44]	; 0x2c
   1026c:	2401      	movs	r4, #1
   1026e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   10272:	7004      	strb	r4, [r0, #0]
   10274:	f04f 547d 	mov.w	r4, #1061158912	; 0x3f400000
   10278:	8041      	strh	r1, [r0, #2]
   1027a:	6344      	str	r4, [r0, #52]	; 0x34
   1027c:	4913      	ldr	r1, [pc, #76]	; (102cc <bsec_GasHumidityBaselineTracker_GasHumidityBaselineTracker+0x68>)
   1027e:	4c14      	ldr	r4, [pc, #80]	; (102d0 <bsec_GasHumidityBaselineTracker_GasHumidityBaselineTracker+0x6c>)
   10280:	63c5      	str	r5, [r0, #60]	; 0x3c
   10282:	4d14      	ldr	r5, [pc, #80]	; (102d4 <bsec_GasHumidityBaselineTracker_GasHumidityBaselineTracker+0x70>)
   10284:	6401      	str	r1, [r0, #64]	; 0x40
   10286:	2200      	movs	r2, #0
   10288:	2100      	movs	r1, #0
   1028a:	6444      	str	r4, [r0, #68]	; 0x44
   1028c:	6485      	str	r5, [r0, #72]	; 0x48
   1028e:	2402      	movs	r4, #2
   10290:	4d11      	ldr	r5, [pc, #68]	; (102d8 <bsec_GasHumidityBaselineTracker_GasHumidityBaselineTracker+0x74>)
   10292:	7704      	strb	r4, [r0, #28]
   10294:	7744      	strb	r4, [r0, #29]
   10296:	f880 404c 	strb.w	r4, [r0, #76]	; 0x4c
   1029a:	6305      	str	r5, [r0, #48]	; 0x30
   1029c:	6385      	str	r5, [r0, #56]	; 0x38
   1029e:	f8a0 104e 	strh.w	r1, [r0, #78]	; 0x4e
   102a2:	f8a0 1050 	strh.w	r1, [r0, #80]	; 0x50
   102a6:	8301      	strh	r1, [r0, #24]
   102a8:	8341      	strh	r1, [r0, #26]
   102aa:	e9c0 1108 	strd	r1, r1, [r0, #32]
   102ae:	6281      	str	r1, [r0, #40]	; 0x28
   102b0:	6542      	str	r2, [r0, #84]	; 0x54
   102b2:	6582      	str	r2, [r0, #88]	; 0x58
   102b4:	6082      	str	r2, [r0, #8]
   102b6:	6102      	str	r2, [r0, #16]
   102b8:	60c2      	str	r2, [r0, #12]
   102ba:	6142      	str	r2, [r0, #20]
   102bc:	6042      	str	r2, [r0, #4]
   102be:	bc30      	pop	{r4, r5}
   102c0:	4770      	bx	lr
   102c2:	bf00      	nop
   102c4:	3f004189 	.word	0x3f004189
   102c8:	640055d8 	.word	0x640055d8
   102cc:	44e10000 	.word	0x44e10000
   102d0:	47a8c000 	.word	0x47a8c000
   102d4:	4c773140 	.word	0x4c773140
   102d8:	3ecccccd 	.word	0x3ecccccd

000102dc <bsec_GasHumidityBaselineTracker_configure>:
   102dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   102e0:	b087      	sub	sp, #28
   102e2:	ab04      	add	r3, sp, #16
   102e4:	ae05      	add	r6, sp, #20
   102e6:	4605      	mov	r5, r0
   102e8:	7800      	ldrb	r0, [r0, #0]
   102ea:	9300      	str	r3, [sp, #0]
   102ec:	9601      	str	r6, [sp, #4]
   102ee:	f10d 030f 	add.w	r3, sp, #15
   102f2:	460f      	mov	r7, r1
   102f4:	f001 fb9c 	bl	11a30 <bsec_Serialization_checkSerializationHeader>
   102f8:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   102fc:	bb30      	cbnz	r0, 1034c <bsec_GasHumidityBaselineTracker_configure+0x70>
   102fe:	4604      	mov	r4, r0
   10300:	f105 0a3e 	add.w	sl, r5, #62	; 0x3e
   10304:	f105 093c 	add.w	r9, r5, #60	; 0x3c
   10308:	f105 084e 	add.w	r8, r5, #78	; 0x4e
   1030c:	fa5f fb84 	uxtb.w	fp, r4
   10310:	f10b 0301 	add.w	r3, fp, #1
   10314:	b2db      	uxtb	r3, r3
   10316:	3b02      	subs	r3, #2
   10318:	2b05      	cmp	r3, #5
   1031a:	d804      	bhi.n	10326 <bsec_GasHumidityBaselineTracker_configure+0x4a>
   1031c:	e8df f003 	tbb	[pc, r3]
   10320:	1f252b32 	.word	0x1f252b32
   10324:	0e19      	.short	0x0e19
   10326:	f105 0244 	add.w	r2, r5, #68	; 0x44
   1032a:	4631      	mov	r1, r6
   1032c:	4638      	mov	r0, r7
   1032e:	f7ff fb93 	bl	fa58 <bsec_b_Entity_parseAndDeserialize>
   10332:	f1bb 0f06 	cmp.w	fp, #6
   10336:	d007      	beq.n	10348 <bsec_GasHumidityBaselineTracker_configure+0x6c>
   10338:	3401      	adds	r4, #1
   1033a:	e7e7      	b.n	1030c <bsec_GasHumidityBaselineTracker_configure+0x30>
   1033c:	f105 0254 	add.w	r2, r5, #84	; 0x54
   10340:	4631      	mov	r1, r6
   10342:	4638      	mov	r0, r7
   10344:	f7ff fb88 	bl	fa58 <bsec_b_Entity_parseAndDeserialize>
   10348:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   1034c:	b007      	add	sp, #28
   1034e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10352:	4652      	mov	r2, sl
   10354:	4631      	mov	r1, r6
   10356:	4638      	mov	r0, r7
   10358:	f7ff fbfa 	bl	fb50 <bsec_d_Entity_parseAndDeserialize>
   1035c:	e7ec      	b.n	10338 <bsec_GasHumidityBaselineTracker_configure+0x5c>
   1035e:	464a      	mov	r2, r9
   10360:	4631      	mov	r1, r6
   10362:	4638      	mov	r0, r7
   10364:	f7ff fe2a 	bl	ffbc <bsec_n_Entity_parseAndDeserialize>
   10368:	e7e6      	b.n	10338 <bsec_GasHumidityBaselineTracker_configure+0x5c>
   1036a:	4642      	mov	r2, r8
   1036c:	4631      	mov	r1, r6
   1036e:	4638      	mov	r0, r7
   10370:	f7ff fdea 	bl	ff48 <bsec_m_Entity_parseAndDeserialize>
   10374:	e7e0      	b.n	10338 <bsec_GasHumidityBaselineTracker_configure+0x5c>
   10376:	f105 022c 	add.w	r2, r5, #44	; 0x2c
   1037a:	4631      	mov	r1, r6
   1037c:	4638      	mov	r0, r7
   1037e:	f7ff fdab 	bl	fed8 <bsec_l_Entity_parseAndDeserialize>
   10382:	e7d9      	b.n	10338 <bsec_GasHumidityBaselineTracker_configure+0x5c>
   10384:	4631      	mov	r1, r6
   10386:	4638      	mov	r0, r7
   10388:	f7ff fc1e 	bl	fbc8 <bsec_e_Entity_parseAndDeserialize>
   1038c:	ed85 0a10 	vstr	s0, [r5, #64]	; 0x40
   10390:	e7d2      	b.n	10338 <bsec_GasHumidityBaselineTracker_configure+0x5c>
   10392:	bf00      	nop

00010394 <bsec_GasHumidityBaselineTracker_doStep>:
   10394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10398:	ed9f 7adc 	vldr	s14, [pc, #880]	; 1070c <bsec_GasHumidityBaselineTracker_doStep+0x378>
   1039c:	eddf 7adc 	vldr	s15, [pc, #880]	; 10710 <bsec_GasHumidityBaselineTracker_doStep+0x37c>
   103a0:	eddf 6adc 	vldr	s13, [pc, #880]	; 10714 <bsec_GasHumidityBaselineTracker_doStep+0x380>
   103a4:	ed2d 8b0a 	vpush	{d8-d12}
   103a8:	ee20 7a87 	vmul.f32	s14, s1, s14
   103ac:	ee70 7aa7 	vadd.f32	s15, s1, s15
   103b0:	edd0 8a01 	vldr	s17, [r0, #4]
   103b4:	b089      	sub	sp, #36	; 0x24
   103b6:	eeb0 aa40 	vmov.f32	s20, s0
   103ba:	ee87 0a27 	vdiv.f32	s0, s14, s15
   103be:	461d      	mov	r5, r3
   103c0:	4604      	mov	r4, r0
   103c2:	468a      	mov	sl, r1
   103c4:	4693      	mov	fp, r2
   103c6:	e9dd 761c 	ldrd	r7, r6, [sp, #112]	; 0x70
   103ca:	eeb0 8a60 	vmov.f32	s16, s1
   103ce:	eeb0 9a41 	vmov.f32	s18, s2
   103d2:	eef0 9a61 	vmov.f32	s19, s3
   103d6:	ee68 8aa6 	vmul.f32	s17, s17, s13
   103da:	f01f f8d5 	bl	2f588 <expf>
   103de:	ed9f 6ace 	vldr	s12, [pc, #824]	; 10718 <bsec_GasHumidityBaselineTracker_doStep+0x384>
   103e2:	eddf 7ace 	vldr	s15, [pc, #824]	; 1071c <bsec_GasHumidityBaselineTracker_doStep+0x388>
   103e6:	ed9f 7ace 	vldr	s14, [pc, #824]	; 10720 <bsec_GasHumidityBaselineTracker_doStep+0x38c>
   103ea:	ed9f 5ace 	vldr	s10, [pc, #824]	; 10724 <bsec_GasHumidityBaselineTracker_doStep+0x390>
   103ee:	eddf 5ace 	vldr	s11, [pc, #824]	; 10728 <bsec_GasHumidityBaselineTracker_doStep+0x394>
   103f2:	ee29 6a06 	vmul.f32	s12, s18, s12
   103f6:	ee38 7a07 	vadd.f32	s14, s16, s14
   103fa:	eec6 6a27 	vdiv.f32	s13, s12, s15
   103fe:	ee26 0a80 	vmul.f32	s0, s13, s0
   10402:	eec0 7a07 	vdiv.f32	s15, s0, s14
   10406:	ee67 7a85 	vmul.f32	s15, s15, s10
   1040a:	eef4 7ae5 	vcmpe.f32	s15, s11
   1040e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10412:	bfdc      	itt	le
   10414:	f10d 0820 	addle.w	r8, sp, #32
   10418:	ee15 3a90 	vmovle	r3, s11
   1041c:	edcd 7a06 	vstr	s15, [sp, #24]
   10420:	bfd4      	ite	le
   10422:	f848 3d08 	strle.w	r3, [r8, #-8]!
   10426:	f10d 0818 	addgt.w	r8, sp, #24
   1042a:	4640      	mov	r0, r8
   1042c:	f001 fbd8 	bl	11be0 <bsec_log10>
   10430:	8863      	ldrh	r3, [r4, #2]
   10432:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   10436:	f000 8142 	beq.w	106be <bsec_GasHumidityBaselineTracker_doStep+0x32a>
   1043a:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
   1043e:	f000 813b 	beq.w	106b8 <bsec_GasHumidityBaselineTracker_doStep+0x324>
   10442:	2b64      	cmp	r3, #100	; 0x64
   10444:	f000 809f 	beq.w	10586 <bsec_GasHumidityBaselineTracker_doStep+0x1f2>
   10448:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
   1044c:	eddd 7a06 	vldr	s15, [sp, #24]
   10450:	ee20 0a27 	vmul.f32	s0, s0, s15
   10454:	ee30 0a0a 	vadd.f32	s0, s0, s20
   10458:	ed86 0a00 	vstr	s0, [r6]
   1045c:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   10460:	ee07 3a90 	vmov	s15, r3
   10464:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   10468:	eeb4 8ae7 	vcmpe.f32	s16, s15
   1046c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10470:	d836      	bhi.n	104e0 <bsec_GasHumidityBaselineTracker_doStep+0x14c>
   10472:	f994 303c 	ldrsb.w	r3, [r4, #60]	; 0x3c
   10476:	ee07 3a90 	vmov	s15, r3
   1047a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1047e:	eeb4 8ae7 	vcmpe.f32	s16, s15
   10482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10486:	f2c0 8081 	blt.w	1058c <bsec_GasHumidityBaselineTracker_doStep+0x1f8>
   1048a:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
   1048e:	ee07 3a90 	vmov	s15, r3
   10492:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   10496:	eeb4 9ae7 	vcmpe.f32	s18, s15
   1049a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1049e:	d875      	bhi.n	1058c <bsec_GasHumidityBaselineTracker_doStep+0x1f8>
   104a0:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
   104a4:	ee07 3a90 	vmov	s15, r3
   104a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   104ac:	eeb4 9ae7 	vcmpe.f32	s18, s15
   104b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   104b4:	db6a      	blt.n	1058c <bsec_GasHumidityBaselineTracker_doStep+0x1f8>
   104b6:	f1bb 0f00 	cmp.w	fp, #0
   104ba:	d011      	beq.n	104e0 <bsec_GasHumidityBaselineTracker_doStep+0x14c>
   104bc:	b995      	cbnz	r5, 104e4 <bsec_GasHumidityBaselineTracker_doStep+0x150>
   104be:	eef5 9a40 	vcmp.f32	s19, #0.0
   104c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   104c6:	8d25      	ldrh	r5, [r4, #40]	; 0x28
   104c8:	f040 8189 	bne.w	107de <bsec_GasHumidityBaselineTracker_doStep+0x44a>
   104cc:	2d00      	cmp	r5, #0
   104ce:	f000 813d 	beq.w	1074c <bsec_GasHumidityBaselineTracker_doStep+0x3b8>
   104d2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   104d4:	1aed      	subs	r5, r5, r3
   104d6:	f104 0308 	add.w	r3, r4, #8
   104da:	8525      	strh	r5, [r4, #40]	; 0x28
   104dc:	9301      	str	r3, [sp, #4]
   104de:	e05d      	b.n	1059c <bsec_GasHumidityBaselineTracker_doStep+0x208>
   104e0:	2d00      	cmp	r5, #0
   104e2:	d058      	beq.n	10596 <bsec_GasHumidityBaselineTracker_doStep+0x202>
   104e4:	edd4 7a02 	vldr	s15, [r4, #8]
   104e8:	eef5 7a40 	vcmp.f32	s15, #0.0
   104ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   104f0:	bf18      	it	ne
   104f2:	edcd 7a02 	vstrne	s15, [sp, #8]
   104f6:	edd4 7a04 	vldr	s15, [r4, #16]
   104fa:	bf04      	itt	eq
   104fc:	6833      	ldreq	r3, [r6, #0]
   104fe:	9302      	streq	r3, [sp, #8]
   10500:	eef5 7a40 	vcmp.f32	s15, #0.0
   10504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10508:	bf08      	it	eq
   1050a:	eddd 7a02 	vldreq	s15, [sp, #8]
   1050e:	6a23      	ldr	r3, [r4, #32]
   10510:	9306      	str	r3, [sp, #24]
   10512:	bf08      	it	eq
   10514:	ee77 7ae8 	vsubeq.f32	s15, s15, s17
   10518:	2208      	movs	r2, #8
   1051a:	edcd 7a04 	vstr	s15, [sp, #16]
   1051e:	edd4 7a03 	vldr	s15, [r4, #12]
   10522:	eef5 7a40 	vcmp.f32	s15, #0.0
   10526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1052a:	bf18      	it	ne
   1052c:	edcd 7a03 	vstrne	s15, [sp, #12]
   10530:	edd4 7a05 	vldr	s15, [r4, #20]
   10534:	bf04      	itt	eq
   10536:	6833      	ldreq	r3, [r6, #0]
   10538:	9303      	streq	r3, [sp, #12]
   1053a:	eef5 7a40 	vcmp.f32	s15, #0.0
   1053e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10542:	bf08      	it	eq
   10544:	eddd 7a03 	vldreq	s15, [sp, #12]
   10548:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1054a:	bf14      	ite	ne
   1054c:	edcd 7a05 	vstrne	s15, [sp, #20]
   10550:	ee77 8ae8 	vsubeq.f32	s17, s15, s17
   10554:	eb0d 0102 	add.w	r1, sp, r2
   10558:	4638      	mov	r0, r7
   1055a:	bf08      	it	eq
   1055c:	edcd 8a05 	vstreq	s17, [sp, #20]
   10560:	9307      	str	r3, [sp, #28]
   10562:	f028 fd2e 	bl	38fc2 <memcpy>
   10566:	2208      	movs	r2, #8
   10568:	a904      	add	r1, sp, #16
   1056a:	18b8      	adds	r0, r7, r2
   1056c:	f028 fd29 	bl	38fc2 <memcpy>
   10570:	4641      	mov	r1, r8
   10572:	f107 0010 	add.w	r0, r7, #16
   10576:	2208      	movs	r2, #8
   10578:	f028 fd23 	bl	38fc2 <memcpy>
   1057c:	b009      	add	sp, #36	; 0x24
   1057e:	ecbd 8b0a 	vpop	{d8-d12}
   10582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10586:	ed94 0a0e 	vldr	s0, [r4, #56]	; 0x38
   1058a:	e75f      	b.n	1044c <bsec_GasHumidityBaselineTracker_doStep+0xb8>
   1058c:	f1bb 0f00 	cmp.w	fp, #0
   10590:	d0a6      	beq.n	104e0 <bsec_GasHumidityBaselineTracker_doStep+0x14c>
   10592:	2d00      	cmp	r5, #0
   10594:	d1a6      	bne.n	104e4 <bsec_GasHumidityBaselineTracker_doStep+0x150>
   10596:	f104 0308 	add.w	r3, r4, #8
   1059a:	9301      	str	r3, [sp, #4]
   1059c:	9d01      	ldr	r5, [sp, #4]
   1059e:	eddf 9a63 	vldr	s19, [pc, #396]	; 1072c <bsec_GasHumidityBaselineTracker_doStep+0x398>
   105a2:	ed9f ba63 	vldr	s22, [pc, #396]	; 10730 <bsec_GasHumidityBaselineTracker_doStep+0x39c>
   105a6:	eddf aa63 	vldr	s21, [pc, #396]	; 10734 <bsec_GasHumidityBaselineTracker_doStep+0x3a0>
   105aa:	ed9f aa63 	vldr	s20, [pc, #396]	; 10738 <bsec_GasHumidityBaselineTracker_doStep+0x3a4>
   105ae:	971c      	str	r7, [sp, #112]	; 0x70
   105b0:	f104 091c 	add.w	r9, r4, #28
   105b4:	f104 0310 	add.w	r3, r4, #16
   105b8:	464f      	mov	r7, r9
   105ba:	9301      	str	r3, [sp, #4]
   105bc:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
   105c0:	46a9      	mov	r9, r5
   105c2:	ed99 7a00 	vldr	s14, [r9]
   105c6:	edd9 7a02 	vldr	s15, [r9, #8]
   105ca:	eeb4 7ac0 	vcmpe.f32	s14, s0
   105ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   105d2:	f240 8088 	bls.w	106e6 <bsec_GasHumidityBaselineTracker_doStep+0x352>
   105d6:	eef4 7ac0 	vcmpe.f32	s15, s0
   105da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   105de:	bfac      	ite	ge
   105e0:	2501      	movge	r5, #1
   105e2:	2500      	movlt	r5, #0
   105e4:	ee37 9a40 	vsub.f32	s18, s14, s0
   105e8:	ee30 8a67 	vsub.f32	s16, s0, s15
   105ec:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
   105f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   105f4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   105f8:	bf48      	it	mi
   105fa:	eeb0 9a69 	vmovmi.f32	s18, s19
   105fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10602:	eef5 7a40 	vcmp.f32	s15, #0.0
   10606:	bf48      	it	mi
   10608:	eeb0 8a69 	vmovmi.f32	s16, s19
   1060c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10610:	d16d      	bne.n	106ee <bsec_GasHumidityBaselineTracker_doStep+0x35a>
   10612:	eeb0 ca68 	vmov.f32	s24, s17
   10616:	eef0 0a48 	vmov.f32	s1, s16
   1061a:	eeb0 0a49 	vmov.f32	s0, s18
   1061e:	f01e ff2b 	bl	2f478 <fminf>
   10622:	ee30 0a00 	vadd.f32	s0, s0, s0
   10626:	eec0 7a0c 	vdiv.f32	s15, s0, s24
   1062a:	eef4 7a6b 	vcmp.f32	s15, s23
   1062e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10632:	bfc8      	it	gt
   10634:	eef0 7a6b 	vmovgt.f32	s15, s23
   10638:	f1ba 0f00 	cmp.w	sl, #0
   1063c:	d042      	beq.n	106c4 <bsec_GasHumidityBaselineTracker_doStep+0x330>
   1063e:	f1bb 0f00 	cmp.w	fp, #0
   10642:	d03f      	beq.n	106c4 <bsec_GasHumidityBaselineTracker_doStep+0x330>
   10644:	edd9 6a06 	vldr	s13, [r9, #24]
   10648:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
   1064c:	eef4 6a47 	vcmp.f32	s13, s14
   10650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10654:	d172      	bne.n	1073c <bsec_GasHumidityBaselineTracker_doStep+0x3a8>
   10656:	ee7b 7ae7 	vsub.f32	s15, s23, s15
   1065a:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
   1065e:	ee67 7aa7 	vmul.f32	s15, s15, s15
   10662:	ee67 7a87 	vmul.f32	s15, s15, s14
   10666:	ee67 7aaa 	vmul.f32	s15, s15, s21
   1066a:	ee77 7a8a 	vadd.f32	s15, s15, s20
   1066e:	eef0 6a68 	vmov.f32	s13, s17
   10672:	ee48 6aa7 	vmla.f32	s13, s17, s15
   10676:	ed99 7a02 	vldr	s14, [r9, #8]
   1067a:	edd9 7a00 	vldr	s15, [r9]
   1067e:	ee77 7ac7 	vsub.f32	s15, s15, s14
   10682:	eef4 6ae7 	vcmpe.f32	s13, s15
   10686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1068a:	dc39      	bgt.n	10700 <bsec_GasHumidityBaselineTracker_doStep+0x36c>
   1068c:	eeb5 7a40 	vcmp.f32	s14, #0.0
   10690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10694:	d034      	beq.n	10700 <bsec_GasHumidityBaselineTracker_doStep+0x36c>
   10696:	2d00      	cmp	r5, #0
   10698:	d153      	bne.n	10742 <bsec_GasHumidityBaselineTracker_doStep+0x3ae>
   1069a:	7839      	ldrb	r1, [r7, #0]
   1069c:	29ff      	cmp	r1, #255	; 0xff
   1069e:	f000 80c2 	beq.w	10826 <bsec_GasHumidityBaselineTracker_doStep+0x492>
   106a2:	3101      	adds	r1, #1
   106a4:	b2c9      	uxtb	r1, r1
   106a6:	7039      	strb	r1, [r7, #0]
   106a8:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
   106ac:	4288      	cmp	r0, r1
   106ae:	f240 80ba 	bls.w	10826 <bsec_GasHumidityBaselineTracker_doStep+0x492>
   106b2:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   106b6:	e00a      	b.n	106ce <bsec_GasHumidityBaselineTracker_doStep+0x33a>
   106b8:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
   106bc:	e6c6      	b.n	1044c <bsec_GasHumidityBaselineTracker_doStep+0xb8>
   106be:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
   106c2:	e6c3      	b.n	1044c <bsec_GasHumidityBaselineTracker_doStep+0xb8>
   106c4:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
   106c8:	7039      	strb	r1, [r7, #0]
   106ca:	eef0 7a69 	vmov.f32	s15, s19
   106ce:	9b01      	ldr	r3, [sp, #4]
   106d0:	edc9 7a06 	vstr	s15, [r9, #24]
   106d4:	f109 0904 	add.w	r9, r9, #4
   106d8:	454b      	cmp	r3, r9
   106da:	f107 0701 	add.w	r7, r7, #1
   106de:	d004      	beq.n	106ea <bsec_GasHumidityBaselineTracker_doStep+0x356>
   106e0:	ed96 0a00 	vldr	s0, [r6]
   106e4:	e76d      	b.n	105c2 <bsec_GasHumidityBaselineTracker_doStep+0x22e>
   106e6:	2501      	movs	r5, #1
   106e8:	e77c      	b.n	105e4 <bsec_GasHumidityBaselineTracker_doStep+0x250>
   106ea:	9f1c      	ldr	r7, [sp, #112]	; 0x70
   106ec:	e6fa      	b.n	104e4 <bsec_GasHumidityBaselineTracker_doStep+0x150>
   106ee:	ee37 0a67 	vsub.f32	s0, s14, s15
   106f2:	eef0 0a68 	vmov.f32	s1, s17
   106f6:	f01e fea1 	bl	2f43c <fmaxf>
   106fa:	eeb0 ca40 	vmov.f32	s24, s0
   106fe:	e78a      	b.n	10616 <bsec_GasHumidityBaselineTracker_doStep+0x282>
   10700:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
   10704:	7039      	strb	r1, [r7, #0]
   10706:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1070a:	e7e0      	b.n	106ce <bsec_GasHumidityBaselineTracker_doStep+0x33a>
   1070c:	418cf5c3 	.word	0x418cf5c3
   10710:	43731eb8 	.word	0x43731eb8
   10714:	3dc678c1 	.word	0x3dc678c1
   10718:	40c39581 	.word	0x40c39581
   1071c:	42c80000 	.word	0x42c80000
   10720:	43889333 	.word	0x43889333
   10724:	4358b333 	.word	0x4358b333
   10728:	3c23d70a 	.word	0x3c23d70a
   1072c:	00000000 	.word	0x00000000
   10730:	3e99999a 	.word	0x3e99999a
   10734:	3e4ccccd 	.word	0x3e4ccccd
   10738:	3dcccccd 	.word	0x3dcccccd
   1073c:	eef0 7a4b 	vmov.f32	s15, s22
   10740:	e795      	b.n	1066e <bsec_GasHumidityBaselineTracker_doStep+0x2da>
   10742:	2100      	movs	r1, #0
   10744:	7039      	strb	r1, [r7, #0]
   10746:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   1074a:	e7c0      	b.n	106ce <bsec_GasHumidityBaselineTracker_doStep+0x33a>
   1074c:	f104 0308 	add.w	r3, r4, #8
   10750:	9301      	str	r3, [sp, #4]
   10752:	461d      	mov	r5, r3
   10754:	f04f 0901 	mov.w	r9, #1
   10758:	edd5 7a00 	vldr	s15, [r5]
   1075c:	eef5 7a40 	vcmp.f32	s15, #0.0
   10760:	edd5 7a02 	vldr	s15, [r5, #8]
   10764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10768:	bf08      	it	eq
   1076a:	ed85 0a00 	vstreq	s0, [r5]
   1076e:	eef5 7a40 	vcmp.f32	s15, #0.0
   10772:	bf08      	it	eq
   10774:	ed96 0a00 	vldreq	s0, [r6]
   10778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1077c:	464b      	mov	r3, r9
   1077e:	4629      	mov	r1, r5
   10780:	f04f 0200 	mov.w	r2, #0
   10784:	4620      	mov	r0, r4
   10786:	d10c      	bne.n	107a2 <bsec_GasHumidityBaselineTracker_doStep+0x40e>
   10788:	edd5 7a00 	vldr	s15, [r5]
   1078c:	ee77 7ae8 	vsub.f32	s15, s15, s17
   10790:	eef4 7ac0 	vcmpe.f32	s15, s0
   10794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10798:	bfc4      	itt	gt
   1079a:	ed85 0a02 	vstrgt	s0, [r5, #8]
   1079e:	ed96 0a00 	vldrgt	s0, [r6]
   107a2:	f7ff fceb 	bl	1017c <bsec_GasHumidityBaselineTracker_filterRobustMaxMin>
   107a6:	edd5 7a02 	vldr	s15, [r5, #8]
   107aa:	eef5 7a40 	vcmp.f32	s15, #0.0
   107ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   107b2:	d10a      	bne.n	107ca <bsec_GasHumidityBaselineTracker_doStep+0x436>
   107b4:	f1b9 0f02 	cmp.w	r9, #2
   107b8:	f105 0504 	add.w	r5, r5, #4
   107bc:	ed96 0a00 	vldr	s0, [r6]
   107c0:	f43f aeec 	beq.w	1059c <bsec_GasHumidityBaselineTracker_doStep+0x208>
   107c4:	f04f 0902 	mov.w	r9, #2
   107c8:	e7c6      	b.n	10758 <bsec_GasHumidityBaselineTracker_doStep+0x3c4>
   107ca:	464b      	mov	r3, r9
   107cc:	2201      	movs	r2, #1
   107ce:	f105 0108 	add.w	r1, r5, #8
   107d2:	ed96 0a00 	vldr	s0, [r6]
   107d6:	4620      	mov	r0, r4
   107d8:	f7ff fcd0 	bl	1017c <bsec_GasHumidityBaselineTracker_filterRobustMaxMin>
   107dc:	e7ea      	b.n	107b4 <bsec_GasHumidityBaselineTracker_doStep+0x420>
   107de:	eefd 7ae9 	vcvt.s32.f32	s15, s19
   107e2:	f104 0208 	add.w	r2, r4, #8
   107e6:	ee17 3a90 	vmov	r3, s15
   107ea:	9201      	str	r2, [sp, #4]
   107ec:	eb04 0243 	add.w	r2, r4, r3, lsl #1
   107f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   107f4:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
   107f8:	ed93 0a14 	vldr	s0, [r3, #80]	; 0x50
   107fc:	1aab      	subs	r3, r5, r2
   107fe:	b29b      	uxth	r3, r3
   10800:	ee07 3a90 	vmov	s15, r3
   10804:	eeb8 8a67 	vcvt.f32.u32	s16, s15
   10808:	f01e febe 	bl	2f588 <expf>
   1080c:	ee88 0a00 	vdiv.f32	s0, s16, s0
   10810:	f01e fe6c 	bl	2f4ec <roundf>
   10814:	eefc 7ac0 	vcvt.u32.f32	s15, s0
   10818:	ed96 0a00 	vldr	s0, [r6]
   1081c:	ee17 3a90 	vmov	r3, s15
   10820:	1aed      	subs	r5, r5, r3
   10822:	8525      	strh	r5, [r4, #40]	; 0x28
   10824:	e6ba      	b.n	1059c <bsec_GasHumidityBaselineTracker_doStep+0x208>
   10826:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
   1082a:	e750      	b.n	106ce <bsec_GasHumidityBaselineTracker_doStep+0x33a>

0001082c <bsec_GasHumidityBaselineTracker_getConfiguration>:
   1082c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10830:	b085      	sub	sp, #20
   10832:	ac04      	add	r4, sp, #16
   10834:	2507      	movs	r5, #7
   10836:	f804 5d09 	strb.w	r5, [r4, #-9]!
   1083a:	4606      	mov	r6, r0
   1083c:	4617      	mov	r7, r2
   1083e:	7800      	ldrb	r0, [r0, #0]
   10840:	4622      	mov	r2, r4
   10842:	460d      	mov	r5, r1
   10844:	f001 f922 	bl	11a8c <bsec_Serialization_prepareSerializationHeader>
   10848:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1084c:	9003      	str	r0, [sp, #12]
   1084e:	b1d2      	cbz	r2, 10886 <bsec_GasHumidityBaselineTracker_getConfiguration+0x5a>
   10850:	2401      	movs	r4, #1
   10852:	f106 0954 	add.w	r9, r6, #84	; 0x54
   10856:	f106 083e 	add.w	r8, r6, #62	; 0x3e
   1085a:	1e63      	subs	r3, r4, #1
   1085c:	2b06      	cmp	r3, #6
   1085e:	d80d      	bhi.n	1087c <bsec_GasHumidityBaselineTracker_getConfiguration+0x50>
   10860:	e8df f003 	tbb	[pc, r3]
   10864:	4953353f 	.word	0x4953353f
   10868:	222b      	.short	0x222b
   1086a:	04          	.byte	0x04
   1086b:	00          	.byte	0x00
   1086c:	463a      	mov	r2, r7
   1086e:	ab03      	add	r3, sp, #12
   10870:	4629      	mov	r1, r5
   10872:	4648      	mov	r0, r9
   10874:	f7ff f90a 	bl	fa8c <bsec_b_Entity_serializeAndAdd>
   10878:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1087c:	3401      	adds	r4, #1
   1087e:	b2e4      	uxtb	r4, r4
   10880:	42a2      	cmp	r2, r4
   10882:	d2ea      	bcs.n	1085a <bsec_GasHumidityBaselineTracker_getConfiguration+0x2e>
   10884:	9803      	ldr	r0, [sp, #12]
   10886:	a904      	add	r1, sp, #16
   10888:	2202      	movs	r2, #2
   1088a:	f821 0d06 	strh.w	r0, [r1, #-6]!
   1088e:	a802      	add	r0, sp, #8
   10890:	f028 fb97 	bl	38fc2 <memcpy>
   10894:	f89d 2008 	ldrb.w	r2, [sp, #8]
   10898:	f89d 3009 	ldrb.w	r3, [sp, #9]
   1089c:	9803      	ldr	r0, [sp, #12]
   1089e:	702a      	strb	r2, [r5, #0]
   108a0:	706b      	strb	r3, [r5, #1]
   108a2:	b005      	add	sp, #20
   108a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   108a8:	463a      	mov	r2, r7
   108aa:	ab03      	add	r3, sp, #12
   108ac:	4629      	mov	r1, r5
   108ae:	4640      	mov	r0, r8
   108b0:	f7ff f964 	bl	fb7c <bsec_d_Entity_serializeAndAdd>
   108b4:	f89d 2007 	ldrb.w	r2, [sp, #7]
   108b8:	e7e0      	b.n	1087c <bsec_GasHumidityBaselineTracker_getConfiguration+0x50>
   108ba:	463a      	mov	r2, r7
   108bc:	ab03      	add	r3, sp, #12
   108be:	4629      	mov	r1, r5
   108c0:	f106 003c 	add.w	r0, r6, #60	; 0x3c
   108c4:	f7ff fae2 	bl	fe8c <bsec_k_Entity_serializeAndAdd>
   108c8:	f89d 2007 	ldrb.w	r2, [sp, #7]
   108cc:	e7d6      	b.n	1087c <bsec_GasHumidityBaselineTracker_getConfiguration+0x50>
   108ce:	aa03      	add	r2, sp, #12
   108d0:	4639      	mov	r1, r7
   108d2:	4628      	mov	r0, r5
   108d4:	ed96 0a10 	vldr	s0, [r6, #64]	; 0x40
   108d8:	f7ff f990 	bl	fbfc <bsec_e_Entity_serializeAndAdd>
   108dc:	f89d 2007 	ldrb.w	r2, [sp, #7]
   108e0:	e7cc      	b.n	1087c <bsec_GasHumidityBaselineTracker_getConfiguration+0x50>
   108e2:	463a      	mov	r2, r7
   108e4:	ab03      	add	r3, sp, #12
   108e6:	4629      	mov	r1, r5
   108e8:	f106 0044 	add.w	r0, r6, #68	; 0x44
   108ec:	f7ff f8ce 	bl	fa8c <bsec_b_Entity_serializeAndAdd>
   108f0:	f89d 2007 	ldrb.w	r2, [sp, #7]
   108f4:	e7c2      	b.n	1087c <bsec_GasHumidityBaselineTracker_getConfiguration+0x50>
   108f6:	463a      	mov	r2, r7
   108f8:	ab03      	add	r3, sp, #12
   108fa:	4629      	mov	r1, r5
   108fc:	f106 004e 	add.w	r0, r6, #78	; 0x4e
   10900:	f7ff fa82 	bl	fe08 <bsec_j_Entity_serializeAndAdd>
   10904:	f89d 2007 	ldrb.w	r2, [sp, #7]
   10908:	e7b8      	b.n	1087c <bsec_GasHumidityBaselineTracker_getConfiguration+0x50>
   1090a:	463a      	mov	r2, r7
   1090c:	ab03      	add	r3, sp, #12
   1090e:	4629      	mov	r1, r5
   10910:	f106 002c 	add.w	r0, r6, #44	; 0x2c
   10914:	f7ff fa36 	bl	fd84 <bsec_i_Entity_serializeAndAdd>
   10918:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1091c:	e7ae      	b.n	1087c <bsec_GasHumidityBaselineTracker_getConfiguration+0x50>
   1091e:	bf00      	nop

00010920 <bsec_GasHumidityBaselineTracker_getState>:
   10920:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10924:	b085      	sub	sp, #20
   10926:	ac04      	add	r4, sp, #16
   10928:	250b      	movs	r5, #11
   1092a:	f804 5d09 	strb.w	r5, [r4, #-9]!
   1092e:	4606      	mov	r6, r0
   10930:	4617      	mov	r7, r2
   10932:	7800      	ldrb	r0, [r0, #0]
   10934:	4622      	mov	r2, r4
   10936:	460d      	mov	r5, r1
   10938:	f001 f8a8 	bl	11a8c <bsec_Serialization_prepareSerializationHeader>
   1093c:	f89d 2007 	ldrb.w	r2, [sp, #7]
   10940:	9003      	str	r0, [sp, #12]
   10942:	b1ea      	cbz	r2, 10980 <bsec_GasHumidityBaselineTracker_getState+0x60>
   10944:	2401      	movs	r4, #1
   10946:	f106 0920 	add.w	r9, r6, #32
   1094a:	f106 081c 	add.w	r8, r6, #28
   1094e:	1e63      	subs	r3, r4, #1
   10950:	2b0a      	cmp	r3, #10
   10952:	d810      	bhi.n	10976 <bsec_GasHumidityBaselineTracker_getState+0x56>
   10954:	e8df f003 	tbb	[pc, r3]
   10958:	7482909f 	.word	0x7482909f
   1095c:	404d5a67 	.word	0x404d5a67
   10960:	2533      	.short	0x2533
   10962:	06          	.byte	0x06
   10963:	00          	.byte	0x00
   10964:	463a      	mov	r2, r7
   10966:	ab03      	add	r3, sp, #12
   10968:	4629      	mov	r1, r5
   1096a:	f896 004c 	ldrb.w	r0, [r6, #76]	; 0x4c
   1096e:	f7ff f97d 	bl	fc6c <bsec_f_Entity_serializeAndAdd>
   10972:	f89d 2007 	ldrb.w	r2, [sp, #7]
   10976:	3401      	adds	r4, #1
   10978:	b2e4      	uxtb	r4, r4
   1097a:	42a2      	cmp	r2, r4
   1097c:	d2e7      	bcs.n	1094e <bsec_GasHumidityBaselineTracker_getState+0x2e>
   1097e:	9803      	ldr	r0, [sp, #12]
   10980:	a904      	add	r1, sp, #16
   10982:	2202      	movs	r2, #2
   10984:	f821 0d06 	strh.w	r0, [r1, #-6]!
   10988:	a802      	add	r0, sp, #8
   1098a:	f028 fb1a 	bl	38fc2 <memcpy>
   1098e:	f89d 2008 	ldrb.w	r2, [sp, #8]
   10992:	f89d 3009 	ldrb.w	r3, [sp, #9]
   10996:	9803      	ldr	r0, [sp, #12]
   10998:	702a      	strb	r2, [r5, #0]
   1099a:	706b      	strb	r3, [r5, #1]
   1099c:	b005      	add	sp, #20
   1099e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   109a2:	aa03      	add	r2, sp, #12
   109a4:	4639      	mov	r1, r7
   109a6:	4628      	mov	r0, r5
   109a8:	ed96 0a01 	vldr	s0, [r6, #4]
   109ac:	f7ff f926 	bl	fbfc <bsec_e_Entity_serializeAndAdd>
   109b0:	3401      	adds	r4, #1
   109b2:	f89d 2007 	ldrb.w	r2, [sp, #7]
   109b6:	b2e4      	uxtb	r4, r4
   109b8:	42a2      	cmp	r2, r4
   109ba:	d2c8      	bcs.n	1094e <bsec_GasHumidityBaselineTracker_getState+0x2e>
   109bc:	e7df      	b.n	1097e <bsec_GasHumidityBaselineTracker_getState+0x5e>
   109be:	463a      	mov	r2, r7
   109c0:	ab03      	add	r3, sp, #12
   109c2:	4629      	mov	r1, r5
   109c4:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   109c6:	f7ff f8a1 	bl	fb0c <bsec_c_Entity_serializeAndAdd>
   109ca:	3401      	adds	r4, #1
   109cc:	f89d 2007 	ldrb.w	r2, [sp, #7]
   109d0:	b2e4      	uxtb	r4, r4
   109d2:	42a2      	cmp	r2, r4
   109d4:	d2bb      	bcs.n	1094e <bsec_GasHumidityBaselineTracker_getState+0x2e>
   109d6:	e7d2      	b.n	1097e <bsec_GasHumidityBaselineTracker_getState+0x5e>
   109d8:	463a      	mov	r2, r7
   109da:	ab03      	add	r3, sp, #12
   109dc:	4629      	mov	r1, r5
   109de:	8d30      	ldrh	r0, [r6, #40]	; 0x28
   109e0:	f7ff f894 	bl	fb0c <bsec_c_Entity_serializeAndAdd>
   109e4:	3401      	adds	r4, #1
   109e6:	f89d 2007 	ldrb.w	r2, [sp, #7]
   109ea:	b2e4      	uxtb	r4, r4
   109ec:	42a2      	cmp	r2, r4
   109ee:	d2ae      	bcs.n	1094e <bsec_GasHumidityBaselineTracker_getState+0x2e>
   109f0:	e7c5      	b.n	1097e <bsec_GasHumidityBaselineTracker_getState+0x5e>
   109f2:	463a      	mov	r2, r7
   109f4:	ab03      	add	r3, sp, #12
   109f6:	4629      	mov	r1, r5
   109f8:	4648      	mov	r0, r9
   109fa:	f7ff f847 	bl	fa8c <bsec_b_Entity_serializeAndAdd>
   109fe:	3401      	adds	r4, #1
   10a00:	f89d 2007 	ldrb.w	r2, [sp, #7]
   10a04:	b2e4      	uxtb	r4, r4
   10a06:	42a2      	cmp	r2, r4
   10a08:	d2a1      	bcs.n	1094e <bsec_GasHumidityBaselineTracker_getState+0x2e>
   10a0a:	e7b8      	b.n	1097e <bsec_GasHumidityBaselineTracker_getState+0x5e>
   10a0c:	463a      	mov	r2, r7
   10a0e:	ab03      	add	r3, sp, #12
   10a10:	4629      	mov	r1, r5
   10a12:	4640      	mov	r0, r8
   10a14:	f7ff f8b2 	bl	fb7c <bsec_d_Entity_serializeAndAdd>
   10a18:	3401      	adds	r4, #1
   10a1a:	f89d 2007 	ldrb.w	r2, [sp, #7]
   10a1e:	b2e4      	uxtb	r4, r4
   10a20:	42a2      	cmp	r2, r4
   10a22:	d294      	bcs.n	1094e <bsec_GasHumidityBaselineTracker_getState+0x2e>
   10a24:	e7ab      	b.n	1097e <bsec_GasHumidityBaselineTracker_getState+0x5e>
   10a26:	463a      	mov	r2, r7
   10a28:	ab03      	add	r3, sp, #12
   10a2a:	4629      	mov	r1, r5
   10a2c:	8870      	ldrh	r0, [r6, #2]
   10a2e:	f7ff f86d 	bl	fb0c <bsec_c_Entity_serializeAndAdd>
   10a32:	3401      	adds	r4, #1
   10a34:	f89d 2007 	ldrb.w	r2, [sp, #7]
   10a38:	b2e4      	uxtb	r4, r4
   10a3a:	42a2      	cmp	r2, r4
   10a3c:	d287      	bcs.n	1094e <bsec_GasHumidityBaselineTracker_getState+0x2e>
   10a3e:	e79e      	b.n	1097e <bsec_GasHumidityBaselineTracker_getState+0x5e>
   10a40:	463a      	mov	r2, r7
   10a42:	ab03      	add	r3, sp, #12
   10a44:	4629      	mov	r1, r5
   10a46:	8b70      	ldrh	r0, [r6, #26]
   10a48:	f7ff f860 	bl	fb0c <bsec_c_Entity_serializeAndAdd>
   10a4c:	3401      	adds	r4, #1
   10a4e:	f89d 2007 	ldrb.w	r2, [sp, #7]
   10a52:	b2e4      	uxtb	r4, r4
   10a54:	42a2      	cmp	r2, r4
   10a56:	f4bf af7a 	bcs.w	1094e <bsec_GasHumidityBaselineTracker_getState+0x2e>
   10a5a:	e790      	b.n	1097e <bsec_GasHumidityBaselineTracker_getState+0x5e>
   10a5c:	463a      	mov	r2, r7
   10a5e:	ab03      	add	r3, sp, #12
   10a60:	4629      	mov	r1, r5
   10a62:	8b30      	ldrh	r0, [r6, #24]
   10a64:	f7ff f852 	bl	fb0c <bsec_c_Entity_serializeAndAdd>
   10a68:	3401      	adds	r4, #1
   10a6a:	f89d 2007 	ldrb.w	r2, [sp, #7]
   10a6e:	b2e4      	uxtb	r4, r4
   10a70:	42a2      	cmp	r2, r4
   10a72:	f4bf af6c 	bcs.w	1094e <bsec_GasHumidityBaselineTracker_getState+0x2e>
   10a76:	e782      	b.n	1097e <bsec_GasHumidityBaselineTracker_getState+0x5e>
   10a78:	463a      	mov	r2, r7
   10a7a:	ab03      	add	r3, sp, #12
   10a7c:	4629      	mov	r1, r5
   10a7e:	f106 0010 	add.w	r0, r6, #16
   10a82:	f7ff f803 	bl	fa8c <bsec_b_Entity_serializeAndAdd>
   10a86:	3401      	adds	r4, #1
   10a88:	f89d 2007 	ldrb.w	r2, [sp, #7]
   10a8c:	b2e4      	uxtb	r4, r4
   10a8e:	42a2      	cmp	r2, r4
   10a90:	f4bf af5d 	bcs.w	1094e <bsec_GasHumidityBaselineTracker_getState+0x2e>
   10a94:	e773      	b.n	1097e <bsec_GasHumidityBaselineTracker_getState+0x5e>
   10a96:	463a      	mov	r2, r7
   10a98:	ab03      	add	r3, sp, #12
   10a9a:	4629      	mov	r1, r5
   10a9c:	f106 0008 	add.w	r0, r6, #8
   10aa0:	f7fe fff4 	bl	fa8c <bsec_b_Entity_serializeAndAdd>
   10aa4:	3401      	adds	r4, #1
   10aa6:	f89d 2007 	ldrb.w	r2, [sp, #7]
   10aaa:	b2e4      	uxtb	r4, r4
   10aac:	42a2      	cmp	r2, r4
   10aae:	f4bf af4e 	bcs.w	1094e <bsec_GasHumidityBaselineTracker_getState+0x2e>
   10ab2:	e764      	b.n	1097e <bsec_GasHumidityBaselineTracker_getState+0x5e>

00010ab4 <bsec_GasHumidityBaselineTracker_setState>:
   10ab4:	2300      	movs	r3, #0
   10ab6:	2200      	movs	r2, #0
   10ab8:	2102      	movs	r1, #2
   10aba:	b410      	push	{r4}
   10abc:	f64f 74ff 	movw	r4, #65535	; 0xffff
   10ac0:	8044      	strh	r4, [r0, #2]
   10ac2:	8302      	strh	r2, [r0, #24]
   10ac4:	8342      	strh	r2, [r0, #26]
   10ac6:	e9c0 2208 	strd	r2, r2, [r0, #32]
   10aca:	6282      	str	r2, [r0, #40]	; 0x28
   10acc:	6083      	str	r3, [r0, #8]
   10ace:	6103      	str	r3, [r0, #16]
   10ad0:	60c3      	str	r3, [r0, #12]
   10ad2:	6143      	str	r3, [r0, #20]
   10ad4:	6043      	str	r3, [r0, #4]
   10ad6:	7701      	strb	r1, [r0, #28]
   10ad8:	7741      	strb	r1, [r0, #29]
   10ada:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
   10ade:	f85d 4b04 	ldr.w	r4, [sp], #4
   10ae2:	4770      	bx	lr

00010ae4 <bsec_GasHumidityBaselineTracker_updateInterfaceDependency>:
   10ae4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10ae8:	4299      	cmp	r1, r3
   10aea:	d04f      	beq.n	10b8c <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0xa8>
   10aec:	8843      	ldrh	r3, [r0, #2]
   10aee:	428b      	cmp	r3, r1
   10af0:	d04c      	beq.n	10b8c <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0xa8>
   10af2:	b570      	push	{r4, r5, r6, lr}
   10af4:	4b3b      	ldr	r3, [pc, #236]	; (10be4 <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0x100>)
   10af6:	4605      	mov	r5, r0
   10af8:	fba3 2301 	umull	r2, r3, r3, r1
   10afc:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
   10b00:	b082      	sub	sp, #8
   10b02:	460c      	mov	r4, r1
   10b04:	8069      	strh	r1, [r5, #2]
   10b06:	ea4f 1353 	mov.w	r3, r3, lsr #5
   10b0a:	d067      	beq.n	10bdc <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0xf8>
   10b0c:	d93f      	bls.n	10b8e <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0xaa>
   10b0e:	f5b1 6fe1 	cmp.w	r1, #1800	; 0x708
   10b12:	d03e      	beq.n	10b92 <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0xae>
   10b14:	f247 5230 	movw	r2, #30000	; 0x7530
   10b18:	4291      	cmp	r1, r2
   10b1a:	d150      	bne.n	10bbe <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0xda>
   10b1c:	4a32      	ldr	r2, [pc, #200]	; (10be8 <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0x104>)
   10b1e:	9201      	str	r2, [sp, #4]
   10b20:	ae01      	add	r6, sp, #4
   10b22:	856b      	strh	r3, [r5, #42]	; 0x2a
   10b24:	4630      	mov	r0, r6
   10b26:	f001 f85b 	bl	11be0 <bsec_log10>
   10b2a:	ed9d 0a01 	vldr	s0, [sp, #4]
   10b2e:	f01e fc79 	bl	2f424 <fabsf>
   10b32:	eddf 7a2e 	vldr	s15, [pc, #184]	; 10bec <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0x108>
   10b36:	ee80 0a27 	vdiv.f32	s0, s0, s15
   10b3a:	ed85 0a01 	vstr	s0, [r5, #4]
   10b3e:	f247 5230 	movw	r2, #30000	; 0x7530
   10b42:	fbb2 f3f4 	udiv	r3, r2, r4
   10b46:	fb04 2213 	mls	r2, r4, r3, r2
   10b4a:	b292      	uxth	r2, r2
   10b4c:	b29b      	uxth	r3, r3
   10b4e:	b132      	cbz	r2, 10b5e <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0x7a>
   10b50:	f004 0101 	and.w	r1, r4, #1
   10b54:	eb01 0454 	add.w	r4, r1, r4, lsr #1
   10b58:	42a2      	cmp	r2, r4
   10b5a:	bfa8      	it	ge
   10b5c:	3301      	addge	r3, #1
   10b5e:	ee07 3a90 	vmov	s15, r3
   10b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
   10b66:	4630      	mov	r0, r6
   10b68:	edcd 7a01 	vstr	s15, [sp, #4]
   10b6c:	f001 f84c 	bl	11c08 <bsec_b_sqrt>
   10b70:	ed9d 0a01 	vldr	s0, [sp, #4]
   10b74:	ee30 0a00 	vadd.f32	s0, s0, s0
   10b78:	f01e fc5c 	bl	2f434 <floorf>
   10b7c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
   10b80:	ee17 3a90 	vmov	r3, s15
   10b84:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
   10b88:	b002      	add	sp, #8
   10b8a:	bd70      	pop	{r4, r5, r6, pc}
   10b8c:	4770      	bx	lr
   10b8e:	2964      	cmp	r1, #100	; 0x64
   10b90:	d115      	bne.n	10bbe <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0xda>
   10b92:	4a17      	ldr	r2, [pc, #92]	; (10bf0 <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0x10c>)
   10b94:	9201      	str	r2, [sp, #4]
   10b96:	ae01      	add	r6, sp, #4
   10b98:	856b      	strh	r3, [r5, #42]	; 0x2a
   10b9a:	4630      	mov	r0, r6
   10b9c:	f001 f820 	bl	11be0 <bsec_log10>
   10ba0:	ed9d 0a01 	vldr	s0, [sp, #4]
   10ba4:	f01e fc3e 	bl	2f424 <fabsf>
   10ba8:	eddf 7a10 	vldr	s15, [pc, #64]	; 10bec <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0x108>
   10bac:	ee80 0a27 	vdiv.f32	s0, s0, s15
   10bb0:	ed85 0a01 	vstr	s0, [r5, #4]
   10bb4:	2c00      	cmp	r4, #0
   10bb6:	d1c2      	bne.n	10b3e <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0x5a>
   10bb8:	eddf 7a0e 	vldr	s15, [pc, #56]	; 10bf4 <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0x110>
   10bbc:	e7d3      	b.n	10b66 <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0x82>
   10bbe:	4a09      	ldr	r2, [pc, #36]	; (10be4 <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0x100>)
   10bc0:	4909      	ldr	r1, [pc, #36]	; (10be8 <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0x104>)
   10bc2:	9101      	str	r1, [sp, #4]
   10bc4:	fba2 0204 	umull	r0, r2, r2, r4
   10bc8:	0952      	lsrs	r2, r2, #5
   10bca:	2064      	movs	r0, #100	; 0x64
   10bcc:	fb00 4212 	mls	r2, r0, r2, r4
   10bd0:	b292      	uxth	r2, r2
   10bd2:	2a31      	cmp	r2, #49	; 0x31
   10bd4:	bf84      	itt	hi
   10bd6:	3301      	addhi	r3, #1
   10bd8:	b29b      	uxthhi	r3, r3
   10bda:	e7dc      	b.n	10b96 <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0xb2>
   10bdc:	4a06      	ldr	r2, [pc, #24]	; (10bf8 <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0x114>)
   10bde:	9201      	str	r2, [sp, #4]
   10be0:	e79e      	b.n	10b20 <bsec_GasHumidityBaselineTracker_updateInterfaceDependency+0x3c>
   10be2:	bf00      	nop
   10be4:	51eb851f 	.word	0x51eb851f
   10be8:	3f464c30 	.word	0x3f464c30
   10bec:	3e632c50 	.word	0x3e632c50
   10bf0:	3f19999a 	.word	0x3f19999a
   10bf4:	477fff00 	.word	0x477fff00
   10bf8:	3f23d70a 	.word	0x3f23d70a

00010bfc <bsec_b_GasHumidityBaselineTracker_setState>:
   10bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10c00:	b086      	sub	sp, #24
   10c02:	ab04      	add	r3, sp, #16
   10c04:	ae05      	add	r6, sp, #20
   10c06:	4605      	mov	r5, r0
   10c08:	7800      	ldrb	r0, [r0, #0]
   10c0a:	9300      	str	r3, [sp, #0]
   10c0c:	9601      	str	r6, [sp, #4]
   10c0e:	f10d 030f 	add.w	r3, sp, #15
   10c12:	460f      	mov	r7, r1
   10c14:	f000 ff0c 	bl	11a30 <bsec_Serialization_checkSerializationHeader>
   10c18:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   10c1c:	bb1b      	cbnz	r3, 10c66 <bsec_b_GasHumidityBaselineTracker_setState+0x6a>
   10c1e:	2401      	movs	r4, #1
   10c20:	f105 0a20 	add.w	sl, r5, #32
   10c24:	f105 091c 	add.w	r9, r5, #28
   10c28:	f105 0810 	add.w	r8, r5, #16
   10c2c:	1ea3      	subs	r3, r4, #2
   10c2e:	2b09      	cmp	r3, #9
   10c30:	d806      	bhi.n	10c40 <bsec_b_GasHumidityBaselineTracker_setState+0x44>
   10c32:	e8df f003 	tbb	[pc, r3]
   10c36:	474d      	.short	0x474d
   10c38:	2f353b41 	.word	0x2f353b41
   10c3c:	101c2329 	.word	0x101c2329
   10c40:	f105 0208 	add.w	r2, r5, #8
   10c44:	4631      	mov	r1, r6
   10c46:	4638      	mov	r0, r7
   10c48:	f7fe ff06 	bl	fa58 <bsec_b_Entity_parseAndDeserialize>
   10c4c:	2c0b      	cmp	r4, #11
   10c4e:	d045      	beq.n	10cdc <bsec_b_GasHumidityBaselineTracker_setState+0xe0>
   10c50:	3401      	adds	r4, #1
   10c52:	b2e4      	uxtb	r4, r4
   10c54:	e7ea      	b.n	10c2c <bsec_b_GasHumidityBaselineTracker_setState+0x30>
   10c56:	4631      	mov	r1, r6
   10c58:	4638      	mov	r0, r7
   10c5a:	f7fe fff3 	bl	fc44 <bsec_f_Entity_parseAndDeserialize>
   10c5e:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   10c62:	f885 004c 	strb.w	r0, [r5, #76]	; 0x4c
   10c66:	4618      	mov	r0, r3
   10c68:	b006      	add	sp, #24
   10c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10c6e:	4631      	mov	r1, r6
   10c70:	4638      	mov	r0, r7
   10c72:	f7fe ffa9 	bl	fbc8 <bsec_e_Entity_parseAndDeserialize>
   10c76:	ed85 0a01 	vstr	s0, [r5, #4]
   10c7a:	e7e9      	b.n	10c50 <bsec_b_GasHumidityBaselineTracker_setState+0x54>
   10c7c:	4631      	mov	r1, r6
   10c7e:	4638      	mov	r0, r7
   10c80:	f7fe ff2c 	bl	fadc <bsec_c_Entity_parseAndDeserialize>
   10c84:	8568      	strh	r0, [r5, #42]	; 0x2a
   10c86:	e7e3      	b.n	10c50 <bsec_b_GasHumidityBaselineTracker_setState+0x54>
   10c88:	4631      	mov	r1, r6
   10c8a:	4638      	mov	r0, r7
   10c8c:	f7fe ff26 	bl	fadc <bsec_c_Entity_parseAndDeserialize>
   10c90:	8528      	strh	r0, [r5, #40]	; 0x28
   10c92:	e7dd      	b.n	10c50 <bsec_b_GasHumidityBaselineTracker_setState+0x54>
   10c94:	4652      	mov	r2, sl
   10c96:	4631      	mov	r1, r6
   10c98:	4638      	mov	r0, r7
   10c9a:	f7fe fedd 	bl	fa58 <bsec_b_Entity_parseAndDeserialize>
   10c9e:	e7d7      	b.n	10c50 <bsec_b_GasHumidityBaselineTracker_setState+0x54>
   10ca0:	464a      	mov	r2, r9
   10ca2:	4631      	mov	r1, r6
   10ca4:	4638      	mov	r0, r7
   10ca6:	f7fe ff53 	bl	fb50 <bsec_d_Entity_parseAndDeserialize>
   10caa:	e7d1      	b.n	10c50 <bsec_b_GasHumidityBaselineTracker_setState+0x54>
   10cac:	4631      	mov	r1, r6
   10cae:	4638      	mov	r0, r7
   10cb0:	f7fe ff14 	bl	fadc <bsec_c_Entity_parseAndDeserialize>
   10cb4:	8068      	strh	r0, [r5, #2]
   10cb6:	e7cb      	b.n	10c50 <bsec_b_GasHumidityBaselineTracker_setState+0x54>
   10cb8:	4631      	mov	r1, r6
   10cba:	4638      	mov	r0, r7
   10cbc:	f7fe ff0e 	bl	fadc <bsec_c_Entity_parseAndDeserialize>
   10cc0:	8368      	strh	r0, [r5, #26]
   10cc2:	e7c5      	b.n	10c50 <bsec_b_GasHumidityBaselineTracker_setState+0x54>
   10cc4:	4631      	mov	r1, r6
   10cc6:	4638      	mov	r0, r7
   10cc8:	f7fe ff08 	bl	fadc <bsec_c_Entity_parseAndDeserialize>
   10ccc:	8328      	strh	r0, [r5, #24]
   10cce:	e7bf      	b.n	10c50 <bsec_b_GasHumidityBaselineTracker_setState+0x54>
   10cd0:	4642      	mov	r2, r8
   10cd2:	4631      	mov	r1, r6
   10cd4:	4638      	mov	r0, r7
   10cd6:	f7fe febf 	bl	fa58 <bsec_b_Entity_parseAndDeserialize>
   10cda:	e7b9      	b.n	10c50 <bsec_b_GasHumidityBaselineTracker_setState+0x54>
   10cdc:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   10ce0:	e7c1      	b.n	10c66 <bsec_b_GasHumidityBaselineTracker_setState+0x6a>
   10ce2:	bf00      	nop

00010ce4 <bsec_GasHumidityPreProcessor_GasHumidityPreProcessor>:
   10ce4:	b510      	push	{r4, lr}
   10ce6:	2303      	movs	r3, #3
   10ce8:	4604      	mov	r4, r0
   10cea:	f800 3b04 	strb.w	r3, [r0], #4
   10cee:	f001 f80b 	bl	11d08 <bsec_ExpSmoothingBsec_ExpSmoothingBsec>
   10cf2:	4620      	mov	r0, r4
   10cf4:	f000 ff94 	bl	11c20 <bsec_Channel_reset>
   10cf8:	4620      	mov	r0, r4
   10cfa:	bd10      	pop	{r4, pc}

00010cfc <bsec_GasHumidityPreProcessor_configure>:
   10cfc:	b570      	push	{r4, r5, r6, lr}
   10cfe:	b086      	sub	sp, #24
   10d00:	ab04      	add	r3, sp, #16
   10d02:	ac05      	add	r4, sp, #20
   10d04:	4605      	mov	r5, r0
   10d06:	7800      	ldrb	r0, [r0, #0]
   10d08:	9300      	str	r3, [sp, #0]
   10d0a:	9401      	str	r4, [sp, #4]
   10d0c:	f10d 030f 	add.w	r3, sp, #15
   10d10:	460e      	mov	r6, r1
   10d12:	f000 fe8d 	bl	11a30 <bsec_Serialization_checkSerializationHeader>
   10d16:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   10d1a:	b938      	cbnz	r0, 10d2c <bsec_GasHumidityPreProcessor_configure+0x30>
   10d1c:	4630      	mov	r0, r6
   10d1e:	f105 0220 	add.w	r2, r5, #32
   10d22:	4621      	mov	r1, r4
   10d24:	f7fe fe58 	bl	f9d8 <bsec_Entity_parseAndDeserialize>
   10d28:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   10d2c:	b006      	add	sp, #24
   10d2e:	bd70      	pop	{r4, r5, r6, pc}

00010d30 <bsec_GasHumidityPreProcessor_doStep>:
   10d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10d34:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
   10d38:	ed90 7a04 	vldr	s14, [r0, #16]
   10d3c:	ed2d 8b04 	vpush	{d8-d9}
   10d40:	eeb4 0a67 	vcmp.f32	s0, s15
   10d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10d48:	eeb0 8a40 	vmov.f32	s16, s0
   10d4c:	eeb5 7a40 	vcmp.f32	s14, #0.0
   10d50:	bf98      	it	ls
   10d52:	eeb0 8a67 	vmovls.f32	s16, s15
   10d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10d5a:	b088      	sub	sp, #32
   10d5c:	4604      	mov	r4, r0
   10d5e:	eeb0 9a60 	vmov.f32	s18, s1
   10d62:	eef0 8a41 	vmov.f32	s17, s2
   10d66:	460f      	mov	r7, r1
   10d68:	4616      	mov	r6, r2
   10d6a:	461d      	mov	r5, r3
   10d6c:	d033      	beq.n	10dd6 <bsec_GasHumidityPreProcessor_doStep+0xa6>
   10d6e:	f10d 0804 	add.w	r8, sp, #4
   10d72:	4640      	mov	r0, r8
   10d74:	ed8d 8a01 	vstr	s16, [sp, #4]
   10d78:	f000 ff32 	bl	11be0 <bsec_log10>
   10d7c:	eddd 7a01 	vldr	s15, [sp, #4]
   10d80:	ed8d 9a03 	vstr	s18, [sp, #12]
   10d84:	1d20      	adds	r0, r4, #4
   10d86:	edcd 8a04 	vstr	s17, [sp, #16]
   10d8a:	edcd 7a02 	vstr	s15, [sp, #8]
   10d8e:	ab05      	add	r3, sp, #20
   10d90:	3410      	adds	r4, #16
   10d92:	a903      	add	r1, sp, #12
   10d94:	ed90 7a03 	vldr	s14, [r0, #12]
   10d98:	edd0 6a00 	vldr	s13, [r0]
   10d9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
   10da0:	3004      	adds	r0, #4
   10da2:	ee67 7aa6 	vmul.f32	s15, s15, s13
   10da6:	42a0      	cmp	r0, r4
   10da8:	ee77 7a87 	vadd.f32	s15, s15, s14
   10dac:	ece3 7a01 	vstmia	r3!, {s15}
   10db0:	d002      	beq.n	10db8 <bsec_GasHumidityPreProcessor_doStep+0x88>
   10db2:	ecf1 7a01 	vldmia	r1!, {s15}
   10db6:	e7ed      	b.n	10d94 <bsec_GasHumidityPreProcessor_doStep+0x64>
   10db8:	a905      	add	r1, sp, #20
   10dba:	220c      	movs	r2, #12
   10dbc:	f028 f901 	bl	38fc2 <memcpy>
   10dc0:	9905      	ldr	r1, [sp, #20]
   10dc2:	9a06      	ldr	r2, [sp, #24]
   10dc4:	9b07      	ldr	r3, [sp, #28]
   10dc6:	6039      	str	r1, [r7, #0]
   10dc8:	6032      	str	r2, [r6, #0]
   10dca:	602b      	str	r3, [r5, #0]
   10dcc:	b008      	add	sp, #32
   10dce:	ecbd 8b04 	vpop	{d8-d9}
   10dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10dd6:	ee18 3a10 	vmov	r3, s16
   10dda:	f10d 0820 	add.w	r8, sp, #32
   10dde:	f848 3d1c 	str.w	r3, [r8, #-28]!
   10de2:	4640      	mov	r0, r8
   10de4:	f000 fefc 	bl	11be0 <bsec_log10>
   10de8:	9b01      	ldr	r3, [sp, #4]
   10dea:	ed84 9a05 	vstr	s18, [r4, #20]
   10dee:	edc4 8a06 	vstr	s17, [r4, #24]
   10df2:	6123      	str	r3, [r4, #16]
   10df4:	e7bd      	b.n	10d72 <bsec_GasHumidityPreProcessor_doStep+0x42>
   10df6:	bf00      	nop

00010df8 <bsec_GasHumidityPreProcessor_setState>:
   10df8:	b570      	push	{r4, r5, r6, lr}
   10dfa:	b088      	sub	sp, #32
   10dfc:	ab03      	add	r3, sp, #12
   10dfe:	ad04      	add	r5, sp, #16
   10e00:	4604      	mov	r4, r0
   10e02:	7800      	ldrb	r0, [r0, #0]
   10e04:	9300      	str	r3, [sp, #0]
   10e06:	9501      	str	r5, [sp, #4]
   10e08:	f10d 030b 	add.w	r3, sp, #11
   10e0c:	460e      	mov	r6, r1
   10e0e:	f000 fe0f 	bl	11a30 <bsec_Serialization_checkSerializationHeader>
   10e12:	f99d 000b 	ldrsb.w	r0, [sp, #11]
   10e16:	b960      	cbnz	r0, 10e32 <bsec_GasHumidityPreProcessor_setState+0x3a>
   10e18:	4629      	mov	r1, r5
   10e1a:	4630      	mov	r0, r6
   10e1c:	aa05      	add	r2, sp, #20
   10e1e:	f7fe fddb 	bl	f9d8 <bsec_Entity_parseAndDeserialize>
   10e22:	a905      	add	r1, sp, #20
   10e24:	f104 0010 	add.w	r0, r4, #16
   10e28:	220c      	movs	r2, #12
   10e2a:	f028 f8ca 	bl	38fc2 <memcpy>
   10e2e:	f99d 000b 	ldrsb.w	r0, [sp, #11]
   10e32:	b008      	add	sp, #32
   10e34:	bd70      	pop	{r4, r5, r6, pc}
   10e36:	bf00      	nop

00010e38 <bsec_GasHumidityPreProcessor_updateInterfaceDependency>:
   10e38:	ee07 1a90 	vmov	s15, r1
   10e3c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 10e90 <bsec_GasHumidityPreProcessor_updateInterfaceDependency+0x58>
   10e40:	eef8 7a67 	vcvt.f32.u32	s15, s15
   10e44:	b500      	push	{lr}
   10e46:	eec7 6a27 	vdiv.f32	s13, s14, s15
   10e4a:	b085      	sub	sp, #20
   10e4c:	f100 0320 	add.w	r3, r0, #32
   10e50:	f100 012c 	add.w	r1, r0, #44	; 0x2c
   10e54:	aa01      	add	r2, sp, #4
   10e56:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   10e5a:	ee66 6aa7 	vmul.f32	s13, s13, s15
   10e5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   10e62:	ecb3 6a01 	vldmia	r3!, {s12}
   10e66:	eec6 7a26 	vdiv.f32	s15, s12, s13
   10e6a:	eef4 7a47 	vcmp.f32	s15, s14
   10e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10e72:	bfc8      	it	gt
   10e74:	eef0 7a47 	vmovgt.f32	s15, s14
   10e78:	428b      	cmp	r3, r1
   10e7a:	ece2 7a01 	vstmia	r2!, {s15}
   10e7e:	d1f0      	bne.n	10e62 <bsec_GasHumidityPreProcessor_updateInterfaceDependency+0x2a>
   10e80:	a901      	add	r1, sp, #4
   10e82:	3004      	adds	r0, #4
   10e84:	f000 fef0 	bl	11c68 <bsec_ExpSmoothing_setCoeffFromBandwidth>
   10e88:	b005      	add	sp, #20
   10e8a:	f85d fb04 	ldr.w	pc, [sp], #4
   10e8e:	bf00      	nop
   10e90:	42c80000 	.word	0x42c80000

00010e94 <bsec_HumidityTemperatureCorrector_HumidityTemperatureCorrector>:
   10e94:	b510      	push	{r4, lr}
   10e96:	4604      	mov	r4, r0
   10e98:	f800 1b04 	strb.w	r1, [r0], #4
   10e9c:	f000 ff44 	bl	11d28 <bsec_b_ExpSmoothingBsec_ExpSmoothingBsec>
   10ea0:	4620      	mov	r0, r4
   10ea2:	f000 fed7 	bl	11c54 <bsec_b_Channel_reset>
   10ea6:	4620      	mov	r0, r4
   10ea8:	bd10      	pop	{r4, pc}
   10eaa:	bf00      	nop

00010eac <bsec_HumidityTemperatureCorrector_configure>:
   10eac:	b570      	push	{r4, r5, r6, lr}
   10eae:	b086      	sub	sp, #24
   10eb0:	ab04      	add	r3, sp, #16
   10eb2:	ac05      	add	r4, sp, #20
   10eb4:	4605      	mov	r5, r0
   10eb6:	7800      	ldrb	r0, [r0, #0]
   10eb8:	9300      	str	r3, [sp, #0]
   10eba:	9401      	str	r4, [sp, #4]
   10ebc:	f10d 030f 	add.w	r3, sp, #15
   10ec0:	460e      	mov	r6, r1
   10ec2:	f000 fdb5 	bl	11a30 <bsec_Serialization_checkSerializationHeader>
   10ec6:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   10eca:	b938      	cbnz	r0, 10edc <bsec_HumidityTemperatureCorrector_configure+0x30>
   10ecc:	4630      	mov	r0, r6
   10ece:	f105 0210 	add.w	r2, r5, #16
   10ed2:	4621      	mov	r1, r4
   10ed4:	f7ff f8ec 	bl	100b0 <bsec_p_Entity_parseAndDeserialize>
   10ed8:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   10edc:	b006      	add	sp, #24
   10ede:	bd70      	pop	{r4, r5, r6, pc}

00010ee0 <bsec_HumidityTemperatureCorrector_doStep>:
   10ee0:	b508      	push	{r3, lr}
   10ee2:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
   10ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10eea:	ed2d 8b04 	vpush	{d8-d9}
   10eee:	4603      	mov	r3, r0
   10ef0:	eeb0 9a60 	vmov.f32	s18, s1
   10ef4:	d937      	bls.n	10f66 <bsec_HumidityTemperatureCorrector_doStep+0x86>
   10ef6:	eddf 7a1d 	vldr	s15, [pc, #116]	; 10f6c <bsec_HumidityTemperatureCorrector_doStep+0x8c>
   10efa:	eeb4 1a67 	vcmp.f32	s2, s15
   10efe:	eef0 8a41 	vmov.f32	s17, s2
   10f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10f06:	bfc8      	it	gt
   10f08:	eef0 8a67 	vmovgt.f32	s17, s15
   10f0c:	edd3 7a02 	vldr	s15, [r3, #8]
   10f10:	eef5 7a40 	vcmp.f32	s15, #0.0
   10f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10f18:	bf08      	it	eq
   10f1a:	eef0 7a40 	vmoveq.f32	s15, s0
   10f1e:	ee30 8a67 	vsub.f32	s16, s0, s15
   10f22:	ed93 0a01 	vldr	s0, [r3, #4]
   10f26:	ee28 8a00 	vmul.f32	s16, s16, s0
   10f2a:	f103 0010 	add.w	r0, r3, #16
   10f2e:	ee38 8a27 	vadd.f32	s16, s16, s15
   10f32:	eeb0 0a68 	vmov.f32	s0, s17
   10f36:	ed83 8a02 	vstr	s16, [r3, #8]
   10f3a:	f000 fe5b 	bl	11bf4 <bsec_polyval>
   10f3e:	eef0 0a49 	vmov.f32	s1, s18
   10f42:	ee30 1a28 	vadd.f32	s2, s0, s17
   10f46:	eeb0 0a48 	vmov.f32	s0, s16
   10f4a:	f000 fdaf 	bl	11aac <bsec_convertHumidity>
   10f4e:	ecbd 8b04 	vpop	{d8-d9}
   10f52:	eddf 7a06 	vldr	s15, [pc, #24]	; 10f6c <bsec_HumidityTemperatureCorrector_doStep+0x8c>
   10f56:	eeb4 0a67 	vcmp.f32	s0, s15
   10f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10f5e:	bfc8      	it	gt
   10f60:	eeb0 0a67 	vmovgt.f32	s0, s15
   10f64:	bd08      	pop	{r3, pc}
   10f66:	eddf 8a02 	vldr	s17, [pc, #8]	; 10f70 <bsec_HumidityTemperatureCorrector_doStep+0x90>
   10f6a:	e7cf      	b.n	10f0c <bsec_HumidityTemperatureCorrector_doStep+0x2c>
   10f6c:	42c80000 	.word	0x42c80000
   10f70:	38d1b717 	.word	0x38d1b717

00010f74 <bsec_HumidityTemperatureCorrector_getConfiguration>:
   10f74:	b5f0      	push	{r4, r5, r6, r7, lr}
   10f76:	b085      	sub	sp, #20
   10f78:	ae04      	add	r6, sp, #16
   10f7a:	2401      	movs	r4, #1
   10f7c:	f806 4d09 	strb.w	r4, [r6, #-9]!
   10f80:	4605      	mov	r5, r0
   10f82:	4617      	mov	r7, r2
   10f84:	7800      	ldrb	r0, [r0, #0]
   10f86:	4632      	mov	r2, r6
   10f88:	460e      	mov	r6, r1
   10f8a:	f000 fd7f 	bl	11a8c <bsec_Serialization_prepareSerializationHeader>
   10f8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10f92:	9003      	str	r0, [sp, #12]
   10f94:	b1a3      	cbz	r3, 10fc0 <bsec_HumidityTemperatureCorrector_getConfiguration+0x4c>
   10f96:	3510      	adds	r5, #16
   10f98:	e003      	b.n	10fa2 <bsec_HumidityTemperatureCorrector_getConfiguration+0x2e>
   10f9a:	3401      	adds	r4, #1
   10f9c:	b2e4      	uxtb	r4, r4
   10f9e:	42a3      	cmp	r3, r4
   10fa0:	d30d      	bcc.n	10fbe <bsec_HumidityTemperatureCorrector_getConfiguration+0x4a>
   10fa2:	2c01      	cmp	r4, #1
   10fa4:	d1f9      	bne.n	10f9a <bsec_HumidityTemperatureCorrector_getConfiguration+0x26>
   10fa6:	ab03      	add	r3, sp, #12
   10fa8:	463a      	mov	r2, r7
   10faa:	4631      	mov	r1, r6
   10fac:	4628      	mov	r0, r5
   10fae:	f7fe ffe3 	bl	ff78 <bsec_m_Entity_serializeAndAdd>
   10fb2:	3401      	adds	r4, #1
   10fb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10fb8:	b2e4      	uxtb	r4, r4
   10fba:	42a3      	cmp	r3, r4
   10fbc:	d2f1      	bcs.n	10fa2 <bsec_HumidityTemperatureCorrector_getConfiguration+0x2e>
   10fbe:	9803      	ldr	r0, [sp, #12]
   10fc0:	a904      	add	r1, sp, #16
   10fc2:	2202      	movs	r2, #2
   10fc4:	f821 0d06 	strh.w	r0, [r1, #-6]!
   10fc8:	a802      	add	r0, sp, #8
   10fca:	f027 fffa 	bl	38fc2 <memcpy>
   10fce:	f89d 2008 	ldrb.w	r2, [sp, #8]
   10fd2:	f89d 3009 	ldrb.w	r3, [sp, #9]
   10fd6:	9803      	ldr	r0, [sp, #12]
   10fd8:	7032      	strb	r2, [r6, #0]
   10fda:	7073      	strb	r3, [r6, #1]
   10fdc:	b005      	add	sp, #20
   10fde:	bdf0      	pop	{r4, r5, r6, r7, pc}

00010fe0 <bsec_HumidityTemperatureCorrector_getState>:
   10fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
   10fe2:	b085      	sub	sp, #20
   10fe4:	ad04      	add	r5, sp, #16
   10fe6:	2401      	movs	r4, #1
   10fe8:	f805 4d09 	strb.w	r4, [r5, #-9]!
   10fec:	4606      	mov	r6, r0
   10fee:	4617      	mov	r7, r2
   10ff0:	7800      	ldrb	r0, [r0, #0]
   10ff2:	462a      	mov	r2, r5
   10ff4:	460d      	mov	r5, r1
   10ff6:	f000 fd49 	bl	11a8c <bsec_Serialization_prepareSerializationHeader>
   10ffa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10ffe:	9003      	str	r0, [sp, #12]
   11000:	b923      	cbnz	r3, 1100c <bsec_HumidityTemperatureCorrector_getState+0x2c>
   11002:	e013      	b.n	1102c <bsec_HumidityTemperatureCorrector_getState+0x4c>
   11004:	3401      	adds	r4, #1
   11006:	b2e4      	uxtb	r4, r4
   11008:	42a3      	cmp	r3, r4
   1100a:	d30e      	bcc.n	1102a <bsec_HumidityTemperatureCorrector_getState+0x4a>
   1100c:	2c01      	cmp	r4, #1
   1100e:	d1f9      	bne.n	11004 <bsec_HumidityTemperatureCorrector_getState+0x24>
   11010:	aa03      	add	r2, sp, #12
   11012:	4639      	mov	r1, r7
   11014:	4628      	mov	r0, r5
   11016:	ed96 0a02 	vldr	s0, [r6, #8]
   1101a:	f7fe fdef 	bl	fbfc <bsec_e_Entity_serializeAndAdd>
   1101e:	3401      	adds	r4, #1
   11020:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11024:	b2e4      	uxtb	r4, r4
   11026:	42a3      	cmp	r3, r4
   11028:	d2f0      	bcs.n	1100c <bsec_HumidityTemperatureCorrector_getState+0x2c>
   1102a:	9803      	ldr	r0, [sp, #12]
   1102c:	a904      	add	r1, sp, #16
   1102e:	2202      	movs	r2, #2
   11030:	f821 0d06 	strh.w	r0, [r1, #-6]!
   11034:	a802      	add	r0, sp, #8
   11036:	f027 ffc4 	bl	38fc2 <memcpy>
   1103a:	f89d 2008 	ldrb.w	r2, [sp, #8]
   1103e:	f89d 3009 	ldrb.w	r3, [sp, #9]
   11042:	9803      	ldr	r0, [sp, #12]
   11044:	702a      	strb	r2, [r5, #0]
   11046:	706b      	strb	r3, [r5, #1]
   11048:	b005      	add	sp, #20
   1104a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001104c <bsec_HumidityTemperatureCorrector_setState>:
   1104c:	b570      	push	{r4, r5, r6, lr}
   1104e:	b086      	sub	sp, #24
   11050:	ab04      	add	r3, sp, #16
   11052:	ad05      	add	r5, sp, #20
   11054:	4604      	mov	r4, r0
   11056:	7800      	ldrb	r0, [r0, #0]
   11058:	9300      	str	r3, [sp, #0]
   1105a:	9501      	str	r5, [sp, #4]
   1105c:	f10d 030f 	add.w	r3, sp, #15
   11060:	460e      	mov	r6, r1
   11062:	f000 fce5 	bl	11a30 <bsec_Serialization_checkSerializationHeader>
   11066:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   1106a:	b938      	cbnz	r0, 1107c <bsec_HumidityTemperatureCorrector_setState+0x30>
   1106c:	4630      	mov	r0, r6
   1106e:	4629      	mov	r1, r5
   11070:	f7fe fdaa 	bl	fbc8 <bsec_e_Entity_parseAndDeserialize>
   11074:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   11078:	ed84 0a02 	vstr	s0, [r4, #8]
   1107c:	b006      	add	sp, #24
   1107e:	bd70      	pop	{r4, r5, r6, pc}

00011080 <bsec_HumidityTemperatureCorrector_updateInterfaceDependency>:
   11080:	ee07 1a90 	vmov	s15, r1
   11084:	eddf 6a1e 	vldr	s13, [pc, #120]	; 11100 <bsec_HumidityTemperatureCorrector_updateInterfaceDependency+0x80>
   11088:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 11104 <bsec_HumidityTemperatureCorrector_updateInterfaceDependency+0x84>
   1108c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
   11090:	b510      	push	{r4, lr}
   11092:	eec6 7a87 	vdiv.f32	s15, s13, s14
   11096:	4604      	mov	r4, r0
   11098:	ed2d 8b02 	vpush	{d8}
   1109c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   110a0:	ee67 7a87 	vmul.f32	s15, s15, s14
   110a4:	b082      	sub	sp, #8
   110a6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   110aa:	ee80 0a27 	vdiv.f32	s0, s0, s15
   110ae:	f01e f9e3 	bl	2f478 <fminf>
   110b2:	eef0 8a40 	vmov.f32	s17, s0
   110b6:	ed9f 0a14 	vldr	s0, [pc, #80]	; 11108 <bsec_HumidityTemperatureCorrector_updateInterfaceDependency+0x88>
   110ba:	ee28 0a80 	vmul.f32	s0, s17, s0
   110be:	f01e fa19 	bl	2f4f4 <sinf>
   110c2:	ee20 8a00 	vmul.f32	s16, s0, s0
   110c6:	a802      	add	r0, sp, #8
   110c8:	ee68 7a08 	vmul.f32	s15, s16, s16
   110cc:	ee77 7a88 	vadd.f32	s15, s15, s16
   110d0:	ed60 7a01 	vstmdb	r0!, {s15}
   110d4:	f000 fd98 	bl	11c08 <bsec_b_sqrt>
   110d8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   110dc:	eef4 8a67 	vcmp.f32	s17, s15
   110e0:	ed9d 0a01 	vldr	s0, [sp, #4]
   110e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   110e8:	bf1c      	itt	ne
   110ea:	ee70 7a48 	vsubne.f32	s15, s0, s16
   110ee:	ee77 7aa7 	vaddne.f32	s15, s15, s15
   110f2:	edc4 7a01 	vstr	s15, [r4, #4]
   110f6:	b002      	add	sp, #8
   110f8:	ecbd 8b02 	vpop	{d8}
   110fc:	bd10      	pop	{r4, pc}
   110fe:	bf00      	nop
   11100:	42c80000 	.word	0x42c80000
   11104:	3c50d499 	.word	0x3c50d499
   11108:	3fc90fdb 	.word	0x3fc90fdb

0001110c <bsec_IaqEstimator_IaqEstimator>:
   1110c:	b430      	push	{r4, r5}
   1110e:	4913      	ldr	r1, [pc, #76]	; (1115c <bsec_IaqEstimator_IaqEstimator+0x50>)
   11110:	6301      	str	r1, [r0, #48]	; 0x30
   11112:	2502      	movs	r5, #2
   11114:	2400      	movs	r4, #0
   11116:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   1111a:	7005      	strb	r5, [r0, #0]
   1111c:	7104      	strb	r4, [r0, #4]
   1111e:	25e1      	movs	r5, #225	; 0xe1
   11120:	2419      	movs	r4, #25
   11122:	8041      	strh	r1, [r0, #2]
   11124:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
   11128:	80c5      	strh	r5, [r0, #6]
   1112a:	7204      	strb	r4, [r0, #8]
   1112c:	4d0c      	ldr	r5, [pc, #48]	; (11160 <bsec_IaqEstimator_IaqEstimator+0x54>)
   1112e:	6101      	str	r1, [r0, #16]
   11130:	f44f 74c8 	mov.w	r4, #400	; 0x190
   11134:	490b      	ldr	r1, [pc, #44]	; (11164 <bsec_IaqEstimator_IaqEstimator+0x58>)
   11136:	6145      	str	r5, [r0, #20]
   11138:	2200      	movs	r2, #0
   1113a:	f04f 557c 	mov.w	r5, #1056964608	; 0x3f000000
   1113e:	8304      	strh	r4, [r0, #24]
   11140:	61c1      	str	r1, [r0, #28]
   11142:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   11146:	4908      	ldr	r1, [pc, #32]	; (11168 <bsec_IaqEstimator_IaqEstimator+0x5c>)
   11148:	6205      	str	r5, [r0, #32]
   1114a:	8484      	strh	r4, [r0, #36]	; 0x24
   1114c:	60c2      	str	r2, [r0, #12]
   1114e:	6282      	str	r2, [r0, #40]	; 0x28
   11150:	62c2      	str	r2, [r0, #44]	; 0x2c
   11152:	6341      	str	r1, [r0, #52]	; 0x34
   11154:	6381      	str	r1, [r0, #56]	; 0x38
   11156:	bc30      	pop	{r4, r5}
   11158:	4770      	bx	lr
   1115a:	bf00      	nop
   1115c:	428551ec 	.word	0x428551ec
   11160:	41200000 	.word	0x41200000
   11164:	41700000 	.word	0x41700000
   11168:	41c80000 	.word	0x41c80000

0001116c <bsec_IaqEstimator_doStep>:
   1116c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11170:	ed91 7a00 	vldr	s14, [r1]
   11174:	edd1 6a02 	vldr	s13, [r1, #8]
   11178:	ed91 5a03 	vldr	s10, [r1, #12]
   1117c:	edd1 7a01 	vldr	s15, [r1, #4]
   11180:	ed2d 8b06 	vpush	{d8-d10}
   11184:	ee37 9a40 	vsub.f32	s18, s14, s0
   11188:	ee37 7a66 	vsub.f32	s14, s14, s13
   1118c:	460d      	mov	r5, r1
   1118e:	eec9 5a07 	vdiv.f32	s11, s18, s14
   11192:	88c1      	ldrh	r1, [r0, #6]
   11194:	9e10      	ldr	r6, [sp, #64]	; 0x40
   11196:	469a      	mov	sl, r3
   11198:	8843      	ldrh	r3, [r0, #2]
   1119a:	4604      	mov	r4, r0
   1119c:	4691      	mov	r9, r2
   1119e:	e9dd 870e 	ldrd	r8, r7, [sp, #56]	; 0x38
   111a2:	ee06 1a10 	vmov	s12, r1
   111a6:	7a01      	ldrb	r1, [r0, #8]
   111a8:	eeb8 6a46 	vcvt.f32.u32	s12, s12
   111ac:	ee06 1a90 	vmov	s13, r1
   111b0:	ee25 6a86 	vmul.f32	s12, s11, s12
   111b4:	eef8 6a66 	vcvt.f32.u32	s13, s13
   111b8:	ee09 3a90 	vmov	s19, r3
   111bc:	7903      	ldrb	r3, [r0, #4]
   111be:	eeb0 aa60 	vmov.f32	s20, s1
   111c2:	ee76 0a26 	vadd.f32	s1, s12, s13
   111c6:	ee06 3a90 	vmov	s13, r3
   111ca:	ee37 7ac0 	vsub.f32	s14, s15, s0
   111ce:	ee77 7ac5 	vsub.f32	s15, s15, s10
   111d2:	eeb8 0a66 	vcvt.f32.u32	s0, s13
   111d6:	eec7 8a27 	vdiv.f32	s17, s14, s15
   111da:	f01e f92f 	bl	2f43c <fmaxf>
   111de:	eef8 9a69 	vcvt.f32.u32	s19, s19
   111e2:	eef0 0a40 	vmov.f32	s1, s0
   111e6:	eeb0 0a69 	vmov.f32	s0, s19
   111ea:	f01e f945 	bl	2f478 <fminf>
   111ee:	7a23      	ldrb	r3, [r4, #8]
   111f0:	edd4 7a03 	vldr	s15, [r4, #12]
   111f4:	ee00 3a90 	vmov	s1, r3
   111f8:	7923      	ldrb	r3, [r4, #4]
   111fa:	ee29 9a27 	vmul.f32	s18, s18, s15
   111fe:	eef0 9a40 	vmov.f32	s19, s0
   11202:	eef8 0a60 	vcvt.f32.u32	s1, s1
   11206:	ee00 3a10 	vmov	s0, r3
   1120a:	ee79 0a20 	vadd.f32	s1, s18, s1
   1120e:	eeb8 0a40 	vcvt.f32.u32	s0, s0
   11212:	f01e f913 	bl	2f43c <fmaxf>
   11216:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1121a:	eeb4 aae7 	vcmpe.f32	s20, s15
   1121e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11222:	eeb0 8a40 	vmov.f32	s16, s0
   11226:	d45f      	bmi.n	112e8 <bsec_IaqEstimator_doStep+0x17c>
   11228:	edc4 9a0d 	vstr	s19, [r4, #52]	; 0x34
   1122c:	ed84 0a0e 	vstr	s0, [r4, #56]	; 0x38
   11230:	edc9 9a00 	vstr	s19, [r9]
   11234:	692b      	ldr	r3, [r5, #16]
   11236:	8b22      	ldrh	r2, [r4, #24]
   11238:	f8c9 3004 	str.w	r3, [r9, #4]
   1123c:	ed8a 8a00 	vstr	s16, [sl]
   11240:	692b      	ldr	r3, [r5, #16]
   11242:	f8ca 3004 	str.w	r3, [sl, #4]
   11246:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
   1124a:	ee00 2a10 	vmov	s0, r2
   1124e:	eef4 7ac8 	vcmpe.f32	s15, s16
   11252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11256:	eeb8 0a40 	vcvt.f32.u32	s0, s0
   1125a:	db40      	blt.n	112de <bsec_IaqEstimator_doStep+0x172>
   1125c:	edd4 0a04 	vldr	s1, [r4, #16]
   11260:	ee68 0a20 	vmul.f32	s1, s16, s1
   11264:	ee70 0a80 	vadd.f32	s1, s1, s0
   11268:	f01e f8e8 	bl	2f43c <fmaxf>
   1126c:	ed88 0a00 	vstr	s0, [r8]
   11270:	692a      	ldr	r2, [r5, #16]
   11272:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   11274:	f8c8 2004 	str.w	r2, [r8, #4]
   11278:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
   1127c:	edd4 0a0b 	vldr	s1, [r4, #44]	; 0x2c
   11280:	ee28 8a27 	vmul.f32	s16, s16, s15
   11284:	ee07 3a90 	vmov	s15, r3
   11288:	ee78 0a20 	vadd.f32	s1, s16, s1
   1128c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
   11290:	eeb8 8a67 	vcvt.f32.u32	s16, s15
   11294:	f01e fa22 	bl	2f6dc <powf>
   11298:	eef0 0a40 	vmov.f32	s1, s0
   1129c:	ed9f 0a24 	vldr	s0, [pc, #144]	; 11330 <bsec_IaqEstimator_doStep+0x1c4>
   112a0:	f01e f8cc 	bl	2f43c <fmaxf>
   112a4:	eef0 0a40 	vmov.f32	s1, s0
   112a8:	eeb0 0a48 	vmov.f32	s0, s16
   112ac:	f01e f8e4 	bl	2f478 <fminf>
   112b0:	eddf 7a20 	vldr	s15, [pc, #128]	; 11334 <bsec_IaqEstimator_doStep+0x1c8>
   112b4:	ed87 0a00 	vstr	s0, [r7]
   112b8:	ee28 7aa7 	vmul.f32	s14, s17, s15
   112bc:	ecbd 8b06 	vpop	{d8-d10}
   112c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
   112c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   112c8:	692b      	ldr	r3, [r5, #16]
   112ca:	607b      	str	r3, [r7, #4]
   112cc:	bfd8      	it	le
   112ce:	eef0 7a47 	vmovle.f32	s15, s14
   112d2:	edc6 7a00 	vstr	s15, [r6]
   112d6:	696b      	ldr	r3, [r5, #20]
   112d8:	6073      	str	r3, [r6, #4]
   112da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   112de:	edd4 0a05 	vldr	s1, [r4, #20]
   112e2:	ee68 0a20 	vmul.f32	s1, s16, s1
   112e6:	e7bf      	b.n	11268 <bsec_IaqEstimator_doStep+0xfc>
   112e8:	ed94 7a0d 	vldr	s14, [r4, #52]	; 0x34
   112ec:	eeb4 7ae9 	vcmpe.f32	s14, s19
   112f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   112f4:	ee2a aa0a 	vmul.f32	s20, s20, s20
   112f8:	d507      	bpl.n	1130a <bsec_IaqEstimator_doStep+0x19e>
   112fa:	ee77 7aca 	vsub.f32	s15, s15, s20
   112fe:	ee69 9a8a 	vmul.f32	s19, s19, s20
   11302:	ee67 7a87 	vmul.f32	s15, s15, s14
   11306:	ee77 9aa9 	vadd.f32	s19, s15, s19
   1130a:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
   1130e:	eef4 7ac8 	vcmpe.f32	s15, s16
   11312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11316:	d58b      	bpl.n	11230 <bsec_IaqEstimator_doStep+0xc4>
   11318:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   1131c:	ee70 0aca 	vsub.f32	s1, s1, s20
   11320:	ee28 8a0a 	vmul.f32	s16, s16, s20
   11324:	ee60 0aa7 	vmul.f32	s1, s1, s15
   11328:	ee30 8a88 	vadd.f32	s16, s1, s16
   1132c:	e780      	b.n	11230 <bsec_IaqEstimator_doStep+0xc4>
   1132e:	bf00      	nop
   11330:	3dcccccd 	.word	0x3dcccccd
   11334:	42c80000 	.word	0x42c80000

00011338 <bsec_IaqEstimator_getConfiguration>:
   11338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1133c:	b084      	sub	sp, #16
   1133e:	ac04      	add	r4, sp, #16
   11340:	2508      	movs	r5, #8
   11342:	f804 5d09 	strb.w	r5, [r4, #-9]!
   11346:	4606      	mov	r6, r0
   11348:	4617      	mov	r7, r2
   1134a:	7800      	ldrb	r0, [r0, #0]
   1134c:	4622      	mov	r2, r4
   1134e:	460d      	mov	r5, r1
   11350:	f000 fb9c 	bl	11a8c <bsec_Serialization_prepareSerializationHeader>
   11354:	f89d 2007 	ldrb.w	r2, [sp, #7]
   11358:	9003      	str	r0, [sp, #12]
   1135a:	b1ca      	cbz	r2, 11390 <bsec_IaqEstimator_getConfiguration+0x58>
   1135c:	2401      	movs	r4, #1
   1135e:	f106 0810 	add.w	r8, r6, #16
   11362:	1e63      	subs	r3, r4, #1
   11364:	2b07      	cmp	r3, #7
   11366:	d80e      	bhi.n	11386 <bsec_IaqEstimator_getConfiguration+0x4e>
   11368:	e8df f003 	tbb	[pc, r3]
   1136c:	515a3f48 	.word	0x515a3f48
   11370:	04232d36 	.word	0x04232d36
   11374:	aa03      	add	r2, sp, #12
   11376:	4639      	mov	r1, r7
   11378:	4628      	mov	r0, r5
   1137a:	ed96 0a08 	vldr	s0, [r6, #32]
   1137e:	f7fe fc3d 	bl	fbfc <bsec_e_Entity_serializeAndAdd>
   11382:	f89d 2007 	ldrb.w	r2, [sp, #7]
   11386:	3401      	adds	r4, #1
   11388:	b2e4      	uxtb	r4, r4
   1138a:	42a2      	cmp	r2, r4
   1138c:	d2e9      	bcs.n	11362 <bsec_IaqEstimator_getConfiguration+0x2a>
   1138e:	9803      	ldr	r0, [sp, #12]
   11390:	a904      	add	r1, sp, #16
   11392:	2202      	movs	r2, #2
   11394:	f821 0d06 	strh.w	r0, [r1, #-6]!
   11398:	a802      	add	r0, sp, #8
   1139a:	f027 fe12 	bl	38fc2 <memcpy>
   1139e:	f89d 2008 	ldrb.w	r2, [sp, #8]
   113a2:	f89d 3009 	ldrb.w	r3, [sp, #9]
   113a6:	9803      	ldr	r0, [sp, #12]
   113a8:	702a      	strb	r2, [r5, #0]
   113aa:	706b      	strb	r3, [r5, #1]
   113ac:	b004      	add	sp, #16
   113ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   113b2:	aa03      	add	r2, sp, #12
   113b4:	4639      	mov	r1, r7
   113b6:	4628      	mov	r0, r5
   113b8:	ed96 0a07 	vldr	s0, [r6, #28]
   113bc:	f7fe fc1e 	bl	fbfc <bsec_e_Entity_serializeAndAdd>
   113c0:	f89d 2007 	ldrb.w	r2, [sp, #7]
   113c4:	e7df      	b.n	11386 <bsec_IaqEstimator_getConfiguration+0x4e>
   113c6:	463a      	mov	r2, r7
   113c8:	ab03      	add	r3, sp, #12
   113ca:	4629      	mov	r1, r5
   113cc:	8b30      	ldrh	r0, [r6, #24]
   113ce:	f7fe fb9d 	bl	fb0c <bsec_c_Entity_serializeAndAdd>
   113d2:	f89d 2007 	ldrb.w	r2, [sp, #7]
   113d6:	e7d6      	b.n	11386 <bsec_IaqEstimator_getConfiguration+0x4e>
   113d8:	463a      	mov	r2, r7
   113da:	ab03      	add	r3, sp, #12
   113dc:	4629      	mov	r1, r5
   113de:	4640      	mov	r0, r8
   113e0:	f7fe fdca 	bl	ff78 <bsec_m_Entity_serializeAndAdd>
   113e4:	f89d 2007 	ldrb.w	r2, [sp, #7]
   113e8:	e7cd      	b.n	11386 <bsec_IaqEstimator_getConfiguration+0x4e>
   113ea:	463a      	mov	r2, r7
   113ec:	ab03      	add	r3, sp, #12
   113ee:	4629      	mov	r1, r5
   113f0:	8870      	ldrh	r0, [r6, #2]
   113f2:	f7fe fb8b 	bl	fb0c <bsec_c_Entity_serializeAndAdd>
   113f6:	f89d 2007 	ldrb.w	r2, [sp, #7]
   113fa:	e7c4      	b.n	11386 <bsec_IaqEstimator_getConfiguration+0x4e>
   113fc:	463a      	mov	r2, r7
   113fe:	ab03      	add	r3, sp, #12
   11400:	4629      	mov	r1, r5
   11402:	7930      	ldrb	r0, [r6, #4]
   11404:	f7fe fc32 	bl	fc6c <bsec_f_Entity_serializeAndAdd>
   11408:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1140c:	e7bb      	b.n	11386 <bsec_IaqEstimator_getConfiguration+0x4e>
   1140e:	463a      	mov	r2, r7
   11410:	ab03      	add	r3, sp, #12
   11412:	4629      	mov	r1, r5
   11414:	7a30      	ldrb	r0, [r6, #8]
   11416:	f7fe fc29 	bl	fc6c <bsec_f_Entity_serializeAndAdd>
   1141a:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1141e:	e7b2      	b.n	11386 <bsec_IaqEstimator_getConfiguration+0x4e>
   11420:	463a      	mov	r2, r7
   11422:	ab03      	add	r3, sp, #12
   11424:	4629      	mov	r1, r5
   11426:	88f0      	ldrh	r0, [r6, #6]
   11428:	f7fe fb70 	bl	fb0c <bsec_c_Entity_serializeAndAdd>
   1142c:	f89d 2007 	ldrb.w	r2, [sp, #7]
   11430:	e7a9      	b.n	11386 <bsec_IaqEstimator_getConfiguration+0x4e>
   11432:	bf00      	nop

00011434 <bsec_IaqEstimator_getState>:
   11434:	b5f0      	push	{r4, r5, r6, r7, lr}
   11436:	b085      	sub	sp, #20
   11438:	ac04      	add	r4, sp, #16
   1143a:	2502      	movs	r5, #2
   1143c:	f804 5d09 	strb.w	r5, [r4, #-9]!
   11440:	4606      	mov	r6, r0
   11442:	4617      	mov	r7, r2
   11444:	7800      	ldrb	r0, [r0, #0]
   11446:	4622      	mov	r2, r4
   11448:	460d      	mov	r5, r1
   1144a:	f000 fb1f 	bl	11a8c <bsec_Serialization_prepareSerializationHeader>
   1144e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11452:	9003      	str	r0, [sp, #12]
   11454:	b303      	cbz	r3, 11498 <bsec_IaqEstimator_getState+0x64>
   11456:	2401      	movs	r4, #1
   11458:	e00e      	b.n	11478 <bsec_IaqEstimator_getState+0x44>
   1145a:	2c02      	cmp	r4, #2
   1145c:	d108      	bne.n	11470 <bsec_IaqEstimator_getState+0x3c>
   1145e:	aa03      	add	r2, sp, #12
   11460:	4639      	mov	r1, r7
   11462:	4628      	mov	r0, r5
   11464:	ed96 0a0e 	vldr	s0, [r6, #56]	; 0x38
   11468:	f7fe fbc8 	bl	fbfc <bsec_e_Entity_serializeAndAdd>
   1146c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11470:	3401      	adds	r4, #1
   11472:	b2e4      	uxtb	r4, r4
   11474:	42a3      	cmp	r3, r4
   11476:	d30e      	bcc.n	11496 <bsec_IaqEstimator_getState+0x62>
   11478:	2c01      	cmp	r4, #1
   1147a:	d1ee      	bne.n	1145a <bsec_IaqEstimator_getState+0x26>
   1147c:	aa03      	add	r2, sp, #12
   1147e:	4639      	mov	r1, r7
   11480:	4628      	mov	r0, r5
   11482:	ed96 0a0d 	vldr	s0, [r6, #52]	; 0x34
   11486:	f7fe fbb9 	bl	fbfc <bsec_e_Entity_serializeAndAdd>
   1148a:	3401      	adds	r4, #1
   1148c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11490:	b2e4      	uxtb	r4, r4
   11492:	42a3      	cmp	r3, r4
   11494:	d2f0      	bcs.n	11478 <bsec_IaqEstimator_getState+0x44>
   11496:	9803      	ldr	r0, [sp, #12]
   11498:	a904      	add	r1, sp, #16
   1149a:	2202      	movs	r2, #2
   1149c:	f821 0d06 	strh.w	r0, [r1, #-6]!
   114a0:	a802      	add	r0, sp, #8
   114a2:	f027 fd8e 	bl	38fc2 <memcpy>
   114a6:	f89d 2008 	ldrb.w	r2, [sp, #8]
   114aa:	f89d 3009 	ldrb.w	r3, [sp, #9]
   114ae:	9803      	ldr	r0, [sp, #12]
   114b0:	702a      	strb	r2, [r5, #0]
   114b2:	706b      	strb	r3, [r5, #1]
   114b4:	b005      	add	sp, #20
   114b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000114b8 <bsec_IaqEstimator_setState>:
   114b8:	b570      	push	{r4, r5, r6, lr}
   114ba:	b086      	sub	sp, #24
   114bc:	ab04      	add	r3, sp, #16
   114be:	ad05      	add	r5, sp, #20
   114c0:	4604      	mov	r4, r0
   114c2:	7800      	ldrb	r0, [r0, #0]
   114c4:	9300      	str	r3, [sp, #0]
   114c6:	9501      	str	r5, [sp, #4]
   114c8:	f10d 030f 	add.w	r3, sp, #15
   114cc:	460e      	mov	r6, r1
   114ce:	f000 faaf 	bl	11a30 <bsec_Serialization_checkSerializationHeader>
   114d2:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   114d6:	b968      	cbnz	r0, 114f4 <bsec_IaqEstimator_setState+0x3c>
   114d8:	4629      	mov	r1, r5
   114da:	4630      	mov	r0, r6
   114dc:	f7fe fb74 	bl	fbc8 <bsec_e_Entity_parseAndDeserialize>
   114e0:	4630      	mov	r0, r6
   114e2:	4629      	mov	r1, r5
   114e4:	ed84 0a0d 	vstr	s0, [r4, #52]	; 0x34
   114e8:	f7fe fb6e 	bl	fbc8 <bsec_e_Entity_parseAndDeserialize>
   114ec:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   114f0:	ed84 0a0e 	vstr	s0, [r4, #56]	; 0x38
   114f4:	b006      	add	sp, #24
   114f6:	bd70      	pop	{r4, r5, r6, pc}

000114f8 <bsec_IaqEstimator_updateInterfaceDependency>:
   114f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   114fc:	4299      	cmp	r1, r3
   114fe:	d04e      	beq.n	1159e <bsec_IaqEstimator_updateInterfaceDependency+0xa6>
   11500:	b5f0      	push	{r4, r5, r6, r7, lr}
   11502:	ed2d 8b02 	vpush	{d8}
   11506:	88c3      	ldrh	r3, [r0, #6]
   11508:	7a05      	ldrb	r5, [r0, #8]
   1150a:	69c6      	ldr	r6, [r0, #28]
   1150c:	6a07      	ldr	r7, [r0, #32]
   1150e:	442b      	add	r3, r5
   11510:	ee07 3a90 	vmov	s15, r3
   11514:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
   11518:	b083      	sub	sp, #12
   1151a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
   1151e:	d042      	beq.n	115a6 <bsec_IaqEstimator_updateInterfaceDependency+0xae>
   11520:	f5b1 6fe1 	cmp.w	r1, #1800	; 0x708
   11524:	d03c      	beq.n	115a0 <bsec_IaqEstimator_updateInterfaceDependency+0xa8>
   11526:	2964      	cmp	r1, #100	; 0x64
   11528:	d03a      	beq.n	115a0 <bsec_IaqEstimator_updateInterfaceDependency+0xa8>
   1152a:	4b20      	ldr	r3, [pc, #128]	; (115ac <bsec_IaqEstimator_updateInterfaceDependency+0xb4>)
   1152c:	9300      	str	r3, [sp, #0]
   1152e:	4604      	mov	r4, r0
   11530:	4668      	mov	r0, sp
   11532:	f000 fb55 	bl	11be0 <bsec_log10>
   11536:	ee07 5a90 	vmov	s15, r5
   1153a:	ed9d 0a00 	vldr	s0, [sp]
   1153e:	eef8 8a67 	vcvt.f32.u32	s17, s15
   11542:	f01d ff6f 	bl	2f424 <fabsf>
   11546:	ee78 8a68 	vsub.f32	s17, s16, s17
   1154a:	ad02      	add	r5, sp, #8
   1154c:	ee88 0a80 	vdiv.f32	s0, s17, s0
   11550:	f845 6d04 	str.w	r6, [r5, #-4]!
   11554:	4628      	mov	r0, r5
   11556:	ed84 0a03 	vstr	s0, [r4, #12]
   1155a:	f000 fb41 	bl	11be0 <bsec_log10>
   1155e:	4668      	mov	r0, sp
   11560:	9700      	str	r7, [sp, #0]
   11562:	f000 fb3d 	bl	11be0 <bsec_log10>
   11566:	eddd 7a01 	vldr	s15, [sp, #4]
   1156a:	ed9d 7a00 	vldr	s14, [sp]
   1156e:	9601      	str	r6, [sp, #4]
   11570:	ee77 7ac7 	vsub.f32	s15, s15, s14
   11574:	4628      	mov	r0, r5
   11576:	ee87 7aa8 	vdiv.f32	s14, s15, s17
   1157a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
   1157e:	f000 fb2f 	bl	11be0 <bsec_log10>
   11582:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
   11586:	eddd 7a01 	vldr	s15, [sp, #4]
   1158a:	ee28 8a07 	vmul.f32	s16, s16, s14
   1158e:	ee37 8ac8 	vsub.f32	s16, s15, s16
   11592:	ed84 8a0b 	vstr	s16, [r4, #44]	; 0x2c
   11596:	b003      	add	sp, #12
   11598:	ecbd 8b02 	vpop	{d8}
   1159c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1159e:	4770      	bx	lr
   115a0:	4b03      	ldr	r3, [pc, #12]	; (115b0 <bsec_IaqEstimator_updateInterfaceDependency+0xb8>)
   115a2:	9300      	str	r3, [sp, #0]
   115a4:	e7c3      	b.n	1152e <bsec_IaqEstimator_updateInterfaceDependency+0x36>
   115a6:	4b03      	ldr	r3, [pc, #12]	; (115b4 <bsec_IaqEstimator_updateInterfaceDependency+0xbc>)
   115a8:	9300      	str	r3, [sp, #0]
   115aa:	e7c0      	b.n	1152e <bsec_IaqEstimator_updateInterfaceDependency+0x36>
   115ac:	3f464c30 	.word	0x3f464c30
   115b0:	3f19999a 	.word	0x3f19999a
   115b4:	3f23d70a 	.word	0x3f23d70a

000115b8 <bsec_b_IaqEstimator_configure>:
   115b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   115bc:	b087      	sub	sp, #28
   115be:	ab04      	add	r3, sp, #16
   115c0:	ae05      	add	r6, sp, #20
   115c2:	4605      	mov	r5, r0
   115c4:	7800      	ldrb	r0, [r0, #0]
   115c6:	9300      	str	r3, [sp, #0]
   115c8:	9601      	str	r6, [sp, #4]
   115ca:	f10d 030f 	add.w	r3, sp, #15
   115ce:	460f      	mov	r7, r1
   115d0:	f000 fa2e 	bl	11a30 <bsec_Serialization_checkSerializationHeader>
   115d4:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   115d8:	bb10      	cbnz	r0, 11620 <bsec_b_IaqEstimator_configure+0x68>
   115da:	4604      	mov	r4, r0
   115dc:	f105 0810 	add.w	r8, r5, #16
   115e0:	fa5f f984 	uxtb.w	r9, r4
   115e4:	f109 0301 	add.w	r3, r9, #1
   115e8:	b2db      	uxtb	r3, r3
   115ea:	3b02      	subs	r3, #2
   115ec:	2b06      	cmp	r3, #6
   115ee:	d805      	bhi.n	115fc <bsec_b_IaqEstimator_configure+0x44>
   115f0:	e8df f003 	tbb	[pc, r3]
   115f4:	262c3238 	.word	0x262c3238
   115f8:	1920      	.short	0x1920
   115fa:	0e          	.byte	0x0e
   115fb:	00          	.byte	0x00
   115fc:	4631      	mov	r1, r6
   115fe:	4638      	mov	r0, r7
   11600:	f7fe fb20 	bl	fc44 <bsec_f_Entity_parseAndDeserialize>
   11604:	f1b9 0f07 	cmp.w	r9, #7
   11608:	7128      	strb	r0, [r5, #4]
   1160a:	d031      	beq.n	11670 <bsec_b_IaqEstimator_configure+0xb8>
   1160c:	3401      	adds	r4, #1
   1160e:	e7e7      	b.n	115e0 <bsec_b_IaqEstimator_configure+0x28>
   11610:	4638      	mov	r0, r7
   11612:	4631      	mov	r1, r6
   11614:	f7fe fad8 	bl	fbc8 <bsec_e_Entity_parseAndDeserialize>
   11618:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   1161c:	ed85 0a08 	vstr	s0, [r5, #32]
   11620:	b007      	add	sp, #28
   11622:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11626:	4631      	mov	r1, r6
   11628:	4638      	mov	r0, r7
   1162a:	f7fe facd 	bl	fbc8 <bsec_e_Entity_parseAndDeserialize>
   1162e:	ed85 0a07 	vstr	s0, [r5, #28]
   11632:	e7eb      	b.n	1160c <bsec_b_IaqEstimator_configure+0x54>
   11634:	4631      	mov	r1, r6
   11636:	4638      	mov	r0, r7
   11638:	f7fe fa50 	bl	fadc <bsec_c_Entity_parseAndDeserialize>
   1163c:	8328      	strh	r0, [r5, #24]
   1163e:	e7e5      	b.n	1160c <bsec_b_IaqEstimator_configure+0x54>
   11640:	4642      	mov	r2, r8
   11642:	4631      	mov	r1, r6
   11644:	4638      	mov	r0, r7
   11646:	f7fe fd33 	bl	100b0 <bsec_p_Entity_parseAndDeserialize>
   1164a:	e7df      	b.n	1160c <bsec_b_IaqEstimator_configure+0x54>
   1164c:	4631      	mov	r1, r6
   1164e:	4638      	mov	r0, r7
   11650:	f7fe faf8 	bl	fc44 <bsec_f_Entity_parseAndDeserialize>
   11654:	7228      	strb	r0, [r5, #8]
   11656:	e7d9      	b.n	1160c <bsec_b_IaqEstimator_configure+0x54>
   11658:	4631      	mov	r1, r6
   1165a:	4638      	mov	r0, r7
   1165c:	f7fe fa3e 	bl	fadc <bsec_c_Entity_parseAndDeserialize>
   11660:	80e8      	strh	r0, [r5, #6]
   11662:	e7d3      	b.n	1160c <bsec_b_IaqEstimator_configure+0x54>
   11664:	4631      	mov	r1, r6
   11666:	4638      	mov	r0, r7
   11668:	f7fe fa38 	bl	fadc <bsec_c_Entity_parseAndDeserialize>
   1166c:	8068      	strh	r0, [r5, #2]
   1166e:	e7cd      	b.n	1160c <bsec_b_IaqEstimator_configure+0x54>
   11670:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   11674:	e7d4      	b.n	11620 <bsec_b_IaqEstimator_configure+0x68>
   11676:	bf00      	nop

00011678 <bsec_SensorStatusTracker_SensorStatusTracker>:
   11678:	b430      	push	{r4, r5}
   1167a:	490c      	ldr	r1, [pc, #48]	; (116ac <bsec_SensorStatusTracker_SensorStatusTracker+0x34>)
   1167c:	61c1      	str	r1, [r0, #28]
   1167e:	2505      	movs	r5, #5
   11680:	2401      	movs	r4, #1
   11682:	2200      	movs	r2, #0
   11684:	2100      	movs	r1, #0
   11686:	7005      	strb	r5, [r0, #0]
   11688:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
   1168c:	2500      	movs	r5, #0
   1168e:	2400      	movs	r4, #0
   11690:	e9c0 4508 	strd	r4, r5, [r0, #32]
   11694:	e9c0 4502 	strd	r4, r5, [r0, #8]
   11698:	6182      	str	r2, [r0, #24]
   1169a:	6142      	str	r2, [r0, #20]
   1169c:	6102      	str	r2, [r0, #16]
   1169e:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
   116a2:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
   116a6:	bc30      	pop	{r4, r5}
   116a8:	4770      	bx	lr
   116aa:	bf00      	nop
   116ac:	538bb2c9 	.word	0x538bb2c9

000116b0 <bsec_SensorStatusTracker_doStep>:
   116b0:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
   116b4:	e9d0 6702 	ldrd	r6, r7, [r0, #8]
   116b8:	4680      	mov	r8, r0
   116ba:	e9d0 0108 	ldrd	r0, r1, [r0, #32]
   116be:	4692      	mov	sl, r2
   116c0:	1b92      	subs	r2, r2, r6
   116c2:	469b      	mov	fp, r3
   116c4:	eb63 0307 	sbc.w	r3, r3, r7
   116c8:	4290      	cmp	r0, r2
   116ca:	eb71 0303 	sbcs.w	r3, r1, r3
   116ce:	9d08      	ldr	r5, [sp, #32]
   116d0:	db03      	blt.n	116da <bsec_SensorStatusTracker_doStep+0x2a>
   116d2:	45b2      	cmp	sl, r6
   116d4:	eb7b 0307 	sbcs.w	r3, fp, r7
   116d8:	da65      	bge.n	117a6 <bsec_SensorStatusTracker_doStep+0xf6>
   116da:	2300      	movs	r3, #0
   116dc:	2200      	movs	r2, #0
   116de:	f8c8 2010 	str.w	r2, [r8, #16]
   116e2:	f888 302a 	strb.w	r3, [r8, #42]	; 0x2a
   116e6:	461c      	mov	r4, r3
   116e8:	e9c8 ab02 	strd	sl, fp, [r8, #8]
   116ec:	f898 6029 	ldrb.w	r6, [r8, #41]	; 0x29
   116f0:	b9d6      	cbnz	r6, 11728 <bsec_SensorStatusTracker_doStep+0x78>
   116f2:	e9d8 2302 	ldrd	r2, r3, [r8, #8]
   116f6:	ebba 0002 	subs.w	r0, sl, r2
   116fa:	eb6b 0103 	sbc.w	r1, fp, r3
   116fe:	f000 fc41 	bl	11f84 <__aeabi_l2f>
   11702:	edd8 7a05 	vldr	s15, [r8, #20]
   11706:	ed98 7a06 	vldr	s14, [r8, #24]
   1170a:	ee06 0a90 	vmov	s13, r0
   1170e:	ee76 7aa7 	vadd.f32	s15, s13, s15
   11712:	eef4 7ac7 	vcmpe.f32	s15, s14
   11716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1171a:	bfa8      	it	ge
   1171c:	2601      	movge	r6, #1
   1171e:	edc8 7a05 	vstr	s15, [r8, #20]
   11722:	bfa8      	it	ge
   11724:	f888 6029 	strbge.w	r6, [r8, #41]	; 0x29
   11728:	b9d4      	cbnz	r4, 11760 <bsec_SensorStatusTracker_doStep+0xb0>
   1172a:	e9d8 3402 	ldrd	r3, r4, [r8, #8]
   1172e:	ebba 0003 	subs.w	r0, sl, r3
   11732:	eb6b 0104 	sbc.w	r1, fp, r4
   11736:	f000 fc25 	bl	11f84 <__aeabi_l2f>
   1173a:	edd8 7a04 	vldr	s15, [r8, #16]
   1173e:	ed98 7a07 	vldr	s14, [r8, #28]
   11742:	ee06 0a90 	vmov	s13, r0
   11746:	ee76 7aa7 	vadd.f32	s15, s13, s15
   1174a:	eef4 7ac7 	vcmpe.f32	s15, s14
   1174e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11752:	bfa8      	it	ge
   11754:	2301      	movge	r3, #1
   11756:	edc8 7a04 	vstr	s15, [r8, #16]
   1175a:	bfa8      	it	ge
   1175c:	f888 302a 	strbge.w	r3, [r8, #42]	; 0x2a
   11760:	f1ba 0f01 	cmp.w	sl, #1
   11764:	f17b 0300 	sbcs.w	r3, fp, #0
   11768:	db23      	blt.n	117b2 <bsec_SensorStatusTracker_doStep+0x102>
   1176a:	e9c8 ab02 	strd	sl, fp, [r8, #8]
   1176e:	702e      	strb	r6, [r5, #0]
   11770:	f898 302a 	ldrb.w	r3, [r8, #42]	; 0x2a
   11774:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11776:	7013      	strb	r3, [r2, #0]
   11778:	b933      	cbnz	r3, 11788 <bsec_SensorStatusTracker_doStep+0xd8>
   1177a:	edd8 7a07 	vldr	s15, [r8, #28]
   1177e:	eef5 7a40 	vcmp.f32	s15, #0.0
   11782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11786:	d105      	bne.n	11794 <bsec_SensorStatusTracker_doStep+0xe4>
   11788:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1178a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   1178e:	6013      	str	r3, [r2, #0]
   11790:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
   11794:	edd8 6a04 	vldr	s13, [r8, #16]
   11798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1179a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   1179e:	ed83 7a00 	vstr	s14, [r3]
   117a2:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
   117a6:	ea56 0307 	orrs.w	r3, r6, r7
   117aa:	f898 402a 	ldrb.w	r4, [r8, #42]	; 0x2a
   117ae:	d19d      	bne.n	116ec <bsec_SensorStatusTracker_doStep+0x3c>
   117b0:	e79a      	b.n	116e8 <bsec_SensorStatusTracker_doStep+0x38>
   117b2:	2201      	movs	r2, #1
   117b4:	2300      	movs	r3, #0
   117b6:	e9c8 2302 	strd	r2, r3, [r8, #8]
   117ba:	e7d8      	b.n	1176e <bsec_SensorStatusTracker_doStep+0xbe>

000117bc <bsec_SensorStatusTracker_getConfiguration>:
   117bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   117be:	b085      	sub	sp, #20
   117c0:	ac04      	add	r4, sp, #16
   117c2:	2502      	movs	r5, #2
   117c4:	f804 5d09 	strb.w	r5, [r4, #-9]!
   117c8:	4606      	mov	r6, r0
   117ca:	4617      	mov	r7, r2
   117cc:	7800      	ldrb	r0, [r0, #0]
   117ce:	4622      	mov	r2, r4
   117d0:	460d      	mov	r5, r1
   117d2:	f000 f95b 	bl	11a8c <bsec_Serialization_prepareSerializationHeader>
   117d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   117da:	9003      	str	r0, [sp, #12]
   117dc:	b303      	cbz	r3, 11820 <bsec_SensorStatusTracker_getConfiguration+0x64>
   117de:	2401      	movs	r4, #1
   117e0:	e00e      	b.n	11800 <bsec_SensorStatusTracker_getConfiguration+0x44>
   117e2:	2c02      	cmp	r4, #2
   117e4:	d108      	bne.n	117f8 <bsec_SensorStatusTracker_getConfiguration+0x3c>
   117e6:	ab03      	add	r3, sp, #12
   117e8:	463a      	mov	r2, r7
   117ea:	4629      	mov	r1, r5
   117ec:	f996 0028 	ldrsb.w	r0, [r6, #40]	; 0x28
   117f0:	f7fe fb8c 	bl	ff0c <bsec_l_Entity_serializeAndAdd>
   117f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   117f8:	3401      	adds	r4, #1
   117fa:	b2e4      	uxtb	r4, r4
   117fc:	42a3      	cmp	r3, r4
   117fe:	d30e      	bcc.n	1181e <bsec_SensorStatusTracker_getConfiguration+0x62>
   11800:	2c01      	cmp	r4, #1
   11802:	d1ee      	bne.n	117e2 <bsec_SensorStatusTracker_getConfiguration+0x26>
   11804:	aa03      	add	r2, sp, #12
   11806:	4639      	mov	r1, r7
   11808:	4628      	mov	r0, r5
   1180a:	ed96 0a06 	vldr	s0, [r6, #24]
   1180e:	f7fe f9f5 	bl	fbfc <bsec_e_Entity_serializeAndAdd>
   11812:	3401      	adds	r4, #1
   11814:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11818:	b2e4      	uxtb	r4, r4
   1181a:	42a3      	cmp	r3, r4
   1181c:	d2f0      	bcs.n	11800 <bsec_SensorStatusTracker_getConfiguration+0x44>
   1181e:	9803      	ldr	r0, [sp, #12]
   11820:	a904      	add	r1, sp, #16
   11822:	2202      	movs	r2, #2
   11824:	f821 0d06 	strh.w	r0, [r1, #-6]!
   11828:	a802      	add	r0, sp, #8
   1182a:	f027 fbca 	bl	38fc2 <memcpy>
   1182e:	f89d 2008 	ldrb.w	r2, [sp, #8]
   11832:	f89d 3009 	ldrb.w	r3, [sp, #9]
   11836:	9803      	ldr	r0, [sp, #12]
   11838:	702a      	strb	r2, [r5, #0]
   1183a:	706b      	strb	r3, [r5, #1]
   1183c:	b005      	add	sp, #20
   1183e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00011840 <bsec_SensorStatusTracker_getState>:
   11840:	b5f0      	push	{r4, r5, r6, r7, lr}
   11842:	b087      	sub	sp, #28
   11844:	ac06      	add	r4, sp, #24
   11846:	2505      	movs	r5, #5
   11848:	f804 5d09 	strb.w	r5, [r4, #-9]!
   1184c:	4606      	mov	r6, r0
   1184e:	4617      	mov	r7, r2
   11850:	7800      	ldrb	r0, [r0, #0]
   11852:	4622      	mov	r2, r4
   11854:	460d      	mov	r5, r1
   11856:	f000 f919 	bl	11a8c <bsec_Serialization_prepareSerializationHeader>
   1185a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1185e:	9005      	str	r0, [sp, #20]
   11860:	b1b2      	cbz	r2, 11890 <bsec_SensorStatusTracker_getState+0x50>
   11862:	2401      	movs	r4, #1
   11864:	1e63      	subs	r3, r4, #1
   11866:	2b04      	cmp	r3, #4
   11868:	d80d      	bhi.n	11886 <bsec_SensorStatusTracker_getState+0x46>
   1186a:	e8df f003 	tbb	[pc, r3]
   1186e:	213f      	.short	0x213f
   11870:	2b35      	.short	0x2b35
   11872:	03          	.byte	0x03
   11873:	00          	.byte	0x00
   11874:	463a      	mov	r2, r7
   11876:	ab05      	add	r3, sp, #20
   11878:	4629      	mov	r1, r5
   1187a:	f896 002a 	ldrb.w	r0, [r6, #42]	; 0x2a
   1187e:	f7fe fa5b 	bl	fd38 <bsec_h_Entity_serializeAndAdd>
   11882:	f89d 200f 	ldrb.w	r2, [sp, #15]
   11886:	3401      	adds	r4, #1
   11888:	b2e4      	uxtb	r4, r4
   1188a:	42a2      	cmp	r2, r4
   1188c:	d2ea      	bcs.n	11864 <bsec_SensorStatusTracker_getState+0x24>
   1188e:	9805      	ldr	r0, [sp, #20]
   11890:	a906      	add	r1, sp, #24
   11892:	2202      	movs	r2, #2
   11894:	f821 0d06 	strh.w	r0, [r1, #-6]!
   11898:	a804      	add	r0, sp, #16
   1189a:	f027 fb92 	bl	38fc2 <memcpy>
   1189e:	f89d 2010 	ldrb.w	r2, [sp, #16]
   118a2:	f89d 3011 	ldrb.w	r3, [sp, #17]
   118a6:	9805      	ldr	r0, [sp, #20]
   118a8:	702a      	strb	r2, [r5, #0]
   118aa:	706b      	strb	r3, [r5, #1]
   118ac:	b007      	add	sp, #28
   118ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   118b0:	aa05      	add	r2, sp, #20
   118b2:	4639      	mov	r1, r7
   118b4:	4628      	mov	r0, r5
   118b6:	ed96 0a05 	vldr	s0, [r6, #20]
   118ba:	f7fe f99f 	bl	fbfc <bsec_e_Entity_serializeAndAdd>
   118be:	f89d 200f 	ldrb.w	r2, [sp, #15]
   118c2:	e7e0      	b.n	11886 <bsec_SensorStatusTracker_getState+0x46>
   118c4:	463a      	mov	r2, r7
   118c6:	ab05      	add	r3, sp, #20
   118c8:	4629      	mov	r1, r5
   118ca:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
   118ce:	f7fe fa33 	bl	fd38 <bsec_h_Entity_serializeAndAdd>
   118d2:	f89d 200f 	ldrb.w	r2, [sp, #15]
   118d6:	e7d6      	b.n	11886 <bsec_SensorStatusTracker_getState+0x46>
   118d8:	aa05      	add	r2, sp, #20
   118da:	4639      	mov	r1, r7
   118dc:	4628      	mov	r0, r5
   118de:	ed96 0a04 	vldr	s0, [r6, #16]
   118e2:	f7fe f98b 	bl	fbfc <bsec_e_Entity_serializeAndAdd>
   118e6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   118ea:	e7cc      	b.n	11886 <bsec_SensorStatusTracker_getState+0x46>
   118ec:	ab05      	add	r3, sp, #20
   118ee:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
   118f2:	462a      	mov	r2, r5
   118f4:	9300      	str	r3, [sp, #0]
   118f6:	463b      	mov	r3, r7
   118f8:	f7fe f9f2 	bl	fce0 <bsec_g_Entity_serializeAndAdd>
   118fc:	f89d 200f 	ldrb.w	r2, [sp, #15]
   11900:	e7c1      	b.n	11886 <bsec_SensorStatusTracker_getState+0x46>
   11902:	bf00      	nop

00011904 <bsec_SensorStatusTracker_setState>:
   11904:	b5f0      	push	{r4, r5, r6, r7, lr}
   11906:	b087      	sub	sp, #28
   11908:	ab04      	add	r3, sp, #16
   1190a:	ae05      	add	r6, sp, #20
   1190c:	4605      	mov	r5, r0
   1190e:	7800      	ldrb	r0, [r0, #0]
   11910:	9300      	str	r3, [sp, #0]
   11912:	9601      	str	r6, [sp, #4]
   11914:	f10d 030f 	add.w	r3, sp, #15
   11918:	460f      	mov	r7, r1
   1191a:	f000 f889 	bl	11a30 <bsec_Serialization_checkSerializationHeader>
   1191e:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   11922:	b9c3      	cbnz	r3, 11956 <bsec_SensorStatusTracker_setState+0x52>
   11924:	2401      	movs	r4, #1
   11926:	1ea3      	subs	r3, r4, #2
   11928:	4631      	mov	r1, r6
   1192a:	4638      	mov	r0, r7
   1192c:	2b03      	cmp	r3, #3
   1192e:	d803      	bhi.n	11938 <bsec_SensorStatusTracker_setState+0x34>
   11930:	e8df f003 	tbb	[pc, r3]
   11934:	0b14191e 	.word	0x0b14191e
   11938:	f7fe f9b6 	bl	fca8 <bsec_g_Entity_parseAndDeserialize>
   1193c:	2c05      	cmp	r4, #5
   1193e:	e9c5 0102 	strd	r0, r1, [r5, #8]
   11942:	d01a      	beq.n	1197a <bsec_SensorStatusTracker_setState+0x76>
   11944:	3401      	adds	r4, #1
   11946:	b2e4      	uxtb	r4, r4
   11948:	e7ed      	b.n	11926 <bsec_SensorStatusTracker_setState+0x22>
   1194a:	f7fe f9ed 	bl	fd28 <bsec_h_Entity_parseAndDeserialize>
   1194e:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   11952:	f885 002a 	strb.w	r0, [r5, #42]	; 0x2a
   11956:	4618      	mov	r0, r3
   11958:	b007      	add	sp, #28
   1195a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1195c:	f7fe f9e4 	bl	fd28 <bsec_h_Entity_parseAndDeserialize>
   11960:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
   11964:	e7ee      	b.n	11944 <bsec_SensorStatusTracker_setState+0x40>
   11966:	f7fe f92f 	bl	fbc8 <bsec_e_Entity_parseAndDeserialize>
   1196a:	ed85 0a04 	vstr	s0, [r5, #16]
   1196e:	e7e9      	b.n	11944 <bsec_SensorStatusTracker_setState+0x40>
   11970:	f7fe f92a 	bl	fbc8 <bsec_e_Entity_parseAndDeserialize>
   11974:	ed85 0a05 	vstr	s0, [r5, #20]
   11978:	e7e4      	b.n	11944 <bsec_SensorStatusTracker_setState+0x40>
   1197a:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   1197e:	e7ea      	b.n	11956 <bsec_SensorStatusTracker_setState+0x52>

00011980 <bsec_SensorStatusTracker_updateInterfaceDependency>:
   11980:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11984:	4299      	cmp	r1, r3
   11986:	d018      	beq.n	119ba <bsec_SensorStatusTracker_updateInterfaceDependency+0x3a>
   11988:	f990 2028 	ldrsb.w	r2, [r0, #40]	; 0x28
   1198c:	4b13      	ldr	r3, [pc, #76]	; (119dc <bsec_SensorStatusTracker_updateInterfaceDependency+0x5c>)
   1198e:	fb01 f202 	mul.w	r2, r1, r2
   11992:	eb02 0252 	add.w	r2, r2, r2, lsr #1
   11996:	fba2 2303 	umull	r2, r3, r2, r3
   1199a:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
   1199e:	e9c0 2308 	strd	r2, r3, [r0, #32]
   119a2:	d007      	beq.n	119b4 <bsec_SensorStatusTracker_updateInterfaceDependency+0x34>
   119a4:	f5b1 6fe1 	cmp.w	r1, #1800	; 0x708
   119a8:	d014      	beq.n	119d4 <bsec_SensorStatusTracker_updateInterfaceDependency+0x54>
   119aa:	2964      	cmp	r1, #100	; 0x64
   119ac:	d002      	beq.n	119b4 <bsec_SensorStatusTracker_updateInterfaceDependency+0x34>
   119ae:	4b0c      	ldr	r3, [pc, #48]	; (119e0 <bsec_SensorStatusTracker_updateInterfaceDependency+0x60>)
   119b0:	61c3      	str	r3, [r0, #28]
   119b2:	4770      	bx	lr
   119b4:	4b0b      	ldr	r3, [pc, #44]	; (119e4 <bsec_SensorStatusTracker_updateInterfaceDependency+0x64>)
   119b6:	61c3      	str	r3, [r0, #28]
   119b8:	4770      	bx	lr
   119ba:	b410      	push	{r4}
   119bc:	2100      	movs	r1, #0
   119be:	2400      	movs	r4, #0
   119c0:	2200      	movs	r2, #0
   119c2:	2300      	movs	r3, #0
   119c4:	6104      	str	r4, [r0, #16]
   119c6:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
   119ca:	e9c0 2302 	strd	r2, r3, [r0, #8]
   119ce:	f85d 4b04 	ldr.w	r4, [sp], #4
   119d2:	4770      	bx	lr
   119d4:	4b04      	ldr	r3, [pc, #16]	; (119e8 <bsec_SensorStatusTracker_updateInterfaceDependency+0x68>)
   119d6:	61c3      	str	r3, [r0, #28]
   119d8:	4770      	bx	lr
   119da:	bf00      	nop
   119dc:	00989680 	.word	0x00989680
   119e0:	538bb2c9 	.word	0x538bb2c9
   119e4:	528bb2c9 	.word	0x528bb2c9
   119e8:	515f8476 	.word	0x515f8476

000119ec <bsec_b_SensorStatusTracker_configure>:
   119ec:	b570      	push	{r4, r5, r6, lr}
   119ee:	b086      	sub	sp, #24
   119f0:	ab04      	add	r3, sp, #16
   119f2:	ad05      	add	r5, sp, #20
   119f4:	4604      	mov	r4, r0
   119f6:	7800      	ldrb	r0, [r0, #0]
   119f8:	9300      	str	r3, [sp, #0]
   119fa:	9501      	str	r5, [sp, #4]
   119fc:	f10d 030f 	add.w	r3, sp, #15
   11a00:	460e      	mov	r6, r1
   11a02:	f000 f815 	bl	11a30 <bsec_Serialization_checkSerializationHeader>
   11a06:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   11a0a:	b96b      	cbnz	r3, 11a28 <bsec_b_SensorStatusTracker_configure+0x3c>
   11a0c:	4629      	mov	r1, r5
   11a0e:	4630      	mov	r0, r6
   11a10:	f7fe f8da 	bl	fbc8 <bsec_e_Entity_parseAndDeserialize>
   11a14:	4629      	mov	r1, r5
   11a16:	ed84 0a06 	vstr	s0, [r4, #24]
   11a1a:	4630      	mov	r0, r6
   11a1c:	f7fe fb0c 	bl	10038 <bsec_o_Entity_parseAndDeserialize>
   11a20:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   11a24:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
   11a28:	4618      	mov	r0, r3
   11a2a:	b006      	add	sp, #24
   11a2c:	bd70      	pop	{r4, r5, r6, pc}
   11a2e:	bf00      	nop

00011a30 <bsec_Serialization_checkSerializationHeader>:
   11a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11a34:	b082      	sub	sp, #8
   11a36:	e9dd 8608 	ldrd	r8, r6, [sp, #32]
   11a3a:	2400      	movs	r4, #0
   11a3c:	2a03      	cmp	r2, #3
   11a3e:	6034      	str	r4, [r6, #0]
   11a40:	701c      	strb	r4, [r3, #0]
   11a42:	f8c8 4000 	str.w	r4, [r8]
   11a46:	d91c      	bls.n	11a82 <bsec_Serialization_checkSerializationHeader+0x52>
   11a48:	461c      	mov	r4, r3
   11a4a:	2304      	movs	r3, #4
   11a4c:	6033      	str	r3, [r6, #0]
   11a4e:	780a      	ldrb	r2, [r1, #0]
   11a50:	784b      	ldrb	r3, [r1, #1]
   11a52:	f88d 2004 	strb.w	r2, [sp, #4]
   11a56:	460d      	mov	r5, r1
   11a58:	4607      	mov	r7, r0
   11a5a:	2202      	movs	r2, #2
   11a5c:	a901      	add	r1, sp, #4
   11a5e:	f10d 0006 	add.w	r0, sp, #6
   11a62:	f88d 3005 	strb.w	r3, [sp, #5]
   11a66:	f027 faac 	bl	38fc2 <memcpy>
   11a6a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   11a6e:	f8c8 3000 	str.w	r3, [r8]
   11a72:	78ab      	ldrb	r3, [r5, #2]
   11a74:	42bb      	cmp	r3, r7
   11a76:	bf1c      	itt	ne
   11a78:	239c      	movne	r3, #156	; 0x9c
   11a7a:	7023      	strbne	r3, [r4, #0]
   11a7c:	b002      	add	sp, #8
   11a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11a82:	2298      	movs	r2, #152	; 0x98
   11a84:	701a      	strb	r2, [r3, #0]
   11a86:	b002      	add	sp, #8
   11a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011a8c <bsec_Serialization_prepareSerializationHeader>:
   11a8c:	b410      	push	{r4}
   11a8e:	7814      	ldrb	r4, [r2, #0]
   11a90:	b10c      	cbz	r4, 11a96 <bsec_Serialization_prepareSerializationHeader+0xa>
   11a92:	429c      	cmp	r4, r3
   11a94:	d204      	bcs.n	11aa0 <bsec_Serialization_prepareSerializationHeader+0x14>
   11a96:	2000      	movs	r0, #0
   11a98:	7010      	strb	r0, [r2, #0]
   11a9a:	f85d 4b04 	ldr.w	r4, [sp], #4
   11a9e:	4770      	bx	lr
   11aa0:	7088      	strb	r0, [r1, #2]
   11aa2:	f85d 4b04 	ldr.w	r4, [sp], #4
   11aa6:	2004      	movs	r0, #4
   11aa8:	4770      	bx	lr
   11aaa:	bf00      	nop

00011aac <bsec_convertHumidity>:
   11aac:	b500      	push	{lr}
   11aae:	ed2d 8b02 	vpush	{d8}
   11ab2:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
   11ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11aba:	b083      	sub	sp, #12
   11abc:	eef0 8a40 	vmov.f32	s17, s0
   11ac0:	eeb0 8a60 	vmov.f32	s16, s1
   11ac4:	d452      	bmi.n	11b6c <bsec_convertHumidity+0xc0>
   11ac6:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 11b74 <bsec_convertHumidity+0xc8>
   11aca:	eeb4 1ac7 	vcmpe.f32	s2, s14
   11ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11ad2:	dc41      	bgt.n	11b58 <bsec_convertHumidity+0xac>
   11ad4:	eec1 7a07 	vdiv.f32	s15, s2, s14
   11ad8:	a802      	add	r0, sp, #8
   11ada:	ed60 7a01 	vstmdb	r0!, {s15}
   11ade:	f000 f875 	bl	11bcc <bsec_log>
   11ae2:	ed9f 7a25 	vldr	s14, [pc, #148]	; 11b78 <bsec_convertHumidity+0xcc>
   11ae6:	eddf 7a25 	vldr	s15, [pc, #148]	; 11b7c <bsec_convertHumidity+0xd0>
   11aea:	eddd 5a01 	vldr	s11, [sp, #4]
   11aee:	ee28 5a87 	vmul.f32	s10, s17, s14
   11af2:	ee78 8aa7 	vadd.f32	s17, s17, s15
   11af6:	ee28 6a07 	vmul.f32	s12, s16, s14
   11afa:	eec5 6a28 	vdiv.f32	s13, s10, s17
   11afe:	ee38 8a27 	vadd.f32	s16, s16, s15
   11b02:	ee76 6aa5 	vadd.f32	s13, s13, s11
   11b06:	eec6 5a08 	vdiv.f32	s11, s12, s16
   11b0a:	ee26 5aa7 	vmul.f32	s10, s13, s15
   11b0e:	ee77 6a66 	vsub.f32	s13, s14, s13
   11b12:	ee85 6a26 	vdiv.f32	s12, s10, s13
   11b16:	ee76 7a27 	vadd.f32	s15, s12, s15
   11b1a:	ee26 7a07 	vmul.f32	s14, s12, s14
   11b1e:	ed8d 6a01 	vstr	s12, [sp, #4]
   11b22:	ee87 0a27 	vdiv.f32	s0, s14, s15
   11b26:	ee30 0a65 	vsub.f32	s0, s0, s11
   11b2a:	f01d fd2d 	bl	2f588 <expf>
   11b2e:	eddf 7a11 	vldr	s15, [pc, #68]	; 11b74 <bsec_convertHumidity+0xc8>
   11b32:	ee20 0a27 	vmul.f32	s0, s0, s15
   11b36:	eeb4 0ae7 	vcmpe.f32	s0, s15
   11b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11b3e:	dc0e      	bgt.n	11b5e <bsec_convertHumidity+0xb2>
   11b40:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   11b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11b48:	dc01      	bgt.n	11b4e <bsec_convertHumidity+0xa2>
   11b4a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 11b80 <bsec_convertHumidity+0xd4>
   11b4e:	b003      	add	sp, #12
   11b50:	ecbd 8b02 	vpop	{d8}
   11b54:	f85d fb04 	ldr.w	pc, [sp], #4
   11b58:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   11b5c:	e7bc      	b.n	11ad8 <bsec_convertHumidity+0x2c>
   11b5e:	eeb0 0a67 	vmov.f32	s0, s15
   11b62:	b003      	add	sp, #12
   11b64:	ecbd 8b02 	vpop	{d8}
   11b68:	f85d fb04 	ldr.w	pc, [sp], #4
   11b6c:	eddf 7a04 	vldr	s15, [pc, #16]	; 11b80 <bsec_convertHumidity+0xd4>
   11b70:	e7b2      	b.n	11ad8 <bsec_convertHumidity+0x2c>
   11b72:	bf00      	nop
   11b74:	42c80000 	.word	0x42c80000
   11b78:	418cf5c3 	.word	0x418cf5c3
   11b7c:	43731eb8 	.word	0x43731eb8
   11b80:	00000000 	.word	0x00000000

00011b84 <bsec_crcCcitt2>:
   11b84:	b1b9      	cbz	r1, 11bb6 <bsec_crcCcitt2+0x32>
   11b86:	b430      	push	{r4, r5}
   11b88:	3801      	subs	r0, #1
   11b8a:	4d0c      	ldr	r5, [pc, #48]	; (11bbc <bsec_crcCcitt2+0x38>)
   11b8c:	4401      	add	r1, r0
   11b8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11b92:	f810 4f01 	ldrb.w	r4, [r0, #1]!
   11b96:	4063      	eors	r3, r4
   11b98:	b2dc      	uxtb	r4, r3
   11b9a:	4281      	cmp	r1, r0
   11b9c:	f835 4014 	ldrh.w	r4, [r5, r4, lsl #1]
   11ba0:	ea84 2313 	eor.w	r3, r4, r3, lsr #8
   11ba4:	d1f5      	bne.n	11b92 <bsec_crcCcitt2+0xe>
   11ba6:	43db      	mvns	r3, r3
   11ba8:	b29b      	uxth	r3, r3
   11baa:	b2d8      	uxtb	r0, r3
   11bac:	0a19      	lsrs	r1, r3, #8
   11bae:	7010      	strb	r0, [r2, #0]
   11bb0:	7051      	strb	r1, [r2, #1]
   11bb2:	bc30      	pop	{r4, r5}
   11bb4:	4770      	bx	lr
   11bb6:	7011      	strb	r1, [r2, #0]
   11bb8:	7051      	strb	r1, [r2, #1]
   11bba:	4770      	bx	lr
   11bbc:	0003ad88 	.word	0x0003ad88

00011bc0 <bsec_isequal>:
   11bc0:	4299      	cmp	r1, r3
   11bc2:	bf06      	itte	eq
   11bc4:	4290      	cmpeq	r0, r2
   11bc6:	2001      	moveq	r0, #1
   11bc8:	2000      	movne	r0, #0
   11bca:	4770      	bx	lr

00011bcc <bsec_log>:
   11bcc:	b510      	push	{r4, lr}
   11bce:	ed90 0a00 	vldr	s0, [r0]
   11bd2:	4604      	mov	r4, r0
   11bd4:	f01d fd16 	bl	2f604 <logf>
   11bd8:	ed84 0a00 	vstr	s0, [r4]
   11bdc:	bd10      	pop	{r4, pc}
   11bde:	bf00      	nop

00011be0 <bsec_log10>:
   11be0:	b510      	push	{r4, lr}
   11be2:	ed90 0a00 	vldr	s0, [r0]
   11be6:	4604      	mov	r4, r0
   11be8:	f01d fd42 	bl	2f670 <log10f>
   11bec:	ed84 0a00 	vstr	s0, [r4]
   11bf0:	bd10      	pop	{r4, pc}
   11bf2:	bf00      	nop

00011bf4 <bsec_polyval>:
   11bf4:	edd0 7a00 	vldr	s15, [r0]
   11bf8:	ed90 7a01 	vldr	s14, [r0, #4]
   11bfc:	ee20 0a27 	vmul.f32	s0, s0, s15
   11c00:	ee30 0a07 	vadd.f32	s0, s0, s14
   11c04:	4770      	bx	lr
   11c06:	bf00      	nop

00011c08 <bsec_b_sqrt>:
   11c08:	b510      	push	{r4, lr}
   11c0a:	ed90 0a00 	vldr	s0, [r0]
   11c0e:	4604      	mov	r4, r0
   11c10:	f01d fe04 	bl	2f81c <sqrtf>
   11c14:	ed84 0a00 	vstr	s0, [r4]
   11c18:	bd10      	pop	{r4, pc}
   11c1a:	bf00      	nop

00011c1c <bsec_sqrt>:
   11c1c:	f000 b890 	b.w	11d40 <bsec_applyScalarFunctionInPlace>

00011c20 <bsec_Channel_reset>:
   11c20:	7f01      	ldrb	r1, [r0, #28]
   11c22:	4b0a      	ldr	r3, [pc, #40]	; (11c4c <bsec_Channel_reset+0x2c>)
   11c24:	4a0a      	ldr	r2, [pc, #40]	; (11c50 <bsec_Channel_reset+0x30>)
   11c26:	6202      	str	r2, [r0, #32]
   11c28:	6243      	str	r3, [r0, #36]	; 0x24
   11c2a:	6283      	str	r3, [r0, #40]	; 0x28
   11c2c:	b161      	cbz	r1, 11c48 <bsec_Channel_reset+0x28>
   11c2e:	b410      	push	{r4}
   11c30:	2301      	movs	r3, #1
   11c32:	2400      	movs	r4, #0
   11c34:	3301      	adds	r3, #1
   11c36:	eb00 0283 	add.w	r2, r0, r3, lsl #2
   11c3a:	b2db      	uxtb	r3, r3
   11c3c:	4299      	cmp	r1, r3
   11c3e:	6094      	str	r4, [r2, #8]
   11c40:	d2f8      	bcs.n	11c34 <bsec_Channel_reset+0x14>
   11c42:	f85d 4b04 	ldr.w	r4, [sp], #4
   11c46:	4770      	bx	lr
   11c48:	4770      	bx	lr
   11c4a:	bf00      	nop
   11c4c:	3b23d70a 	.word	0x3b23d70a
   11c50:	3ca3d70a 	.word	0x3ca3d70a

00011c54 <bsec_b_Channel_reset>:
   11c54:	7b03      	ldrb	r3, [r0, #12]
   11c56:	2200      	movs	r2, #0
   11c58:	6102      	str	r2, [r0, #16]
   11c5a:	6142      	str	r2, [r0, #20]
   11c5c:	b11b      	cbz	r3, 11c66 <bsec_b_Channel_reset+0x12>
   11c5e:	2b01      	cmp	r3, #1
   11c60:	d8fd      	bhi.n	11c5e <bsec_b_Channel_reset+0xa>
   11c62:	2300      	movs	r3, #0
   11c64:	6083      	str	r3, [r0, #8]
   11c66:	4770      	bx	lr

00011c68 <bsec_ExpSmoothing_setCoeffFromBandwidth>:
   11c68:	b5f0      	push	{r4, r5, r6, r7, lr}
   11c6a:	ed9f 6a26 	vldr	s12, [pc, #152]	; 11d04 <bsec_ExpSmoothing_setCoeffFromBandwidth+0x9c>
   11c6e:	edd1 6a00 	vldr	s13, [r1]
   11c72:	ed91 7a01 	vldr	s14, [r1, #4]
   11c76:	edd1 7a02 	vldr	s15, [r1, #8]
   11c7a:	b087      	sub	sp, #28
   11c7c:	ee66 6a86 	vmul.f32	s13, s13, s12
   11c80:	ee27 7a06 	vmul.f32	s14, s14, s12
   11c84:	ee67 7a86 	vmul.f32	s15, s15, s12
   11c88:	4606      	mov	r6, r0
   11c8a:	466f      	mov	r7, sp
   11c8c:	4668      	mov	r0, sp
   11c8e:	ad03      	add	r5, sp, #12
   11c90:	460c      	mov	r4, r1
   11c92:	edcd 6a00 	vstr	s13, [sp]
   11c96:	ed8d 7a01 	vstr	s14, [sp, #4]
   11c9a:	edcd 7a02 	vstr	s15, [sp, #8]
   11c9e:	f000 f85d 	bl	11d5c <bsec_sin>
   11ca2:	463b      	mov	r3, r7
   11ca4:	462a      	mov	r2, r5
   11ca6:	edd3 7a00 	vldr	s15, [r3]
   11caa:	ee67 7aa7 	vmul.f32	s15, s15, s15
   11cae:	ee27 7aa7 	vmul.f32	s14, s15, s15
   11cb2:	ece3 7a01 	vstmia	r3!, {s15}
   11cb6:	ee77 7a27 	vadd.f32	s15, s14, s15
   11cba:	42ab      	cmp	r3, r5
   11cbc:	ece2 7a01 	vstmia	r2!, {s15}
   11cc0:	d1f1      	bne.n	11ca6 <bsec_ExpSmoothing_setCoeffFromBandwidth+0x3e>
   11cc2:	4628      	mov	r0, r5
   11cc4:	f7ff ffaa 	bl	11c1c <bsec_sqrt>
   11cc8:	4621      	mov	r1, r4
   11cca:	4630      	mov	r0, r6
   11ccc:	f104 030c 	add.w	r3, r4, #12
   11cd0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   11cd4:	ecb1 7a01 	vldmia	r1!, {s14}
   11cd8:	ecf5 7a01 	vldmia	r5!, {s15}
   11cdc:	ecf7 6a01 	vldmia	r7!, {s13}
   11ce0:	eeb4 7a46 	vcmp.f32	s14, s12
   11ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11ce8:	bf16      	itet	ne
   11cea:	ee77 7ae6 	vsubne.f32	s15, s15, s13
   11cee:	eef7 7a00 	vmoveq.f32	s15, #112	; 0x3f800000  1.0
   11cf2:	ee77 7aa7 	vaddne.f32	s15, s15, s15
   11cf6:	428b      	cmp	r3, r1
   11cf8:	ece0 7a01 	vstmia	r0!, {s15}
   11cfc:	d1ea      	bne.n	11cd4 <bsec_ExpSmoothing_setCoeffFromBandwidth+0x6c>
   11cfe:	b007      	add	sp, #28
   11d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11d02:	bf00      	nop
   11d04:	3fc90fdb 	.word	0x3fc90fdb

00011d08 <bsec_ExpSmoothingBsec_ExpSmoothingBsec>:
   11d08:	2200      	movs	r2, #0
   11d0a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   11d0e:	b410      	push	{r4}
   11d10:	2403      	movs	r4, #3
   11d12:	7604      	strb	r4, [r0, #24]
   11d14:	6001      	str	r1, [r0, #0]
   11d16:	6041      	str	r1, [r0, #4]
   11d18:	6081      	str	r1, [r0, #8]
   11d1a:	60c2      	str	r2, [r0, #12]
   11d1c:	6102      	str	r2, [r0, #16]
   11d1e:	6142      	str	r2, [r0, #20]
   11d20:	f85d 4b04 	ldr.w	r4, [sp], #4
   11d24:	4770      	bx	lr
   11d26:	bf00      	nop

00011d28 <bsec_b_ExpSmoothingBsec_ExpSmoothingBsec>:
   11d28:	b410      	push	{r4}
   11d2a:	2401      	movs	r4, #1
   11d2c:	2200      	movs	r2, #0
   11d2e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   11d32:	7204      	strb	r4, [r0, #8]
   11d34:	6001      	str	r1, [r0, #0]
   11d36:	6042      	str	r2, [r0, #4]
   11d38:	f85d 4b04 	ldr.w	r4, [sp], #4
   11d3c:	4770      	bx	lr
   11d3e:	bf00      	nop

00011d40 <bsec_applyScalarFunctionInPlace>:
   11d40:	b538      	push	{r3, r4, r5, lr}
   11d42:	4604      	mov	r4, r0
   11d44:	f100 050c 	add.w	r5, r0, #12
   11d48:	ed94 0a00 	vldr	s0, [r4]
   11d4c:	f01d fd66 	bl	2f81c <sqrtf>
   11d50:	eca4 0a01 	vstmia	r4!, {s0}
   11d54:	42ac      	cmp	r4, r5
   11d56:	d1f7      	bne.n	11d48 <bsec_applyScalarFunctionInPlace+0x8>
   11d58:	bd38      	pop	{r3, r4, r5, pc}
   11d5a:	bf00      	nop

00011d5c <bsec_sin>:
   11d5c:	b538      	push	{r3, r4, r5, lr}
   11d5e:	4604      	mov	r4, r0
   11d60:	f100 050c 	add.w	r5, r0, #12
   11d64:	ed94 0a00 	vldr	s0, [r4]
   11d68:	f01d fbc4 	bl	2f4f4 <sinf>
   11d6c:	eca4 0a01 	vstmia	r4!, {s0}
   11d70:	42ac      	cmp	r4, r5
   11d72:	d1f7      	bne.n	11d64 <bsec_sin+0x8>
   11d74:	bd38      	pop	{r3, r4, r5, pc}
   11d76:	bf00      	nop

00011d78 <__aeabi_dcmpun>:
   11d78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   11d7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   11d80:	d102      	bne.n	11d88 <__aeabi_dcmpun+0x10>
   11d82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   11d86:	d10a      	bne.n	11d9e <__aeabi_dcmpun+0x26>
   11d88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   11d8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   11d90:	d102      	bne.n	11d98 <__aeabi_dcmpun+0x20>
   11d92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   11d96:	d102      	bne.n	11d9e <__aeabi_dcmpun+0x26>
   11d98:	f04f 0000 	mov.w	r0, #0
   11d9c:	4770      	bx	lr
   11d9e:	f04f 0001 	mov.w	r0, #1
   11da2:	4770      	bx	lr

00011da4 <__aeabi_d2uiz>:
   11da4:	004a      	lsls	r2, r1, #1
   11da6:	d211      	bcs.n	11dcc <__aeabi_d2uiz+0x28>
   11da8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   11dac:	d211      	bcs.n	11dd2 <__aeabi_d2uiz+0x2e>
   11dae:	d50d      	bpl.n	11dcc <__aeabi_d2uiz+0x28>
   11db0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   11db4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   11db8:	d40e      	bmi.n	11dd8 <__aeabi_d2uiz+0x34>
   11dba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   11dbe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   11dc2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   11dc6:	fa23 f002 	lsr.w	r0, r3, r2
   11dca:	4770      	bx	lr
   11dcc:	f04f 0000 	mov.w	r0, #0
   11dd0:	4770      	bx	lr
   11dd2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   11dd6:	d102      	bne.n	11dde <__aeabi_d2uiz+0x3a>
   11dd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11ddc:	4770      	bx	lr
   11dde:	f04f 0000 	mov.w	r0, #0
   11de2:	4770      	bx	lr

00011de4 <__aeabi_frsub>:
   11de4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   11de8:	e002      	b.n	11df0 <__addsf3>
   11dea:	bf00      	nop

00011dec <__aeabi_fsub>:
   11dec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00011df0 <__addsf3>:
   11df0:	0042      	lsls	r2, r0, #1
   11df2:	bf1f      	itttt	ne
   11df4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   11df8:	ea92 0f03 	teqne	r2, r3
   11dfc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   11e00:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   11e04:	d06a      	beq.n	11edc <__addsf3+0xec>
   11e06:	ea4f 6212 	mov.w	r2, r2, lsr #24
   11e0a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   11e0e:	bfc1      	itttt	gt
   11e10:	18d2      	addgt	r2, r2, r3
   11e12:	4041      	eorgt	r1, r0
   11e14:	4048      	eorgt	r0, r1
   11e16:	4041      	eorgt	r1, r0
   11e18:	bfb8      	it	lt
   11e1a:	425b      	neglt	r3, r3
   11e1c:	2b19      	cmp	r3, #25
   11e1e:	bf88      	it	hi
   11e20:	4770      	bxhi	lr
   11e22:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   11e26:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   11e2a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   11e2e:	bf18      	it	ne
   11e30:	4240      	negne	r0, r0
   11e32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   11e36:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   11e3a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   11e3e:	bf18      	it	ne
   11e40:	4249      	negne	r1, r1
   11e42:	ea92 0f03 	teq	r2, r3
   11e46:	d03f      	beq.n	11ec8 <__addsf3+0xd8>
   11e48:	f1a2 0201 	sub.w	r2, r2, #1
   11e4c:	fa41 fc03 	asr.w	ip, r1, r3
   11e50:	eb10 000c 	adds.w	r0, r0, ip
   11e54:	f1c3 0320 	rsb	r3, r3, #32
   11e58:	fa01 f103 	lsl.w	r1, r1, r3
   11e5c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   11e60:	d502      	bpl.n	11e68 <__addsf3+0x78>
   11e62:	4249      	negs	r1, r1
   11e64:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   11e68:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   11e6c:	d313      	bcc.n	11e96 <__addsf3+0xa6>
   11e6e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   11e72:	d306      	bcc.n	11e82 <__addsf3+0x92>
   11e74:	0840      	lsrs	r0, r0, #1
   11e76:	ea4f 0131 	mov.w	r1, r1, rrx
   11e7a:	f102 0201 	add.w	r2, r2, #1
   11e7e:	2afe      	cmp	r2, #254	; 0xfe
   11e80:	d251      	bcs.n	11f26 <__addsf3+0x136>
   11e82:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   11e86:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   11e8a:	bf08      	it	eq
   11e8c:	f020 0001 	biceq.w	r0, r0, #1
   11e90:	ea40 0003 	orr.w	r0, r0, r3
   11e94:	4770      	bx	lr
   11e96:	0049      	lsls	r1, r1, #1
   11e98:	eb40 0000 	adc.w	r0, r0, r0
   11e9c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   11ea0:	f1a2 0201 	sub.w	r2, r2, #1
   11ea4:	d1ed      	bne.n	11e82 <__addsf3+0x92>
   11ea6:	fab0 fc80 	clz	ip, r0
   11eaa:	f1ac 0c08 	sub.w	ip, ip, #8
   11eae:	ebb2 020c 	subs.w	r2, r2, ip
   11eb2:	fa00 f00c 	lsl.w	r0, r0, ip
   11eb6:	bfaa      	itet	ge
   11eb8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   11ebc:	4252      	neglt	r2, r2
   11ebe:	4318      	orrge	r0, r3
   11ec0:	bfbc      	itt	lt
   11ec2:	40d0      	lsrlt	r0, r2
   11ec4:	4318      	orrlt	r0, r3
   11ec6:	4770      	bx	lr
   11ec8:	f092 0f00 	teq	r2, #0
   11ecc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   11ed0:	bf06      	itte	eq
   11ed2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   11ed6:	3201      	addeq	r2, #1
   11ed8:	3b01      	subne	r3, #1
   11eda:	e7b5      	b.n	11e48 <__addsf3+0x58>
   11edc:	ea4f 0341 	mov.w	r3, r1, lsl #1
   11ee0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   11ee4:	bf18      	it	ne
   11ee6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   11eea:	d021      	beq.n	11f30 <__addsf3+0x140>
   11eec:	ea92 0f03 	teq	r2, r3
   11ef0:	d004      	beq.n	11efc <__addsf3+0x10c>
   11ef2:	f092 0f00 	teq	r2, #0
   11ef6:	bf08      	it	eq
   11ef8:	4608      	moveq	r0, r1
   11efa:	4770      	bx	lr
   11efc:	ea90 0f01 	teq	r0, r1
   11f00:	bf1c      	itt	ne
   11f02:	2000      	movne	r0, #0
   11f04:	4770      	bxne	lr
   11f06:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   11f0a:	d104      	bne.n	11f16 <__addsf3+0x126>
   11f0c:	0040      	lsls	r0, r0, #1
   11f0e:	bf28      	it	cs
   11f10:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   11f14:	4770      	bx	lr
   11f16:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   11f1a:	bf3c      	itt	cc
   11f1c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   11f20:	4770      	bxcc	lr
   11f22:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   11f26:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   11f2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   11f2e:	4770      	bx	lr
   11f30:	ea7f 6222 	mvns.w	r2, r2, asr #24
   11f34:	bf16      	itet	ne
   11f36:	4608      	movne	r0, r1
   11f38:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   11f3c:	4601      	movne	r1, r0
   11f3e:	0242      	lsls	r2, r0, #9
   11f40:	bf06      	itte	eq
   11f42:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   11f46:	ea90 0f01 	teqeq	r0, r1
   11f4a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   11f4e:	4770      	bx	lr

00011f50 <__aeabi_ui2f>:
   11f50:	f04f 0300 	mov.w	r3, #0
   11f54:	e004      	b.n	11f60 <__aeabi_i2f+0x8>
   11f56:	bf00      	nop

00011f58 <__aeabi_i2f>:
   11f58:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   11f5c:	bf48      	it	mi
   11f5e:	4240      	negmi	r0, r0
   11f60:	ea5f 0c00 	movs.w	ip, r0
   11f64:	bf08      	it	eq
   11f66:	4770      	bxeq	lr
   11f68:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   11f6c:	4601      	mov	r1, r0
   11f6e:	f04f 0000 	mov.w	r0, #0
   11f72:	e01c      	b.n	11fae <__aeabi_l2f+0x2a>

00011f74 <__aeabi_ul2f>:
   11f74:	ea50 0201 	orrs.w	r2, r0, r1
   11f78:	bf08      	it	eq
   11f7a:	4770      	bxeq	lr
   11f7c:	f04f 0300 	mov.w	r3, #0
   11f80:	e00a      	b.n	11f98 <__aeabi_l2f+0x14>
   11f82:	bf00      	nop

00011f84 <__aeabi_l2f>:
   11f84:	ea50 0201 	orrs.w	r2, r0, r1
   11f88:	bf08      	it	eq
   11f8a:	4770      	bxeq	lr
   11f8c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   11f90:	d502      	bpl.n	11f98 <__aeabi_l2f+0x14>
   11f92:	4240      	negs	r0, r0
   11f94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   11f98:	ea5f 0c01 	movs.w	ip, r1
   11f9c:	bf02      	ittt	eq
   11f9e:	4684      	moveq	ip, r0
   11fa0:	4601      	moveq	r1, r0
   11fa2:	2000      	moveq	r0, #0
   11fa4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   11fa8:	bf08      	it	eq
   11faa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   11fae:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   11fb2:	fabc f28c 	clz	r2, ip
   11fb6:	3a08      	subs	r2, #8
   11fb8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   11fbc:	db10      	blt.n	11fe0 <__aeabi_l2f+0x5c>
   11fbe:	fa01 fc02 	lsl.w	ip, r1, r2
   11fc2:	4463      	add	r3, ip
   11fc4:	fa00 fc02 	lsl.w	ip, r0, r2
   11fc8:	f1c2 0220 	rsb	r2, r2, #32
   11fcc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   11fd0:	fa20 f202 	lsr.w	r2, r0, r2
   11fd4:	eb43 0002 	adc.w	r0, r3, r2
   11fd8:	bf08      	it	eq
   11fda:	f020 0001 	biceq.w	r0, r0, #1
   11fde:	4770      	bx	lr
   11fe0:	f102 0220 	add.w	r2, r2, #32
   11fe4:	fa01 fc02 	lsl.w	ip, r1, r2
   11fe8:	f1c2 0220 	rsb	r2, r2, #32
   11fec:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   11ff0:	fa21 f202 	lsr.w	r2, r1, r2
   11ff4:	eb43 0002 	adc.w	r0, r3, r2
   11ff8:	bf08      	it	eq
   11ffa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   11ffe:	4770      	bx	lr

00012000 <__aeabi_d2lz>:
   12000:	b538      	push	{r3, r4, r5, lr}
   12002:	2200      	movs	r2, #0
   12004:	2300      	movs	r3, #0
   12006:	4604      	mov	r4, r0
   12008:	460d      	mov	r5, r1
   1200a:	f7fb fac1 	bl	d590 <__aeabi_dcmplt>
   1200e:	b928      	cbnz	r0, 1201c <__aeabi_d2lz+0x1c>
   12010:	4620      	mov	r0, r4
   12012:	4629      	mov	r1, r5
   12014:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12018:	f000 b80a 	b.w	12030 <__aeabi_d2ulz>
   1201c:	4620      	mov	r0, r4
   1201e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   12022:	f000 f805 	bl	12030 <__aeabi_d2ulz>
   12026:	4240      	negs	r0, r0
   12028:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1202c:	bd38      	pop	{r3, r4, r5, pc}
   1202e:	bf00      	nop

00012030 <__aeabi_d2ulz>:
   12030:	b5d0      	push	{r4, r6, r7, lr}
   12032:	2200      	movs	r2, #0
   12034:	4b0b      	ldr	r3, [pc, #44]	; (12064 <__aeabi_d2ulz+0x34>)
   12036:	4606      	mov	r6, r0
   12038:	460f      	mov	r7, r1
   1203a:	f7fb f837 	bl	d0ac <__aeabi_dmul>
   1203e:	f7ff feb1 	bl	11da4 <__aeabi_d2uiz>
   12042:	4604      	mov	r4, r0
   12044:	f7fa ffb8 	bl	cfb8 <__aeabi_ui2d>
   12048:	2200      	movs	r2, #0
   1204a:	4b07      	ldr	r3, [pc, #28]	; (12068 <__aeabi_d2ulz+0x38>)
   1204c:	f7fb f82e 	bl	d0ac <__aeabi_dmul>
   12050:	4602      	mov	r2, r0
   12052:	460b      	mov	r3, r1
   12054:	4630      	mov	r0, r6
   12056:	4639      	mov	r1, r7
   12058:	f7fa fe70 	bl	cd3c <__aeabi_dsub>
   1205c:	f7ff fea2 	bl	11da4 <__aeabi_d2uiz>
   12060:	4621      	mov	r1, r4
   12062:	bdd0      	pop	{r4, r6, r7, pc}
   12064:	3df00000 	.word	0x3df00000
   12068:	41f00000 	.word	0x41f00000

0001206c <strcmp>:
   1206c:	f810 2b01 	ldrb.w	r2, [r0], #1
   12070:	f811 3b01 	ldrb.w	r3, [r1], #1
   12074:	2a01      	cmp	r2, #1
   12076:	bf28      	it	cs
   12078:	429a      	cmpcs	r2, r3
   1207a:	d0f7      	beq.n	1206c <strcmp>
   1207c:	1ad0      	subs	r0, r2, r3
   1207e:	4770      	bx	lr

00012080 <strlen>:
   12080:	4603      	mov	r3, r0
   12082:	f813 2b01 	ldrb.w	r2, [r3], #1
   12086:	2a00      	cmp	r2, #0
   12088:	d1fb      	bne.n	12082 <strlen+0x2>
   1208a:	1a18      	subs	r0, r3, r0
   1208c:	3801      	subs	r0, #1
   1208e:	4770      	bx	lr

00012090 <app_gc_iot>:
}


/**@brief Main Processing Thread */
void app_gc_iot(void)
{
   12090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12094:	ed2d 8b02 	vpush	{d8}
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
   12098:	4dc9      	ldr	r5, [pc, #804]	; (123c0 <app_gc_iot+0x330>)
    struct k_mbox_msg env_d_recv_msg;

    /* Block until time avail */
    while (!got_ntp) 
    {   
        LOG_INF("Waiting on Modem Time\n");
   1209a:	4bca      	ldr	r3, [pc, #808]	; (123c4 <app_gc_iot+0x334>)
    while (!got_ntp) 
   1209c:	f8df b3a8 	ldr.w	fp, [pc, #936]	; 12448 <app_gc_iot+0x3b8>
        LOG_INF("Waiting on Modem Time\n");
   120a0:	1aed      	subs	r5, r5, r3
{
   120a2:	b0eb      	sub	sp, #428	; 0x1ac
        LOG_INF("Waiting on Modem Time\n");
   120a4:	f3c5 05c9 	ubfx	r5, r5, #3, #10
    while (!got_ntp) 
   120a8:	f89b 2000 	ldrb.w	r2, [fp]
	if (z_syscall_trap()) {
		return (s32_t) arch_syscall_invoke1(*(uintptr_t *)&timeout, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
   120ac:	4bc6      	ldr	r3, [pc, #792]	; (123c8 <app_gc_iot+0x338>)
   120ae:	2a00      	cmp	r2, #0
   120b0:	f000 825d 	beq.w	1256e <app_gc_iot+0x4de>
            jQualCal = cJSON_CreateString("not calibrated");
        } else {
            
        }
        
        jSampSz = cJSON_CreateNumber(DATA_ARRAY_SIZE);
   120b4:	ed9f 8bbe 	vldr	d8, [pc, #760]	; 123b0 <app_gc_iot+0x320>
        env_d_recv_msg.size = sizeof(pac_data);
   120b8:	2330      	movs	r3, #48	; 0x30
   120ba:	f44f 7280 	mov.w	r2, #256	; 0x100
   120be:	e9cd 321e 	strd	r3, r2, [sp, #120]	; 0x78
        env_d_recv_msg.rx_source_thread = K_ANY; //TODO: Get producer thread id
   120c2:	2300      	movs	r3, #0
   120c4:	9324      	str	r3, [sp, #144]	; 0x90
        LOG_DBG("App thread waiting for data from producer\n");
   120c6:	f8bd 3000 	ldrh.w	r3, [sp]
   120ca:	f8bd 2000 	ldrh.w	r2, [sp]
   120ce:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   120d2:	f043 0304 	orr.w	r3, r3, #4
   120d6:	f363 0207 	bfi	r2, r3, #0, #8
   120da:	b293      	uxth	r3, r2
   120dc:	f365 138f 	bfi	r3, r5, #6, #10
   120e0:	b298      	uxth	r0, r3
   120e2:	4aba      	ldr	r2, [pc, #744]	; (123cc <app_gc_iot+0x33c>)
   120e4:	49ba      	ldr	r1, [pc, #744]	; (123d0 <app_gc_iot+0x340>)
   120e6:	f8ad 3000 	strh.w	r3, [sp]
   120ea:	f021 fd7a 	bl	33be2 <log_string_sync>
        k_mbox_get(&env_d_mailbox, &env_d_recv_msg, &pac_data, K_FOREVER);
   120ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   120f2:	aa28      	add	r2, sp, #160	; 0xa0
   120f4:	a91d      	add	r1, sp, #116	; 0x74
   120f6:	48b7      	ldr	r0, [pc, #732]	; (123d4 <app_gc_iot+0x344>)
   120f8:	f019 ff4e 	bl	2bf98 <k_mbox_get>
        if (env_d_recv_msg.info != env_d_recv_msg.size) {
   120fc:	e9dd 321e 	ldrd	r3, r2, [sp, #120]	; 0x78
   12100:	429a      	cmp	r2, r3
   12102:	f000 8245 	beq.w	12590 <app_gc_iot+0x500>
            LOG_INF("Sender tried to send [%d] bytes\n", env_d_recv_msg.info);
   12106:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1210a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   1210e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   12112:	f043 0303 	orr.w	r3, r3, #3
   12116:	f363 0107 	bfi	r1, r3, #0, #8
   1211a:	b28b      	uxth	r3, r1
   1211c:	f365 138f 	bfi	r3, r5, #6, #10
   12120:	49ad      	ldr	r1, [pc, #692]	; (123d8 <app_gc_iot+0x348>)
   12122:	b298      	uxth	r0, r3
   12124:	f8ad 3004 	strh.w	r3, [sp, #4]
   12128:	f021 fd5b 	bl	33be2 <log_string_sync>
        get_modem_info(&info);
   1212c:	a834      	add	r0, sp, #208	; 0xd0
   1212e:	f002 ffe9 	bl	15104 <get_modem_info>
        printk("CID: [%s]\n", info.cid);
   12132:	a934      	add	r1, sp, #208	; 0xd0
   12134:	48a9      	ldr	r0, [pc, #676]	; (123dc <app_gc_iot+0x34c>)
   12136:	f021 fa3c 	bl	335b2 <printk>
        printk("TAC: [%s]\n", info.tac);
   1213a:	f10d 01ee 	add.w	r1, sp, #238	; 0xee
   1213e:	48a8      	ldr	r0, [pc, #672]	; (123e0 <app_gc_iot+0x350>)
   12140:	f021 fa37 	bl	335b2 <printk>
        printk("RSSI: [%s]\n", info.rssi);
   12144:	a943      	add	r1, sp, #268	; 0x10c
   12146:	48a7      	ldr	r0, [pc, #668]	; (123e4 <app_gc_iot+0x354>)
   12148:	f021 fa33 	bl	335b2 <printk>
        printk("APN: [%s]\n", info.apn);
   1214c:	f50d 7195 	add.w	r1, sp, #298	; 0x12a
   12150:	48a5      	ldr	r0, [pc, #660]	; (123e8 <app_gc_iot+0x358>)
   12152:	f021 fa2e 	bl	335b2 <printk>
        printk("FWV: [%s]\n", info.fwv);
   12156:	f50d 71b3 	add.w	r1, sp, #358	; 0x166
   1215a:	48a4      	ldr	r0, [pc, #656]	; (123ec <app_gc_iot+0x35c>)
   1215c:	f021 fa29 	bl	335b2 <printk>
        LOG_INF("Voltage: [%d]\n", info.vltg);
   12160:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   12164:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   12168:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   1216c:	f043 0303 	orr.w	r3, r3, #3
   12170:	f363 0207 	bfi	r2, r3, #0, #8
   12174:	b293      	uxth	r3, r2
   12176:	f365 138f 	bfi	r3, r5, #6, #10
   1217a:	b298      	uxth	r0, r3
   1217c:	f8bd 21a2 	ldrh.w	r2, [sp, #418]	; 0x1a2
   12180:	499b      	ldr	r1, [pc, #620]	; (123f0 <app_gc_iot+0x360>)
   12182:	f8ad 300c 	strh.w	r3, [sp, #12]
   12186:	f021 fd2c 	bl	33be2 <log_string_sync>
        LOG_INF("Temp: [%d]\n", info.temp);
   1218a:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
   1218e:	f043 0303 	orr.w	r3, r3, #3
   12192:	f363 0607 	bfi	r6, r3, #0, #8
   12196:	f365 168f 	bfi	r6, r5, #6, #10
   1219a:	f8bd 21a4 	ldrh.w	r2, [sp, #420]	; 0x1a4
   1219e:	4995      	ldr	r1, [pc, #596]	; (123f4 <app_gc_iot+0x364>)
   121a0:	4630      	mov	r0, r6
   121a2:	f021 fd1e 	bl	33be2 <log_string_sync>
        cJSON * envSensObj = cJSON_CreateObject();
   121a6:	f020 fe29 	bl	32dfc <cJSON_CreateObject>
   121aa:	4604      	mov	r4, r0
        jTempMax = cJSON_CreateNumber((s32_t)pac_data.ag_temp.max);
   121ac:	9828      	ldr	r0, [sp, #160]	; 0xa0
   121ae:	f7fa ff13 	bl	cfd8 <__aeabi_i2d>
   121b2:	ec41 0b10 	vmov	d0, r0, r1
   121b6:	f020 fdfe 	bl	32db6 <cJSON_CreateNumber>
   121ba:	9006      	str	r0, [sp, #24]
        jTempMin = cJSON_CreateNumber((s32_t)pac_data.ag_temp.min);
   121bc:	9829      	ldr	r0, [sp, #164]	; 0xa4
   121be:	f7fa ff0b 	bl	cfd8 <__aeabi_i2d>
   121c2:	ec41 0b10 	vmov	d0, r0, r1
   121c6:	f020 fdf6 	bl	32db6 <cJSON_CreateNumber>
   121ca:	9007      	str	r0, [sp, #28]
        jTempAvg = cJSON_CreateNumber((s32_t)pac_data.ag_temp.avg);
   121cc:	982a      	ldr	r0, [sp, #168]	; 0xa8
   121ce:	f7fa ff03 	bl	cfd8 <__aeabi_i2d>
   121d2:	ec41 0b10 	vmov	d0, r0, r1
   121d6:	f020 fdee 	bl	32db6 <cJSON_CreateNumber>
   121da:	9008      	str	r0, [sp, #32]
        jHumiMax = cJSON_CreateNumber((s32_t)pac_data.ag_humi.max);
   121dc:	982b      	ldr	r0, [sp, #172]	; 0xac
   121de:	f7fa fefb 	bl	cfd8 <__aeabi_i2d>
   121e2:	ec41 0b10 	vmov	d0, r0, r1
   121e6:	f020 fde6 	bl	32db6 <cJSON_CreateNumber>
   121ea:	9009      	str	r0, [sp, #36]	; 0x24
        jHumiMin = cJSON_CreateNumber((s32_t)pac_data.ag_humi.min);
   121ec:	982c      	ldr	r0, [sp, #176]	; 0xb0
   121ee:	f7fa fef3 	bl	cfd8 <__aeabi_i2d>
   121f2:	ec41 0b10 	vmov	d0, r0, r1
   121f6:	f020 fdde 	bl	32db6 <cJSON_CreateNumber>
   121fa:	900a      	str	r0, [sp, #40]	; 0x28
        jHumiAvg = cJSON_CreateNumber((s32_t)pac_data.ag_humi.avg);
   121fc:	982d      	ldr	r0, [sp, #180]	; 0xb4
   121fe:	f7fa feeb 	bl	cfd8 <__aeabi_i2d>
   12202:	ec41 0b10 	vmov	d0, r0, r1
   12206:	f020 fdd6 	bl	32db6 <cJSON_CreateNumber>
   1220a:	900b      	str	r0, [sp, #44]	; 0x2c
        jPresMax = cJSON_CreateNumber((s32_t)pac_data.ag_pres.max);
   1220c:	982e      	ldr	r0, [sp, #184]	; 0xb8
   1220e:	f7fa fee3 	bl	cfd8 <__aeabi_i2d>
   12212:	ec41 0b10 	vmov	d0, r0, r1
   12216:	f020 fdce 	bl	32db6 <cJSON_CreateNumber>
   1221a:	900c      	str	r0, [sp, #48]	; 0x30
        jPresMin = cJSON_CreateNumber((s32_t)pac_data.ag_pres.min);
   1221c:	982f      	ldr	r0, [sp, #188]	; 0xbc
   1221e:	f7fa fedb 	bl	cfd8 <__aeabi_i2d>
   12222:	ec41 0b10 	vmov	d0, r0, r1
   12226:	f020 fdc6 	bl	32db6 <cJSON_CreateNumber>
   1222a:	900d      	str	r0, [sp, #52]	; 0x34
        jPresAvg = cJSON_CreateNumber((s32_t)pac_data.ag_pres.avg);
   1222c:	9830      	ldr	r0, [sp, #192]	; 0xc0
   1222e:	f7fa fed3 	bl	cfd8 <__aeabi_i2d>
   12232:	ec41 0b10 	vmov	d0, r0, r1
   12236:	f020 fdbe 	bl	32db6 <cJSON_CreateNumber>
   1223a:	900e      	str	r0, [sp, #56]	; 0x38
        jQualMax = cJSON_CreateNumber((s32_t)pac_data.ag_qual.max);
   1223c:	9831      	ldr	r0, [sp, #196]	; 0xc4
   1223e:	f7fa fecb 	bl	cfd8 <__aeabi_i2d>
   12242:	ec41 0b10 	vmov	d0, r0, r1
   12246:	f020 fdb6 	bl	32db6 <cJSON_CreateNumber>
   1224a:	4683      	mov	fp, r0
        jQualMin = cJSON_CreateNumber((s32_t)pac_data.ag_qual.min);
   1224c:	9832      	ldr	r0, [sp, #200]	; 0xc8
   1224e:	f7fa fec3 	bl	cfd8 <__aeabi_i2d>
   12252:	ec41 0b10 	vmov	d0, r0, r1
   12256:	f020 fdae 	bl	32db6 <cJSON_CreateNumber>
   1225a:	900f      	str	r0, [sp, #60]	; 0x3c
        jQualAvg = cJSON_CreateNumber((s32_t)pac_data.ag_qual.avg);
   1225c:	9833      	ldr	r0, [sp, #204]	; 0xcc
   1225e:	f7fa febb 	bl	cfd8 <__aeabi_i2d>
   12262:	ec41 0b10 	vmov	d0, r0, r1
   12266:	f020 fda6 	bl	32db6 <cJSON_CreateNumber>
        if (pac_data.ag_qual.avg == EXCLUDE) {
   1226a:	f240 33e7 	movw	r3, #999	; 0x3e7
   1226e:	9a33      	ldr	r2, [sp, #204]	; 0xcc
        jQualAvg = cJSON_CreateNumber((s32_t)pac_data.ag_qual.avg);
   12270:	9010      	str	r0, [sp, #64]	; 0x40
        if (pac_data.ag_qual.avg == EXCLUDE) {
   12272:	429a      	cmp	r2, r3
   12274:	f040 81a0 	bne.w	125b8 <app_gc_iot+0x528>
            jQualCal = cJSON_CreateString("not calibrated");
   12278:	485f      	ldr	r0, [pc, #380]	; (123f8 <app_gc_iot+0x368>)
   1227a:	f020 fdb1 	bl	32de0 <cJSON_CreateString>
   1227e:	4603      	mov	r3, r0
        jSampSz = cJSON_CreateNumber(DATA_ARRAY_SIZE);
   12280:	eeb0 0a48 	vmov.f32	s0, s16
   12284:	eef0 0a68 	vmov.f32	s1, s17
   12288:	931b      	str	r3, [sp, #108]	; 0x6c
   1228a:	f020 fd94 	bl	32db6 <cJSON_CreateNumber>
        jSampFrq = cJSON_CreateNumber(SAMP_FREQ);
   1228e:	ed9f 0b4a 	vldr	d0, [pc, #296]	; 123b8 <app_gc_iot+0x328>
        jSampSz = cJSON_CreateNumber(DATA_ARRAY_SIZE);
   12292:	9011      	str	r0, [sp, #68]	; 0x44
        jSampFrq = cJSON_CreateNumber(SAMP_FREQ);
   12294:	f020 fd8f 	bl	32db6 <cJSON_CreateNumber>
   12298:	9012      	str	r0, [sp, #72]	; 0x48

        jCid = cJSON_CreateString((const char*)info.cid);
   1229a:	a834      	add	r0, sp, #208	; 0xd0
   1229c:	f020 fda0 	bl	32de0 <cJSON_CreateString>
   122a0:	9013      	str	r0, [sp, #76]	; 0x4c
        jTac = cJSON_CreateString((const char*)info.tac);
   122a2:	f10d 00ee 	add.w	r0, sp, #238	; 0xee
   122a6:	f020 fd9b 	bl	32de0 <cJSON_CreateString>
   122aa:	9014      	str	r0, [sp, #80]	; 0x50
        jRssi = cJSON_CreateString((const char*)info.rssi);
   122ac:	a843      	add	r0, sp, #268	; 0x10c
   122ae:	f020 fd97 	bl	32de0 <cJSON_CreateString>
   122b2:	9015      	str	r0, [sp, #84]	; 0x54
        jApn = cJSON_CreateString((const char*)info.apn);
   122b4:	f50d 7095 	add.w	r0, sp, #298	; 0x12a
   122b8:	f020 fd92 	bl	32de0 <cJSON_CreateString>
   122bc:	9016      	str	r0, [sp, #88]	; 0x58
        jFwv = cJSON_CreateString((const char*)info.fwv);
   122be:	f50d 70b3 	add.w	r0, sp, #358	; 0x166
   122c2:	f020 fd8d 	bl	32de0 <cJSON_CreateString>
   122c6:	9017      	str	r0, [sp, #92]	; 0x5c
        jVltg = cJSON_CreateNumber((u16_t)info.vltg);
   122c8:	f8bd 01a2 	ldrh.w	r0, [sp, #418]	; 0x1a2
   122cc:	f7fa fe74 	bl	cfb8 <__aeabi_ui2d>
   122d0:	ec41 0b10 	vmov	d0, r0, r1
   122d4:	f020 fd6f 	bl	32db6 <cJSON_CreateNumber>
   122d8:	9018      	str	r0, [sp, #96]	; 0x60
        jTemp = cJSON_CreateNumber((u16_t)info.temp);
   122da:	f8bd 01a4 	ldrh.w	r0, [sp, #420]	; 0x1a4
   122de:	f7fa fe6b 	bl	cfb8 <__aeabi_ui2d>
   122e2:	ec41 0b10 	vmov	d0, r0, r1
   122e6:	f020 fd66 	bl	32db6 <cJSON_CreateNumber>
   122ea:	9019      	str	r0, [sp, #100]	; 0x64

        jDvFwv = cJSON_CreateString((const char*)device_fw_ver);
   122ec:	4843      	ldr	r0, [pc, #268]	; (123fc <app_gc_iot+0x36c>)
   122ee:	f020 fd77 	bl	32de0 <cJSON_CreateString>

        /* Add cJSON items to object */
        cJSON_AddItemToObject(envSensObj, jTempMaxString, jTempMax);
   122f2:	9a06      	ldr	r2, [sp, #24]
        jDvFwv = cJSON_CreateString((const char*)device_fw_ver);
   122f4:	901a      	str	r0, [sp, #104]	; 0x68
        cJSON_AddItemToObject(envSensObj, jTempMaxString, jTempMax);
   122f6:	4942      	ldr	r1, [pc, #264]	; (12400 <app_gc_iot+0x370>)
   122f8:	4620      	mov	r0, r4
   122fa:	f004 fe93 	bl	17024 <cJSON_AddItemToObject>
        cJSON_AddItemToObject(envSensObj, jHumiMaxString, jHumiMax);
   122fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12300:	4940      	ldr	r1, [pc, #256]	; (12404 <app_gc_iot+0x374>)
   12302:	4620      	mov	r0, r4
   12304:	f004 fe8e 	bl	17024 <cJSON_AddItemToObject>
        cJSON_AddItemToObject(envSensObj, jPresMaxString, jPresMax);
   12308:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1230a:	493f      	ldr	r1, [pc, #252]	; (12408 <app_gc_iot+0x378>)
   1230c:	4620      	mov	r0, r4
   1230e:	f004 fe89 	bl	17024 <cJSON_AddItemToObject>
        cJSON_AddItemToObject(envSensObj, jQualMaxString, jQualMax);
   12312:	465a      	mov	r2, fp
   12314:	493d      	ldr	r1, [pc, #244]	; (1240c <app_gc_iot+0x37c>)
   12316:	4620      	mov	r0, r4
   12318:	f004 fe84 	bl	17024 <cJSON_AddItemToObject>

        cJSON_AddItemToObject(envSensObj, jTempMinString, jTempMin);
   1231c:	9a07      	ldr	r2, [sp, #28]
   1231e:	493c      	ldr	r1, [pc, #240]	; (12410 <app_gc_iot+0x380>)
   12320:	4620      	mov	r0, r4
   12322:	f004 fe7f 	bl	17024 <cJSON_AddItemToObject>
        cJSON_AddItemToObject(envSensObj, jHumiMinString, jHumiMin);
   12326:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12328:	493a      	ldr	r1, [pc, #232]	; (12414 <app_gc_iot+0x384>)
   1232a:	4620      	mov	r0, r4
   1232c:	f004 fe7a 	bl	17024 <cJSON_AddItemToObject>
        cJSON_AddItemToObject(envSensObj, jPresMinString, jPresMin);
   12330:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   12332:	4939      	ldr	r1, [pc, #228]	; (12418 <app_gc_iot+0x388>)
   12334:	4620      	mov	r0, r4
   12336:	f004 fe75 	bl	17024 <cJSON_AddItemToObject>
        cJSON_AddItemToObject(envSensObj, jQualMinString, jQualMin);
   1233a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1233c:	4937      	ldr	r1, [pc, #220]	; (1241c <app_gc_iot+0x38c>)
   1233e:	4620      	mov	r0, r4
   12340:	f004 fe70 	bl	17024 <cJSON_AddItemToObject>

        cJSON_AddItemToObject(envSensObj, jTempAvgString, jTempAvg);
   12344:	9a08      	ldr	r2, [sp, #32]
   12346:	4936      	ldr	r1, [pc, #216]	; (12420 <app_gc_iot+0x390>)
   12348:	4620      	mov	r0, r4
   1234a:	f004 fe6b 	bl	17024 <cJSON_AddItemToObject>
        cJSON_AddItemToObject(envSensObj, jHumiAvgString, jHumiAvg);
   1234e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   12350:	4934      	ldr	r1, [pc, #208]	; (12424 <app_gc_iot+0x394>)
   12352:	4620      	mov	r0, r4
   12354:	f004 fe66 	bl	17024 <cJSON_AddItemToObject>
        cJSON_AddItemToObject(envSensObj, jPresAvgString, jPresAvg);
   12358:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1235a:	4933      	ldr	r1, [pc, #204]	; (12428 <app_gc_iot+0x398>)
   1235c:	4620      	mov	r0, r4
   1235e:	f004 fe61 	bl	17024 <cJSON_AddItemToObject>
        cJSON_AddItemToObject(envSensObj, jQualAvgString, jQualAvg);
   12362:	9a10      	ldr	r2, [sp, #64]	; 0x40
   12364:	4931      	ldr	r1, [pc, #196]	; (1242c <app_gc_iot+0x39c>)
   12366:	4620      	mov	r0, r4
   12368:	f004 fe5c 	bl	17024 <cJSON_AddItemToObject>

        cJSON_AddItemToObject(envSensObj, jSampSzString, jSampSz);
   1236c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1236e:	4930      	ldr	r1, [pc, #192]	; (12430 <app_gc_iot+0x3a0>)
   12370:	4620      	mov	r0, r4
   12372:	f004 fe57 	bl	17024 <cJSON_AddItemToObject>
        cJSON_AddItemToObject(envSensObj, jSampFrqString, jSampFrq);
   12376:	9a12      	ldr	r2, [sp, #72]	; 0x48
   12378:	492e      	ldr	r1, [pc, #184]	; (12434 <app_gc_iot+0x3a4>)
   1237a:	4620      	mov	r0, r4
   1237c:	f004 fe52 	bl	17024 <cJSON_AddItemToObject>

        cJSON_AddItemToObject(envSensObj, jCidString, jCid);
   12380:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   12382:	492d      	ldr	r1, [pc, #180]	; (12438 <app_gc_iot+0x3a8>)
   12384:	4620      	mov	r0, r4
   12386:	f004 fe4d 	bl	17024 <cJSON_AddItemToObject>
        cJSON_AddItemToObject(envSensObj, jTacString, jTac);
   1238a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1238c:	492b      	ldr	r1, [pc, #172]	; (1243c <app_gc_iot+0x3ac>)
   1238e:	4620      	mov	r0, r4
   12390:	f004 fe48 	bl	17024 <cJSON_AddItemToObject>
        cJSON_AddItemToObject(envSensObj, jRssiString, jRssi);
   12394:	9a15      	ldr	r2, [sp, #84]	; 0x54
   12396:	492a      	ldr	r1, [pc, #168]	; (12440 <app_gc_iot+0x3b0>)
   12398:	4620      	mov	r0, r4
   1239a:	f004 fe43 	bl	17024 <cJSON_AddItemToObject>
        cJSON_AddItemToObject(envSensObj, jApnString, jApn);
   1239e:	9a16      	ldr	r2, [sp, #88]	; 0x58
   123a0:	4928      	ldr	r1, [pc, #160]	; (12444 <app_gc_iot+0x3b4>)
   123a2:	4620      	mov	r0, r4
   123a4:	f004 fe3e 	bl	17024 <cJSON_AddItemToObject>
        cJSON_AddItemToObject(envSensObj, jFwvString, jFwv);
   123a8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   123aa:	e04f      	b.n	1244c <app_gc_iot+0x3bc>
   123ac:	f3af 8000 	nop.w
   123b0:	00000000 	.word	0x00000000
   123b4:	406e0000 	.word	0x406e0000
   123b8:	00000000 	.word	0x00000000
   123bc:	40408000 	.word	0x40408000
   123c0:	00039f90 	.word	0x00039f90
   123c4:	00039f48 	.word	0x00039f48
   123c8:	0003b43c 	.word	0x0003b43c
   123cc:	0003b431 	.word	0x0003b431
   123d0:	0003b453 	.word	0x0003b453
   123d4:	200210bc 	.word	0x200210bc
   123d8:	0003b482 	.word	0x0003b482
   123dc:	0003b4b4 	.word	0x0003b4b4
   123e0:	0003b4bf 	.word	0x0003b4bf
   123e4:	0003b4ca 	.word	0x0003b4ca
   123e8:	0003b4d6 	.word	0x0003b4d6
   123ec:	0003b4e1 	.word	0x0003b4e1
   123f0:	0003b4ec 	.word	0x0003b4ec
   123f4:	0003b4fb 	.word	0x0003b4fb
   123f8:	0003b507 	.word	0x0003b507
   123fc:	0003b516 	.word	0x0003b516
   12400:	0003b521 	.word	0x0003b521
   12404:	0003b529 	.word	0x0003b529
   12408:	0003b531 	.word	0x0003b531
   1240c:	0003b539 	.word	0x0003b539
   12410:	0003b541 	.word	0x0003b541
   12414:	0003b549 	.word	0x0003b549
   12418:	0003b551 	.word	0x0003b551
   1241c:	0003b559 	.word	0x0003b559
   12420:	0003b561 	.word	0x0003b561
   12424:	0003b569 	.word	0x0003b569
   12428:	0003b571 	.word	0x0003b571
   1242c:	0003b579 	.word	0x0003b579
   12430:	0003b581 	.word	0x0003b581
   12434:	0003b58a 	.word	0x0003b58a
   12438:	0003ef41 	.word	0x0003ef41
   1243c:	0003b594 	.word	0x0003b594
   12440:	0003b598 	.word	0x0003b598
   12444:	0003b59d 	.word	0x0003b59d
   12448:	20027622 	.word	0x20027622
   1244c:	495c      	ldr	r1, [pc, #368]	; (125c0 <app_gc_iot+0x530>)
   1244e:	4620      	mov	r0, r4
   12450:	f004 fde8 	bl	17024 <cJSON_AddItemToObject>
        cJSON_AddItemToObject(envSensObj, jVltgString, jVltg);
   12454:	9a18      	ldr	r2, [sp, #96]	; 0x60
   12456:	495b      	ldr	r1, [pc, #364]	; (125c4 <app_gc_iot+0x534>)
   12458:	4620      	mov	r0, r4
   1245a:	f004 fde3 	bl	17024 <cJSON_AddItemToObject>
        cJSON_AddItemToObject(envSensObj, jTempString, jTemp);
   1245e:	9a19      	ldr	r2, [sp, #100]	; 0x64
   12460:	4959      	ldr	r1, [pc, #356]	; (125c8 <app_gc_iot+0x538>)
   12462:	4620      	mov	r0, r4
   12464:	f004 fdde 	bl	17024 <cJSON_AddItemToObject>

        cJSON_AddItemToObject(envSensObj, jQualCalString, jQualCal);
   12468:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1246a:	4958      	ldr	r1, [pc, #352]	; (125cc <app_gc_iot+0x53c>)
   1246c:	461a      	mov	r2, r3
   1246e:	4620      	mov	r0, r4
   12470:	f004 fdd8 	bl	17024 <cJSON_AddItemToObject>

        cJSON_AddItemToObject(envSensObj, jDevFwvString, jDvFwv);
   12474:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   12476:	4956      	ldr	r1, [pc, #344]	; (125d0 <app_gc_iot+0x540>)
   12478:	4620      	mov	r0, r4
   1247a:	f004 fdd3 	bl	17024 <cJSON_AddItemToObject>

        /* Create JSON string from object */
        JSONEnvString = cJSON_Print(envSensObj);
   1247e:	4620      	mov	r0, r4
   12480:	f020 fc88 	bl	32d94 <cJSON_Print>
        if (JSONEnvString == NULL) {
   12484:	4683      	mov	fp, r0
   12486:	b960      	cbnz	r0, 124a2 <app_gc_iot+0x412>
            LOG_DBG("Failed to print envSensObj\n");
   12488:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   1248c:	f043 0304 	orr.w	r3, r3, #4
   12490:	f363 0707 	bfi	r7, r3, #0, #8
   12494:	f365 178f 	bfi	r7, r5, #6, #10
   12498:	4a4e      	ldr	r2, [pc, #312]	; (125d4 <app_gc_iot+0x544>)
   1249a:	494f      	ldr	r1, [pc, #316]	; (125d8 <app_gc_iot+0x548>)
   1249c:	4638      	mov	r0, r7
   1249e:	f021 fba0 	bl	33be2 <log_string_sync>
        }

        /* Send JSON data */
        LOG_INF("Sending JSON data\n");
   124a2:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   124a6:	f043 0303 	orr.w	r3, r3, #3
   124aa:	f363 0807 	bfi	r8, r3, #0, #8
   124ae:	f365 188f 	bfi	r8, r5, #6, #10
   124b2:	494a      	ldr	r1, [pc, #296]	; (125dc <app_gc_iot+0x54c>)
   124b4:	4640      	mov	r0, r8
   124b6:	f021 fb94 	bl	33be2 <log_string_sync>
	    int pub_success = gcloud_publish(JSONEnvString, strlens(JSONEnvString), MQTT_QOS_0_AT_MOST_ONCE);
   124ba:	f1bb 0f00 	cmp.w	fp, #0
   124be:	d07d      	beq.n	125bc <app_gc_iot+0x52c>
   124c0:	4658      	mov	r0, fp
   124c2:	f7ff fddd 	bl	12080 <strlen>
   124c6:	4601      	mov	r1, r0
   124c8:	2200      	movs	r2, #0
   124ca:	4658      	mov	r0, fp
   124cc:	f003 f8dc 	bl	15688 <gcloud_publish>
   124d0:	4683      	mov	fp, r0
        LOG_INF("Sent JSON data with code: [%d]\n", pub_success);
   124d2:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
   124d6:	f043 0303 	orr.w	r3, r3, #3
   124da:	f363 0907 	bfi	r9, r3, #0, #8
   124de:	f365 198f 	bfi	r9, r5, #6, #10
   124e2:	4602      	mov	r2, r0
   124e4:	493e      	ldr	r1, [pc, #248]	; (125e0 <app_gc_iot+0x550>)
   124e6:	4648      	mov	r0, r9
   124e8:	f021 fb7b 	bl	33be2 <log_string_sync>
        if (pub_success != 0) {
   124ec:	f1bb 0f00 	cmp.w	fp, #0
   124f0:	d00b      	beq.n	1250a <app_gc_iot+0x47a>
            LOG_INF("JSON data Publish failed\n");
   124f2:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
   124f6:	f043 0303 	orr.w	r3, r3, #3
   124fa:	f363 0a07 	bfi	sl, r3, #0, #8
   124fe:	f365 1a8f 	bfi	sl, r5, #6, #10
   12502:	4938      	ldr	r1, [pc, #224]	; (125e4 <app_gc_iot+0x554>)
   12504:	4650      	mov	r0, sl
   12506:	f021 fb6c 	bl	33be2 <log_string_sync>
        }

        /* Cleanup JSON obj - release memory */
        cJSON_Delete(envSensObj);
   1250a:	4620      	mov	r0, r4
   1250c:	f004 fd32 	bl	16f74 <cJSON_Delete>

        /* Reboot */
        LOG_INF("Rebooting in [%d] seconds\n", REBOOT_TIMEOUT/1000);
   12510:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   12514:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   12518:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   1251c:	f043 0303 	orr.w	r3, r3, #3
   12520:	f363 0207 	bfi	r2, r3, #0, #8
   12524:	b293      	uxth	r3, r2
   12526:	f365 138f 	bfi	r3, r5, #6, #10
   1252a:	2214      	movs	r2, #20
   1252c:	492e      	ldr	r1, [pc, #184]	; (125e8 <app_gc_iot+0x558>)
   1252e:	b298      	uxth	r0, r3
   12530:	f8ad 3010 	strh.w	r3, [sp, #16]
   12534:	f021 fb55 	bl	33be2 <log_string_sync>
   12538:	f644 6020 	movw	r0, #20000	; 0x4e20
   1253c:	f01b fd0a 	bl	2df54 <z_impl_k_sleep>
        k_sleep(K_MSEC(REBOOT_TIMEOUT));
        LOG_INF("Rebooting\n");
   12540:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   12544:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   12548:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   1254c:	f043 0303 	orr.w	r3, r3, #3
   12550:	f363 0207 	bfi	r2, r3, #0, #8
   12554:	b293      	uxth	r3, r2
   12556:	f365 138f 	bfi	r3, r5, #6, #10
   1255a:	b298      	uxth	r0, r3
   1255c:	4923      	ldr	r1, [pc, #140]	; (125ec <app_gc_iot+0x55c>)
   1255e:	f8ad 3014 	strh.w	r3, [sp, #20]
   12562:	f021 fb3e 	bl	33be2 <log_string_sync>
        sys_reboot(0);
   12566:	2000      	movs	r0, #0
   12568:	f007 fc8e 	bl	19e88 <sys_reboot>
    while(true) {
   1256c:	e5a4      	b.n	120b8 <app_gc_iot+0x28>
        LOG_INF("Waiting on Modem Time\n");
   1256e:	f024 023f 	bic.w	r2, r4, #63	; 0x3f
   12572:	f042 0203 	orr.w	r2, r2, #3
   12576:	f362 0407 	bfi	r4, r2, #0, #8
   1257a:	f365 148f 	bfi	r4, r5, #6, #10
   1257e:	4619      	mov	r1, r3
   12580:	4620      	mov	r0, r4
   12582:	f021 fb2e 	bl	33be2 <log_string_sync>
   12586:	f242 7010 	movw	r0, #10000	; 0x2710
   1258a:	f01b fce3 	bl	2df54 <z_impl_k_sleep>
   1258e:	e58b      	b.n	120a8 <app_gc_iot+0x18>
            LOG_INF("Received k_mbox\n");
   12590:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   12594:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   12598:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   1259c:	f043 0303 	orr.w	r3, r3, #3
   125a0:	f363 0207 	bfi	r2, r3, #0, #8
   125a4:	b293      	uxth	r3, r2
   125a6:	f365 138f 	bfi	r3, r5, #6, #10
   125aa:	4911      	ldr	r1, [pc, #68]	; (125f0 <app_gc_iot+0x560>)
   125ac:	b298      	uxth	r0, r3
   125ae:	f8ad 3008 	strh.w	r3, [sp, #8]
   125b2:	f021 fb16 	bl	33be2 <log_string_sync>
   125b6:	e5b9      	b.n	1212c <app_gc_iot+0x9c>
        cJSON *jQualCal = NULL;
   125b8:	2300      	movs	r3, #0
   125ba:	e661      	b.n	12280 <app_gc_iot+0x1f0>
	    int pub_success = gcloud_publish(JSONEnvString, strlens(JSONEnvString), MQTT_QOS_0_AT_MOST_ONCE);
   125bc:	4659      	mov	r1, fp
   125be:	e783      	b.n	124c8 <app_gc_iot+0x438>
   125c0:	0003b5a1 	.word	0x0003b5a1
   125c4:	0003b5a6 	.word	0x0003b5a6
   125c8:	0003b5ab 	.word	0x0003b5ab
   125cc:	0003b5b1 	.word	0x0003b5b1
   125d0:	0003b5bd 	.word	0x0003b5bd
   125d4:	0003b431 	.word	0x0003b431
   125d8:	0003b5c2 	.word	0x0003b5c2
   125dc:	0003b5e2 	.word	0x0003b5e2
   125e0:	0003b5f5 	.word	0x0003b5f5
   125e4:	0003b615 	.word	0x0003b615
   125e8:	0003b62f 	.word	0x0003b62f
   125ec:	0003b64a 	.word	0x0003b64a
   125f0:	0003b4a3 	.word	0x0003b4a3
   125f4:	00000000 	.word	0x00000000

000125f8 <print_number>:
	return p->offset + strlens(str);
}

/* Render the number nicely from the given item into a string. */
static char *print_number(cJSON *item, printbuffer *p)
{
   125f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char *str = 0;
	double d = item->valuedouble;
   125fa:	e9d0 6706 	ldrd	r6, r7, [r0, #24]
{
   125fe:	4605      	mov	r5, r0
   12600:	460c      	mov	r4, r1
	if (d == 0) {
   12602:	2200      	movs	r2, #0
   12604:	2300      	movs	r3, #0
   12606:	4630      	mov	r0, r6
   12608:	4639      	mov	r1, r7
   1260a:	f7fa ffb7 	bl	d57c <__aeabi_dcmpeq>
   1260e:	b180      	cbz	r0, 12632 <print_number+0x3a>
		if (p)
   12610:	b154      	cbz	r4, 12628 <print_number+0x30>
			str = ensure(p, 2);
   12612:	2102      	movs	r1, #2
   12614:	4620      	mov	r0, r4
   12616:	f004 f855 	bl	166c4 <ensure>
		else
			str = (char *)cJSON_malloc(2); /* special case for 0. */
   1261a:	4604      	mov	r4, r0
		if (str)
   1261c:	b110      	cbz	r0, 12624 <print_number+0x2c>
__ssp_bos_icheck3(memset, void *, int)
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   1261e:	4952      	ldr	r1, [pc, #328]	; (12768 <print_number+0x170>)
   12620:	f026 fe5d 	bl	392de <strcpy>
			else
				sprintf(str, "%f", d);
		}
	}
	return str;
}
   12624:	4620      	mov	r0, r4
   12626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			str = (char *)cJSON_malloc(2); /* special case for 0. */
   12628:	4b50      	ldr	r3, [pc, #320]	; (1276c <print_number+0x174>)
   1262a:	2002      	movs	r0, #2
   1262c:	681b      	ldr	r3, [r3, #0]
   1262e:	4798      	blx	r3
   12630:	e7f3      	b.n	1261a <print_number+0x22>
	} else if (fabs(((double)item->valueint) - d) <= DBL_EPSILON &&
   12632:	6968      	ldr	r0, [r5, #20]
   12634:	f7fa fcd0 	bl	cfd8 <__aeabi_i2d>
   12638:	4632      	mov	r2, r6
   1263a:	463b      	mov	r3, r7
   1263c:	f7fa fb7e 	bl	cd3c <__aeabi_dsub>
   12640:	ec41 0b10 	vmov	d0, r0, r1
   12644:	f01c fee4 	bl	2f410 <fabs>
   12648:	2200      	movs	r2, #0
   1264a:	4b49      	ldr	r3, [pc, #292]	; (12770 <print_number+0x178>)
   1264c:	ec51 0b10 	vmov	r0, r1, d0
   12650:	f7fa ffa8 	bl	d5a4 <__aeabi_dcmple>
   12654:	b300      	cbz	r0, 12698 <print_number+0xa0>
   12656:	a33c      	add	r3, pc, #240	; (adr r3, 12748 <print_number+0x150>)
   12658:	e9d3 2300 	ldrd	r2, r3, [r3]
   1265c:	4630      	mov	r0, r6
   1265e:	4639      	mov	r1, r7
   12660:	f7fa ffa0 	bl	d5a4 <__aeabi_dcmple>
   12664:	b1c0      	cbz	r0, 12698 <print_number+0xa0>
		   d <= INT_MAX && d >= INT_MIN) {
   12666:	2200      	movs	r2, #0
   12668:	4b42      	ldr	r3, [pc, #264]	; (12774 <print_number+0x17c>)
   1266a:	4630      	mov	r0, r6
   1266c:	4639      	mov	r1, r7
   1266e:	f7fa ffa3 	bl	d5b8 <__aeabi_dcmpge>
   12672:	b188      	cbz	r0, 12698 <print_number+0xa0>
		if (p)
   12674:	b15c      	cbz	r4, 1268e <print_number+0x96>
			str = ensure(p, 21);
   12676:	2115      	movs	r1, #21
   12678:	4620      	mov	r0, r4
   1267a:	f004 f823 	bl	166c4 <ensure>
			str = (char *)cJSON_malloc(
   1267e:	4604      	mov	r4, r0
		if (str)
   12680:	2800      	cmp	r0, #0
   12682:	d0cf      	beq.n	12624 <print_number+0x2c>
			sprintf(str, "%d", item->valueint);
   12684:	696a      	ldr	r2, [r5, #20]
   12686:	493c      	ldr	r1, [pc, #240]	; (12778 <print_number+0x180>)
   12688:	f01f fb24 	bl	31cd4 <siprintf>
   1268c:	e7ca      	b.n	12624 <print_number+0x2c>
			str = (char *)cJSON_malloc(
   1268e:	4b37      	ldr	r3, [pc, #220]	; (1276c <print_number+0x174>)
   12690:	2015      	movs	r0, #21
   12692:	681b      	ldr	r3, [r3, #0]
   12694:	4798      	blx	r3
   12696:	e7f2      	b.n	1267e <print_number+0x86>
		if (p)
   12698:	b374      	cbz	r4, 126f8 <print_number+0x100>
			str = ensure(p, 64);
   1269a:	2140      	movs	r1, #64	; 0x40
   1269c:	4620      	mov	r0, r4
   1269e:	f004 f811 	bl	166c4 <ensure>
			str = (char *)cJSON_malloc(
   126a2:	4604      	mov	r4, r0
		if (str) {
   126a4:	2800      	cmp	r0, #0
   126a6:	d0bd      	beq.n	12624 <print_number+0x2c>
			if (fabs(floor(d) - d) <= DBL_EPSILON &&
   126a8:	ec47 6b10 	vmov	d0, r6, r7
   126ac:	f000 fcc4 	bl	13038 <floor>
   126b0:	4632      	mov	r2, r6
   126b2:	463b      	mov	r3, r7
   126b4:	ec51 0b10 	vmov	r0, r1, d0
   126b8:	f7fa fb40 	bl	cd3c <__aeabi_dsub>
   126bc:	ec41 0b10 	vmov	d0, r0, r1
   126c0:	f01c fea6 	bl	2f410 <fabs>
   126c4:	2200      	movs	r2, #0
   126c6:	4b2a      	ldr	r3, [pc, #168]	; (12770 <print_number+0x178>)
   126c8:	ec51 0b10 	vmov	r0, r1, d0
   126cc:	f7fa ff6a 	bl	d5a4 <__aeabi_dcmple>
   126d0:	b1b8      	cbz	r0, 12702 <print_number+0x10a>
			    fabs(d) < 1.0e60)
   126d2:	ec47 6b10 	vmov	d0, r6, r7
   126d6:	f01c fe9b 	bl	2f410 <fabs>
			if (fabs(floor(d) - d) <= DBL_EPSILON &&
   126da:	a31d      	add	r3, pc, #116	; (adr r3, 12750 <print_number+0x158>)
   126dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   126e0:	ec51 0b10 	vmov	r0, r1, d0
   126e4:	f7fa ff54 	bl	d590 <__aeabi_dcmplt>
   126e8:	b158      	cbz	r0, 12702 <print_number+0x10a>
				sprintf(str, "%.0f", d);
   126ea:	4632      	mov	r2, r6
   126ec:	463b      	mov	r3, r7
   126ee:	4923      	ldr	r1, [pc, #140]	; (1277c <print_number+0x184>)
				sprintf(str, "%f", d);
   126f0:	4620      	mov	r0, r4
   126f2:	f01f faef 	bl	31cd4 <siprintf>
	return str;
   126f6:	e795      	b.n	12624 <print_number+0x2c>
			str = (char *)cJSON_malloc(
   126f8:	4b1c      	ldr	r3, [pc, #112]	; (1276c <print_number+0x174>)
   126fa:	2040      	movs	r0, #64	; 0x40
   126fc:	681b      	ldr	r3, [r3, #0]
   126fe:	4798      	blx	r3
   12700:	e7cf      	b.n	126a2 <print_number+0xaa>
			else if (fabs(d) < 1.0e-6 || fabs(d) > 1.0e9)
   12702:	ec47 6b10 	vmov	d0, r6, r7
   12706:	f01c fe83 	bl	2f410 <fabs>
   1270a:	a313      	add	r3, pc, #76	; (adr r3, 12758 <print_number+0x160>)
   1270c:	e9d3 2300 	ldrd	r2, r3, [r3]
   12710:	ec51 0b10 	vmov	r0, r1, d0
   12714:	f7fa ff3c 	bl	d590 <__aeabi_dcmplt>
   12718:	b118      	cbz	r0, 12722 <print_number+0x12a>
				sprintf(str, "%e", d);
   1271a:	4632      	mov	r2, r6
   1271c:	463b      	mov	r3, r7
   1271e:	4918      	ldr	r1, [pc, #96]	; (12780 <print_number+0x188>)
   12720:	e7e6      	b.n	126f0 <print_number+0xf8>
			else if (fabs(d) < 1.0e-6 || fabs(d) > 1.0e9)
   12722:	ec47 6b10 	vmov	d0, r6, r7
   12726:	f01c fe73 	bl	2f410 <fabs>
   1272a:	a30d      	add	r3, pc, #52	; (adr r3, 12760 <print_number+0x168>)
   1272c:	e9d3 2300 	ldrd	r2, r3, [r3]
   12730:	ec51 0b10 	vmov	r0, r1, d0
   12734:	f7fa ff4a 	bl	d5cc <__aeabi_dcmpgt>
   12738:	2800      	cmp	r0, #0
   1273a:	d1ee      	bne.n	1271a <print_number+0x122>
				sprintf(str, "%f", d);
   1273c:	4632      	mov	r2, r6
   1273e:	463b      	mov	r3, r7
   12740:	4910      	ldr	r1, [pc, #64]	; (12784 <print_number+0x18c>)
   12742:	e7d5      	b.n	126f0 <print_number+0xf8>
   12744:	f3af 8000 	nop.w
   12748:	ffc00000 	.word	0xffc00000
   1274c:	41dfffff 	.word	0x41dfffff
   12750:	e4c2f344 	.word	0xe4c2f344
   12754:	4c63e9e4 	.word	0x4c63e9e4
   12758:	a0b5ed8d 	.word	0xa0b5ed8d
   1275c:	3eb0c6f7 	.word	0x3eb0c6f7
   12760:	00000000 	.word	0x00000000
   12764:	41cdcd65 	.word	0x41cdcd65
   12768:	0003fd2f 	.word	0x0003fd2f
   1276c:	20020080 	.word	0x20020080
   12770:	3cb00000 	.word	0x3cb00000
   12774:	c1e00000 	.word	0xc1e00000
   12778:	0003c655 	.word	0x0003c655
   1277c:	0003c4ff 	.word	0x0003c4ff
   12780:	0003c504 	.word	0x0003c504
   12784:	0003c507 	.word	0x0003c507

00012788 <sntp_query>:

	return res;
}

int sntp_query(struct sntp_ctx *ctx, u32_t timeout, struct sntp_time *time)
{
   12788:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1278c:	4605      	mov	r5, r0
   1278e:	b09b      	sub	sp, #108	; 0x6c
   12790:	460f      	mov	r7, r1
   12792:	4616      	mov	r6, r2
	struct sntp_pkt tx_pkt = { 0 };
   12794:	2100      	movs	r1, #0
   12796:	2230      	movs	r2, #48	; 0x30
   12798:	a802      	add	r0, sp, #8
   1279a:	f026 fc4c 	bl	39036 <memset>
	int ret = 0;

	if (!ctx || !time) {
   1279e:	2d00      	cmp	r5, #0
   127a0:	f000 8087 	beq.w	128b2 <sntp_query+0x12a>
   127a4:	2e00      	cmp	r6, #0
   127a6:	f000 8084 	beq.w	128b2 <sntp_query+0x12a>
	}

	/* prepare request pkt */
	SNTP_SET_LI(tx_pkt.lvm, 0);
	SNTP_SET_VN(tx_pkt.lvm, SNTP_VERSION_NUMBER);
	SNTP_SET_MODE(tx_pkt.lvm, SNTP_MODE_CLIENT);
   127aa:	231b      	movs	r3, #27
   127ac:	f88d 3008 	strb.w	r3, [sp, #8]
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (s64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
   127b0:	f026 fb39 	bl	38e26 <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   127b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   127b8:	2400      	movs	r4, #0
   127ba:	fba0 8903 	umull	r8, r9, r0, r3
   127be:	fb03 9901 	mla	r9, r3, r1, r9
   127c2:	ea4f 30d8 	mov.w	r0, r8, lsr #15
	return time / MSEC_PER_SEC;
   127c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   127ca:	2300      	movs	r3, #0
   127cc:	ea40 4049 	orr.w	r0, r0, r9, lsl #17
   127d0:	4621      	mov	r1, r4
   127d2:	f7fa ffcd 	bl	d770 <__aeabi_uldivmod>
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
   127d6:	4a3c      	ldr	r2, [pc, #240]	; (128c8 <sntp_query+0x140>)
   127d8:	4402      	add	r2, r0
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
   127da:	0a13      	lsrs	r3, r2, #8
   127dc:	0211      	lsls	r1, r2, #8
   127de:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   127e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   127e6:	430b      	orrs	r3, r1
   127e8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   127ec:	f043 0383 	orr.w	r3, r3, #131	; 0x83
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
   127f0:	612a      	str	r2, [r5, #16]
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
   127f2:	930c      	str	r3, [sp, #48]	; 0x30

	ret = send(ctx->sock.fd, (u8_t *)&tx_pkt, sizeof(tx_pkt), 0);
   127f4:	68e8      	ldr	r0, [r5, #12]
	if (z_syscall_trap()) {
		return (ssize_t) arch_syscall_invoke6(*(uintptr_t *)&sock, *(uintptr_t *)&buf, *(uintptr_t *)&len, *(uintptr_t *)&flags, *(uintptr_t *)&dest_addr, *(uintptr_t *)&addrlen, K_SYSCALL_ZSOCK_SENDTO);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   127f6:	2230      	movs	r2, #48	; 0x30
   127f8:	e9cd 4400 	strd	r4, r4, [sp]
   127fc:	4623      	mov	r3, r4
   127fe:	a902      	add	r1, sp, #8
   12800:	f021 fb3b 	bl	33e7a <z_impl_zsock_sendto>
	if (ret < 0) {
   12804:	2800      	cmp	r0, #0
   12806:	db0f      	blt.n	12828 <sntp_query+0xa0>
	struct sntp_pkt buf = { 0 };
   12808:	4621      	mov	r1, r4
   1280a:	2230      	movs	r2, #48	; 0x30
   1280c:	a80e      	add	r0, sp, #56	; 0x38
   1280e:	f026 fc12 	bl	39036 <memset>
	status = poll(sntp->sock.fds, sntp->sock.nfds, timeout);
   12812:	68a9      	ldr	r1, [r5, #8]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&fds, *(uintptr_t *)&nfds, *(uintptr_t *)&timeout, K_SYSCALL_ZSOCK_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_poll(fds, nfds, timeout);
   12814:	463a      	mov	r2, r7
   12816:	4628      	mov	r0, r5
   12818:	f007 f8c8 	bl	199ac <z_impl_zsock_poll>
	if (status < 0) {
   1281c:	42a0      	cmp	r0, r4
   1281e:	da06      	bge.n	1282e <sntp_query+0xa6>
		return -errno;
   12820:	f022 fe57 	bl	354d2 <__errno>
   12824:	6800      	ldr	r0, [r0, #0]
   12826:	4240      	negs	r0, r0
		NET_ERR("Failed to send over UDP socket %d", ret);
		return ret;
	}

	return sntp_recv_response(ctx, timeout, time);
}
   12828:	b01b      	add	sp, #108	; 0x6c
   1282a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (status == 0) {
   1282e:	d037      	beq.n	128a0 <sntp_query+0x118>
	rcvd = recv(sntp->sock.fd, (u8_t *)&buf, sizeof(buf), 0);
   12830:	68e8      	ldr	r0, [r5, #12]
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   12832:	2230      	movs	r2, #48	; 0x30
   12834:	e9cd 4400 	strd	r4, r4, [sp]
   12838:	4623      	mov	r3, r4
   1283a:	a90e      	add	r1, sp, #56	; 0x38
   1283c:	f021 fb6f 	bl	33f1e <z_impl_zsock_recvfrom>
	if (rcvd < 0) {
   12840:	2800      	cmp	r0, #0
   12842:	dbed      	blt.n	12820 <sntp_query+0x98>
	if (rcvd != sizeof(struct sntp_pkt)) {
   12844:	2830      	cmp	r0, #48	; 0x30
   12846:	d12e      	bne.n	128a6 <sntp_query+0x11e>
	if (ntohl(pkt->orig_tm_s) != orig_ts) {
   12848:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1284a:	692a      	ldr	r2, [r5, #16]
   1284c:	ba1b      	rev	r3, r3
   1284e:	429a      	cmp	r2, r3
   12850:	d002      	beq.n	12858 <sntp_query+0xd0>
		return -EINVAL;
   12852:	f06f 0015 	mvn.w	r0, #21
   12856:	e7e7      	b.n	12828 <sntp_query+0xa0>
	if (SNTP_GET_MODE(pkt->lvm) != SNTP_MODE_SERVER) {
   12858:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1285c:	f003 0307 	and.w	r3, r3, #7
   12860:	2b04      	cmp	r3, #4
   12862:	d1f6      	bne.n	12852 <sntp_query+0xca>
	if (pkt->stratum == SNTP_STRATUM_KOD) {
   12864:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   12868:	b303      	cbz	r3, 128ac <sntp_query+0x124>
	if (ntohl(pkt->tx_tm_s) == 0 && ntohl(pkt->tx_tm_f) == 0) {
   1286a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1286c:	9a19      	ldr	r2, [sp, #100]	; 0x64
   1286e:	ba1b      	rev	r3, r3
   12870:	ba12      	rev	r2, r2
   12872:	ea53 0102 	orrs.w	r1, r3, r2
   12876:	d0ec      	beq.n	12852 <sntp_query+0xca>
	if (ts & 0x80000000) {
   12878:	2b00      	cmp	r3, #0
	time->fraction = ntohl(pkt->tx_tm_f);
   1287a:	60b2      	str	r2, [r6, #8]
	if (ts & 0x80000000) {
   1287c:	da0c      	bge.n	12898 <sntp_query+0x110>
		if (ts >= OFFSET_1970_JAN_1) {
   1287e:	4a13      	ldr	r2, [pc, #76]	; (128cc <sntp_query+0x144>)
   12880:	4293      	cmp	r3, r2
   12882:	d9e6      	bls.n	12852 <sntp_query+0xca>
			time->seconds = ts - OFFSET_1970_JAN_1;
   12884:	a10c      	add	r1, pc, #48	; (adr r1, 128b8 <sntp_query+0x130>)
   12886:	e9d1 0100 	ldrd	r0, r1, [r1]
		time->seconds = ts + 0x100000000ULL - OFFSET_1970_JAN_1;
   1288a:	18c4      	adds	r4, r0, r3
   1288c:	f141 0500 	adc.w	r5, r1, #0
   12890:	e9c6 4500 	strd	r4, r5, [r6]
	return 0;
   12894:	2000      	movs	r0, #0
   12896:	e7c7      	b.n	12828 <sntp_query+0xa0>
		time->seconds = ts + 0x100000000ULL - OFFSET_1970_JAN_1;
   12898:	a109      	add	r1, pc, #36	; (adr r1, 128c0 <sntp_query+0x138>)
   1289a:	e9d1 0100 	ldrd	r0, r1, [r1]
   1289e:	e7f4      	b.n	1288a <sntp_query+0x102>
		return -ETIMEDOUT;
   128a0:	f06f 0073 	mvn.w	r0, #115	; 0x73
   128a4:	e7c0      	b.n	12828 <sntp_query+0xa0>
		return -EMSGSIZE;
   128a6:	f06f 0079 	mvn.w	r0, #121	; 0x79
   128aa:	e7bd      	b.n	12828 <sntp_query+0xa0>
		return -EBUSY;
   128ac:	f06f 000f 	mvn.w	r0, #15
	return sntp_recv_response(ctx, timeout, time);
   128b0:	e7ba      	b.n	12828 <sntp_query+0xa0>
		return -EFAULT;
   128b2:	f06f 000d 	mvn.w	r0, #13
   128b6:	e7b7      	b.n	12828 <sntp_query+0xa0>
   128b8:	7c558180 	.word	0x7c558180
   128bc:	ffffffff 	.word	0xffffffff
   128c0:	7c558180 	.word	0x7c558180
   128c4:	00000000 	.word	0x00000000
   128c8:	83aa7e80 	.word	0x83aa7e80
   128cc:	83aa7e7f 	.word	0x83aa7e7f

000128d0 <at_handler>:

	return err;
}

static void at_handler(void *context, const char *response)
{
   128d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   128d4:	ed2d 8b02 	vpush	{d8}
	int err;
	bool notify = false;
	enum lte_lc_notif_type notif_type;
	struct lte_lc_evt evt;

	if (response == NULL) {
   128d8:	460e      	mov	r6, r1
{
   128da:	b090      	sub	sp, #64	; 0x40
	if (response == NULL) {
   128dc:	b991      	cbnz	r1, 12904 <at_handler+0x34>
		LOG_ERR("Response buffer is NULL-pointer");
   128de:	2301      	movs	r3, #1
   128e0:	f04f 0000 	mov.w	r0, #0
   128e4:	4ab8      	ldr	r2, [pc, #736]	; (12bc8 <at_handler+0x2f8>)
   128e6:	f363 0007 	bfi	r0, r3, #0, #8
   128ea:	4bb8      	ldr	r3, [pc, #736]	; (12bcc <at_handler+0x2fc>)
   128ec:	49b8      	ldr	r1, [pc, #736]	; (12bd0 <at_handler+0x300>)
   128ee:	1a9b      	subs	r3, r3, r2
   128f0:	08db      	lsrs	r3, r3, #3
   128f2:	f363 108f 	bfi	r0, r3, #6, #10
   128f6:	f021 f974 	bl	33be2 <log_string_sync>
	}

	if (evt_handler && notify) {
		evt_handler(&evt);
	}
}
   128fa:	b010      	add	sp, #64	; 0x40
   128fc:	ecbd 8b02 	vpop	{d8}
   12900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < ARRAY_SIZE(at_notifs); i++) {
   12904:	2400      	movs	r4, #0
   12906:	4db3      	ldr	r5, [pc, #716]	; (12bd4 <at_handler+0x304>)
		if (strncmp(at_notifs[i], notif,
   12908:	f855 7b04 	ldr.w	r7, [r5], #4
   1290c:	4638      	mov	r0, r7
   1290e:	f7ff fbb7 	bl	12080 <strlen>
   12912:	4631      	mov	r1, r6
   12914:	4602      	mov	r2, r0
   12916:	4638      	mov	r0, r7
   12918:	f026 fce9 	bl	392ee <strncmp>
   1291c:	4680      	mov	r8, r0
   1291e:	2800      	cmp	r0, #0
   12920:	d140      	bne.n	129a4 <at_handler+0xd4>
			*type = i;
   12922:	b2e7      	uxtb	r7, r4
	switch (notif_type) {
   12924:	4ba8      	ldr	r3, [pc, #672]	; (12bc8 <at_handler+0x2f8>)
   12926:	4ca9      	ldr	r4, [pc, #676]	; (12bcc <at_handler+0x2fc>)
   12928:	2f01      	cmp	r7, #1
   1292a:	eba4 0403 	sub.w	r4, r4, r3
   1292e:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   12932:	f000 8102 	beq.w	12b3a <at_handler+0x26a>
   12936:	2f02      	cmp	r7, #2
   12938:	f000 8198 	beq.w	12c6c <at_handler+0x39c>
		LOG_DBG("+CEREG notification: %s", log_strdup(response));
   1293c:	2304      	movs	r3, #4
   1293e:	f04f 0500 	mov.w	r5, #0
   12942:	4630      	mov	r0, r6
   12944:	f363 0507 	bfi	r5, r3, #0, #8
   12948:	f021 f95d 	bl	33c06 <log_strdup>
	size_t len = sizeof(str_buf) - 1;
   1294c:	2709      	movs	r7, #9
		LOG_DBG("+CEREG notification: %s", log_strdup(response));
   1294e:	f364 158f 	bfi	r5, r4, #6, #10
   12952:	4603      	mov	r3, r0
   12954:	4aa0      	ldr	r2, [pc, #640]	; (12bd8 <at_handler+0x308>)
   12956:	4628      	mov	r0, r5
   12958:	49a0      	ldr	r1, [pc, #640]	; (12bdc <at_handler+0x30c>)
   1295a:	f021 f942 	bl	33be2 <log_string_sync>
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   1295e:	210a      	movs	r1, #10
   12960:	a80b      	add	r0, sp, #44	; 0x2c
	size_t len = sizeof(str_buf) - 1;
   12962:	9706      	str	r7, [sp, #24]
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   12964:	f025 ff31 	bl	387ca <at_params_list_init>
	if (err) {
   12968:	4605      	mov	r5, r0
   1296a:	b1f8      	cbz	r0, 129ac <at_handler+0xdc>
		LOG_ERR("Could not init AT params list, error: %d", err);
   1296c:	f04f 0000 	mov.w	r0, #0
   12970:	2301      	movs	r3, #1
   12972:	f363 0007 	bfi	r0, r3, #0, #8
   12976:	f364 108f 	bfi	r0, r4, #6, #10
   1297a:	462a      	mov	r2, r5
   1297c:	4998      	ldr	r1, [pc, #608]	; (12be0 <at_handler+0x310>)
   1297e:	f021 f930 	bl	33be2 <log_string_sync>
			LOG_ERR("Failed to parse notification (error %d): %s",
   12982:	2301      	movs	r3, #1
   12984:	f04f 0700 	mov.w	r7, #0
   12988:	4630      	mov	r0, r6
   1298a:	f363 0707 	bfi	r7, r3, #0, #8
   1298e:	f021 f93a 	bl	33c06 <log_strdup>
   12992:	f364 178f 	bfi	r7, r4, #6, #10
   12996:	4603      	mov	r3, r0
   12998:	462a      	mov	r2, r5
   1299a:	4992      	ldr	r1, [pc, #584]	; (12be4 <at_handler+0x314>)
   1299c:	4638      	mov	r0, r7
   1299e:	f021 f920 	bl	33be2 <log_string_sync>
			return;
   129a2:	e7aa      	b.n	128fa <at_handler+0x2a>
	for (size_t i = 0; i < ARRAY_SIZE(at_notifs); i++) {
   129a4:	3401      	adds	r4, #1
   129a6:	2c03      	cmp	r4, #3
   129a8:	d1ae      	bne.n	12908 <at_handler+0x38>
   129aa:	e7a6      	b.n	128fa <at_handler+0x2a>
	err = at_parser_params_from_str(notification,
   129ac:	4601      	mov	r1, r0
   129ae:	aa0b      	add	r2, sp, #44	; 0x2c
   129b0:	4630      	mov	r0, r6
   129b2:	f025 ff07 	bl	387c4 <at_parser_params_from_str>
	if (err) {
   129b6:	4605      	mov	r5, r0
   129b8:	2800      	cmp	r0, #0
   129ba:	d05d      	beq.n	12a78 <at_handler+0x1a8>
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
   129bc:	f04f 0000 	mov.w	r0, #0
   129c0:	2301      	movs	r3, #1
   129c2:	462a      	mov	r2, r5
   129c4:	f363 0007 	bfi	r0, r3, #0, #8
   129c8:	4987      	ldr	r1, [pc, #540]	; (12be8 <at_handler+0x318>)
   129ca:	f364 108f 	bfi	r0, r4, #6, #10
		LOG_ERR("Failed to parse PSM configuration, error: %d", err);
   129ce:	f021 f908 	bl	33be2 <log_string_sync>
	at_params_list_free(&resp_list);
   129d2:	a80b      	add	r0, sp, #44	; 0x2c
   129d4:	f025 ff0c 	bl	387f0 <at_params_list_free>
		if (err) {
   129d8:	2d00      	cmp	r5, #0
   129da:	d1d2      	bne.n	12982 <at_handler+0xb2>
		if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   129dc:	f008 03fb 	and.w	r3, r8, #251	; 0xfb
   129e0:	2b01      	cmp	r3, #1
   129e2:	d102      	bne.n	129ea <at_handler+0x11a>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   129e4:	4881      	ldr	r0, [pc, #516]	; (12bec <at_handler+0x31c>)
   129e6:	f01b faf7 	bl	2dfd8 <z_impl_k_sem_give>
		if (!evt_handler) {
   129ea:	4d81      	ldr	r5, [pc, #516]	; (12bf0 <at_handler+0x320>)
   129ec:	682b      	ldr	r3, [r5, #0]
   129ee:	2b00      	cmp	r3, #0
   129f0:	d083      	beq.n	128fa <at_handler+0x2a>
		if (reg_status != prev_reg_status) {
   129f2:	4a80      	ldr	r2, [pc, #512]	; (12bf4 <at_handler+0x324>)
   129f4:	7811      	ldrb	r1, [r2, #0]
   129f6:	4541      	cmp	r1, r8
   129f8:	d008      	beq.n	12a0c <at_handler+0x13c>
			prev_reg_status = reg_status;
   129fa:	f882 8000 	strb.w	r8, [r2]
			evt.type = LTE_LC_EVT_NW_REG_STATUS;
   129fe:	2200      	movs	r2, #0
			evt.nw_reg_status = reg_status;
   12a00:	f88d 8038 	strb.w	r8, [sp, #56]	; 0x38
			evt.type = LTE_LC_EVT_NW_REG_STATUS;
   12a04:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
			evt_handler(&evt);
   12a08:	a80d      	add	r0, sp, #52	; 0x34
   12a0a:	4798      	blx	r3
		if (memcmp(&cell, &prev_cell, sizeof(struct lte_lc_cell))) {
   12a0c:	4e7a      	ldr	r6, [pc, #488]	; (12bf8 <at_handler+0x328>)
   12a0e:	ac07      	add	r4, sp, #28
   12a10:	2208      	movs	r2, #8
   12a12:	4631      	mov	r1, r6
   12a14:	4620      	mov	r0, r4
   12a16:	f026 fac6 	bl	38fa6 <memcmp>
   12a1a:	b160      	cbz	r0, 12a36 <at_handler+0x166>
			memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
   12a1c:	e894 0003 	ldmia.w	r4, {r0, r1}
			evt.type = LTE_LC_EVT_CELL_UPDATE;
   12a20:	2304      	movs	r3, #4
   12a22:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
			memcpy(&evt.cell, &cell, sizeof(struct lte_lc_cell));
   12a26:	ab10      	add	r3, sp, #64	; 0x40
   12a28:	e903 0003 	stmdb	r3, {r0, r1}
			memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
   12a2c:	e886 0003 	stmia.w	r6, {r0, r1}
			evt_handler(&evt);
   12a30:	682b      	ldr	r3, [r5, #0]
   12a32:	a80d      	add	r0, sp, #52	; 0x34
   12a34:	4798      	blx	r3
		if (memcmp(&psm_cfg, &prev_psm_cfg,
   12a36:	4e71      	ldr	r6, [pc, #452]	; (12bfc <at_handler+0x32c>)
   12a38:	ac09      	add	r4, sp, #36	; 0x24
   12a3a:	2208      	movs	r2, #8
   12a3c:	4631      	mov	r1, r6
   12a3e:	4620      	mov	r0, r4
   12a40:	f026 fab1 	bl	38fa6 <memcmp>
   12a44:	b160      	cbz	r0, 12a60 <at_handler+0x190>
			memcpy(&prev_psm_cfg, &psm_cfg,
   12a46:	e894 0003 	ldmia.w	r4, {r0, r1}
			evt.type = LTE_LC_EVT_PSM_UPDATE;
   12a4a:	2301      	movs	r3, #1
   12a4c:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
			memcpy(&evt.psm_cfg, &psm_cfg,
   12a50:	ab10      	add	r3, sp, #64	; 0x40
   12a52:	e903 0003 	stmdb	r3, {r0, r1}
			memcpy(&prev_psm_cfg, &psm_cfg,
   12a56:	e886 0003 	stmia.w	r6, {r0, r1}
			evt_handler(&evt);
   12a5a:	682b      	ldr	r3, [r5, #0]
   12a5c:	a80d      	add	r0, sp, #52	; 0x34
   12a5e:	4798      	blx	r3
	bool notify = false;
   12a60:	2300      	movs	r3, #0
	if (evt_handler && notify) {
   12a62:	4a63      	ldr	r2, [pc, #396]	; (12bf0 <at_handler+0x320>)
   12a64:	6812      	ldr	r2, [r2, #0]
   12a66:	2a00      	cmp	r2, #0
   12a68:	f43f af47 	beq.w	128fa <at_handler+0x2a>
   12a6c:	2b00      	cmp	r3, #0
   12a6e:	f43f af44 	beq.w	128fa <at_handler+0x2a>
		evt_handler(&evt);
   12a72:	a80d      	add	r0, sp, #52	; 0x34
   12a74:	4790      	blx	r2
   12a76:	e740      	b.n	128fa <at_handler+0x2a>
	err = at_params_int_get(&resp_list,
   12a78:	aa05      	add	r2, sp, #20
   12a7a:	2101      	movs	r1, #1
   12a7c:	a80b      	add	r0, sp, #44	; 0x2c
   12a7e:	f025 ff65 	bl	3894c <at_params_int_get>
	if (err) {
   12a82:	4605      	mov	r5, r0
   12a84:	b148      	cbz	r0, 12a9a <at_handler+0x1ca>
		LOG_ERR("Could not get registration status, error: %d", err);
   12a86:	f04f 0000 	mov.w	r0, #0
   12a8a:	2301      	movs	r3, #1
   12a8c:	f363 0007 	bfi	r0, r3, #0, #8
   12a90:	f364 108f 	bfi	r0, r4, #6, #10
   12a94:	462a      	mov	r2, r5
   12a96:	495a      	ldr	r1, [pc, #360]	; (12c00 <at_handler+0x330>)
   12a98:	e799      	b.n	129ce <at_handler+0xfe>
	err = at_params_string_get(&resp_list,
   12a9a:	ab06      	add	r3, sp, #24
   12a9c:	aa0d      	add	r2, sp, #52	; 0x34
   12a9e:	2102      	movs	r1, #2
   12aa0:	a80b      	add	r0, sp, #44	; 0x2c
	*reg_status = status;
   12aa2:	f89d 8014 	ldrb.w	r8, [sp, #20]
	err = at_params_string_get(&resp_list,
   12aa6:	f025 ff68 	bl	3897a <at_params_string_get>
	if (err) {
   12aaa:	4605      	mov	r5, r0
   12aac:	b148      	cbz	r0, 12ac2 <at_handler+0x1f2>
		LOG_ERR("Could not get tracking area code, error: %d", err);
   12aae:	f04f 0000 	mov.w	r0, #0
   12ab2:	2301      	movs	r3, #1
   12ab4:	f363 0007 	bfi	r0, r3, #0, #8
   12ab8:	f364 108f 	bfi	r0, r4, #6, #10
   12abc:	462a      	mov	r2, r5
   12abe:	4951      	ldr	r1, [pc, #324]	; (12c04 <at_handler+0x334>)
   12ac0:	e785      	b.n	129ce <at_handler+0xfe>
	str_buf[len] = '\0';
   12ac2:	9b06      	ldr	r3, [sp, #24]
   12ac4:	aa10      	add	r2, sp, #64	; 0x40
   12ac6:	4413      	add	r3, r2
   12ac8:	f803 0c0c 	strb.w	r0, [r3, #-12]
	cell->tac = strtoul(str_buf, NULL, 16);
   12acc:	4601      	mov	r1, r0
   12ace:	2210      	movs	r2, #16
   12ad0:	a80d      	add	r0, sp, #52	; 0x34
   12ad2:	f01f fc05 	bl	322e0 <strtoul>
	err = at_params_string_get(&resp_list,
   12ad6:	ab06      	add	r3, sp, #24
	cell->tac = strtoul(str_buf, NULL, 16);
   12ad8:	9008      	str	r0, [sp, #32]
	err = at_params_string_get(&resp_list,
   12ada:	aa0d      	add	r2, sp, #52	; 0x34
   12adc:	2103      	movs	r1, #3
   12ade:	a80b      	add	r0, sp, #44	; 0x2c
	len = sizeof(str_buf) - 1;
   12ae0:	9706      	str	r7, [sp, #24]
	err = at_params_string_get(&resp_list,
   12ae2:	f025 ff4a 	bl	3897a <at_params_string_get>
	if (err) {
   12ae6:	4605      	mov	r5, r0
   12ae8:	b148      	cbz	r0, 12afe <at_handler+0x22e>
		LOG_ERR("Could not get cell ID, error: %d", err);
   12aea:	f04f 0000 	mov.w	r0, #0
   12aee:	2301      	movs	r3, #1
   12af0:	f363 0007 	bfi	r0, r3, #0, #8
   12af4:	f364 108f 	bfi	r0, r4, #6, #10
   12af8:	462a      	mov	r2, r5
   12afa:	4943      	ldr	r1, [pc, #268]	; (12c08 <at_handler+0x338>)
   12afc:	e767      	b.n	129ce <at_handler+0xfe>
	str_buf[len] = '\0';
   12afe:	9b06      	ldr	r3, [sp, #24]
   12b00:	aa10      	add	r2, sp, #64	; 0x40
   12b02:	4413      	add	r3, r2
   12b04:	f803 0c0c 	strb.w	r0, [r3, #-12]
	cell->id = strtoul(str_buf, NULL, 16);
   12b08:	4601      	mov	r1, r0
   12b0a:	2210      	movs	r2, #16
   12b0c:	a80d      	add	r0, sp, #52	; 0x34
   12b0e:	f01f fbe7 	bl	322e0 <strtoul>
	err = parse_psm_cfg(&resp_list, true, psm_cfg);
   12b12:	aa09      	add	r2, sp, #36	; 0x24
	cell->id = strtoul(str_buf, NULL, 16);
   12b14:	9007      	str	r0, [sp, #28]
	err = parse_psm_cfg(&resp_list, true, psm_cfg);
   12b16:	2101      	movs	r1, #1
   12b18:	a80b      	add	r0, sp, #44	; 0x2c
   12b1a:	f00e fb87 	bl	2122c <parse_psm_cfg>
	if (err) {
   12b1e:	4605      	mov	r5, r0
   12b20:	2800      	cmp	r0, #0
   12b22:	f43f af56 	beq.w	129d2 <at_handler+0x102>
		LOG_ERR("Failed to parse PSM configuration, error: %d", err);
   12b26:	f04f 0000 	mov.w	r0, #0
   12b2a:	2301      	movs	r3, #1
   12b2c:	f363 0007 	bfi	r0, r3, #0, #8
   12b30:	f364 108f 	bfi	r0, r4, #6, #10
   12b34:	462a      	mov	r2, r5
   12b36:	4935      	ldr	r1, [pc, #212]	; (12c0c <at_handler+0x33c>)
   12b38:	e749      	b.n	129ce <at_handler+0xfe>
		LOG_DBG("+CSCON notification");
   12b3a:	2304      	movs	r3, #4
   12b3c:	f04f 0000 	mov.w	r0, #0
   12b40:	f363 0007 	bfi	r0, r3, #0, #8
   12b44:	f364 108f 	bfi	r0, r4, #6, #10
   12b48:	4a23      	ldr	r2, [pc, #140]	; (12bd8 <at_handler+0x308>)
   12b4a:	4931      	ldr	r1, [pc, #196]	; (12c10 <at_handler+0x340>)
   12b4c:	f021 f849 	bl	33be2 <log_string_sync>
			  size_t mode_index)
{
	int err, temp_mode;
	struct at_param_list resp_list = {0};

	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   12b50:	2104      	movs	r1, #4
   12b52:	a80b      	add	r0, sp, #44	; 0x2c
	struct at_param_list resp_list = {0};
   12b54:	e9cd 880b 	strd	r8, r8, [sp, #44]	; 0x2c
	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   12b58:	f025 fe37 	bl	387ca <at_params_list_init>
	if (err) {
   12b5c:	4605      	mov	r5, r0
   12b5e:	b1b0      	cbz	r0, 12b8e <at_handler+0x2be>
		LOG_ERR("Could not init AT params list, error: %d", err);
   12b60:	f04f 0000 	mov.w	r0, #0
   12b64:	2301      	movs	r3, #1
   12b66:	f363 0007 	bfi	r0, r3, #0, #8
   12b6a:	f364 108f 	bfi	r0, r4, #6, #10
   12b6e:	462a      	mov	r2, r5
   12b70:	491b      	ldr	r1, [pc, #108]	; (12be0 <at_handler+0x310>)
   12b72:	f021 f836 	bl	33be2 <log_string_sync>
			LOG_ERR("Can't parse signalling mode, error: %d", err);
   12b76:	f04f 0000 	mov.w	r0, #0
   12b7a:	2301      	movs	r3, #1
   12b7c:	462a      	mov	r2, r5
   12b7e:	f363 0007 	bfi	r0, r3, #0, #8
   12b82:	4924      	ldr	r1, [pc, #144]	; (12c14 <at_handler+0x344>)
   12b84:	f364 108f 	bfi	r0, r4, #6, #10
			LOG_ERR("Can't parse eDRX, error: %d", err);
   12b88:	f021 f82b 	bl	33be2 <log_string_sync>
			return;
   12b8c:	e6b5      	b.n	128fa <at_handler+0x2a>
		return err;
	}

	/* Parse CSCON response and populate AT parameter list */
	err = at_parser_params_from_str(at_response,
   12b8e:	4601      	mov	r1, r0
   12b90:	aa0b      	add	r2, sp, #44	; 0x2c
   12b92:	4630      	mov	r0, r6
   12b94:	f025 fe16 	bl	387c4 <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err) {
   12b98:	4605      	mov	r5, r0
   12b9a:	2800      	cmp	r0, #0
   12b9c:	d03e      	beq.n	12c1c <at_handler+0x34c>
		LOG_ERR("Could not parse +CSCON response, error: %d", err);
   12b9e:	f04f 0000 	mov.w	r0, #0
   12ba2:	2301      	movs	r3, #1
   12ba4:	462a      	mov	r2, r5
   12ba6:	f363 0007 	bfi	r0, r3, #0, #8
   12baa:	491b      	ldr	r1, [pc, #108]	; (12c18 <at_handler+0x348>)
   12bac:	f364 108f 	bfi	r0, r4, #6, #10
	}

	/* Get the RRC mode from the response */
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
	if (err) {
		LOG_ERR("Could not get signalling mode, error: %d", err);
   12bb0:	f021 f817 	bl	33be2 <log_string_sync>
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
		err = -EINVAL;
	}

clean_exit:
	at_params_list_free(&resp_list);
   12bb4:	a80b      	add	r0, sp, #44	; 0x2c
   12bb6:	f025 fe1b 	bl	387f0 <at_params_list_free>
		if (err) {
   12bba:	2d00      	cmp	r5, #0
   12bbc:	d1db      	bne.n	12b76 <at_handler+0x2a6>
		evt.type = LTE_LC_EVT_RRC_UPDATE;
   12bbe:	2303      	movs	r3, #3
		evt.type = LTE_LC_EVT_EDRX_UPDATE;
   12bc0:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
		notify = true;
   12bc4:	2301      	movs	r3, #1
		break;
   12bc6:	e74c      	b.n	12a62 <at_handler+0x192>
   12bc8:	00039f48 	.word	0x00039f48
   12bcc:	00039fa8 	.word	0x00039fa8
   12bd0:	0003e53a 	.word	0x0003e53a
   12bd4:	0003a740 	.word	0x0003a740
   12bd8:	0003e4ff 	.word	0x0003e4ff
   12bdc:	0003e55a 	.word	0x0003e55a
   12be0:	0003e9ae 	.word	0x0003e9ae
   12be4:	0003e5f0 	.word	0x0003e5f0
   12be8:	0003e9d7 	.word	0x0003e9d7
   12bec:	20022378 	.word	0x20022378
   12bf0:	20022374 	.word	0x20022374
   12bf4:	2002807e 	.word	0x2002807e
   12bf8:	20022390 	.word	0x20022390
   12bfc:	20022398 	.word	0x20022398
   12c00:	0003e8ac 	.word	0x0003e8ac
   12c04:	0003e576 	.word	0x0003e576
   12c08:	0003e5a2 	.word	0x0003e5a2
   12c0c:	0003e5c3 	.word	0x0003e5c3
   12c10:	0003e61c 	.word	0x0003e61c
   12c14:	0003e6a4 	.word	0x0003e6a4
   12c18:	0003e634 	.word	0x0003e634
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
   12c1c:	aa09      	add	r2, sp, #36	; 0x24
   12c1e:	4639      	mov	r1, r7
   12c20:	a80b      	add	r0, sp, #44	; 0x2c
   12c22:	f025 fe93 	bl	3894c <at_params_int_get>
	if (err) {
   12c26:	4605      	mov	r5, r0
   12c28:	b148      	cbz	r0, 12c3e <at_handler+0x36e>
		LOG_ERR("Could not get signalling mode, error: %d", err);
   12c2a:	f04f 0000 	mov.w	r0, #0
   12c2e:	2301      	movs	r3, #1
   12c30:	f363 0007 	bfi	r0, r3, #0, #8
   12c34:	f364 108f 	bfi	r0, r4, #6, #10
   12c38:	462a      	mov	r2, r5
   12c3a:	49a9      	ldr	r1, [pc, #676]	; (12ee0 <at_handler+0x610>)
   12c3c:	e7b8      	b.n	12bb0 <at_handler+0x2e0>
	if (temp_mode == 0) {
   12c3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12c40:	b912      	cbnz	r2, 12c48 <at_handler+0x378>
		*mode = LTE_LC_RRC_MODE_IDLE;
   12c42:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
   12c46:	e7b5      	b.n	12bb4 <at_handler+0x2e4>
	} else if (temp_mode == 1) {
   12c48:	2a01      	cmp	r2, #1
   12c4a:	d102      	bne.n	12c52 <at_handler+0x382>
		*mode = LTE_LC_RRC_MODE_CONNECTED;
   12c4c:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   12c50:	e7b0      	b.n	12bb4 <at_handler+0x2e4>
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
   12c52:	2301      	movs	r3, #1
   12c54:	f04f 0000 	mov.w	r0, #0
   12c58:	f363 0007 	bfi	r0, r3, #0, #8
   12c5c:	f364 108f 	bfi	r0, r4, #6, #10
   12c60:	49a0      	ldr	r1, [pc, #640]	; (12ee4 <at_handler+0x614>)
   12c62:	f020 ffbe 	bl	33be2 <log_string_sync>
		err = -EINVAL;
   12c66:	f06f 0515 	mvn.w	r5, #21
   12c6a:	e7a3      	b.n	12bb4 <at_handler+0x2e4>
		LOG_DBG("+CEDRXP notification");
   12c6c:	2304      	movs	r3, #4
   12c6e:	f04f 0000 	mov.w	r0, #0
   12c72:	f363 0007 	bfi	r0, r3, #0, #8
   12c76:	f364 108f 	bfi	r0, r4, #6, #10
   12c7a:	4a9b      	ldr	r2, [pc, #620]	; (12ee8 <at_handler+0x618>)
   12c7c:	499b      	ldr	r1, [pc, #620]	; (12eec <at_handler+0x61c>)
   12c7e:	f020 ffb0 	bl	33be2 <log_string_sync>
{
	int err;
	u8_t idx;
	struct at_param_list resp_list = {0};
	char tmp_buf[5];
	size_t len = sizeof(tmp_buf) - 1;
   12c82:	2304      	movs	r3, #4
	err = lte_lc_system_mode_get(&sys_mode);
   12c84:	a80d      	add	r0, sp, #52	; 0x34
	struct at_param_list resp_list = {0};
   12c86:	e9cd 880b 	strd	r8, r8, [sp, #44]	; 0x2c
	size_t len = sizeof(tmp_buf) - 1;
   12c8a:	9307      	str	r3, [sp, #28]
	err = lte_lc_system_mode_get(&sys_mode);
   12c8c:	f00e fd38 	bl	21700 <lte_lc_system_mode_get>
	if (err) {
   12c90:	4605      	mov	r5, r0
   12c92:	b158      	cbz	r0, 12cac <at_handler+0x3dc>
		LOG_ERR("Failed to get system mode, error: %d", err);
   12c94:	f04f 0000 	mov.w	r0, #0
   12c98:	2301      	movs	r3, #1
   12c9a:	462a      	mov	r2, r5
   12c9c:	f363 0007 	bfi	r0, r3, #0, #8
   12ca0:	4993      	ldr	r1, [pc, #588]	; (12ef0 <at_handler+0x620>)
   12ca2:	f364 108f 	bfi	r0, r4, #6, #10
		return err;
	}

	err = at_params_list_init(&resp_list, AT_CEDRXP_PARAMS_COUNT_MAX);
	if (err) {
		LOG_ERR("Could not init AT params list, error: %d", err);
   12ca6:	f020 ff9c 	bl	33be2 <log_string_sync>
		return err;
   12caa:	e015      	b.n	12cd8 <at_handler+0x408>
	switch (sys_mode) {
   12cac:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   12cb0:	3b01      	subs	r3, #1
   12cb2:	2b04      	cmp	r3, #4
   12cb4:	d804      	bhi.n	12cc0 <at_handler+0x3f0>
   12cb6:	e8df f003 	tbb	[pc, r3]
   12cba:	192b      	.short	0x192b
   12cbc:	2b03      	.short	0x2b03
   12cbe:	19          	.byte	0x19
   12cbf:	00          	.byte	0x00
		LOG_ERR("No LTE connection available in this system mode");
   12cc0:	2301      	movs	r3, #1
   12cc2:	f04f 0000 	mov.w	r0, #0
   12cc6:	f363 0007 	bfi	r0, r3, #0, #8
   12cca:	f364 108f 	bfi	r0, r4, #6, #10
   12cce:	4989      	ldr	r1, [pc, #548]	; (12ef4 <at_handler+0x624>)
   12cd0:	f020 ff87 	bl	33be2 <log_string_sync>
		return -ENOTCONN;
   12cd4:	f06f 057f 	mvn.w	r5, #127	; 0x7f
			LOG_ERR("Can't parse eDRX, error: %d", err);
   12cd8:	f04f 0000 	mov.w	r0, #0
   12cdc:	2301      	movs	r3, #1
   12cde:	f363 0007 	bfi	r0, r3, #0, #8
   12ce2:	f364 108f 	bfi	r0, r4, #6, #10
   12ce6:	462a      	mov	r2, r5
   12ce8:	4983      	ldr	r1, [pc, #524]	; (12ef8 <at_handler+0x628>)
   12cea:	e74d      	b.n	12b88 <at_handler+0x2b8>
		*ptw_multiplier = 2.56;
   12cec:	ed9f 8a83 	vldr	s16, [pc, #524]	; 12efc <at_handler+0x62c>
	err = at_params_list_init(&resp_list, AT_CEDRXP_PARAMS_COUNT_MAX);
   12cf0:	2105      	movs	r1, #5
   12cf2:	a80b      	add	r0, sp, #44	; 0x2c
   12cf4:	f025 fd69 	bl	387ca <at_params_list_init>
	if (err) {
   12cf8:	4605      	mov	r5, r0
   12cfa:	b160      	cbz	r0, 12d16 <at_handler+0x446>
		LOG_ERR("Could not init AT params list, error: %d", err);
   12cfc:	f04f 0000 	mov.w	r0, #0
   12d00:	2301      	movs	r3, #1
   12d02:	f363 0007 	bfi	r0, r3, #0, #8
   12d06:	f364 108f 	bfi	r0, r4, #6, #10
   12d0a:	462a      	mov	r2, r5
   12d0c:	497c      	ldr	r1, [pc, #496]	; (12f00 <at_handler+0x630>)
   12d0e:	e7ca      	b.n	12ca6 <at_handler+0x3d6>
		*ptw_multiplier = 1.28;
   12d10:	ed9f 8a7c 	vldr	s16, [pc, #496]	; 12f04 <at_handler+0x634>
   12d14:	e7ec      	b.n	12cf0 <at_handler+0x420>
	}

	/* Parse CEDRXP response and populate AT parameter list */
	err = at_parser_params_from_str(at_response,
   12d16:	4601      	mov	r1, r0
   12d18:	aa0b      	add	r2, sp, #44	; 0x2c
   12d1a:	4630      	mov	r0, r6
   12d1c:	f025 fd52 	bl	387c4 <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err) {
   12d20:	4605      	mov	r5, r0
   12d22:	b188      	cbz	r0, 12d48 <at_handler+0x478>
		LOG_ERR("Could not parse +CEDRXP response, error: %d", err);
   12d24:	f04f 0000 	mov.w	r0, #0
   12d28:	2301      	movs	r3, #1
   12d2a:	462a      	mov	r2, r5
   12d2c:	f363 0007 	bfi	r0, r3, #0, #8
   12d30:	4975      	ldr	r1, [pc, #468]	; (12f08 <at_handler+0x638>)
   12d32:	f364 108f 	bfi	r0, r4, #6, #10
	}

	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
				   tmp_buf, &len);
	if (err) {
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
   12d36:	f020 ff54 	bl	33be2 <log_string_sync>
		(int)(100 * (cfg->edrx - (int)cfg->edrx)),
		(int)cfg->ptw,
		(int)(100 * (cfg->ptw - (int)cfg->ptw)));

clean_exit:
	at_params_list_free(&resp_list);
   12d3a:	a80b      	add	r0, sp, #44	; 0x2c
   12d3c:	f025 fd58 	bl	387f0 <at_params_list_free>
		if (err) {
   12d40:	2d00      	cmp	r5, #0
   12d42:	d1c9      	bne.n	12cd8 <at_handler+0x408>
		evt.type = LTE_LC_EVT_EDRX_UPDATE;
   12d44:	2302      	movs	r3, #2
   12d46:	e73b      	b.n	12bc0 <at_handler+0x2f0>
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
   12d48:	ab07      	add	r3, sp, #28
   12d4a:	aa09      	add	r2, sp, #36	; 0x24
   12d4c:	2103      	movs	r1, #3
   12d4e:	a80b      	add	r0, sp, #44	; 0x2c
   12d50:	f025 fe13 	bl	3897a <at_params_string_get>
	if (err) {
   12d54:	4605      	mov	r5, r0
   12d56:	b148      	cbz	r0, 12d6c <at_handler+0x49c>
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
   12d58:	f04f 0000 	mov.w	r0, #0
   12d5c:	2301      	movs	r3, #1
   12d5e:	f363 0007 	bfi	r0, r3, #0, #8
   12d62:	f364 108f 	bfi	r0, r4, #6, #10
   12d66:	462a      	mov	r2, r5
   12d68:	4968      	ldr	r1, [pc, #416]	; (12f0c <at_handler+0x63c>)
   12d6a:	e7e4      	b.n	12d36 <at_handler+0x466>
	tmp_buf[len] = '\0';
   12d6c:	9b07      	ldr	r3, [sp, #28]
   12d6e:	aa10      	add	r2, sp, #64	; 0x40
   12d70:	4413      	add	r3, r2
   12d72:	f803 0c1c 	strb.w	r0, [r3, #-28]
	idx = strtoul(tmp_buf, NULL, 2);
   12d76:	4601      	mov	r1, r0
   12d78:	2202      	movs	r2, #2
   12d7a:	a809      	add	r0, sp, #36	; 0x24
   12d7c:	f01f fab0 	bl	322e0 <strtoul>
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   12d80:	b2c6      	uxtb	r6, r0
   12d82:	2e0f      	cmp	r6, #15
   12d84:	d90b      	bls.n	12d9e <at_handler+0x4ce>
		return -EINVAL;
   12d86:	f06f 0515 	mvn.w	r5, #21
		LOG_ERR("Failed to get eDRX value, error; %d", err);
   12d8a:	f04f 0000 	mov.w	r0, #0
   12d8e:	2301      	movs	r3, #1
   12d90:	f363 0007 	bfi	r0, r3, #0, #8
   12d94:	f364 108f 	bfi	r0, r4, #6, #10
   12d98:	462a      	mov	r2, r5
   12d9a:	495d      	ldr	r1, [pc, #372]	; (12f10 <at_handler+0x640>)
   12d9c:	e7cb      	b.n	12d36 <at_handler+0x466>
	err = lte_lc_system_mode_get(&sys_mode);
   12d9e:	a806      	add	r0, sp, #24
   12da0:	f00e fcae 	bl	21700 <lte_lc_system_mode_get>
	if (err) {
   12da4:	4605      	mov	r5, r0
   12da6:	b158      	cbz	r0, 12dc0 <at_handler+0x4f0>
		LOG_ERR("Failed to get system mode, error: %d", err);
   12da8:	2301      	movs	r3, #1
   12daa:	f04f 0000 	mov.w	r0, #0
   12dae:	f363 0007 	bfi	r0, r3, #0, #8
   12db2:	f364 108f 	bfi	r0, r4, #6, #10
   12db6:	462a      	mov	r2, r5
   12db8:	494d      	ldr	r1, [pc, #308]	; (12ef0 <at_handler+0x620>)
   12dba:	f020 ff12 	bl	33be2 <log_string_sync>
	if (err) {
   12dbe:	e7e4      	b.n	12d8a <at_handler+0x4ba>
	switch (sys_mode) {
   12dc0:	f89d 3018 	ldrb.w	r3, [sp, #24]
   12dc4:	3b01      	subs	r3, #1
   12dc6:	2b04      	cmp	r3, #4
   12dc8:	d827      	bhi.n	12e1a <at_handler+0x54a>
   12dca:	e8df f003 	tbb	[pc, r3]
   12dce:	2403      	.short	0x2403
   12dd0:	0326      	.short	0x0326
   12dd2:	24          	.byte	0x24
   12dd3:	00          	.byte	0x00
		multiplier = edrx_lookup_ltem[idx];
   12dd4:	4b4f      	ldr	r3, [pc, #316]	; (12f14 <at_handler+0x644>)
		multiplier = edrx_lookup_nbiot[idx];
   12dd6:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   12dda:	b358      	cbz	r0, 12e34 <at_handler+0x564>
   12ddc:	f7fa f8fc 	bl	cfd8 <__aeabi_i2d>
   12de0:	a33d      	add	r3, pc, #244	; (adr r3, 12ed8 <at_handler+0x608>)
   12de2:	e9d3 2300 	ldrd	r2, r3, [r3]
   12de6:	f7fa f961 	bl	d0ac <__aeabi_dmul>
   12dea:	f7fa fc21 	bl	d630 <__aeabi_d2f>
	len = sizeof(tmp_buf) - 1;
   12dee:	2104      	movs	r1, #4
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   12df0:	900e      	str	r0, [sp, #56]	; 0x38
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   12df2:	ab07      	add	r3, sp, #28
   12df4:	aa09      	add	r2, sp, #36	; 0x24
   12df6:	a80b      	add	r0, sp, #44	; 0x2c
	len = sizeof(tmp_buf) - 1;
   12df8:	9107      	str	r1, [sp, #28]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   12dfa:	f025 fdbe 	bl	3897a <at_params_string_get>
	if (err) {
   12dfe:	4605      	mov	r5, r0
   12e00:	b1d0      	cbz	r0, 12e38 <at_handler+0x568>
		LOG_ERR("Failed to get PTW configuration, error: %d", err);
   12e02:	f04f 0000 	mov.w	r0, #0
   12e06:	2301      	movs	r3, #1
   12e08:	f363 0007 	bfi	r0, r3, #0, #8
   12e0c:	f364 108f 	bfi	r0, r4, #6, #10
   12e10:	462a      	mov	r2, r5
   12e12:	4941      	ldr	r1, [pc, #260]	; (12f18 <at_handler+0x648>)
   12e14:	e78f      	b.n	12d36 <at_handler+0x466>
		multiplier = edrx_lookup_nbiot[idx];
   12e16:	4b41      	ldr	r3, [pc, #260]	; (12f1c <at_handler+0x64c>)
   12e18:	e7dd      	b.n	12dd6 <at_handler+0x506>
		LOG_ERR("No LTE connection available in this system mode");
   12e1a:	2301      	movs	r3, #1
   12e1c:	f04f 0000 	mov.w	r0, #0
   12e20:	f363 0007 	bfi	r0, r3, #0, #8
   12e24:	f364 108f 	bfi	r0, r4, #6, #10
   12e28:	4932      	ldr	r1, [pc, #200]	; (12ef4 <at_handler+0x624>)
   12e2a:	f020 feda 	bl	33be2 <log_string_sync>
		return -ENOTCONN;
   12e2e:	f06f 057f 	mvn.w	r5, #127	; 0x7f
   12e32:	e7aa      	b.n	12d8a <at_handler+0x4ba>
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   12e34:	483a      	ldr	r0, [pc, #232]	; (12f20 <at_handler+0x650>)
   12e36:	e7da      	b.n	12dee <at_handler+0x51e>
	tmp_buf[len] = '\0';
   12e38:	9b07      	ldr	r3, [sp, #28]
   12e3a:	aa10      	add	r2, sp, #64	; 0x40
   12e3c:	4413      	add	r3, r2
   12e3e:	f803 0c1c 	strb.w	r0, [r3, #-28]
	idx = strtoul(tmp_buf, NULL, 2);
   12e42:	2202      	movs	r2, #2
   12e44:	4601      	mov	r1, r0
   12e46:	a809      	add	r0, sp, #36	; 0x24
   12e48:	f01f fa4a 	bl	322e0 <strtoul>
	if (idx > 15) {
   12e4c:	b2c2      	uxtb	r2, r0
   12e4e:	2a0f      	cmp	r2, #15
   12e50:	d90c      	bls.n	12e6c <at_handler+0x59c>
		LOG_ERR("Invalid PTW lookup index: %d", idx);
   12e52:	2301      	movs	r3, #1
   12e54:	f04f 0000 	mov.w	r0, #0
   12e58:	f363 0007 	bfi	r0, r3, #0, #8
   12e5c:	f364 108f 	bfi	r0, r4, #6, #10
   12e60:	4930      	ldr	r1, [pc, #192]	; (12f24 <at_handler+0x654>)
   12e62:	f020 febe 	bl	33be2 <log_string_sync>
		err = -EINVAL;
   12e66:	f06f 0515 	mvn.w	r5, #21
   12e6a:	e766      	b.n	12d3a <at_handler+0x46a>
	idx += 1;
   12e6c:	3001      	adds	r0, #1
	cfg->ptw = idx * ptw_multiplier;
   12e6e:	b2c0      	uxtb	r0, r0
   12e70:	ee07 0a90 	vmov	s15, r0
   12e74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   12e78:	ee67 7a88 	vmul.f32	s15, s15, s16
	LOG_DBG("eDRX value: %d.%02d, PTW: %d.%02d",
   12e7c:	eefd 5ae7 	vcvt.s32.f32	s11, s15
   12e80:	eeb8 6ae5 	vcvt.f32.s32	s12, s11
	cfg->ptw = idx * ptw_multiplier;
   12e84:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
	LOG_DBG("eDRX value: %d.%02d, PTW: %d.%02d",
   12e88:	ee77 7ac6 	vsub.f32	s15, s15, s12
   12e8c:	ed9f 6a26 	vldr	s12, [pc, #152]	; 12f28 <at_handler+0x658>
   12e90:	ed9d 7a0e 	vldr	s14, [sp, #56]	; 0x38
   12e94:	ee67 7a86 	vmul.f32	s15, s15, s12
   12e98:	eefd 6ac7 	vcvt.s32.f32	s13, s14
   12e9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   12ea0:	edcd 7a02 	vstr	s15, [sp, #8]
   12ea4:	eef8 7ae6 	vcvt.f32.s32	s15, s13
   12ea8:	ee37 7a67 	vsub.f32	s14, s14, s15
   12eac:	ee27 7a06 	vmul.f32	s14, s14, s12
   12eb0:	2304      	movs	r3, #4
   12eb2:	f04f 0000 	mov.w	r0, #0
   12eb6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   12eba:	f363 0007 	bfi	r0, r3, #0, #8
   12ebe:	f364 108f 	bfi	r0, r4, #6, #10
   12ec2:	edcd 5a01 	vstr	s11, [sp, #4]
   12ec6:	ed8d 7a00 	vstr	s14, [sp]
   12eca:	ee16 3a90 	vmov	r3, s13
   12ece:	4a17      	ldr	r2, [pc, #92]	; (12f2c <at_handler+0x65c>)
   12ed0:	4917      	ldr	r1, [pc, #92]	; (12f30 <at_handler+0x660>)
   12ed2:	f020 fe86 	bl	33be2 <log_string_sync>
   12ed6:	e730      	b.n	12d3a <at_handler+0x46a>
   12ed8:	47ae147b 	.word	0x47ae147b
   12edc:	40247ae1 	.word	0x40247ae1
   12ee0:	0003e65f 	.word	0x0003e65f
   12ee4:	0003e688 	.word	0x0003e688
   12ee8:	0003e4ff 	.word	0x0003e4ff
   12eec:	0003e6cb 	.word	0x0003e6cb
   12ef0:	0003e6e4 	.word	0x0003e6e4
   12ef4:	0003e709 	.word	0x0003e709
   12ef8:	0003e823 	.word	0x0003e823
   12efc:	4023d70a 	.word	0x4023d70a
   12f00:	0003e9ae 	.word	0x0003e9ae
   12f04:	3fa3d70a 	.word	0x3fa3d70a
   12f08:	0003e739 	.word	0x0003e739
   12f0c:	0003e765 	.word	0x0003e765
   12f10:	0003e791 	.word	0x0003e791
   12f14:	0003b3e0 	.word	0x0003b3e0
   12f18:	0003e7b5 	.word	0x0003e7b5
   12f1c:	0003b400 	.word	0x0003b400
   12f20:	40a3d70a 	.word	0x40a3d70a
   12f24:	0003e7e0 	.word	0x0003e7e0
   12f28:	42c80000 	.word	0x42c80000
   12f2c:	0003e518 	.word	0x0003e518
   12f30:	0003e7fd 	.word	0x0003e7fd
   12f34:	00000000 	.word	0x00000000

00012f38 <ceil>:
   12f38:	ec51 0b10 	vmov	r0, r1, d0
   12f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12f3e:	f3c1 530a 	ubfx	r3, r1, #20, #11
   12f42:	460c      	mov	r4, r1
   12f44:	ee10 6a10 	vmov	r6, s0
   12f48:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   12f4c:	2d13      	cmp	r5, #19
   12f4e:	dc32      	bgt.n	12fb6 <ceil+0x7e>
   12f50:	2d00      	cmp	r5, #0
   12f52:	db1e      	blt.n	12f92 <ceil+0x5a>
   12f54:	4f36      	ldr	r7, [pc, #216]	; (13030 <ceil+0xf8>)
   12f56:	412f      	asrs	r7, r5
   12f58:	ea07 0301 	and.w	r3, r7, r1
   12f5c:	4303      	orrs	r3, r0
   12f5e:	d02f      	beq.n	12fc0 <ceil+0x88>
   12f60:	a331      	add	r3, pc, #196	; (adr r3, 13028 <ceil+0xf0>)
   12f62:	e9d3 2300 	ldrd	r2, r3, [r3]
   12f66:	f7f9 feeb 	bl	cd40 <__adddf3>
   12f6a:	2200      	movs	r2, #0
   12f6c:	2300      	movs	r3, #0
   12f6e:	f7fa fb2d 	bl	d5cc <__aeabi_dcmpgt>
   12f72:	b148      	cbz	r0, 12f88 <ceil+0x50>
   12f74:	2c00      	cmp	r4, #0
   12f76:	dd04      	ble.n	12f82 <ceil+0x4a>
   12f78:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   12f7c:	fa43 f505 	asr.w	r5, r3, r5
   12f80:	442c      	add	r4, r5
   12f82:	ea24 0407 	bic.w	r4, r4, r7
   12f86:	2600      	movs	r6, #0
   12f88:	4623      	mov	r3, r4
   12f8a:	4632      	mov	r2, r6
   12f8c:	ec43 2b10 	vmov	d0, r2, r3
   12f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12f92:	a325      	add	r3, pc, #148	; (adr r3, 13028 <ceil+0xf0>)
   12f94:	e9d3 2300 	ldrd	r2, r3, [r3]
   12f98:	f7f9 fed2 	bl	cd40 <__adddf3>
   12f9c:	2200      	movs	r2, #0
   12f9e:	2300      	movs	r3, #0
   12fa0:	f7fa fb14 	bl	d5cc <__aeabi_dcmpgt>
   12fa4:	2800      	cmp	r0, #0
   12fa6:	d0ef      	beq.n	12f88 <ceil+0x50>
   12fa8:	2c00      	cmp	r4, #0
   12faa:	db39      	blt.n	13020 <ceil+0xe8>
   12fac:	4326      	orrs	r6, r4
   12fae:	d033      	beq.n	13018 <ceil+0xe0>
   12fb0:	2600      	movs	r6, #0
   12fb2:	4c20      	ldr	r4, [pc, #128]	; (13034 <ceil+0xfc>)
   12fb4:	e7e8      	b.n	12f88 <ceil+0x50>
   12fb6:	2d33      	cmp	r5, #51	; 0x33
   12fb8:	dd05      	ble.n	12fc6 <ceil+0x8e>
   12fba:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   12fbe:	d023      	beq.n	13008 <ceil+0xd0>
   12fc0:	ec41 0b10 	vmov	d0, r0, r1
   12fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12fc6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   12fca:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   12fce:	40df      	lsrs	r7, r3
   12fd0:	4207      	tst	r7, r0
   12fd2:	d0f5      	beq.n	12fc0 <ceil+0x88>
   12fd4:	a314      	add	r3, pc, #80	; (adr r3, 13028 <ceil+0xf0>)
   12fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
   12fda:	f7f9 feb1 	bl	cd40 <__adddf3>
   12fde:	2200      	movs	r2, #0
   12fe0:	2300      	movs	r3, #0
   12fe2:	f7fa faf3 	bl	d5cc <__aeabi_dcmpgt>
   12fe6:	2800      	cmp	r0, #0
   12fe8:	d0ce      	beq.n	12f88 <ceil+0x50>
   12fea:	2c00      	cmp	r4, #0
   12fec:	dd09      	ble.n	13002 <ceil+0xca>
   12fee:	2d14      	cmp	r5, #20
   12ff0:	d014      	beq.n	1301c <ceil+0xe4>
   12ff2:	2301      	movs	r3, #1
   12ff4:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   12ff8:	fa03 f505 	lsl.w	r5, r3, r5
   12ffc:	19ae      	adds	r6, r5, r6
   12ffe:	bf28      	it	cs
   13000:	18e4      	addcs	r4, r4, r3
   13002:	ea26 0607 	bic.w	r6, r6, r7
   13006:	e7bf      	b.n	12f88 <ceil+0x50>
   13008:	ee10 2a10 	vmov	r2, s0
   1300c:	460b      	mov	r3, r1
   1300e:	f7f9 fe97 	bl	cd40 <__adddf3>
   13012:	ec41 0b10 	vmov	d0, r0, r1
   13016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13018:	4634      	mov	r4, r6
   1301a:	e7b5      	b.n	12f88 <ceil+0x50>
   1301c:	3401      	adds	r4, #1
   1301e:	e7f0      	b.n	13002 <ceil+0xca>
   13020:	2600      	movs	r6, #0
   13022:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
   13026:	e7af      	b.n	12f88 <ceil+0x50>
   13028:	8800759c 	.word	0x8800759c
   1302c:	7e37e43c 	.word	0x7e37e43c
   13030:	000fffff 	.word	0x000fffff
   13034:	3ff00000 	.word	0x3ff00000

00013038 <floor>:
   13038:	ec51 0b10 	vmov	r0, r1, d0
   1303c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1303e:	f3c1 530a 	ubfx	r3, r1, #20, #11
   13042:	460c      	mov	r4, r1
   13044:	ee10 6a10 	vmov	r6, s0
   13048:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   1304c:	2d13      	cmp	r5, #19
   1304e:	dc30      	bgt.n	130b2 <floor+0x7a>
   13050:	2d00      	cmp	r5, #0
   13052:	db1e      	blt.n	13092 <floor+0x5a>
   13054:	4f38      	ldr	r7, [pc, #224]	; (13138 <floor+0x100>)
   13056:	412f      	asrs	r7, r5
   13058:	ea07 0301 	and.w	r3, r7, r1
   1305c:	4303      	orrs	r3, r0
   1305e:	d02d      	beq.n	130bc <floor+0x84>
   13060:	a333      	add	r3, pc, #204	; (adr r3, 13130 <floor+0xf8>)
   13062:	e9d3 2300 	ldrd	r2, r3, [r3]
   13066:	f7f9 fe6b 	bl	cd40 <__adddf3>
   1306a:	2200      	movs	r2, #0
   1306c:	2300      	movs	r3, #0
   1306e:	f7fa faad 	bl	d5cc <__aeabi_dcmpgt>
   13072:	b148      	cbz	r0, 13088 <floor+0x50>
   13074:	2c00      	cmp	r4, #0
   13076:	da04      	bge.n	13082 <floor+0x4a>
   13078:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   1307c:	fa43 f505 	asr.w	r5, r3, r5
   13080:	442c      	add	r4, r5
   13082:	ea24 0407 	bic.w	r4, r4, r7
   13086:	2600      	movs	r6, #0
   13088:	4623      	mov	r3, r4
   1308a:	4632      	mov	r2, r6
   1308c:	ec43 2b10 	vmov	d0, r2, r3
   13090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13092:	a327      	add	r3, pc, #156	; (adr r3, 13130 <floor+0xf8>)
   13094:	e9d3 2300 	ldrd	r2, r3, [r3]
   13098:	f7f9 fe52 	bl	cd40 <__adddf3>
   1309c:	2200      	movs	r2, #0
   1309e:	2300      	movs	r3, #0
   130a0:	f7fa fa94 	bl	d5cc <__aeabi_dcmpgt>
   130a4:	2800      	cmp	r0, #0
   130a6:	d0ef      	beq.n	13088 <floor+0x50>
   130a8:	2c00      	cmp	r4, #0
   130aa:	db29      	blt.n	13100 <floor+0xc8>
   130ac:	2600      	movs	r6, #0
   130ae:	4634      	mov	r4, r6
   130b0:	e7ea      	b.n	13088 <floor+0x50>
   130b2:	2d33      	cmp	r5, #51	; 0x33
   130b4:	dd05      	ble.n	130c2 <floor+0x8a>
   130b6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   130ba:	d019      	beq.n	130f0 <floor+0xb8>
   130bc:	ec41 0b10 	vmov	d0, r0, r1
   130c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   130c2:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   130c6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   130ca:	40df      	lsrs	r7, r3
   130cc:	4207      	tst	r7, r0
   130ce:	d0f5      	beq.n	130bc <floor+0x84>
   130d0:	a317      	add	r3, pc, #92	; (adr r3, 13130 <floor+0xf8>)
   130d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   130d6:	f7f9 fe33 	bl	cd40 <__adddf3>
   130da:	2200      	movs	r2, #0
   130dc:	2300      	movs	r3, #0
   130de:	f7fa fa75 	bl	d5cc <__aeabi_dcmpgt>
   130e2:	2800      	cmp	r0, #0
   130e4:	d0d0      	beq.n	13088 <floor+0x50>
   130e6:	2c00      	cmp	r4, #0
   130e8:	db13      	blt.n	13112 <floor+0xda>
   130ea:	ea26 0607 	bic.w	r6, r6, r7
   130ee:	e7cb      	b.n	13088 <floor+0x50>
   130f0:	ee10 2a10 	vmov	r2, s0
   130f4:	460b      	mov	r3, r1
   130f6:	f7f9 fe23 	bl	cd40 <__adddf3>
   130fa:	ec41 0b10 	vmov	d0, r0, r1
   130fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13100:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
   13104:	4a0d      	ldr	r2, [pc, #52]	; (1313c <floor+0x104>)
   13106:	4333      	orrs	r3, r6
   13108:	2600      	movs	r6, #0
   1310a:	42b3      	cmp	r3, r6
   1310c:	bf18      	it	ne
   1310e:	4614      	movne	r4, r2
   13110:	e7ba      	b.n	13088 <floor+0x50>
   13112:	2d14      	cmp	r5, #20
   13114:	d008      	beq.n	13128 <floor+0xf0>
   13116:	2301      	movs	r3, #1
   13118:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   1311c:	fa03 f505 	lsl.w	r5, r3, r5
   13120:	19ae      	adds	r6, r5, r6
   13122:	bf28      	it	cs
   13124:	18e4      	addcs	r4, r4, r3
   13126:	e7e0      	b.n	130ea <floor+0xb2>
   13128:	3401      	adds	r4, #1
   1312a:	e7de      	b.n	130ea <floor+0xb2>
   1312c:	f3af 8000 	nop.w
   13130:	8800759c 	.word	0x8800759c
   13134:	7e37e43c 	.word	0x7e37e43c
   13138:	000fffff 	.word	0x000fffff
   1313c:	bff00000 	.word	0xbff00000

00013140 <pow>:
   13140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13142:	ed2d 8b02 	vpush	{d8}
   13146:	ec57 6b10 	vmov	r6, r7, d0
   1314a:	ec55 4b11 	vmov	r4, r5, d1
   1314e:	f000 f8c7 	bl	132e0 <__ieee754_pow>
   13152:	4b61      	ldr	r3, [pc, #388]	; (132d8 <pow+0x198>)
   13154:	eeb0 8a40 	vmov.f32	s16, s0
   13158:	eef0 8a60 	vmov.f32	s17, s1
   1315c:	f993 3000 	ldrsb.w	r3, [r3]
   13160:	3301      	adds	r3, #1
   13162:	d02a      	beq.n	131ba <pow+0x7a>
   13164:	4622      	mov	r2, r4
   13166:	462b      	mov	r3, r5
   13168:	4620      	mov	r0, r4
   1316a:	4629      	mov	r1, r5
   1316c:	f7fe fe04 	bl	11d78 <__aeabi_dcmpun>
   13170:	bb18      	cbnz	r0, 131ba <pow+0x7a>
   13172:	4632      	mov	r2, r6
   13174:	463b      	mov	r3, r7
   13176:	4630      	mov	r0, r6
   13178:	4639      	mov	r1, r7
   1317a:	f7fe fdfd 	bl	11d78 <__aeabi_dcmpun>
   1317e:	2800      	cmp	r0, #0
   13180:	d144      	bne.n	1320c <pow+0xcc>
   13182:	2200      	movs	r2, #0
   13184:	2300      	movs	r3, #0
   13186:	4630      	mov	r0, r6
   13188:	4639      	mov	r1, r7
   1318a:	f7fa f9f7 	bl	d57c <__aeabi_dcmpeq>
   1318e:	b1d8      	cbz	r0, 131c8 <pow+0x88>
   13190:	2200      	movs	r2, #0
   13192:	2300      	movs	r3, #0
   13194:	4620      	mov	r0, r4
   13196:	4629      	mov	r1, r5
   13198:	f7fa f9f0 	bl	d57c <__aeabi_dcmpeq>
   1319c:	2800      	cmp	r0, #0
   1319e:	d13d      	bne.n	1321c <pow+0xdc>
   131a0:	ec45 4b10 	vmov	d0, r4, r5
   131a4:	f01d fed0 	bl	30f48 <finite>
   131a8:	b138      	cbz	r0, 131ba <pow+0x7a>
   131aa:	4620      	mov	r0, r4
   131ac:	4629      	mov	r1, r5
   131ae:	2200      	movs	r2, #0
   131b0:	2300      	movs	r3, #0
   131b2:	f7fa f9ed 	bl	d590 <__aeabi_dcmplt>
   131b6:	2800      	cmp	r0, #0
   131b8:	d15b      	bne.n	13272 <pow+0x132>
   131ba:	eeb0 0a48 	vmov.f32	s0, s16
   131be:	eef0 0a68 	vmov.f32	s1, s17
   131c2:	ecbd 8b02 	vpop	{d8}
   131c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   131c8:	eeb0 0a48 	vmov.f32	s0, s16
   131cc:	eef0 0a68 	vmov.f32	s1, s17
   131d0:	f01d feba 	bl	30f48 <finite>
   131d4:	b358      	cbz	r0, 1322e <pow+0xee>
   131d6:	2200      	movs	r2, #0
   131d8:	2300      	movs	r3, #0
   131da:	ec51 0b18 	vmov	r0, r1, d8
   131de:	f7fa f9cd 	bl	d57c <__aeabi_dcmpeq>
   131e2:	2800      	cmp	r0, #0
   131e4:	d0e9      	beq.n	131ba <pow+0x7a>
   131e6:	ec47 6b10 	vmov	d0, r6, r7
   131ea:	f01d fead 	bl	30f48 <finite>
   131ee:	2800      	cmp	r0, #0
   131f0:	d0e3      	beq.n	131ba <pow+0x7a>
   131f2:	ec45 4b10 	vmov	d0, r4, r5
   131f6:	f01d fea7 	bl	30f48 <finite>
   131fa:	2800      	cmp	r0, #0
   131fc:	d0dd      	beq.n	131ba <pow+0x7a>
   131fe:	f022 f968 	bl	354d2 <__errno>
   13202:	2322      	movs	r3, #34	; 0x22
   13204:	ed9f 8b2c 	vldr	d8, [pc, #176]	; 132b8 <pow+0x178>
   13208:	6003      	str	r3, [r0, #0]
   1320a:	e7d6      	b.n	131ba <pow+0x7a>
   1320c:	4620      	mov	r0, r4
   1320e:	4629      	mov	r1, r5
   13210:	2200      	movs	r2, #0
   13212:	2300      	movs	r3, #0
   13214:	f7fa f9b2 	bl	d57c <__aeabi_dcmpeq>
   13218:	2800      	cmp	r0, #0
   1321a:	d0ce      	beq.n	131ba <pow+0x7a>
   1321c:	ed9f 8b28 	vldr	d8, [pc, #160]	; 132c0 <pow+0x180>
   13220:	eeb0 0a48 	vmov.f32	s0, s16
   13224:	eef0 0a68 	vmov.f32	s1, s17
   13228:	ecbd 8b02 	vpop	{d8}
   1322c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1322e:	ec47 6b10 	vmov	d0, r6, r7
   13232:	f01d fe89 	bl	30f48 <finite>
   13236:	2800      	cmp	r0, #0
   13238:	d0cd      	beq.n	131d6 <pow+0x96>
   1323a:	ec45 4b10 	vmov	d0, r4, r5
   1323e:	f01d fe83 	bl	30f48 <finite>
   13242:	2800      	cmp	r0, #0
   13244:	d0c7      	beq.n	131d6 <pow+0x96>
   13246:	ee18 0a10 	vmov	r0, s16
   1324a:	ec53 2b18 	vmov	r2, r3, d8
   1324e:	4619      	mov	r1, r3
   13250:	f7fe fd92 	bl	11d78 <__aeabi_dcmpun>
   13254:	bb18      	cbnz	r0, 1329e <pow+0x15e>
   13256:	f022 f93c 	bl	354d2 <__errno>
   1325a:	2322      	movs	r3, #34	; 0x22
   1325c:	2200      	movs	r2, #0
   1325e:	4639      	mov	r1, r7
   13260:	6003      	str	r3, [r0, #0]
   13262:	2300      	movs	r3, #0
   13264:	4630      	mov	r0, r6
   13266:	f7fa f993 	bl	d590 <__aeabi_dcmplt>
   1326a:	b948      	cbnz	r0, 13280 <pow+0x140>
   1326c:	ed9f 8b16 	vldr	d8, [pc, #88]	; 132c8 <pow+0x188>
   13270:	e7a3      	b.n	131ba <pow+0x7a>
   13272:	f022 f92e 	bl	354d2 <__errno>
   13276:	2321      	movs	r3, #33	; 0x21
   13278:	ed9f 8b15 	vldr	d8, [pc, #84]	; 132d0 <pow+0x190>
   1327c:	6003      	str	r3, [r0, #0]
   1327e:	e79c      	b.n	131ba <pow+0x7a>
   13280:	ec45 4b10 	vmov	d0, r4, r5
   13284:	f01d fe6a 	bl	30f5c <rint>
   13288:	4622      	mov	r2, r4
   1328a:	462b      	mov	r3, r5
   1328c:	ec51 0b10 	vmov	r0, r1, d0
   13290:	f7fa f974 	bl	d57c <__aeabi_dcmpeq>
   13294:	2800      	cmp	r0, #0
   13296:	d1e9      	bne.n	1326c <pow+0x12c>
   13298:	ed9f 8b0d 	vldr	d8, [pc, #52]	; 132d0 <pow+0x190>
   1329c:	e78d      	b.n	131ba <pow+0x7a>
   1329e:	f022 f918 	bl	354d2 <__errno>
   132a2:	2121      	movs	r1, #33	; 0x21
   132a4:	2200      	movs	r2, #0
   132a6:	2300      	movs	r3, #0
   132a8:	6001      	str	r1, [r0, #0]
   132aa:	4610      	mov	r0, r2
   132ac:	4619      	mov	r1, r3
   132ae:	f7fa f827 	bl	d300 <__aeabi_ddiv>
   132b2:	ec41 0b18 	vmov	d8, r0, r1
   132b6:	e780      	b.n	131ba <pow+0x7a>
	...
   132c4:	3ff00000 	.word	0x3ff00000
   132c8:	00000000 	.word	0x00000000
   132cc:	7ff00000 	.word	0x7ff00000
   132d0:	00000000 	.word	0x00000000
   132d4:	fff00000 	.word	0xfff00000
   132d8:	20020502 	.word	0x20020502
   132dc:	00000000 	.word	0x00000000

000132e0 <__ieee754_pow>:
   132e0:	ec51 0b11 	vmov	r0, r1, d1
   132e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132e8:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   132ec:	b093      	sub	sp, #76	; 0x4c
   132ee:	ea58 0400 	orrs.w	r4, r8, r0
   132f2:	d020      	beq.n	13336 <__ieee754_pow+0x56>
   132f4:	4c5c      	ldr	r4, [pc, #368]	; (13468 <__ieee754_pow+0x188>)
   132f6:	ee10 aa10 	vmov	sl, s0
   132fa:	ec53 2b10 	vmov	r2, r3, d0
   132fe:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
   13302:	461f      	mov	r7, r3
   13304:	42a6      	cmp	r6, r4
   13306:	dc11      	bgt.n	1332c <__ieee754_pow+0x4c>
   13308:	4689      	mov	r9, r1
   1330a:	ee11 ca10 	vmov	ip, s2
   1330e:	d106      	bne.n	1331e <__ieee754_pow+0x3e>
   13310:	b12a      	cbz	r2, 1331e <__ieee754_pow+0x3e>
   13312:	4856      	ldr	r0, [pc, #344]	; (1346c <__ieee754_pow+0x18c>)
   13314:	b013      	add	sp, #76	; 0x4c
   13316:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1331a:	f000 bd61 	b.w	13de0 <nan>
   1331e:	4c52      	ldr	r4, [pc, #328]	; (13468 <__ieee754_pow+0x188>)
   13320:	45a0      	cmp	r8, r4
   13322:	dc03      	bgt.n	1332c <__ieee754_pow+0x4c>
   13324:	d10e      	bne.n	13344 <__ieee754_pow+0x64>
   13326:	f1bc 0f00 	cmp.w	ip, #0
   1332a:	d00b      	beq.n	13344 <__ieee754_pow+0x64>
   1332c:	4b50      	ldr	r3, [pc, #320]	; (13470 <__ieee754_pow+0x190>)
   1332e:	4433      	add	r3, r6
   13330:	ea53 030a 	orrs.w	r3, r3, sl
   13334:	d1ed      	bne.n	13312 <__ieee754_pow+0x32>
   13336:	2000      	movs	r0, #0
   13338:	494e      	ldr	r1, [pc, #312]	; (13474 <__ieee754_pow+0x194>)
   1333a:	ec41 0b10 	vmov	d0, r0, r1
   1333e:	b013      	add	sp, #76	; 0x4c
   13340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13344:	2f00      	cmp	r7, #0
   13346:	4614      	mov	r4, r2
   13348:	461d      	mov	r5, r3
   1334a:	e9cd 0100 	strd	r0, r1, [sp]
   1334e:	db44      	blt.n	133da <__ieee754_pow+0xfa>
   13350:	f04f 0b00 	mov.w	fp, #0
   13354:	f1bc 0f00 	cmp.w	ip, #0
   13358:	d10f      	bne.n	1337a <__ieee754_pow+0x9a>
   1335a:	4b43      	ldr	r3, [pc, #268]	; (13468 <__ieee754_pow+0x188>)
   1335c:	4598      	cmp	r8, r3
   1335e:	d057      	beq.n	13410 <__ieee754_pow+0x130>
   13360:	4b44      	ldr	r3, [pc, #272]	; (13474 <__ieee754_pow+0x194>)
   13362:	4598      	cmp	r8, r3
   13364:	d067      	beq.n	13436 <__ieee754_pow+0x156>
   13366:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
   1336a:	f000 84a9 	beq.w	13cc0 <__ieee754_pow+0x9e0>
   1336e:	4b42      	ldr	r3, [pc, #264]	; (13478 <__ieee754_pow+0x198>)
   13370:	4599      	cmp	r9, r3
   13372:	d102      	bne.n	1337a <__ieee754_pow+0x9a>
   13374:	2f00      	cmp	r7, #0
   13376:	f280 84f1 	bge.w	13d5c <__ieee754_pow+0xa7c>
   1337a:	ec45 4b10 	vmov	d0, r4, r5
   1337e:	f01c f847 	bl	2f410 <fabs>
   13382:	ec51 0b10 	vmov	r0, r1, d0
   13386:	f1ba 0f00 	cmp.w	sl, #0
   1338a:	d108      	bne.n	1339e <__ieee754_pow+0xbe>
   1338c:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
   13390:	4a38      	ldr	r2, [pc, #224]	; (13474 <__ieee754_pow+0x194>)
   13392:	4293      	cmp	r3, r2
   13394:	f000 8395 	beq.w	13ac2 <__ieee754_pow+0x7e2>
   13398:	2e00      	cmp	r6, #0
   1339a:	f000 8392 	beq.w	13ac2 <__ieee754_pow+0x7e2>
   1339e:	0ffb      	lsrs	r3, r7, #31
   133a0:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
   133a4:	ea5b 030a 	orrs.w	r3, fp, sl
   133a8:	d04c      	beq.n	13444 <__ieee754_pow+0x164>
   133aa:	4b34      	ldr	r3, [pc, #208]	; (1347c <__ieee754_pow+0x19c>)
   133ac:	4598      	cmp	r8, r3
   133ae:	dd6b      	ble.n	13488 <__ieee754_pow+0x1a8>
   133b0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   133b4:	4598      	cmp	r8, r3
   133b6:	f340 8411 	ble.w	13bdc <__ieee754_pow+0x8fc>
   133ba:	4b31      	ldr	r3, [pc, #196]	; (13480 <__ieee754_pow+0x1a0>)
   133bc:	429e      	cmp	r6, r3
   133be:	f340 8395 	ble.w	13aec <__ieee754_pow+0x80c>
   133c2:	f1b9 0f00 	cmp.w	r9, #0
   133c6:	f340 8395 	ble.w	13af4 <__ieee754_pow+0x814>
   133ca:	a325      	add	r3, pc, #148	; (adr r3, 13460 <__ieee754_pow+0x180>)
   133cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   133d0:	4610      	mov	r0, r2
   133d2:	4619      	mov	r1, r3
   133d4:	f7f9 fe6a 	bl	d0ac <__aeabi_dmul>
   133d8:	e7af      	b.n	1333a <__ieee754_pow+0x5a>
   133da:	4b2a      	ldr	r3, [pc, #168]	; (13484 <__ieee754_pow+0x1a4>)
   133dc:	4598      	cmp	r8, r3
   133de:	dc27      	bgt.n	13430 <__ieee754_pow+0x150>
   133e0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   133e4:	4598      	cmp	r8, r3
   133e6:	ddb3      	ble.n	13350 <__ieee754_pow+0x70>
   133e8:	ea4f 5328 	mov.w	r3, r8, asr #20
   133ec:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   133f0:	2b14      	cmp	r3, #20
   133f2:	f340 846d 	ble.w	13cd0 <__ieee754_pow+0x9f0>
   133f6:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   133fa:	fa2c f203 	lsr.w	r2, ip, r3
   133fe:	fa02 f303 	lsl.w	r3, r2, r3
   13402:	4563      	cmp	r3, ip
   13404:	d1a4      	bne.n	13350 <__ieee754_pow+0x70>
   13406:	f002 0201 	and.w	r2, r2, #1
   1340a:	f1c2 0b02 	rsb	fp, r2, #2
   1340e:	e7a1      	b.n	13354 <__ieee754_pow+0x74>
   13410:	4b17      	ldr	r3, [pc, #92]	; (13470 <__ieee754_pow+0x190>)
   13412:	4433      	add	r3, r6
   13414:	ea53 030a 	orrs.w	r3, r3, sl
   13418:	d08d      	beq.n	13336 <__ieee754_pow+0x56>
   1341a:	4b19      	ldr	r3, [pc, #100]	; (13480 <__ieee754_pow+0x1a0>)
   1341c:	429e      	cmp	r6, r3
   1341e:	f340 8394 	ble.w	13b4a <__ieee754_pow+0x86a>
   13422:	f1b9 0f00 	cmp.w	r9, #0
   13426:	f2c0 8365 	blt.w	13af4 <__ieee754_pow+0x814>
   1342a:	e9dd 0100 	ldrd	r0, r1, [sp]
   1342e:	e784      	b.n	1333a <__ieee754_pow+0x5a>
   13430:	f04f 0b02 	mov.w	fp, #2
   13434:	e78e      	b.n	13354 <__ieee754_pow+0x74>
   13436:	f1b9 0f00 	cmp.w	r9, #0
   1343a:	f2c0 8439 	blt.w	13cb0 <__ieee754_pow+0x9d0>
   1343e:	4620      	mov	r0, r4
   13440:	4629      	mov	r1, r5
   13442:	e77a      	b.n	1333a <__ieee754_pow+0x5a>
   13444:	4622      	mov	r2, r4
   13446:	462b      	mov	r3, r5
   13448:	4610      	mov	r0, r2
   1344a:	4619      	mov	r1, r3
   1344c:	f7f9 fc76 	bl	cd3c <__aeabi_dsub>
   13450:	4602      	mov	r2, r0
   13452:	460b      	mov	r3, r1
   13454:	f7f9 ff54 	bl	d300 <__aeabi_ddiv>
   13458:	e76f      	b.n	1333a <__ieee754_pow+0x5a>
   1345a:	bf00      	nop
   1345c:	f3af 8000 	nop.w
   13460:	8800759c 	.word	0x8800759c
   13464:	7e37e43c 	.word	0x7e37e43c
   13468:	7ff00000 	.word	0x7ff00000
   1346c:	0003aa08 	.word	0x0003aa08
   13470:	c0100000 	.word	0xc0100000
   13474:	3ff00000 	.word	0x3ff00000
   13478:	3fe00000 	.word	0x3fe00000
   1347c:	41e00000 	.word	0x41e00000
   13480:	3fefffff 	.word	0x3fefffff
   13484:	433fffff 	.word	0x433fffff
   13488:	4bd3      	ldr	r3, [pc, #844]	; (137d8 <__ieee754_pow+0x4f8>)
   1348a:	403b      	ands	r3, r7
   1348c:	2b00      	cmp	r3, #0
   1348e:	f040 840c 	bne.w	13caa <__ieee754_pow+0x9ca>
   13492:	2200      	movs	r2, #0
   13494:	4bd1      	ldr	r3, [pc, #836]	; (137dc <__ieee754_pow+0x4fc>)
   13496:	f7f9 fe09 	bl	d0ac <__aeabi_dmul>
   1349a:	f06f 0534 	mvn.w	r5, #52	; 0x34
   1349e:	460e      	mov	r6, r1
   134a0:	1533      	asrs	r3, r6, #20
   134a2:	4acf      	ldr	r2, [pc, #828]	; (137e0 <__ieee754_pow+0x500>)
   134a4:	f3c6 0613 	ubfx	r6, r6, #0, #20
   134a8:	4cce      	ldr	r4, [pc, #824]	; (137e4 <__ieee754_pow+0x504>)
   134aa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   134ae:	4296      	cmp	r6, r2
   134b0:	ea44 0406 	orr.w	r4, r4, r6
   134b4:	441d      	add	r5, r3
   134b6:	950b      	str	r5, [sp, #44]	; 0x2c
   134b8:	f340 83eb 	ble.w	13c92 <__ieee754_pow+0x9b2>
   134bc:	4bca      	ldr	r3, [pc, #808]	; (137e8 <__ieee754_pow+0x508>)
   134be:	429e      	cmp	r6, r3
   134c0:	f340 842b 	ble.w	13d1a <__ieee754_pow+0xa3a>
   134c4:	3501      	adds	r5, #1
   134c6:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
   134ca:	ed9f 7bad 	vldr	d7, [pc, #692]	; 13780 <__ieee754_pow+0x4a0>
   134ce:	950b      	str	r5, [sp, #44]	; 0x2c
   134d0:	2500      	movs	r5, #0
   134d2:	ed8d 7b08 	vstr	d7, [sp, #32]
   134d6:	ed9f 7bac 	vldr	d7, [pc, #688]	; 13788 <__ieee754_pow+0x4a8>
   134da:	ed8d 7b06 	vstr	d7, [sp, #24]
   134de:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 13780 <__ieee754_pow+0x4a0>
   134e2:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   134e6:	4680      	mov	r8, r0
   134e8:	46a1      	mov	r9, r4
   134ea:	4621      	mov	r1, r4
   134ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   134f0:	f7f9 fc24 	bl	cd3c <__aeabi_dsub>
   134f4:	4606      	mov	r6, r0
   134f6:	460f      	mov	r7, r1
   134f8:	4640      	mov	r0, r8
   134fa:	4621      	mov	r1, r4
   134fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   13500:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
   13504:	f7f9 fc1c 	bl	cd40 <__adddf3>
   13508:	4602      	mov	r2, r0
   1350a:	460b      	mov	r3, r1
   1350c:	2000      	movs	r0, #0
   1350e:	49b5      	ldr	r1, [pc, #724]	; (137e4 <__ieee754_pow+0x504>)
   13510:	f7f9 fef6 	bl	d300 <__aeabi_ddiv>
   13514:	460a      	mov	r2, r1
   13516:	4601      	mov	r1, r0
   13518:	4613      	mov	r3, r2
   1351a:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
   1351e:	4602      	mov	r2, r0
   13520:	4639      	mov	r1, r7
   13522:	4630      	mov	r0, r6
   13524:	f7f9 fdc2 	bl	d0ac <__aeabi_dmul>
   13528:	4680      	mov	r8, r0
   1352a:	1063      	asrs	r3, r4, #1
   1352c:	4689      	mov	r9, r1
   1352e:	2400      	movs	r4, #0
   13530:	2000      	movs	r0, #0
   13532:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   13536:	4602      	mov	r2, r0
   13538:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   1353c:	e9cd 8902 	strd	r8, r9, [sp, #8]
   13540:	9402      	str	r4, [sp, #8]
   13542:	1959      	adds	r1, r3, r5
   13544:	4604      	mov	r4, r0
   13546:	460d      	mov	r5, r1
   13548:	460b      	mov	r3, r1
   1354a:	e9cd 8904 	strd	r8, r9, [sp, #16]
   1354e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
   13552:	4640      	mov	r0, r8
   13554:	4649      	mov	r1, r9
   13556:	f7f9 fda9 	bl	d0ac <__aeabi_dmul>
   1355a:	4602      	mov	r2, r0
   1355c:	460b      	mov	r3, r1
   1355e:	4630      	mov	r0, r6
   13560:	4639      	mov	r1, r7
   13562:	f7f9 fbeb 	bl	cd3c <__aeabi_dsub>
   13566:	4606      	mov	r6, r0
   13568:	460f      	mov	r7, r1
   1356a:	4620      	mov	r0, r4
   1356c:	4629      	mov	r1, r5
   1356e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   13572:	f7f9 fbe3 	bl	cd3c <__aeabi_dsub>
   13576:	4602      	mov	r2, r0
   13578:	460b      	mov	r3, r1
   1357a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   1357e:	f7f9 fbdd 	bl	cd3c <__aeabi_dsub>
   13582:	4642      	mov	r2, r8
   13584:	464b      	mov	r3, r9
   13586:	f7f9 fd91 	bl	d0ac <__aeabi_dmul>
   1358a:	4602      	mov	r2, r0
   1358c:	460b      	mov	r3, r1
   1358e:	4630      	mov	r0, r6
   13590:	4639      	mov	r1, r7
   13592:	f7f9 fbd3 	bl	cd3c <__aeabi_dsub>
   13596:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   1359a:	f7f9 fd87 	bl	d0ac <__aeabi_dmul>
   1359e:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   135a2:	e9cd 0106 	strd	r0, r1, [sp, #24]
   135a6:	4622      	mov	r2, r4
   135a8:	462b      	mov	r3, r5
   135aa:	4620      	mov	r0, r4
   135ac:	4629      	mov	r1, r5
   135ae:	f7f9 fd7d 	bl	d0ac <__aeabi_dmul>
   135b2:	4604      	mov	r4, r0
   135b4:	460d      	mov	r5, r1
   135b6:	a376      	add	r3, pc, #472	; (adr r3, 13790 <__ieee754_pow+0x4b0>)
   135b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   135bc:	f7f9 fd76 	bl	d0ac <__aeabi_dmul>
   135c0:	a375      	add	r3, pc, #468	; (adr r3, 13798 <__ieee754_pow+0x4b8>)
   135c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   135c6:	f7f9 fbbb 	bl	cd40 <__adddf3>
   135ca:	4622      	mov	r2, r4
   135cc:	462b      	mov	r3, r5
   135ce:	f7f9 fd6d 	bl	d0ac <__aeabi_dmul>
   135d2:	a373      	add	r3, pc, #460	; (adr r3, 137a0 <__ieee754_pow+0x4c0>)
   135d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   135d8:	f7f9 fbb2 	bl	cd40 <__adddf3>
   135dc:	4622      	mov	r2, r4
   135de:	462b      	mov	r3, r5
   135e0:	f7f9 fd64 	bl	d0ac <__aeabi_dmul>
   135e4:	a370      	add	r3, pc, #448	; (adr r3, 137a8 <__ieee754_pow+0x4c8>)
   135e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   135ea:	f7f9 fba9 	bl	cd40 <__adddf3>
   135ee:	4622      	mov	r2, r4
   135f0:	462b      	mov	r3, r5
   135f2:	f7f9 fd5b 	bl	d0ac <__aeabi_dmul>
   135f6:	a36e      	add	r3, pc, #440	; (adr r3, 137b0 <__ieee754_pow+0x4d0>)
   135f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   135fc:	f7f9 fba0 	bl	cd40 <__adddf3>
   13600:	4622      	mov	r2, r4
   13602:	462b      	mov	r3, r5
   13604:	f7f9 fd52 	bl	d0ac <__aeabi_dmul>
   13608:	a36b      	add	r3, pc, #428	; (adr r3, 137b8 <__ieee754_pow+0x4d8>)
   1360a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1360e:	f7f9 fb97 	bl	cd40 <__adddf3>
   13612:	4606      	mov	r6, r0
   13614:	460f      	mov	r7, r1
   13616:	4622      	mov	r2, r4
   13618:	462b      	mov	r3, r5
   1361a:	4620      	mov	r0, r4
   1361c:	4629      	mov	r1, r5
   1361e:	f7f9 fd45 	bl	d0ac <__aeabi_dmul>
   13622:	4602      	mov	r2, r0
   13624:	460b      	mov	r3, r1
   13626:	4630      	mov	r0, r6
   13628:	4639      	mov	r1, r7
   1362a:	f7f9 fd3f 	bl	d0ac <__aeabi_dmul>
   1362e:	4642      	mov	r2, r8
   13630:	4604      	mov	r4, r0
   13632:	460d      	mov	r5, r1
   13634:	464b      	mov	r3, r9
   13636:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1363a:	f7f9 fb81 	bl	cd40 <__adddf3>
   1363e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   13642:	f7f9 fd33 	bl	d0ac <__aeabi_dmul>
   13646:	4622      	mov	r2, r4
   13648:	462b      	mov	r3, r5
   1364a:	f7f9 fb79 	bl	cd40 <__adddf3>
   1364e:	4642      	mov	r2, r8
   13650:	4604      	mov	r4, r0
   13652:	460d      	mov	r5, r1
   13654:	464b      	mov	r3, r9
   13656:	4640      	mov	r0, r8
   13658:	4649      	mov	r1, r9
   1365a:	f7f9 fd27 	bl	d0ac <__aeabi_dmul>
   1365e:	2200      	movs	r2, #0
   13660:	4b62      	ldr	r3, [pc, #392]	; (137ec <__ieee754_pow+0x50c>)
   13662:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   13666:	f7f9 fb6b 	bl	cd40 <__adddf3>
   1366a:	4622      	mov	r2, r4
   1366c:	462b      	mov	r3, r5
   1366e:	f7f9 fb67 	bl	cd40 <__adddf3>
   13672:	9802      	ldr	r0, [sp, #8]
   13674:	460f      	mov	r7, r1
   13676:	4649      	mov	r1, r9
   13678:	4606      	mov	r6, r0
   1367a:	4640      	mov	r0, r8
   1367c:	463b      	mov	r3, r7
   1367e:	4632      	mov	r2, r6
   13680:	f7f9 fd14 	bl	d0ac <__aeabi_dmul>
   13684:	2200      	movs	r2, #0
   13686:	4680      	mov	r8, r0
   13688:	4689      	mov	r9, r1
   1368a:	4b58      	ldr	r3, [pc, #352]	; (137ec <__ieee754_pow+0x50c>)
   1368c:	4630      	mov	r0, r6
   1368e:	4639      	mov	r1, r7
   13690:	f7f9 fb54 	bl	cd3c <__aeabi_dsub>
   13694:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   13698:	f7f9 fb50 	bl	cd3c <__aeabi_dsub>
   1369c:	4602      	mov	r2, r0
   1369e:	460b      	mov	r3, r1
   136a0:	4620      	mov	r0, r4
   136a2:	4629      	mov	r1, r5
   136a4:	f7f9 fb4a 	bl	cd3c <__aeabi_dsub>
   136a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   136ac:	f7f9 fcfe 	bl	d0ac <__aeabi_dmul>
   136b0:	4604      	mov	r4, r0
   136b2:	460d      	mov	r5, r1
   136b4:	4632      	mov	r2, r6
   136b6:	463b      	mov	r3, r7
   136b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   136bc:	f7f9 fcf6 	bl	d0ac <__aeabi_dmul>
   136c0:	4602      	mov	r2, r0
   136c2:	460b      	mov	r3, r1
   136c4:	4620      	mov	r0, r4
   136c6:	4629      	mov	r1, r5
   136c8:	f7f9 fb3a 	bl	cd40 <__adddf3>
   136cc:	4604      	mov	r4, r0
   136ce:	460d      	mov	r5, r1
   136d0:	4602      	mov	r2, r0
   136d2:	460b      	mov	r3, r1
   136d4:	4640      	mov	r0, r8
   136d6:	4649      	mov	r1, r9
   136d8:	f7f9 fb32 	bl	cd40 <__adddf3>
   136dc:	9802      	ldr	r0, [sp, #8]
   136de:	460f      	mov	r7, r1
   136e0:	4606      	mov	r6, r0
   136e2:	a337      	add	r3, pc, #220	; (adr r3, 137c0 <__ieee754_pow+0x4e0>)
   136e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   136e8:	f7f9 fce0 	bl	d0ac <__aeabi_dmul>
   136ec:	4642      	mov	r2, r8
   136ee:	464b      	mov	r3, r9
   136f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
   136f4:	4630      	mov	r0, r6
   136f6:	4639      	mov	r1, r7
   136f8:	f7f9 fb20 	bl	cd3c <__aeabi_dsub>
   136fc:	4602      	mov	r2, r0
   136fe:	460b      	mov	r3, r1
   13700:	4620      	mov	r0, r4
   13702:	4629      	mov	r1, r5
   13704:	f7f9 fb1a 	bl	cd3c <__aeabi_dsub>
   13708:	a32f      	add	r3, pc, #188	; (adr r3, 137c8 <__ieee754_pow+0x4e8>)
   1370a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1370e:	f7f9 fccd 	bl	d0ac <__aeabi_dmul>
   13712:	4604      	mov	r4, r0
   13714:	460d      	mov	r5, r1
   13716:	4630      	mov	r0, r6
   13718:	4639      	mov	r1, r7
   1371a:	a32d      	add	r3, pc, #180	; (adr r3, 137d0 <__ieee754_pow+0x4f0>)
   1371c:	e9d3 2300 	ldrd	r2, r3, [r3]
   13720:	f7f9 fcc4 	bl	d0ac <__aeabi_dmul>
   13724:	4602      	mov	r2, r0
   13726:	460b      	mov	r3, r1
   13728:	4620      	mov	r0, r4
   1372a:	4629      	mov	r1, r5
   1372c:	f7f9 fb08 	bl	cd40 <__adddf3>
   13730:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   13734:	f7f9 fb04 	bl	cd40 <__adddf3>
   13738:	4606      	mov	r6, r0
   1373a:	460f      	mov	r7, r1
   1373c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1373e:	f7f9 fc4b 	bl	cfd8 <__aeabi_i2d>
   13742:	4632      	mov	r2, r6
   13744:	4680      	mov	r8, r0
   13746:	4689      	mov	r9, r1
   13748:	463b      	mov	r3, r7
   1374a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1374e:	f7f9 faf7 	bl	cd40 <__adddf3>
   13752:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   13756:	f7f9 faf3 	bl	cd40 <__adddf3>
   1375a:	4642      	mov	r2, r8
   1375c:	464b      	mov	r3, r9
   1375e:	f7f9 faef 	bl	cd40 <__adddf3>
   13762:	9802      	ldr	r0, [sp, #8]
   13764:	4642      	mov	r2, r8
   13766:	464b      	mov	r3, r9
   13768:	4604      	mov	r4, r0
   1376a:	460d      	mov	r5, r1
   1376c:	f7f9 fae6 	bl	cd3c <__aeabi_dsub>
   13770:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   13774:	f7f9 fae2 	bl	cd3c <__aeabi_dsub>
   13778:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1377c:	e038      	b.n	137f0 <__ieee754_pow+0x510>
   1377e:	bf00      	nop
	...
   1378c:	3ff00000 	.word	0x3ff00000
   13790:	4a454eef 	.word	0x4a454eef
   13794:	3fca7e28 	.word	0x3fca7e28
   13798:	93c9db65 	.word	0x93c9db65
   1379c:	3fcd864a 	.word	0x3fcd864a
   137a0:	a91d4101 	.word	0xa91d4101
   137a4:	3fd17460 	.word	0x3fd17460
   137a8:	518f264d 	.word	0x518f264d
   137ac:	3fd55555 	.word	0x3fd55555
   137b0:	db6fabff 	.word	0xdb6fabff
   137b4:	3fdb6db6 	.word	0x3fdb6db6
   137b8:	33333303 	.word	0x33333303
   137bc:	3fe33333 	.word	0x3fe33333
   137c0:	e0000000 	.word	0xe0000000
   137c4:	3feec709 	.word	0x3feec709
   137c8:	dc3a03fd 	.word	0xdc3a03fd
   137cc:	3feec709 	.word	0x3feec709
   137d0:	145b01f5 	.word	0x145b01f5
   137d4:	be3e2fe0 	.word	0xbe3e2fe0
   137d8:	7ff00000 	.word	0x7ff00000
   137dc:	43400000 	.word	0x43400000
   137e0:	0003988e 	.word	0x0003988e
   137e4:	3ff00000 	.word	0x3ff00000
   137e8:	000bb679 	.word	0x000bb679
   137ec:	40080000 	.word	0x40080000
   137f0:	f7f9 faa4 	bl	cd3c <__aeabi_dsub>
   137f4:	460b      	mov	r3, r1
   137f6:	4602      	mov	r2, r0
   137f8:	4639      	mov	r1, r7
   137fa:	4630      	mov	r0, r6
   137fc:	f7f9 fa9e 	bl	cd3c <__aeabi_dsub>
   13800:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
   13804:	ea53 030a 	orrs.w	r3, r3, sl
   13808:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1380c:	f040 8175 	bne.w	13afa <__ieee754_pow+0x81a>
   13810:	ed9f 7bd3 	vldr	d7, [pc, #844]	; 13b60 <__ieee754_pow+0x880>
   13814:	ed8d 7b04 	vstr	d7, [sp, #16]
   13818:	e9dd ab00 	ldrd	sl, fp, [sp]
   1381c:	4652      	mov	r2, sl
   1381e:	465b      	mov	r3, fp
   13820:	4650      	mov	r0, sl
   13822:	4659      	mov	r1, fp
   13824:	e9cd 2300 	strd	r2, r3, [sp]
   13828:	2300      	movs	r3, #0
   1382a:	9300      	str	r3, [sp, #0]
   1382c:	e9dd 6700 	ldrd	r6, r7, [sp]
   13830:	4632      	mov	r2, r6
   13832:	463b      	mov	r3, r7
   13834:	f7f9 fa82 	bl	cd3c <__aeabi_dsub>
   13838:	4622      	mov	r2, r4
   1383a:	462b      	mov	r3, r5
   1383c:	f7f9 fc36 	bl	d0ac <__aeabi_dmul>
   13840:	4680      	mov	r8, r0
   13842:	4689      	mov	r9, r1
   13844:	4652      	mov	r2, sl
   13846:	465b      	mov	r3, fp
   13848:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1384c:	f7f9 fc2e 	bl	d0ac <__aeabi_dmul>
   13850:	4602      	mov	r2, r0
   13852:	460b      	mov	r3, r1
   13854:	4640      	mov	r0, r8
   13856:	4649      	mov	r1, r9
   13858:	f7f9 fa72 	bl	cd40 <__adddf3>
   1385c:	468b      	mov	fp, r1
   1385e:	4682      	mov	sl, r0
   13860:	4632      	mov	r2, r6
   13862:	463b      	mov	r3, r7
   13864:	4620      	mov	r0, r4
   13866:	4629      	mov	r1, r5
   13868:	e9cd ab02 	strd	sl, fp, [sp, #8]
   1386c:	f7f9 fc1e 	bl	d0ac <__aeabi_dmul>
   13870:	460b      	mov	r3, r1
   13872:	4602      	mov	r2, r0
   13874:	4680      	mov	r8, r0
   13876:	4689      	mov	r9, r1
   13878:	4650      	mov	r0, sl
   1387a:	4659      	mov	r1, fp
   1387c:	f7f9 fa60 	bl	cd40 <__adddf3>
   13880:	4bcf      	ldr	r3, [pc, #828]	; (13bc0 <__ieee754_pow+0x8e0>)
   13882:	4604      	mov	r4, r0
   13884:	460d      	mov	r5, r1
   13886:	4299      	cmp	r1, r3
   13888:	468b      	mov	fp, r1
   1388a:	f340 813b 	ble.w	13b04 <__ieee754_pow+0x824>
   1388e:	4bcd      	ldr	r3, [pc, #820]	; (13bc4 <__ieee754_pow+0x8e4>)
   13890:	440b      	add	r3, r1
   13892:	4303      	orrs	r3, r0
   13894:	f040 8233 	bne.w	13cfe <__ieee754_pow+0xa1e>
   13898:	a3b3      	add	r3, pc, #716	; (adr r3, 13b68 <__ieee754_pow+0x888>)
   1389a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1389e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   138a2:	f7f9 fa4d 	bl	cd40 <__adddf3>
   138a6:	4606      	mov	r6, r0
   138a8:	460f      	mov	r7, r1
   138aa:	4642      	mov	r2, r8
   138ac:	464b      	mov	r3, r9
   138ae:	4620      	mov	r0, r4
   138b0:	4629      	mov	r1, r5
   138b2:	f7f9 fa43 	bl	cd3c <__aeabi_dsub>
   138b6:	4602      	mov	r2, r0
   138b8:	460b      	mov	r3, r1
   138ba:	4630      	mov	r0, r6
   138bc:	4639      	mov	r1, r7
   138be:	f7f9 fe85 	bl	d5cc <__aeabi_dcmpgt>
   138c2:	2800      	cmp	r0, #0
   138c4:	f040 821b 	bne.w	13cfe <__ieee754_pow+0xa1e>
   138c8:	f3cb 530a 	ubfx	r3, fp, #20, #11
   138cc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   138d0:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   138d4:	4cbc      	ldr	r4, [pc, #752]	; (13bc8 <__ieee754_pow+0x8e8>)
   138d6:	f1bb 0f00 	cmp.w	fp, #0
   138da:	fa42 f303 	asr.w	r3, r2, r3
   138de:	f04f 0000 	mov.w	r0, #0
   138e2:	445b      	add	r3, fp
   138e4:	f3c3 520a 	ubfx	r2, r3, #20, #11
   138e8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
   138ec:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   138f0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
   138f4:	fa44 f402 	asr.w	r4, r4, r2
   138f8:	f1c2 0214 	rsb	r2, r2, #20
   138fc:	ea23 0104 	bic.w	r1, r3, r4
   13900:	fa4a fa02 	asr.w	sl, sl, r2
   13904:	4602      	mov	r2, r0
   13906:	4640      	mov	r0, r8
   13908:	460b      	mov	r3, r1
   1390a:	bfb8      	it	lt
   1390c:	f1ca 0a00 	rsblt	sl, sl, #0
   13910:	4649      	mov	r1, r9
   13912:	f7f9 fa13 	bl	cd3c <__aeabi_dsub>
   13916:	4602      	mov	r2, r0
   13918:	460b      	mov	r3, r1
   1391a:	4680      	mov	r8, r0
   1391c:	4689      	mov	r9, r1
   1391e:	ea4f 5b0a 	mov.w	fp, sl, lsl #20
   13922:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   13926:	f7f9 fa0b 	bl	cd40 <__adddf3>
   1392a:	460d      	mov	r5, r1
   1392c:	2400      	movs	r4, #0
   1392e:	4629      	mov	r1, r5
   13930:	a38f      	add	r3, pc, #572	; (adr r3, 13b70 <__ieee754_pow+0x890>)
   13932:	e9d3 2300 	ldrd	r2, r3, [r3]
   13936:	4620      	mov	r0, r4
   13938:	f7f9 fbb8 	bl	d0ac <__aeabi_dmul>
   1393c:	4642      	mov	r2, r8
   1393e:	4606      	mov	r6, r0
   13940:	460f      	mov	r7, r1
   13942:	464b      	mov	r3, r9
   13944:	4620      	mov	r0, r4
   13946:	4629      	mov	r1, r5
   13948:	f7f9 f9f8 	bl	cd3c <__aeabi_dsub>
   1394c:	4602      	mov	r2, r0
   1394e:	460b      	mov	r3, r1
   13950:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   13954:	f7f9 f9f2 	bl	cd3c <__aeabi_dsub>
   13958:	a387      	add	r3, pc, #540	; (adr r3, 13b78 <__ieee754_pow+0x898>)
   1395a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1395e:	f7f9 fba5 	bl	d0ac <__aeabi_dmul>
   13962:	4680      	mov	r8, r0
   13964:	4689      	mov	r9, r1
   13966:	4620      	mov	r0, r4
   13968:	4629      	mov	r1, r5
   1396a:	a385      	add	r3, pc, #532	; (adr r3, 13b80 <__ieee754_pow+0x8a0>)
   1396c:	e9d3 2300 	ldrd	r2, r3, [r3]
   13970:	f7f9 fb9c 	bl	d0ac <__aeabi_dmul>
   13974:	4602      	mov	r2, r0
   13976:	460b      	mov	r3, r1
   13978:	4640      	mov	r0, r8
   1397a:	4649      	mov	r1, r9
   1397c:	f7f9 f9e0 	bl	cd40 <__adddf3>
   13980:	4604      	mov	r4, r0
   13982:	460d      	mov	r5, r1
   13984:	4602      	mov	r2, r0
   13986:	460b      	mov	r3, r1
   13988:	4630      	mov	r0, r6
   1398a:	4639      	mov	r1, r7
   1398c:	f7f9 f9d8 	bl	cd40 <__adddf3>
   13990:	4632      	mov	r2, r6
   13992:	4680      	mov	r8, r0
   13994:	4689      	mov	r9, r1
   13996:	463b      	mov	r3, r7
   13998:	f7f9 f9d0 	bl	cd3c <__aeabi_dsub>
   1399c:	4602      	mov	r2, r0
   1399e:	460b      	mov	r3, r1
   139a0:	4620      	mov	r0, r4
   139a2:	4629      	mov	r1, r5
   139a4:	f7f9 f9ca 	bl	cd3c <__aeabi_dsub>
   139a8:	4642      	mov	r2, r8
   139aa:	4606      	mov	r6, r0
   139ac:	460f      	mov	r7, r1
   139ae:	464b      	mov	r3, r9
   139b0:	4640      	mov	r0, r8
   139b2:	4649      	mov	r1, r9
   139b4:	f7f9 fb7a 	bl	d0ac <__aeabi_dmul>
   139b8:	4604      	mov	r4, r0
   139ba:	460d      	mov	r5, r1
   139bc:	a372      	add	r3, pc, #456	; (adr r3, 13b88 <__ieee754_pow+0x8a8>)
   139be:	e9d3 2300 	ldrd	r2, r3, [r3]
   139c2:	f7f9 fb73 	bl	d0ac <__aeabi_dmul>
   139c6:	a372      	add	r3, pc, #456	; (adr r3, 13b90 <__ieee754_pow+0x8b0>)
   139c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   139cc:	f7f9 f9b6 	bl	cd3c <__aeabi_dsub>
   139d0:	4622      	mov	r2, r4
   139d2:	462b      	mov	r3, r5
   139d4:	f7f9 fb6a 	bl	d0ac <__aeabi_dmul>
   139d8:	a36f      	add	r3, pc, #444	; (adr r3, 13b98 <__ieee754_pow+0x8b8>)
   139da:	e9d3 2300 	ldrd	r2, r3, [r3]
   139de:	f7f9 f9af 	bl	cd40 <__adddf3>
   139e2:	4622      	mov	r2, r4
   139e4:	462b      	mov	r3, r5
   139e6:	f7f9 fb61 	bl	d0ac <__aeabi_dmul>
   139ea:	a36d      	add	r3, pc, #436	; (adr r3, 13ba0 <__ieee754_pow+0x8c0>)
   139ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   139f0:	f7f9 f9a4 	bl	cd3c <__aeabi_dsub>
   139f4:	4622      	mov	r2, r4
   139f6:	462b      	mov	r3, r5
   139f8:	f7f9 fb58 	bl	d0ac <__aeabi_dmul>
   139fc:	a36a      	add	r3, pc, #424	; (adr r3, 13ba8 <__ieee754_pow+0x8c8>)
   139fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   13a02:	f7f9 f99d 	bl	cd40 <__adddf3>
   13a06:	4622      	mov	r2, r4
   13a08:	462b      	mov	r3, r5
   13a0a:	f7f9 fb4f 	bl	d0ac <__aeabi_dmul>
   13a0e:	4602      	mov	r2, r0
   13a10:	460b      	mov	r3, r1
   13a12:	4640      	mov	r0, r8
   13a14:	4649      	mov	r1, r9
   13a16:	f7f9 f991 	bl	cd3c <__aeabi_dsub>
   13a1a:	4604      	mov	r4, r0
   13a1c:	460d      	mov	r5, r1
   13a1e:	4602      	mov	r2, r0
   13a20:	460b      	mov	r3, r1
   13a22:	4640      	mov	r0, r8
   13a24:	4649      	mov	r1, r9
   13a26:	f7f9 fb41 	bl	d0ac <__aeabi_dmul>
   13a2a:	2200      	movs	r2, #0
   13a2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13a30:	e9cd 0100 	strd	r0, r1, [sp]
   13a34:	4620      	mov	r0, r4
   13a36:	4629      	mov	r1, r5
   13a38:	f7f9 f980 	bl	cd3c <__aeabi_dsub>
   13a3c:	4602      	mov	r2, r0
   13a3e:	460b      	mov	r3, r1
   13a40:	e9dd 0100 	ldrd	r0, r1, [sp]
   13a44:	f7f9 fc5c 	bl	d300 <__aeabi_ddiv>
   13a48:	4632      	mov	r2, r6
   13a4a:	4604      	mov	r4, r0
   13a4c:	460d      	mov	r5, r1
   13a4e:	463b      	mov	r3, r7
   13a50:	4640      	mov	r0, r8
   13a52:	4649      	mov	r1, r9
   13a54:	f7f9 fb2a 	bl	d0ac <__aeabi_dmul>
   13a58:	4632      	mov	r2, r6
   13a5a:	463b      	mov	r3, r7
   13a5c:	f7f9 f970 	bl	cd40 <__adddf3>
   13a60:	4602      	mov	r2, r0
   13a62:	460b      	mov	r3, r1
   13a64:	4620      	mov	r0, r4
   13a66:	4629      	mov	r1, r5
   13a68:	f7f9 f968 	bl	cd3c <__aeabi_dsub>
   13a6c:	4642      	mov	r2, r8
   13a6e:	464b      	mov	r3, r9
   13a70:	f7f9 f964 	bl	cd3c <__aeabi_dsub>
   13a74:	4602      	mov	r2, r0
   13a76:	460b      	mov	r3, r1
   13a78:	2000      	movs	r0, #0
   13a7a:	4954      	ldr	r1, [pc, #336]	; (13bcc <__ieee754_pow+0x8ec>)
   13a7c:	f7f9 f95e 	bl	cd3c <__aeabi_dsub>
   13a80:	448b      	add	fp, r1
   13a82:	4602      	mov	r2, r0
   13a84:	460b      	mov	r3, r1
   13a86:	f5bb 1f80 	cmp.w	fp, #1048576	; 0x100000
   13a8a:	f2c0 815f 	blt.w	13d4c <__ieee754_pow+0xa6c>
   13a8e:	4659      	mov	r1, fp
   13a90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   13a94:	f7f9 fb0a 	bl	d0ac <__aeabi_dmul>
   13a98:	e44f      	b.n	1333a <__ieee754_pow+0x5a>
   13a9a:	ec45 4b10 	vmov	d0, r4, r5
   13a9e:	f01b fcb7 	bl	2f410 <fabs>
   13aa2:	ec51 0b10 	vmov	r0, r1, d0
   13aa6:	f1ba 0f00 	cmp.w	sl, #0
   13aaa:	f47f accb 	bne.w	13444 <__ieee754_pow+0x164>
   13aae:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
   13ab2:	4a46      	ldr	r2, [pc, #280]	; (13bcc <__ieee754_pow+0x8ec>)
   13ab4:	4293      	cmp	r3, r2
   13ab6:	d002      	beq.n	13abe <__ieee754_pow+0x7de>
   13ab8:	2e00      	cmp	r6, #0
   13aba:	f47f acc3 	bne.w	13444 <__ieee754_pow+0x164>
   13abe:	f04f 0b00 	mov.w	fp, #0
   13ac2:	f1b9 0f00 	cmp.w	r9, #0
   13ac6:	da05      	bge.n	13ad4 <__ieee754_pow+0x7f4>
   13ac8:	4602      	mov	r2, r0
   13aca:	460b      	mov	r3, r1
   13acc:	2000      	movs	r0, #0
   13ace:	493f      	ldr	r1, [pc, #252]	; (13bcc <__ieee754_pow+0x8ec>)
   13ad0:	f7f9 fc16 	bl	d300 <__aeabi_ddiv>
   13ad4:	2f00      	cmp	r7, #0
   13ad6:	f6bf ac30 	bge.w	1333a <__ieee754_pow+0x5a>
   13ada:	4b3d      	ldr	r3, [pc, #244]	; (13bd0 <__ieee754_pow+0x8f0>)
   13adc:	4433      	add	r3, r6
   13ade:	ea53 030b 	orrs.w	r3, r3, fp
   13ae2:	f040 812a 	bne.w	13d3a <__ieee754_pow+0xa5a>
   13ae6:	4602      	mov	r2, r0
   13ae8:	460b      	mov	r3, r1
   13aea:	e4ad      	b.n	13448 <__ieee754_pow+0x168>
   13aec:	f1b9 0f00 	cmp.w	r9, #0
   13af0:	f6ff ac6b 	blt.w	133ca <__ieee754_pow+0xea>
   13af4:	2000      	movs	r0, #0
   13af6:	2100      	movs	r1, #0
   13af8:	e41f      	b.n	1333a <__ieee754_pow+0x5a>
   13afa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 13bb0 <__ieee754_pow+0x8d0>
   13afe:	ed8d 7b04 	vstr	d7, [sp, #16]
   13b02:	e689      	b.n	13818 <__ieee754_pow+0x538>
   13b04:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   13b08:	4e32      	ldr	r6, [pc, #200]	; (13bd4 <__ieee754_pow+0x8f4>)
   13b0a:	42b3      	cmp	r3, r6
   13b0c:	f340 80ef 	ble.w	13cee <__ieee754_pow+0xa0e>
   13b10:	4b31      	ldr	r3, [pc, #196]	; (13bd8 <__ieee754_pow+0x8f8>)
   13b12:	440b      	add	r3, r1
   13b14:	4303      	orrs	r3, r0
   13b16:	d10a      	bne.n	13b2e <__ieee754_pow+0x84e>
   13b18:	4642      	mov	r2, r8
   13b1a:	464b      	mov	r3, r9
   13b1c:	f7f9 f90e 	bl	cd3c <__aeabi_dsub>
   13b20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   13b24:	f7f9 fd48 	bl	d5b8 <__aeabi_dcmpge>
   13b28:	2800      	cmp	r0, #0
   13b2a:	f43f aecd 	beq.w	138c8 <__ieee754_pow+0x5e8>
   13b2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   13b32:	a321      	add	r3, pc, #132	; (adr r3, 13bb8 <__ieee754_pow+0x8d8>)
   13b34:	e9d3 2300 	ldrd	r2, r3, [r3]
   13b38:	f7f9 fab8 	bl	d0ac <__aeabi_dmul>
   13b3c:	a31e      	add	r3, pc, #120	; (adr r3, 13bb8 <__ieee754_pow+0x8d8>)
   13b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   13b42:	f7f9 fab3 	bl	d0ac <__aeabi_dmul>
   13b46:	f7ff bbf8 	b.w	1333a <__ieee754_pow+0x5a>
   13b4a:	f1b9 0f00 	cmp.w	r9, #0
   13b4e:	dad1      	bge.n	13af4 <__ieee754_pow+0x814>
   13b50:	e9dd 3400 	ldrd	r3, r4, [sp]
   13b54:	4618      	mov	r0, r3
   13b56:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
   13b5a:	f7ff bbee 	b.w	1333a <__ieee754_pow+0x5a>
   13b5e:	bf00      	nop
   13b60:	00000000 	.word	0x00000000
   13b64:	bff00000 	.word	0xbff00000
   13b68:	652b82fe 	.word	0x652b82fe
   13b6c:	3c971547 	.word	0x3c971547
   13b70:	00000000 	.word	0x00000000
   13b74:	3fe62e43 	.word	0x3fe62e43
   13b78:	fefa39ef 	.word	0xfefa39ef
   13b7c:	3fe62e42 	.word	0x3fe62e42
   13b80:	0ca86c39 	.word	0x0ca86c39
   13b84:	be205c61 	.word	0xbe205c61
   13b88:	72bea4d0 	.word	0x72bea4d0
   13b8c:	3e663769 	.word	0x3e663769
   13b90:	c5d26bf1 	.word	0xc5d26bf1
   13b94:	3ebbbd41 	.word	0x3ebbbd41
   13b98:	af25de2c 	.word	0xaf25de2c
   13b9c:	3f11566a 	.word	0x3f11566a
   13ba0:	16bebd93 	.word	0x16bebd93
   13ba4:	3f66c16c 	.word	0x3f66c16c
   13ba8:	5555553e 	.word	0x5555553e
   13bac:	3fc55555 	.word	0x3fc55555
   13bb0:	00000000 	.word	0x00000000
   13bb4:	3ff00000 	.word	0x3ff00000
   13bb8:	c2f8f359 	.word	0xc2f8f359
   13bbc:	01a56e1f 	.word	0x01a56e1f
   13bc0:	408fffff 	.word	0x408fffff
   13bc4:	bf700000 	.word	0xbf700000
   13bc8:	000fffff 	.word	0x000fffff
   13bcc:	3ff00000 	.word	0x3ff00000
   13bd0:	c0100000 	.word	0xc0100000
   13bd4:	4090cbff 	.word	0x4090cbff
   13bd8:	3f6f3400 	.word	0x3f6f3400
   13bdc:	4b7c      	ldr	r3, [pc, #496]	; (13dd0 <__ieee754_pow+0xaf0>)
   13bde:	429e      	cmp	r6, r3
   13be0:	dd84      	ble.n	13aec <__ieee754_pow+0x80c>
   13be2:	4b7c      	ldr	r3, [pc, #496]	; (13dd4 <__ieee754_pow+0xaf4>)
   13be4:	429e      	cmp	r6, r3
   13be6:	f73f abec 	bgt.w	133c2 <__ieee754_pow+0xe2>
   13bea:	2200      	movs	r2, #0
   13bec:	4b79      	ldr	r3, [pc, #484]	; (13dd4 <__ieee754_pow+0xaf4>)
   13bee:	f7f9 f8a5 	bl	cd3c <__aeabi_dsub>
   13bf2:	4604      	mov	r4, r0
   13bf4:	460d      	mov	r5, r1
   13bf6:	a362      	add	r3, pc, #392	; (adr r3, 13d80 <__ieee754_pow+0xaa0>)
   13bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
   13bfc:	f7f9 fa56 	bl	d0ac <__aeabi_dmul>
   13c00:	4680      	mov	r8, r0
   13c02:	4689      	mov	r9, r1
   13c04:	4620      	mov	r0, r4
   13c06:	4629      	mov	r1, r5
   13c08:	a35f      	add	r3, pc, #380	; (adr r3, 13d88 <__ieee754_pow+0xaa8>)
   13c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
   13c0e:	f7f9 fa4d 	bl	d0ac <__aeabi_dmul>
   13c12:	2200      	movs	r2, #0
   13c14:	4b70      	ldr	r3, [pc, #448]	; (13dd8 <__ieee754_pow+0xaf8>)
   13c16:	e9cd 0102 	strd	r0, r1, [sp, #8]
   13c1a:	4620      	mov	r0, r4
   13c1c:	4629      	mov	r1, r5
   13c1e:	f7f9 fa45 	bl	d0ac <__aeabi_dmul>
   13c22:	4602      	mov	r2, r0
   13c24:	460b      	mov	r3, r1
   13c26:	a15a      	add	r1, pc, #360	; (adr r1, 13d90 <__ieee754_pow+0xab0>)
   13c28:	e9d1 0100 	ldrd	r0, r1, [r1]
   13c2c:	f7f9 f886 	bl	cd3c <__aeabi_dsub>
   13c30:	4622      	mov	r2, r4
   13c32:	462b      	mov	r3, r5
   13c34:	f7f9 fa3a 	bl	d0ac <__aeabi_dmul>
   13c38:	4602      	mov	r2, r0
   13c3a:	460b      	mov	r3, r1
   13c3c:	2000      	movs	r0, #0
   13c3e:	4967      	ldr	r1, [pc, #412]	; (13ddc <__ieee754_pow+0xafc>)
   13c40:	f7f9 f87c 	bl	cd3c <__aeabi_dsub>
   13c44:	4606      	mov	r6, r0
   13c46:	460f      	mov	r7, r1
   13c48:	4622      	mov	r2, r4
   13c4a:	462b      	mov	r3, r5
   13c4c:	4620      	mov	r0, r4
   13c4e:	4629      	mov	r1, r5
   13c50:	f7f9 fa2c 	bl	d0ac <__aeabi_dmul>
   13c54:	4602      	mov	r2, r0
   13c56:	460b      	mov	r3, r1
   13c58:	4630      	mov	r0, r6
   13c5a:	4639      	mov	r1, r7
   13c5c:	f7f9 fa26 	bl	d0ac <__aeabi_dmul>
   13c60:	a34d      	add	r3, pc, #308	; (adr r3, 13d98 <__ieee754_pow+0xab8>)
   13c62:	e9d3 2300 	ldrd	r2, r3, [r3]
   13c66:	f7f9 fa21 	bl	d0ac <__aeabi_dmul>
   13c6a:	4602      	mov	r2, r0
   13c6c:	460b      	mov	r3, r1
   13c6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   13c72:	f7f9 f863 	bl	cd3c <__aeabi_dsub>
   13c76:	4602      	mov	r2, r0
   13c78:	460b      	mov	r3, r1
   13c7a:	4606      	mov	r6, r0
   13c7c:	460f      	mov	r7, r1
   13c7e:	4640      	mov	r0, r8
   13c80:	4649      	mov	r1, r9
   13c82:	f7f9 f85d 	bl	cd40 <__adddf3>
   13c86:	2000      	movs	r0, #0
   13c88:	460d      	mov	r5, r1
   13c8a:	4642      	mov	r2, r8
   13c8c:	4604      	mov	r4, r0
   13c8e:	464b      	mov	r3, r9
   13c90:	e5ae      	b.n	137f0 <__ieee754_pow+0x510>
   13c92:	ed9f 7b43 	vldr	d7, [pc, #268]	; 13da0 <__ieee754_pow+0xac0>
   13c96:	2500      	movs	r5, #0
   13c98:	ed8d 7b08 	vstr	d7, [sp, #32]
   13c9c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   13ca0:	ed9f 7b41 	vldr	d7, [pc, #260]	; 13da8 <__ieee754_pow+0xac8>
   13ca4:	ed8d 7b06 	vstr	d7, [sp, #24]
   13ca8:	e41d      	b.n	134e6 <__ieee754_pow+0x206>
   13caa:	2500      	movs	r5, #0
   13cac:	f7ff bbf8 	b.w	134a0 <__ieee754_pow+0x1c0>
   13cb0:	4622      	mov	r2, r4
   13cb2:	462b      	mov	r3, r5
   13cb4:	2000      	movs	r0, #0
   13cb6:	4947      	ldr	r1, [pc, #284]	; (13dd4 <__ieee754_pow+0xaf4>)
   13cb8:	f7f9 fb22 	bl	d300 <__aeabi_ddiv>
   13cbc:	f7ff bb3d 	b.w	1333a <__ieee754_pow+0x5a>
   13cc0:	4622      	mov	r2, r4
   13cc2:	462b      	mov	r3, r5
   13cc4:	4620      	mov	r0, r4
   13cc6:	4629      	mov	r1, r5
   13cc8:	f7f9 f9f0 	bl	d0ac <__aeabi_dmul>
   13ccc:	f7ff bb35 	b.w	1333a <__ieee754_pow+0x5a>
   13cd0:	f1bc 0f00 	cmp.w	ip, #0
   13cd4:	f47f aee1 	bne.w	13a9a <__ieee754_pow+0x7ba>
   13cd8:	f1c3 0314 	rsb	r3, r3, #20
   13cdc:	fa48 f203 	asr.w	r2, r8, r3
   13ce0:	fa02 f303 	lsl.w	r3, r2, r3
   13ce4:	4543      	cmp	r3, r8
   13ce6:	d040      	beq.n	13d6a <__ieee754_pow+0xa8a>
   13ce8:	46e3      	mov	fp, ip
   13cea:	f7ff bb39 	b.w	13360 <__ieee754_pow+0x80>
   13cee:	4a3b      	ldr	r2, [pc, #236]	; (13ddc <__ieee754_pow+0xafc>)
   13cf0:	4293      	cmp	r3, r2
   13cf2:	dc40      	bgt.n	13d76 <__ieee754_pow+0xa96>
   13cf4:	e9dd 2300 	ldrd	r2, r3, [sp]
   13cf8:	4693      	mov	fp, r2
   13cfa:	4692      	mov	sl, r2
   13cfc:	e616      	b.n	1392c <__ieee754_pow+0x64c>
   13cfe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   13d02:	a32b      	add	r3, pc, #172	; (adr r3, 13db0 <__ieee754_pow+0xad0>)
   13d04:	e9d3 2300 	ldrd	r2, r3, [r3]
   13d08:	f7f9 f9d0 	bl	d0ac <__aeabi_dmul>
   13d0c:	a328      	add	r3, pc, #160	; (adr r3, 13db0 <__ieee754_pow+0xad0>)
   13d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   13d12:	f7f9 f9cb 	bl	d0ac <__aeabi_dmul>
   13d16:	f7ff bb10 	b.w	1333a <__ieee754_pow+0x5a>
   13d1a:	ed9f 7b27 	vldr	d7, [pc, #156]	; 13db8 <__ieee754_pow+0xad8>
   13d1e:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   13d22:	ed8d 7b08 	vstr	d7, [sp, #32]
   13d26:	ed9f 7b26 	vldr	d7, [pc, #152]	; 13dc0 <__ieee754_pow+0xae0>
   13d2a:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   13d2e:	ed9f 7b26 	vldr	d7, [pc, #152]	; 13dc8 <__ieee754_pow+0xae8>
   13d32:	ed8d 7b06 	vstr	d7, [sp, #24]
   13d36:	f7ff bbd6 	b.w	134e6 <__ieee754_pow+0x206>
   13d3a:	f1bb 0f01 	cmp.w	fp, #1
   13d3e:	f47f aafc 	bne.w	1333a <__ieee754_pow+0x5a>
   13d42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   13d46:	4619      	mov	r1, r3
   13d48:	f7ff baf7 	b.w	1333a <__ieee754_pow+0x5a>
   13d4c:	4650      	mov	r0, sl
   13d4e:	ec43 2b10 	vmov	d0, r2, r3
   13d52:	f000 f84d 	bl	13df0 <scalbn>
   13d56:	ec51 0b10 	vmov	r0, r1, d0
   13d5a:	e699      	b.n	13a90 <__ieee754_pow+0x7b0>
   13d5c:	ec45 4b10 	vmov	d0, r4, r5
   13d60:	b013      	add	sp, #76	; 0x4c
   13d62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d66:	f01b bd81 	b.w	2f86c <__ieee754_sqrt>
   13d6a:	f002 0201 	and.w	r2, r2, #1
   13d6e:	f1c2 0b02 	rsb	fp, r2, #2
   13d72:	f7ff baf5 	b.w	13360 <__ieee754_pow+0x80>
   13d76:	151b      	asrs	r3, r3, #20
   13d78:	e5a8      	b.n	138cc <__ieee754_pow+0x5ec>
   13d7a:	bf00      	nop
   13d7c:	f3af 8000 	nop.w
   13d80:	60000000 	.word	0x60000000
   13d84:	3ff71547 	.word	0x3ff71547
   13d88:	f85ddf44 	.word	0xf85ddf44
   13d8c:	3e54ae0b 	.word	0x3e54ae0b
   13d90:	55555555 	.word	0x55555555
   13d94:	3fd55555 	.word	0x3fd55555
   13d98:	652b82fe 	.word	0x652b82fe
   13d9c:	3ff71547 	.word	0x3ff71547
	...
   13dac:	3ff00000 	.word	0x3ff00000
   13db0:	8800759c 	.word	0x8800759c
   13db4:	7e37e43c 	.word	0x7e37e43c
   13db8:	40000000 	.word	0x40000000
   13dbc:	3fe2b803 	.word	0x3fe2b803
   13dc0:	43cfd006 	.word	0x43cfd006
   13dc4:	3e4cfdeb 	.word	0x3e4cfdeb
   13dc8:	00000000 	.word	0x00000000
   13dcc:	3ff80000 	.word	0x3ff80000
   13dd0:	3feffffe 	.word	0x3feffffe
   13dd4:	3ff00000 	.word	0x3ff00000
   13dd8:	3fd00000 	.word	0x3fd00000
   13ddc:	3fe00000 	.word	0x3fe00000

00013de0 <nan>:
   13de0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 13de8 <nan+0x8>
   13de4:	4770      	bx	lr
   13de6:	bf00      	nop
   13de8:	00000000 	.word	0x00000000
   13dec:	7ff80000 	.word	0x7ff80000

00013df0 <scalbn>:
   13df0:	b538      	push	{r3, r4, r5, lr}
   13df2:	ec53 2b10 	vmov	r2, r3, d0
   13df6:	f3c3 510a 	ubfx	r1, r3, #20, #11
   13dfa:	461c      	mov	r4, r3
   13dfc:	4605      	mov	r5, r0
   13dfe:	bb81      	cbnz	r1, 13e62 <scalbn+0x72>
   13e00:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   13e04:	ee10 1a10 	vmov	r1, s0
   13e08:	4321      	orrs	r1, r4
   13e0a:	d029      	beq.n	13e60 <scalbn+0x70>
   13e0c:	4c3c      	ldr	r4, [pc, #240]	; (13f00 <scalbn+0x110>)
   13e0e:	4619      	mov	r1, r3
   13e10:	2200      	movs	r2, #0
   13e12:	4b3c      	ldr	r3, [pc, #240]	; (13f04 <scalbn+0x114>)
   13e14:	ee10 0a10 	vmov	r0, s0
   13e18:	f7f9 f948 	bl	d0ac <__aeabi_dmul>
   13e1c:	42a5      	cmp	r5, r4
   13e1e:	4602      	mov	r2, r0
   13e20:	460b      	mov	r3, r1
   13e22:	db16      	blt.n	13e52 <scalbn+0x62>
   13e24:	460c      	mov	r4, r1
   13e26:	f3c1 510a 	ubfx	r1, r1, #20, #11
   13e2a:	3936      	subs	r1, #54	; 0x36
   13e2c:	4429      	add	r1, r5
   13e2e:	f240 70fe 	movw	r0, #2046	; 0x7fe
   13e32:	4281      	cmp	r1, r0
   13e34:	dc21      	bgt.n	13e7a <scalbn+0x8a>
   13e36:	2900      	cmp	r1, #0
   13e38:	dc45      	bgt.n	13ec6 <scalbn+0xd6>
   13e3a:	f111 0f35 	cmn.w	r1, #53	; 0x35
   13e3e:	da34      	bge.n	13eaa <scalbn+0xba>
   13e40:	f24c 3150 	movw	r1, #50000	; 0xc350
   13e44:	428d      	cmp	r5, r1
   13e46:	dc18      	bgt.n	13e7a <scalbn+0x8a>
   13e48:	2b00      	cmp	r3, #0
   13e4a:	a125      	add	r1, pc, #148	; (adr r1, 13ee0 <scalbn+0xf0>)
   13e4c:	e9d1 0100 	ldrd	r0, r1, [r1]
   13e50:	db40      	blt.n	13ed4 <scalbn+0xe4>
   13e52:	a323      	add	r3, pc, #140	; (adr r3, 13ee0 <scalbn+0xf0>)
   13e54:	e9d3 2300 	ldrd	r2, r3, [r3]
   13e58:	f7f9 f928 	bl	d0ac <__aeabi_dmul>
   13e5c:	ec41 0b10 	vmov	d0, r0, r1
   13e60:	bd38      	pop	{r3, r4, r5, pc}
   13e62:	f240 70ff 	movw	r0, #2047	; 0x7ff
   13e66:	4281      	cmp	r1, r0
   13e68:	d1e0      	bne.n	13e2c <scalbn+0x3c>
   13e6a:	ee10 0a10 	vmov	r0, s0
   13e6e:	4619      	mov	r1, r3
   13e70:	f7f8 ff66 	bl	cd40 <__adddf3>
   13e74:	ec41 0b10 	vmov	d0, r0, r1
   13e78:	bd38      	pop	{r3, r4, r5, pc}
   13e7a:	2b00      	cmp	r3, #0
   13e7c:	a11a      	add	r1, pc, #104	; (adr r1, 13ee8 <scalbn+0xf8>)
   13e7e:	e9d1 0100 	ldrd	r0, r1, [r1]
   13e82:	db07      	blt.n	13e94 <scalbn+0xa4>
   13e84:	a318      	add	r3, pc, #96	; (adr r3, 13ee8 <scalbn+0xf8>)
   13e86:	e9d3 2300 	ldrd	r2, r3, [r3]
   13e8a:	f7f9 f90f 	bl	d0ac <__aeabi_dmul>
   13e8e:	ec41 0b10 	vmov	d0, r0, r1
   13e92:	bd38      	pop	{r3, r4, r5, pc}
   13e94:	a116      	add	r1, pc, #88	; (adr r1, 13ef0 <scalbn+0x100>)
   13e96:	e9d1 0100 	ldrd	r0, r1, [r1]
   13e9a:	a313      	add	r3, pc, #76	; (adr r3, 13ee8 <scalbn+0xf8>)
   13e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
   13ea0:	f7f9 f904 	bl	d0ac <__aeabi_dmul>
   13ea4:	ec41 0b10 	vmov	d0, r0, r1
   13ea8:	e7f3      	b.n	13e92 <scalbn+0xa2>
   13eaa:	4817      	ldr	r0, [pc, #92]	; (13f08 <scalbn+0x118>)
   13eac:	3136      	adds	r1, #54	; 0x36
   13eae:	4020      	ands	r0, r4
   13eb0:	ea40 5301 	orr.w	r3, r0, r1, lsl #20
   13eb4:	4610      	mov	r0, r2
   13eb6:	2200      	movs	r2, #0
   13eb8:	4619      	mov	r1, r3
   13eba:	4b14      	ldr	r3, [pc, #80]	; (13f0c <scalbn+0x11c>)
   13ebc:	f7f9 f8f6 	bl	d0ac <__aeabi_dmul>
   13ec0:	ec41 0b10 	vmov	d0, r0, r1
   13ec4:	bd38      	pop	{r3, r4, r5, pc}
   13ec6:	4810      	ldr	r0, [pc, #64]	; (13f08 <scalbn+0x118>)
   13ec8:	4020      	ands	r0, r4
   13eca:	ea40 5301 	orr.w	r3, r0, r1, lsl #20
   13ece:	ec43 2b10 	vmov	d0, r2, r3
   13ed2:	bd38      	pop	{r3, r4, r5, pc}
   13ed4:	a108      	add	r1, pc, #32	; (adr r1, 13ef8 <scalbn+0x108>)
   13ed6:	e9d1 0100 	ldrd	r0, r1, [r1]
   13eda:	e7ba      	b.n	13e52 <scalbn+0x62>
   13edc:	f3af 8000 	nop.w
   13ee0:	c2f8f359 	.word	0xc2f8f359
   13ee4:	01a56e1f 	.word	0x01a56e1f
   13ee8:	8800759c 	.word	0x8800759c
   13eec:	7e37e43c 	.word	0x7e37e43c
   13ef0:	8800759c 	.word	0x8800759c
   13ef4:	fe37e43c 	.word	0xfe37e43c
   13ef8:	c2f8f359 	.word	0xc2f8f359
   13efc:	81a56e1f 	.word	0x81a56e1f
   13f00:	ffff3cb0 	.word	0xffff3cb0
   13f04:	43500000 	.word	0x43500000
   13f08:	800fffff 	.word	0x800fffff
   13f0c:	3c900000 	.word	0x3c900000

00013f10 <_dtoa_r>:
   13f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f14:	6a47      	ldr	r7, [r0, #36]	; 0x24
   13f16:	b099      	sub	sp, #100	; 0x64
   13f18:	4683      	mov	fp, r0
   13f1a:	9108      	str	r1, [sp, #32]
   13f1c:	920d      	str	r2, [sp, #52]	; 0x34
   13f1e:	9314      	str	r3, [sp, #80]	; 0x50
   13f20:	9e22      	ldr	r6, [sp, #136]	; 0x88
   13f22:	ec55 4b10 	vmov	r4, r5, d0
   13f26:	e9cd 4500 	strd	r4, r5, [sp]
   13f2a:	b947      	cbnz	r7, 13f3e <_dtoa_r+0x2e>
   13f2c:	2010      	movs	r0, #16
   13f2e:	f01d f96f 	bl	31210 <malloc>
   13f32:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
   13f36:	6007      	str	r7, [r0, #0]
   13f38:	60c7      	str	r7, [r0, #12]
   13f3a:	e9c0 7701 	strd	r7, r7, [r0, #4]
   13f3e:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   13f42:	6819      	ldr	r1, [r3, #0]
   13f44:	b159      	cbz	r1, 13f5e <_dtoa_r+0x4e>
   13f46:	685a      	ldr	r2, [r3, #4]
   13f48:	2301      	movs	r3, #1
   13f4a:	4658      	mov	r0, fp
   13f4c:	4093      	lsls	r3, r2
   13f4e:	604a      	str	r2, [r1, #4]
   13f50:	608b      	str	r3, [r1, #8]
   13f52:	f025 fb1b 	bl	3958c <_Bfree>
   13f56:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   13f5a:	2200      	movs	r2, #0
   13f5c:	601a      	str	r2, [r3, #0]
   13f5e:	1e2b      	subs	r3, r5, #0
   13f60:	bfb7      	itett	lt
   13f62:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
   13f66:	2300      	movge	r3, #0
   13f68:	2201      	movlt	r2, #1
   13f6a:	9301      	strlt	r3, [sp, #4]
   13f6c:	bfa8      	it	ge
   13f6e:	6033      	strge	r3, [r6, #0]
   13f70:	9c01      	ldr	r4, [sp, #4]
   13f72:	4bb1      	ldr	r3, [pc, #708]	; (14238 <_dtoa_r+0x328>)
   13f74:	bfb8      	it	lt
   13f76:	6032      	strlt	r2, [r6, #0]
   13f78:	43a3      	bics	r3, r4
   13f7a:	d11a      	bne.n	13fb2 <_dtoa_r+0xa2>
   13f7c:	f242 730f 	movw	r3, #9999	; 0x270f
   13f80:	9a14      	ldr	r2, [sp, #80]	; 0x50
   13f82:	6013      	str	r3, [r2, #0]
   13f84:	f3c4 0313 	ubfx	r3, r4, #0, #20
   13f88:	9a00      	ldr	r2, [sp, #0]
   13f8a:	4313      	orrs	r3, r2
   13f8c:	f000 8547 	beq.w	14a1e <_dtoa_r+0xb0e>
   13f90:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   13f92:	b953      	cbnz	r3, 13faa <_dtoa_r+0x9a>
   13f94:	4ba9      	ldr	r3, [pc, #676]	; (1423c <_dtoa_r+0x32c>)
   13f96:	e023      	b.n	13fe0 <_dtoa_r+0xd0>
   13f98:	4ba9      	ldr	r3, [pc, #676]	; (14240 <_dtoa_r+0x330>)
   13f9a:	9303      	str	r3, [sp, #12]
   13f9c:	3308      	adds	r3, #8
   13f9e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   13fa0:	6013      	str	r3, [r2, #0]
   13fa2:	9803      	ldr	r0, [sp, #12]
   13fa4:	b019      	add	sp, #100	; 0x64
   13fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13faa:	4ba4      	ldr	r3, [pc, #656]	; (1423c <_dtoa_r+0x32c>)
   13fac:	9303      	str	r3, [sp, #12]
   13fae:	3303      	adds	r3, #3
   13fb0:	e7f5      	b.n	13f9e <_dtoa_r+0x8e>
   13fb2:	ed9d 7b00 	vldr	d7, [sp]
   13fb6:	2200      	movs	r2, #0
   13fb8:	2300      	movs	r3, #0
   13fba:	ec51 0b17 	vmov	r0, r1, d7
   13fbe:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   13fc2:	f7f9 fadb 	bl	d57c <__aeabi_dcmpeq>
   13fc6:	4607      	mov	r7, r0
   13fc8:	b160      	cbz	r0, 13fe4 <_dtoa_r+0xd4>
   13fca:	2301      	movs	r3, #1
   13fcc:	9a14      	ldr	r2, [sp, #80]	; 0x50
   13fce:	6013      	str	r3, [r2, #0]
   13fd0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   13fd2:	2b00      	cmp	r3, #0
   13fd4:	f000 8520 	beq.w	14a18 <_dtoa_r+0xb08>
   13fd8:	4b9a      	ldr	r3, [pc, #616]	; (14244 <_dtoa_r+0x334>)
   13fda:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   13fdc:	6013      	str	r3, [r2, #0]
   13fde:	3b01      	subs	r3, #1
   13fe0:	9303      	str	r3, [sp, #12]
   13fe2:	e7de      	b.n	13fa2 <_dtoa_r+0x92>
   13fe4:	f3c4 560a 	ubfx	r6, r4, #20, #11
   13fe8:	aa16      	add	r2, sp, #88	; 0x58
   13fea:	a917      	add	r1, sp, #92	; 0x5c
   13fec:	4658      	mov	r0, fp
   13fee:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
   13ff2:	f025 fcd4 	bl	3999e <__d2b>
   13ff6:	4680      	mov	r8, r0
   13ff8:	2e00      	cmp	r6, #0
   13ffa:	d07d      	beq.n	140f8 <_dtoa_r+0x1e8>
   13ffc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   13ffe:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
   14002:	9715      	str	r7, [sp, #84]	; 0x54
   14004:	f3c3 0313 	ubfx	r3, r3, #0, #20
   14008:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
   1400c:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
   14010:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   14014:	2200      	movs	r2, #0
   14016:	4b8c      	ldr	r3, [pc, #560]	; (14248 <_dtoa_r+0x338>)
   14018:	4620      	mov	r0, r4
   1401a:	4629      	mov	r1, r5
   1401c:	f7f8 fe8e 	bl	cd3c <__aeabi_dsub>
   14020:	a37f      	add	r3, pc, #508	; (adr r3, 14220 <_dtoa_r+0x310>)
   14022:	e9d3 2300 	ldrd	r2, r3, [r3]
   14026:	f7f9 f841 	bl	d0ac <__aeabi_dmul>
   1402a:	a37f      	add	r3, pc, #508	; (adr r3, 14228 <_dtoa_r+0x318>)
   1402c:	e9d3 2300 	ldrd	r2, r3, [r3]
   14030:	f7f8 fe86 	bl	cd40 <__adddf3>
   14034:	4604      	mov	r4, r0
   14036:	460d      	mov	r5, r1
   14038:	4630      	mov	r0, r6
   1403a:	f7f8 ffcd 	bl	cfd8 <__aeabi_i2d>
   1403e:	a37c      	add	r3, pc, #496	; (adr r3, 14230 <_dtoa_r+0x320>)
   14040:	e9d3 2300 	ldrd	r2, r3, [r3]
   14044:	f7f9 f832 	bl	d0ac <__aeabi_dmul>
   14048:	4602      	mov	r2, r0
   1404a:	460b      	mov	r3, r1
   1404c:	4620      	mov	r0, r4
   1404e:	4629      	mov	r1, r5
   14050:	f7f8 fe76 	bl	cd40 <__adddf3>
   14054:	4604      	mov	r4, r0
   14056:	460d      	mov	r5, r1
   14058:	f7f9 fac2 	bl	d5e0 <__aeabi_d2iz>
   1405c:	2200      	movs	r2, #0
   1405e:	4682      	mov	sl, r0
   14060:	2300      	movs	r3, #0
   14062:	4620      	mov	r0, r4
   14064:	4629      	mov	r1, r5
   14066:	f7f9 fa93 	bl	d590 <__aeabi_dcmplt>
   1406a:	b148      	cbz	r0, 14080 <_dtoa_r+0x170>
   1406c:	4650      	mov	r0, sl
   1406e:	f7f8 ffb3 	bl	cfd8 <__aeabi_i2d>
   14072:	4622      	mov	r2, r4
   14074:	462b      	mov	r3, r5
   14076:	f7f9 fa81 	bl	d57c <__aeabi_dcmpeq>
   1407a:	b908      	cbnz	r0, 14080 <_dtoa_r+0x170>
   1407c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   14080:	f1ba 0f16 	cmp.w	sl, #22
   14084:	d857      	bhi.n	14136 <_dtoa_r+0x226>
   14086:	4b71      	ldr	r3, [pc, #452]	; (1424c <_dtoa_r+0x33c>)
   14088:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   1408c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   14090:	e9d3 2300 	ldrd	r2, r3, [r3]
   14094:	f7f9 fa7c 	bl	d590 <__aeabi_dcmplt>
   14098:	2800      	cmp	r0, #0
   1409a:	d04e      	beq.n	1413a <_dtoa_r+0x22a>
   1409c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   140a0:	2300      	movs	r3, #0
   140a2:	9311      	str	r3, [sp, #68]	; 0x44
   140a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   140a6:	1b9e      	subs	r6, r3, r6
   140a8:	1e73      	subs	r3, r6, #1
   140aa:	9307      	str	r3, [sp, #28]
   140ac:	bf49      	itett	mi
   140ae:	f1c6 0301 	rsbmi	r3, r6, #1
   140b2:	2300      	movpl	r3, #0
   140b4:	9306      	strmi	r3, [sp, #24]
   140b6:	2300      	movmi	r3, #0
   140b8:	bf54      	ite	pl
   140ba:	9306      	strpl	r3, [sp, #24]
   140bc:	9307      	strmi	r3, [sp, #28]
   140be:	f1ba 0f00 	cmp.w	sl, #0
   140c2:	db3c      	blt.n	1413e <_dtoa_r+0x22e>
   140c4:	9b07      	ldr	r3, [sp, #28]
   140c6:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
   140ca:	4453      	add	r3, sl
   140cc:	9307      	str	r3, [sp, #28]
   140ce:	2300      	movs	r3, #0
   140d0:	9309      	str	r3, [sp, #36]	; 0x24
   140d2:	9b08      	ldr	r3, [sp, #32]
   140d4:	2b09      	cmp	r3, #9
   140d6:	f200 808d 	bhi.w	141f4 <_dtoa_r+0x2e4>
   140da:	2b05      	cmp	r3, #5
   140dc:	bfc5      	ittet	gt
   140de:	3b04      	subgt	r3, #4
   140e0:	2400      	movgt	r4, #0
   140e2:	2401      	movle	r4, #1
   140e4:	9308      	strgt	r3, [sp, #32]
   140e6:	9b08      	ldr	r3, [sp, #32]
   140e8:	3b02      	subs	r3, #2
   140ea:	2b03      	cmp	r3, #3
   140ec:	f200 808d 	bhi.w	1420a <_dtoa_r+0x2fa>
   140f0:	e8df f003 	tbb	[pc, r3]
   140f4:	7e3a3c2f 	.word	0x7e3a3c2f
   140f8:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	; 0x58
   140fc:	441e      	add	r6, r3
   140fe:	f206 4032 	addw	r0, r6, #1074	; 0x432
   14102:	2820      	cmp	r0, #32
   14104:	dd11      	ble.n	1412a <_dtoa_r+0x21a>
   14106:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
   1410a:	9b00      	ldr	r3, [sp, #0]
   1410c:	4084      	lsls	r4, r0
   1410e:	f206 4012 	addw	r0, r6, #1042	; 0x412
   14112:	fa23 f000 	lsr.w	r0, r3, r0
   14116:	4320      	orrs	r0, r4
   14118:	f7f8 ff4e 	bl	cfb8 <__aeabi_ui2d>
   1411c:	2301      	movs	r3, #1
   1411e:	4604      	mov	r4, r0
   14120:	f1a1 75f8 	sub.w	r5, r1, #32505856	; 0x1f00000
   14124:	3e01      	subs	r6, #1
   14126:	9315      	str	r3, [sp, #84]	; 0x54
   14128:	e774      	b.n	14014 <_dtoa_r+0x104>
   1412a:	f1c0 0020 	rsb	r0, r0, #32
   1412e:	9b00      	ldr	r3, [sp, #0]
   14130:	fa03 f000 	lsl.w	r0, r3, r0
   14134:	e7f0      	b.n	14118 <_dtoa_r+0x208>
   14136:	2301      	movs	r3, #1
   14138:	e7b3      	b.n	140a2 <_dtoa_r+0x192>
   1413a:	9011      	str	r0, [sp, #68]	; 0x44
   1413c:	e7b2      	b.n	140a4 <_dtoa_r+0x194>
   1413e:	9b06      	ldr	r3, [sp, #24]
   14140:	eba3 030a 	sub.w	r3, r3, sl
   14144:	9306      	str	r3, [sp, #24]
   14146:	f1ca 0300 	rsb	r3, sl, #0
   1414a:	9309      	str	r3, [sp, #36]	; 0x24
   1414c:	2300      	movs	r3, #0
   1414e:	9310      	str	r3, [sp, #64]	; 0x40
   14150:	e7bf      	b.n	140d2 <_dtoa_r+0x1c2>
   14152:	2300      	movs	r3, #0
   14154:	930c      	str	r3, [sp, #48]	; 0x30
   14156:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14158:	2b00      	cmp	r3, #0
   1415a:	dc59      	bgt.n	14210 <_dtoa_r+0x300>
   1415c:	2301      	movs	r3, #1
   1415e:	4699      	mov	r9, r3
   14160:	461a      	mov	r2, r3
   14162:	9304      	str	r3, [sp, #16]
   14164:	920d      	str	r2, [sp, #52]	; 0x34
   14166:	e00c      	b.n	14182 <_dtoa_r+0x272>
   14168:	2301      	movs	r3, #1
   1416a:	e7f3      	b.n	14154 <_dtoa_r+0x244>
   1416c:	2300      	movs	r3, #0
   1416e:	930c      	str	r3, [sp, #48]	; 0x30
   14170:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14172:	4453      	add	r3, sl
   14174:	f103 0901 	add.w	r9, r3, #1
   14178:	9304      	str	r3, [sp, #16]
   1417a:	464b      	mov	r3, r9
   1417c:	2b01      	cmp	r3, #1
   1417e:	bfb8      	it	lt
   14180:	2301      	movlt	r3, #1
   14182:	2200      	movs	r2, #0
   14184:	f8db 5024 	ldr.w	r5, [fp, #36]	; 0x24
   14188:	606a      	str	r2, [r5, #4]
   1418a:	2204      	movs	r2, #4
   1418c:	f102 0014 	add.w	r0, r2, #20
   14190:	6869      	ldr	r1, [r5, #4]
   14192:	4298      	cmp	r0, r3
   14194:	d940      	bls.n	14218 <_dtoa_r+0x308>
   14196:	4658      	mov	r0, fp
   14198:	f025 f9c4 	bl	39524 <_Balloc>
   1419c:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   141a0:	6028      	str	r0, [r5, #0]
   141a2:	f1b9 0f0e 	cmp.w	r9, #14
   141a6:	681b      	ldr	r3, [r3, #0]
   141a8:	9303      	str	r3, [sp, #12]
   141aa:	f200 80d4 	bhi.w	14356 <_dtoa_r+0x446>
   141ae:	2c00      	cmp	r4, #0
   141b0:	f000 80d1 	beq.w	14356 <_dtoa_r+0x446>
   141b4:	f1ba 0f00 	cmp.w	sl, #0
   141b8:	dd66      	ble.n	14288 <_dtoa_r+0x378>
   141ba:	4a24      	ldr	r2, [pc, #144]	; (1424c <_dtoa_r+0x33c>)
   141bc:	f00a 030f 	and.w	r3, sl, #15
   141c0:	ea4f 142a 	mov.w	r4, sl, asr #4
   141c4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   141c8:	06e2      	lsls	r2, r4, #27
   141ca:	ed93 7b00 	vldr	d7, [r3]
   141ce:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
   141d2:	d557      	bpl.n	14284 <_dtoa_r+0x374>
   141d4:	4b1e      	ldr	r3, [pc, #120]	; (14250 <_dtoa_r+0x340>)
   141d6:	f004 040f 	and.w	r4, r4, #15
   141da:	2603      	movs	r6, #3
   141dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   141e0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   141e4:	f7f9 f88c 	bl	d300 <__aeabi_ddiv>
   141e8:	e9cd 0100 	strd	r0, r1, [sp]
   141ec:	4d18      	ldr	r5, [pc, #96]	; (14250 <_dtoa_r+0x340>)
   141ee:	e03e      	b.n	1426e <_dtoa_r+0x35e>
   141f0:	2301      	movs	r3, #1
   141f2:	e7bc      	b.n	1416e <_dtoa_r+0x25e>
   141f4:	2401      	movs	r4, #1
   141f6:	2300      	movs	r3, #0
   141f8:	940c      	str	r4, [sp, #48]	; 0x30
   141fa:	9308      	str	r3, [sp, #32]
   141fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14200:	2200      	movs	r2, #0
   14202:	9304      	str	r3, [sp, #16]
   14204:	4699      	mov	r9, r3
   14206:	2312      	movs	r3, #18
   14208:	e7ac      	b.n	14164 <_dtoa_r+0x254>
   1420a:	2301      	movs	r3, #1
   1420c:	930c      	str	r3, [sp, #48]	; 0x30
   1420e:	e7f5      	b.n	141fc <_dtoa_r+0x2ec>
   14210:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14212:	9304      	str	r3, [sp, #16]
   14214:	4699      	mov	r9, r3
   14216:	e7b4      	b.n	14182 <_dtoa_r+0x272>
   14218:	3101      	adds	r1, #1
   1421a:	0052      	lsls	r2, r2, #1
   1421c:	6069      	str	r1, [r5, #4]
   1421e:	e7b5      	b.n	1418c <_dtoa_r+0x27c>
   14220:	636f4361 	.word	0x636f4361
   14224:	3fd287a7 	.word	0x3fd287a7
   14228:	8b60c8b3 	.word	0x8b60c8b3
   1422c:	3fc68a28 	.word	0x3fc68a28
   14230:	509f79fb 	.word	0x509f79fb
   14234:	3fd34413 	.word	0x3fd34413
   14238:	7ff00000 	.word	0x7ff00000
   1423c:	00040988 	.word	0x00040988
   14240:	0004097f 	.word	0x0004097f
   14244:	0003fd30 	.word	0x0003fd30
   14248:	3ff80000 	.word	0x3ff80000
   1424c:	0003a160 	.word	0x0003a160
   14250:	0003a138 	.word	0x0003a138
   14254:	07e3      	lsls	r3, r4, #31
   14256:	d508      	bpl.n	1426a <_dtoa_r+0x35a>
   14258:	3601      	adds	r6, #1
   1425a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1425e:	e9d5 2300 	ldrd	r2, r3, [r5]
   14262:	f7f8 ff23 	bl	d0ac <__aeabi_dmul>
   14266:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   1426a:	1064      	asrs	r4, r4, #1
   1426c:	3508      	adds	r5, #8
   1426e:	2c00      	cmp	r4, #0
   14270:	d1f0      	bne.n	14254 <_dtoa_r+0x344>
   14272:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   14276:	e9dd 0100 	ldrd	r0, r1, [sp]
   1427a:	f7f9 f841 	bl	d300 <__aeabi_ddiv>
   1427e:	e9cd 0100 	strd	r0, r1, [sp]
   14282:	e01a      	b.n	142ba <_dtoa_r+0x3aa>
   14284:	2602      	movs	r6, #2
   14286:	e7b1      	b.n	141ec <_dtoa_r+0x2dc>
   14288:	f000 809f 	beq.w	143ca <_dtoa_r+0x4ba>
   1428c:	f1ca 0400 	rsb	r4, sl, #0
   14290:	4b9e      	ldr	r3, [pc, #632]	; (1450c <_dtoa_r+0x5fc>)
   14292:	4d9f      	ldr	r5, [pc, #636]	; (14510 <_dtoa_r+0x600>)
   14294:	2602      	movs	r6, #2
   14296:	f004 020f 	and.w	r2, r4, #15
   1429a:	1124      	asrs	r4, r4, #4
   1429c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   142a0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   142a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   142a8:	f7f8 ff00 	bl	d0ac <__aeabi_dmul>
   142ac:	2300      	movs	r3, #0
   142ae:	e9cd 0100 	strd	r0, r1, [sp]
   142b2:	2c00      	cmp	r4, #0
   142b4:	d17e      	bne.n	143b4 <_dtoa_r+0x4a4>
   142b6:	2b00      	cmp	r3, #0
   142b8:	d1e1      	bne.n	1427e <_dtoa_r+0x36e>
   142ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
   142bc:	2b00      	cmp	r3, #0
   142be:	f000 8086 	beq.w	143ce <_dtoa_r+0x4be>
   142c2:	2200      	movs	r2, #0
   142c4:	4b93      	ldr	r3, [pc, #588]	; (14514 <_dtoa_r+0x604>)
   142c6:	e9dd 4500 	ldrd	r4, r5, [sp]
   142ca:	4620      	mov	r0, r4
   142cc:	4629      	mov	r1, r5
   142ce:	f7f9 f95f 	bl	d590 <__aeabi_dcmplt>
   142d2:	2800      	cmp	r0, #0
   142d4:	d07b      	beq.n	143ce <_dtoa_r+0x4be>
   142d6:	f1b9 0f00 	cmp.w	r9, #0
   142da:	d078      	beq.n	143ce <_dtoa_r+0x4be>
   142dc:	9b04      	ldr	r3, [sp, #16]
   142de:	2b00      	cmp	r3, #0
   142e0:	dd35      	ble.n	1434e <_dtoa_r+0x43e>
   142e2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   142e6:	4620      	mov	r0, r4
   142e8:	2200      	movs	r2, #0
   142ea:	4629      	mov	r1, r5
   142ec:	930a      	str	r3, [sp, #40]	; 0x28
   142ee:	3601      	adds	r6, #1
   142f0:	4b89      	ldr	r3, [pc, #548]	; (14518 <_dtoa_r+0x608>)
   142f2:	f7f8 fedb 	bl	d0ac <__aeabi_dmul>
   142f6:	9c04      	ldr	r4, [sp, #16]
   142f8:	e9cd 0100 	strd	r0, r1, [sp]
   142fc:	4630      	mov	r0, r6
   142fe:	f7f8 fe6b 	bl	cfd8 <__aeabi_i2d>
   14302:	e9dd 2300 	ldrd	r2, r3, [sp]
   14306:	f7f8 fed1 	bl	d0ac <__aeabi_dmul>
   1430a:	2200      	movs	r2, #0
   1430c:	4b83      	ldr	r3, [pc, #524]	; (1451c <_dtoa_r+0x60c>)
   1430e:	f7f8 fd17 	bl	cd40 <__adddf3>
   14312:	4606      	mov	r6, r0
   14314:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
   14318:	2c00      	cmp	r4, #0
   1431a:	d15c      	bne.n	143d6 <_dtoa_r+0x4c6>
   1431c:	2200      	movs	r2, #0
   1431e:	4b80      	ldr	r3, [pc, #512]	; (14520 <_dtoa_r+0x610>)
   14320:	e9dd 0100 	ldrd	r0, r1, [sp]
   14324:	f7f8 fd0a 	bl	cd3c <__aeabi_dsub>
   14328:	4632      	mov	r2, r6
   1432a:	463b      	mov	r3, r7
   1432c:	e9cd 0100 	strd	r0, r1, [sp]
   14330:	f7f9 f94c 	bl	d5cc <__aeabi_dcmpgt>
   14334:	2800      	cmp	r0, #0
   14336:	f040 8289 	bne.w	1484c <_dtoa_r+0x93c>
   1433a:	4632      	mov	r2, r6
   1433c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   14340:	e9dd 0100 	ldrd	r0, r1, [sp]
   14344:	f7f9 f924 	bl	d590 <__aeabi_dcmplt>
   14348:	2800      	cmp	r0, #0
   1434a:	f040 827d 	bne.w	14848 <_dtoa_r+0x938>
   1434e:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
   14352:	e9cd 3400 	strd	r3, r4, [sp]
   14356:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   14358:	2b00      	cmp	r3, #0
   1435a:	f2c0 814c 	blt.w	145f6 <_dtoa_r+0x6e6>
   1435e:	f1ba 0f0e 	cmp.w	sl, #14
   14362:	f300 8148 	bgt.w	145f6 <_dtoa_r+0x6e6>
   14366:	4b69      	ldr	r3, [pc, #420]	; (1450c <_dtoa_r+0x5fc>)
   14368:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   1436c:	ed93 7b00 	vldr	d7, [r3]
   14370:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14372:	2b00      	cmp	r3, #0
   14374:	ed8d 7b04 	vstr	d7, [sp, #16]
   14378:	f280 80d6 	bge.w	14528 <_dtoa_r+0x618>
   1437c:	f1b9 0f00 	cmp.w	r9, #0
   14380:	f300 80d2 	bgt.w	14528 <_dtoa_r+0x618>
   14384:	f040 825f 	bne.w	14846 <_dtoa_r+0x936>
   14388:	2200      	movs	r2, #0
   1438a:	4b65      	ldr	r3, [pc, #404]	; (14520 <_dtoa_r+0x610>)
   1438c:	464c      	mov	r4, r9
   1438e:	464e      	mov	r6, r9
   14390:	ec51 0b17 	vmov	r0, r1, d7
   14394:	f7f8 fe8a 	bl	d0ac <__aeabi_dmul>
   14398:	e9dd 2300 	ldrd	r2, r3, [sp]
   1439c:	f7f9 f90c 	bl	d5b8 <__aeabi_dcmpge>
   143a0:	2800      	cmp	r0, #0
   143a2:	f040 8238 	bne.w	14816 <_dtoa_r+0x906>
   143a6:	9d03      	ldr	r5, [sp, #12]
   143a8:	2331      	movs	r3, #49	; 0x31
   143aa:	f10a 0a01 	add.w	sl, sl, #1
   143ae:	f805 3b01 	strb.w	r3, [r5], #1
   143b2:	e234      	b.n	1481e <_dtoa_r+0x90e>
   143b4:	07e7      	lsls	r7, r4, #31
   143b6:	d505      	bpl.n	143c4 <_dtoa_r+0x4b4>
   143b8:	3601      	adds	r6, #1
   143ba:	e9d5 2300 	ldrd	r2, r3, [r5]
   143be:	f7f8 fe75 	bl	d0ac <__aeabi_dmul>
   143c2:	2301      	movs	r3, #1
   143c4:	1064      	asrs	r4, r4, #1
   143c6:	3508      	adds	r5, #8
   143c8:	e773      	b.n	142b2 <_dtoa_r+0x3a2>
   143ca:	2602      	movs	r6, #2
   143cc:	e775      	b.n	142ba <_dtoa_r+0x3aa>
   143ce:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   143d2:	464c      	mov	r4, r9
   143d4:	e792      	b.n	142fc <_dtoa_r+0x3ec>
   143d6:	4b4d      	ldr	r3, [pc, #308]	; (1450c <_dtoa_r+0x5fc>)
   143d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   143dc:	e953 0102 	ldrd	r0, r1, [r3, #-8]
   143e0:	9b03      	ldr	r3, [sp, #12]
   143e2:	441c      	add	r4, r3
   143e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   143e6:	2b00      	cmp	r3, #0
   143e8:	d046      	beq.n	14478 <_dtoa_r+0x568>
   143ea:	4602      	mov	r2, r0
   143ec:	460b      	mov	r3, r1
   143ee:	2000      	movs	r0, #0
   143f0:	494c      	ldr	r1, [pc, #304]	; (14524 <_dtoa_r+0x614>)
   143f2:	f7f8 ff85 	bl	d300 <__aeabi_ddiv>
   143f6:	4632      	mov	r2, r6
   143f8:	463b      	mov	r3, r7
   143fa:	f7f8 fc9f 	bl	cd3c <__aeabi_dsub>
   143fe:	9d03      	ldr	r5, [sp, #12]
   14400:	4606      	mov	r6, r0
   14402:	460f      	mov	r7, r1
   14404:	e9dd 0100 	ldrd	r0, r1, [sp]
   14408:	f7f9 f8ea 	bl	d5e0 <__aeabi_d2iz>
   1440c:	9012      	str	r0, [sp, #72]	; 0x48
   1440e:	f7f8 fde3 	bl	cfd8 <__aeabi_i2d>
   14412:	4602      	mov	r2, r0
   14414:	460b      	mov	r3, r1
   14416:	e9dd 0100 	ldrd	r0, r1, [sp]
   1441a:	f7f8 fc8f 	bl	cd3c <__aeabi_dsub>
   1441e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   14420:	4632      	mov	r2, r6
   14422:	3330      	adds	r3, #48	; 0x30
   14424:	f805 3b01 	strb.w	r3, [r5], #1
   14428:	463b      	mov	r3, r7
   1442a:	e9cd 0100 	strd	r0, r1, [sp]
   1442e:	f7f9 f8af 	bl	d590 <__aeabi_dcmplt>
   14432:	2800      	cmp	r0, #0
   14434:	d15f      	bne.n	144f6 <_dtoa_r+0x5e6>
   14436:	2000      	movs	r0, #0
   14438:	4936      	ldr	r1, [pc, #216]	; (14514 <_dtoa_r+0x604>)
   1443a:	e9dd 2300 	ldrd	r2, r3, [sp]
   1443e:	f7f8 fc7d 	bl	cd3c <__aeabi_dsub>
   14442:	4632      	mov	r2, r6
   14444:	463b      	mov	r3, r7
   14446:	f7f9 f8a3 	bl	d590 <__aeabi_dcmplt>
   1444a:	2800      	cmp	r0, #0
   1444c:	f040 80b2 	bne.w	145b4 <_dtoa_r+0x6a4>
   14450:	42a5      	cmp	r5, r4
   14452:	f43f af7c 	beq.w	1434e <_dtoa_r+0x43e>
   14456:	2200      	movs	r2, #0
   14458:	4b2f      	ldr	r3, [pc, #188]	; (14518 <_dtoa_r+0x608>)
   1445a:	4630      	mov	r0, r6
   1445c:	4639      	mov	r1, r7
   1445e:	f7f8 fe25 	bl	d0ac <__aeabi_dmul>
   14462:	2200      	movs	r2, #0
   14464:	4606      	mov	r6, r0
   14466:	460f      	mov	r7, r1
   14468:	4b2b      	ldr	r3, [pc, #172]	; (14518 <_dtoa_r+0x608>)
   1446a:	e9dd 0100 	ldrd	r0, r1, [sp]
   1446e:	f7f8 fe1d 	bl	d0ac <__aeabi_dmul>
   14472:	e9cd 0100 	strd	r0, r1, [sp]
   14476:	e7c5      	b.n	14404 <_dtoa_r+0x4f4>
   14478:	4632      	mov	r2, r6
   1447a:	463b      	mov	r3, r7
   1447c:	f7f8 fe16 	bl	d0ac <__aeabi_dmul>
   14480:	4625      	mov	r5, r4
   14482:	9e03      	ldr	r6, [sp, #12]
   14484:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   14488:	e9dd 0100 	ldrd	r0, r1, [sp]
   1448c:	f7f9 f8a8 	bl	d5e0 <__aeabi_d2iz>
   14490:	4607      	mov	r7, r0
   14492:	f7f8 fda1 	bl	cfd8 <__aeabi_i2d>
   14496:	4602      	mov	r2, r0
   14498:	3730      	adds	r7, #48	; 0x30
   1449a:	460b      	mov	r3, r1
   1449c:	e9dd 0100 	ldrd	r0, r1, [sp]
   144a0:	f7f8 fc4c 	bl	cd3c <__aeabi_dsub>
   144a4:	f806 7b01 	strb.w	r7, [r6], #1
   144a8:	42a6      	cmp	r6, r4
   144aa:	f04f 0200 	mov.w	r2, #0
   144ae:	e9cd 0100 	strd	r0, r1, [sp]
   144b2:	d125      	bne.n	14500 <_dtoa_r+0x5f0>
   144b4:	4b1b      	ldr	r3, [pc, #108]	; (14524 <_dtoa_r+0x614>)
   144b6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   144ba:	f7f8 fc41 	bl	cd40 <__adddf3>
   144be:	4602      	mov	r2, r0
   144c0:	460b      	mov	r3, r1
   144c2:	e9dd 0100 	ldrd	r0, r1, [sp]
   144c6:	f7f9 f881 	bl	d5cc <__aeabi_dcmpgt>
   144ca:	2800      	cmp	r0, #0
   144cc:	d172      	bne.n	145b4 <_dtoa_r+0x6a4>
   144ce:	2000      	movs	r0, #0
   144d0:	4914      	ldr	r1, [pc, #80]	; (14524 <_dtoa_r+0x614>)
   144d2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   144d6:	f7f8 fc31 	bl	cd3c <__aeabi_dsub>
   144da:	4602      	mov	r2, r0
   144dc:	460b      	mov	r3, r1
   144de:	e9dd 0100 	ldrd	r0, r1, [sp]
   144e2:	f7f9 f855 	bl	d590 <__aeabi_dcmplt>
   144e6:	2800      	cmp	r0, #0
   144e8:	f43f af31 	beq.w	1434e <_dtoa_r+0x43e>
   144ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   144f0:	1e6a      	subs	r2, r5, #1
   144f2:	2b30      	cmp	r3, #48	; 0x30
   144f4:	d002      	beq.n	144fc <_dtoa_r+0x5ec>
   144f6:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   144fa:	e049      	b.n	14590 <_dtoa_r+0x680>
   144fc:	4615      	mov	r5, r2
   144fe:	e7f5      	b.n	144ec <_dtoa_r+0x5dc>
   14500:	4b05      	ldr	r3, [pc, #20]	; (14518 <_dtoa_r+0x608>)
   14502:	f7f8 fdd3 	bl	d0ac <__aeabi_dmul>
   14506:	e9cd 0100 	strd	r0, r1, [sp]
   1450a:	e7bd      	b.n	14488 <_dtoa_r+0x578>
   1450c:	0003a160 	.word	0x0003a160
   14510:	0003a138 	.word	0x0003a138
   14514:	3ff00000 	.word	0x3ff00000
   14518:	40240000 	.word	0x40240000
   1451c:	401c0000 	.word	0x401c0000
   14520:	40140000 	.word	0x40140000
   14524:	3fe00000 	.word	0x3fe00000
   14528:	e9dd 6700 	ldrd	r6, r7, [sp]
   1452c:	9d03      	ldr	r5, [sp, #12]
   1452e:	4630      	mov	r0, r6
   14530:	4639      	mov	r1, r7
   14532:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   14536:	f7f8 fee3 	bl	d300 <__aeabi_ddiv>
   1453a:	f7f9 f851 	bl	d5e0 <__aeabi_d2iz>
   1453e:	4604      	mov	r4, r0
   14540:	f7f8 fd4a 	bl	cfd8 <__aeabi_i2d>
   14544:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   14548:	f7f8 fdb0 	bl	d0ac <__aeabi_dmul>
   1454c:	4602      	mov	r2, r0
   1454e:	4630      	mov	r0, r6
   14550:	f104 0630 	add.w	r6, r4, #48	; 0x30
   14554:	460b      	mov	r3, r1
   14556:	4639      	mov	r1, r7
   14558:	f7f8 fbf0 	bl	cd3c <__aeabi_dsub>
   1455c:	f805 6b01 	strb.w	r6, [r5], #1
   14560:	9e03      	ldr	r6, [sp, #12]
   14562:	4602      	mov	r2, r0
   14564:	460b      	mov	r3, r1
   14566:	1bae      	subs	r6, r5, r6
   14568:	45b1      	cmp	r9, r6
   1456a:	d137      	bne.n	145dc <_dtoa_r+0x6cc>
   1456c:	f7f8 fbe8 	bl	cd40 <__adddf3>
   14570:	4606      	mov	r6, r0
   14572:	460f      	mov	r7, r1
   14574:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   14578:	f7f9 f828 	bl	d5cc <__aeabi_dcmpgt>
   1457c:	b9c0      	cbnz	r0, 145b0 <_dtoa_r+0x6a0>
   1457e:	4630      	mov	r0, r6
   14580:	4639      	mov	r1, r7
   14582:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   14586:	f7f8 fff9 	bl	d57c <__aeabi_dcmpeq>
   1458a:	b108      	cbz	r0, 14590 <_dtoa_r+0x680>
   1458c:	07e1      	lsls	r1, r4, #31
   1458e:	d40f      	bmi.n	145b0 <_dtoa_r+0x6a0>
   14590:	4641      	mov	r1, r8
   14592:	4658      	mov	r0, fp
   14594:	f024 fffa 	bl	3958c <_Bfree>
   14598:	2300      	movs	r3, #0
   1459a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1459c:	702b      	strb	r3, [r5, #0]
   1459e:	f10a 0301 	add.w	r3, sl, #1
   145a2:	6013      	str	r3, [r2, #0]
   145a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   145a6:	2b00      	cmp	r3, #0
   145a8:	f43f acfb 	beq.w	13fa2 <_dtoa_r+0x92>
   145ac:	601d      	str	r5, [r3, #0]
   145ae:	e4f8      	b.n	13fa2 <_dtoa_r+0x92>
   145b0:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   145b4:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   145b8:	1e6b      	subs	r3, r5, #1
   145ba:	2a39      	cmp	r2, #57	; 0x39
   145bc:	d108      	bne.n	145d0 <_dtoa_r+0x6c0>
   145be:	9a03      	ldr	r2, [sp, #12]
   145c0:	429a      	cmp	r2, r3
   145c2:	d109      	bne.n	145d8 <_dtoa_r+0x6c8>
   145c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   145c6:	9903      	ldr	r1, [sp, #12]
   145c8:	3201      	adds	r2, #1
   145ca:	920a      	str	r2, [sp, #40]	; 0x28
   145cc:	2230      	movs	r2, #48	; 0x30
   145ce:	700a      	strb	r2, [r1, #0]
   145d0:	781a      	ldrb	r2, [r3, #0]
   145d2:	3201      	adds	r2, #1
   145d4:	701a      	strb	r2, [r3, #0]
   145d6:	e78e      	b.n	144f6 <_dtoa_r+0x5e6>
   145d8:	461d      	mov	r5, r3
   145da:	e7eb      	b.n	145b4 <_dtoa_r+0x6a4>
   145dc:	2200      	movs	r2, #0
   145de:	4b9d      	ldr	r3, [pc, #628]	; (14854 <_dtoa_r+0x944>)
   145e0:	f7f8 fd64 	bl	d0ac <__aeabi_dmul>
   145e4:	2200      	movs	r2, #0
   145e6:	2300      	movs	r3, #0
   145e8:	4606      	mov	r6, r0
   145ea:	460f      	mov	r7, r1
   145ec:	f7f8 ffc6 	bl	d57c <__aeabi_dcmpeq>
   145f0:	2800      	cmp	r0, #0
   145f2:	d09c      	beq.n	1452e <_dtoa_r+0x61e>
   145f4:	e7cc      	b.n	14590 <_dtoa_r+0x680>
   145f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   145f8:	2a00      	cmp	r2, #0
   145fa:	f000 80cb 	beq.w	14794 <_dtoa_r+0x884>
   145fe:	9a08      	ldr	r2, [sp, #32]
   14600:	2a01      	cmp	r2, #1
   14602:	f300 80ae 	bgt.w	14762 <_dtoa_r+0x852>
   14606:	9a15      	ldr	r2, [sp, #84]	; 0x54
   14608:	2a00      	cmp	r2, #0
   1460a:	f000 80a6 	beq.w	1475a <_dtoa_r+0x84a>
   1460e:	f203 4333 	addw	r3, r3, #1075	; 0x433
   14612:	9c09      	ldr	r4, [sp, #36]	; 0x24
   14614:	9d06      	ldr	r5, [sp, #24]
   14616:	9a06      	ldr	r2, [sp, #24]
   14618:	2101      	movs	r1, #1
   1461a:	4658      	mov	r0, fp
   1461c:	441a      	add	r2, r3
   1461e:	9206      	str	r2, [sp, #24]
   14620:	9a07      	ldr	r2, [sp, #28]
   14622:	441a      	add	r2, r3
   14624:	9207      	str	r2, [sp, #28]
   14626:	f025 f855 	bl	396d4 <__i2b>
   1462a:	4606      	mov	r6, r0
   1462c:	2d00      	cmp	r5, #0
   1462e:	dd0c      	ble.n	1464a <_dtoa_r+0x73a>
   14630:	9b07      	ldr	r3, [sp, #28]
   14632:	2b00      	cmp	r3, #0
   14634:	dd09      	ble.n	1464a <_dtoa_r+0x73a>
   14636:	42ab      	cmp	r3, r5
   14638:	9a06      	ldr	r2, [sp, #24]
   1463a:	bfa8      	it	ge
   1463c:	462b      	movge	r3, r5
   1463e:	1ad2      	subs	r2, r2, r3
   14640:	1aed      	subs	r5, r5, r3
   14642:	9206      	str	r2, [sp, #24]
   14644:	9a07      	ldr	r2, [sp, #28]
   14646:	1ad3      	subs	r3, r2, r3
   14648:	9307      	str	r3, [sp, #28]
   1464a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1464c:	b1f3      	cbz	r3, 1468c <_dtoa_r+0x77c>
   1464e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14650:	2b00      	cmp	r3, #0
   14652:	f000 80a3 	beq.w	1479c <_dtoa_r+0x88c>
   14656:	2c00      	cmp	r4, #0
   14658:	dd10      	ble.n	1467c <_dtoa_r+0x76c>
   1465a:	4631      	mov	r1, r6
   1465c:	4622      	mov	r2, r4
   1465e:	4658      	mov	r0, fp
   14660:	f01e f8fc 	bl	3285c <__pow5mult>
   14664:	4642      	mov	r2, r8
   14666:	4601      	mov	r1, r0
   14668:	4606      	mov	r6, r0
   1466a:	4658      	mov	r0, fp
   1466c:	f025 f83b 	bl	396e6 <__multiply>
   14670:	4607      	mov	r7, r0
   14672:	4641      	mov	r1, r8
   14674:	4658      	mov	r0, fp
   14676:	46b8      	mov	r8, r7
   14678:	f024 ff88 	bl	3958c <_Bfree>
   1467c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1467e:	1b1a      	subs	r2, r3, r4
   14680:	d004      	beq.n	1468c <_dtoa_r+0x77c>
   14682:	4641      	mov	r1, r8
   14684:	4658      	mov	r0, fp
   14686:	f01e f8e9 	bl	3285c <__pow5mult>
   1468a:	4680      	mov	r8, r0
   1468c:	2101      	movs	r1, #1
   1468e:	4658      	mov	r0, fp
   14690:	f025 f820 	bl	396d4 <__i2b>
   14694:	9b10      	ldr	r3, [sp, #64]	; 0x40
   14696:	4604      	mov	r4, r0
   14698:	2b00      	cmp	r3, #0
   1469a:	f340 8081 	ble.w	147a0 <_dtoa_r+0x890>
   1469e:	461a      	mov	r2, r3
   146a0:	4601      	mov	r1, r0
   146a2:	4658      	mov	r0, fp
   146a4:	f01e f8da 	bl	3285c <__pow5mult>
   146a8:	9b08      	ldr	r3, [sp, #32]
   146aa:	4604      	mov	r4, r0
   146ac:	2b01      	cmp	r3, #1
   146ae:	dd7a      	ble.n	147a6 <_dtoa_r+0x896>
   146b0:	2700      	movs	r7, #0
   146b2:	6923      	ldr	r3, [r4, #16]
   146b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   146b8:	6918      	ldr	r0, [r3, #16]
   146ba:	f024 ffbb 	bl	39634 <__hi0bits>
   146be:	f1c0 0020 	rsb	r0, r0, #32
   146c2:	9b07      	ldr	r3, [sp, #28]
   146c4:	4418      	add	r0, r3
   146c6:	f010 001f 	ands.w	r0, r0, #31
   146ca:	f000 808b 	beq.w	147e4 <_dtoa_r+0x8d4>
   146ce:	f1c0 0320 	rsb	r3, r0, #32
   146d2:	2b04      	cmp	r3, #4
   146d4:	f340 8084 	ble.w	147e0 <_dtoa_r+0x8d0>
   146d8:	f1c0 001c 	rsb	r0, r0, #28
   146dc:	9b06      	ldr	r3, [sp, #24]
   146de:	4405      	add	r5, r0
   146e0:	4403      	add	r3, r0
   146e2:	9306      	str	r3, [sp, #24]
   146e4:	9b07      	ldr	r3, [sp, #28]
   146e6:	4403      	add	r3, r0
   146e8:	9307      	str	r3, [sp, #28]
   146ea:	9b06      	ldr	r3, [sp, #24]
   146ec:	2b00      	cmp	r3, #0
   146ee:	dd05      	ble.n	146fc <_dtoa_r+0x7ec>
   146f0:	4641      	mov	r1, r8
   146f2:	461a      	mov	r2, r3
   146f4:	4658      	mov	r0, fp
   146f6:	f025 f885 	bl	39804 <__lshift>
   146fa:	4680      	mov	r8, r0
   146fc:	9b07      	ldr	r3, [sp, #28]
   146fe:	2b00      	cmp	r3, #0
   14700:	dd05      	ble.n	1470e <_dtoa_r+0x7fe>
   14702:	4621      	mov	r1, r4
   14704:	461a      	mov	r2, r3
   14706:	4658      	mov	r0, fp
   14708:	f025 f87c 	bl	39804 <__lshift>
   1470c:	4604      	mov	r4, r0
   1470e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   14710:	2b00      	cmp	r3, #0
   14712:	d069      	beq.n	147e8 <_dtoa_r+0x8d8>
   14714:	4621      	mov	r1, r4
   14716:	4640      	mov	r0, r8
   14718:	f025 f8c7 	bl	398aa <__mcmp>
   1471c:	2800      	cmp	r0, #0
   1471e:	da63      	bge.n	147e8 <_dtoa_r+0x8d8>
   14720:	2300      	movs	r3, #0
   14722:	4641      	mov	r1, r8
   14724:	220a      	movs	r2, #10
   14726:	4658      	mov	r0, fp
   14728:	f024 ff47 	bl	395ba <__multadd>
   1472c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1472e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   14732:	4680      	mov	r8, r0
   14734:	2b00      	cmp	r3, #0
   14736:	f000 8179 	beq.w	14a2c <_dtoa_r+0xb1c>
   1473a:	2300      	movs	r3, #0
   1473c:	4631      	mov	r1, r6
   1473e:	220a      	movs	r2, #10
   14740:	4658      	mov	r0, fp
   14742:	f024 ff3a 	bl	395ba <__multadd>
   14746:	9b04      	ldr	r3, [sp, #16]
   14748:	4606      	mov	r6, r0
   1474a:	2b00      	cmp	r3, #0
   1474c:	f300 808a 	bgt.w	14864 <_dtoa_r+0x954>
   14750:	9b08      	ldr	r3, [sp, #32]
   14752:	2b02      	cmp	r3, #2
   14754:	f340 8086 	ble.w	14864 <_dtoa_r+0x954>
   14758:	e04e      	b.n	147f8 <_dtoa_r+0x8e8>
   1475a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1475c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   14760:	e757      	b.n	14612 <_dtoa_r+0x702>
   14762:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14764:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
   14768:	42a3      	cmp	r3, r4
   1476a:	bfb7      	itett	lt
   1476c:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
   1476e:	1b1c      	subge	r4, r3, r4
   14770:	9409      	strlt	r4, [sp, #36]	; 0x24
   14772:	1ae2      	sublt	r2, r4, r3
   14774:	bfbf      	itttt	lt
   14776:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
   14778:	2400      	movlt	r4, #0
   1477a:	189b      	addlt	r3, r3, r2
   1477c:	9310      	strlt	r3, [sp, #64]	; 0x40
   1477e:	f1b9 0f00 	cmp.w	r9, #0
   14782:	bfb3      	iteet	lt
   14784:	9b06      	ldrlt	r3, [sp, #24]
   14786:	464b      	movge	r3, r9
   14788:	9d06      	ldrge	r5, [sp, #24]
   1478a:	eba3 0509 	sublt.w	r5, r3, r9
   1478e:	bfb8      	it	lt
   14790:	2300      	movlt	r3, #0
   14792:	e740      	b.n	14616 <_dtoa_r+0x706>
   14794:	9c09      	ldr	r4, [sp, #36]	; 0x24
   14796:	9d06      	ldr	r5, [sp, #24]
   14798:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   1479a:	e747      	b.n	1462c <_dtoa_r+0x71c>
   1479c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1479e:	e770      	b.n	14682 <_dtoa_r+0x772>
   147a0:	9b08      	ldr	r3, [sp, #32]
   147a2:	2b01      	cmp	r3, #1
   147a4:	dc18      	bgt.n	147d8 <_dtoa_r+0x8c8>
   147a6:	9b00      	ldr	r3, [sp, #0]
   147a8:	b9b3      	cbnz	r3, 147d8 <_dtoa_r+0x8c8>
   147aa:	9b01      	ldr	r3, [sp, #4]
   147ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
   147b0:	b9a3      	cbnz	r3, 147dc <_dtoa_r+0x8cc>
   147b2:	9b01      	ldr	r3, [sp, #4]
   147b4:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
   147b8:	0d3f      	lsrs	r7, r7, #20
   147ba:	053f      	lsls	r7, r7, #20
   147bc:	b137      	cbz	r7, 147cc <_dtoa_r+0x8bc>
   147be:	9b06      	ldr	r3, [sp, #24]
   147c0:	2701      	movs	r7, #1
   147c2:	3301      	adds	r3, #1
   147c4:	9306      	str	r3, [sp, #24]
   147c6:	9b07      	ldr	r3, [sp, #28]
   147c8:	3301      	adds	r3, #1
   147ca:	9307      	str	r3, [sp, #28]
   147cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   147ce:	2b00      	cmp	r3, #0
   147d0:	f47f af6f 	bne.w	146b2 <_dtoa_r+0x7a2>
   147d4:	2001      	movs	r0, #1
   147d6:	e774      	b.n	146c2 <_dtoa_r+0x7b2>
   147d8:	2700      	movs	r7, #0
   147da:	e7f7      	b.n	147cc <_dtoa_r+0x8bc>
   147dc:	9f00      	ldr	r7, [sp, #0]
   147de:	e7f5      	b.n	147cc <_dtoa_r+0x8bc>
   147e0:	d083      	beq.n	146ea <_dtoa_r+0x7da>
   147e2:	4618      	mov	r0, r3
   147e4:	301c      	adds	r0, #28
   147e6:	e779      	b.n	146dc <_dtoa_r+0x7cc>
   147e8:	f1b9 0f00 	cmp.w	r9, #0
   147ec:	dc34      	bgt.n	14858 <_dtoa_r+0x948>
   147ee:	9b08      	ldr	r3, [sp, #32]
   147f0:	2b02      	cmp	r3, #2
   147f2:	dd31      	ble.n	14858 <_dtoa_r+0x948>
   147f4:	f8cd 9010 	str.w	r9, [sp, #16]
   147f8:	9b04      	ldr	r3, [sp, #16]
   147fa:	b963      	cbnz	r3, 14816 <_dtoa_r+0x906>
   147fc:	4621      	mov	r1, r4
   147fe:	2205      	movs	r2, #5
   14800:	4658      	mov	r0, fp
   14802:	f024 feda 	bl	395ba <__multadd>
   14806:	4601      	mov	r1, r0
   14808:	4604      	mov	r4, r0
   1480a:	4640      	mov	r0, r8
   1480c:	f025 f84d 	bl	398aa <__mcmp>
   14810:	2800      	cmp	r0, #0
   14812:	f73f adc8 	bgt.w	143a6 <_dtoa_r+0x496>
   14816:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14818:	9d03      	ldr	r5, [sp, #12]
   1481a:	ea6f 0a03 	mvn.w	sl, r3
   1481e:	2700      	movs	r7, #0
   14820:	4621      	mov	r1, r4
   14822:	4658      	mov	r0, fp
   14824:	f024 feb2 	bl	3958c <_Bfree>
   14828:	2e00      	cmp	r6, #0
   1482a:	f43f aeb1 	beq.w	14590 <_dtoa_r+0x680>
   1482e:	b12f      	cbz	r7, 1483c <_dtoa_r+0x92c>
   14830:	42b7      	cmp	r7, r6
   14832:	d003      	beq.n	1483c <_dtoa_r+0x92c>
   14834:	4639      	mov	r1, r7
   14836:	4658      	mov	r0, fp
   14838:	f024 fea8 	bl	3958c <_Bfree>
   1483c:	4631      	mov	r1, r6
   1483e:	4658      	mov	r0, fp
   14840:	f024 fea4 	bl	3958c <_Bfree>
   14844:	e6a4      	b.n	14590 <_dtoa_r+0x680>
   14846:	2400      	movs	r4, #0
   14848:	4626      	mov	r6, r4
   1484a:	e7e4      	b.n	14816 <_dtoa_r+0x906>
   1484c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   14850:	4626      	mov	r6, r4
   14852:	e5a8      	b.n	143a6 <_dtoa_r+0x496>
   14854:	40240000 	.word	0x40240000
   14858:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1485a:	f8cd 9010 	str.w	r9, [sp, #16]
   1485e:	2b00      	cmp	r3, #0
   14860:	f000 80eb 	beq.w	14a3a <_dtoa_r+0xb2a>
   14864:	2d00      	cmp	r5, #0
   14866:	dd05      	ble.n	14874 <_dtoa_r+0x964>
   14868:	4631      	mov	r1, r6
   1486a:	462a      	mov	r2, r5
   1486c:	4658      	mov	r0, fp
   1486e:	f024 ffc9 	bl	39804 <__lshift>
   14872:	4606      	mov	r6, r0
   14874:	2f00      	cmp	r7, #0
   14876:	d056      	beq.n	14926 <_dtoa_r+0xa16>
   14878:	6871      	ldr	r1, [r6, #4]
   1487a:	4658      	mov	r0, fp
   1487c:	f024 fe52 	bl	39524 <_Balloc>
   14880:	6932      	ldr	r2, [r6, #16]
   14882:	4605      	mov	r5, r0
   14884:	f106 010c 	add.w	r1, r6, #12
   14888:	3202      	adds	r2, #2
   1488a:	300c      	adds	r0, #12
   1488c:	0092      	lsls	r2, r2, #2
   1488e:	f024 fb98 	bl	38fc2 <memcpy>
   14892:	2201      	movs	r2, #1
   14894:	4629      	mov	r1, r5
   14896:	4658      	mov	r0, fp
   14898:	f024 ffb4 	bl	39804 <__lshift>
   1489c:	9b03      	ldr	r3, [sp, #12]
   1489e:	4637      	mov	r7, r6
   148a0:	4606      	mov	r6, r0
   148a2:	f103 0901 	add.w	r9, r3, #1
   148a6:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
   148aa:	4413      	add	r3, r2
   148ac:	9309      	str	r3, [sp, #36]	; 0x24
   148ae:	9b00      	ldr	r3, [sp, #0]
   148b0:	f003 0301 	and.w	r3, r3, #1
   148b4:	9307      	str	r3, [sp, #28]
   148b6:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   148ba:	4621      	mov	r1, r4
   148bc:	4640      	mov	r0, r8
   148be:	9300      	str	r3, [sp, #0]
   148c0:	f024 fd47 	bl	39352 <quorem>
   148c4:	4603      	mov	r3, r0
   148c6:	9004      	str	r0, [sp, #16]
   148c8:	4639      	mov	r1, r7
   148ca:	4640      	mov	r0, r8
   148cc:	3330      	adds	r3, #48	; 0x30
   148ce:	930a      	str	r3, [sp, #40]	; 0x28
   148d0:	f024 ffeb 	bl	398aa <__mcmp>
   148d4:	4632      	mov	r2, r6
   148d6:	9006      	str	r0, [sp, #24]
   148d8:	4621      	mov	r1, r4
   148da:	4658      	mov	r0, fp
   148dc:	f024 ffff 	bl	398de <__mdiff>
   148e0:	68c2      	ldr	r2, [r0, #12]
   148e2:	4605      	mov	r5, r0
   148e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   148e6:	bb02      	cbnz	r2, 1492a <_dtoa_r+0xa1a>
   148e8:	4601      	mov	r1, r0
   148ea:	4640      	mov	r0, r8
   148ec:	f024 ffdd 	bl	398aa <__mcmp>
   148f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   148f2:	4602      	mov	r2, r0
   148f4:	4629      	mov	r1, r5
   148f6:	4658      	mov	r0, fp
   148f8:	920c      	str	r2, [sp, #48]	; 0x30
   148fa:	464d      	mov	r5, r9
   148fc:	930a      	str	r3, [sp, #40]	; 0x28
   148fe:	f024 fe45 	bl	3958c <_Bfree>
   14902:	9b08      	ldr	r3, [sp, #32]
   14904:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14906:	ea43 0102 	orr.w	r1, r3, r2
   1490a:	9b07      	ldr	r3, [sp, #28]
   1490c:	430b      	orrs	r3, r1
   1490e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14910:	d10d      	bne.n	1492e <_dtoa_r+0xa1e>
   14912:	2b39      	cmp	r3, #57	; 0x39
   14914:	d027      	beq.n	14966 <_dtoa_r+0xa56>
   14916:	9a06      	ldr	r2, [sp, #24]
   14918:	2a00      	cmp	r2, #0
   1491a:	dd01      	ble.n	14920 <_dtoa_r+0xa10>
   1491c:	9b04      	ldr	r3, [sp, #16]
   1491e:	3331      	adds	r3, #49	; 0x31
   14920:	9a00      	ldr	r2, [sp, #0]
   14922:	7013      	strb	r3, [r2, #0]
   14924:	e77c      	b.n	14820 <_dtoa_r+0x910>
   14926:	4630      	mov	r0, r6
   14928:	e7b8      	b.n	1489c <_dtoa_r+0x98c>
   1492a:	2201      	movs	r2, #1
   1492c:	e7e2      	b.n	148f4 <_dtoa_r+0x9e4>
   1492e:	9906      	ldr	r1, [sp, #24]
   14930:	2900      	cmp	r1, #0
   14932:	db04      	blt.n	1493e <_dtoa_r+0xa2e>
   14934:	9808      	ldr	r0, [sp, #32]
   14936:	4301      	orrs	r1, r0
   14938:	9807      	ldr	r0, [sp, #28]
   1493a:	4301      	orrs	r1, r0
   1493c:	d11d      	bne.n	1497a <_dtoa_r+0xa6a>
   1493e:	2a00      	cmp	r2, #0
   14940:	ddee      	ble.n	14920 <_dtoa_r+0xa10>
   14942:	4641      	mov	r1, r8
   14944:	2201      	movs	r2, #1
   14946:	4658      	mov	r0, fp
   14948:	9306      	str	r3, [sp, #24]
   1494a:	f024 ff5b 	bl	39804 <__lshift>
   1494e:	4621      	mov	r1, r4
   14950:	4680      	mov	r8, r0
   14952:	f024 ffaa 	bl	398aa <__mcmp>
   14956:	2800      	cmp	r0, #0
   14958:	9b06      	ldr	r3, [sp, #24]
   1495a:	dc02      	bgt.n	14962 <_dtoa_r+0xa52>
   1495c:	d1e0      	bne.n	14920 <_dtoa_r+0xa10>
   1495e:	07da      	lsls	r2, r3, #31
   14960:	d5de      	bpl.n	14920 <_dtoa_r+0xa10>
   14962:	2b39      	cmp	r3, #57	; 0x39
   14964:	d1da      	bne.n	1491c <_dtoa_r+0xa0c>
   14966:	2339      	movs	r3, #57	; 0x39
   14968:	9a00      	ldr	r2, [sp, #0]
   1496a:	7013      	strb	r3, [r2, #0]
   1496c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   14970:	1e6a      	subs	r2, r5, #1
   14972:	2b39      	cmp	r3, #57	; 0x39
   14974:	d046      	beq.n	14a04 <_dtoa_r+0xaf4>
   14976:	3301      	adds	r3, #1
   14978:	e7d3      	b.n	14922 <_dtoa_r+0xa12>
   1497a:	2a00      	cmp	r2, #0
   1497c:	dd03      	ble.n	14986 <_dtoa_r+0xa76>
   1497e:	2b39      	cmp	r3, #57	; 0x39
   14980:	d0f1      	beq.n	14966 <_dtoa_r+0xa56>
   14982:	3301      	adds	r3, #1
   14984:	e7cc      	b.n	14920 <_dtoa_r+0xa10>
   14986:	9a09      	ldr	r2, [sp, #36]	; 0x24
   14988:	f809 3c01 	strb.w	r3, [r9, #-1]
   1498c:	4591      	cmp	r9, r2
   1498e:	d021      	beq.n	149d4 <_dtoa_r+0xac4>
   14990:	4641      	mov	r1, r8
   14992:	2300      	movs	r3, #0
   14994:	220a      	movs	r2, #10
   14996:	4658      	mov	r0, fp
   14998:	f024 fe0f 	bl	395ba <__multadd>
   1499c:	42b7      	cmp	r7, r6
   1499e:	4680      	mov	r8, r0
   149a0:	f04f 0300 	mov.w	r3, #0
   149a4:	f04f 020a 	mov.w	r2, #10
   149a8:	4639      	mov	r1, r7
   149aa:	4658      	mov	r0, fp
   149ac:	d106      	bne.n	149bc <_dtoa_r+0xaac>
   149ae:	f024 fe04 	bl	395ba <__multadd>
   149b2:	4607      	mov	r7, r0
   149b4:	4606      	mov	r6, r0
   149b6:	f109 0901 	add.w	r9, r9, #1
   149ba:	e77c      	b.n	148b6 <_dtoa_r+0x9a6>
   149bc:	f024 fdfd 	bl	395ba <__multadd>
   149c0:	4631      	mov	r1, r6
   149c2:	4607      	mov	r7, r0
   149c4:	2300      	movs	r3, #0
   149c6:	220a      	movs	r2, #10
   149c8:	4658      	mov	r0, fp
   149ca:	f024 fdf6 	bl	395ba <__multadd>
   149ce:	4606      	mov	r6, r0
   149d0:	e7f1      	b.n	149b6 <_dtoa_r+0xaa6>
   149d2:	2700      	movs	r7, #0
   149d4:	4641      	mov	r1, r8
   149d6:	2201      	movs	r2, #1
   149d8:	4658      	mov	r0, fp
   149da:	9300      	str	r3, [sp, #0]
   149dc:	f024 ff12 	bl	39804 <__lshift>
   149e0:	4621      	mov	r1, r4
   149e2:	4680      	mov	r8, r0
   149e4:	f024 ff61 	bl	398aa <__mcmp>
   149e8:	2800      	cmp	r0, #0
   149ea:	dcbf      	bgt.n	1496c <_dtoa_r+0xa5c>
   149ec:	d102      	bne.n	149f4 <_dtoa_r+0xae4>
   149ee:	9b00      	ldr	r3, [sp, #0]
   149f0:	07db      	lsls	r3, r3, #31
   149f2:	d4bb      	bmi.n	1496c <_dtoa_r+0xa5c>
   149f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   149f8:	1e6a      	subs	r2, r5, #1
   149fa:	2b30      	cmp	r3, #48	; 0x30
   149fc:	f47f af10 	bne.w	14820 <_dtoa_r+0x910>
   14a00:	4615      	mov	r5, r2
   14a02:	e7f7      	b.n	149f4 <_dtoa_r+0xae4>
   14a04:	9b03      	ldr	r3, [sp, #12]
   14a06:	4293      	cmp	r3, r2
   14a08:	d104      	bne.n	14a14 <_dtoa_r+0xb04>
   14a0a:	f10a 0a01 	add.w	sl, sl, #1
   14a0e:	2331      	movs	r3, #49	; 0x31
   14a10:	9a03      	ldr	r2, [sp, #12]
   14a12:	e786      	b.n	14922 <_dtoa_r+0xa12>
   14a14:	4615      	mov	r5, r2
   14a16:	e7a9      	b.n	1496c <_dtoa_r+0xa5c>
   14a18:	4b13      	ldr	r3, [pc, #76]	; (14a68 <_dtoa_r+0xb58>)
   14a1a:	f7ff bae1 	b.w	13fe0 <_dtoa_r+0xd0>
   14a1e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   14a20:	2b00      	cmp	r3, #0
   14a22:	f47f aab9 	bne.w	13f98 <_dtoa_r+0x88>
   14a26:	4b11      	ldr	r3, [pc, #68]	; (14a6c <_dtoa_r+0xb5c>)
   14a28:	f7ff bada 	b.w	13fe0 <_dtoa_r+0xd0>
   14a2c:	9b04      	ldr	r3, [sp, #16]
   14a2e:	2b00      	cmp	r3, #0
   14a30:	dc03      	bgt.n	14a3a <_dtoa_r+0xb2a>
   14a32:	9b08      	ldr	r3, [sp, #32]
   14a34:	2b02      	cmp	r3, #2
   14a36:	f73f aedf 	bgt.w	147f8 <_dtoa_r+0x8e8>
   14a3a:	9d03      	ldr	r5, [sp, #12]
   14a3c:	4621      	mov	r1, r4
   14a3e:	4640      	mov	r0, r8
   14a40:	f024 fc87 	bl	39352 <quorem>
   14a44:	9a03      	ldr	r2, [sp, #12]
   14a46:	f100 0330 	add.w	r3, r0, #48	; 0x30
   14a4a:	9904      	ldr	r1, [sp, #16]
   14a4c:	f805 3b01 	strb.w	r3, [r5], #1
   14a50:	1aaa      	subs	r2, r5, r2
   14a52:	4291      	cmp	r1, r2
   14a54:	ddbd      	ble.n	149d2 <_dtoa_r+0xac2>
   14a56:	4641      	mov	r1, r8
   14a58:	2300      	movs	r3, #0
   14a5a:	220a      	movs	r2, #10
   14a5c:	4658      	mov	r0, fp
   14a5e:	f024 fdac 	bl	395ba <__multadd>
   14a62:	4680      	mov	r8, r0
   14a64:	e7ea      	b.n	14a3c <_dtoa_r+0xb2c>
   14a66:	bf00      	nop
   14a68:	0003fd2f 	.word	0x0003fd2f
   14a6c:	0004097f 	.word	0x0004097f

00014a70 <env_data_ready>:
    LOG_INF("env sens data ready");
   14a70:	2303      	movs	r3, #3
   14a72:	f04f 0000 	mov.w	r0, #0
{
   14a76:	b500      	push	{lr}
    LOG_INF("env sens data ready");
   14a78:	f363 0007 	bfi	r0, r3, #0, #8
   14a7c:	4a1c      	ldr	r2, [pc, #112]	; (14af0 <env_data_ready+0x80>)
   14a7e:	4b1d      	ldr	r3, [pc, #116]	; (14af4 <env_data_ready+0x84>)
{
   14a80:	b09f      	sub	sp, #124	; 0x7c
   14a82:	1a9b      	subs	r3, r3, r2
   14a84:	08db      	lsrs	r3, r3, #3
    LOG_INF("env sens data ready");
   14a86:	f363 108f 	bfi	r0, r3, #6, #10
   14a8a:	491b      	ldr	r1, [pc, #108]	; (14af8 <env_data_ready+0x88>)
   14a8c:	f01f f8a9 	bl	33be2 <log_string_sync>
    if (! env_sensors_get_temperature(&temp)) {
   14a90:	a806      	add	r0, sp, #24
   14a92:	f002 fdff 	bl	17694 <env_sensors_get_temperature>
   14a96:	b920      	cbnz	r0, 14aa2 <env_data_ready+0x32>
        (env_data.t) = (s32_t)temp.value;
   14a98:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   14a9c:	f7f8 fda0 	bl	d5e0 <__aeabi_d2iz>
   14aa0:	9001      	str	r0, [sp, #4]
    if (! env_sensors_get_humidity(&humi)) {
   14aa2:	a80c      	add	r0, sp, #48	; 0x30
   14aa4:	f002 fe4e 	bl	17744 <env_sensors_get_humidity>
   14aa8:	b920      	cbnz	r0, 14ab4 <env_data_ready+0x44>
        (env_data.h) = (s32_t)humi.value;
   14aaa:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   14aae:	f7f8 fd97 	bl	d5e0 <__aeabi_d2iz>
   14ab2:	9002      	str	r0, [sp, #8]
    if (! env_sensors_get_pressure(&pres)) {
   14ab4:	a812      	add	r0, sp, #72	; 0x48
   14ab6:	f002 fe9d 	bl	177f4 <env_sensors_get_pressure>
   14aba:	b920      	cbnz	r0, 14ac6 <env_data_ready+0x56>
        (env_data.p) = (s32_t)pres.value;
   14abc:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   14ac0:	f7f8 fd8e 	bl	d5e0 <__aeabi_d2iz>
   14ac4:	9003      	str	r0, [sp, #12]
    if (! env_sensors_get_air_quality(&qual)) {
   14ac6:	a818      	add	r0, sp, #96	; 0x60
   14ac8:	f002 feec 	bl	178a4 <env_sensors_get_air_quality>
   14acc:	b940      	cbnz	r0, 14ae0 <env_data_ready+0x70>
        (env_data.q) = (s32_t)qual.value;
   14ace:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
   14ad2:	f7f8 fd85 	bl	d5e0 <__aeabi_d2iz>
        (env_data.a) = (u8_t)qual.accuracy;
   14ad6:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
        (env_data.q) = (s32_t)qual.value;
   14ada:	9004      	str	r0, [sp, #16]
        (env_data.a) = (u8_t)qual.accuracy;
   14adc:	f88d 3014 	strb.w	r3, [sp, #20]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&msgq, *(uintptr_t *)&data, *(uintptr_t *)&timeout, K_SYSCALL_K_MSGQ_PUT);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_put(msgq, data, timeout);
   14ae0:	2200      	movs	r2, #0
   14ae2:	a901      	add	r1, sp, #4
   14ae4:	4805      	ldr	r0, [pc, #20]	; (14afc <env_data_ready+0x8c>)
   14ae6:	f017 fc09 	bl	2c2fc <z_impl_k_msgq_put>
}
   14aea:	b01f      	add	sp, #124	; 0x7c
   14aec:	f85d fb04 	ldr.w	pc, [sp], #4
   14af0:	00039f48 	.word	0x00039f48
   14af4:	00039f90 	.word	0x00039f90
   14af8:	0003b655 	.word	0x0003b655
   14afc:	200210d0 	.word	0x200210d0

00014b00 <ntp_poll>:
{
   14b00:	b573      	push	{r0, r1, r4, r5, r6, lr}
        LOG_ERR("Couldn't get time\n");
   14b02:	4b10      	ldr	r3, [pc, #64]	; (14b44 <ntp_poll+0x44>)
   14b04:	4c10      	ldr	r4, [pc, #64]	; (14b48 <ntp_poll+0x48>)
   14b06:	4e11      	ldr	r6, [pc, #68]	; (14b4c <ntp_poll+0x4c>)
   14b08:	1ae4      	subs	r4, r4, r3
   14b0a:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    while (date_time_now(&date_time_stamp) != 0)
   14b0e:	4668      	mov	r0, sp
   14b10:	f023 ff9d 	bl	38a4e <date_time_now>
   14b14:	b920      	cbnz	r0, 14b20 <ntp_poll+0x20>
    got_ntp = true;
   14b16:	2201      	movs	r2, #1
   14b18:	4b0d      	ldr	r3, [pc, #52]	; (14b50 <ntp_poll+0x50>)
   14b1a:	701a      	strb	r2, [r3, #0]
}
   14b1c:	b002      	add	sp, #8
   14b1e:	bd70      	pop	{r4, r5, r6, pc}
        LOG_ERR("Couldn't get time\n");
   14b20:	f025 033f 	bic.w	r3, r5, #63	; 0x3f
   14b24:	f043 0301 	orr.w	r3, r3, #1
   14b28:	f363 0507 	bfi	r5, r3, #0, #8
   14b2c:	f364 158f 	bfi	r5, r4, #6, #10
   14b30:	4631      	mov	r1, r6
   14b32:	4628      	mov	r0, r5
   14b34:	f01f f855 	bl	33be2 <log_string_sync>
	return z_impl_k_sleep(timeout);
   14b38:	f242 7010 	movw	r0, #10000	; 0x2710
   14b3c:	f019 fa0a 	bl	2df54 <z_impl_k_sleep>
   14b40:	e7e5      	b.n	14b0e <ntp_poll+0xe>
   14b42:	bf00      	nop
   14b44:	00039f48 	.word	0x00039f48
   14b48:	00039f90 	.word	0x00039f90
   14b4c:	0003b825 	.word	0x0003b825
   14b50:	20027622 	.word	0x20027622

00014b54 <process_env_data>:
{
   14b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    u32_t run_count = 0;
   14b58:	2700      	movs	r7, #0
   14b5a:	4cd4      	ldr	r4, [pc, #848]	; (14eac <process_env_data+0x358>)
            LOG_DBG("Getting environmental data: [%d] of [%d]", i, DATA_ARRAY_SIZE);
   14b5c:	4bd4      	ldr	r3, [pc, #848]	; (14eb0 <process_env_data+0x35c>)
{
   14b5e:	f6ad 7ddc 	subw	sp, sp, #4060	; 0xfdc
            LOG_DBG("Getting environmental data: [%d] of [%d]", i, DATA_ARRAY_SIZE);
   14b62:	1ae4      	subs	r4, r4, r3
   14b64:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    bool thread_started = false;
   14b68:	9718      	str	r7, [sp, #96]	; 0x60
        for (int i = 0; i < DATA_ARRAY_SIZE; i++)
   14b6a:	2600      	movs	r6, #0
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&msgq, *(uintptr_t *)&data, *(uintptr_t *)&timeout, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
   14b6c:	4dd1      	ldr	r5, [pc, #836]	; (14eb4 <process_env_data+0x360>)
            LOG_DBG("Getting environmental data: [%d] of [%d]", i, DATA_ARRAY_SIZE);
   14b6e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   14b72:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   14b76:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   14b7a:	f043 0304 	orr.w	r3, r3, #4
   14b7e:	f363 0207 	bfi	r2, r3, #0, #8
   14b82:	b293      	uxth	r3, r2
   14b84:	f364 138f 	bfi	r3, r4, #6, #10
   14b88:	f8ad 3008 	strh.w	r3, [sp, #8]
   14b8c:	23f0      	movs	r3, #240	; 0xf0
   14b8e:	4aca      	ldr	r2, [pc, #808]	; (14eb8 <process_env_data+0x364>)
   14b90:	9300      	str	r3, [sp, #0]
   14b92:	49ca      	ldr	r1, [pc, #808]	; (14ebc <process_env_data+0x368>)
   14b94:	4633      	mov	r3, r6
   14b96:	f8bd 0008 	ldrh.w	r0, [sp, #8]
   14b9a:	f01f f822 	bl	33be2 <log_string_sync>
   14b9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14ba2:	a91a      	add	r1, sp, #104	; 0x68
   14ba4:	4628      	mov	r0, r5
   14ba6:	f017 fc43 	bl	2c430 <z_impl_k_msgq_get>
            tempArray[i] = (s32_t)d_temp.t;
   14baa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   14bac:	ab36      	add	r3, sp, #216	; 0xd8
   14bae:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
            humiArray[i] = (s32_t)d_temp.h;
   14bb2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14bb4:	f50d 6393 	add.w	r3, sp, #1176	; 0x498
   14bb8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
            presArray[i] = (s32_t)d_temp.p;
   14bbc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   14bbe:	f60d 0358 	addw	r3, sp, #2136	; 0x858
   14bc2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
            if (d_temp.a != IAQ_STABILISING) {
   14bc6:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
   14bca:	2b00      	cmp	r3, #0
   14bcc:	f000 8255 	beq.w	1507a <process_env_data+0x526>
                qualArray[i] = (s32_t)d_temp.q; // fill array with valid readings
   14bd0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   14bd2:	f60d 4218 	addw	r2, sp, #3096	; 0xc18
   14bd6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
            LOG_INF("Run Count: [%d]\n", run_count);
   14bda:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   14bde:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   14be2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   14be6:	f043 0303 	orr.w	r3, r3, #3
   14bea:	f363 0207 	bfi	r2, r3, #0, #8
   14bee:	b293      	uxth	r3, r2
   14bf0:	f364 138f 	bfi	r3, r4, #6, #10
            run_count +=1;
   14bf4:	3701      	adds	r7, #1
            LOG_INF("Run Count: [%d]\n", run_count);
   14bf6:	b298      	uxth	r0, r3
   14bf8:	463a      	mov	r2, r7
   14bfa:	49b1      	ldr	r1, [pc, #708]	; (14ec0 <process_env_data+0x36c>)
   14bfc:	f8ad 300c 	strh.w	r3, [sp, #12]
   14c00:	f01e ffef 	bl	33be2 <log_string_sync>
            if (!thread_started) {
   14c04:	9b18      	ldr	r3, [sp, #96]	; 0x60
   14c06:	2b00      	cmp	r3, #0
   14c08:	d179      	bne.n	14cfe <process_env_data+0x1aa>
                LOG_INF("[%d] samples to Google thread entry\n", ((THREAD_INDEX) - run_count));
   14c0a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   14c0e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   14c12:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   14c16:	f043 0303 	orr.w	r3, r3, #3
   14c1a:	f363 0207 	bfi	r2, r3, #0, #8
   14c1e:	b293      	uxth	r3, r2
   14c20:	f364 138f 	bfi	r3, r4, #6, #10
   14c24:	f1c7 02ee 	rsb	r2, r7, #238	; 0xee
   14c28:	49a6      	ldr	r1, [pc, #664]	; (14ec4 <process_env_data+0x370>)
   14c2a:	b298      	uxth	r0, r3
   14c2c:	f8ad 3010 	strh.w	r3, [sp, #16]
   14c30:	f01e ffd7 	bl	33be2 <log_string_sync>
            if ((run_count == (THREAD_INDEX)) && (!thread_started))
   14c34:	2fee      	cmp	r7, #238	; 0xee
   14c36:	d162      	bne.n	14cfe <process_env_data+0x1aa>
                LOG_INF("Provisioning\n");
   14c38:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   14c3c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   14c40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   14c44:	f043 0303 	orr.w	r3, r3, #3
   14c48:	f363 0207 	bfi	r2, r3, #0, #8
   14c4c:	b293      	uxth	r3, r2
   14c4e:	f364 138f 	bfi	r3, r4, #6, #10
   14c52:	499d      	ldr	r1, [pc, #628]	; (14ec8 <process_env_data+0x374>)
   14c54:	b298      	uxth	r0, r3
   14c56:	f8ad 3014 	strh.w	r3, [sp, #20]
   14c5a:	f01e ffc2 	bl	33be2 <log_string_sync>
                err = gcloud_provision();
   14c5e:	f000 fcaf 	bl	155c0 <gcloud_provision>
                if (err) {
   14c62:	4602      	mov	r2, r0
   14c64:	2800      	cmp	r0, #0
   14c66:	f000 820b 	beq.w	15080 <process_env_data+0x52c>
                    LOG_ERR("Failed to provision: %d\n", err);
   14c6a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   14c6e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   14c72:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   14c76:	f043 0301 	orr.w	r3, r3, #1
   14c7a:	f363 0107 	bfi	r1, r3, #0, #8
   14c7e:	b28b      	uxth	r3, r1
   14c80:	f364 138f 	bfi	r3, r4, #6, #10
   14c84:	b298      	uxth	r0, r3
   14c86:	4991      	ldr	r1, [pc, #580]	; (14ecc <process_env_data+0x378>)
   14c88:	f8ad 3018 	strh.w	r3, [sp, #24]
   14c8c:	f01e ffa9 	bl	33be2 <log_string_sync>
                    sys_reboot(0); //TODO: Handle error
   14c90:	9818      	ldr	r0, [sp, #96]	; 0x60
   14c92:	f005 f8f9 	bl	19e88 <sys_reboot>
                LOG_INF("Connecting to Google Cloud\n");
   14c96:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   14c9a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   14c9e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   14ca2:	f043 0303 	orr.w	r3, r3, #3
   14ca6:	f363 0207 	bfi	r2, r3, #0, #8
   14caa:	b293      	uxth	r3, r2
   14cac:	f364 138f 	bfi	r3, r4, #6, #10
   14cb0:	b298      	uxth	r0, r3
   14cb2:	4987      	ldr	r1, [pc, #540]	; (14ed0 <process_env_data+0x37c>)
   14cb4:	f8ad 3020 	strh.w	r3, [sp, #32]
   14cb8:	f01e ff93 	bl	33be2 <log_string_sync>
                err = gcloud_connect(received_config_handler);
   14cbc:	4885      	ldr	r0, [pc, #532]	; (14ed4 <process_env_data+0x380>)
   14cbe:	f000 fccd 	bl	1565c <gcloud_connect>
                if (err) {
   14cc2:	4607      	mov	r7, r0
   14cc4:	2800      	cmp	r0, #0
   14cc6:	f000 81ef 	beq.w	150a8 <process_env_data+0x554>
                    LOG_ERR("Failed to connect to Google Cloud, error: %d\n", err);
   14cca:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   14cce:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   14cd2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   14cd6:	f043 0301 	orr.w	r3, r3, #1
   14cda:	f363 0207 	bfi	r2, r3, #0, #8
   14cde:	b293      	uxth	r3, r2
   14ce0:	f364 138f 	bfi	r3, r4, #6, #10
   14ce4:	4602      	mov	r2, r0
   14ce6:	497c      	ldr	r1, [pc, #496]	; (14ed8 <process_env_data+0x384>)
   14ce8:	b298      	uxth	r0, r3
   14cea:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
   14cee:	f01e ff78 	bl	33be2 <log_string_sync>
                    sys_reboot(0); //TODO: Handle error
   14cf2:	2000      	movs	r0, #0
   14cf4:	f005 f8c8 	bl	19e88 <sys_reboot>
                run_count = 0;
   14cf8:	2700      	movs	r7, #0
                thread_started = true;
   14cfa:	2301      	movs	r3, #1
   14cfc:	9318      	str	r3, [sp, #96]	; 0x60
        for (int i = 0; i < DATA_ARRAY_SIZE; i++)
   14cfe:	3601      	adds	r6, #1
   14d00:	2ef0      	cmp	r6, #240	; 0xf0
   14d02:	f47f af34 	bne.w	14b6e <process_env_data+0x1a>
        LOG_INF("Calculating environmental data type avg");
   14d06:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   14d0a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   14d0e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   14d12:	f043 0303 	orr.w	r3, r3, #3
   14d16:	f363 0207 	bfi	r2, r3, #0, #8
   14d1a:	b293      	uxth	r3, r2
   14d1c:	f364 138f 	bfi	r3, r4, #6, #10
   14d20:	b298      	uxth	r0, r3
   14d22:	496e      	ldr	r1, [pc, #440]	; (14edc <process_env_data+0x388>)
   14d24:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
   14d28:	f01e ff5b 	bl	33be2 <log_string_sync>
        pac_data.ag_temp.avg = calculate_avg_val(tempArray, DATA_ARRAY_SIZE, false);
   14d2c:	4631      	mov	r1, r6
   14d2e:	2200      	movs	r2, #0
   14d30:	a836      	add	r0, sp, #216	; 0xd8
   14d32:	f01d ff63 	bl	32bfc <calculate_avg_val>
   14d36:	ad2a      	add	r5, sp, #168	; 0xa8
   14d38:	60a8      	str	r0, [r5, #8]
   14d3a:	9019      	str	r0, [sp, #100]	; 0x64
        pac_data.ag_humi.avg = calculate_avg_val(humiArray, DATA_ARRAY_SIZE, false);
   14d3c:	2200      	movs	r2, #0
   14d3e:	f50d 6093 	add.w	r0, sp, #1176	; 0x498
   14d42:	f01d ff5b 	bl	32bfc <calculate_avg_val>
        pac_data.ag_pres.avg = calculate_avg_val(presArray, DATA_ARRAY_SIZE, false);
   14d46:	2200      	movs	r2, #0
        pac_data.ag_humi.avg = calculate_avg_val(humiArray, DATA_ARRAY_SIZE, false);
   14d48:	6168      	str	r0, [r5, #20]
        pac_data.ag_pres.avg = calculate_avg_val(presArray, DATA_ARRAY_SIZE, false);
   14d4a:	f60d 0058 	addw	r0, sp, #2136	; 0x858
   14d4e:	f01d ff55 	bl	32bfc <calculate_avg_val>
        pac_data.ag_qual.avg = calculate_avg_val(qualArray, DATA_ARRAY_SIZE, true);
   14d52:	2201      	movs	r2, #1
        pac_data.ag_pres.avg = calculate_avg_val(presArray, DATA_ARRAY_SIZE, false);
   14d54:	6228      	str	r0, [r5, #32]
        pac_data.ag_qual.avg = calculate_avg_val(qualArray, DATA_ARRAY_SIZE, true);
   14d56:	f60d 4018 	addw	r0, sp, #3096	; 0xc18
   14d5a:	f01d ff4f 	bl	32bfc <calculate_avg_val>
        LOG_INF("Mean temp: %d", (s32_t)pac_data.ag_temp.avg);
   14d5e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
        pac_data.ag_qual.avg = calculate_avg_val(qualArray, DATA_ARRAY_SIZE, true);
   14d62:	62e8      	str	r0, [r5, #44]	; 0x2c
        LOG_INF("Mean temp: %d", (s32_t)pac_data.ag_temp.avg);
   14d64:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
   14d68:	f042 0203 	orr.w	r2, r2, #3
   14d6c:	f362 0307 	bfi	r3, r2, #0, #8
   14d70:	b29b      	uxth	r3, r3
   14d72:	f364 138f 	bfi	r3, r4, #6, #10
   14d76:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
   14d7a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   14d7c:	4958      	ldr	r1, [pc, #352]	; (14ee0 <process_env_data+0x38c>)
   14d7e:	461a      	mov	r2, r3
   14d80:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
   14d84:	f01e ff2d 	bl	33be2 <log_string_sync>
        LOG_INF("Mean humi: %d", (s32_t)pac_data.ag_humi.avg);
   14d88:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   14d8c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   14d90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   14d94:	f043 0303 	orr.w	r3, r3, #3
   14d98:	f363 0207 	bfi	r2, r3, #0, #8
   14d9c:	b293      	uxth	r3, r2
   14d9e:	f364 138f 	bfi	r3, r4, #6, #10
   14da2:	b298      	uxth	r0, r3
   14da4:	696a      	ldr	r2, [r5, #20]
   14da6:	494f      	ldr	r1, [pc, #316]	; (14ee4 <process_env_data+0x390>)
   14da8:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
   14dac:	f01e ff19 	bl	33be2 <log_string_sync>
        LOG_INF("Mean pres: %d", (s32_t)pac_data.ag_pres.avg);
   14db0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   14db4:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
   14db8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   14dbc:	f043 0303 	orr.w	r3, r3, #3
   14dc0:	f363 0207 	bfi	r2, r3, #0, #8
   14dc4:	b293      	uxth	r3, r2
   14dc6:	f364 138f 	bfi	r3, r4, #6, #10
   14dca:	b298      	uxth	r0, r3
   14dcc:	6a2a      	ldr	r2, [r5, #32]
   14dce:	4946      	ldr	r1, [pc, #280]	; (14ee8 <process_env_data+0x394>)
   14dd0:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
   14dd4:	f01e ff05 	bl	33be2 <log_string_sync>
        LOG_INF("Mean qual: %d", (s32_t)pac_data.ag_qual.avg);
   14dd8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
   14ddc:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
   14de0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   14de4:	f043 0303 	orr.w	r3, r3, #3
   14de8:	f363 0207 	bfi	r2, r3, #0, #8
   14dec:	b293      	uxth	r3, r2
   14dee:	f364 138f 	bfi	r3, r4, #6, #10
   14df2:	b298      	uxth	r0, r3
   14df4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   14df6:	493d      	ldr	r1, [pc, #244]	; (14eec <process_env_data+0x398>)
   14df8:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
   14dfc:	f01e fef1 	bl	33be2 <log_string_sync>
        LOG_INF("Calculating environmental data type min");
   14e00:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   14e04:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
   14e08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   14e0c:	f043 0303 	orr.w	r3, r3, #3
   14e10:	f363 0207 	bfi	r2, r3, #0, #8
   14e14:	b293      	uxth	r3, r2
   14e16:	f364 138f 	bfi	r3, r4, #6, #10
   14e1a:	b298      	uxth	r0, r3
   14e1c:	4934      	ldr	r1, [pc, #208]	; (14ef0 <process_env_data+0x39c>)
   14e1e:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
   14e22:	f01e fede 	bl	33be2 <log_string_sync>
        pac_data.ag_temp.min = calculate_min_val(tempArray, DATA_ARRAY_SIZE);
   14e26:	4631      	mov	r1, r6
   14e28:	a836      	add	r0, sp, #216	; 0xd8
   14e2a:	f01d ff01 	bl	32c30 <calculate_min_val>
   14e2e:	6068      	str	r0, [r5, #4]
   14e30:	9019      	str	r0, [sp, #100]	; 0x64
        pac_data.ag_humi.min = calculate_min_val(humiArray, DATA_ARRAY_SIZE);
   14e32:	f50d 6093 	add.w	r0, sp, #1176	; 0x498
   14e36:	f01d fefb 	bl	32c30 <calculate_min_val>
   14e3a:	6128      	str	r0, [r5, #16]
        pac_data.ag_pres.min = calculate_min_val(presArray, DATA_ARRAY_SIZE);
   14e3c:	f60d 0058 	addw	r0, sp, #2136	; 0x858
   14e40:	f01d fef6 	bl	32c30 <calculate_min_val>
   14e44:	61e8      	str	r0, [r5, #28]
        pac_data.ag_qual.min = calculate_min_val(qualArray, DATA_ARRAY_SIZE);
   14e46:	f60d 4018 	addw	r0, sp, #3096	; 0xc18
   14e4a:	f01d fef1 	bl	32c30 <calculate_min_val>
        LOG_INF("Min temp: %d", (s32_t)pac_data.ag_temp.min);
   14e4e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   14e52:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
   14e56:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   14e5a:	f043 0303 	orr.w	r3, r3, #3
   14e5e:	f363 0207 	bfi	r2, r3, #0, #8
   14e62:	b293      	uxth	r3, r2
   14e64:	f364 138f 	bfi	r3, r4, #6, #10
        pac_data.ag_qual.min = calculate_min_val(qualArray, DATA_ARRAY_SIZE);
   14e68:	62a8      	str	r0, [r5, #40]	; 0x28
        LOG_INF("Min temp: %d", (s32_t)pac_data.ag_temp.min);
   14e6a:	9a19      	ldr	r2, [sp, #100]	; 0x64
   14e6c:	b298      	uxth	r0, r3
   14e6e:	4921      	ldr	r1, [pc, #132]	; (14ef4 <process_env_data+0x3a0>)
   14e70:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
   14e74:	f01e feb5 	bl	33be2 <log_string_sync>
        LOG_INF("Min humi: %d", (s32_t)pac_data.ag_humi.min);
   14e78:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   14e7c:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
   14e80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   14e84:	f043 0303 	orr.w	r3, r3, #3
   14e88:	f363 0207 	bfi	r2, r3, #0, #8
   14e8c:	b293      	uxth	r3, r2
   14e8e:	f364 138f 	bfi	r3, r4, #6, #10
   14e92:	b298      	uxth	r0, r3
   14e94:	692a      	ldr	r2, [r5, #16]
   14e96:	4918      	ldr	r1, [pc, #96]	; (14ef8 <process_env_data+0x3a4>)
   14e98:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   14e9c:	f01e fea1 	bl	33be2 <log_string_sync>
        LOG_INF("Min pres: %d", (s32_t)pac_data.ag_pres.min);
   14ea0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
   14ea4:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
   14ea8:	e028      	b.n	14efc <process_env_data+0x3a8>
   14eaa:	bf00      	nop
   14eac:	00039f90 	.word	0x00039f90
   14eb0:	00039f48 	.word	0x00039f48
   14eb4:	200210d0 	.word	0x200210d0
   14eb8:	0003b420 	.word	0x0003b420
   14ebc:	0003b838 	.word	0x0003b838
   14ec0:	0003b865 	.word	0x0003b865
   14ec4:	0003b876 	.word	0x0003b876
   14ec8:	0003b89b 	.word	0x0003b89b
   14ecc:	0003b8a9 	.word	0x0003b8a9
   14ed0:	0003b8d9 	.word	0x0003b8d9
   14ed4:	00032bed 	.word	0x00032bed
   14ed8:	0003b8f5 	.word	0x0003b8f5
   14edc:	0003b93e 	.word	0x0003b93e
   14ee0:	0003b966 	.word	0x0003b966
   14ee4:	0003b974 	.word	0x0003b974
   14ee8:	0003b982 	.word	0x0003b982
   14eec:	0003b990 	.word	0x0003b990
   14ef0:	0003b99e 	.word	0x0003b99e
   14ef4:	0003b9c6 	.word	0x0003b9c6
   14ef8:	0003b9d3 	.word	0x0003b9d3
   14efc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   14f00:	f043 0303 	orr.w	r3, r3, #3
   14f04:	f363 0207 	bfi	r2, r3, #0, #8
   14f08:	b293      	uxth	r3, r2
   14f0a:	f364 138f 	bfi	r3, r4, #6, #10
   14f0e:	b298      	uxth	r0, r3
   14f10:	69ea      	ldr	r2, [r5, #28]
   14f12:	496f      	ldr	r1, [pc, #444]	; (150d0 <process_env_data+0x57c>)
   14f14:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
   14f18:	f01e fe63 	bl	33be2 <log_string_sync>
        LOG_INF("Min qual: %d", (s32_t)pac_data.ag_qual.min);
   14f1c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
   14f20:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
   14f24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   14f28:	f043 0303 	orr.w	r3, r3, #3
   14f2c:	f363 0207 	bfi	r2, r3, #0, #8
   14f30:	b293      	uxth	r3, r2
   14f32:	f364 138f 	bfi	r3, r4, #6, #10
   14f36:	b298      	uxth	r0, r3
   14f38:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14f3a:	4966      	ldr	r1, [pc, #408]	; (150d4 <process_env_data+0x580>)
   14f3c:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
   14f40:	f01e fe4f 	bl	33be2 <log_string_sync>
        LOG_INF("Calculating environmental data type max");
   14f44:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
   14f48:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
   14f4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   14f50:	f043 0303 	orr.w	r3, r3, #3
   14f54:	f363 0207 	bfi	r2, r3, #0, #8
   14f58:	b293      	uxth	r3, r2
   14f5a:	f364 138f 	bfi	r3, r4, #6, #10
   14f5e:	b298      	uxth	r0, r3
   14f60:	495d      	ldr	r1, [pc, #372]	; (150d8 <process_env_data+0x584>)
   14f62:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
   14f66:	f01e fe3c 	bl	33be2 <log_string_sync>
        pac_data.ag_temp.max = calculate_max_val(tempArray, DATA_ARRAY_SIZE, false);
   14f6a:	4631      	mov	r1, r6
   14f6c:	2200      	movs	r2, #0
   14f6e:	a836      	add	r0, sp, #216	; 0xd8
   14f70:	f01d fe6c 	bl	32c4c <calculate_max_val>
        pac_data.ag_humi.max = calculate_max_val(humiArray, DATA_ARRAY_SIZE, false);
   14f74:	2200      	movs	r2, #0
        pac_data.ag_temp.max = calculate_max_val(tempArray, DATA_ARRAY_SIZE, false);
   14f76:	6028      	str	r0, [r5, #0]
   14f78:	9019      	str	r0, [sp, #100]	; 0x64
        pac_data.ag_humi.max = calculate_max_val(humiArray, DATA_ARRAY_SIZE, false);
   14f7a:	f50d 6093 	add.w	r0, sp, #1176	; 0x498
   14f7e:	f01d fe65 	bl	32c4c <calculate_max_val>
        pac_data.ag_pres.max = calculate_max_val(presArray, DATA_ARRAY_SIZE, false);
   14f82:	2200      	movs	r2, #0
        pac_data.ag_humi.max = calculate_max_val(humiArray, DATA_ARRAY_SIZE, false);
   14f84:	60e8      	str	r0, [r5, #12]
        pac_data.ag_pres.max = calculate_max_val(presArray, DATA_ARRAY_SIZE, false);
   14f86:	f60d 0058 	addw	r0, sp, #2136	; 0x858
   14f8a:	f01d fe5f 	bl	32c4c <calculate_max_val>
        pac_data.ag_qual.max = calculate_max_val(qualArray, DATA_ARRAY_SIZE, true);
   14f8e:	2201      	movs	r2, #1
        pac_data.ag_pres.max = calculate_max_val(presArray, DATA_ARRAY_SIZE, false);
   14f90:	61a8      	str	r0, [r5, #24]
        pac_data.ag_qual.max = calculate_max_val(qualArray, DATA_ARRAY_SIZE, true);
   14f92:	f60d 4018 	addw	r0, sp, #3096	; 0xc18
   14f96:	f01d fe59 	bl	32c4c <calculate_max_val>
        LOG_INF("Max temp: %d", (s32_t)pac_data.ag_temp.max);
   14f9a:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
        pac_data.ag_qual.max = calculate_max_val(qualArray, DATA_ARRAY_SIZE, true);
   14f9e:	6268      	str	r0, [r5, #36]	; 0x24
        LOG_INF("Max temp: %d", (s32_t)pac_data.ag_temp.max);
   14fa0:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
   14fa4:	f042 0203 	orr.w	r2, r2, #3
   14fa8:	f362 0307 	bfi	r3, r2, #0, #8
   14fac:	b29b      	uxth	r3, r3
   14fae:	f364 138f 	bfi	r3, r4, #6, #10
   14fb2:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
   14fb6:	9b19      	ldr	r3, [sp, #100]	; 0x64
   14fb8:	4948      	ldr	r1, [pc, #288]	; (150dc <process_env_data+0x588>)
   14fba:	461a      	mov	r2, r3
   14fbc:	f8bd 0058 	ldrh.w	r0, [sp, #88]	; 0x58
   14fc0:	f01e fe0f 	bl	33be2 <log_string_sync>
        LOG_INF("Max humi: %d", (s32_t)pac_data.ag_humi.max);
   14fc4:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   14fc8:	f043 0303 	orr.w	r3, r3, #3
   14fcc:	f363 0807 	bfi	r8, r3, #0, #8
   14fd0:	f364 188f 	bfi	r8, r4, #6, #10
   14fd4:	68ea      	ldr	r2, [r5, #12]
   14fd6:	4942      	ldr	r1, [pc, #264]	; (150e0 <process_env_data+0x58c>)
   14fd8:	4640      	mov	r0, r8
   14fda:	f01e fe02 	bl	33be2 <log_string_sync>
        LOG_INF("Max pres: %d", (s32_t)pac_data.ag_pres.max);
   14fde:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
   14fe2:	f043 0303 	orr.w	r3, r3, #3
   14fe6:	f363 0907 	bfi	r9, r3, #0, #8
   14fea:	f364 198f 	bfi	r9, r4, #6, #10
   14fee:	69aa      	ldr	r2, [r5, #24]
   14ff0:	493c      	ldr	r1, [pc, #240]	; (150e4 <process_env_data+0x590>)
   14ff2:	4648      	mov	r0, r9
   14ff4:	f01e fdf5 	bl	33be2 <log_string_sync>
        LOG_INF("Max qual: %d", (s32_t)pac_data.ag_qual.max);
   14ff8:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
   14ffc:	f043 0303 	orr.w	r3, r3, #3
   15000:	f363 0a07 	bfi	sl, r3, #0, #8
   15004:	f364 1a8f 	bfi	sl, r4, #6, #10
   15008:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1500a:	4937      	ldr	r1, [pc, #220]	; (150e8 <process_env_data+0x594>)
   1500c:	4650      	mov	r0, sl
   1500e:	f01e fde8 	bl	33be2 <log_string_sync>
        LOG_INF("Sending data to google iot thread");
   15012:	f02b 033f 	bic.w	r3, fp, #63	; 0x3f
   15016:	f043 0303 	orr.w	r3, r3, #3
   1501a:	f363 0b07 	bfi	fp, r3, #0, #8
   1501e:	f364 1b8f 	bfi	fp, r4, #6, #10
   15022:	4932      	ldr	r1, [pc, #200]	; (150ec <process_env_data+0x598>)
   15024:	4658      	mov	r0, fp
   15026:	f01e fddc 	bl	33be2 <log_string_sync>
        send_env_msg.info = buffer_bytes_used;
   1502a:	2330      	movs	r3, #48	; 0x30
        send_env_msg.size = buffer_bytes_used;
   1502c:	e9cd 3320 	strd	r3, r3, [sp, #128]	; 0x80
        send_env_msg.tx_block.data = NULL;
   15030:	2300      	movs	r3, #0
        k_mbox_put(&env_d_mailbox, &send_env_msg, K_FOREVER);
   15032:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15036:	a91f      	add	r1, sp, #124	; 0x7c
   15038:	482d      	ldr	r0, [pc, #180]	; (150f0 <process_env_data+0x59c>)
        send_env_msg.tx_block.data = NULL;
   1503a:	9324      	str	r3, [sp, #144]	; 0x90
        send_env_msg.tx_target_thread = K_ANY;
   1503c:	9327      	str	r3, [sp, #156]	; 0x9c
        send_env_msg.tx_data = &pac_data;
   1503e:	9522      	str	r5, [sp, #136]	; 0x88
        k_mbox_put(&env_d_mailbox, &send_env_msg, K_FOREVER);
   15040:	f016 ffa2 	bl	2bf88 <k_mbox_put>
        if (send_env_msg.size < buffer_bytes_used) {
   15044:	9b20      	ldr	r3, [sp, #128]	; 0x80
   15046:	2b2f      	cmp	r3, #47	; 0x2f
   15048:	f63f ad8f 	bhi.w	14b6a <process_env_data+0x16>
            LOG_DBG("env msg RXer only had room for [%d] bytes", send_env_msg.info);
   1504c:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
   15050:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
   15054:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   15058:	f043 0304 	orr.w	r3, r3, #4
   1505c:	f363 0207 	bfi	r2, r3, #0, #8
   15060:	b293      	uxth	r3, r2
   15062:	f364 138f 	bfi	r3, r4, #6, #10
   15066:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
   1506a:	4a22      	ldr	r2, [pc, #136]	; (150f4 <process_env_data+0x5a0>)
   1506c:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1506e:	4922      	ldr	r1, [pc, #136]	; (150f8 <process_env_data+0x5a4>)
   15070:	f8bd 005c 	ldrh.w	r0, [sp, #92]	; 0x5c
   15074:	f01e fdb5 	bl	33be2 <log_string_sync>
   15078:	e577      	b.n	14b6a <process_env_data+0x16>
               qualArray[i] = EXCLUDE;  // fill array with magic number
   1507a:	f240 33e7 	movw	r3, #999	; 0x3e7
   1507e:	e5a8      	b.n	14bd2 <process_env_data+0x7e>
                    LOG_INF("Provisioning complete\n");
   15080:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   15084:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   15088:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   1508c:	f043 0303 	orr.w	r3, r3, #3
   15090:	f363 0207 	bfi	r2, r3, #0, #8
   15094:	b293      	uxth	r3, r2
   15096:	f364 138f 	bfi	r3, r4, #6, #10
   1509a:	4918      	ldr	r1, [pc, #96]	; (150fc <process_env_data+0x5a8>)
   1509c:	b298      	uxth	r0, r3
   1509e:	f8ad 301c 	strh.w	r3, [sp, #28]
   150a2:	f01e fd9e 	bl	33be2 <log_string_sync>
   150a6:	e5f6      	b.n	14c96 <process_env_data+0x142>
                    LOG_INF("Connected to Google Cloud\n");
   150a8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   150ac:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   150b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   150b4:	f043 0303 	orr.w	r3, r3, #3
   150b8:	f363 0207 	bfi	r2, r3, #0, #8
   150bc:	b293      	uxth	r3, r2
   150be:	f364 138f 	bfi	r3, r4, #6, #10
   150c2:	490f      	ldr	r1, [pc, #60]	; (15100 <process_env_data+0x5ac>)
   150c4:	b298      	uxth	r0, r3
   150c6:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
   150ca:	f01e fd8a 	bl	33be2 <log_string_sync>
   150ce:	e614      	b.n	14cfa <process_env_data+0x1a6>
   150d0:	0003b9e0 	.word	0x0003b9e0
   150d4:	0003b9ed 	.word	0x0003b9ed
   150d8:	0003b9fa 	.word	0x0003b9fa
   150dc:	0003ba22 	.word	0x0003ba22
   150e0:	0003ba2f 	.word	0x0003ba2f
   150e4:	0003ba3c 	.word	0x0003ba3c
   150e8:	0003ba49 	.word	0x0003ba49
   150ec:	0003ba56 	.word	0x0003ba56
   150f0:	200210bc 	.word	0x200210bc
   150f4:	0003b420 	.word	0x0003b420
   150f8:	0003ba78 	.word	0x0003ba78
   150fc:	0003b8c2 	.word	0x0003b8c2
   15100:	0003b923 	.word	0x0003b923

00015104 <get_modem_info>:
{
   15104:	b510      	push	{r4, lr}
    LOG_INF("Getting modem info\n");
   15106:	2303      	movs	r3, #3
{
   15108:	4604      	mov	r4, r0
    LOG_INF("Getting modem info\n");
   1510a:	f04f 0000 	mov.w	r0, #0
   1510e:	4a19      	ldr	r2, [pc, #100]	; (15174 <get_modem_info+0x70>)
   15110:	f363 0007 	bfi	r0, r3, #0, #8
   15114:	4b18      	ldr	r3, [pc, #96]	; (15178 <get_modem_info+0x74>)
   15116:	4919      	ldr	r1, [pc, #100]	; (1517c <get_modem_info+0x78>)
   15118:	1a9b      	subs	r3, r3, r2
   1511a:	08db      	lsrs	r3, r3, #3
   1511c:	f363 108f 	bfi	r0, r3, #6, #10
   15120:	f01e fd5f 	bl	33be2 <log_string_sync>
    modem_info_string_get(MODEM_INFO_CELLID, info->cid, sizeof(info->cid));
   15124:	4621      	mov	r1, r4
   15126:	221e      	movs	r2, #30
   15128:	2008      	movs	r0, #8
   1512a:	f00c fc3d 	bl	219a8 <modem_info_string_get>
    modem_info_string_get(MODEM_INFO_AREA_CODE, info->tac, sizeof(info->tac));
   1512e:	221e      	movs	r2, #30
   15130:	2003      	movs	r0, #3
   15132:	18a1      	adds	r1, r4, r2
   15134:	f00c fc38 	bl	219a8 <modem_info_string_get>
    modem_info_string_get(MODEM_INFO_RSRP, info->rssi, sizeof(info->rssi));
   15138:	f104 013c 	add.w	r1, r4, #60	; 0x3c
   1513c:	221e      	movs	r2, #30
   1513e:	2000      	movs	r0, #0
   15140:	f00c fc32 	bl	219a8 <modem_info_string_get>
    modem_info_string_get(MODEM_INFO_APN, info->apn, sizeof(info->apn));
   15144:	f104 015a 	add.w	r1, r4, #90	; 0x5a
   15148:	223c      	movs	r2, #60	; 0x3c
   1514a:	2015      	movs	r0, #21
   1514c:	f00c fc2c 	bl	219a8 <modem_info_string_get>
    modem_info_string_get(MODEM_INFO_FW_VERSION, info->fwv, sizeof(info->fwv));
   15150:	f104 0196 	add.w	r1, r4, #150	; 0x96
   15154:	223c      	movs	r2, #60	; 0x3c
   15156:	200d      	movs	r0, #13
   15158:	f00c fc26 	bl	219a8 <modem_info_string_get>
	modem_info_short_get(MODEM_INFO_BATTERY, &info->vltg);
   1515c:	f104 01d2 	add.w	r1, r4, #210	; 0xd2
   15160:	200b      	movs	r0, #11
   15162:	f00c fbf1 	bl	21948 <modem_info_short_get>
    modem_info_short_get(MODEM_INFO_TEMP, &info->temp);
   15166:	f104 01d4 	add.w	r1, r4, #212	; 0xd4
   1516a:	200c      	movs	r0, #12
}
   1516c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    modem_info_short_get(MODEM_INFO_TEMP, &info->temp);
   15170:	f00c bbea 	b.w	21948 <modem_info_short_get>
   15174:	00039f48 	.word	0x00039f48
   15178:	00039f90 	.word	0x00039f90
   1517c:	0003b669 	.word	0x0003b669

00015180 <init_env_sensor>:
    LOG_INF("Sensor workqueue started\n");
   15180:	2303      	movs	r3, #3
   15182:	f04f 0000 	mov.w	r0, #0
{
   15186:	b510      	push	{r4, lr}
    LOG_INF("Sensor workqueue started\n");
   15188:	f363 0007 	bfi	r0, r3, #0, #8
   1518c:	4c1b      	ldr	r4, [pc, #108]	; (151fc <init_env_sensor+0x7c>)
   1518e:	4b1c      	ldr	r3, [pc, #112]	; (15200 <init_env_sensor+0x80>)
   15190:	491c      	ldr	r1, [pc, #112]	; (15204 <init_env_sensor+0x84>)
   15192:	1ae4      	subs	r4, r4, r3
   15194:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   15198:	f364 108f 	bfi	r0, r4, #6, #10
   1519c:	f01e fd21 	bl	33be2 <log_string_sync>
	k_work_q_start(&env_sens_q, env_sens_stack_area,
   151a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   151a4:	2307      	movs	r3, #7
   151a6:	4918      	ldr	r1, [pc, #96]	; (15208 <init_env_sensor+0x88>)
   151a8:	4818      	ldr	r0, [pc, #96]	; (1520c <init_env_sensor+0x8c>)
   151aa:	f019 f9b5 	bl	2e518 <k_work_q_start>
    LOG_INF("Initializing environmental sensor\n");
   151ae:	2303      	movs	r3, #3
   151b0:	f04f 0000 	mov.w	r0, #0
   151b4:	f363 0007 	bfi	r0, r3, #0, #8
   151b8:	f364 108f 	bfi	r0, r4, #6, #10
   151bc:	4914      	ldr	r1, [pc, #80]	; (15210 <init_env_sensor+0x90>)
   151be:	f01e fd10 	bl	33be2 <log_string_sync>
    err = env_sensors_init_and_start(&env_sens_q, env_data_ready);
   151c2:	4914      	ldr	r1, [pc, #80]	; (15214 <init_env_sensor+0x94>)
   151c4:	4811      	ldr	r0, [pc, #68]	; (1520c <init_env_sensor+0x8c>)
   151c6:	f002 fbc5 	bl	17954 <env_sensors_init_and_start>
    if (err) {
   151ca:	4602      	mov	r2, r0
        LOG_INF("environmental sensor initialization failed [%d]\n", err);
   151cc:	f04f 0000 	mov.w	r0, #0
    if (err) {
   151d0:	b14a      	cbz	r2, 151e6 <init_env_sensor+0x66>
        LOG_INF("environmental sensor initialization failed [%d]\n", err);
   151d2:	2103      	movs	r1, #3
   151d4:	f361 0007 	bfi	r0, r1, #0, #8
   151d8:	f364 108f 	bfi	r0, r4, #6, #10
   151dc:	490e      	ldr	r1, [pc, #56]	; (15218 <init_env_sensor+0x98>)
}
   151de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LOG_INF("environmental sensor initialization failed [%d]\n", err);
   151e2:	f01e bcfe 	b.w	33be2 <log_string_sync>
        LOG_INF("environmental sensor initialized\n");
   151e6:	2303      	movs	r3, #3
   151e8:	f363 0007 	bfi	r0, r3, #0, #8
   151ec:	f364 108f 	bfi	r0, r4, #6, #10
   151f0:	490a      	ldr	r1, [pc, #40]	; (1521c <init_env_sensor+0x9c>)
}
   151f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LOG_INF("environmental sensor initialized\n");
   151f6:	f01e bcf4 	b.w	33be2 <log_string_sync>
   151fa:	bf00      	nop
   151fc:	00039f90 	.word	0x00039f90
   15200:	00039f48 	.word	0x00039f48
   15204:	0003b67d 	.word	0x0003b67d
   15208:	2002b208 	.word	0x2002b208
   1520c:	20021264 	.word	0x20021264
   15210:	0003b697 	.word	0x0003b697
   15214:	00014a71 	.word	0x00014a71
   15218:	0003b6ba 	.word	0x0003b6ba
   1521c:	0003b6eb 	.word	0x0003b6eb

00015220 <main>:


/**@brief Thread initialisation */
void main(void)
{
    LOG_INF("Google Cloud env sensor app started");
   15220:	2303      	movs	r3, #3
   15222:	f04f 0000 	mov.w	r0, #0
{
   15226:	b530      	push	{r4, r5, lr}
    LOG_INF("Google Cloud env sensor app started");
   15228:	f363 0007 	bfi	r0, r3, #0, #8
   1522c:	4c58      	ldr	r4, [pc, #352]	; (15390 <main+0x170>)
   1522e:	4b59      	ldr	r3, [pc, #356]	; (15394 <main+0x174>)
{
   15230:	b087      	sub	sp, #28
    LOG_INF("Google Cloud env sensor app started");
   15232:	1ae4      	subs	r4, r4, r3
   15234:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   15238:	f364 108f 	bfi	r0, r4, #6, #10
   1523c:	4956      	ldr	r1, [pc, #344]	; (15398 <main+0x178>)
   1523e:	f01e fcd0 	bl	33be2 <log_string_sync>

	k_work_q_start(&app_work_q, wdt_stack_area,
   15242:	f44f 7200 	mov.w	r2, #512	; 0x200
   15246:	2307      	movs	r3, #7
   15248:	4954      	ldr	r1, [pc, #336]	; (1539c <main+0x17c>)
   1524a:	4855      	ldr	r0, [pc, #340]	; (153a0 <main+0x180>)
   1524c:	f019 f964 	bl	2e518 <k_work_q_start>
		       K_THREAD_STACK_SIZEOF(wdt_stack_area),
		       CONFIG_APPLICATION_WORKQUEUE_PRIORITY);
	if (IS_ENABLED(CONFIG_WATCHDOG)) {
		watchdog_init_and_start(&app_work_q);
   15250:	4853      	ldr	r0, [pc, #332]	; (153a0 <main+0x180>)
   15252:	f003 fa53 	bl	186fc <watchdog_init_and_start>
	}

	LOG_INF("Initializing modem\n");
   15256:	2303      	movs	r3, #3
   15258:	f04f 0000 	mov.w	r0, #0
   1525c:	f363 0007 	bfi	r0, r3, #0, #8
   15260:	f364 108f 	bfi	r0, r4, #6, #10
   15264:	494f      	ldr	r1, [pc, #316]	; (153a4 <main+0x184>)
   15266:	f01e fcbc 	bl	33be2 <log_string_sync>
        LOG_INF("Establishing LTE link\n");
   1526a:	2303      	movs	r3, #3
   1526c:	f04f 0000 	mov.w	r0, #0
   15270:	f363 0007 	bfi	r0, r3, #0, #8
   15274:	f364 108f 	bfi	r0, r4, #6, #10
   15278:	494b      	ldr	r1, [pc, #300]	; (153a8 <main+0x188>)
   1527a:	f01e fcb2 	bl	33be2 <log_string_sync>
        err = lte_lc_init_and_connect();
   1527e:	f023 fbce 	bl	38a1e <lte_lc_init_and_connect>
        __ASSERT(err == 0, "LTE link could not be established. Rebooting\n");
   15282:	b160      	cbz	r0, 1529e <main+0x7e>
   15284:	4949      	ldr	r1, [pc, #292]	; (153ac <main+0x18c>)
   15286:	23db      	movs	r3, #219	; 0xdb
   15288:	4a49      	ldr	r2, [pc, #292]	; (153b0 <main+0x190>)
   1528a:	484a      	ldr	r0, [pc, #296]	; (153b4 <main+0x194>)
   1528c:	f01e f991 	bl	335b2 <printk>
   15290:	4849      	ldr	r0, [pc, #292]	; (153b8 <main+0x198>)
   15292:	f01e f98e 	bl	335b2 <printk>
   15296:	21db      	movs	r1, #219	; 0xdb
   15298:	4845      	ldr	r0, [pc, #276]	; (153b0 <main+0x190>)
   1529a:	f01e fc8b 	bl	33bb4 <assert_post_action>
    lte_lc_psm_req(true);
   1529e:	2001      	movs	r0, #1
   152a0:	f00c f87c 	bl	2139c <lte_lc_psm_req>
    modem_configure();

    LOG_INF("Initializing modem info\n");
   152a4:	2303      	movs	r3, #3
   152a6:	f04f 0000 	mov.w	r0, #0
   152aa:	f363 0007 	bfi	r0, r3, #0, #8
   152ae:	f364 108f 	bfi	r0, r4, #6, #10
   152b2:	4942      	ldr	r1, [pc, #264]	; (153bc <main+0x19c>)
   152b4:	f01e fc95 	bl	33be2 <log_string_sync>
    modem_info_init();
   152b8:	f00c fc9c 	bl	21bf4 <modem_info_init>

    LOG_INF("Initializing environmental sensor\n");
   152bc:	2303      	movs	r3, #3
   152be:	f04f 0000 	mov.w	r0, #0
   152c2:	f363 0007 	bfi	r0, r3, #0, #8
   152c6:	f364 108f 	bfi	r0, r4, #6, #10
   152ca:	493d      	ldr	r1, [pc, #244]	; (153c0 <main+0x1a0>)
   152cc:	f01e fc89 	bl	33be2 <log_string_sync>
    init_env_sensor();
   152d0:	f7ff ff56 	bl	15180 <init_env_sensor>

    LOG_INF("Initializing bsec data message queue\n");
   152d4:	2303      	movs	r3, #3
   152d6:	f04f 0000 	mov.w	r0, #0
   152da:	f363 0007 	bfi	r0, r3, #0, #8
   152de:	f364 108f 	bfi	r0, r4, #6, #10
   152e2:	4938      	ldr	r1, [pc, #224]	; (153c4 <main+0x1a4>)
   152e4:	f01e fc7d 	bl	33be2 <log_string_sync>
    k_msgq_init(&env_msg_q, env_msgq_buffer, sizeof(env_d), 10);
   152e8:	2214      	movs	r2, #20
   152ea:	230a      	movs	r3, #10
   152ec:	4936      	ldr	r1, [pc, #216]	; (153c8 <main+0x1a8>)
   152ee:	4837      	ldr	r0, [pc, #220]	; (153cc <main+0x1ac>)
   152f0:	f023 fc9d 	bl	38c2e <k_msgq_init>

    LOG_INF("Initializing aggregated data mailbox\n");
   152f4:	2303      	movs	r3, #3
   152f6:	f04f 0000 	mov.w	r0, #0
   152fa:	f363 0007 	bfi	r0, r3, #0, #8
   152fe:	f364 108f 	bfi	r0, r4, #6, #10
   15302:	4933      	ldr	r1, [pc, #204]	; (153d0 <main+0x1b0>)
   15304:	f01e fc6d 	bl	33be2 <log_string_sync>
    k_mbox_init(&env_d_mailbox);
   15308:	4832      	ldr	r0, [pc, #200]	; (153d4 <main+0x1b4>)
   1530a:	f023 fc44 	bl	38b96 <k_mbox_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1530e:	2400      	movs	r4, #0
   15310:	2507      	movs	r5, #7
   15312:	e9cd 4404 	strd	r4, r4, [sp, #16]
   15316:	e9cd 4502 	strd	r4, r5, [sp, #8]
   1531a:	e9cd 4400 	strd	r4, r4, [sp]
   1531e:	4b2e      	ldr	r3, [pc, #184]	; (153d8 <main+0x1b8>)
   15320:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   15324:	492d      	ldr	r1, [pc, #180]	; (153dc <main+0x1bc>)
   15326:	482e      	ldr	r0, [pc, #184]	; (153e0 <main+0x1c0>)
   15328:	f018 fff2 	bl	2e310 <z_impl_k_thread_create>

    /* Initialise data aggregation thread */
    d_ag_tid = k_thread_create(&data_ag_thread, data_ag_stack_area, K_THREAD_STACK_SIZEOF(data_ag_stack_area),
   1532c:	4b2d      	ldr	r3, [pc, #180]	; (153e4 <main+0x1c4>)
   1532e:	6018      	str	r0, [r3, #0]
   15330:	4b2d      	ldr	r3, [pc, #180]	; (153e8 <main+0x1c8>)
   15332:	e9cd 4404 	strd	r4, r4, [sp, #16]
   15336:	e9cd 4502 	strd	r4, r5, [sp, #8]
   1533a:	e9cd 4400 	strd	r4, r4, [sp]
   1533e:	f44f 7200 	mov.w	r2, #512	; 0x200
   15342:	492a      	ldr	r1, [pc, #168]	; (153ec <main+0x1cc>)
   15344:	482a      	ldr	r0, [pc, #168]	; (153f0 <main+0x1d0>)
   15346:	f018 ffe3 	bl	2e310 <z_impl_k_thread_create>
        (k_thread_entry_t)process_env_data, NULL, NULL, NULL,
        7, 0, K_NO_WAIT);

    /* Initialise time pool poll thread */
    ntp_tid = k_thread_create(&ntp_thread, ntp_stack_area, K_THREAD_STACK_SIZEOF(ntp_stack_area),
   1534a:	4b2a      	ldr	r3, [pc, #168]	; (153f4 <main+0x1d4>)
   1534c:	6018      	str	r0, [r3, #0]
   1534e:	4b2a      	ldr	r3, [pc, #168]	; (153f8 <main+0x1d8>)
   15350:	e9cd 4404 	strd	r4, r4, [sp, #16]
   15354:	e9cd 4502 	strd	r4, r5, [sp, #8]
   15358:	e9cd 4400 	strd	r4, r4, [sp]
   1535c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   15360:	4926      	ldr	r1, [pc, #152]	; (153fc <main+0x1dc>)
   15362:	4827      	ldr	r0, [pc, #156]	; (15400 <main+0x1e0>)
   15364:	f018 ffd4 	bl	2e310 <z_impl_k_thread_create>
        (k_thread_entry_t)ntp_poll, NULL, NULL, NULL,
        7, 0, K_NO_WAIT);

    /* Initialise Google Cloud thread */
    gc_tid = k_thread_create(&gc_thread, gc_stack_area, K_THREAD_STACK_SIZEOF(gc_stack_area),
   15368:	4b26      	ldr	r3, [pc, #152]	; (15404 <main+0x1e4>)
   1536a:	6018      	str	r0, [r3, #0]
   1536c:	4b26      	ldr	r3, [pc, #152]	; (15408 <main+0x1e8>)
   1536e:	e9cd 4404 	strd	r4, r4, [sp, #16]
   15372:	e9cd 4502 	strd	r4, r5, [sp, #8]
   15376:	e9cd 4400 	strd	r4, r4, [sp]
   1537a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1537e:	4923      	ldr	r1, [pc, #140]	; (1540c <main+0x1ec>)
   15380:	4823      	ldr	r0, [pc, #140]	; (15410 <main+0x1f0>)
   15382:	f018 ffc5 	bl	2e310 <z_impl_k_thread_create>
        (k_thread_entry_t)gcloud_thread, NULL, NULL, NULL,
        7, 0, K_NO_WAIT);

    /* Initialise App thread */
    app_tid = k_thread_create(&app_thread, app_stack_area, K_THREAD_STACK_SIZEOF(app_stack_area),
   15386:	4b23      	ldr	r3, [pc, #140]	; (15414 <main+0x1f4>)
   15388:	6018      	str	r0, [r3, #0]
        (k_thread_entry_t)app_gc_iot, NULL, NULL, NULL,
        7, 0, K_NO_WAIT);
   1538a:	b007      	add	sp, #28
   1538c:	bd30      	pop	{r4, r5, pc}
   1538e:	bf00      	nop
   15390:	00039f90 	.word	0x00039f90
   15394:	00039f48 	.word	0x00039f48
   15398:	0003b70d 	.word	0x0003b70d
   1539c:	20030408 	.word	0x20030408
   153a0:	20020f2c 	.word	0x20020f2c
   153a4:	0003b731 	.word	0x0003b731
   153a8:	0003b745 	.word	0x0003b745
   153ac:	0003b76a 	.word	0x0003b76a
   153b0:	0003b75c 	.word	0x0003b75c
   153b4:	0003b773 	.word	0x0003b773
   153b8:	0003b790 	.word	0x0003b790
   153bc:	0003b7c0 	.word	0x0003b7c0
   153c0:	0003b697 	.word	0x0003b697
   153c4:	0003b7d9 	.word	0x0003b7d9
   153c8:	200210fc 	.word	0x200210fc
   153cc:	200210d0 	.word	0x200210d0
   153d0:	0003b7ff 	.word	0x0003b7ff
   153d4:	200210bc 	.word	0x200210bc
   153d8:	00014b55 	.word	0x00014b55
   153dc:	2002d208 	.word	0x2002d208
   153e0:	20021004 	.word	0x20021004
   153e4:	20021000 	.word	0x20021000
   153e8:	00014b01 	.word	0x00014b01
   153ec:	20030208 	.word	0x20030208
   153f0:	200213f4 	.word	0x200213f4
   153f4:	200214ac 	.word	0x200214ac
   153f8:	00015b55 	.word	0x00015b55
   153fc:	2002f208 	.word	0x2002f208
   15400:	20021338 	.word	0x20021338
   15404:	200213f0 	.word	0x200213f0
   15408:	00012091 	.word	0x00012091
   1540c:	20029208 	.word	0x20029208
   15410:	20020e70 	.word	0x20020e70
   15414:	20020f28 	.word	0x20020f28

00015418 <input_timer_handler>:
    int temp = k_msgq_put(q,data, timeout);
    irq_unlock(key);
    return temp;
}

void input_timer_handler(struct k_timer *timer_id) {
   15418:	b530      	push	{r4, r5, lr}
   1541a:	b087      	sub	sp, #28
    struct gcloud_event cmd = {
   1541c:	2218      	movs	r2, #24
   1541e:	2100      	movs	r1, #0
   15420:	4668      	mov	r0, sp
   15422:	f023 fe08 	bl	39036 <memset>
   15426:	2301      	movs	r3, #1
   15428:	f88d 3000 	strb.w	r3, [sp]
	return z_impl_k_msgq_put(msgq, data, timeout);
   1542c:	2200      	movs	r2, #0
   1542e:	4669      	mov	r1, sp
   15430:	480d      	ldr	r0, [pc, #52]	; (15468 <input_timer_handler+0x50>)
   15432:	f016 ff63 	bl	2c2fc <z_impl_k_msgq_put>
        .type = INPUT_TIMEOUT,
        .param = {}
    };
    int err = k_msgq_put(&gcloud_msgq, &cmd, K_NO_WAIT);
    if (err) {
   15436:	4605      	mov	r5, r0
   15438:	b198      	cbz	r0, 15462 <input_timer_handler+0x4a>
        LOG_ERR("k_msgq_put (input_timeout) failed: [%d] %s", err, strerror(-err));
   1543a:	2301      	movs	r3, #1
   1543c:	f04f 0400 	mov.w	r4, #0
   15440:	4a0a      	ldr	r2, [pc, #40]	; (1546c <input_timer_handler+0x54>)
   15442:	f363 0407 	bfi	r4, r3, #0, #8
   15446:	4b0a      	ldr	r3, [pc, #40]	; (15470 <input_timer_handler+0x58>)
   15448:	4240      	negs	r0, r0
   1544a:	1a9b      	subs	r3, r3, r2
   1544c:	08db      	lsrs	r3, r3, #3
   1544e:	f363 148f 	bfi	r4, r3, #6, #10
   15452:	f01c fe45 	bl	320e0 <strerror>
   15456:	462a      	mov	r2, r5
   15458:	4603      	mov	r3, r0
   1545a:	4906      	ldr	r1, [pc, #24]	; (15474 <input_timer_handler+0x5c>)
   1545c:	4620      	mov	r0, r4
   1545e:	f01e fbc0 	bl	33be2 <log_string_sync>
        // TODO: Find a way to report this error to the application.
    }
}
   15462:	b007      	add	sp, #28
   15464:	bd30      	pop	{r4, r5, pc}
   15466:	bf00      	nop
   15468:	200207a0 	.word	0x200207a0
   1546c:	00039f48 	.word	0x00039f48
   15470:	00039f88 	.word	0x00039f88
   15474:	0003c145 	.word	0x0003c145

00015478 <make_jwt.constprop.0>:
static int make_jwt(char *buffer, size_t buffer_size) {
   15478:	b510      	push	{r4, lr}
   1547a:	b088      	sub	sp, #32
    err = jwt_init_builder(&jb, buffer, buffer_size);
   1547c:	f44f 7280 	mov.w	r2, #256	; 0x100
   15480:	492e      	ldr	r1, [pc, #184]	; (1553c <make_jwt.constprop.0+0xc4>)
   15482:	a803      	add	r0, sp, #12
   15484:	f009 fcec 	bl	1ee60 <jwt_init_builder>
    if (err != 0) {
   15488:	4604      	mov	r4, r0
   1548a:	b188      	cbz	r0, 154b0 <make_jwt.constprop.0+0x38>
        LOG_ERR("Unable to init JWT builder: %d", err);
   1548c:	2301      	movs	r3, #1
   1548e:	f04f 0000 	mov.w	r0, #0
   15492:	4a2b      	ldr	r2, [pc, #172]	; (15540 <make_jwt.constprop.0+0xc8>)
   15494:	f363 0007 	bfi	r0, r3, #0, #8
   15498:	4b2a      	ldr	r3, [pc, #168]	; (15544 <make_jwt.constprop.0+0xcc>)
   1549a:	492b      	ldr	r1, [pc, #172]	; (15548 <make_jwt.constprop.0+0xd0>)
   1549c:	1a9b      	subs	r3, r3, r2
   1549e:	4622      	mov	r2, r4
   154a0:	08db      	lsrs	r3, r3, #3
   154a2:	f363 108f 	bfi	r0, r3, #6, #10
        LOG_ERR("Unable to add JWT payload: %d", err);
   154a6:	f01e fb9c 	bl	33be2 <log_string_sync>
}
   154aa:	4620      	mov	r0, r4
   154ac:	b008      	add	sp, #32
   154ae:	bd10      	pop	{r4, pc}
    date_time_now(&ntp);
   154b0:	4668      	mov	r0, sp
   154b2:	f023 facc 	bl	38a4e <date_time_now>
    s64_t unixtime = (ntp/1000);    //TODO: Is unix time valid as jwt timestamp?
   154b6:	e9dd 0100 	ldrd	r0, r1, [sp]
   154ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   154be:	2300      	movs	r3, #0
   154c0:	f7f8 f906 	bl	d6d0 <__aeabi_ldivmod>
   154c4:	4604      	mov	r4, r0
    printk("UNIX TIMESTAMP: %d\n", y);
   154c6:	4601      	mov	r1, r0
   154c8:	4820      	ldr	r0, [pc, #128]	; (1554c <make_jwt.constprop.0+0xd4>)
   154ca:	f01e f872 	bl	335b2 <printk>
    err = jwt_add_payload(&jb, expiry_time, issue_time, CONFIG_GCLOUD_PROJECT_NAME);
   154ce:	f504 4128 	add.w	r1, r4, #43008	; 0xa800
   154d2:	4622      	mov	r2, r4
   154d4:	4b1e      	ldr	r3, [pc, #120]	; (15550 <make_jwt.constprop.0+0xd8>)
   154d6:	31c0      	adds	r1, #192	; 0xc0
   154d8:	a803      	add	r0, sp, #12
   154da:	f009 fc53 	bl	1ed84 <jwt_add_payload>
    if (err != 0) {
   154de:	4604      	mov	r4, r0
   154e0:	b168      	cbz	r0, 154fe <make_jwt.constprop.0+0x86>
        LOG_ERR("Unable to add JWT payload: %d", err);
   154e2:	2301      	movs	r3, #1
   154e4:	f04f 0000 	mov.w	r0, #0
   154e8:	4a15      	ldr	r2, [pc, #84]	; (15540 <make_jwt.constprop.0+0xc8>)
   154ea:	f363 0007 	bfi	r0, r3, #0, #8
   154ee:	4b15      	ldr	r3, [pc, #84]	; (15544 <make_jwt.constprop.0+0xcc>)
   154f0:	4918      	ldr	r1, [pc, #96]	; (15554 <make_jwt.constprop.0+0xdc>)
   154f2:	1a9b      	subs	r3, r3, r2
   154f4:	08db      	lsrs	r3, r3, #3
   154f6:	f363 108f 	bfi	r0, r3, #6, #10
   154fa:	4622      	mov	r2, r4
   154fc:	e7d3      	b.n	154a6 <make_jwt.constprop.0+0x2e>
    err = jwt_sign(&jb, zepfull_private_der, zepfull_private_der_len);
   154fe:	4b16      	ldr	r3, [pc, #88]	; (15558 <make_jwt.constprop.0+0xe0>)
   15500:	4916      	ldr	r1, [pc, #88]	; (1555c <make_jwt.constprop.0+0xe4>)
   15502:	681a      	ldr	r2, [r3, #0]
   15504:	a803      	add	r0, sp, #12
   15506:	f009 fc59 	bl	1edbc <jwt_sign>
    if (err != 0) {
   1550a:	4604      	mov	r4, r0
   1550c:	2800      	cmp	r0, #0
   1550e:	d1e8      	bne.n	154e2 <make_jwt.constprop.0+0x6a>
    if (jb.overflowed != 0) {
   15510:	f89d 3018 	ldrb.w	r3, [sp, #24]
   15514:	2b00      	cmp	r3, #0
   15516:	d0c8      	beq.n	154aa <make_jwt.constprop.0+0x32>
        LOG_ERR("JWT buffer overflowed");
   15518:	2301      	movs	r3, #1
   1551a:	f04f 0000 	mov.w	r0, #0
   1551e:	4a08      	ldr	r2, [pc, #32]	; (15540 <make_jwt.constprop.0+0xc8>)
   15520:	f363 0007 	bfi	r0, r3, #0, #8
   15524:	4b07      	ldr	r3, [pc, #28]	; (15544 <make_jwt.constprop.0+0xcc>)
   15526:	490e      	ldr	r1, [pc, #56]	; (15560 <make_jwt.constprop.0+0xe8>)
   15528:	1a9b      	subs	r3, r3, r2
   1552a:	08db      	lsrs	r3, r3, #3
   1552c:	f363 108f 	bfi	r0, r3, #6, #10
   15530:	f01e fb57 	bl	33be2 <log_string_sync>
        return -ENOMEM;
   15534:	f06f 040b 	mvn.w	r4, #11
   15538:	e7b7      	b.n	154aa <make_jwt.constprop.0+0x32>
   1553a:	bf00      	nop
   1553c:	20027625 	.word	0x20027625
   15540:	00039f48 	.word	0x00039f48
   15544:	00039f88 	.word	0x00039f88
   15548:	0003c170 	.word	0x0003c170
   1554c:	0003c18f 	.word	0x0003c18f
   15550:	0003c1a3 	.word	0x0003c1a3
   15554:	0003c1b6 	.word	0x0003c1b6
   15558:	20020084 	.word	0x20020084
   1555c:	20020404 	.word	0x20020404
   15560:	0003c1d4 	.word	0x0003c1d4

00015564 <reconnect_timer_handler>:

void reconnect_timer_handler(struct k_timer *timer_id) {
   15564:	b530      	push	{r4, r5, lr}
   15566:	b087      	sub	sp, #28
    struct gcloud_event cmd = {
   15568:	2218      	movs	r2, #24
   1556a:	2100      	movs	r1, #0
   1556c:	4668      	mov	r0, sp
   1556e:	f023 fd62 	bl	39036 <memset>
   15572:	2305      	movs	r3, #5
   15574:	f88d 3000 	strb.w	r3, [sp]
   15578:	2200      	movs	r2, #0
   1557a:	4669      	mov	r1, sp
   1557c:	480c      	ldr	r0, [pc, #48]	; (155b0 <reconnect_timer_handler+0x4c>)
   1557e:	f016 febd 	bl	2c2fc <z_impl_k_msgq_put>
        .type = RECONNECT_TIMEOUT,
        .param = {}
    };
    int err = k_msgq_put(&gcloud_msgq, &cmd, K_NO_WAIT);

    if (err) {
   15582:	4605      	mov	r5, r0
   15584:	b190      	cbz	r0, 155ac <reconnect_timer_handler+0x48>
        LOG_ERR("k_msgq_put (reconnect_timeout) failed: [%d] %s", err, strerror(err));
   15586:	2301      	movs	r3, #1
   15588:	f04f 0400 	mov.w	r4, #0
   1558c:	4a09      	ldr	r2, [pc, #36]	; (155b4 <reconnect_timer_handler+0x50>)
   1558e:	f363 0407 	bfi	r4, r3, #0, #8
   15592:	4b09      	ldr	r3, [pc, #36]	; (155b8 <reconnect_timer_handler+0x54>)
   15594:	1a9b      	subs	r3, r3, r2
   15596:	08db      	lsrs	r3, r3, #3
   15598:	f363 148f 	bfi	r4, r3, #6, #10
   1559c:	f01c fda0 	bl	320e0 <strerror>
   155a0:	462a      	mov	r2, r5
   155a2:	4603      	mov	r3, r0
   155a4:	4905      	ldr	r1, [pc, #20]	; (155bc <reconnect_timer_handler+0x58>)
   155a6:	4620      	mov	r0, r4
   155a8:	f01e fb1b 	bl	33be2 <log_string_sync>
        // TODO: Find a way to report this error to the application.
    }
}
   155ac:	b007      	add	sp, #28
   155ae:	bd30      	pop	{r4, r5, pc}
   155b0:	200207a0 	.word	0x200207a0
   155b4:	00039f48 	.word	0x00039f48
   155b8:	00039f88 	.word	0x00039f88
   155bc:	0003c48a 	.word	0x0003c48a

000155c0 <gcloud_provision>:
int gcloud_provision(void) {
   155c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
            LOG_ERR("key delete err: [%d] %s", err, strerror(err));
   155c4:	2500      	movs	r5, #0
   155c6:	4c1f      	ldr	r4, [pc, #124]	; (15644 <gcloud_provision+0x84>)
   155c8:	4b1f      	ldr	r3, [pc, #124]	; (15648 <gcloud_provision+0x88>)
        err = modem_key_mgmt_delete(sec_tag, type);
   155ca:	4f20      	ldr	r7, [pc, #128]	; (1564c <gcloud_provision+0x8c>)
            LOG_ERR("key delete err: [%d] %s", err, strerror(err));
   155cc:	1ae4      	subs	r4, r4, r3
   155ce:	f8df 8088 	ldr.w	r8, [pc, #136]	; 15658 <gcloud_provision+0x98>
   155d2:	f3c4 04c9 	ubfx	r4, r4, #3, #10
        err = modem_key_mgmt_delete(sec_tag, type);
   155d6:	b2e9      	uxtb	r1, r5
   155d8:	4638      	mov	r0, r7
   155da:	f00c fbd1 	bl	21d80 <modem_key_mgmt_delete>
        if (err) {
   155de:	4681      	mov	r9, r0
   155e0:	b178      	cbz	r0, 15602 <gcloud_provision+0x42>
            LOG_ERR("key delete err: [%d] %s", err, strerror(err));
   155e2:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
   155e6:	f043 0301 	orr.w	r3, r3, #1
   155ea:	f363 0607 	bfi	r6, r3, #0, #8
   155ee:	f01c fd77 	bl	320e0 <strerror>
   155f2:	f364 168f 	bfi	r6, r4, #6, #10
   155f6:	4603      	mov	r3, r0
   155f8:	464a      	mov	r2, r9
   155fa:	4641      	mov	r1, r8
   155fc:	4630      	mov	r0, r6
   155fe:	f01e faf0 	bl	33be2 <log_string_sync>
   15602:	3501      	adds	r5, #1
    for (enum modem_key_mgnt_cred_type type = 0; type < 5; type++) {
   15604:	2d05      	cmp	r5, #5
   15606:	d1e6      	bne.n	155d6 <gcloud_provision+0x16>
    err = modem_key_mgmt_write(
   15608:	4811      	ldr	r0, [pc, #68]	; (15650 <gcloud_provision+0x90>)
   1560a:	f7fc fd39 	bl	12080 <strlen>
   1560e:	4a10      	ldr	r2, [pc, #64]	; (15650 <gcloud_provision+0x90>)
   15610:	4603      	mov	r3, r0
   15612:	2100      	movs	r1, #0
   15614:	480d      	ldr	r0, [pc, #52]	; (1564c <gcloud_provision+0x8c>)
   15616:	f00c fb7b 	bl	21d10 <modem_key_mgmt_write>
    if (err != 0) {
   1561a:	4606      	mov	r6, r0
   1561c:	b170      	cbz	r0, 1563c <gcloud_provision+0x7c>
        LOG_ERR("GCLOUD_CA_CERTIFICATE err: [%d] %s\n", err, strerror(err));
   1561e:	2301      	movs	r3, #1
   15620:	f04f 0500 	mov.w	r5, #0
   15624:	f363 0507 	bfi	r5, r3, #0, #8
   15628:	f01c fd5a 	bl	320e0 <strerror>
   1562c:	f364 158f 	bfi	r5, r4, #6, #10
   15630:	4603      	mov	r3, r0
   15632:	4632      	mov	r2, r6
   15634:	4907      	ldr	r1, [pc, #28]	; (15654 <gcloud_provision+0x94>)
   15636:	4628      	mov	r0, r5
   15638:	f01e fad3 	bl	33be2 <log_string_sync>
}
   1563c:	4630      	mov	r0, r6
   1563e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   15642:	bf00      	nop
   15644:	00039f88 	.word	0x00039f88
   15648:	00039f48 	.word	0x00039f48
   1564c:	01010000 	.word	0x01010000
   15650:	0003bb03 	.word	0x0003bb03
   15654:	0003bd39 	.word	0x0003bd39
   15658:	0003baeb 	.word	0x0003baeb

0001565c <gcloud_connect>:
int gcloud_connect(received_config_handler_t received_config_cb) {
   1565c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    received_config_handler = received_config_cb;
   1565e:	4b08      	ldr	r3, [pc, #32]	; (15680 <gcloud_connect+0x24>)
    struct gcloud_event msg = {
   15660:	2218      	movs	r2, #24
    received_config_handler = received_config_cb;
   15662:	6018      	str	r0, [r3, #0]
    struct gcloud_event msg = {
   15664:	2100      	movs	r1, #0
   15666:	4668      	mov	r0, sp
   15668:	f023 fce5 	bl	39036 <memset>
    err = k_msgq_put_atomic(&gcloud_msgq, &msg, K_FOREVER);
   1566c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15670:	4669      	mov	r1, sp
   15672:	4804      	ldr	r0, [pc, #16]	; (15684 <gcloud_connect+0x28>)
   15674:	f01d fb0e 	bl	32c94 <k_msgq_put_atomic>
}
   15678:	b007      	add	sp, #28
   1567a:	f85d fb04 	ldr.w	pc, [sp], #4
   1567e:	bf00      	nop
   15680:	20021530 	.word	0x20021530
   15684:	200207a0 	.word	0x200207a0

00015688 <gcloud_publish>:
{
   15688:	b570      	push	{r4, r5, r6, lr}
    if (!connected) {
   1568a:	4b16      	ldr	r3, [pc, #88]	; (156e4 <gcloud_publish+0x5c>)
{
   1568c:	b086      	sub	sp, #24
    if (!connected) {
   1568e:	781b      	ldrb	r3, [r3, #0]
{
   15690:	4605      	mov	r5, r0
   15692:	460c      	mov	r4, r1
   15694:	4616      	mov	r6, r2
    if (!connected) {
   15696:	b98b      	cbnz	r3, 156bc <gcloud_publish+0x34>
        LOG_WRN("Cannot publish data while not connected to Google Cloud");
   15698:	2302      	movs	r3, #2
   1569a:	f04f 0000 	mov.w	r0, #0
   1569e:	4a12      	ldr	r2, [pc, #72]	; (156e8 <gcloud_publish+0x60>)
   156a0:	f363 0007 	bfi	r0, r3, #0, #8
   156a4:	4b11      	ldr	r3, [pc, #68]	; (156ec <gcloud_publish+0x64>)
   156a6:	4912      	ldr	r1, [pc, #72]	; (156f0 <gcloud_publish+0x68>)
   156a8:	1a9b      	subs	r3, r3, r2
   156aa:	08db      	lsrs	r3, r3, #3
   156ac:	f363 108f 	bfi	r0, r3, #6, #10
   156b0:	f01e fa97 	bl	33be2 <log_string_sync>
        return -ENOTCONN;
   156b4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   156b8:	b006      	add	sp, #24
   156ba:	bd70      	pop	{r4, r5, r6, pc}
    struct gcloud_event cmd = {
   156bc:	2304      	movs	r3, #4
   156be:	480d      	ldr	r0, [pc, #52]	; (156f4 <gcloud_publish+0x6c>)
   156c0:	f88d 3000 	strb.w	r3, [sp]
   156c4:	9001      	str	r0, [sp, #4]
                    .size = strlen(GCLOUD_TOPIC)
   156c6:	f7fc fcdb 	bl	12080 <strlen>
    err = k_msgq_put_atomic(&gcloud_msgq, &cmd, K_FOREVER);
   156ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    struct gcloud_event cmd = {
   156ce:	9002      	str	r0, [sp, #8]
    err = k_msgq_put_atomic(&gcloud_msgq, &cmd, K_FOREVER);
   156d0:	4669      	mov	r1, sp
   156d2:	4809      	ldr	r0, [pc, #36]	; (156f8 <gcloud_publish+0x70>)
    struct gcloud_event cmd = {
   156d4:	f88d 600c 	strb.w	r6, [sp, #12]
   156d8:	e9cd 5404 	strd	r5, r4, [sp, #16]
    err = k_msgq_put_atomic(&gcloud_msgq, &cmd, K_FOREVER);
   156dc:	f01d fada 	bl	32c94 <k_msgq_put_atomic>
    return err;
   156e0:	e7ea      	b.n	156b8 <gcloud_publish+0x30>
   156e2:	bf00      	nop
   156e4:	20027623 	.word	0x20027623
   156e8:	00039f48 	.word	0x00039f48
   156ec:	00039f88 	.word	0x00039f88
   156f0:	0003bd5d 	.word	0x0003bd5d
   156f4:	0003bd95 	.word	0x0003bd95
   156f8:	200207a0 	.word	0x200207a0

000156fc <mqtt_event_handler>:

static void mqtt_event_handler(struct mqtt_client *client,
                const struct mqtt_evt *evt)
{
   156fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int err;
    LOG_INF("MQTT event: %d", evt->type);
   15700:	2303      	movs	r3, #3
{
   15702:	4680      	mov	r8, r0
    LOG_INF("MQTT event: %d", evt->type);
   15704:	f04f 0000 	mov.w	r0, #0
{
   15708:	460d      	mov	r5, r1
    LOG_INF("MQTT event: %d", evt->type);
   1570a:	f363 0007 	bfi	r0, r3, #0, #8
   1570e:	4cb7      	ldr	r4, [pc, #732]	; (159ec <mqtt_event_handler+0x2f0>)
   15710:	4bb7      	ldr	r3, [pc, #732]	; (159f0 <mqtt_event_handler+0x2f4>)
   15712:	780a      	ldrb	r2, [r1, #0]
   15714:	1ae4      	subs	r4, r4, r3
   15716:	f3c4 04c9 	ubfx	r4, r4, #3, #10
{
   1571a:	b08a      	sub	sp, #40	; 0x28
    LOG_INF("MQTT event: %d", evt->type);
   1571c:	f364 108f 	bfi	r0, r4, #6, #10
   15720:	49b4      	ldr	r1, [pc, #720]	; (159f4 <mqtt_event_handler+0x2f8>)
   15722:	f01e fa5e 	bl	33be2 <log_string_sync>

    switch (evt->type) {
   15726:	782b      	ldrb	r3, [r5, #0]
   15728:	2b08      	cmp	r3, #8
   1572a:	f200 81f5 	bhi.w	15b18 <mqtt_event_handler+0x41c>
   1572e:	e8df f013 	tbh	[pc, r3, lsl #1]
   15732:	0009      	.short	0x0009
   15734:	005800e2 	.word	0x005800e2
   15738:	0130011a 	.word	0x0130011a
   1573c:	01af0197 	.word	0x01af0197
   15740:	01db01c3 	.word	0x01db01c3
        /* Response to connack request */
        case MQTT_EVT_CONNACK:
            LOG_DBG("Got CONNACK");
   15744:	2304      	movs	r3, #4
   15746:	f04f 0000 	mov.w	r0, #0
   1574a:	f363 0007 	bfi	r0, r3, #0, #8
   1574e:	f364 108f 	bfi	r0, r4, #6, #10
   15752:	4aa9      	ldr	r2, [pc, #676]	; (159f8 <mqtt_event_handler+0x2fc>)
   15754:	49a9      	ldr	r1, [pc, #676]	; (159fc <mqtt_event_handler+0x300>)
   15756:	f01e fa44 	bl	33be2 <log_string_sync>
            if (evt->result != 0) {
   1575a:	69ed      	ldr	r5, [r5, #28]
   1575c:	b1b5      	cbz	r5, 1578c <mqtt_event_handler+0x90>
                LOG_ERR("MQTT connect failed: [%d] %s", err, strerror(err));
   1575e:	2301      	movs	r3, #1
   15760:	f04f 0500 	mov.w	r5, #0
   15764:	f363 0507 	bfi	r5, r3, #0, #8
   15768:	f364 158f 	bfi	r5, r4, #6, #10
   1576c:	2400      	movs	r4, #0
   1576e:	4620      	mov	r0, r4
   15770:	f01c fcb6 	bl	320e0 <strerror>
   15774:	4622      	mov	r2, r4
   15776:	4603      	mov	r3, r0
   15778:	49a1      	ldr	r1, [pc, #644]	; (15a00 <mqtt_event_handler+0x304>)
   1577a:	4628      	mov	r0, r5
   1577c:	f01e fa31 	bl	33be2 <log_string_sync>
                sys_reboot(0); //TODO: Handle error
   15780:	4620      	mov	r0, r4
   15782:	f004 fb81 	bl	19e88 <sys_reboot>
        
        default:
            LOG_ERR("Unknown mqtt event type");
            break;
    }
}
   15786:	b00a      	add	sp, #40	; 0x28
   15788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            connected = true;
   1578c:	2201      	movs	r2, #1
   1578e:	4b9d      	ldr	r3, [pc, #628]	; (15a04 <mqtt_event_handler+0x308>)
   15790:	701a      	strb	r2, [r3, #0]
            connecting = false;
   15792:	4b9d      	ldr	r3, [pc, #628]	; (15a08 <mqtt_event_handler+0x30c>)
   15794:	701d      	strb	r5, [r3, #0]
	z_impl_k_timer_start(timer, duration, period);
   15796:	4a9d      	ldr	r2, [pc, #628]	; (15a0c <mqtt_event_handler+0x310>)
   15798:	489d      	ldr	r0, [pc, #628]	; (15a10 <mqtt_event_handler+0x314>)
   1579a:	4611      	mov	r1, r2
   1579c:	f019 fb16 	bl	2edcc <z_impl_k_timer_start>
            struct gcloud_event cmd = {
   157a0:	2218      	movs	r2, #24
   157a2:	4629      	mov	r1, r5
   157a4:	a802      	add	r0, sp, #8
   157a6:	f023 fc46 	bl	39036 <memset>
   157aa:	2307      	movs	r3, #7
            err = k_msgq_put_atomic(&gcloud_msgq, &cmd, K_FOREVER);
   157ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   157b0:	a902      	add	r1, sp, #8
   157b2:	4898      	ldr	r0, [pc, #608]	; (15a14 <mqtt_event_handler+0x318>)
            struct gcloud_event cmd = {
   157b4:	f88d 3008 	strb.w	r3, [sp, #8]
            err = k_msgq_put_atomic(&gcloud_msgq, &cmd, K_FOREVER);
   157b8:	f01d fa6c 	bl	32c94 <k_msgq_put_atomic>
            if (err) {
   157bc:	4606      	mov	r6, r0
   157be:	2800      	cmp	r0, #0
   157c0:	d0e1      	beq.n	15786 <mqtt_event_handler+0x8a>
                LOG_ERR("k_msgq_put_atomic (subscribe) failed: [%d] %s", err, strerror(err));
   157c2:	2301      	movs	r3, #1
   157c4:	f04f 0500 	mov.w	r5, #0
   157c8:	f363 0507 	bfi	r5, r3, #0, #8
   157cc:	f01c fc88 	bl	320e0 <strerror>
   157d0:	4632      	mov	r2, r6
   157d2:	4603      	mov	r3, r0
   157d4:	4990      	ldr	r1, [pc, #576]	; (15a18 <mqtt_event_handler+0x31c>)
   157d6:	f364 158f 	bfi	r5, r4, #6, #10
                    LOG_ERR("k_msgq_put_atomic (reconnect) [%d] %s", err, strerror(err));
   157da:	4628      	mov	r0, r5
   157dc:	f01e fa01 	bl	33be2 <log_string_sync>
   157e0:	e7d1      	b.n	15786 <mqtt_event_handler+0x8a>
            LOG_DBG("MQTT PUBLISH event");
   157e2:	2304      	movs	r3, #4
   157e4:	f04f 0000 	mov.w	r0, #0
   157e8:	f363 0007 	bfi	r0, r3, #0, #8
   157ec:	f364 108f 	bfi	r0, r4, #6, #10
   157f0:	4a81      	ldr	r2, [pc, #516]	; (159f8 <mqtt_event_handler+0x2fc>)
   157f2:	498a      	ldr	r1, [pc, #552]	; (15a1c <mqtt_event_handler+0x320>)
   157f4:	f01e f9f5 	bl	33be2 <log_string_sync>
            if (evt->result != 0) {
   157f8:	69ef      	ldr	r7, [r5, #28]
   157fa:	b17f      	cbz	r7, 1581c <mqtt_event_handler+0x120>
                LOG_ERR("Publish event error: [%d] %s", evt->result, strerror(-evt->result));
   157fc:	2301      	movs	r3, #1
   157fe:	f04f 0600 	mov.w	r6, #0
   15802:	4278      	negs	r0, r7
   15804:	f363 0607 	bfi	r6, r3, #0, #8
   15808:	f01c fc6a 	bl	320e0 <strerror>
   1580c:	f364 168f 	bfi	r6, r4, #6, #10
   15810:	4603      	mov	r3, r0
   15812:	463a      	mov	r2, r7
   15814:	4982      	ldr	r1, [pc, #520]	; (15a20 <mqtt_event_handler+0x324>)
   15816:	4630      	mov	r0, r6
   15818:	f01e f9e3 	bl	33be2 <log_string_sync>
            if (evt->param.publish.message.topic.qos == MQTT_QOS_1_AT_LEAST_ONCE) {
   1581c:	7b2b      	ldrb	r3, [r5, #12]
   1581e:	2b01      	cmp	r3, #1
   15820:	d110      	bne.n	15844 <mqtt_event_handler+0x148>
                const struct mqtt_puback_param ack = {
   15822:	8b2b      	ldrh	r3, [r5, #24]
                mqtt_publish_qos1_ack(client, &ack);
   15824:	a902      	add	r1, sp, #8
   15826:	4640      	mov	r0, r8
                const struct mqtt_puback_param ack = {
   15828:	f8ad 3008 	strh.w	r3, [sp, #8]
                mqtt_publish_qos1_ack(client, &ack);
   1582c:	f022 f877 	bl	3791e <mqtt_publish_qos1_ack>
                LOG_INF("Send acknowledgement");
   15830:	f04f 0000 	mov.w	r0, #0
   15834:	2303      	movs	r3, #3
   15836:	f363 0007 	bfi	r0, r3, #0, #8
   1583a:	f364 108f 	bfi	r0, r4, #6, #10
   1583e:	4979      	ldr	r1, [pc, #484]	; (15a24 <mqtt_event_handler+0x328>)
   15840:	f01e f9cf 	bl	33be2 <log_string_sync>
            if(evt->param.publish.message.payload.len <= 2) {
   15844:	696b      	ldr	r3, [r5, #20]
                LOG_WRN("Received empty payload");
   15846:	f04f 0000 	mov.w	r0, #0
            if(evt->param.publish.message.payload.len <= 2) {
   1584a:	2b02      	cmp	r3, #2
   1584c:	d808      	bhi.n	15860 <mqtt_event_handler+0x164>
                LOG_WRN("Received empty payload");
   1584e:	2302      	movs	r3, #2
   15850:	4975      	ldr	r1, [pc, #468]	; (15a28 <mqtt_event_handler+0x32c>)
   15852:	f363 0007 	bfi	r0, r3, #0, #8
   15856:	f364 108f 	bfi	r0, r4, #6, #10
            LOG_ERR("Unknown mqtt event type");
   1585a:	f01e f9c2 	bl	33be2 <log_string_sync>
}
   1585e:	e792      	b.n	15786 <mqtt_event_handler+0x8a>
            LOG_DBG("Length of payload: %d", evt->param.publish.message.payload.len);
   15860:	2204      	movs	r2, #4
   15862:	f362 0007 	bfi	r0, r2, #0, #8
   15866:	f364 108f 	bfi	r0, r4, #6, #10
   1586a:	4a63      	ldr	r2, [pc, #396]	; (159f8 <mqtt_event_handler+0x2fc>)
   1586c:	496f      	ldr	r1, [pc, #444]	; (15a2c <mqtt_event_handler+0x330>)
   1586e:	f01e f9b8 	bl	33be2 <log_string_sync>
            LOG_DBG("Topic: %s", log_strdup(evt->param.publish.message.topic.topic.utf8));
   15872:	f04f 0600 	mov.w	r6, #0
   15876:	2304      	movs	r3, #4
   15878:	6868      	ldr	r0, [r5, #4]
   1587a:	f363 0607 	bfi	r6, r3, #0, #8
   1587e:	f01e f9c2 	bl	33c06 <log_strdup>
   15882:	f364 168f 	bfi	r6, r4, #6, #10
   15886:	4603      	mov	r3, r0
   15888:	4a5b      	ldr	r2, [pc, #364]	; (159f8 <mqtt_event_handler+0x2fc>)
   1588a:	4630      	mov	r0, r6
   1588c:	4968      	ldr	r1, [pc, #416]	; (15a30 <mqtt_event_handler+0x334>)
   1588e:	f01e f9a8 	bl	33be2 <log_string_sync>
            LOG_DBG("QoS: %d", evt->param.publish.message.topic.qos);
   15892:	2304      	movs	r3, #4
   15894:	f04f 0000 	mov.w	r0, #0
   15898:	f363 0007 	bfi	r0, r3, #0, #8
   1589c:	f364 108f 	bfi	r0, r4, #6, #10
   158a0:	7b2b      	ldrb	r3, [r5, #12]
   158a2:	4a55      	ldr	r2, [pc, #340]	; (159f8 <mqtt_event_handler+0x2fc>)
   158a4:	4963      	ldr	r1, [pc, #396]	; (15a34 <mqtt_event_handler+0x338>)
   158a6:	f01e f99c 	bl	33be2 <log_string_sync>
            LOG_DBG("Message:\n");
   158aa:	2304      	movs	r3, #4
   158ac:	f04f 0000 	mov.w	r0, #0
            struct mqtt_evt event = *evt;
   158b0:	462e      	mov	r6, r5
            LOG_DBG("Message:\n");
   158b2:	f363 0007 	bfi	r0, r3, #0, #8
   158b6:	f364 108f 	bfi	r0, r4, #6, #10
   158ba:	4a4f      	ldr	r2, [pc, #316]	; (159f8 <mqtt_event_handler+0x2fc>)
   158bc:	495e      	ldr	r1, [pc, #376]	; (15a38 <mqtt_event_handler+0x33c>)
            struct mqtt_evt event = *evt;
   158be:	ac02      	add	r4, sp, #8
            LOG_DBG("Message:\n");
   158c0:	f01e f98f 	bl	33be2 <log_string_sync>
            struct mqtt_evt event = *evt;
   158c4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   158c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   158c8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   158cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            char * str = calloc(evt->param.publish.message.payload.len, sizeof(char) + 1);
   158d0:	2102      	movs	r1, #2
   158d2:	6968      	ldr	r0, [r5, #20]
   158d4:	f01b fc82 	bl	311dc <calloc>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   158d8:	e9d5 1204 	ldrd	r1, r2, [r5, #16]
   158dc:	4604      	mov	r4, r0
   158de:	f023 fb70 	bl	38fc2 <memcpy>
            if (received_config_handler != NULL) {
   158e2:	4b56      	ldr	r3, [pc, #344]	; (15a3c <mqtt_event_handler+0x340>)
            event.param.publish.message.payload.data = str;
   158e4:	9406      	str	r4, [sp, #24]
            if (received_config_handler != NULL) {
   158e6:	681b      	ldr	r3, [r3, #0]
   158e8:	b10b      	cbz	r3, 158ee <mqtt_event_handler+0x1f2>
                received_config_handler(&event.param.publish.message);
   158ea:	a803      	add	r0, sp, #12
   158ec:	4798      	blx	r3
            free(str);
   158ee:	4620      	mov	r0, r4
   158f0:	f01b fc96 	bl	31220 <free>
            break;
   158f4:	e747      	b.n	15786 <mqtt_event_handler+0x8a>
            LOG_DBG("MQTT client disconnected: [%d] %s", evt->result, strerror(-evt->result));
   158f6:	2304      	movs	r3, #4
   158f8:	f04f 0600 	mov.w	r6, #0
   158fc:	69ed      	ldr	r5, [r5, #28]
   158fe:	f363 0607 	bfi	r6, r3, #0, #8
   15902:	4268      	negs	r0, r5
   15904:	f01c fbec 	bl	320e0 <strerror>
   15908:	f364 168f 	bfi	r6, r4, #6, #10
   1590c:	9000      	str	r0, [sp, #0]
   1590e:	462b      	mov	r3, r5
   15910:	4a39      	ldr	r2, [pc, #228]	; (159f8 <mqtt_event_handler+0x2fc>)
   15912:	494b      	ldr	r1, [pc, #300]	; (15a40 <mqtt_event_handler+0x344>)
   15914:	4630      	mov	r0, r6
   15916:	f01e f964 	bl	33be2 <log_string_sync>
	z_impl_k_timer_stop(timer);
   1591a:	484a      	ldr	r0, [pc, #296]	; (15a44 <mqtt_event_handler+0x348>)
   1591c:	f023 fab7 	bl	38e8e <z_impl_k_timer_stop>
   15920:	483b      	ldr	r0, [pc, #236]	; (15a10 <mqtt_event_handler+0x314>)
   15922:	f023 fab4 	bl	38e8e <z_impl_k_timer_stop>
		arch_syscall_invoke1(*(uintptr_t *)&msgq, K_SYSCALL_K_MSGQ_PURGE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_msgq_purge(msgq);
   15926:	483b      	ldr	r0, [pc, #236]	; (15a14 <mqtt_event_handler+0x318>)
   15928:	f016 fe28 	bl	2c57c <z_impl_k_msgq_purge>
            if (connected || connecting) {
   1592c:	4b35      	ldr	r3, [pc, #212]	; (15a04 <mqtt_event_handler+0x308>)
   1592e:	781b      	ldrb	r3, [r3, #0]
   15930:	b923      	cbnz	r3, 1593c <mqtt_event_handler+0x240>
   15932:	4b35      	ldr	r3, [pc, #212]	; (15a08 <mqtt_event_handler+0x30c>)
   15934:	781b      	ldrb	r3, [r3, #0]
   15936:	2b00      	cmp	r3, #0
   15938:	f43f af25 	beq.w	15786 <mqtt_event_handler+0x8a>
                err = gcloud_connect(received_config_handler);
   1593c:	4b3f      	ldr	r3, [pc, #252]	; (15a3c <mqtt_event_handler+0x340>)
   1593e:	6818      	ldr	r0, [r3, #0]
   15940:	f7ff fe8c 	bl	1565c <gcloud_connect>
                if (err) {
   15944:	4606      	mov	r6, r0
   15946:	2800      	cmp	r0, #0
   15948:	f43f af1d 	beq.w	15786 <mqtt_event_handler+0x8a>
                    LOG_ERR("k_msgq_put_atomic (reconnect) [%d] %s", err, strerror(err));
   1594c:	2301      	movs	r3, #1
   1594e:	f04f 0500 	mov.w	r5, #0
   15952:	f363 0507 	bfi	r5, r3, #0, #8
   15956:	f01c fbc3 	bl	320e0 <strerror>
   1595a:	f364 158f 	bfi	r5, r4, #6, #10
   1595e:	4603      	mov	r3, r0
   15960:	4632      	mov	r2, r6
   15962:	4939      	ldr	r1, [pc, #228]	; (15a48 <mqtt_event_handler+0x34c>)
   15964:	e739      	b.n	157da <mqtt_event_handler+0xde>
            if (evt->result != 0) {
   15966:	69ea      	ldr	r2, [r5, #28]
                LOG_ERR("MQTT PUBACK error: %d", evt->result);
   15968:	f04f 0000 	mov.w	r0, #0
            if (evt->result != 0) {
   1596c:	b142      	cbz	r2, 15980 <mqtt_event_handler+0x284>
                LOG_ERR("MQTT PUBACK error: %d", evt->result);
   1596e:	2301      	movs	r3, #1
   15970:	4936      	ldr	r1, [pc, #216]	; (15a4c <mqtt_event_handler+0x350>)
   15972:	f363 0007 	bfi	r0, r3, #0, #8
   15976:	f364 108f 	bfi	r0, r4, #6, #10
                LOG_ERR("MQTT UNSUBACK error: %d", evt->result);
   1597a:	f01e f932 	bl	33be2 <log_string_sync>
   1597e:	e702      	b.n	15786 <mqtt_event_handler+0x8a>
            LOG_DBG("PUBACK packet id: %d\n", evt->param.puback.message_id);
   15980:	2304      	movs	r3, #4
   15982:	f363 0007 	bfi	r0, r3, #0, #8
   15986:	f364 108f 	bfi	r0, r4, #6, #10
   1598a:	88ab      	ldrh	r3, [r5, #4]
   1598c:	4a1a      	ldr	r2, [pc, #104]	; (159f8 <mqtt_event_handler+0x2fc>)
   1598e:	4930      	ldr	r1, [pc, #192]	; (15a50 <mqtt_event_handler+0x354>)
   15990:	e724      	b.n	157dc <mqtt_event_handler+0xe0>
            if (evt->result != 0) {
   15992:	69ea      	ldr	r2, [r5, #28]
                LOG_ERR("MQTT PUBREC error: %d", evt->result);
   15994:	f04f 0000 	mov.w	r0, #0
            if (evt->result != 0) {
   15998:	b132      	cbz	r2, 159a8 <mqtt_event_handler+0x2ac>
                LOG_ERR("MQTT PUBREC error: %d", evt->result);
   1599a:	2301      	movs	r3, #1
   1599c:	f363 0007 	bfi	r0, r3, #0, #8
   159a0:	f364 108f 	bfi	r0, r4, #6, #10
   159a4:	492b      	ldr	r1, [pc, #172]	; (15a54 <mqtt_event_handler+0x358>)
   159a6:	e7e8      	b.n	1597a <mqtt_event_handler+0x27e>
            LOG_DBG("PUBREC packet id: %u", evt->param.pubrec.message_id);
   159a8:	2304      	movs	r3, #4
   159aa:	f363 0007 	bfi	r0, r3, #0, #8
   159ae:	f364 108f 	bfi	r0, r4, #6, #10
   159b2:	88ab      	ldrh	r3, [r5, #4]
   159b4:	4a10      	ldr	r2, [pc, #64]	; (159f8 <mqtt_event_handler+0x2fc>)
   159b6:	4928      	ldr	r1, [pc, #160]	; (15a58 <mqtt_event_handler+0x35c>)
   159b8:	f01e f913 	bl	33be2 <log_string_sync>
            const struct mqtt_pubrel_param rel_param = {
   159bc:	88ab      	ldrh	r3, [r5, #4]
            err = mqtt_publish_qos2_release(client, &rel_param);
   159be:	a902      	add	r1, sp, #8
   159c0:	4640      	mov	r0, r8
            const struct mqtt_pubrel_param rel_param = {
   159c2:	f8ad 3008 	strh.w	r3, [sp, #8]
            err = mqtt_publish_qos2_release(client, &rel_param);
   159c6:	f021 ffd1 	bl	3796c <mqtt_publish_qos2_release>
            if (err != 0) {
   159ca:	4606      	mov	r6, r0
   159cc:	2800      	cmp	r0, #0
   159ce:	f43f aeda 	beq.w	15786 <mqtt_event_handler+0x8a>
                LOG_ERR("Failed to send MQTT PUBREL: [%d] %s", err, strerror(err));
   159d2:	2301      	movs	r3, #1
   159d4:	f04f 0500 	mov.w	r5, #0
   159d8:	f363 0507 	bfi	r5, r3, #0, #8
   159dc:	f01c fb80 	bl	320e0 <strerror>
   159e0:	f364 158f 	bfi	r5, r4, #6, #10
   159e4:	4603      	mov	r3, r0
   159e6:	4632      	mov	r2, r6
   159e8:	491c      	ldr	r1, [pc, #112]	; (15a5c <mqtt_event_handler+0x360>)
   159ea:	e6f6      	b.n	157da <mqtt_event_handler+0xde>
   159ec:	00039f88 	.word	0x00039f88
   159f0:	00039f48 	.word	0x00039f48
   159f4:	0003c1ea 	.word	0x0003c1ea
   159f8:	0003baca 	.word	0x0003baca
   159fc:	0003c1f9 	.word	0x0003c1f9
   15a00:	0003c209 	.word	0x0003c209
   15a04:	20027623 	.word	0x20027623
   15a08:	20027624 	.word	0x20027624
   15a0c:	02932e00 	.word	0x02932e00
   15a10:	20020610 	.word	0x20020610
   15a14:	200207a0 	.word	0x200207a0
   15a18:	0003c226 	.word	0x0003c226
   15a1c:	0003c254 	.word	0x0003c254
   15a20:	0003c26b 	.word	0x0003c26b
   15a24:	0003c288 	.word	0x0003c288
   15a28:	0003c29d 	.word	0x0003c29d
   15a2c:	0003c2b4 	.word	0x0003c2b4
   15a30:	0003c2ce 	.word	0x0003c2ce
   15a34:	0003c2dc 	.word	0x0003c2dc
   15a38:	0003c2e8 	.word	0x0003c2e8
   15a3c:	20021530 	.word	0x20021530
   15a40:	0003c2f6 	.word	0x0003c2f6
   15a44:	200205e4 	.word	0x200205e4
   15a48:	0003c31c 	.word	0x0003c31c
   15a4c:	0003c342 	.word	0x0003c342
   15a50:	0003c358 	.word	0x0003c358
   15a54:	0003c372 	.word	0x0003c372
   15a58:	0003c388 	.word	0x0003c388
   15a5c:	0003c3a1 	.word	0x0003c3a1
            LOG_DBG("MQTT PUBREL event");
   15a60:	2304      	movs	r3, #4
   15a62:	f04f 0000 	mov.w	r0, #0
   15a66:	f363 0007 	bfi	r0, r3, #0, #8
   15a6a:	4a30      	ldr	r2, [pc, #192]	; (15b2c <mqtt_event_handler+0x430>)
   15a6c:	f364 108f 	bfi	r0, r4, #6, #10
   15a70:	492f      	ldr	r1, [pc, #188]	; (15b30 <mqtt_event_handler+0x434>)
   15a72:	f01e f8b6 	bl	33be2 <log_string_sync>
            if (evt->result != 0) {
   15a76:	69ea      	ldr	r2, [r5, #28]
   15a78:	2a00      	cmp	r2, #0
   15a7a:	f43f ae84 	beq.w	15786 <mqtt_event_handler+0x8a>
                LOG_ERR("PUBREL error: %d", evt->result);
   15a7e:	f04f 0000 	mov.w	r0, #0
   15a82:	2301      	movs	r3, #1
   15a84:	f363 0007 	bfi	r0, r3, #0, #8
   15a88:	f364 108f 	bfi	r0, r4, #6, #10
   15a8c:	4929      	ldr	r1, [pc, #164]	; (15b34 <mqtt_event_handler+0x438>)
   15a8e:	e774      	b.n	1597a <mqtt_event_handler+0x27e>
            if (evt->result != 0) {
   15a90:	69ea      	ldr	r2, [r5, #28]
                LOG_ERR("MQTT PUBCOMP error: %d", evt->result);
   15a92:	f04f 0000 	mov.w	r0, #0
            if (evt->result != 0) {
   15a96:	b132      	cbz	r2, 15aa6 <mqtt_event_handler+0x3aa>
                LOG_ERR("MQTT PUBCOMP error: %d", evt->result);
   15a98:	2301      	movs	r3, #1
   15a9a:	f363 0007 	bfi	r0, r3, #0, #8
   15a9e:	f364 108f 	bfi	r0, r4, #6, #10
   15aa2:	4925      	ldr	r1, [pc, #148]	; (15b38 <mqtt_event_handler+0x43c>)
   15aa4:	e769      	b.n	1597a <mqtt_event_handler+0x27e>
            LOG_DBG("PUBCOMP packet id: %u", evt->param.pubcomp.message_id);
   15aa6:	2304      	movs	r3, #4
   15aa8:	f363 0007 	bfi	r0, r3, #0, #8
   15aac:	f364 108f 	bfi	r0, r4, #6, #10
   15ab0:	88ab      	ldrh	r3, [r5, #4]
   15ab2:	4a1e      	ldr	r2, [pc, #120]	; (15b2c <mqtt_event_handler+0x430>)
   15ab4:	4921      	ldr	r1, [pc, #132]	; (15b3c <mqtt_event_handler+0x440>)
   15ab6:	e691      	b.n	157dc <mqtt_event_handler+0xe0>
            LOG_DBG("Got SUBACK");
   15ab8:	2304      	movs	r3, #4
   15aba:	f04f 0000 	mov.w	r0, #0
   15abe:	f363 0007 	bfi	r0, r3, #0, #8
   15ac2:	4a1a      	ldr	r2, [pc, #104]	; (15b2c <mqtt_event_handler+0x430>)
   15ac4:	f364 108f 	bfi	r0, r4, #6, #10
   15ac8:	491d      	ldr	r1, [pc, #116]	; (15b40 <mqtt_event_handler+0x444>)
   15aca:	f01e f88a 	bl	33be2 <log_string_sync>
            if (evt->result != 0) {
   15ace:	69ea      	ldr	r2, [r5, #28]
   15ad0:	2a00      	cmp	r2, #0
   15ad2:	f43f ae58 	beq.w	15786 <mqtt_event_handler+0x8a>
                LOG_ERR("MQTT SUBACK error: %d", evt->result);
   15ad6:	f04f 0000 	mov.w	r0, #0
   15ada:	2301      	movs	r3, #1
   15adc:	f363 0007 	bfi	r0, r3, #0, #8
   15ae0:	f364 108f 	bfi	r0, r4, #6, #10
   15ae4:	4917      	ldr	r1, [pc, #92]	; (15b44 <mqtt_event_handler+0x448>)
   15ae6:	e748      	b.n	1597a <mqtt_event_handler+0x27e>
            LOG_DBG("MQTT UNSUBACK event");
   15ae8:	2304      	movs	r3, #4
   15aea:	f04f 0000 	mov.w	r0, #0
   15aee:	f363 0007 	bfi	r0, r3, #0, #8
   15af2:	4a0e      	ldr	r2, [pc, #56]	; (15b2c <mqtt_event_handler+0x430>)
   15af4:	f364 108f 	bfi	r0, r4, #6, #10
   15af8:	4913      	ldr	r1, [pc, #76]	; (15b48 <mqtt_event_handler+0x44c>)
   15afa:	f01e f872 	bl	33be2 <log_string_sync>
            if (evt->result != 0) {
   15afe:	69ea      	ldr	r2, [r5, #28]
   15b00:	2a00      	cmp	r2, #0
   15b02:	f43f ae40 	beq.w	15786 <mqtt_event_handler+0x8a>
                LOG_ERR("MQTT UNSUBACK error: %d", evt->result);
   15b06:	f04f 0000 	mov.w	r0, #0
   15b0a:	2301      	movs	r3, #1
   15b0c:	f363 0007 	bfi	r0, r3, #0, #8
   15b10:	f364 108f 	bfi	r0, r4, #6, #10
   15b14:	490d      	ldr	r1, [pc, #52]	; (15b4c <mqtt_event_handler+0x450>)
   15b16:	e730      	b.n	1597a <mqtt_event_handler+0x27e>
            LOG_ERR("Unknown mqtt event type");
   15b18:	f04f 0000 	mov.w	r0, #0
   15b1c:	2301      	movs	r3, #1
   15b1e:	f363 0007 	bfi	r0, r3, #0, #8
   15b22:	f364 108f 	bfi	r0, r4, #6, #10
   15b26:	490a      	ldr	r1, [pc, #40]	; (15b50 <mqtt_event_handler+0x454>)
   15b28:	e697      	b.n	1585a <mqtt_event_handler+0x15e>
   15b2a:	bf00      	nop
   15b2c:	0003baca 	.word	0x0003baca
   15b30:	0003c3c5 	.word	0x0003c3c5
   15b34:	0003c3db 	.word	0x0003c3db
   15b38:	0003c3ec 	.word	0x0003c3ec
   15b3c:	0003c403 	.word	0x0003c403
   15b40:	0003c41d 	.word	0x0003c41d
   15b44:	0003c42c 	.word	0x0003c42c
   15b48:	0003c442 	.word	0x0003c442
   15b4c:	0003c45a 	.word	0x0003c45a
   15b50:	0003c472 	.word	0x0003c472

00015b54 <gcloud_thread>:

extern void gcloud_thread(void *unused1, void *unused2, void *unused3) 
{
   15b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bool sent_flag = false;

    struct gcloud_event event;
    struct mqtt_publish_param msg;

    k_timer_init(&input_timer, input_timer_handler, NULL);
   15b58:	2200      	movs	r2, #0
{
   15b5a:	b0b9      	sub	sp, #228	; 0xe4
    k_timer_init(&input_timer, input_timer_handler, NULL);
   15b5c:	49a9      	ldr	r1, [pc, #676]	; (15e04 <gcloud_thread+0x2b0>)
   15b5e:	48aa      	ldr	r0, [pc, #680]	; (15e08 <gcloud_thread+0x2b4>)
   15b60:	f023 f989 	bl	38e76 <k_timer_init>
    k_timer_init(&reconnect_timer, reconnect_timer_handler, NULL);
   15b64:	2200      	movs	r2, #0
   15b66:	49a9      	ldr	r1, [pc, #676]	; (15e0c <gcloud_thread+0x2b8>)
   15b68:	48a9      	ldr	r0, [pc, #676]	; (15e10 <gcloud_thread+0x2bc>)
   15b6a:	f023 f984 	bl	38e76 <k_timer_init>
   15b6e:	4ca9      	ldr	r4, [pc, #676]	; (15e14 <gcloud_thread+0x2c0>)

            };
            break;
            case SUBSCRIBE:
            if (connected) {
                LOG_INF("Got SUBSCRIBE command");
   15b70:	4ba9      	ldr	r3, [pc, #676]	; (15e18 <gcloud_thread+0x2c4>)
   15b72:	1ae4      	subs	r4, r4, r3
   15b74:	f3c4 04c9 	ubfx	r4, r4, #3, #10
        printk("Google Cloud Thread Running\n");
   15b78:	48a8      	ldr	r0, [pc, #672]	; (15e1c <gcloud_thread+0x2c8>)
   15b7a:	f01d fd1a 	bl	335b2 <printk>
        k_msgq_get_atomic(&gcloud_msgq, &event, K_FOREVER);
   15b7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15b82:	a91c      	add	r1, sp, #112	; 0x70
   15b84:	48a6      	ldr	r0, [pc, #664]	; (15e20 <gcloud_thread+0x2cc>)
   15b86:	f01d f875 	bl	32c74 <k_msgq_get_atomic>
        switch (event.type) {
   15b8a:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
   15b8e:	2b07      	cmp	r3, #7
   15b90:	f200 8387 	bhi.w	162a2 <gcloud_thread+0x74e>
   15b94:	e8df f013 	tbh	[pc, r3, lsl #1]
   15b98:	01c60008 	.word	0x01c60008
   15b9c:	022f01f8 	.word	0x022f01f8
   15ba0:	02f0027a 	.word	0x02f0027a
   15ba4:	03580303 	.word	0x03580303
    struct addrinfo hints = {
   15ba8:	2501      	movs	r5, #1
                LOG_INF("Got CONNECT command");
   15baa:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   15bae:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   15bb2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   15bb6:	f043 0303 	orr.w	r3, r3, #3
   15bba:	f363 0207 	bfi	r2, r3, #0, #8
   15bbe:	b293      	uxth	r3, r2
   15bc0:	f364 138f 	bfi	r3, r4, #6, #10
   15bc4:	b298      	uxth	r0, r3
   15bc6:	4997      	ldr	r1, [pc, #604]	; (15e24 <gcloud_thread+0x2d0>)
   15bc8:	f8ad 3020 	strh.w	r3, [sp, #32]
   15bcc:	f01e f809 	bl	33be2 <log_string_sync>
                LOG_DBG("Initiating broker");
   15bd0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   15bd4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   15bd8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   15bdc:	f043 0304 	orr.w	r3, r3, #4
   15be0:	f363 0207 	bfi	r2, r3, #0, #8
   15be4:	b293      	uxth	r3, r2
   15be6:	f364 138f 	bfi	r3, r4, #6, #10
   15bea:	b298      	uxth	r0, r3
   15bec:	4a8e      	ldr	r2, [pc, #568]	; (15e28 <gcloud_thread+0x2d4>)
   15bee:	498f      	ldr	r1, [pc, #572]	; (15e2c <gcloud_thread+0x2d8>)
   15bf0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
   15bf4:	f01d fff5 	bl	33be2 <log_string_sync>
    struct addrinfo hints = {
   15bf8:	2240      	movs	r2, #64	; 0x40
   15bfa:	2100      	movs	r1, #0
   15bfc:	a828      	add	r0, sp, #160	; 0xa0
   15bfe:	f023 fa1a 	bl	39036 <memset>

static inline int getaddrinfo(const char *host, const char *service,
			      const struct zsock_addrinfo *hints,
			      struct zsock_addrinfo **res)
{
	return zsock_getaddrinfo(host, service, hints, res);
   15c02:	ab1b      	add	r3, sp, #108	; 0x6c
   15c04:	aa28      	add	r2, sp, #160	; 0xa0
   15c06:	2100      	movs	r1, #0
   15c08:	4889      	ldr	r0, [pc, #548]	; (15e30 <gcloud_thread+0x2dc>)
   15c0a:	e9cd 552a 	strd	r5, r5, [sp, #168]	; 0xa8
   15c0e:	f01e f865 	bl	33cdc <zsock_getaddrinfo>
    if (err) {
   15c12:	2800      	cmp	r0, #0
   15c14:	f000 80b8 	beq.w	15d88 <gcloud_thread+0x234>
        LOG_ERR("ERROR: getaddrinfo failed [%d] %s", err, strerror(err));
   15c18:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   15c1c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   15c20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   15c24:	432b      	orrs	r3, r5
   15c26:	f363 0207 	bfi	r2, r3, #0, #8
   15c2a:	b293      	uxth	r3, r2
   15c2c:	f364 138f 	bfi	r3, r4, #6, #10
   15c30:	f8ad 3008 	strh.w	r3, [sp, #8]
   15c34:	9019      	str	r0, [sp, #100]	; 0x64
   15c36:	f01c fa53 	bl	320e0 <strerror>
   15c3a:	9a19      	ldr	r2, [sp, #100]	; 0x64
   15c3c:	4603      	mov	r3, r0
   15c3e:	497d      	ldr	r1, [pc, #500]	; (15e34 <gcloud_thread+0x2e0>)
   15c40:	f8bd 0008 	ldrh.w	r0, [sp, #8]
   15c44:	f01d ffcd 	bl	33be2 <log_string_sync>
                LOG_DBG("Making JWT");
   15c48:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   15c4c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   15c50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   15c54:	f043 0304 	orr.w	r3, r3, #4
   15c58:	f363 0207 	bfi	r2, r3, #0, #8
   15c5c:	b293      	uxth	r3, r2
   15c5e:	f364 138f 	bfi	r3, r4, #6, #10
   15c62:	4a71      	ldr	r2, [pc, #452]	; (15e28 <gcloud_thread+0x2d4>)
   15c64:	4974      	ldr	r1, [pc, #464]	; (15e38 <gcloud_thread+0x2e4>)
   15c66:	b298      	uxth	r0, r3
   15c68:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
   15c6c:	f01d ffb9 	bl	33be2 <log_string_sync>
                make_jwt(jwt_buffer, JWT_BUFFER_SIZE);
   15c70:	f7ff fc02 	bl	15478 <make_jwt.constprop.0>
                LOG_DBG("Initiating client");
   15c74:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   15c78:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   15c7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   15c80:	f043 0304 	orr.w	r3, r3, #4
   15c84:	f363 0207 	bfi	r2, r3, #0, #8
   15c88:	b293      	uxth	r3, r2
   15c8a:	f364 138f 	bfi	r3, r4, #6, #10
    mqtt_client_init(&client);
   15c8e:	4d6b      	ldr	r5, [pc, #428]	; (15e3c <gcloud_thread+0x2e8>)
                LOG_DBG("Initiating client");
   15c90:	4a65      	ldr	r2, [pc, #404]	; (15e28 <gcloud_thread+0x2d4>)
   15c92:	b298      	uxth	r0, r3
   15c94:	496a      	ldr	r1, [pc, #424]	; (15e40 <gcloud_thread+0x2ec>)
   15c96:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
   15c9a:	f01d ffa2 	bl	33be2 <log_string_sync>
    mqtt_client_init(&client);
   15c9e:	4628      	mov	r0, r5
   15ca0:	f021 fd9b 	bl	377da <mqtt_client_init>
    int err = make_jwt(jwt_buffer, JWT_BUFFER_SIZE);
   15ca4:	f7ff fbe8 	bl	15478 <make_jwt.constprop.0>
    if (err != 0) {
   15ca8:	4602      	mov	r2, r0
   15caa:	2800      	cmp	r0, #0
   15cac:	f000 80dc 	beq.w	15e68 <gcloud_thread+0x314>
        LOG_ERR("Unable to make jwt: [%d] %s", err, strerror(-err));
   15cb0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   15cb4:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   15cb8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   15cbc:	f043 0301 	orr.w	r3, r3, #1
   15cc0:	f363 0107 	bfi	r1, r3, #0, #8
   15cc4:	b28b      	uxth	r3, r1
   15cc6:	f364 138f 	bfi	r3, r4, #6, #10
   15cca:	4240      	negs	r0, r0
   15ccc:	f8ad 3014 	strh.w	r3, [sp, #20]
   15cd0:	9219      	str	r2, [sp, #100]	; 0x64
   15cd2:	f01c fa05 	bl	320e0 <strerror>
   15cd6:	9a19      	ldr	r2, [sp, #100]	; 0x64
   15cd8:	4603      	mov	r3, r0
   15cda:	495a      	ldr	r1, [pc, #360]	; (15e44 <gcloud_thread+0x2f0>)
   15cdc:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   15ce0:	f01d ff7f 	bl	33be2 <log_string_sync>
                LOG_DBG("Starting input timer");
   15ce4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   15ce8:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   15cec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   15cf0:	f043 0304 	orr.w	r3, r3, #4
   15cf4:	f363 0207 	bfi	r2, r3, #0, #8
   15cf8:	b293      	uxth	r3, r2
   15cfa:	f364 138f 	bfi	r3, r4, #6, #10
   15cfe:	4a4a      	ldr	r2, [pc, #296]	; (15e28 <gcloud_thread+0x2d4>)
   15d00:	4951      	ldr	r1, [pc, #324]	; (15e48 <gcloud_thread+0x2f4>)
   15d02:	b298      	uxth	r0, r3
   15d04:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
   15d08:	f01d ff6b 	bl	33be2 <log_string_sync>
	z_impl_k_timer_start(timer, duration, period);
   15d0c:	f242 7210 	movw	r2, #10000	; 0x2710
   15d10:	483d      	ldr	r0, [pc, #244]	; (15e08 <gcloud_thread+0x2b4>)
   15d12:	4611      	mov	r1, r2
   15d14:	f019 f85a 	bl	2edcc <z_impl_k_timer_start>
                LOG_DBG("Connecting mqtt");
   15d18:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   15d1c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   15d20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   15d24:	f043 0304 	orr.w	r3, r3, #4
   15d28:	f363 0207 	bfi	r2, r3, #0, #8
   15d2c:	b293      	uxth	r3, r2
   15d2e:	f364 138f 	bfi	r3, r4, #6, #10
   15d32:	b298      	uxth	r0, r3
   15d34:	4a3c      	ldr	r2, [pc, #240]	; (15e28 <gcloud_thread+0x2d4>)
   15d36:	4945      	ldr	r1, [pc, #276]	; (15e4c <gcloud_thread+0x2f8>)
   15d38:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
   15d3c:	f01d ff51 	bl	33be2 <log_string_sync>
                connecting = true;
   15d40:	2201      	movs	r2, #1
   15d42:	4b43      	ldr	r3, [pc, #268]	; (15e50 <gcloud_thread+0x2fc>)
                err = mqtt_connect(&client);
   15d44:	483d      	ldr	r0, [pc, #244]	; (15e3c <gcloud_thread+0x2e8>)
                connecting = true;
   15d46:	701a      	strb	r2, [r3, #0]
                err = mqtt_connect(&client);
   15d48:	f021 fd60 	bl	3780c <mqtt_connect>
                if (err) {
   15d4c:	4605      	mov	r5, r0
   15d4e:	2800      	cmp	r0, #0
   15d50:	f43f af12 	beq.w	15b78 <gcloud_thread+0x24>
                    LOG_ERR("mqtt_connect failed: [%d] %s", err, strerror(-err));
   15d54:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   15d58:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
   15d5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   15d60:	f043 0301 	orr.w	r3, r3, #1
   15d64:	f363 0207 	bfi	r2, r3, #0, #8
   15d68:	b293      	uxth	r3, r2
   15d6a:	f364 138f 	bfi	r3, r4, #6, #10
   15d6e:	4240      	negs	r0, r0
   15d70:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
   15d74:	f01c f9b4 	bl	320e0 <strerror>
   15d78:	462a      	mov	r2, r5
   15d7a:	4603      	mov	r3, r0
   15d7c:	4935      	ldr	r1, [pc, #212]	; (15e54 <gcloud_thread+0x300>)
   15d7e:	f8bd 0038 	ldrh.w	r0, [sp, #56]	; 0x38
                err = gcloud_subscribe();
                if (err) {
                    LOG_ERR("gcloud_subscribe failed: [%d] %s", err, strerror(-err));
   15d82:	f01d ff2e 	bl	33be2 <log_string_sync>
   15d86:	e6f7      	b.n	15b78 <gcloud_thread+0x24>
    addr = result;
   15d88:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    while (addr != NULL) {
   15d8a:	b1fb      	cbz	r3, 15dcc <gcloud_thread+0x278>
        if (addr->ai_addrlen == sizeof(struct sockaddr_in)) {
   15d8c:	695a      	ldr	r2, [r3, #20]
   15d8e:	2a08      	cmp	r2, #8
   15d90:	d120      	bne.n	15dd4 <gcloud_thread+0x280>
            broker4->sin_port = htons(BROKER_PORT);
   15d92:	f24b 3122 	movw	r1, #45858	; 0xb322
                ->sin_addr.s_addr;
   15d96:	699b      	ldr	r3, [r3, #24]
            broker4->sin_addr.s_addr =
   15d98:	4a2f      	ldr	r2, [pc, #188]	; (15e58 <gcloud_thread+0x304>)
                ->sin_addr.s_addr;
   15d9a:	685b      	ldr	r3, [r3, #4]
            broker4->sin_port = htons(BROKER_PORT);
   15d9c:	8051      	strh	r1, [r2, #2]
            broker4->sin_addr.s_addr =
   15d9e:	6053      	str	r3, [r2, #4]
            broker4->sin_family = AF_INET;
   15da0:	8015      	strh	r5, [r2, #0]
            LOG_DBG("IPv4 Address found 0x%08x",
   15da2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   15da6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   15daa:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
   15dae:	f042 0204 	orr.w	r2, r2, #4
   15db2:	f362 0107 	bfi	r1, r2, #0, #8
   15db6:	b28a      	uxth	r2, r1
   15db8:	f364 128f 	bfi	r2, r4, #6, #10
   15dbc:	f8ad 200c 	strh.w	r2, [sp, #12]
   15dc0:	4926      	ldr	r1, [pc, #152]	; (15e5c <gcloud_thread+0x308>)
   15dc2:	4a27      	ldr	r2, [pc, #156]	; (15e60 <gcloud_thread+0x30c>)
   15dc4:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   15dc8:	f01d ff0b 	bl	33be2 <log_string_sync>
}

static inline void freeaddrinfo(struct zsock_addrinfo *ai)
{
	zsock_freeaddrinfo(ai);
   15dcc:	981b      	ldr	r0, [sp, #108]	; 0x6c
   15dce:	f01d ff87 	bl	33ce0 <zsock_freeaddrinfo>
   15dd2:	e739      	b.n	15c48 <gcloud_thread+0xf4>
            LOG_ERR("ai_addrlen = %u should be %u or %u",
   15dd4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   15dd8:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   15ddc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   15de0:	f043 0301 	orr.w	r3, r3, #1
   15de4:	f363 0107 	bfi	r1, r3, #0, #8
   15de8:	b28b      	uxth	r3, r1
   15dea:	f364 138f 	bfi	r3, r4, #6, #10
   15dee:	f8ad 3010 	strh.w	r3, [sp, #16]
   15df2:	2318      	movs	r3, #24
   15df4:	491b      	ldr	r1, [pc, #108]	; (15e64 <gcloud_thread+0x310>)
   15df6:	9300      	str	r3, [sp, #0]
   15df8:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   15dfc:	2308      	movs	r3, #8
   15dfe:	f01d fef0 	bl	33be2 <log_string_sync>
        break;
   15e02:	e7e3      	b.n	15dcc <gcloud_thread+0x278>
   15e04:	00015419 	.word	0x00015419
   15e08:	200205e4 	.word	0x200205e4
   15e0c:	00015565 	.word	0x00015565
   15e10:	20020610 	.word	0x20020610
   15e14:	00039f88 	.word	0x00039f88
   15e18:	00039f48 	.word	0x00039f48
   15e1c:	0003bdb3 	.word	0x0003bdb3
   15e20:	200207a0 	.word	0x200207a0
   15e24:	0003bdd0 	.word	0x0003bdd0
   15e28:	0003badd 	.word	0x0003badd
   15e2c:	0003bde4 	.word	0x0003bde4
   15e30:	0003bdfa 	.word	0x0003bdfa
   15e34:	0003be0e 	.word	0x0003be0e
   15e38:	0003be71 	.word	0x0003be71
   15e3c:	200214b0 	.word	0x200214b0
   15e40:	0003be80 	.word	0x0003be80
   15e44:	0003be96 	.word	0x0003be96
   15e48:	0003bf38 	.word	0x0003bf38
   15e4c:	0003bf51 	.word	0x0003bf51
   15e50:	20027624 	.word	0x20027624
   15e54:	0003bf65 	.word	0x0003bf65
   15e58:	20027610 	.word	0x20027610
   15e5c:	0003be30 	.word	0x0003be30
   15e60:	0003bab2 	.word	0x0003bab2
   15e64:	0003be4e 	.word	0x0003be4e
    LOG_DBG("JWT:\n%s\n", log_strdup(jwt_buffer));
   15e68:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   15e6c:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   15e70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   15e74:	f043 0304 	orr.w	r3, r3, #4
   15e78:	f363 0207 	bfi	r2, r3, #0, #8
   15e7c:	b293      	uxth	r3, r2
   15e7e:	f364 138f 	bfi	r3, r4, #6, #10
   15e82:	48a8      	ldr	r0, [pc, #672]	; (16124 <gcloud_thread+0x5d0>)
   15e84:	f8ad 3018 	strh.w	r3, [sp, #24]
   15e88:	f01d febd 	bl	33c06 <log_strdup>
   15e8c:	49a6      	ldr	r1, [pc, #664]	; (16128 <gcloud_thread+0x5d4>)
   15e8e:	4603      	mov	r3, r0
   15e90:	4aa6      	ldr	r2, [pc, #664]	; (1612c <gcloud_thread+0x5d8>)
   15e92:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   15e96:	f01d fea4 	bl	33be2 <log_string_sync>
    LOG_DBG("JWT length: %d\n", strlen(jwt_buffer));
   15e9a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   15e9e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   15ea2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   15ea6:	f043 0304 	orr.w	r3, r3, #4
   15eaa:	f363 0207 	bfi	r2, r3, #0, #8
   15eae:	b293      	uxth	r3, r2
   15eb0:	f364 138f 	bfi	r3, r4, #6, #10
   15eb4:	489b      	ldr	r0, [pc, #620]	; (16124 <gcloud_thread+0x5d0>)
   15eb6:	f8ad 301c 	strh.w	r3, [sp, #28]
   15eba:	f7fc f8e1 	bl	12080 <strlen>
   15ebe:	4a9b      	ldr	r2, [pc, #620]	; (1612c <gcloud_thread+0x5d8>)
   15ec0:	4603      	mov	r3, r0
   15ec2:	499b      	ldr	r1, [pc, #620]	; (16130 <gcloud_thread+0x5dc>)
   15ec4:	f8bd 001c 	ldrh.w	r0, [sp, #28]
   15ec8:	f01d fe8b 	bl	33be2 <log_string_sync>
    jwt_token.size = strlen(jwt_buffer);
   15ecc:	4895      	ldr	r0, [pc, #596]	; (16124 <gcloud_thread+0x5d0>)
   15ece:	f7fc f8d7 	bl	12080 <strlen>
   15ed2:	4b98      	ldr	r3, [pc, #608]	; (16134 <gcloud_thread+0x5e0>)
    client.broker = &mqtt_broker;
   15ed4:	4a98      	ldr	r2, [pc, #608]	; (16138 <gcloud_thread+0x5e4>)
    jwt_token.size = strlen(jwt_buffer);
   15ed6:	6058      	str	r0, [r3, #4]
    client.broker = &mqtt_broker;
   15ed8:	652a      	str	r2, [r5, #80]	; 0x50
    client.client_id.utf8 = (u8_t *)GCLOUD_ID;
   15eda:	4898      	ldr	r0, [pc, #608]	; (1613c <gcloud_thread+0x5e8>)
    client.evt_cb = mqtt_event_handler;
   15edc:	4a98      	ldr	r2, [pc, #608]	; (16140 <gcloud_thread+0x5ec>)
    client.client_id.utf8 = (u8_t *)GCLOUD_ID;
   15ede:	64a8      	str	r0, [r5, #72]	; 0x48
    client.evt_cb = mqtt_event_handler;
   15ee0:	666a      	str	r2, [r5, #100]	; 0x64
    client.client_id.size = strlen(GCLOUD_ID);
   15ee2:	f7fc f8cd 	bl	12080 <strlen>
	client.password = &jwt_token;
   15ee6:	4b93      	ldr	r3, [pc, #588]	; (16134 <gcloud_thread+0x5e0>)
    client.client_id.size = strlen(GCLOUD_ID);
   15ee8:	64e8      	str	r0, [r5, #76]	; 0x4c
	client.password = &jwt_token;
   15eea:	65ab      	str	r3, [r5, #88]	; 0x58
	client.user_name = &username;
   15eec:	4b95      	ldr	r3, [pc, #596]	; (16144 <gcloud_thread+0x5f0>)
   15eee:	656b      	str	r3, [r5, #84]	; 0x54
    client.protocol_version = MQTT_VERSION_3_1_1;
   15ef0:	2304      	movs	r3, #4
   15ef2:	f885 307a 	strb.w	r3, [r5, #122]	; 0x7a
	client.rx_buf = rx_buffer;
   15ef6:	4b94      	ldr	r3, [pc, #592]	; (16148 <gcloud_thread+0x5f4>)
   15ef8:	66ab      	str	r3, [r5, #104]	; 0x68
    client.rx_buf_size = 512;
   15efa:	f44f 7300 	mov.w	r3, #512	; 0x200
   15efe:	66eb      	str	r3, [r5, #108]	; 0x6c
	client.tx_buf = tx_buffer;
   15f00:	4b92      	ldr	r3, [pc, #584]	; (1614c <gcloud_thread+0x5f8>)
   15f02:	672b      	str	r3, [r5, #112]	; 0x70
    client.tx_buf_size = 1024;
   15f04:	f44f 6380 	mov.w	r3, #1024	; 0x400
   15f08:	676b      	str	r3, [r5, #116]	; 0x74
	client.transport.type = MQTT_TRANSPORT_SECURE;
   15f0a:	2301      	movs	r3, #1
   15f0c:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    client.clean_session = 1;
   15f10:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
   15f14:	f043 0302 	orr.w	r3, r3, #2
   15f18:	f885 307c 	strb.w	r3, [r5, #124]	; 0x7c
    client.keepalive = 120;
   15f1c:	2378      	movs	r3, #120	; 0x78
   15f1e:	f8a5 3078 	strh.w	r3, [r5, #120]	; 0x78
    return 0;
   15f22:	e6df      	b.n	15ce4 <gcloud_thread+0x190>
                LOG_INF("Got INPUT_TIMEOUT command");
   15f24:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
   15f28:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
   15f2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   15f30:	f043 0303 	orr.w	r3, r3, #3
   15f34:	f363 0207 	bfi	r2, r3, #0, #8
   15f38:	b293      	uxth	r3, r2
   15f3a:	f364 138f 	bfi	r3, r4, #6, #10
   15f3e:	b298      	uxth	r0, r3
   15f40:	4983      	ldr	r1, [pc, #524]	; (16150 <gcloud_thread+0x5fc>)
   15f42:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
   15f46:	f01d fe4c 	bl	33be2 <log_string_sync>
                err = mqtt_input(&client);
   15f4a:	4882      	ldr	r0, [pc, #520]	; (16154 <gcloud_thread+0x600>)
   15f4c:	f021 fdd7 	bl	37afe <mqtt_input>
                if (err) {
   15f50:	4605      	mov	r5, r0
   15f52:	2800      	cmp	r0, #0
   15f54:	f43f ae10 	beq.w	15b78 <gcloud_thread+0x24>
                    LOG_ERR("mqtt_input failed: [%d] %s", err, strerror(-err));
   15f58:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   15f5c:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
   15f60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   15f64:	f043 0301 	orr.w	r3, r3, #1
   15f68:	f363 0207 	bfi	r2, r3, #0, #8
   15f6c:	b293      	uxth	r3, r2
   15f6e:	f364 138f 	bfi	r3, r4, #6, #10
   15f72:	4240      	negs	r0, r0
   15f74:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
   15f78:	f01c f8b2 	bl	320e0 <strerror>
   15f7c:	462a      	mov	r2, r5
   15f7e:	4603      	mov	r3, r0
   15f80:	4975      	ldr	r1, [pc, #468]	; (16158 <gcloud_thread+0x604>)
   15f82:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
   15f86:	e6fc      	b.n	15d82 <gcloud_thread+0x22e>
            if (connected) {
   15f88:	4b74      	ldr	r3, [pc, #464]	; (1615c <gcloud_thread+0x608>)
   15f8a:	781b      	ldrb	r3, [r3, #0]
   15f8c:	2b00      	cmp	r3, #0
   15f8e:	f43f adf3 	beq.w	15b78 <gcloud_thread+0x24>
                LOG_INF("Got LIVE_TIMEOUT command");
   15f92:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   15f96:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
   15f9a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   15f9e:	f043 0303 	orr.w	r3, r3, #3
   15fa2:	f363 0207 	bfi	r2, r3, #0, #8
   15fa6:	b293      	uxth	r3, r2
   15fa8:	f364 138f 	bfi	r3, r4, #6, #10
   15fac:	b298      	uxth	r0, r3
   15fae:	496c      	ldr	r1, [pc, #432]	; (16160 <gcloud_thread+0x60c>)
   15fb0:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
   15fb4:	f01d fe15 	bl	33be2 <log_string_sync>
                err = mqtt_live(&client);
   15fb8:	4866      	ldr	r0, [pc, #408]	; (16154 <gcloud_thread+0x600>)
   15fba:	f021 fd79 	bl	37ab0 <mqtt_live>
                if (err) {
   15fbe:	4605      	mov	r5, r0
   15fc0:	2800      	cmp	r0, #0
   15fc2:	f43f add9 	beq.w	15b78 <gcloud_thread+0x24>
                    LOG_ERR("mqtt_live failed: [%d] %s", err, strerror(-err));
   15fc6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   15fca:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
   15fce:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   15fd2:	f043 0301 	orr.w	r3, r3, #1
   15fd6:	f363 0207 	bfi	r2, r3, #0, #8
   15fda:	b293      	uxth	r3, r2
   15fdc:	f364 138f 	bfi	r3, r4, #6, #10
   15fe0:	4240      	negs	r0, r0
   15fe2:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   15fe6:	f01c f87b 	bl	320e0 <strerror>
   15fea:	462a      	mov	r2, r5
   15fec:	4603      	mov	r3, r0
   15fee:	495d      	ldr	r1, [pc, #372]	; (16164 <gcloud_thread+0x610>)
   15ff0:	f8bd 0048 	ldrh.w	r0, [sp, #72]	; 0x48
   15ff4:	e6c5      	b.n	15d82 <gcloud_thread+0x22e>
            if (connected) {
   15ff6:	4b59      	ldr	r3, [pc, #356]	; (1615c <gcloud_thread+0x608>)
   15ff8:	781b      	ldrb	r3, [r3, #0]
   15ffa:	2b00      	cmp	r3, #0
   15ffc:	f43f adbc 	beq.w	15b78 <gcloud_thread+0x24>
                LOG_INF("Got PUBLISH_STATE command");
   16000:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
   16004:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
   16008:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   1600c:	f043 0303 	orr.w	r3, r3, #3
   16010:	f363 0207 	bfi	r2, r3, #0, #8
   16014:	b293      	uxth	r3, r2
   16016:	f364 138f 	bfi	r3, r4, #6, #10
   1601a:	4953      	ldr	r1, [pc, #332]	; (16168 <gcloud_thread+0x614>)
   1601c:	b298      	uxth	r0, r3
   1601e:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
                msg.message = event.param.publish_state;
   16022:	ad22      	add	r5, sp, #136	; 0x88
                LOG_INF("Got PUBLISH_STATE command");
   16024:	f01d fddd 	bl	33be2 <log_string_sync>
                msg.message = event.param.publish_state;
   16028:	f10d 0c74 	add.w	ip, sp, #116	; 0x74
   1602c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   16030:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   16032:	f8dc 3000 	ldr.w	r3, [ip]
   16036:	602b      	str	r3, [r5, #0]
                msg.message_id = sys_rand32_get();
   16038:	f008 fe64 	bl	1ed04 <sys_rand32_get>
                msg.dup_flag = 0;
   1603c:	f89d 309e 	ldrb.w	r3, [sp, #158]	; 0x9e
                msg.message_id = sys_rand32_get();
   16040:	f8ad 009c 	strh.w	r0, [sp, #156]	; 0x9c
                msg.dup_flag = 0;
   16044:	f023 0303 	bic.w	r3, r3, #3
                err = mqtt_publish(&client, &msg);
   16048:	a922      	add	r1, sp, #136	; 0x88
   1604a:	4842      	ldr	r0, [pc, #264]	; (16154 <gcloud_thread+0x600>)
                msg.dup_flag = 0;
   1604c:	f88d 309e 	strb.w	r3, [sp, #158]	; 0x9e
                err = mqtt_publish(&client, &msg);
   16050:	f021 fc20 	bl	37894 <mqtt_publish>
                if (err) {
   16054:	4605      	mov	r5, r0
   16056:	2800      	cmp	r0, #0
   16058:	f43f ad8e 	beq.w	15b78 <gcloud_thread+0x24>
                    LOG_ERR("mqtt_publish (state) failed: [%d] %s", err, strerror(-err));
   1605c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
   16060:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
   16064:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   16068:	f043 0301 	orr.w	r3, r3, #1
   1606c:	f363 0207 	bfi	r2, r3, #0, #8
   16070:	b293      	uxth	r3, r2
   16072:	f364 138f 	bfi	r3, r4, #6, #10
   16076:	4240      	negs	r0, r0
   16078:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
   1607c:	f01c f830 	bl	320e0 <strerror>
   16080:	462a      	mov	r2, r5
   16082:	4603      	mov	r3, r0
   16084:	4939      	ldr	r1, [pc, #228]	; (1616c <gcloud_thread+0x618>)
   16086:	f8bd 0050 	ldrh.w	r0, [sp, #80]	; 0x50
   1608a:	e67a      	b.n	15d82 <gcloud_thread+0x22e>
            if (connected) {
   1608c:	4b33      	ldr	r3, [pc, #204]	; (1615c <gcloud_thread+0x608>)
   1608e:	781b      	ldrb	r3, [r3, #0]
   16090:	2b00      	cmp	r3, #0
   16092:	f43f ad71 	beq.w	15b78 <gcloud_thread+0x24>
                LOG_INF("Got PUBLISH command");
   16096:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
   1609a:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
   1609e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   160a2:	f043 0303 	orr.w	r3, r3, #3
   160a6:	f363 0207 	bfi	r2, r3, #0, #8
   160aa:	b293      	uxth	r3, r2
   160ac:	f364 138f 	bfi	r3, r4, #6, #10
   160b0:	492f      	ldr	r1, [pc, #188]	; (16170 <gcloud_thread+0x61c>)
   160b2:	b298      	uxth	r0, r3
   160b4:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
                msg.message = event.param.publish;
   160b8:	ad22      	add	r5, sp, #136	; 0x88
                LOG_INF("Got PUBLISH command");
   160ba:	f01d fd92 	bl	33be2 <log_string_sync>
                msg.message = event.param.publish;
   160be:	f10d 0c74 	add.w	ip, sp, #116	; 0x74
   160c2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   160c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   160c8:	f8dc 3000 	ldr.w	r3, [ip]
   160cc:	602b      	str	r3, [r5, #0]
                msg.message_id = sys_rand32_get();
   160ce:	f008 fe19 	bl	1ed04 <sys_rand32_get>
                msg.dup_flag = 0;
   160d2:	f89d 309e 	ldrb.w	r3, [sp, #158]	; 0x9e
                msg.message_id = sys_rand32_get();
   160d6:	f8ad 009c 	strh.w	r0, [sp, #156]	; 0x9c
                msg.dup_flag = 0;
   160da:	f023 0303 	bic.w	r3, r3, #3
                err = mqtt_publish(&client, &msg);
   160de:	a922      	add	r1, sp, #136	; 0x88
   160e0:	481c      	ldr	r0, [pc, #112]	; (16154 <gcloud_thread+0x600>)
                msg.dup_flag = 0;
   160e2:	f88d 309e 	strb.w	r3, [sp, #158]	; 0x9e
                err = mqtt_publish(&client, &msg);
   160e6:	f021 fbd5 	bl	37894 <mqtt_publish>
                if (err) {
   160ea:	4605      	mov	r5, r0
   160ec:	2800      	cmp	r0, #0
   160ee:	f43f ad43 	beq.w	15b78 <gcloud_thread+0x24>
                    LOG_ERR("mqtt_publish failed: [%d] %s", err, strerror(-err));
   160f2:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   160f6:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
   160fa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   160fe:	f043 0301 	orr.w	r3, r3, #1
   16102:	f363 0207 	bfi	r2, r3, #0, #8
   16106:	b293      	uxth	r3, r2
   16108:	f364 138f 	bfi	r3, r4, #6, #10
   1610c:	4240      	negs	r0, r0
   1610e:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
   16112:	f01b ffe5 	bl	320e0 <strerror>
   16116:	462a      	mov	r2, r5
   16118:	4603      	mov	r3, r0
   1611a:	4916      	ldr	r1, [pc, #88]	; (16174 <gcloud_thread+0x620>)
   1611c:	f8bd 0058 	ldrh.w	r0, [sp, #88]	; 0x58
   16120:	e62f      	b.n	15d82 <gcloud_thread+0x22e>
   16122:	bf00      	nop
   16124:	20027625 	.word	0x20027625
   16128:	0003beb2 	.word	0x0003beb2
   1612c:	0003babe 	.word	0x0003babe
   16130:	0003bebf 	.word	0x0003bebf
   16134:	2002006c 	.word	0x2002006c
   16138:	20027610 	.word	0x20027610
   1613c:	0003bed3 	.word	0x0003bed3
   16140:	000156fd 	.word	0x000156fd
   16144:	20020074 	.word	0x20020074
   16148:	20027725 	.word	0x20027725
   1614c:	20027b25 	.word	0x20027b25
   16150:	0003bf82 	.word	0x0003bf82
   16154:	200214b0 	.word	0x200214b0
   16158:	0003bf9c 	.word	0x0003bf9c
   1615c:	20027623 	.word	0x20027623
   16160:	0003bfb7 	.word	0x0003bfb7
   16164:	0003bfd0 	.word	0x0003bfd0
   16168:	0003bfea 	.word	0x0003bfea
   1616c:	0003c004 	.word	0x0003c004
   16170:	0003c029 	.word	0x0003c029
   16174:	0003c03d 	.word	0x0003c03d
                LOG_INF("Got RECONNECT_TIMEOUT command");
   16178:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
   1617c:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
   16180:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   16184:	f043 0303 	orr.w	r3, r3, #3
   16188:	f363 0207 	bfi	r2, r3, #0, #8
   1618c:	b293      	uxth	r3, r2
   1618e:	f364 138f 	bfi	r3, r4, #6, #10
   16192:	494e      	ldr	r1, [pc, #312]	; (162cc <gcloud_thread+0x778>)
   16194:	b298      	uxth	r0, r3
   16196:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
   1619a:	f01d fd22 	bl	33be2 <log_string_sync>
                LOG_INF("Got DISCONNECT command");
   1619e:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
   161a2:	f043 0303 	orr.w	r3, r3, #3
   161a6:	f363 0607 	bfi	r6, r3, #0, #8
   161aa:	f364 168f 	bfi	r6, r4, #6, #10
   161ae:	4948      	ldr	r1, [pc, #288]	; (162d0 <gcloud_thread+0x77c>)
   161b0:	4630      	mov	r0, r6
   161b2:	f01d fd16 	bl	33be2 <log_string_sync>
            if (connected) {
   161b6:	4b47      	ldr	r3, [pc, #284]	; (162d4 <gcloud_thread+0x780>)
   161b8:	781b      	ldrb	r3, [r3, #0]
   161ba:	2b00      	cmp	r3, #0
   161bc:	f43f acdc 	beq.w	15b78 <gcloud_thread+0x24>
	z_impl_k_timer_stop(timer);
   161c0:	4845      	ldr	r0, [pc, #276]	; (162d8 <gcloud_thread+0x784>)
   161c2:	f022 fe64 	bl	38e8e <z_impl_k_timer_stop>
                LOG_DBG("Disconnecting mqtt");
   161c6:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   161ca:	f043 0304 	orr.w	r3, r3, #4
   161ce:	f363 0707 	bfi	r7, r3, #0, #8
   161d2:	f364 178f 	bfi	r7, r4, #6, #10
   161d6:	4a41      	ldr	r2, [pc, #260]	; (162dc <gcloud_thread+0x788>)
   161d8:	4941      	ldr	r1, [pc, #260]	; (162e0 <gcloud_thread+0x78c>)
   161da:	4638      	mov	r0, r7
   161dc:	f01d fd01 	bl	33be2 <log_string_sync>
                err = mqtt_disconnect(&client);
   161e0:	4840      	ldr	r0, [pc, #256]	; (162e4 <gcloud_thread+0x790>)
   161e2:	f021 fbea 	bl	379ba <mqtt_disconnect>
                if (err) {
   161e6:	4605      	mov	r5, r0
   161e8:	b180      	cbz	r0, 1620c <gcloud_thread+0x6b8>
                    LOG_ERR("mqtt_disconnect (reconnect) failed: [%d] %s", err, strerror(-err));
   161ea:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   161ee:	f043 0301 	orr.w	r3, r3, #1
   161f2:	4240      	negs	r0, r0
   161f4:	f363 0807 	bfi	r8, r3, #0, #8
   161f8:	f01b ff72 	bl	320e0 <strerror>
   161fc:	f364 188f 	bfi	r8, r4, #6, #10
   16200:	4603      	mov	r3, r0
   16202:	462a      	mov	r2, r5
   16204:	4938      	ldr	r1, [pc, #224]	; (162e8 <gcloud_thread+0x794>)
   16206:	4640      	mov	r0, r8
   16208:	f01d fceb 	bl	33be2 <log_string_sync>
                connected = false;
   1620c:	2500      	movs	r5, #0
	z_impl_k_msgq_purge(msgq);
   1620e:	4837      	ldr	r0, [pc, #220]	; (162ec <gcloud_thread+0x798>)
   16210:	f016 f9b4 	bl	2c57c <z_impl_k_msgq_purge>
   16214:	4b2f      	ldr	r3, [pc, #188]	; (162d4 <gcloud_thread+0x780>)
   16216:	701d      	strb	r5, [r3, #0]
                if (event.type == DISCONNECT) {
   16218:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
   1621c:	2b06      	cmp	r3, #6
   1621e:	d10f      	bne.n	16240 <gcloud_thread+0x6ec>
                    LOG_DBG("Not setting connecting flag");
   16220:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
   16224:	f043 0304 	orr.w	r3, r3, #4
   16228:	f363 0907 	bfi	r9, r3, #0, #8
   1622c:	f364 198f 	bfi	r9, r4, #6, #10
   16230:	4a2a      	ldr	r2, [pc, #168]	; (162dc <gcloud_thread+0x788>)
   16232:	492f      	ldr	r1, [pc, #188]	; (162f0 <gcloud_thread+0x79c>)
   16234:	4648      	mov	r0, r9
   16236:	f01d fcd4 	bl	33be2 <log_string_sync>
                    connecting = false;
   1623a:	4b2e      	ldr	r3, [pc, #184]	; (162f4 <gcloud_thread+0x7a0>)
   1623c:	701d      	strb	r5, [r3, #0]
   1623e:	e49b      	b.n	15b78 <gcloud_thread+0x24>
                    connecting = true;
   16240:	2201      	movs	r2, #1
   16242:	4b2c      	ldr	r3, [pc, #176]	; (162f4 <gcloud_thread+0x7a0>)
   16244:	701a      	strb	r2, [r3, #0]
   16246:	e497      	b.n	15b78 <gcloud_thread+0x24>
            if (connected) {
   16248:	4b22      	ldr	r3, [pc, #136]	; (162d4 <gcloud_thread+0x780>)
   1624a:	781b      	ldrb	r3, [r3, #0]
   1624c:	2b00      	cmp	r3, #0
   1624e:	f43f ac93 	beq.w	15b78 <gcloud_thread+0x24>
                LOG_INF("Got SUBSCRIBE command");
   16252:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
   16256:	f043 0303 	orr.w	r3, r3, #3
   1625a:	f363 0a07 	bfi	sl, r3, #0, #8
   1625e:	f364 1a8f 	bfi	sl, r4, #6, #10
   16262:	4925      	ldr	r1, [pc, #148]	; (162f8 <gcloud_thread+0x7a4>)
   16264:	4650      	mov	r0, sl
   16266:	f01d fcbc 	bl	33be2 <log_string_sync>
    const struct mqtt_subscription_list subscriptions = {
   1626a:	4b24      	ldr	r3, [pc, #144]	; (162fc <gcloud_thread+0x7a8>)
    return mqtt_subscribe(&client, &subscriptions);
   1626c:	a928      	add	r1, sp, #160	; 0xa0
    const struct mqtt_subscription_list subscriptions = {
   1626e:	9328      	str	r3, [sp, #160]	; 0xa0
   16270:	4b23      	ldr	r3, [pc, #140]	; (16300 <gcloud_thread+0x7ac>)
    return mqtt_subscribe(&client, &subscriptions);
   16272:	481c      	ldr	r0, [pc, #112]	; (162e4 <gcloud_thread+0x790>)
    const struct mqtt_subscription_list subscriptions = {
   16274:	9329      	str	r3, [sp, #164]	; 0xa4
    return mqtt_subscribe(&client, &subscriptions);
   16276:	f021 fbc9 	bl	37a0c <mqtt_subscribe>
                if (err) {
   1627a:	4605      	mov	r5, r0
   1627c:	2800      	cmp	r0, #0
   1627e:	f43f ac7b 	beq.w	15b78 <gcloud_thread+0x24>
                    LOG_ERR("gcloud_subscribe failed: [%d] %s", err, strerror(-err));
   16282:	f02b 033f 	bic.w	r3, fp, #63	; 0x3f
   16286:	f043 0301 	orr.w	r3, r3, #1
   1628a:	4240      	negs	r0, r0
   1628c:	f363 0b07 	bfi	fp, r3, #0, #8
   16290:	f01b ff26 	bl	320e0 <strerror>
   16294:	f364 1b8f 	bfi	fp, r4, #6, #10
   16298:	4603      	mov	r3, r0
   1629a:	462a      	mov	r2, r5
   1629c:	4919      	ldr	r1, [pc, #100]	; (16304 <gcloud_thread+0x7b0>)
   1629e:	4658      	mov	r0, fp
   162a0:	e56f      	b.n	15d82 <gcloud_thread+0x22e>
                    // TODO: Find a way to report this error to the application.
                }
            };
            break;
            default:
                LOG_ERR("Unknown event type received");
   162a2:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
   162a6:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
   162aa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   162ae:	f043 0301 	orr.w	r3, r3, #1
   162b2:	f363 0207 	bfi	r2, r3, #0, #8
   162b6:	b293      	uxth	r3, r2
   162b8:	f364 138f 	bfi	r3, r4, #6, #10
   162bc:	4912      	ldr	r1, [pc, #72]	; (16308 <gcloud_thread+0x7b4>)
   162be:	b298      	uxth	r0, r3
   162c0:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
   162c4:	f01d fc8d 	bl	33be2 <log_string_sync>
   162c8:	e456      	b.n	15b78 <gcloud_thread+0x24>
   162ca:	bf00      	nop
   162cc:	0003c05a 	.word	0x0003c05a
   162d0:	0003c078 	.word	0x0003c078
   162d4:	20027623 	.word	0x20027623
   162d8:	20020610 	.word	0x20020610
   162dc:	0003badd 	.word	0x0003badd
   162e0:	0003c08f 	.word	0x0003c08f
   162e4:	200214b0 	.word	0x200214b0
   162e8:	0003c0a6 	.word	0x0003c0a6
   162ec:	200207a0 	.word	0x200207a0
   162f0:	0003c0d2 	.word	0x0003c0d2
   162f4:	20027624 	.word	0x20027624
   162f8:	0003c0f2 	.word	0x0003c0f2
   162fc:	20020060 	.word	0x20020060
   16300:	002a0001 	.word	0x002a0001
   16304:	0003c108 	.word	0x0003c108
   16308:	0003c129 	.word	0x0003c129

0001630c <parse_string>:

/* Parse the input text into an unescaped cstring, and populate item. */
static const unsigned char firstByteMark[7] = {0x00, 0x00, 0xC0, 0xE0,
					       0xF0, 0xF8, 0xFC};
static const char *parse_string(cJSON *item, const char *str)
{
   1630c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const char *ptr = str + 1;
	char *ptr2;
	char *out;
	int len = 0;
	unsigned uc, uc2;
	if (*str != '\"') {
   16310:	780b      	ldrb	r3, [r1, #0]
{
   16312:	4606      	mov	r6, r0
	if (*str != '\"') {
   16314:	2b22      	cmp	r3, #34	; 0x22
   16316:	d12b      	bne.n	16370 <parse_string+0x64>
	const char *ptr = str + 1;
   16318:	f101 0901 	add.w	r9, r1, #1
   1631c:	464b      	mov	r3, r9
   1631e:	2400      	movs	r4, #0
		ep = str;
		return 0;
	} /* not a string! */

	while (*ptr != '\"' && *ptr && ++len)
   16320:	781a      	ldrb	r2, [r3, #0]
   16322:	4620      	mov	r0, r4
   16324:	2a22      	cmp	r2, #34	; 0x22
   16326:	d003      	beq.n	16330 <parse_string+0x24>
   16328:	b112      	cbz	r2, 16330 <parse_string+0x24>
   1632a:	1c60      	adds	r0, r4, #1
   1632c:	d126      	bne.n	1637c <parse_string+0x70>
   1632e:	2000      	movs	r0, #0
		if (*ptr++ == '\\')
			ptr++; /* Skip escaped quotes. */

	out = (char *)cJSON_malloc(
   16330:	4b5b      	ldr	r3, [pc, #364]	; (164a0 <parse_string+0x194>)
   16332:	3001      	adds	r0, #1
   16334:	681b      	ldr	r3, [r3, #0]
   16336:	4798      	blx	r3
		len +
		1); /* This is how long we need for the string, roughly. */
	if (!out)
   16338:	4607      	mov	r7, r0
   1633a:	b1e0      	cbz	r0, 16376 <parse_string+0x6a>
   1633c:	4604      	mov	r4, r0
				break;
			case 'f':
				*ptr2++ = '\f';
				break;
			case 'n':
				*ptr2++ = '\n';
   1633e:	f04f 0a0a 	mov.w	sl, #10
				break;
			case 'r':
				*ptr2++ = '\r';
				break;
			case 't':
				*ptr2++ = '\t';
   16342:	f04f 0809 	mov.w	r8, #9
				*ptr2++ = '\r';
   16346:	f04f 0b0d 	mov.w	fp, #13
	while (*ptr != '\"' && *ptr) {
   1634a:	f899 3000 	ldrb.w	r3, [r9]
   1634e:	2b22      	cmp	r3, #34	; 0x22
   16350:	d000      	beq.n	16354 <parse_string+0x48>
   16352:	b9cb      	cbnz	r3, 16388 <parse_string+0x7c>
				break;
			}
			ptr++;
		}
	}
	*ptr2 = 0;
   16354:	2300      	movs	r3, #0
   16356:	7023      	strb	r3, [r4, #0]
	if (*ptr == '\"')
   16358:	f899 3000 	ldrb.w	r3, [r9]
		ptr++;
	item->valuestring = out;
   1635c:	6137      	str	r7, [r6, #16]
	if (*ptr == '\"')
   1635e:	2b22      	cmp	r3, #34	; 0x22
	item->type = cJSON_String;
   16360:	f04f 0304 	mov.w	r3, #4
		ptr++;
   16364:	bf08      	it	eq
   16366:	f109 0901 	addeq.w	r9, r9, #1
	item->type = cJSON_String;
   1636a:	60f3      	str	r3, [r6, #12]
	return ptr;
   1636c:	464f      	mov	r7, r9
   1636e:	e002      	b.n	16376 <parse_string+0x6a>
		return 0;
   16370:	2700      	movs	r7, #0
		ep = str;
   16372:	4b4c      	ldr	r3, [pc, #304]	; (164a4 <parse_string+0x198>)
   16374:	6019      	str	r1, [r3, #0]
}
   16376:	4638      	mov	r0, r7
   16378:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (*ptr++ == '\\')
   1637c:	2a5c      	cmp	r2, #92	; 0x5c
   1637e:	bf14      	ite	ne
   16380:	3301      	addne	r3, #1
			ptr++; /* Skip escaped quotes. */
   16382:	3302      	addeq	r3, #2
   16384:	3401      	adds	r4, #1
   16386:	e7cb      	b.n	16320 <parse_string+0x14>
		if (*ptr != '\\')
   16388:	2b5c      	cmp	r3, #92	; 0x5c
   1638a:	f109 0c01 	add.w	ip, r9, #1
   1638e:	d003      	beq.n	16398 <parse_string+0x8c>
			*ptr2++ = *ptr++;
   16390:	f804 3b01 	strb.w	r3, [r4], #1
   16394:	46e1      	mov	r9, ip
   16396:	e7d8      	b.n	1634a <parse_string+0x3e>
			switch (*ptr) {
   16398:	f899 3001 	ldrb.w	r3, [r9, #1]
   1639c:	2b6e      	cmp	r3, #110	; 0x6e
   1639e:	d01a      	beq.n	163d6 <parse_string+0xca>
   163a0:	d808      	bhi.n	163b4 <parse_string+0xa8>
   163a2:	2b62      	cmp	r3, #98	; 0x62
   163a4:	f104 0101 	add.w	r1, r4, #1
   163a8:	d00d      	beq.n	163c6 <parse_string+0xba>
   163aa:	2b66      	cmp	r3, #102	; 0x66
   163ac:	d011      	beq.n	163d2 <parse_string+0xc6>
				*ptr2++ = *ptr;
   163ae:	f804 3b01 	strb.w	r3, [r4], #1
				break;
   163b2:	e00b      	b.n	163cc <parse_string+0xc0>
			switch (*ptr) {
   163b4:	2b74      	cmp	r3, #116	; 0x74
   163b6:	d011      	beq.n	163dc <parse_string+0xd0>
   163b8:	2b75      	cmp	r3, #117	; 0x75
   163ba:	d012      	beq.n	163e2 <parse_string+0xd6>
   163bc:	2b72      	cmp	r3, #114	; 0x72
   163be:	d1f6      	bne.n	163ae <parse_string+0xa2>
				*ptr2++ = '\r';
   163c0:	f804 bb01 	strb.w	fp, [r4], #1
				break;
   163c4:	e002      	b.n	163cc <parse_string+0xc0>
				*ptr2++ = '\b';
   163c6:	2308      	movs	r3, #8
				*ptr2++ = '\f';
   163c8:	7023      	strb	r3, [r4, #0]
   163ca:	460c      	mov	r4, r1
			ptr++;
   163cc:	f10c 0c01 	add.w	ip, ip, #1
   163d0:	e7e0      	b.n	16394 <parse_string+0x88>
				*ptr2++ = '\f';
   163d2:	230c      	movs	r3, #12
   163d4:	e7f8      	b.n	163c8 <parse_string+0xbc>
				*ptr2++ = '\n';
   163d6:	f804 ab01 	strb.w	sl, [r4], #1
				break;
   163da:	e7f7      	b.n	163cc <parse_string+0xc0>
				*ptr2++ = '\t';
   163dc:	f804 8b01 	strb.w	r8, [r4], #1
				break;
   163e0:	e7f4      	b.n	163cc <parse_string+0xc0>
				uc = parse_hex4(ptr + 1);
   163e2:	f109 0002 	add.w	r0, r9, #2
   163e6:	f01c fc65 	bl	32cb4 <parse_hex4>
				if ((uc >= 0xDC00 && uc <= 0xDFFF) || uc == 0)
   163ea:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   163ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
				uc = parse_hex4(ptr + 1);
   163f2:	4605      	mov	r5, r0
				ptr += 4; /* get the unicode char. */
   163f4:	f109 0c05 	add.w	ip, r9, #5
				if ((uc >= 0xDC00 && uc <= 0xDFFF) || uc == 0)
   163f8:	d3e8      	bcc.n	163cc <parse_string+0xc0>
   163fa:	2800      	cmp	r0, #0
   163fc:	d0e6      	beq.n	163cc <parse_string+0xc0>
				if (uc >= 0xD800 &&
   163fe:	f5a0 4358 	sub.w	r3, r0, #55296	; 0xd800
   16402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   16406:	d223      	bcs.n	16450 <parse_string+0x144>
					if (ptr[1] != '\\' || ptr[2] != 'u')
   16408:	f899 3006 	ldrb.w	r3, [r9, #6]
   1640c:	2b5c      	cmp	r3, #92	; 0x5c
   1640e:	d1dd      	bne.n	163cc <parse_string+0xc0>
   16410:	f899 3007 	ldrb.w	r3, [r9, #7]
   16414:	2b75      	cmp	r3, #117	; 0x75
   16416:	d1d9      	bne.n	163cc <parse_string+0xc0>
					uc2 = parse_hex4(ptr + 3);
   16418:	f109 0008 	add.w	r0, r9, #8
   1641c:	f01c fc4a 	bl	32cb4 <parse_hex4>
					if (uc2 < 0xDC00 || uc2 > 0xDFFF)
   16420:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   16424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
					ptr += 6;
   16428:	f109 0c0b 	add.w	ip, r9, #11
					if (uc2 < 0xDC00 || uc2 > 0xDFFF)
   1642c:	d2ce      	bcs.n	163cc <parse_string+0xc0>
					uc = 0x10000 + (((uc & 0x3FF) << 10) |
   1642e:	4b1e      	ldr	r3, [pc, #120]	; (164a8 <parse_string+0x19c>)
							(uc2 & 0x3FF));
   16430:	f3c0 0009 	ubfx	r0, r0, #0, #10
					uc = 0x10000 + (((uc & 0x3FF) << 10) |
   16434:	ea03 2585 	and.w	r5, r3, r5, lsl #10
   16438:	4305      	orrs	r5, r0
   1643a:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
					*--ptr2 = ((uc | 0x80) & 0xBF);
   1643e:	f005 033f 	and.w	r3, r5, #63	; 0x3f
   16442:	f063 037f 	orn	r3, r3, #127	; 0x7f
   16446:	70e3      	strb	r3, [r4, #3]
   16448:	1ce0      	adds	r0, r4, #3
					uc >>= 6;
   1644a:	09ad      	lsrs	r5, r5, #6
				len = 4;
   1644c:	2304      	movs	r3, #4
   1644e:	e013      	b.n	16478 <parse_string+0x16c>
				if (uc < 0x80)
   16450:	287f      	cmp	r0, #127	; 0x7f
   16452:	d809      	bhi.n	16468 <parse_string+0x15c>
					len = 1;
   16454:	2301      	movs	r3, #1
				ptr2 += len;
   16456:	3401      	adds	r4, #1
					*--ptr2 = (uc | firstByteMark[len]);
   16458:	4a14      	ldr	r2, [pc, #80]	; (164ac <parse_string+0x1a0>)
   1645a:	5cd1      	ldrb	r1, [r2, r3]
				ptr2 += len;
   1645c:	3b01      	subs	r3, #1
					*--ptr2 = (uc | firstByteMark[len]);
   1645e:	430d      	orrs	r5, r1
   16460:	f804 5c01 	strb.w	r5, [r4, #-1]
				ptr2 += len;
   16464:	441c      	add	r4, r3
				break;
   16466:	e7b1      	b.n	163cc <parse_string+0xc0>
				else if (uc < 0x800)
   16468:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   1646c:	d30d      	bcc.n	1648a <parse_string+0x17e>
				else if (uc < 0x10000)
   1646e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   16472:	d2e4      	bcs.n	1643e <parse_string+0x132>
					len = 3;
   16474:	2303      	movs	r3, #3
				ptr2 += len;
   16476:	1ce0      	adds	r0, r4, #3
					*--ptr2 = ((uc | 0x80) & 0xBF);
   16478:	f005 043f 	and.w	r4, r5, #63	; 0x3f
   1647c:	f064 047f 	orn	r4, r4, #127	; 0x7f
   16480:	1e41      	subs	r1, r0, #1
   16482:	f800 4c01 	strb.w	r4, [r0, #-1]
					uc >>= 6;
   16486:	09ad      	lsrs	r5, r5, #6
   16488:	e001      	b.n	1648e <parse_string+0x182>
					len = 2;
   1648a:	2302      	movs	r3, #2
				ptr2 += len;
   1648c:	1ca1      	adds	r1, r4, #2
					*--ptr2 = ((uc | 0x80) & 0xBF);
   1648e:	f005 003f 	and.w	r0, r5, #63	; 0x3f
   16492:	f060 007f 	orn	r0, r0, #127	; 0x7f
   16496:	1e4c      	subs	r4, r1, #1
   16498:	f801 0c01 	strb.w	r0, [r1, #-1]
					uc >>= 6;
   1649c:	09ad      	lsrs	r5, r5, #6
   1649e:	e7db      	b.n	16458 <parse_string+0x14c>
   164a0:	20020080 	.word	0x20020080
   164a4:	20021534 	.word	0x20021534
   164a8:	000ffc00 	.word	0x000ffc00
   164ac:	0003c4e5 	.word	0x0003c4e5

000164b0 <cJSON_New_Item>:
	cJSON *node = (cJSON *)cJSON_malloc(sizeof(cJSON));
   164b0:	4b06      	ldr	r3, [pc, #24]	; (164cc <cJSON_New_Item+0x1c>)
{
   164b2:	b510      	push	{r4, lr}
	cJSON *node = (cJSON *)cJSON_malloc(sizeof(cJSON));
   164b4:	681b      	ldr	r3, [r3, #0]
   164b6:	2028      	movs	r0, #40	; 0x28
   164b8:	4798      	blx	r3
	if (node)
   164ba:	4604      	mov	r4, r0
   164bc:	b118      	cbz	r0, 164c6 <cJSON_New_Item+0x16>
__ssp_bos_icheck3(memset, void *, int)
   164be:	2228      	movs	r2, #40	; 0x28
   164c0:	2100      	movs	r1, #0
   164c2:	f022 fdb8 	bl	39036 <memset>
}
   164c6:	4620      	mov	r0, r4
   164c8:	bd10      	pop	{r4, pc}
   164ca:	bf00      	nop
   164cc:	20020080 	.word	0x20020080

000164d0 <parse_value>:
}


/* Parser core - when encountering text, process appropriately. */
static const char *parse_value(cJSON *item, const char *value)
{
   164d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   164d2:	4605      	mov	r5, r0
	if (!value)
   164d4:	460c      	mov	r4, r1
   164d6:	b909      	cbnz	r1, 164dc <parse_value+0xc>
	if (*value == '{') {
		return parse_object(item, value);
	}

	ep = value;
	return 0; /* failure. */
   164d8:	2400      	movs	r4, #0
   164da:	e011      	b.n	16500 <parse_value+0x30>
	if (!strncmp(value, "null", 4)) {
   164dc:	2204      	movs	r2, #4
   164de:	4975      	ldr	r1, [pc, #468]	; (166b4 <parse_value+0x1e4>)
   164e0:	4620      	mov	r0, r4
   164e2:	f022 ff04 	bl	392ee <strncmp>
   164e6:	b918      	cbnz	r0, 164f0 <parse_value+0x20>
		item->type = cJSON_NULL;
   164e8:	2302      	movs	r3, #2
   164ea:	60eb      	str	r3, [r5, #12]
		return value + 4;
   164ec:	3404      	adds	r4, #4
   164ee:	e007      	b.n	16500 <parse_value+0x30>
	if (!strncmp(value, "false", 5)) {
   164f0:	2205      	movs	r2, #5
   164f2:	4971      	ldr	r1, [pc, #452]	; (166b8 <parse_value+0x1e8>)
   164f4:	4620      	mov	r0, r4
   164f6:	f022 fefa 	bl	392ee <strncmp>
   164fa:	b918      	cbnz	r0, 16504 <parse_value+0x34>
		item->type = cJSON_False;
   164fc:	60e8      	str	r0, [r5, #12]
		return value + 5;
   164fe:	3405      	adds	r4, #5
}
   16500:	4620      	mov	r0, r4
   16502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!strncmp(value, "true", 4)) {
   16504:	2204      	movs	r2, #4
   16506:	496d      	ldr	r1, [pc, #436]	; (166bc <parse_value+0x1ec>)
   16508:	4620      	mov	r0, r4
   1650a:	f022 fef0 	bl	392ee <strncmp>
   1650e:	b918      	cbnz	r0, 16518 <parse_value+0x48>
		item->type = cJSON_True;
   16510:	2301      	movs	r3, #1
   16512:	60eb      	str	r3, [r5, #12]
		item->valueint = 1;
   16514:	616b      	str	r3, [r5, #20]
   16516:	e7e9      	b.n	164ec <parse_value+0x1c>
	if (*value == '\"') {
   16518:	7823      	ldrb	r3, [r4, #0]
   1651a:	2b22      	cmp	r3, #34	; 0x22
   1651c:	d105      	bne.n	1652a <parse_value+0x5a>
		return parse_string(item, value);
   1651e:	4621      	mov	r1, r4
   16520:	4628      	mov	r0, r5
}
   16522:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return parse_string(item, value);
   16526:	f7ff bef1 	b.w	1630c <parse_string>
	if (*value == '-' || (*value >= '0' && *value <= '9')) {
   1652a:	2b2d      	cmp	r3, #45	; 0x2d
   1652c:	d005      	beq.n	1653a <parse_value+0x6a>
   1652e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   16532:	2a09      	cmp	r2, #9
   16534:	d81d      	bhi.n	16572 <parse_value+0xa2>
	int n = 0, sign = 1;
   16536:	2201      	movs	r2, #1
   16538:	e002      	b.n	16540 <parse_value+0x70>
		sign = -1, num++; /* Has sign? */
   1653a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1653e:	3401      	adds	r4, #1
	if (*num == '0')
   16540:	7823      	ldrb	r3, [r4, #0]
   16542:	2b30      	cmp	r3, #48	; 0x30
		num++; /* is zero */
   16544:	bf08      	it	eq
   16546:	3401      	addeq	r4, #1
	if (*num >= '1' && *num <= '9')
   16548:	7823      	ldrb	r3, [r4, #0]
   1654a:	3b31      	subs	r3, #49	; 0x31
   1654c:	2b08      	cmp	r3, #8
	int n = 0, sign = 1;
   1654e:	f04f 0300 	mov.w	r3, #0
	if (*num >= '1' && *num <= '9')
   16552:	d809      	bhi.n	16568 <parse_value+0x98>
			n = (n * 10) + (*num++ - '0');
   16554:	200a      	movs	r0, #10
   16556:	4343      	muls	r3, r0
   16558:	f814 1b01 	ldrb.w	r1, [r4], #1
   1655c:	3b30      	subs	r3, #48	; 0x30
   1655e:	440b      	add	r3, r1
		while (*num >= '0' && *num <= '9'); /* Number? */
   16560:	7821      	ldrb	r1, [r4, #0]
   16562:	3930      	subs	r1, #48	; 0x30
   16564:	2909      	cmp	r1, #9
   16566:	d9f6      	bls.n	16556 <parse_value+0x86>
	n = sign * n;
   16568:	4353      	muls	r3, r2
	item->valueint = (int)n;
   1656a:	616b      	str	r3, [r5, #20]
	item->type = cJSON_Number;
   1656c:	2303      	movs	r3, #3
   1656e:	60eb      	str	r3, [r5, #12]
	return num;
   16570:	e7c6      	b.n	16500 <parse_value+0x30>
	if (*value == '[') {
   16572:	2b5b      	cmp	r3, #91	; 0x5b
   16574:	d136      	bne.n	165e4 <parse_value+0x114>
	if (*value != '[') {
		ep = value;
		return 0;
	} /* not an array! */

	item->type = cJSON_Array;
   16576:	2305      	movs	r3, #5
	value = skip(value + 1);
   16578:	1c60      	adds	r0, r4, #1
	item->type = cJSON_Array;
   1657a:	60eb      	str	r3, [r5, #12]
	value = skip(value + 1);
   1657c:	f01c fbf0 	bl	32d60 <skip>
	if (*value == ']')
   16580:	7803      	ldrb	r3, [r0, #0]
	value = skip(value + 1);
   16582:	4604      	mov	r4, r0
	if (*value == ']')
   16584:	2b5d      	cmp	r3, #93	; 0x5d
   16586:	d101      	bne.n	1658c <parse_value+0xbc>
	} /* not an object! */

	item->type = cJSON_Object;
	value = skip(value + 1);
	if (*value == '}')
		return value + 1; /* empty array. */
   16588:	3401      	adds	r4, #1
   1658a:	e7b9      	b.n	16500 <parse_value+0x30>
	item->child = child = cJSON_New_Item();
   1658c:	f7ff ff90 	bl	164b0 <cJSON_New_Item>
   16590:	4606      	mov	r6, r0
   16592:	60a8      	str	r0, [r5, #8]
	if (!item->child)
   16594:	2800      	cmp	r0, #0
   16596:	d09f      	beq.n	164d8 <parse_value+0x8>
	value = skip(parse_value(
   16598:	4620      	mov	r0, r4
   1659a:	f01c fbe1 	bl	32d60 <skip>
   1659e:	4601      	mov	r1, r0
   165a0:	4630      	mov	r0, r6
   165a2:	f7ff ff95 	bl	164d0 <parse_value>
   165a6:	f01c fbdb 	bl	32d60 <skip>
		if (!value)
   165aa:	4604      	mov	r4, r0
   165ac:	2800      	cmp	r0, #0
   165ae:	d093      	beq.n	164d8 <parse_value+0x8>
	while (*value == ',') {
   165b0:	7803      	ldrb	r3, [r0, #0]
   165b2:	2b2c      	cmp	r3, #44	; 0x2c
   165b4:	d004      	beq.n	165c0 <parse_value+0xf0>
	if (*value == ']')
   165b6:	2b5d      	cmp	r3, #93	; 0x5d
   165b8:	d0e6      	beq.n	16588 <parse_value+0xb8>
	ep = value;
   165ba:	4b41      	ldr	r3, [pc, #260]	; (166c0 <parse_value+0x1f0>)
   165bc:	601c      	str	r4, [r3, #0]
   165be:	e78b      	b.n	164d8 <parse_value+0x8>
		new_item = cJSON_New_Item();
   165c0:	f7ff ff76 	bl	164b0 <cJSON_New_Item>
		if (!new_item)
   165c4:	4605      	mov	r5, r0
   165c6:	2800      	cmp	r0, #0
   165c8:	d086      	beq.n	164d8 <parse_value+0x8>
		child->next = new_item;
   165ca:	6030      	str	r0, [r6, #0]
		new_item->prev = child;
   165cc:	6046      	str	r6, [r0, #4]
		value = skip(parse_value(child, skip(value + 1)));
   165ce:	1c60      	adds	r0, r4, #1
   165d0:	f01c fbc6 	bl	32d60 <skip>
   165d4:	4601      	mov	r1, r0
   165d6:	4628      	mov	r0, r5
   165d8:	f7ff ff7a 	bl	164d0 <parse_value>
   165dc:	f01c fbc0 	bl	32d60 <skip>
		if (!value)
   165e0:	462e      	mov	r6, r5
   165e2:	e7e2      	b.n	165aa <parse_value+0xda>
	if (*value == '{') {
   165e4:	2b7b      	cmp	r3, #123	; 0x7b
   165e6:	d1e8      	bne.n	165ba <parse_value+0xea>
	item->type = cJSON_Object;
   165e8:	2306      	movs	r3, #6
	value = skip(value + 1);
   165ea:	1c60      	adds	r0, r4, #1
	item->type = cJSON_Object;
   165ec:	60eb      	str	r3, [r5, #12]
	value = skip(value + 1);
   165ee:	f01c fbb7 	bl	32d60 <skip>
	if (*value == '}')
   165f2:	7803      	ldrb	r3, [r0, #0]
	value = skip(value + 1);
   165f4:	4604      	mov	r4, r0
	if (*value == '}')
   165f6:	2b7d      	cmp	r3, #125	; 0x7d
   165f8:	d0c6      	beq.n	16588 <parse_value+0xb8>

	item->child = child = cJSON_New_Item();
   165fa:	f7ff ff59 	bl	164b0 <cJSON_New_Item>
   165fe:	4606      	mov	r6, r0
   16600:	60a8      	str	r0, [r5, #8]
	if (!item->child)
   16602:	2800      	cmp	r0, #0
   16604:	f43f af68 	beq.w	164d8 <parse_value+0x8>
		return 0;
	value = skip(parse_string(child, skip(value)));
   16608:	4620      	mov	r0, r4
   1660a:	f01c fba9 	bl	32d60 <skip>
   1660e:	4601      	mov	r1, r0
   16610:	4630      	mov	r0, r6
   16612:	f7ff fe7b 	bl	1630c <parse_string>
   16616:	f01c fba3 	bl	32d60 <skip>
	if (!value)
   1661a:	2800      	cmp	r0, #0
   1661c:	f43f af5c 	beq.w	164d8 <parse_value+0x8>
		return 0;
	child->string = child->valuestring;
	child->valuestring = 0;
   16620:	2400      	movs	r4, #0
	child->string = child->valuestring;
   16622:	6933      	ldr	r3, [r6, #16]
	child->valuestring = 0;
   16624:	6134      	str	r4, [r6, #16]
	child->string = child->valuestring;
   16626:	6233      	str	r3, [r6, #32]
	if (*value != ':') {
   16628:	7803      	ldrb	r3, [r0, #0]
   1662a:	2b3a      	cmp	r3, #58	; 0x3a
   1662c:	d002      	beq.n	16634 <parse_value+0x164>
		ep = value;
   1662e:	4b24      	ldr	r3, [pc, #144]	; (166c0 <parse_value+0x1f0>)
   16630:	6018      	str	r0, [r3, #0]
		return 0;
   16632:	e765      	b.n	16500 <parse_value+0x30>
	} /* fail! */
	value = skip(parse_value(
   16634:	3001      	adds	r0, #1
   16636:	f01c fb93 	bl	32d60 <skip>
   1663a:	4601      	mov	r1, r0
   1663c:	4630      	mov	r0, r6
   1663e:	f7ff ff47 	bl	164d0 <parse_value>
   16642:	f01c fb8d 	bl	32d60 <skip>
			return 0;
		} /* fail! */
		value = skip(parse_value(
			child, skip(value +
				    1))); /* skip any spacing, get the value. */
		if (!value)
   16646:	4607      	mov	r7, r0
   16648:	2800      	cmp	r0, #0
   1664a:	f43f af45 	beq.w	164d8 <parse_value+0x8>
	while (*value == ',') {
   1664e:	7803      	ldrb	r3, [r0, #0]
   16650:	2b2c      	cmp	r3, #44	; 0x2c
   16652:	d003      	beq.n	1665c <parse_value+0x18c>
			return 0;
	}

	if (*value == '}')
   16654:	2b7d      	cmp	r3, #125	; 0x7d
   16656:	d129      	bne.n	166ac <parse_value+0x1dc>
		return value + 1; /* end of array */
   16658:	1c44      	adds	r4, r0, #1
   1665a:	e751      	b.n	16500 <parse_value+0x30>
		new_item = cJSON_New_Item();
   1665c:	f7ff ff28 	bl	164b0 <cJSON_New_Item>
		if (!(new_item))
   16660:	4605      	mov	r5, r0
   16662:	2800      	cmp	r0, #0
   16664:	f43f af38 	beq.w	164d8 <parse_value+0x8>
		child->next = new_item;
   16668:	6030      	str	r0, [r6, #0]
		new_item->prev = child;
   1666a:	6046      	str	r6, [r0, #4]
		value = skip(parse_string(child, skip(value + 1)));
   1666c:	1c78      	adds	r0, r7, #1
   1666e:	f01c fb77 	bl	32d60 <skip>
   16672:	4601      	mov	r1, r0
   16674:	4628      	mov	r0, r5
   16676:	f7ff fe49 	bl	1630c <parse_string>
   1667a:	f01c fb71 	bl	32d60 <skip>
		if (!value)
   1667e:	2800      	cmp	r0, #0
   16680:	f43f af2a 	beq.w	164d8 <parse_value+0x8>
		child->string = child->valuestring;
   16684:	692b      	ldr	r3, [r5, #16]
		child->valuestring = 0;
   16686:	612c      	str	r4, [r5, #16]
		child->string = child->valuestring;
   16688:	622b      	str	r3, [r5, #32]
		if (*value != ':') {
   1668a:	7803      	ldrb	r3, [r0, #0]
   1668c:	2b3a      	cmp	r3, #58	; 0x3a
   1668e:	d002      	beq.n	16696 <parse_value+0x1c6>
			ep = value;
   16690:	4b0b      	ldr	r3, [pc, #44]	; (166c0 <parse_value+0x1f0>)
   16692:	6018      	str	r0, [r3, #0]
			return 0;
   16694:	e720      	b.n	164d8 <parse_value+0x8>
		value = skip(parse_value(
   16696:	3001      	adds	r0, #1
   16698:	f01c fb62 	bl	32d60 <skip>
   1669c:	4601      	mov	r1, r0
   1669e:	4628      	mov	r0, r5
   166a0:	f7ff ff16 	bl	164d0 <parse_value>
   166a4:	f01c fb5c 	bl	32d60 <skip>
		if (!value)
   166a8:	462e      	mov	r6, r5
   166aa:	e7cc      	b.n	16646 <parse_value+0x176>
	ep = value;
   166ac:	4b04      	ldr	r3, [pc, #16]	; (166c0 <parse_value+0x1f0>)
   166ae:	6018      	str	r0, [r3, #0]
	return 0; /* malformed. */
   166b0:	e712      	b.n	164d8 <parse_value+0x8>
   166b2:	bf00      	nop
   166b4:	0003c4ec 	.word	0x0003c4ec
   166b8:	0003c4f1 	.word	0x0003c4f1
   166bc:	0003c4f7 	.word	0x0003c4f7
   166c0:	20021534 	.word	0x20021534

000166c4 <ensure>:
{
   166c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!p || !p->buffer)
   166c6:	4605      	mov	r5, r0
   166c8:	b368      	cbz	r0, 16726 <ensure+0x62>
   166ca:	6806      	ldr	r6, [r0, #0]
   166cc:	b1f6      	cbz	r6, 1670c <ensure+0x48>
	needed += p->offset;
   166ce:	6883      	ldr	r3, [r0, #8]
	if (needed <= p->length)
   166d0:	6842      	ldr	r2, [r0, #4]
	needed += p->offset;
   166d2:	185c      	adds	r4, r3, r1
	if (needed <= p->length)
   166d4:	42a2      	cmp	r2, r4
   166d6:	db01      	blt.n	166dc <ensure+0x18>
	return newbuffer + p->offset;
   166d8:	441e      	add	r6, r3
   166da:	e017      	b.n	1670c <ensure+0x48>
	--x;
   166dc:	3c01      	subs	r4, #1
	x |= x >> 1;
   166de:	ea44 0464 	orr.w	r4, r4, r4, asr #1
	x |= x >> 2;
   166e2:	ea44 04a4 	orr.w	r4, r4, r4, asr #2
	x |= x >> 4;
   166e6:	ea44 1424 	orr.w	r4, r4, r4, asr #4
	x |= x >> 8;
   166ea:	ea44 2424 	orr.w	r4, r4, r4, asr #8
	x |= x >> 16;
   166ee:	ea44 4424 	orr.w	r4, r4, r4, asr #16
	newbuffer = (char *)cJSON_malloc(newsize);
   166f2:	4b0e      	ldr	r3, [pc, #56]	; (1672c <ensure+0x68>)
	return x + 1;
   166f4:	3401      	adds	r4, #1
	newbuffer = (char *)cJSON_malloc(newsize);
   166f6:	681b      	ldr	r3, [r3, #0]
   166f8:	4620      	mov	r0, r4
   166fa:	4798      	blx	r3
	if (!newbuffer) {
   166fc:	4f0c      	ldr	r7, [pc, #48]	; (16730 <ensure+0x6c>)
   166fe:	4606      	mov	r6, r0
   16700:	b930      	cbnz	r0, 16710 <ensure+0x4c>
		cJSON_free(p->buffer);
   16702:	683b      	ldr	r3, [r7, #0]
   16704:	6828      	ldr	r0, [r5, #0]
   16706:	4798      	blx	r3
		p->length = 0, p->buffer = 0;
   16708:	e9c5 6600 	strd	r6, r6, [r5]
}
   1670c:	4630      	mov	r0, r6
   1670e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   16710:	e9d5 1200 	ldrd	r1, r2, [r5]
   16714:	f022 fc55 	bl	38fc2 <memcpy>
	cJSON_free(p->buffer);
   16718:	683b      	ldr	r3, [r7, #0]
   1671a:	6828      	ldr	r0, [r5, #0]
   1671c:	4798      	blx	r3
	p->buffer = newbuffer;
   1671e:	e9c5 6400 	strd	r6, r4, [r5]
	return newbuffer + p->offset;
   16722:	68ab      	ldr	r3, [r5, #8]
   16724:	e7d8      	b.n	166d8 <ensure+0x14>
		return 0;
   16726:	4606      	mov	r6, r0
   16728:	e7f0      	b.n	1670c <ensure+0x48>
   1672a:	bf00      	nop
   1672c:	20020080 	.word	0x20020080
   16730:	2002007c 	.word	0x2002007c

00016734 <cJSON_strdup>:
{
   16734:	b570      	push	{r4, r5, r6, lr}
	len = strlens(str) + 1;
   16736:	4606      	mov	r6, r0
   16738:	b170      	cbz	r0, 16758 <cJSON_strdup+0x24>
   1673a:	f7fb fca1 	bl	12080 <strlen>
   1673e:	1c44      	adds	r4, r0, #1
	copy = (char *)cJSON_malloc(len);
   16740:	4b06      	ldr	r3, [pc, #24]	; (1675c <cJSON_strdup+0x28>)
   16742:	4620      	mov	r0, r4
   16744:	681b      	ldr	r3, [r3, #0]
   16746:	4798      	blx	r3
	if (!copy)
   16748:	4605      	mov	r5, r0
   1674a:	b118      	cbz	r0, 16754 <cJSON_strdup+0x20>
   1674c:	4622      	mov	r2, r4
   1674e:	4631      	mov	r1, r6
   16750:	f022 fc37 	bl	38fc2 <memcpy>
}
   16754:	4628      	mov	r0, r5
   16756:	bd70      	pop	{r4, r5, r6, pc}
	len = strlens(str) + 1;
   16758:	2401      	movs	r4, #1
   1675a:	e7f1      	b.n	16740 <cJSON_strdup+0xc>
   1675c:	20020080 	.word	0x20020080

00016760 <print_string_ptr>:
{
   16760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int len = 0, flag = 0;
   16764:	2200      	movs	r2, #0
{
   16766:	460d      	mov	r5, r1
   16768:	4606      	mov	r6, r0
   1676a:	4601      	mov	r1, r0
   1676c:	460b      	mov	r3, r1
	for (ptr = str; *ptr; ptr++)
   1676e:	f811 4b01 	ldrb.w	r4, [r1], #1
   16772:	b9c4      	cbnz	r4, 167a6 <print_string_ptr+0x46>
	if (!flag) {
   16774:	bb4a      	cbnz	r2, 167ca <print_string_ptr+0x6a>
		len = ptr - str;
   16776:	1b9c      	subs	r4, r3, r6
		if (p)
   16778:	1ce1      	adds	r1, r4, #3
   1677a:	b30d      	cbz	r5, 167c0 <print_string_ptr+0x60>
			out = ensure(p, len + 3);
   1677c:	4628      	mov	r0, r5
   1677e:	f7ff ffa1 	bl	166c4 <ensure>
			out = (char *)cJSON_malloc(len + 3);
   16782:	4605      	mov	r5, r0
		if (!out)
   16784:	b160      	cbz	r0, 167a0 <print_string_ptr+0x40>
		*ptr2++ = '\"';
   16786:	4603      	mov	r3, r0
   16788:	2722      	movs	r7, #34	; 0x22
   1678a:	f803 7b01 	strb.w	r7, [r3], #1
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   1678e:	4618      	mov	r0, r3
   16790:	4631      	mov	r1, r6
   16792:	f022 fda4 	bl	392de <strcpy>
   16796:	4603      	mov	r3, r0
		ptr2[len + 1] = 0;
   16798:	2200      	movs	r2, #0
   1679a:	4423      	add	r3, r4
		ptr2[len] = '\"';
   1679c:	5507      	strb	r7, [r0, r4]
		ptr2[len + 1] = 0;
   1679e:	705a      	strb	r2, [r3, #1]
}
   167a0:	4628      	mov	r0, r5
   167a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				: 0;
   167a6:	1e63      	subs	r3, r4, #1
   167a8:	2b1e      	cmp	r3, #30
   167aa:	d907      	bls.n	167bc <print_string_ptr+0x5c>
		flag |= ((*ptr > 0 && *ptr < 32) || (*ptr == '\"') ||
   167ac:	2c22      	cmp	r4, #34	; 0x22
   167ae:	d005      	beq.n	167bc <print_string_ptr+0x5c>
				: 0;
   167b0:	f1a4 035c 	sub.w	r3, r4, #92	; 0x5c
   167b4:	425c      	negs	r4, r3
   167b6:	415c      	adcs	r4, r3
		flag |= ((*ptr > 0 && *ptr < 32) || (*ptr == '\"') ||
   167b8:	4322      	orrs	r2, r4
   167ba:	e7d7      	b.n	1676c <print_string_ptr+0xc>
				: 0;
   167bc:	2401      	movs	r4, #1
   167be:	e7fb      	b.n	167b8 <print_string_ptr+0x58>
			out = (char *)cJSON_malloc(len + 3);
   167c0:	4b41      	ldr	r3, [pc, #260]	; (168c8 <print_string_ptr+0x168>)
   167c2:	4608      	mov	r0, r1
   167c4:	681b      	ldr	r3, [r3, #0]
   167c6:	4798      	blx	r3
   167c8:	e7db      	b.n	16782 <print_string_ptr+0x22>
	if (!str) {
   167ca:	b986      	cbnz	r6, 167ee <print_string_ptr+0x8e>
		if (p)
   167cc:	b155      	cbz	r5, 167e4 <print_string_ptr+0x84>
			out = ensure(p, 3);
   167ce:	2103      	movs	r1, #3
   167d0:	4628      	mov	r0, r5
   167d2:	f7ff ff77 	bl	166c4 <ensure>
			out = (char *)cJSON_malloc(3);
   167d6:	4605      	mov	r5, r0
		if (!out)
   167d8:	2800      	cmp	r0, #0
   167da:	d0e1      	beq.n	167a0 <print_string_ptr+0x40>
   167dc:	493b      	ldr	r1, [pc, #236]	; (168cc <print_string_ptr+0x16c>)
   167de:	f022 fd7e 	bl	392de <strcpy>
		return out;
   167e2:	e7dd      	b.n	167a0 <print_string_ptr+0x40>
			out = (char *)cJSON_malloc(3);
   167e4:	4b38      	ldr	r3, [pc, #224]	; (168c8 <print_string_ptr+0x168>)
   167e6:	2003      	movs	r0, #3
   167e8:	681b      	ldr	r3, [r3, #0]
   167ea:	4798      	blx	r3
   167ec:	e7f3      	b.n	167d6 <print_string_ptr+0x76>
	while ((token) && ++len) {
   167ee:	46b1      	mov	r9, r6
	token = *ptr;
   167f0:	f896 8000 	ldrb.w	r8, [r6]
		if (strchr("\"\\\b\f\n\r\t", token))
   167f4:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 168d0 <print_string_ptr+0x170>
	while ((token) && ++len) {
   167f8:	f1b8 0f00 	cmp.w	r8, #0
   167fc:	d002      	beq.n	16804 <print_string_ptr+0xa4>
   167fe:	1c67      	adds	r7, r4, #1
   16800:	d119      	bne.n	16836 <print_string_ptr+0xd6>
   16802:	463c      	mov	r4, r7
	if (p)
   16804:	1ce1      	adds	r1, r4, #3
   16806:	b32d      	cbz	r5, 16854 <print_string_ptr+0xf4>
		out = ensure(p, len + 3);
   16808:	4628      	mov	r0, r5
   1680a:	f7ff ff5b 	bl	166c4 <ensure>
		out = (char *)cJSON_malloc(len + 3);
   1680e:	4605      	mov	r5, r0
	if (!out)
   16810:	2800      	cmp	r0, #0
   16812:	d0c5      	beq.n	167a0 <print_string_ptr+0x40>
	*ptr2++ = '\"';
   16814:	4604      	mov	r4, r0
   16816:	2322      	movs	r3, #34	; 0x22
			*ptr2++ = '\\';
   16818:	275c      	movs	r7, #92	; 0x5c
				*ptr2++ = 'f';
   1681a:	f04f 0866 	mov.w	r8, #102	; 0x66
				sprintf(ptr2, "u%04x", token);
   1681e:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 168d4 <print_string_ptr+0x174>
	*ptr2++ = '\"';
   16822:	f804 3b01 	strb.w	r3, [r4], #1
	while (*ptr) {
   16826:	3e01      	subs	r6, #1
   16828:	f816 3f01 	ldrb.w	r3, [r6, #1]!
   1682c:	b9bb      	cbnz	r3, 1685e <print_string_ptr+0xfe>
	*ptr2++ = '\"';
   1682e:	2222      	movs	r2, #34	; 0x22
	*ptr2++ = 0;
   16830:	7063      	strb	r3, [r4, #1]
	*ptr2++ = '\"';
   16832:	7022      	strb	r2, [r4, #0]
	return out;
   16834:	e7b4      	b.n	167a0 <print_string_ptr+0x40>
		if (strchr("\"\\\b\f\n\r\t", token))
   16836:	4641      	mov	r1, r8
   16838:	4650      	mov	r0, sl
   1683a:	f022 fd43 	bl	392c4 <strchr>
   1683e:	b120      	cbz	r0, 1684a <print_string_ptr+0xea>
			len++;
   16840:	1ca7      	adds	r7, r4, #2
		token = *ptr;
   16842:	f819 8f01 	ldrb.w	r8, [r9, #1]!
   16846:	463c      	mov	r4, r7
   16848:	e7d6      	b.n	167f8 <print_string_ptr+0x98>
		else if (token < 32)
   1684a:	f1b8 0f1f 	cmp.w	r8, #31
			len += 5;
   1684e:	bf98      	it	ls
   16850:	1da7      	addls	r7, r4, #6
   16852:	e7f6      	b.n	16842 <print_string_ptr+0xe2>
		out = (char *)cJSON_malloc(len + 3);
   16854:	4b1c      	ldr	r3, [pc, #112]	; (168c8 <print_string_ptr+0x168>)
   16856:	4608      	mov	r0, r1
   16858:	681b      	ldr	r3, [r3, #0]
   1685a:	4798      	blx	r3
   1685c:	e7d7      	b.n	1680e <print_string_ptr+0xae>
		if ((unsigned char)*ptr > 31 && *ptr != '\"' && *ptr != '\\')
   1685e:	2b1f      	cmp	r3, #31
   16860:	f104 0001 	add.w	r0, r4, #1
   16864:	d906      	bls.n	16874 <print_string_ptr+0x114>
   16866:	2b22      	cmp	r3, #34	; 0x22
   16868:	d004      	beq.n	16874 <print_string_ptr+0x114>
   1686a:	2b5c      	cmp	r3, #92	; 0x5c
   1686c:	d002      	beq.n	16874 <print_string_ptr+0x114>
			*ptr2++ = *ptr++;
   1686e:	7023      	strb	r3, [r4, #0]
   16870:	4604      	mov	r4, r0
   16872:	e7d9      	b.n	16828 <print_string_ptr+0xc8>
			*ptr2++ = '\\';
   16874:	7027      	strb	r7, [r4, #0]
			switch (token = *ptr++) {
   16876:	7832      	ldrb	r2, [r6, #0]
   16878:	2a0c      	cmp	r2, #12
   1687a:	d016      	beq.n	168aa <print_string_ptr+0x14a>
   1687c:	d809      	bhi.n	16892 <print_string_ptr+0x132>
   1687e:	2a09      	cmp	r2, #9
   16880:	d01a      	beq.n	168b8 <print_string_ptr+0x158>
   16882:	2a0a      	cmp	r2, #10
   16884:	d015      	beq.n	168b2 <print_string_ptr+0x152>
   16886:	2a08      	cmp	r2, #8
   16888:	d119      	bne.n	168be <print_string_ptr+0x15e>
				*ptr2++ = 'b';
   1688a:	2362      	movs	r3, #98	; 0x62
   1688c:	1ca0      	adds	r0, r4, #2
				*ptr2++ = 't';
   1688e:	7063      	strb	r3, [r4, #1]
				break;
   16890:	e7ee      	b.n	16870 <print_string_ptr+0x110>
			switch (token = *ptr++) {
   16892:	2a22      	cmp	r2, #34	; 0x22
   16894:	d006      	beq.n	168a4 <print_string_ptr+0x144>
   16896:	2a5c      	cmp	r2, #92	; 0x5c
   16898:	d004      	beq.n	168a4 <print_string_ptr+0x144>
   1689a:	2a0d      	cmp	r2, #13
   1689c:	d10f      	bne.n	168be <print_string_ptr+0x15e>
				*ptr2++ = 'r';
   1689e:	1ca0      	adds	r0, r4, #2
   168a0:	2372      	movs	r3, #114	; 0x72
   168a2:	e7f4      	b.n	1688e <print_string_ptr+0x12e>
				*ptr2++ = '\"';
   168a4:	1ca0      	adds	r0, r4, #2
   168a6:	7062      	strb	r2, [r4, #1]
				break;
   168a8:	e7e2      	b.n	16870 <print_string_ptr+0x110>
				*ptr2++ = 'f';
   168aa:	1ca0      	adds	r0, r4, #2
   168ac:	f884 8001 	strb.w	r8, [r4, #1]
				break;
   168b0:	e7de      	b.n	16870 <print_string_ptr+0x110>
				*ptr2++ = 'n';
   168b2:	1ca0      	adds	r0, r4, #2
   168b4:	236e      	movs	r3, #110	; 0x6e
   168b6:	e7ea      	b.n	1688e <print_string_ptr+0x12e>
				*ptr2++ = 't';
   168b8:	1ca0      	adds	r0, r4, #2
   168ba:	2374      	movs	r3, #116	; 0x74
   168bc:	e7e7      	b.n	1688e <print_string_ptr+0x12e>
				sprintf(ptr2, "u%04x", token);
   168be:	4649      	mov	r1, r9
   168c0:	f01b fa08 	bl	31cd4 <siprintf>
				ptr2 += 5;
   168c4:	1da0      	adds	r0, r4, #6
				break; /* escape and print */
   168c6:	e7d3      	b.n	16870 <print_string_ptr+0x110>
   168c8:	20020080 	.word	0x20020080
   168cc:	0003c50a 	.word	0x0003c50a
   168d0:	0003c50d 	.word	0x0003c50d
   168d4:	0003c515 	.word	0x0003c515

000168d8 <print_array.isra.4>:
static char *print_array(cJSON *item, int depth, int fmt, printbuffer *p)
   168d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   168dc:	4607      	mov	r7, r0
   168de:	468a      	mov	sl, r1
   168e0:	4616      	mov	r6, r2
   168e2:	461c      	mov	r4, r3
	int numentries = 0, i = 0, fail = 0;
   168e4:	2500      	movs	r5, #0
	cJSON *child = item->child;
   168e6:	f8d0 9000 	ldr.w	r9, [r0]
	while (child)
   168ea:	f1b9 0f00 	cmp.w	r9, #0
   168ee:	d10e      	bne.n	1690e <print_array.isra.4+0x36>
	if (!numentries) {
   168f0:	b9b5      	cbnz	r5, 16920 <print_array.isra.4+0x48>
		if (p)
   168f2:	b184      	cbz	r4, 16916 <print_array.isra.4+0x3e>
			out = ensure(p, 3);
   168f4:	2103      	movs	r1, #3
   168f6:	4620      	mov	r0, r4
   168f8:	f7ff fee4 	bl	166c4 <ensure>
			out = (char *)cJSON_malloc(3);
   168fc:	4681      	mov	r9, r0
		if (out)
   168fe:	b110      	cbz	r0, 16906 <print_array.isra.4+0x2e>
   16900:	4971      	ldr	r1, [pc, #452]	; (16ac8 <print_array.isra.4+0x1f0>)
   16902:	f022 fcec 	bl	392de <strcpy>
}
   16906:	4648      	mov	r0, r9
   16908:	b003      	add	sp, #12
   1690a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		numentries++, child = child->next;
   1690e:	3501      	adds	r5, #1
   16910:	f8d9 9000 	ldr.w	r9, [r9]
   16914:	e7e9      	b.n	168ea <print_array.isra.4+0x12>
			out = (char *)cJSON_malloc(3);
   16916:	4b6d      	ldr	r3, [pc, #436]	; (16acc <print_array.isra.4+0x1f4>)
   16918:	2003      	movs	r0, #3
   1691a:	681b      	ldr	r3, [r3, #0]
   1691c:	4798      	blx	r3
   1691e:	e7ed      	b.n	168fc <print_array.isra.4+0x24>
	if (p) {
   16920:	2c00      	cmp	r4, #0
   16922:	d048      	beq.n	169b6 <print_array.isra.4+0xde>
		i = p->offset;
   16924:	68a3      	ldr	r3, [r4, #8]
		ptr = ensure(p, 1);
   16926:	2101      	movs	r1, #1
   16928:	4620      	mov	r0, r4
		i = p->offset;
   1692a:	9300      	str	r3, [sp, #0]
		ptr = ensure(p, 1);
   1692c:	f7ff feca 	bl	166c4 <ensure>
		if (!ptr)
   16930:	2800      	cmp	r0, #0
   16932:	d0e8      	beq.n	16906 <print_array.isra.4+0x2e>
		*ptr = '[';
   16934:	235b      	movs	r3, #91	; 0x5b
   16936:	2e00      	cmp	r6, #0
   16938:	7003      	strb	r3, [r0, #0]
		child = item->child;
   1693a:	683d      	ldr	r5, [r7, #0]
   1693c:	bf14      	ite	ne
   1693e:	2702      	movne	r7, #2
   16940:	2701      	moveq	r7, #1
				*ptr++ = ',';
   16942:	f04f 082c 	mov.w	r8, #44	; 0x2c
				*ptr = 0;
   16946:	46cb      	mov	fp, r9
		p->offset++;
   16948:	68a3      	ldr	r3, [r4, #8]
			print_value(child, depth + 1, fmt, p);
   1694a:	f10a 0a01 	add.w	sl, sl, #1
		p->offset++;
   1694e:	3301      	adds	r3, #1
   16950:	60a3      	str	r3, [r4, #8]
				ptr = ensure(p, len + 1);
   16952:	1c7b      	adds	r3, r7, #1
   16954:	9301      	str	r3, [sp, #4]
		while (child && !fail) {
   16956:	b96d      	cbnz	r5, 16974 <print_array.isra.4+0x9c>
		ptr = ensure(p, 2);
   16958:	2102      	movs	r1, #2
   1695a:	4620      	mov	r0, r4
   1695c:	f7ff feb2 	bl	166c4 <ensure>
		if (!ptr)
   16960:	2800      	cmp	r0, #0
   16962:	d0d0      	beq.n	16906 <print_array.isra.4+0x2e>
		*ptr++ = ']';
   16964:	235d      	movs	r3, #93	; 0x5d
		*ptr = 0;
   16966:	7045      	strb	r5, [r0, #1]
		*ptr++ = ']';
   16968:	7003      	strb	r3, [r0, #0]
		out = (p->buffer) + i;
   1696a:	6823      	ldr	r3, [r4, #0]
   1696c:	9a00      	ldr	r2, [sp, #0]
   1696e:	441a      	add	r2, r3
   16970:	4691      	mov	r9, r2
   16972:	e7c8      	b.n	16906 <print_array.isra.4+0x2e>
			print_value(child, depth + 1, fmt, p);
   16974:	4623      	mov	r3, r4
   16976:	4632      	mov	r2, r6
   16978:	4651      	mov	r1, sl
   1697a:	4628      	mov	r0, r5
   1697c:	f000 f8aa 	bl	16ad4 <print_value>
			p->offset = update(p);
   16980:	4620      	mov	r0, r4
   16982:	f01c f9f6 	bl	32d72 <update>
			if (child->next) {
   16986:	682b      	ldr	r3, [r5, #0]
			p->offset = update(p);
   16988:	60a0      	str	r0, [r4, #8]
			if (child->next) {
   1698a:	b173      	cbz	r3, 169aa <print_array.isra.4+0xd2>
				ptr = ensure(p, len + 1);
   1698c:	9901      	ldr	r1, [sp, #4]
   1698e:	4620      	mov	r0, r4
   16990:	f7ff fe98 	bl	166c4 <ensure>
				if (!ptr)
   16994:	2800      	cmp	r0, #0
   16996:	d0b6      	beq.n	16906 <print_array.isra.4+0x2e>
				*ptr++ = ',';
   16998:	f880 8000 	strb.w	r8, [r0]
				if (fmt)
   1699c:	b93e      	cbnz	r6, 169ae <print_array.isra.4+0xd6>
				*ptr++ = ',';
   1699e:	1c43      	adds	r3, r0, #1
				*ptr = 0;
   169a0:	f883 b000 	strb.w	fp, [r3]
				p->offset += len;
   169a4:	68a3      	ldr	r3, [r4, #8]
   169a6:	443b      	add	r3, r7
   169a8:	60a3      	str	r3, [r4, #8]
			child = child->next;
   169aa:	682d      	ldr	r5, [r5, #0]
   169ac:	e7d3      	b.n	16956 <print_array.isra.4+0x7e>
					*ptr++ = ' ';
   169ae:	2220      	movs	r2, #32
   169b0:	1c83      	adds	r3, r0, #2
   169b2:	7042      	strb	r2, [r0, #1]
   169b4:	e7f4      	b.n	169a0 <print_array.isra.4+0xc8>
		entries = (char **)cJSON_malloc(numentries * sizeof(char *));
   169b6:	4b45      	ldr	r3, [pc, #276]	; (16acc <print_array.isra.4+0x1f4>)
   169b8:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   169bc:	681a      	ldr	r2, [r3, #0]
   169be:	4658      	mov	r0, fp
   169c0:	4790      	blx	r2
		if (!entries)
   169c2:	4b42      	ldr	r3, [pc, #264]	; (16acc <print_array.isra.4+0x1f4>)
   169c4:	4680      	mov	r8, r0
   169c6:	9301      	str	r3, [sp, #4]
   169c8:	2800      	cmp	r0, #0
   169ca:	d09c      	beq.n	16906 <print_array.isra.4+0x2e>
__ssp_bos_icheck3(memset, void *, int)
   169cc:	465a      	mov	r2, fp
	int len = 5;
   169ce:	f04f 0b05 	mov.w	fp, #5
   169d2:	4621      	mov	r1, r4
   169d4:	f022 fb2f 	bl	39036 <memset>
		child = item->child;
   169d8:	f8d7 9000 	ldr.w	r9, [r7]
		while (child && !fail) {
   169dc:	f1a8 0704 	sub.w	r7, r8, #4
		child = item->child;
   169e0:	9700      	str	r7, [sp, #0]
			ret = print_value(child, depth + 1, fmt, 0);
   169e2:	f10a 0a01 	add.w	sl, sl, #1
		while (child && !fail) {
   169e6:	f1b9 0f00 	cmp.w	r9, #0
   169ea:	d01b      	beq.n	16a24 <print_array.isra.4+0x14c>
   169ec:	b114      	cbz	r4, 169f4 <print_array.isra.4+0x11c>
	int len = 5;
   169ee:	2400      	movs	r4, #0
   169f0:	4e37      	ldr	r6, [pc, #220]	; (16ad0 <print_array.isra.4+0x1f8>)
   169f2:	e03b      	b.n	16a6c <print_array.isra.4+0x194>
			ret = print_value(child, depth + 1, fmt, 0);
   169f4:	4632      	mov	r2, r6
   169f6:	4623      	mov	r3, r4
   169f8:	4651      	mov	r1, sl
   169fa:	4648      	mov	r0, r9
   169fc:	f000 f86a 	bl	16ad4 <print_value>
			entries[i++] = ret;
   16a00:	9a00      	ldr	r2, [sp, #0]
   16a02:	f842 0f04 	str.w	r0, [r2, #4]!
   16a06:	9200      	str	r2, [sp, #0]
			if (ret)
   16a08:	b150      	cbz	r0, 16a20 <print_array.isra.4+0x148>
				len += strlens(ret) + 2 + (fmt ? 1 : 0);
   16a0a:	f7fb fb39 	bl	12080 <strlen>
   16a0e:	1c33      	adds	r3, r6, #0
   16a10:	bf18      	it	ne
   16a12:	2301      	movne	r3, #1
   16a14:	3302      	adds	r3, #2
   16a16:	449b      	add	fp, r3
   16a18:	4483      	add	fp, r0
			child = child->next;
   16a1a:	f8d9 9000 	ldr.w	r9, [r9]
   16a1e:	e7e2      	b.n	169e6 <print_array.isra.4+0x10e>
				fail = 1;
   16a20:	2401      	movs	r4, #1
   16a22:	e7fa      	b.n	16a1a <print_array.isra.4+0x142>
		if (!fail)
   16a24:	2c00      	cmp	r4, #0
   16a26:	d1e2      	bne.n	169ee <print_array.isra.4+0x116>
			out = (char *)cJSON_malloc(len);
   16a28:	9b01      	ldr	r3, [sp, #4]
   16a2a:	4658      	mov	r0, fp
   16a2c:	681b      	ldr	r3, [r3, #0]
   16a2e:	4798      	blx	r3
		if (!out)
   16a30:	4681      	mov	r9, r0
   16a32:	2800      	cmp	r0, #0
   16a34:	d0db      	beq.n	169ee <print_array.isra.4+0x116>
		*out = '[';
   16a36:	235b      	movs	r3, #91	; 0x5b
   16a38:	4682      	mov	sl, r0
   16a3a:	f8df b094 	ldr.w	fp, [pc, #148]	; 16ad0 <print_array.isra.4+0x1f8>
   16a3e:	f80a 3b01 	strb.w	r3, [sl], #1
			if (i != numentries - 1) {
   16a42:	1e6b      	subs	r3, r5, #1
		*ptr = 0;
   16a44:	7044      	strb	r4, [r0, #1]
			if (i != numentries - 1) {
   16a46:	9300      	str	r3, [sp, #0]
		for (i = 0; i < numentries; i++) {
   16a48:	42a5      	cmp	r5, r4
   16a4a:	dc17      	bgt.n	16a7c <print_array.isra.4+0x1a4>
		cJSON_free(entries);
   16a4c:	f8db 3000 	ldr.w	r3, [fp]
   16a50:	4640      	mov	r0, r8
   16a52:	4798      	blx	r3
		*ptr++ = ']';
   16a54:	235d      	movs	r3, #93	; 0x5d
   16a56:	f88a 3000 	strb.w	r3, [sl]
		*ptr++ = 0;
   16a5a:	2300      	movs	r3, #0
   16a5c:	f88a 3001 	strb.w	r3, [sl, #1]
   16a60:	e751      	b.n	16906 <print_array.isra.4+0x2e>
				if (entries[i])
   16a62:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
   16a66:	b100      	cbz	r0, 16a6a <print_array.isra.4+0x192>
					cJSON_free(entries[i]);
   16a68:	4798      	blx	r3
			for (i = 0; i < numentries; i++)
   16a6a:	3401      	adds	r4, #1
   16a6c:	42a5      	cmp	r5, r4
   16a6e:	6833      	ldr	r3, [r6, #0]
   16a70:	dcf7      	bgt.n	16a62 <print_array.isra.4+0x18a>
			cJSON_free(entries);
   16a72:	4640      	mov	r0, r8
   16a74:	4798      	blx	r3
			return 0;
   16a76:	f04f 0900 	mov.w	r9, #0
   16a7a:	e744      	b.n	16906 <print_array.isra.4+0x2e>
			tmplen = strlens(entries[i]);
   16a7c:	6878      	ldr	r0, [r7, #4]
   16a7e:	b108      	cbz	r0, 16a84 <print_array.isra.4+0x1ac>
   16a80:	f7fb fafe 	bl	12080 <strlen>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   16a84:	4602      	mov	r2, r0
   16a86:	9001      	str	r0, [sp, #4]
   16a88:	6879      	ldr	r1, [r7, #4]
   16a8a:	4650      	mov	r0, sl
   16a8c:	f022 fa99 	bl	38fc2 <memcpy>
			ptr += tmplen;
   16a90:	9b01      	ldr	r3, [sp, #4]
   16a92:	449a      	add	sl, r3
			if (i != numentries - 1) {
   16a94:	9b00      	ldr	r3, [sp, #0]
   16a96:	429c      	cmp	r4, r3
   16a98:	d009      	beq.n	16aae <print_array.isra.4+0x1d6>
				*ptr++ = ',';
   16a9a:	232c      	movs	r3, #44	; 0x2c
   16a9c:	f88a 3000 	strb.w	r3, [sl]
				if (fmt)
   16aa0:	b966      	cbnz	r6, 16abc <print_array.isra.4+0x1e4>
				*ptr++ = ',';
   16aa2:	f10a 0a01 	add.w	sl, sl, #1
				*ptr = 0;
   16aa6:	f04f 0300 	mov.w	r3, #0
   16aaa:	f88a 3000 	strb.w	r3, [sl]
			cJSON_free(entries[i]);
   16aae:	f8db 3000 	ldr.w	r3, [fp]
   16ab2:	f857 0f04 	ldr.w	r0, [r7, #4]!
   16ab6:	4798      	blx	r3
		for (i = 0; i < numentries; i++) {
   16ab8:	3401      	adds	r4, #1
   16aba:	e7c5      	b.n	16a48 <print_array.isra.4+0x170>
					*ptr++ = ' ';
   16abc:	2320      	movs	r3, #32
   16abe:	f10a 0a02 	add.w	sl, sl, #2
   16ac2:	f80a 3c01 	strb.w	r3, [sl, #-1]
   16ac6:	e7ee      	b.n	16aa6 <print_array.isra.4+0x1ce>
   16ac8:	0003c4fc 	.word	0x0003c4fc
   16acc:	20020080 	.word	0x20020080
   16ad0:	2002007c 	.word	0x2002007c

00016ad4 <print_value>:
{
   16ad4:	b510      	push	{r4, lr}
	if (!item)
   16ad6:	4604      	mov	r4, r0
   16ad8:	b190      	cbz	r0, 16b00 <print_value+0x2c>
	if (p) {
   16ada:	7b00      	ldrb	r0, [r0, #12]
   16adc:	b383      	cbz	r3, 16b40 <print_value+0x6c>
		switch ((item->type) & 255) {
   16ade:	2806      	cmp	r0, #6
   16ae0:	d851      	bhi.n	16b86 <print_value+0xb2>
   16ae2:	e8df f000 	tbb	[pc, r0]
   16ae6:	180f      	.short	0x180f
   16ae8:	43272104 	.word	0x43272104
   16aec:	4a          	.byte	0x4a
   16aed:	00          	.byte	0x00
			out = ensure(p, 5);
   16aee:	2105      	movs	r1, #5
   16af0:	4618      	mov	r0, r3
   16af2:	f7ff fde7 	bl	166c4 <ensure>
			if (out)
   16af6:	4604      	mov	r4, r0
   16af8:	b110      	cbz	r0, 16b00 <print_value+0x2c>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   16afa:	4924      	ldr	r1, [pc, #144]	; (16b8c <print_value+0xb8>)
   16afc:	f022 fbef 	bl	392de <strcpy>
}
   16b00:	4620      	mov	r0, r4
   16b02:	bd10      	pop	{r4, pc}
			out = ensure(p, 6);
   16b04:	2106      	movs	r1, #6
   16b06:	4618      	mov	r0, r3
   16b08:	f7ff fddc 	bl	166c4 <ensure>
			if (out)
   16b0c:	4604      	mov	r4, r0
   16b0e:	2800      	cmp	r0, #0
   16b10:	d0f6      	beq.n	16b00 <print_value+0x2c>
   16b12:	491f      	ldr	r1, [pc, #124]	; (16b90 <print_value+0xbc>)
   16b14:	e7f2      	b.n	16afc <print_value+0x28>
			out = ensure(p, 5);
   16b16:	2105      	movs	r1, #5
   16b18:	4618      	mov	r0, r3
   16b1a:	f7ff fdd3 	bl	166c4 <ensure>
			if (out)
   16b1e:	4604      	mov	r4, r0
   16b20:	2800      	cmp	r0, #0
   16b22:	d0ed      	beq.n	16b00 <print_value+0x2c>
   16b24:	491b      	ldr	r1, [pc, #108]	; (16b94 <print_value+0xc0>)
   16b26:	e7e9      	b.n	16afc <print_value+0x28>
			out = print_number(item, p);
   16b28:	4619      	mov	r1, r3
			out = print_number(item, 0);
   16b2a:	4620      	mov	r0, r4
}
   16b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			out = print_number(item, 0);
   16b30:	f7fb bd62 	b.w	125f8 <print_number>
	return print_string_ptr(item->valuestring, p);
   16b34:	4619      	mov	r1, r3
   16b36:	6920      	ldr	r0, [r4, #16]
}
   16b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return print_string_ptr(item->valuestring, p);
   16b3c:	f7ff be10 	b.w	16760 <print_string_ptr>
		switch ((item->type) & 255) {
   16b40:	2806      	cmp	r0, #6
   16b42:	d820      	bhi.n	16b86 <print_value+0xb2>
   16b44:	e8df f000 	tbb	[pc, r0]
   16b48:	0d040b09 	.word	0x0d040b09
   16b4c:	110f      	.short	0x110f
   16b4e:	18          	.byte	0x18
   16b4f:	00          	.byte	0x00
			out = cJSON_strdup("null");
   16b50:	480e      	ldr	r0, [pc, #56]	; (16b8c <print_value+0xb8>)
}
   16b52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			out = cJSON_strdup("false");
   16b56:	f7ff bded 	b.w	16734 <cJSON_strdup>
   16b5a:	480d      	ldr	r0, [pc, #52]	; (16b90 <print_value+0xbc>)
   16b5c:	e7f9      	b.n	16b52 <print_value+0x7e>
			out = cJSON_strdup("true");
   16b5e:	480d      	ldr	r0, [pc, #52]	; (16b94 <print_value+0xc0>)
   16b60:	e7f7      	b.n	16b52 <print_value+0x7e>
			out = print_number(item, 0);
   16b62:	2100      	movs	r1, #0
   16b64:	e7e1      	b.n	16b2a <print_value+0x56>
	return print_string_ptr(item->valuestring, p);
   16b66:	2100      	movs	r1, #0
   16b68:	e7e5      	b.n	16b36 <print_value+0x62>
			out = print_array(item, depth, fmt, 0);
   16b6a:	2300      	movs	r3, #0
   16b6c:	f104 0008 	add.w	r0, r4, #8
}
   16b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			out = print_array(item, depth, fmt, 0);
   16b74:	f7ff beb0 	b.w	168d8 <print_array.isra.4>
			out = print_object(item, depth, fmt, 0);
   16b78:	2300      	movs	r3, #0
   16b7a:	f104 0008 	add.w	r0, r4, #8
}
   16b7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			out = print_object(item, depth, fmt, 0);
   16b82:	f000 b809 	b.w	16b98 <print_object.isra.3>
	char *out = 0;
   16b86:	2400      	movs	r4, #0
   16b88:	e7ba      	b.n	16b00 <print_value+0x2c>
   16b8a:	bf00      	nop
   16b8c:	0003c4ec 	.word	0x0003c4ec
   16b90:	0003c4f1 	.word	0x0003c4f1
   16b94:	0003c4f7 	.word	0x0003c4f7

00016b98 <print_object.isra.3>:
}

/* Render an object to text. */
static char *print_object(cJSON *item, int depth, int fmt, printbuffer *p)
   16b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b9c:	4615      	mov	r5, r2
{
	char **entries = 0, **names = 0;
	char *out = 0, *ptr, *ret, *str;
	int len = 7, i = 0, j;
	cJSON *child = item->child;
	int numentries = 0, fail = 0;
   16b9e:	2200      	movs	r2, #0
static char *print_object(cJSON *item, int depth, int fmt, printbuffer *p)
   16ba0:	4680      	mov	r8, r0
   16ba2:	468b      	mov	fp, r1
   16ba4:	b089      	sub	sp, #36	; 0x24
   16ba6:	461c      	mov	r4, r3
	cJSON *child = item->child;
   16ba8:	6803      	ldr	r3, [r0, #0]
	int numentries = 0, fail = 0;
   16baa:	9200      	str	r2, [sp, #0]
	size_t tmplen = 0;
	/* Count the number of entries. */
	while (child)
   16bac:	b96b      	cbnz	r3, 16bca <print_object.isra.3+0x32>
		numentries++, child = child->next;
	/* Explicitly handle empty object case */
	if (!numentries) {
   16bae:	9b00      	ldr	r3, [sp, #0]
   16bb0:	2b00      	cmp	r3, #0
   16bb2:	d13a      	bne.n	16c2a <print_object.isra.3+0x92>
		if (p)
   16bb4:	b184      	cbz	r4, 16bd8 <print_object.isra.3+0x40>
			out = ensure(p, fmt ? depth + 4 : 3);
   16bb6:	b16d      	cbz	r5, 16bd4 <print_object.isra.3+0x3c>
   16bb8:	f10b 0104 	add.w	r1, fp, #4
   16bbc:	4620      	mov	r0, r4
   16bbe:	f7ff fd81 	bl	166c4 <ensure>
		else
			out = (char *)cJSON_malloc(fmt ? depth + 4 : 3);
   16bc2:	4604      	mov	r4, r0
		if (!out)
   16bc4:	b988      	cbnz	r0, 16bea <print_object.isra.3+0x52>
				if (entries[i])
					cJSON_free(entries[i]);
			}
			cJSON_free(names);
			cJSON_free(entries);
			return 0;
   16bc6:	2400      	movs	r4, #0
   16bc8:	e017      	b.n	16bfa <print_object.isra.3+0x62>
		numentries++, child = child->next;
   16bca:	9a00      	ldr	r2, [sp, #0]
   16bcc:	681b      	ldr	r3, [r3, #0]
   16bce:	3201      	adds	r2, #1
   16bd0:	9200      	str	r2, [sp, #0]
   16bd2:	e7eb      	b.n	16bac <print_object.isra.3+0x14>
			out = ensure(p, fmt ? depth + 4 : 3);
   16bd4:	2103      	movs	r1, #3
   16bd6:	e7f1      	b.n	16bbc <print_object.isra.3+0x24>
			out = (char *)cJSON_malloc(fmt ? depth + 4 : 3);
   16bd8:	4b97      	ldr	r3, [pc, #604]	; (16e38 <print_object.isra.3+0x2a0>)
   16bda:	681b      	ldr	r3, [r3, #0]
   16bdc:	b11d      	cbz	r5, 16be6 <print_object.isra.3+0x4e>
   16bde:	f10b 0004 	add.w	r0, fp, #4
   16be2:	4798      	blx	r3
   16be4:	e7ed      	b.n	16bc2 <print_object.isra.3+0x2a>
   16be6:	2003      	movs	r0, #3
   16be8:	e7fb      	b.n	16be2 <print_object.isra.3+0x4a>
		*ptr++ = '{';
   16bea:	237b      	movs	r3, #123	; 0x7b
   16bec:	7003      	strb	r3, [r0, #0]
		if (fmt) {
   16bee:	b945      	cbnz	r5, 16c02 <print_object.isra.3+0x6a>
		*ptr++ = '{';
   16bf0:	1c43      	adds	r3, r0, #1
		*ptr++ = '}';
   16bf2:	227d      	movs	r2, #125	; 0x7d
   16bf4:	701a      	strb	r2, [r3, #0]
		*ptr++ = 0;
   16bf6:	2200      	movs	r2, #0
   16bf8:	705a      	strb	r2, [r3, #1]
				*ptr++ = '\t';
		*ptr++ = '}';
		*ptr++ = 0;
	}
	return out;
}
   16bfa:	4620      	mov	r0, r4
   16bfc:	b009      	add	sp, #36	; 0x24
   16bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			*ptr++ = '\n';
   16c02:	220a      	movs	r2, #10
   16c04:	1c83      	adds	r3, r0, #2
			for (i = 0; i < depth - 1; i++)
   16c06:	f06f 0501 	mvn.w	r5, #1
			*ptr++ = '\n';
   16c0a:	7042      	strb	r2, [r0, #1]
				*ptr++ = '\t';
   16c0c:	2609      	movs	r6, #9
			*ptr++ = '\n';
   16c0e:	461a      	mov	r2, r3
			for (i = 0; i < depth - 1; i++)
   16c10:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
   16c14:	1a2d      	subs	r5, r5, r0
   16c16:	1950      	adds	r0, r2, r5
   16c18:	4281      	cmp	r1, r0
   16c1a:	dc03      	bgt.n	16c24 <print_object.isra.3+0x8c>
   16c1c:	2900      	cmp	r1, #0
   16c1e:	bfa8      	it	ge
   16c20:	185b      	addge	r3, r3, r1
   16c22:	e7e6      	b.n	16bf2 <print_object.isra.3+0x5a>
				*ptr++ = '\t';
   16c24:	f802 6b01 	strb.w	r6, [r2], #1
   16c28:	e7f5      	b.n	16c16 <print_object.isra.3+0x7e>
	if (p) {
   16c2a:	2c00      	cmp	r4, #0
   16c2c:	f000 8092 	beq.w	16d54 <print_object.isra.3+0x1bc>
		len = fmt ? 2 : 1;
   16c30:	2d00      	cmp	r5, #0
   16c32:	bf14      	ite	ne
   16c34:	2702      	movne	r7, #2
   16c36:	2701      	moveq	r7, #1
		ptr = ensure(p, len + 1);
   16c38:	4620      	mov	r0, r4
   16c3a:	1c79      	adds	r1, r7, #1
		i = p->offset;
   16c3c:	f8d4 9008 	ldr.w	r9, [r4, #8]
		ptr = ensure(p, len + 1);
   16c40:	f7ff fd40 	bl	166c4 <ensure>
		if (!ptr)
   16c44:	2800      	cmp	r0, #0
   16c46:	d0be      	beq.n	16bc6 <print_object.isra.3+0x2e>
		*ptr++ = '{';
   16c48:	237b      	movs	r3, #123	; 0x7b
   16c4a:	7003      	strb	r3, [r0, #0]
		if (fmt)
   16c4c:	b9f5      	cbnz	r5, 16c8c <print_object.isra.3+0xf4>
		*ptr++ = '{';
   16c4e:	1c43      	adds	r3, r0, #1
		*ptr = 0;
   16c50:	2200      	movs	r2, #0
					*ptr++ = '\t';
   16c52:	f04f 0a09 	mov.w	sl, #9
		*ptr = 0;
   16c56:	701a      	strb	r2, [r3, #0]
		p->offset += len;
   16c58:	68a3      	ldr	r3, [r4, #8]
		child = item->child;
   16c5a:	f8d8 6000 	ldr.w	r6, [r8]
		p->offset += len;
   16c5e:	443b      	add	r3, r7
   16c60:	60a3      	str	r3, [r4, #8]
		depth++;
   16c62:	f10b 0801 	add.w	r8, fp, #1
		while (child) {
   16c66:	b9ae      	cbnz	r6, 16c94 <print_object.isra.3+0xfc>
		ptr = ensure(p, fmt ? (depth + 1) : 2);
   16c68:	2d00      	cmp	r5, #0
   16c6a:	d066      	beq.n	16d3a <print_object.isra.3+0x1a2>
   16c6c:	f10b 0102 	add.w	r1, fp, #2
   16c70:	4620      	mov	r0, r4
   16c72:	f7ff fd27 	bl	166c4 <ensure>
		if (!ptr)
   16c76:	2800      	cmp	r0, #0
   16c78:	d0a5      	beq.n	16bc6 <print_object.isra.3+0x2e>
		if (fmt)
   16c7a:	2d00      	cmp	r5, #0
   16c7c:	d167      	bne.n	16d4e <print_object.isra.3+0x1b6>
		*ptr++ = '}';
   16c7e:	237d      	movs	r3, #125	; 0x7d
   16c80:	7003      	strb	r3, [r0, #0]
		*ptr = 0;
   16c82:	2300      	movs	r3, #0
   16c84:	7043      	strb	r3, [r0, #1]
		out = (p->buffer) + i;
   16c86:	6824      	ldr	r4, [r4, #0]
   16c88:	444c      	add	r4, r9
   16c8a:	e7b6      	b.n	16bfa <print_object.isra.3+0x62>
			*ptr++ = '\n';
   16c8c:	220a      	movs	r2, #10
   16c8e:	1c83      	adds	r3, r0, #2
   16c90:	7042      	strb	r2, [r0, #1]
   16c92:	e7dd      	b.n	16c50 <print_object.isra.3+0xb8>
			if (fmt) {
   16c94:	b15d      	cbz	r5, 16cae <print_object.isra.3+0x116>
				ptr = ensure(p, depth);
   16c96:	4641      	mov	r1, r8
   16c98:	4620      	mov	r0, r4
   16c9a:	f7ff fd13 	bl	166c4 <ensure>
				if (!ptr)
   16c9e:	2800      	cmp	r0, #0
   16ca0:	d091      	beq.n	16bc6 <print_object.isra.3+0x2e>
				for (j = 0; j < depth; j++)
   16ca2:	2300      	movs	r3, #0
   16ca4:	4598      	cmp	r8, r3
   16ca6:	dc44      	bgt.n	16d32 <print_object.isra.3+0x19a>
				p->offset += depth;
   16ca8:	68a3      	ldr	r3, [r4, #8]
   16caa:	4443      	add	r3, r8
   16cac:	60a3      	str	r3, [r4, #8]
			print_string_ptr(child->string, p);
   16cae:	4621      	mov	r1, r4
   16cb0:	6a30      	ldr	r0, [r6, #32]
   16cb2:	f7ff fd55 	bl	16760 <print_string_ptr>
			p->offset = update(p);
   16cb6:	4620      	mov	r0, r4
   16cb8:	f01c f85b 	bl	32d72 <update>
			ptr = ensure(p, len);
   16cbc:	4639      	mov	r1, r7
			p->offset = update(p);
   16cbe:	60a0      	str	r0, [r4, #8]
			ptr = ensure(p, len);
   16cc0:	4620      	mov	r0, r4
   16cc2:	f7ff fcff 	bl	166c4 <ensure>
			if (!ptr)
   16cc6:	2800      	cmp	r0, #0
   16cc8:	f43f af7d 	beq.w	16bc6 <print_object.isra.3+0x2e>
			*ptr++ = ':';
   16ccc:	f04f 033a 	mov.w	r3, #58	; 0x3a
   16cd0:	7003      	strb	r3, [r0, #0]
			if (fmt)
   16cd2:	b10d      	cbz	r5, 16cd8 <print_object.isra.3+0x140>
				*ptr++ = '\t';
   16cd4:	f880 a001 	strb.w	sl, [r0, #1]
			p->offset += len;
   16cd8:	68a3      	ldr	r3, [r4, #8]
			print_value(child, depth, fmt, p);
   16cda:	462a      	mov	r2, r5
			p->offset += len;
   16cdc:	443b      	add	r3, r7
			print_value(child, depth, fmt, p);
   16cde:	4641      	mov	r1, r8
			p->offset += len;
   16ce0:	60a3      	str	r3, [r4, #8]
			print_value(child, depth, fmt, p);
   16ce2:	4630      	mov	r0, r6
   16ce4:	4623      	mov	r3, r4
   16ce6:	f7ff fef5 	bl	16ad4 <print_value>
			p->offset = update(p);
   16cea:	4620      	mov	r0, r4
   16cec:	f01c f841 	bl	32d72 <update>
			len = (fmt ? 1 : 0) + (child->next ? 1 : 0);
   16cf0:	1c2b      	adds	r3, r5, #0
   16cf2:	bf18      	it	ne
   16cf4:	2301      	movne	r3, #1
   16cf6:	6832      	ldr	r2, [r6, #0]
			p->offset = update(p);
   16cf8:	60a0      	str	r0, [r4, #8]
			len = (fmt ? 1 : 0) + (child->next ? 1 : 0);
   16cfa:	2a00      	cmp	r2, #0
   16cfc:	bf18      	it	ne
   16cfe:	3301      	addne	r3, #1
			ptr = ensure(p, len + 1);
   16d00:	4620      	mov	r0, r4
   16d02:	1c59      	adds	r1, r3, #1
   16d04:	9300      	str	r3, [sp, #0]
   16d06:	f7ff fcdd 	bl	166c4 <ensure>
			if (!ptr)
   16d0a:	2800      	cmp	r0, #0
   16d0c:	f43f af5b 	beq.w	16bc6 <print_object.isra.3+0x2e>
			if (child->next)
   16d10:	6832      	ldr	r2, [r6, #0]
   16d12:	9b00      	ldr	r3, [sp, #0]
   16d14:	b112      	cbz	r2, 16d1c <print_object.isra.3+0x184>
				*ptr++ = ',';
   16d16:	222c      	movs	r2, #44	; 0x2c
   16d18:	f800 2b01 	strb.w	r2, [r0], #1
			if (fmt) {
   16d1c:	b115      	cbz	r5, 16d24 <print_object.isra.3+0x18c>
				*ptr++ = '\n';
   16d1e:	220a      	movs	r2, #10
   16d20:	f800 2b01 	strb.w	r2, [r0], #1
			*ptr = 0;
   16d24:	2200      	movs	r2, #0
   16d26:	7002      	strb	r2, [r0, #0]
			p->offset += len;
   16d28:	68a2      	ldr	r2, [r4, #8]
			child = child->next;
   16d2a:	6836      	ldr	r6, [r6, #0]
			p->offset += len;
   16d2c:	4413      	add	r3, r2
   16d2e:	60a3      	str	r3, [r4, #8]
			child = child->next;
   16d30:	e799      	b.n	16c66 <print_object.isra.3+0xce>
					*ptr++ = '\t';
   16d32:	f800 a003 	strb.w	sl, [r0, r3]
				for (j = 0; j < depth; j++)
   16d36:	3301      	adds	r3, #1
   16d38:	e7b4      	b.n	16ca4 <print_object.isra.3+0x10c>
		ptr = ensure(p, fmt ? (depth + 1) : 2);
   16d3a:	2102      	movs	r1, #2
   16d3c:	e798      	b.n	16c70 <print_object.isra.3+0xd8>
				*ptr++ = '\t';
   16d3e:	54c2      	strb	r2, [r0, r3]
			for (i = 0; i < depth - 1; i++)
   16d40:	3301      	adds	r3, #1
   16d42:	459b      	cmp	fp, r3
   16d44:	dcfb      	bgt.n	16d3e <print_object.isra.3+0x1a6>
   16d46:	ea2b 79eb 	bic.w	r9, fp, fp, asr #31
   16d4a:	4448      	add	r0, r9
   16d4c:	e797      	b.n	16c7e <print_object.isra.3+0xe6>
   16d4e:	2300      	movs	r3, #0
				*ptr++ = '\t';
   16d50:	2209      	movs	r2, #9
   16d52:	e7f6      	b.n	16d42 <print_object.isra.3+0x1aa>
		entries = (char **)cJSON_malloc(numentries * sizeof(char *));
   16d54:	9b00      	ldr	r3, [sp, #0]
   16d56:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 16e38 <print_object.isra.3+0x2a0>
   16d5a:	009f      	lsls	r7, r3, #2
   16d5c:	4638      	mov	r0, r7
   16d5e:	f8d9 3000 	ldr.w	r3, [r9]
   16d62:	4798      	blx	r3
		if (!entries)
   16d64:	4606      	mov	r6, r0
   16d66:	2800      	cmp	r0, #0
   16d68:	f43f af2d 	beq.w	16bc6 <print_object.isra.3+0x2e>
		names = (char **)cJSON_malloc(numentries * sizeof(char *));
   16d6c:	f8d9 3000 	ldr.w	r3, [r9]
   16d70:	4638      	mov	r0, r7
   16d72:	4798      	blx	r3
		if (!names) {
   16d74:	9001      	str	r0, [sp, #4]
   16d76:	b920      	cbnz	r0, 16d82 <print_object.isra.3+0x1ea>
			cJSON_free(entries);
   16d78:	4b30      	ldr	r3, [pc, #192]	; (16e3c <print_object.isra.3+0x2a4>)
   16d7a:	4630      	mov	r0, r6
   16d7c:	681b      	ldr	r3, [r3, #0]
   16d7e:	4798      	blx	r3
			return 0;
   16d80:	e73b      	b.n	16bfa <print_object.isra.3+0x62>
__ssp_bos_icheck3(memset, void *, int)
   16d82:	463a      	mov	r2, r7
   16d84:	4621      	mov	r1, r4
   16d86:	4630      	mov	r0, r6
   16d88:	f022 f955 	bl	39036 <memset>
   16d8c:	463a      	mov	r2, r7
   16d8e:	4621      	mov	r1, r4
   16d90:	9801      	ldr	r0, [sp, #4]
   16d92:	f022 f950 	bl	39036 <memset>
		depth++;
   16d96:	f10b 0301 	add.w	r3, fp, #1
		child = item->child;
   16d9a:	f8d8 7000 	ldr.w	r7, [r8]
		depth++;
   16d9e:	9304      	str	r3, [sp, #16]
		if (fmt)
   16da0:	b31d      	cbz	r5, 16dea <print_object.isra.3+0x252>
			len += depth;
   16da2:	f10b 0408 	add.w	r4, fp, #8
   16da6:	2d00      	cmp	r5, #0
				       (fmt ? 2 + depth : 0);
   16da8:	f10b 0303 	add.w	r3, fp, #3
   16dac:	bf08      	it	eq
   16dae:	2300      	moveq	r3, #0
   16db0:	f04f 0a00 	mov.w	sl, #0
   16db4:	9a01      	ldr	r2, [sp, #4]
				len += strlens(ret) + strlens(str) + 2 +
   16db6:	3302      	adds	r3, #2
   16db8:	3a04      	subs	r2, #4
   16dba:	9203      	str	r2, [sp, #12]
   16dbc:	1f32      	subs	r2, r6, #4
   16dbe:	9202      	str	r2, [sp, #8]
				       (fmt ? 2 + depth : 0);
   16dc0:	4691      	mov	r9, r2
   16dc2:	9a03      	ldr	r2, [sp, #12]
				len += strlens(ret) + strlens(str) + 2 +
   16dc4:	9306      	str	r3, [sp, #24]
				       (fmt ? 2 + depth : 0);
   16dc6:	9205      	str	r2, [sp, #20]
		while (child) {
   16dc8:	b98f      	cbnz	r7, 16dee <print_object.isra.3+0x256>
		if (!fail)
   16dca:	f1ba 0f00 	cmp.w	sl, #0
   16dce:	d037      	beq.n	16e40 <print_object.isra.3+0x2a8>
   16dd0:	4d1a      	ldr	r5, [pc, #104]	; (16e3c <print_object.isra.3+0x2a4>)
				       (fmt ? 2 + depth : 0);
   16dd2:	2400      	movs	r4, #0
   16dd4:	462f      	mov	r7, r5
			for (i = 0; i < numentries; i++) {
   16dd6:	9a00      	ldr	r2, [sp, #0]
   16dd8:	682b      	ldr	r3, [r5, #0]
   16dda:	42a2      	cmp	r2, r4
   16ddc:	dc5d      	bgt.n	16e9a <print_object.isra.3+0x302>
			cJSON_free(names);
   16dde:	9801      	ldr	r0, [sp, #4]
   16de0:	4798      	blx	r3
			cJSON_free(entries);
   16de2:	682b      	ldr	r3, [r5, #0]
   16de4:	4630      	mov	r0, r6
   16de6:	4798      	blx	r3
   16de8:	e6ed      	b.n	16bc6 <print_object.isra.3+0x2e>
	int len = 7, i = 0, j;
   16dea:	2407      	movs	r4, #7
   16dec:	e7db      	b.n	16da6 <print_object.isra.3+0x20e>
			names[i] = str = print_string_ptr(child->string, 0);
   16dee:	2100      	movs	r1, #0
   16df0:	6a38      	ldr	r0, [r7, #32]
   16df2:	f7ff fcb5 	bl	16760 <print_string_ptr>
   16df6:	9b05      	ldr	r3, [sp, #20]
   16df8:	4680      	mov	r8, r0
   16dfa:	f843 0f04 	str.w	r0, [r3, #4]!
   16dfe:	9305      	str	r3, [sp, #20]
			entries[i++] = ret = print_value(child, depth, fmt, 0);
   16e00:	462a      	mov	r2, r5
   16e02:	2300      	movs	r3, #0
   16e04:	9904      	ldr	r1, [sp, #16]
   16e06:	4638      	mov	r0, r7
   16e08:	f7ff fe64 	bl	16ad4 <print_value>
   16e0c:	f849 0f04 	str.w	r0, [r9, #4]!
			if (str && ret)
   16e10:	f1b8 0f00 	cmp.w	r8, #0
   16e14:	d00d      	beq.n	16e32 <print_object.isra.3+0x29a>
   16e16:	b160      	cbz	r0, 16e32 <print_object.isra.3+0x29a>
				len += strlens(ret) + strlens(str) + 2 +
   16e18:	f7fb f932 	bl	12080 <strlen>
   16e1c:	9007      	str	r0, [sp, #28]
   16e1e:	4640      	mov	r0, r8
   16e20:	f7fb f92e 	bl	12080 <strlen>
   16e24:	9b06      	ldr	r3, [sp, #24]
   16e26:	441c      	add	r4, r3
   16e28:	9b07      	ldr	r3, [sp, #28]
   16e2a:	441c      	add	r4, r3
   16e2c:	4404      	add	r4, r0
			child = child->next;
   16e2e:	683f      	ldr	r7, [r7, #0]
   16e30:	e7ca      	b.n	16dc8 <print_object.isra.3+0x230>
				fail = 1;
   16e32:	f04f 0a01 	mov.w	sl, #1
   16e36:	e7fa      	b.n	16e2e <print_object.isra.3+0x296>
   16e38:	20020080 	.word	0x20020080
   16e3c:	2002007c 	.word	0x2002007c
			out = (char *)cJSON_malloc(len);
   16e40:	4b4a      	ldr	r3, [pc, #296]	; (16f6c <print_object.isra.3+0x3d4>)
   16e42:	4620      	mov	r0, r4
   16e44:	681b      	ldr	r3, [r3, #0]
   16e46:	4798      	blx	r3
		if (!out)
   16e48:	4604      	mov	r4, r0
   16e4a:	2800      	cmp	r0, #0
   16e4c:	d0c0      	beq.n	16dd0 <print_object.isra.3+0x238>
		*out = '{';
   16e4e:	237b      	movs	r3, #123	; 0x7b
   16e50:	7003      	strb	r3, [r0, #0]
		if (fmt)
   16e52:	bb75      	cbnz	r5, 16eb2 <print_object.isra.3+0x31a>
		ptr = out + 1;
   16e54:	1c47      	adds	r7, r0, #1
		*ptr = 0;
   16e56:	f04f 0900 	mov.w	r9, #0
   16e5a:	9b04      	ldr	r3, [sp, #16]
   16e5c:	f887 9000 	strb.w	r9, [r7]
		for (i = 0; i < numentries; i++) {
   16e60:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   16e64:	9305      	str	r3, [sp, #20]
   16e66:	9b00      	ldr	r3, [sp, #0]
   16e68:	454b      	cmp	r3, r9
   16e6a:	dc26      	bgt.n	16eba <print_object.isra.3+0x322>
		cJSON_free(names);
   16e6c:	f8df 8100 	ldr.w	r8, [pc, #256]	; 16f70 <print_object.isra.3+0x3d8>
   16e70:	9801      	ldr	r0, [sp, #4]
   16e72:	f8d8 3000 	ldr.w	r3, [r8]
   16e76:	4798      	blx	r3
		cJSON_free(entries);
   16e78:	f8d8 3000 	ldr.w	r3, [r8]
   16e7c:	4630      	mov	r0, r6
   16e7e:	4798      	blx	r3
		if (fmt)
   16e80:	b135      	cbz	r5, 16e90 <print_object.isra.3+0x2f8>
				*ptr++ = '\t';
   16e82:	2309      	movs	r3, #9
			for (i = 0; i < depth - 1; i++)
   16e84:	45d3      	cmp	fp, sl
   16e86:	dc6b      	bgt.n	16f60 <print_object.isra.3+0x3c8>
   16e88:	f1bb 0f00 	cmp.w	fp, #0
   16e8c:	bfa8      	it	ge
   16e8e:	445f      	addge	r7, fp
		*ptr++ = '}';
   16e90:	237d      	movs	r3, #125	; 0x7d
   16e92:	703b      	strb	r3, [r7, #0]
		*ptr++ = 0;
   16e94:	2300      	movs	r3, #0
   16e96:	707b      	strb	r3, [r7, #1]
   16e98:	e6af      	b.n	16bfa <print_object.isra.3+0x62>
				if (names[i])
   16e9a:	9a01      	ldr	r2, [sp, #4]
   16e9c:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
   16ea0:	b100      	cbz	r0, 16ea4 <print_object.isra.3+0x30c>
					cJSON_free(names[i]);
   16ea2:	4798      	blx	r3
				if (entries[i])
   16ea4:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   16ea8:	b108      	cbz	r0, 16eae <print_object.isra.3+0x316>
					cJSON_free(entries[i]);
   16eaa:	683b      	ldr	r3, [r7, #0]
   16eac:	4798      	blx	r3
			for (i = 0; i < numentries; i++) {
   16eae:	3401      	adds	r4, #1
   16eb0:	e791      	b.n	16dd6 <print_object.isra.3+0x23e>
			*ptr++ = '\n';
   16eb2:	230a      	movs	r3, #10
   16eb4:	1c87      	adds	r7, r0, #2
   16eb6:	7043      	strb	r3, [r0, #1]
   16eb8:	e7cd      	b.n	16e56 <print_object.isra.3+0x2be>
			if (fmt)
   16eba:	b155      	cbz	r5, 16ed2 <print_object.isra.3+0x33a>
				for (j = 0; j < depth; j++)
   16ebc:	2300      	movs	r3, #0
   16ebe:	e003      	b.n	16ec8 <print_object.isra.3+0x330>
					*ptr++ = '\t';
   16ec0:	f04f 0209 	mov.w	r2, #9
   16ec4:	54fa      	strb	r2, [r7, r3]
				for (j = 0; j < depth; j++)
   16ec6:	3301      	adds	r3, #1
   16ec8:	9a04      	ldr	r2, [sp, #16]
   16eca:	429a      	cmp	r2, r3
   16ecc:	dcf8      	bgt.n	16ec0 <print_object.isra.3+0x328>
   16ece:	9b05      	ldr	r3, [sp, #20]
   16ed0:	441f      	add	r7, r3
			tmplen = strlens(names[i]);
   16ed2:	9b03      	ldr	r3, [sp, #12]
   16ed4:	6858      	ldr	r0, [r3, #4]
   16ed6:	b108      	cbz	r0, 16edc <print_object.isra.3+0x344>
   16ed8:	f7fb f8d2 	bl	12080 <strlen>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   16edc:	9b03      	ldr	r3, [sp, #12]
   16ede:	4680      	mov	r8, r0
   16ee0:	4602      	mov	r2, r0
   16ee2:	6859      	ldr	r1, [r3, #4]
   16ee4:	4638      	mov	r0, r7
   16ee6:	f022 f86c 	bl	38fc2 <memcpy>
			*ptr++ = ':';
   16eea:	223a      	movs	r2, #58	; 0x3a
			ptr += tmplen;
   16eec:	eb07 0308 	add.w	r3, r7, r8
			*ptr++ = ':';
   16ef0:	f807 2008 	strb.w	r2, [r7, r8]
			if (fmt)
   16ef4:	bb75      	cbnz	r5, 16f54 <print_object.isra.3+0x3bc>
			*ptr++ = ':';
   16ef6:	f103 0801 	add.w	r8, r3, #1
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   16efa:	9b02      	ldr	r3, [sp, #8]
   16efc:	4640      	mov	r0, r8
   16efe:	6859      	ldr	r1, [r3, #4]
   16f00:	f022 f9ed 	bl	392de <strcpy>
			ptr += strlens(entries[i]);
   16f04:	9b02      	ldr	r3, [sp, #8]
   16f06:	6858      	ldr	r0, [r3, #4]
   16f08:	b108      	cbz	r0, 16f0e <print_object.isra.3+0x376>
   16f0a:	f7fb f8b9 	bl	12080 <strlen>
			if (i != numentries - 1)
   16f0e:	9b00      	ldr	r3, [sp, #0]
			ptr += strlens(entries[i]);
   16f10:	eb08 0700 	add.w	r7, r8, r0
			if (i != numentries - 1)
   16f14:	3b01      	subs	r3, #1
   16f16:	4599      	cmp	r9, r3
				*ptr++ = ',';
   16f18:	bf1e      	ittt	ne
   16f1a:	232c      	movne	r3, #44	; 0x2c
   16f1c:	3701      	addne	r7, #1
   16f1e:	f808 3000 	strbne.w	r3, [r8, r0]
			if (fmt) {
   16f22:	b115      	cbz	r5, 16f2a <print_object.isra.3+0x392>
				*ptr++ = '\n';
   16f24:	230a      	movs	r3, #10
   16f26:	f807 3b01 	strb.w	r3, [r7], #1
			*ptr = 0;
   16f2a:	2300      	movs	r3, #0
			cJSON_free(names[i]);
   16f2c:	9a03      	ldr	r2, [sp, #12]
			*ptr = 0;
   16f2e:	703b      	strb	r3, [r7, #0]
			cJSON_free(names[i]);
   16f30:	f8df 803c 	ldr.w	r8, [pc, #60]	; 16f70 <print_object.isra.3+0x3d8>
   16f34:	f852 0f04 	ldr.w	r0, [r2, #4]!
   16f38:	f8d8 3000 	ldr.w	r3, [r8]
   16f3c:	9203      	str	r2, [sp, #12]
   16f3e:	4798      	blx	r3
			cJSON_free(entries[i]);
   16f40:	9a02      	ldr	r2, [sp, #8]
   16f42:	f8d8 3000 	ldr.w	r3, [r8]
   16f46:	f852 0f04 	ldr.w	r0, [r2, #4]!
		for (i = 0; i < numentries; i++) {
   16f4a:	f109 0901 	add.w	r9, r9, #1
			cJSON_free(entries[i]);
   16f4e:	9202      	str	r2, [sp, #8]
   16f50:	4798      	blx	r3
   16f52:	e788      	b.n	16e66 <print_object.isra.3+0x2ce>
				*ptr++ = '\t';
   16f54:	f04f 0209 	mov.w	r2, #9
   16f58:	f103 0802 	add.w	r8, r3, #2
   16f5c:	705a      	strb	r2, [r3, #1]
   16f5e:	e7cc      	b.n	16efa <print_object.isra.3+0x362>
				*ptr++ = '\t';
   16f60:	f807 300a 	strb.w	r3, [r7, sl]
			for (i = 0; i < depth - 1; i++)
   16f64:	f10a 0a01 	add.w	sl, sl, #1
   16f68:	e78c      	b.n	16e84 <print_object.isra.3+0x2ec>
   16f6a:	bf00      	nop
   16f6c:	20020080 	.word	0x20020080
   16f70:	2002007c 	.word	0x2002007c

00016f74 <cJSON_Delete>:
{
   16f74:	b570      	push	{r4, r5, r6, lr}
   16f76:	4604      	mov	r4, r0
   16f78:	4d0f      	ldr	r5, [pc, #60]	; (16fb8 <cJSON_Delete+0x44>)
	while (c) {
   16f7a:	b904      	cbnz	r4, 16f7e <cJSON_Delete+0xa>
}
   16f7c:	bd70      	pop	{r4, r5, r6, pc}
		if (!(c->type & cJSON_IsReference) && c->child)
   16f7e:	68e3      	ldr	r3, [r4, #12]
		next = c->next;
   16f80:	6826      	ldr	r6, [r4, #0]
		if (!(c->type & cJSON_IsReference) && c->child)
   16f82:	05d9      	lsls	r1, r3, #23
   16f84:	d403      	bmi.n	16f8e <cJSON_Delete+0x1a>
   16f86:	68a0      	ldr	r0, [r4, #8]
   16f88:	b968      	cbnz	r0, 16fa6 <cJSON_Delete+0x32>
		if (!(c->type & cJSON_IsReference) && c->valuestring)
   16f8a:	6920      	ldr	r0, [r4, #16]
   16f8c:	b988      	cbnz	r0, 16fb2 <cJSON_Delete+0x3e>
		if (!(c->type & cJSON_StringIsConst) && c->string)
   16f8e:	68e3      	ldr	r3, [r4, #12]
   16f90:	059b      	lsls	r3, r3, #22
   16f92:	d403      	bmi.n	16f9c <cJSON_Delete+0x28>
   16f94:	6a20      	ldr	r0, [r4, #32]
   16f96:	b108      	cbz	r0, 16f9c <cJSON_Delete+0x28>
			cJSON_free(c->string);
   16f98:	682b      	ldr	r3, [r5, #0]
   16f9a:	4798      	blx	r3
		cJSON_free(c);
   16f9c:	4620      	mov	r0, r4
   16f9e:	682b      	ldr	r3, [r5, #0]
   16fa0:	4798      	blx	r3
		c = next;
   16fa2:	4634      	mov	r4, r6
   16fa4:	e7e9      	b.n	16f7a <cJSON_Delete+0x6>
			cJSON_Delete(c->child);
   16fa6:	f7ff ffe5 	bl	16f74 <cJSON_Delete>
		if (!(c->type & cJSON_IsReference) && c->valuestring)
   16faa:	68e3      	ldr	r3, [r4, #12]
   16fac:	05da      	lsls	r2, r3, #23
   16fae:	d5ec      	bpl.n	16f8a <cJSON_Delete+0x16>
   16fb0:	e7ed      	b.n	16f8e <cJSON_Delete+0x1a>
			cJSON_free(c->valuestring);
   16fb2:	682b      	ldr	r3, [r5, #0]
   16fb4:	4798      	blx	r3
   16fb6:	e7ea      	b.n	16f8e <cJSON_Delete+0x1a>
   16fb8:	2002007c 	.word	0x2002007c

00016fbc <cJSON_ParseWithOpts>:
{
   16fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16fc0:	4605      	mov	r5, r0
   16fc2:	460e      	mov	r6, r1
   16fc4:	4691      	mov	r9, r2
	ep = 0;
   16fc6:	2700      	movs	r7, #0
	cJSON *c = cJSON_New_Item();
   16fc8:	f7ff fa72 	bl	164b0 <cJSON_New_Item>
	ep = 0;
   16fcc:	f8df 8050 	ldr.w	r8, [pc, #80]	; 17020 <cJSON_ParseWithOpts+0x64>
	if (!c)
   16fd0:	4604      	mov	r4, r0
	ep = 0;
   16fd2:	f8c8 7000 	str.w	r7, [r8]
	if (!c)
   16fd6:	b160      	cbz	r0, 16ff2 <cJSON_ParseWithOpts+0x36>
	end = parse_value(c, skip(value));
   16fd8:	4628      	mov	r0, r5
   16fda:	f01b fec1 	bl	32d60 <skip>
   16fde:	4601      	mov	r1, r0
   16fe0:	4620      	mov	r0, r4
   16fe2:	f7ff fa75 	bl	164d0 <parse_value>
	if (!end) {
   16fe6:	4605      	mov	r5, r0
   16fe8:	b930      	cbnz	r0, 16ff8 <cJSON_ParseWithOpts+0x3c>
		cJSON_Delete(c);
   16fea:	4620      	mov	r0, r4
   16fec:	f7ff ffc2 	bl	16f74 <cJSON_Delete>
		return 0;
   16ff0:	462c      	mov	r4, r5
}
   16ff2:	4620      	mov	r0, r4
   16ff4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (require_null_terminated) {
   16ff8:	f1b9 0f00 	cmp.w	r9, #0
   16ffc:	d00b      	beq.n	17016 <cJSON_ParseWithOpts+0x5a>
		end = skip(end);
   16ffe:	f01b feaf 	bl	32d60 <skip>
		if (*end) {
   17002:	7803      	ldrb	r3, [r0, #0]
		end = skip(end);
   17004:	4605      	mov	r5, r0
		if (*end) {
   17006:	b133      	cbz	r3, 17016 <cJSON_ParseWithOpts+0x5a>
			cJSON_Delete(c);
   17008:	4620      	mov	r0, r4
   1700a:	f7ff ffb3 	bl	16f74 <cJSON_Delete>
			return 0;
   1700e:	463c      	mov	r4, r7
			ep = end;
   17010:	f8c8 5000 	str.w	r5, [r8]
			return 0;
   17014:	e7ed      	b.n	16ff2 <cJSON_ParseWithOpts+0x36>
	if (return_parse_end)
   17016:	2e00      	cmp	r6, #0
   17018:	d0eb      	beq.n	16ff2 <cJSON_ParseWithOpts+0x36>
		*return_parse_end = end;
   1701a:	6035      	str	r5, [r6, #0]
   1701c:	e7e9      	b.n	16ff2 <cJSON_ParseWithOpts+0x36>
   1701e:	bf00      	nop
   17020:	20021534 	.word	0x20021534

00017024 <cJSON_AddItemToObject>:
			c = c->next;
		suffix_object(c, item);
	}
}
void cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)
{
   17024:	b570      	push	{r4, r5, r6, lr}
   17026:	4605      	mov	r5, r0
   17028:	460e      	mov	r6, r1
	if (!item)
   1702a:	4614      	mov	r4, r2
   1702c:	b172      	cbz	r2, 1704c <cJSON_AddItemToObject+0x28>
		return;
	if (item->string)
   1702e:	6a10      	ldr	r0, [r2, #32]
   17030:	b110      	cbz	r0, 17038 <cJSON_AddItemToObject+0x14>
		cJSON_free(item->string);
   17032:	4b07      	ldr	r3, [pc, #28]	; (17050 <cJSON_AddItemToObject+0x2c>)
   17034:	681b      	ldr	r3, [r3, #0]
   17036:	4798      	blx	r3
	item->string = cJSON_strdup(string);
   17038:	4630      	mov	r0, r6
   1703a:	f7ff fb7b 	bl	16734 <cJSON_strdup>
	cJSON_AddItemToArray(object, item);
   1703e:	4621      	mov	r1, r4
	item->string = cJSON_strdup(string);
   17040:	6220      	str	r0, [r4, #32]
	cJSON_AddItemToArray(object, item);
   17042:	4628      	mov	r0, r5
}
   17044:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cJSON_AddItemToArray(object, item);
   17048:	f01b bea9 	b.w	32d9e <cJSON_AddItemToArray>
}
   1704c:	bd70      	pop	{r4, r5, r6, pc}
   1704e:	bf00      	nop
   17050:	2002007c 	.word	0x2002007c

00017054 <timer_work_handler>:
bool timer_stopped = true;

/* work handler */
void timer_work_handler(struct k_work *work)
{
	timer_stopped = false;
   17054:	2200      	movs	r2, #0
{
   17056:	b573      	push	{r0, r1, r4, r5, r6, lr}

	sec += 1;
	uint8_t h, m, s;
	
	h = (sec/3600); 
   17058:	f44f 6161 	mov.w	r1, #3600	; 0xe10
	timer_stopped = false;
   1705c:	4b14      	ldr	r3, [pc, #80]	; (170b0 <timer_work_handler+0x5c>)
	
	m = (sec -(3600*h))/60;
   1705e:	203c      	movs	r0, #60	; 0x3c
	timer_stopped = false;
   17060:	701a      	strb	r2, [r3, #0]
	sec += 1;
   17062:	4b14      	ldr	r3, [pc, #80]	; (170b4 <timer_work_handler+0x60>)
	
	s = (sec -(3600*h)-(m*60));

	LOG_DBG("sensor uptime: %d:%d:%d\n",h,m,s);
   17064:	2404      	movs	r4, #4
	sec += 1;
   17066:	681a      	ldr	r2, [r3, #0]
   17068:	4e13      	ldr	r6, [pc, #76]	; (170b8 <timer_work_handler+0x64>)
   1706a:	3201      	adds	r2, #1
	h = (sec/3600); 
   1706c:	fbb2 f5f1 	udiv	r5, r2, r1
	sec += 1;
   17070:	601a      	str	r2, [r3, #0]
	m = (sec -(3600*h))/60;
   17072:	b2eb      	uxtb	r3, r5
   17074:	fb01 2113 	mls	r1, r1, r3, r2
   17078:	fbb1 f1f0 	udiv	r1, r1, r0
	LOG_DBG("sensor uptime: %d:%d:%d\n",h,m,s);
   1707c:	f04f 0000 	mov.w	r0, #0
   17080:	f364 0007 	bfi	r0, r4, #0, #8
   17084:	4c0d      	ldr	r4, [pc, #52]	; (170bc <timer_work_handler+0x68>)
	s = (sec -(3600*h)-(m*60));
   17086:	eba2 1205 	sub.w	r2, r2, r5, lsl #4
   1708a:	1ba4      	subs	r4, r4, r6
   1708c:	08e4      	lsrs	r4, r4, #3
	LOG_DBG("sensor uptime: %d:%d:%d\n",h,m,s);
   1708e:	f364 108f 	bfi	r0, r4, #6, #10
	s = (sec -(3600*h)-(m*60));
   17092:	ebc1 1401 	rsb	r4, r1, r1, lsl #4
   17096:	eba2 0284 	sub.w	r2, r2, r4, lsl #2
	LOG_DBG("sensor uptime: %d:%d:%d\n",h,m,s);
   1709a:	b2d2      	uxtb	r2, r2
   1709c:	b2c9      	uxtb	r1, r1
   1709e:	9201      	str	r2, [sp, #4]
   170a0:	9100      	str	r1, [sp, #0]
   170a2:	4a07      	ldr	r2, [pc, #28]	; (170c0 <timer_work_handler+0x6c>)
   170a4:	4907      	ldr	r1, [pc, #28]	; (170c4 <timer_work_handler+0x70>)
   170a6:	f01c fd9c 	bl	33be2 <log_string_sync>
}
   170aa:	b002      	add	sp, #8
   170ac:	bd70      	pop	{r4, r5, r6, pc}
   170ae:	bf00      	nop
   170b0:	20020424 	.word	0x20020424
   170b4:	20021568 	.word	0x20021568
   170b8:	00039f48 	.word	0x00039f48
   170bc:	00039f68 	.word	0x00039f68
   170c0:	0003c51b 	.word	0x0003c51b
   170c4:	0003c7f5 	.word	0x0003c7f5

000170c8 <timer_stop_work_handler>:

void timer_stop_work_handler(struct k_work *work)
{
	LOG_DBG("BSEC took %d seconds to stabilise", sec);
   170c8:	2304      	movs	r3, #4
   170ca:	f04f 0000 	mov.w	r0, #0
   170ce:	4a0a      	ldr	r2, [pc, #40]	; (170f8 <timer_stop_work_handler+0x30>)
   170d0:	f363 0007 	bfi	r0, r3, #0, #8
   170d4:	4b09      	ldr	r3, [pc, #36]	; (170fc <timer_stop_work_handler+0x34>)
{
   170d6:	b510      	push	{r4, lr}
   170d8:	1a9b      	subs	r3, r3, r2
	LOG_DBG("BSEC took %d seconds to stabilise", sec);
   170da:	4c09      	ldr	r4, [pc, #36]	; (17100 <timer_stop_work_handler+0x38>)
   170dc:	08db      	lsrs	r3, r3, #3
   170de:	f363 108f 	bfi	r0, r3, #6, #10
   170e2:	4a08      	ldr	r2, [pc, #32]	; (17104 <timer_stop_work_handler+0x3c>)
   170e4:	6823      	ldr	r3, [r4, #0]
   170e6:	4908      	ldr	r1, [pc, #32]	; (17108 <timer_stop_work_handler+0x40>)
   170e8:	f01c fd7b 	bl	33be2 <log_string_sync>
	sec = 0;
   170ec:	2300      	movs	r3, #0
	timer_stopped = true;
   170ee:	2201      	movs	r2, #1
	sec = 0;
   170f0:	6023      	str	r3, [r4, #0]
	timer_stopped = true;
   170f2:	4b06      	ldr	r3, [pc, #24]	; (1710c <timer_stop_work_handler+0x44>)
   170f4:	701a      	strb	r2, [r3, #0]
}
   170f6:	bd10      	pop	{r4, pc}
   170f8:	00039f48 	.word	0x00039f48
   170fc:	00039f68 	.word	0x00039f68
   17100:	20021568 	.word	0x20021568
   17104:	0003c52e 	.word	0x0003c52e
   17108:	0003c7cf 	.word	0x0003c7cf
   1710c:	20020424 	.word	0x20020424

00017110 <submit_poll_work>:
	return 0;
}

static inline int submit_poll_work(const u32_t delay_s)
{
	return k_delayed_work_submit_to_queue(env_sensors_work_q,
   17110:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17114:	4b02      	ldr	r3, [pc, #8]	; (17120 <submit_poll_work+0x10>)
   17116:	4342      	muls	r2, r0
   17118:	4902      	ldr	r1, [pc, #8]	; (17124 <submit_poll_work+0x14>)
   1711a:	6818      	ldr	r0, [r3, #0]
   1711c:	f017 ba20 	b.w	2e560 <k_delayed_work_submit_to_queue>
   17120:	2002155c 	.word	0x2002155c
   17124:	2002153c 	.word	0x2002153c

00017128 <bsec_thread>:
	bsec_iot_loop((void *)k_sleep, get_timestamp_us, output_ready,
   17128:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
{
   1712c:	b507      	push	{r0, r1, r2, lr}
	bsec_iot_loop((void *)k_sleep, get_timestamp_us, output_ready,
   1712e:	4a05      	ldr	r2, [pc, #20]	; (17144 <bsec_thread+0x1c>)
   17130:	9300      	str	r3, [sp, #0]
   17132:	4905      	ldr	r1, [pc, #20]	; (17148 <bsec_thread+0x20>)
   17134:	4b05      	ldr	r3, [pc, #20]	; (1714c <bsec_thread+0x24>)
   17136:	4806      	ldr	r0, [pc, #24]	; (17150 <bsec_thread+0x28>)
   17138:	f000 fdb6 	bl	17ca8 <bsec_iot_loop>
}
   1713c:	b003      	add	sp, #12
   1713e:	f85d fb04 	ldr.w	pc, [sp], #4
   17142:	bf00      	nop
   17144:	00017241 	.word	0x00017241
   17148:	00032e0f 	.word	0x00032e0f
   1714c:	00017155 	.word	0x00017155
   17150:	00032e33 	.word	0x00032e33

00017154 <state_save>:
	settings_save_one("bsec/state", state_buffer, length);
   17154:	460a      	mov	r2, r1
   17156:	4601      	mov	r1, r0
   17158:	4801      	ldr	r0, [pc, #4]	; (17160 <state_save+0xc>)
   1715a:	f002 bd81 	b.w	19c60 <settings_save_one>
   1715e:	bf00      	nop
   17160:	0003c7c4 	.word	0x0003c7c4

00017164 <settings_set>:
{
   17164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17168:	460d      	mov	r5, r1
	if (!strcmp(key, "state")) {
   1716a:	490b      	ldr	r1, [pc, #44]	; (17198 <settings_set+0x34>)
{
   1716c:	4617      	mov	r7, r2
   1716e:	4698      	mov	r8, r3
	if (!strcmp(key, "state")) {
   17170:	f7fa ff7c 	bl	1206c <strcmp>
   17174:	4e09      	ldr	r6, [pc, #36]	; (1719c <settings_set+0x38>)
   17176:	4604      	mov	r4, r0
   17178:	b130      	cbz	r0, 17188 <settings_set+0x24>
	s_state_buffer_len = 0;
   1717a:	2300      	movs	r3, #0
	return -1;
   1717c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	s_state_buffer_len = 0;
   17180:	6033      	str	r3, [r6, #0]
}
   17182:	4620      	mov	r0, r4
   17184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		s_state_buffer_len = len_rd;
   17188:	6035      	str	r5, [r6, #0]
		if (read_cb(cb_arg, s_state_buffer, len_rd) > 0) {
   1718a:	462a      	mov	r2, r5
   1718c:	4904      	ldr	r1, [pc, #16]	; (171a0 <settings_set+0x3c>)
   1718e:	4640      	mov	r0, r8
   17190:	47b8      	blx	r7
   17192:	2800      	cmp	r0, #0
   17194:	dcf5      	bgt.n	17182 <settings_set+0x1e>
   17196:	e7f0      	b.n	1717a <settings_set+0x16>
   17198:	0003c7c9 	.word	0x0003c7c9
   1719c:	20021564 	.word	0x20021564
   171a0:	20027f28 	.word	0x20027f28

000171a4 <state_load>:
	if ((s_state_buffer_len > 0) && (s_state_buffer_len <= n_buffer)) {
   171a4:	4b07      	ldr	r3, [pc, #28]	; (171c4 <state_load+0x20>)
{
   171a6:	b510      	push	{r4, lr}
	if ((s_state_buffer_len > 0) && (s_state_buffer_len <= n_buffer)) {
   171a8:	681c      	ldr	r4, [r3, #0]
   171aa:	2c00      	cmp	r4, #0
   171ac:	dd07      	ble.n	171be <state_load+0x1a>
   171ae:	428c      	cmp	r4, r1
   171b0:	d805      	bhi.n	171be <state_load+0x1a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   171b2:	4622      	mov	r2, r4
   171b4:	4904      	ldr	r1, [pc, #16]	; (171c8 <state_load+0x24>)
   171b6:	f021 ff04 	bl	38fc2 <memcpy>
}
   171ba:	4620      	mov	r0, r4
   171bc:	bd10      	pop	{r4, pc}
		return 0;
   171be:	2400      	movs	r4, #0
   171c0:	e7fb      	b.n	171ba <state_load+0x16>
   171c2:	bf00      	nop
   171c4:	20021564 	.word	0x20021564
   171c8:	20027f28 	.word	0x20027f28

000171cc <env_sensors_poll_fn>:
{
	return initialized ? submit_poll_work(0) : -ENXIO;
}

static void env_sensors_poll_fn(struct k_work *work)
{
   171cc:	b510      	push	{r4, lr}

	if (data_send_interval_s == 0) {
   171ce:	4c09      	ldr	r4, [pc, #36]	; (171f4 <env_sensors_poll_fn+0x28>)
   171d0:	6822      	ldr	r2, [r4, #0]
   171d2:	b16a      	cbz	r2, 171f0 <env_sensors_poll_fn+0x24>
		return;
	}

	if (data_ready_cb) {
   171d4:	4b08      	ldr	r3, [pc, #32]	; (171f8 <env_sensors_poll_fn+0x2c>)
   171d6:	681b      	ldr	r3, [r3, #0]
   171d8:	b103      	cbz	r3, 171dc <env_sensors_poll_fn+0x10>
		data_ready_cb();
   171da:	4798      	blx	r3
	}

	submit_poll_work(backoff_enabled ?
   171dc:	4b07      	ldr	r3, [pc, #28]	; (171fc <env_sensors_poll_fn+0x30>)
   171de:	781b      	ldrb	r3, [r3, #0]
   171e0:	b923      	cbnz	r3, 171ec <env_sensors_poll_fn+0x20>
   171e2:	6820      	ldr	r0, [r4, #0]
		CONFIG_ENVIRONMENT_DATA_BACKOFF_TIME : data_send_interval_s);
}
   171e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	submit_poll_work(backoff_enabled ?
   171e8:	f7ff bf92 	b.w	17110 <submit_poll_work>
   171ec:	2014      	movs	r0, #20
   171ee:	e7f9      	b.n	171e4 <env_sensors_poll_fn+0x18>
}
   171f0:	bd10      	pop	{r4, pc}
   171f2:	bf00      	nop
   171f4:	20020088 	.word	0x20020088
   171f8:	20021538 	.word	0x20021538
   171fc:	20027f25 	.word	0x20027f25

00017200 <bus_read>:
{
   17200:	b530      	push	{r4, r5, lr}
   17202:	b089      	sub	sp, #36	; 0x24
   17204:	f88d 1007 	strb.w	r1, [sp, #7]
	return i2c_write_read(i2c_master, dev_addr, &reg_addr,
   17208:	490c      	ldr	r1, [pc, #48]	; (1723c <bus_read+0x3c>)
{
   1720a:	4605      	mov	r5, r0
	return i2c_write_read(i2c_master, dev_addr, &reg_addr,
   1720c:	6808      	ldr	r0, [r1, #0]
				 const void *write_buf, size_t num_write,
				 void *read_buf, size_t num_read)
{
	struct i2c_msg msg[2];

	msg[0].buf = (u8_t *)write_buf;
   1720e:	f10d 0107 	add.w	r1, sp, #7
   17212:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
   17214:	2101      	movs	r1, #1
   17216:	e9cd 2305 	strd	r2, r3, [sp, #20]
   1721a:	9103      	str	r1, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;

	msg[1].buf = (u8_t *)read_buf;
	msg[1].len = num_read;
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1721c:	2307      	movs	r3, #7
	msg[0].flags = I2C_MSG_WRITE;
   1721e:	2100      	movs	r1, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   17220:	f88d 301c 	strb.w	r3, [sp, #28]
	msg[0].flags = I2C_MSG_WRITE;
   17224:	f88d 1010 	strb.w	r1, [sp, #16]
	return api->transfer(dev, msgs, num_msgs, addr);
   17228:	6883      	ldr	r3, [r0, #8]
   1722a:	2202      	movs	r2, #2
   1722c:	685c      	ldr	r4, [r3, #4]
   1722e:	a902      	add	r1, sp, #8
   17230:	462b      	mov	r3, r5
   17232:	47a0      	blx	r4
}
   17234:	b240      	sxtb	r0, r0
   17236:	b009      	add	sp, #36	; 0x24
   17238:	bd30      	pop	{r4, r5, pc}
   1723a:	bf00      	nop
   1723c:	20021560 	.word	0x20021560

00017240 <output_ready>:
{
   17240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17244:	ed2d 8b04 	vpush	{d8-d9}
   17248:	461f      	mov	r7, r3
	if (!iaq_reading_ok) {
   1724a:	4b44      	ldr	r3, [pc, #272]	; (1735c <output_ready+0x11c>)
{
   1724c:	4615      	mov	r5, r2
	if (!iaq_reading_ok) {
   1724e:	781a      	ldrb	r2, [r3, #0]
{
   17250:	b083      	sub	sp, #12
   17252:	4680      	mov	r8, r0
   17254:	4689      	mov	r9, r1
   17256:	ee10 6a10 	vmov	r6, s0
   1725a:	eef0 8a60 	vmov.f32	s17, s1
   1725e:	ee11 ba10 	vmov	fp, s2
   17262:	eeb0 8a61 	vmov.f32	s16, s3
   17266:	eeb0 9a63 	vmov.f32	s18, s7
   1726a:	469a      	mov	sl, r3
	if (!iaq_reading_ok) {
   1726c:	b92a      	cbnz	r2, 1727a <output_ready+0x3a>
	z_impl_k_timer_start(timer, duration, period);
   1726e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17272:	483b      	ldr	r0, [pc, #236]	; (17360 <output_ready+0x120>)
   17274:	4611      	mov	r1, r2
   17276:	f017 fda9 	bl	2edcc <z_impl_k_timer_start>
	if (timer_stopped && iaq_reading_ok) {
   1727a:	4b3a      	ldr	r3, [pc, #232]	; (17364 <output_ready+0x124>)
   1727c:	4c3a      	ldr	r4, [pc, #232]	; (17368 <output_ready+0x128>)
   1727e:	1ae4      	subs	r4, r4, r3
   17280:	4b3a      	ldr	r3, [pc, #232]	; (1736c <output_ready+0x12c>)
   17282:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   17286:	781b      	ldrb	r3, [r3, #0]
   17288:	2b00      	cmp	r3, #0
   1728a:	d04b      	beq.n	17324 <output_ready+0xe4>
   1728c:	f89a 3000 	ldrb.w	r3, [sl]
   17290:	2b00      	cmp	r3, #0
   17292:	d047      	beq.n	17324 <output_ready+0xe4>
		LOG_DBG("timestamp, %d", timestamp);
   17294:	2304      	movs	r3, #4
   17296:	f04f 0000 	mov.w	r0, #0
   1729a:	f363 0007 	bfi	r0, r3, #0, #8
   1729e:	f364 108f 	bfi	r0, r4, #6, #10
   172a2:	4a33      	ldr	r2, [pc, #204]	; (17370 <output_ready+0x130>)
   172a4:	4933      	ldr	r1, [pc, #204]	; (17374 <output_ready+0x134>)
   172a6:	e9cd 8900 	strd	r8, r9, [sp]
   172aa:	f01c fc9a 	bl	33be2 <log_string_sync>
		LOG_DBG("BSEC return code, %d", bsec_status);
   172ae:	2304      	movs	r3, #4
   172b0:	f04f 0000 	mov.w	r0, #0
   172b4:	f363 0007 	bfi	r0, r3, #0, #8
   172b8:	4a2d      	ldr	r2, [pc, #180]	; (17370 <output_ready+0x130>)
   172ba:	463b      	mov	r3, r7
   172bc:	f364 108f 	bfi	r0, r4, #6, #10
   172c0:	492d      	ldr	r1, [pc, #180]	; (17378 <output_ready+0x138>)
   172c2:	f01c fc8e 	bl	33be2 <log_string_sync>
		LOG_DBG("IAQ reading, %d", iaq);
   172c6:	f04f 0700 	mov.w	r7, #0
   172ca:	2304      	movs	r3, #4
   172cc:	4630      	mov	r0, r6
   172ce:	f363 0707 	bfi	r7, r3, #0, #8
   172d2:	f7f5 fe93 	bl	cffc <__aeabi_f2d>
   172d6:	f364 178f 	bfi	r7, r4, #6, #10
   172da:	e9cd 0100 	strd	r0, r1, [sp]
   172de:	4a24      	ldr	r2, [pc, #144]	; (17370 <output_ready+0x130>)
   172e0:	4638      	mov	r0, r7
   172e2:	4926      	ldr	r1, [pc, #152]	; (1737c <output_ready+0x13c>)
   172e4:	f01c fc7d 	bl	33be2 <log_string_sync>
		LOG_DBG("Static IAQ reading, %d", static_iaq);
   172e8:	f04f 0700 	mov.w	r7, #0
   172ec:	2304      	movs	r3, #4
   172ee:	ee19 0a10 	vmov	r0, s18
   172f2:	f363 0707 	bfi	r7, r3, #0, #8
   172f6:	f7f5 fe81 	bl	cffc <__aeabi_f2d>
   172fa:	f364 178f 	bfi	r7, r4, #6, #10
   172fe:	e9cd 0100 	strd	r0, r1, [sp]
   17302:	4a1b      	ldr	r2, [pc, #108]	; (17370 <output_ready+0x130>)
   17304:	491e      	ldr	r1, [pc, #120]	; (17380 <output_ready+0x140>)
   17306:	4638      	mov	r0, r7
   17308:	f01c fc6b 	bl	33be2 <log_string_sync>
		LOG_DBG("IAQ accuracy, %d", iaq_accuracy);
   1730c:	2304      	movs	r3, #4
   1730e:	f04f 0000 	mov.w	r0, #0
   17312:	f363 0007 	bfi	r0, r3, #0, #8
   17316:	f364 108f 	bfi	r0, r4, #6, #10
   1731a:	462b      	mov	r3, r5
   1731c:	4a14      	ldr	r2, [pc, #80]	; (17370 <output_ready+0x130>)
   1731e:	4919      	ldr	r1, [pc, #100]	; (17384 <output_ready+0x144>)
   17320:	f01c fc5f 	bl	33be2 <log_string_sync>
			LOG_DBG("IAQ calibration unknown [%d]\n", iaq_accuracy);
   17324:	f04f 0000 	mov.w	r0, #0
   17328:	2304      	movs	r3, #4
   1732a:	f363 0007 	bfi	r0, r3, #0, #8
   1732e:	f364 108f 	bfi	r0, r4, #6, #10
	switch (iaq_accuracy) 
   17332:	2d03      	cmp	r5, #3
   17334:	f200 8137 	bhi.w	175a6 <output_ready+0x366>
   17338:	e8df f005 	tbb	[pc, r5]
   1733c:	2c0c0802 	.word	0x2c0c0802
			LOG_DBG("IAQ calibration stabilising [%d]\n", iaq_accuracy);
   17340:	2300      	movs	r3, #0
   17342:	4a0b      	ldr	r2, [pc, #44]	; (17370 <output_ready+0x130>)
   17344:	4910      	ldr	r1, [pc, #64]	; (17388 <output_ready+0x148>)
			LOG_DBG("IAQ calibration unknown [%d]\n", iaq_accuracy);
   17346:	f01c fc4c 	bl	33be2 <log_string_sync>
   1734a:	e030      	b.n	173ae <output_ready+0x16e>
			LOG_DBG("IAQ calibration uncertain [%d]\n", iaq_accuracy);
   1734c:	2301      	movs	r3, #1
   1734e:	4a08      	ldr	r2, [pc, #32]	; (17370 <output_ready+0x130>)
   17350:	490e      	ldr	r1, [pc, #56]	; (1738c <output_ready+0x14c>)
   17352:	e7f8      	b.n	17346 <output_ready+0x106>
			LOG_DBG("IAQ currently calibrating [%d]\n", iaq_accuracy);
   17354:	2302      	movs	r3, #2
   17356:	4a06      	ldr	r2, [pc, #24]	; (17370 <output_ready+0x130>)
   17358:	490d      	ldr	r1, [pc, #52]	; (17390 <output_ready+0x150>)
   1735a:	e7f4      	b.n	17346 <output_ready+0x106>
   1735c:	20027f26 	.word	0x20027f26
   17360:	2002063c 	.word	0x2002063c
   17364:	00039f48 	.word	0x00039f48
   17368:	00039f68 	.word	0x00039f68
   1736c:	20020424 	.word	0x20020424
   17370:	0003c546 	.word	0x0003c546
   17374:	0003c62d 	.word	0x0003c62d
   17378:	0003c63f 	.word	0x0003c63f
   1737c:	0003c658 	.word	0x0003c658
   17380:	0003c66c 	.word	0x0003c66c
   17384:	0003c687 	.word	0x0003c687
   17388:	0003c69c 	.word	0x0003c69c
   1738c:	0003c6c2 	.word	0x0003c6c2
   17390:	0003c6e6 	.word	0x0003c6e6
			LOG_DBG("IAQ calibrated [%d]\n");
   17394:	4a86      	ldr	r2, [pc, #536]	; (175b0 <output_ready+0x370>)
   17396:	4987      	ldr	r1, [pc, #540]	; (175b4 <output_ready+0x374>)
   17398:	f01c fc23 	bl	33be2 <log_string_sync>
			iaq_reading_ok = true;
   1739c:	2201      	movs	r2, #1
   1739e:	4b86      	ldr	r3, [pc, #536]	; (175b8 <output_ready+0x378>)
   173a0:	701a      	strb	r2, [r3, #0]
			if (!timer_stopped) {
   173a2:	4b86      	ldr	r3, [pc, #536]	; (175bc <output_ready+0x37c>)
   173a4:	781b      	ldrb	r3, [r3, #0]
   173a6:	b913      	cbnz	r3, 173ae <output_ready+0x16e>
	z_impl_k_timer_stop(timer);
   173a8:	4885      	ldr	r0, [pc, #532]	; (175c0 <output_ready+0x380>)
   173aa:	f021 fd70 	bl	38e8e <z_impl_k_timer_stop>
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
   173ae:	f04f 0320 	mov.w	r3, #32
   173b2:	f3ef 8711 	mrs	r7, BASEPRI
   173b6:	f383 8811 	msr	BASEPRI, r3
   173ba:	f3bf 8f6f 	isb	sy
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   173be:	4881      	ldr	r0, [pc, #516]	; (175c4 <output_ready+0x384>)
   173c0:	f017 f884 	bl	2e4cc <z_spin_lock_valid>
   173c4:	b968      	cbnz	r0, 173e2 <output_ready+0x1a2>
   173c6:	235c      	movs	r3, #92	; 0x5c
   173c8:	4a7f      	ldr	r2, [pc, #508]	; (175c8 <output_ready+0x388>)
   173ca:	4980      	ldr	r1, [pc, #512]	; (175cc <output_ready+0x38c>)
   173cc:	4880      	ldr	r0, [pc, #512]	; (175d0 <output_ready+0x390>)
   173ce:	f01c f8f0 	bl	335b2 <printk>
   173d2:	497c      	ldr	r1, [pc, #496]	; (175c4 <output_ready+0x384>)
   173d4:	487f      	ldr	r0, [pc, #508]	; (175d4 <output_ready+0x394>)
   173d6:	f01c f8ec 	bl	335b2 <printk>
   173da:	215c      	movs	r1, #92	; 0x5c
   173dc:	487a      	ldr	r0, [pc, #488]	; (175c8 <output_ready+0x388>)
   173de:	f01c fbe9 	bl	33bb4 <assert_post_action>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
   173e2:	4c7d      	ldr	r4, [pc, #500]	; (175d8 <output_ready+0x398>)
   173e4:	f104 0018 	add.w	r0, r4, #24
   173e8:	f017 f88e 	bl	2e508 <z_spin_lock_set_owner>
	temp_sensor.sensor.value = temperature;
   173ec:	ee18 0a90 	vmov	r0, s17
   173f0:	f7f5 fe04 	bl	cffc <__aeabi_f2d>
   173f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   173f8:	f104 0018 	add.w	r0, r4, #24
   173fc:	f017 f874 	bl	2e4e8 <z_spin_unlock_valid>
   17400:	b970      	cbnz	r0, 17420 <output_ready+0x1e0>
   17402:	2384      	movs	r3, #132	; 0x84
   17404:	4a70      	ldr	r2, [pc, #448]	; (175c8 <output_ready+0x388>)
   17406:	4975      	ldr	r1, [pc, #468]	; (175dc <output_ready+0x39c>)
   17408:	4871      	ldr	r0, [pc, #452]	; (175d0 <output_ready+0x390>)
   1740a:	f01c f8d2 	bl	335b2 <printk>
   1740e:	f104 0118 	add.w	r1, r4, #24
   17412:	4873      	ldr	r0, [pc, #460]	; (175e0 <output_ready+0x3a0>)
   17414:	f01c f8cd 	bl	335b2 <printk>
   17418:	2184      	movs	r1, #132	; 0x84
   1741a:	486b      	ldr	r0, [pc, #428]	; (175c8 <output_ready+0x388>)
   1741c:	f01c fbca 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   17420:	f387 8811 	msr	BASEPRI, r7
   17424:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   17428:	f04f 0320 	mov.w	r3, #32
   1742c:	f3ef 8711 	mrs	r7, BASEPRI
   17430:	f383 8811 	msr	BASEPRI, r3
   17434:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17438:	486a      	ldr	r0, [pc, #424]	; (175e4 <output_ready+0x3a4>)
   1743a:	f017 f847 	bl	2e4cc <z_spin_lock_valid>
   1743e:	b968      	cbnz	r0, 1745c <output_ready+0x21c>
   17440:	235c      	movs	r3, #92	; 0x5c
   17442:	4a61      	ldr	r2, [pc, #388]	; (175c8 <output_ready+0x388>)
   17444:	4961      	ldr	r1, [pc, #388]	; (175cc <output_ready+0x38c>)
   17446:	4862      	ldr	r0, [pc, #392]	; (175d0 <output_ready+0x390>)
   17448:	f01c f8b3 	bl	335b2 <printk>
   1744c:	4965      	ldr	r1, [pc, #404]	; (175e4 <output_ready+0x3a4>)
   1744e:	4861      	ldr	r0, [pc, #388]	; (175d4 <output_ready+0x394>)
   17450:	f01c f8af 	bl	335b2 <printk>
   17454:	215c      	movs	r1, #92	; 0x5c
   17456:	485c      	ldr	r0, [pc, #368]	; (175c8 <output_ready+0x388>)
   17458:	f01c fbac 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   1745c:	4c62      	ldr	r4, [pc, #392]	; (175e8 <output_ready+0x3a8>)
   1745e:	f104 0018 	add.w	r0, r4, #24
   17462:	f017 f851 	bl	2e508 <z_spin_lock_set_owner>
	humid_sensor.sensor.value = humidity;
   17466:	4658      	mov	r0, fp
   17468:	f7f5 fdc8 	bl	cffc <__aeabi_f2d>
   1746c:	e9c4 0102 	strd	r0, r1, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17470:	f104 0018 	add.w	r0, r4, #24
   17474:	f017 f838 	bl	2e4e8 <z_spin_unlock_valid>
   17478:	b970      	cbnz	r0, 17498 <output_ready+0x258>
   1747a:	2384      	movs	r3, #132	; 0x84
   1747c:	4a52      	ldr	r2, [pc, #328]	; (175c8 <output_ready+0x388>)
   1747e:	4957      	ldr	r1, [pc, #348]	; (175dc <output_ready+0x39c>)
   17480:	4853      	ldr	r0, [pc, #332]	; (175d0 <output_ready+0x390>)
   17482:	f01c f896 	bl	335b2 <printk>
   17486:	f104 0118 	add.w	r1, r4, #24
   1748a:	4855      	ldr	r0, [pc, #340]	; (175e0 <output_ready+0x3a0>)
   1748c:	f01c f891 	bl	335b2 <printk>
   17490:	2184      	movs	r1, #132	; 0x84
   17492:	484d      	ldr	r0, [pc, #308]	; (175c8 <output_ready+0x388>)
   17494:	f01c fb8e 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   17498:	f387 8811 	msr	BASEPRI, r7
   1749c:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   174a0:	f04f 0320 	mov.w	r3, #32
   174a4:	f3ef 8711 	mrs	r7, BASEPRI
   174a8:	f383 8811 	msr	BASEPRI, r3
   174ac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   174b0:	484e      	ldr	r0, [pc, #312]	; (175ec <output_ready+0x3ac>)
   174b2:	f017 f80b 	bl	2e4cc <z_spin_lock_valid>
   174b6:	b968      	cbnz	r0, 174d4 <output_ready+0x294>
   174b8:	235c      	movs	r3, #92	; 0x5c
   174ba:	4a43      	ldr	r2, [pc, #268]	; (175c8 <output_ready+0x388>)
   174bc:	4943      	ldr	r1, [pc, #268]	; (175cc <output_ready+0x38c>)
   174be:	4844      	ldr	r0, [pc, #272]	; (175d0 <output_ready+0x390>)
   174c0:	f01c f877 	bl	335b2 <printk>
   174c4:	4949      	ldr	r1, [pc, #292]	; (175ec <output_ready+0x3ac>)
   174c6:	4843      	ldr	r0, [pc, #268]	; (175d4 <output_ready+0x394>)
   174c8:	f01c f873 	bl	335b2 <printk>
   174cc:	215c      	movs	r1, #92	; 0x5c
   174ce:	483e      	ldr	r0, [pc, #248]	; (175c8 <output_ready+0x388>)
   174d0:	f01c fb70 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   174d4:	4c46      	ldr	r4, [pc, #280]	; (175f0 <output_ready+0x3b0>)
   174d6:	f104 0018 	add.w	r0, r4, #24
   174da:	f017 f815 	bl	2e508 <z_spin_lock_set_owner>
	pressure_sensor.sensor.value = pressure / 1000;
   174de:	eddf 7a45 	vldr	s15, [pc, #276]	; 175f4 <output_ready+0x3b4>
   174e2:	eec8 7a27 	vdiv.f32	s15, s16, s15
   174e6:	ee17 0a90 	vmov	r0, s15
   174ea:	f7f5 fd87 	bl	cffc <__aeabi_f2d>
   174ee:	e9c4 0102 	strd	r0, r1, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   174f2:	f104 0018 	add.w	r0, r4, #24
   174f6:	f016 fff7 	bl	2e4e8 <z_spin_unlock_valid>
   174fa:	b970      	cbnz	r0, 1751a <output_ready+0x2da>
   174fc:	2384      	movs	r3, #132	; 0x84
   174fe:	4a32      	ldr	r2, [pc, #200]	; (175c8 <output_ready+0x388>)
   17500:	4936      	ldr	r1, [pc, #216]	; (175dc <output_ready+0x39c>)
   17502:	4833      	ldr	r0, [pc, #204]	; (175d0 <output_ready+0x390>)
   17504:	f01c f855 	bl	335b2 <printk>
   17508:	f104 0118 	add.w	r1, r4, #24
   1750c:	4834      	ldr	r0, [pc, #208]	; (175e0 <output_ready+0x3a0>)
   1750e:	f01c f850 	bl	335b2 <printk>
   17512:	2184      	movs	r1, #132	; 0x84
   17514:	482c      	ldr	r0, [pc, #176]	; (175c8 <output_ready+0x388>)
   17516:	f01c fb4d 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   1751a:	f387 8811 	msr	BASEPRI, r7
   1751e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   17522:	f04f 0320 	mov.w	r3, #32
   17526:	f3ef 8711 	mrs	r7, BASEPRI
   1752a:	f383 8811 	msr	BASEPRI, r3
   1752e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17532:	4831      	ldr	r0, [pc, #196]	; (175f8 <output_ready+0x3b8>)
   17534:	f016 ffca 	bl	2e4cc <z_spin_lock_valid>
   17538:	b968      	cbnz	r0, 17556 <output_ready+0x316>
   1753a:	235c      	movs	r3, #92	; 0x5c
   1753c:	4a22      	ldr	r2, [pc, #136]	; (175c8 <output_ready+0x388>)
   1753e:	4923      	ldr	r1, [pc, #140]	; (175cc <output_ready+0x38c>)
   17540:	4823      	ldr	r0, [pc, #140]	; (175d0 <output_ready+0x390>)
   17542:	f01c f836 	bl	335b2 <printk>
   17546:	492c      	ldr	r1, [pc, #176]	; (175f8 <output_ready+0x3b8>)
   17548:	4822      	ldr	r0, [pc, #136]	; (175d4 <output_ready+0x394>)
   1754a:	f01c f832 	bl	335b2 <printk>
   1754e:	215c      	movs	r1, #92	; 0x5c
   17550:	481d      	ldr	r0, [pc, #116]	; (175c8 <output_ready+0x388>)
   17552:	f01c fb2f 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   17556:	4c29      	ldr	r4, [pc, #164]	; (175fc <output_ready+0x3bc>)
   17558:	f104 0018 	add.w	r0, r4, #24
   1755c:	f016 ffd4 	bl	2e508 <z_spin_lock_set_owner>
	air_quality_sensor.sensor.value = iaq;
   17560:	4630      	mov	r0, r6
   17562:	f7f5 fd4b 	bl	cffc <__aeabi_f2d>
   17566:	e9c4 0102 	strd	r0, r1, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1756a:	f104 0018 	add.w	r0, r4, #24
	air_quality_sensor.sensor.accuracy = iaq_accuracy;
   1756e:	7425      	strb	r5, [r4, #16]
   17570:	f016 ffba 	bl	2e4e8 <z_spin_unlock_valid>
   17574:	b970      	cbnz	r0, 17594 <output_ready+0x354>
   17576:	2384      	movs	r3, #132	; 0x84
   17578:	4a13      	ldr	r2, [pc, #76]	; (175c8 <output_ready+0x388>)
   1757a:	4918      	ldr	r1, [pc, #96]	; (175dc <output_ready+0x39c>)
   1757c:	4814      	ldr	r0, [pc, #80]	; (175d0 <output_ready+0x390>)
   1757e:	f01c f818 	bl	335b2 <printk>
   17582:	f104 0118 	add.w	r1, r4, #24
   17586:	4816      	ldr	r0, [pc, #88]	; (175e0 <output_ready+0x3a0>)
   17588:	f01c f813 	bl	335b2 <printk>
   1758c:	2184      	movs	r1, #132	; 0x84
   1758e:	480e      	ldr	r0, [pc, #56]	; (175c8 <output_ready+0x388>)
   17590:	f01c fb10 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   17594:	f387 8811 	msr	BASEPRI, r7
   17598:	f3bf 8f6f 	isb	sy
}
   1759c:	b003      	add	sp, #12
   1759e:	ecbd 8b04 	vpop	{d8-d9}
   175a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LOG_DBG("IAQ calibration unknown [%d]\n", iaq_accuracy);
   175a6:	462b      	mov	r3, r5
   175a8:	4a01      	ldr	r2, [pc, #4]	; (175b0 <output_ready+0x370>)
   175aa:	4915      	ldr	r1, [pc, #84]	; (17600 <output_ready+0x3c0>)
   175ac:	e6cb      	b.n	17346 <output_ready+0x106>
   175ae:	bf00      	nop
   175b0:	0003c546 	.word	0x0003c546
   175b4:	0003c70a 	.word	0x0003c70a
   175b8:	20027f26 	.word	0x20027f26
   175bc:	20020424 	.word	0x20020424
   175c0:	2002063c 	.word	0x2002063c
   175c4:	20020918 	.word	0x20020918
   175c8:	0003c745 	.word	0x0003c745
   175cc:	0003c76b 	.word	0x0003c76b
   175d0:	0003b773 	.word	0x0003b773
   175d4:	0003c780 	.word	0x0003c780
   175d8:	20020900 	.word	0x20020900
   175dc:	0003c798 	.word	0x0003c798
   175e0:	0003c7af 	.word	0x0003c7af
   175e4:	20020038 	.word	0x20020038
   175e8:	20020020 	.word	0x20020020
   175ec:	20020058 	.word	0x20020058
   175f0:	20020040 	.word	0x20020040
   175f4:	447a0000 	.word	0x447a0000
   175f8:	20020018 	.word	0x20020018
   175fc:	20020000 	.word	0x20020000
   17600:	0003c723 	.word	0x0003c723

00017604 <k_work_submit_to_queue.constprop.7>:
 * @param work_q Address of workqueue.
 * @param work Address of work item.
 *
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
   17604:	4601      	mov	r1, r0
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17606:	f100 0308 	add.w	r3, r0, #8
   1760a:	e8d3 2fef 	ldaex	r2, [r3]
   1760e:	f042 0001 	orr.w	r0, r2, #1
   17612:	e8c3 0fec 	stlex	ip, r0, [r3]
   17616:	f1bc 0f00 	cmp.w	ip, #0
   1761a:	d1f6      	bne.n	1760a <k_work_submit_to_queue.constprop.7+0x6>
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1761c:	07d3      	lsls	r3, r2, #31
   1761e:	d402      	bmi.n	17626 <k_work_submit_to_queue.constprop.7+0x22>
		k_queue_append(&work_q->queue, work);
   17620:	4801      	ldr	r0, [pc, #4]	; (17628 <k_work_submit_to_queue.constprop.7+0x24>)
   17622:	f021 bb34 	b.w	38c8e <k_queue_append>
	}
}
   17626:	4770      	bx	lr
   17628:	20027524 	.word	0x20027524

0001762c <iaq_timer_handler>:
 *
 * @return N/A
 */
static inline void k_work_submit(struct k_work *work)
{
	k_work_submit_to_queue(&k_sys_work_q, work);
   1762c:	4801      	ldr	r0, [pc, #4]	; (17634 <iaq_timer_handler+0x8>)
   1762e:	f7ff bfe9 	b.w	17604 <k_work_submit_to_queue.constprop.7>
   17632:	bf00      	nop
   17634:	20020098 	.word	0x20020098

00017638 <iaq_timer_stop>:
   17638:	4801      	ldr	r0, [pc, #4]	; (17640 <iaq_timer_stop+0x8>)
   1763a:	f7ff bfe3 	b.w	17604 <k_work_submit_to_queue.constprop.7>
   1763e:	bf00      	nop
   17640:	2002008c 	.word	0x2002008c

00017644 <bus_write>:
{
   17644:	b5f0      	push	{r4, r5, r6, r7, lr}
   17646:	b085      	sub	sp, #20
   17648:	4605      	mov	r5, r0
	u8_t buf[data_len+1];
   1764a:	4668      	mov	r0, sp
{
   1764c:	4616      	mov	r6, r2
	u8_t buf[data_len+1];
   1764e:	f103 0208 	add.w	r2, r3, #8
   17652:	08d2      	lsrs	r2, r2, #3
   17654:	eba0 02c2 	sub.w	r2, r0, r2, lsl #3
{
   17658:	af00      	add	r7, sp, #0
	u8_t buf[data_len+1];
   1765a:	4695      	mov	sp, r2
	buf[0] = reg_addr;
   1765c:	4668      	mov	r0, sp
   1765e:	461a      	mov	r2, r3
   17660:	f800 1b01 	strb.w	r1, [r0], #1
   17664:	4631      	mov	r1, r6
	u8_t buf[data_len+1];
   17666:	1c5c      	adds	r4, r3, #1
   17668:	f021 fcab 	bl	38fc2 <memcpy>
	return i2c_write(i2c_master, buf, data_len+1, dev_addr);
   1766c:	4b08      	ldr	r3, [pc, #32]	; (17690 <bus_write+0x4c>)
	msg.buf = (u8_t *)buf;
   1766e:	f8c7 d004 	str.w	sp, [r7, #4]
   17672:	6818      	ldr	r0, [r3, #0]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   17674:	2302      	movs	r3, #2
	msg.len = num_bytes;
   17676:	60bc      	str	r4, [r7, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   17678:	733b      	strb	r3, [r7, #12]
	return api->transfer(dev, msgs, num_msgs, addr);
   1767a:	6883      	ldr	r3, [r0, #8]
   1767c:	1d39      	adds	r1, r7, #4
   1767e:	685c      	ldr	r4, [r3, #4]
   17680:	2201      	movs	r2, #1
   17682:	462b      	mov	r3, r5
   17684:	47a0      	blx	r4
}
   17686:	3714      	adds	r7, #20
   17688:	b240      	sxtb	r0, r0
   1768a:	46bd      	mov	sp, r7
   1768c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1768e:	bf00      	nop
   17690:	20021560 	.word	0x20021560

00017694 <env_sensors_get_temperature>:
{
   17694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (sensor_data == NULL) {
   17696:	4604      	mov	r4, r0
   17698:	2800      	cmp	r0, #0
   1769a:	d040      	beq.n	1771e <env_sensors_get_temperature+0x8a>
	__asm__ volatile(
   1769c:	f04f 0320 	mov.w	r3, #32
   176a0:	f3ef 8711 	mrs	r7, BASEPRI
   176a4:	f383 8811 	msr	BASEPRI, r3
   176a8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   176ac:	481d      	ldr	r0, [pc, #116]	; (17724 <env_sensors_get_temperature+0x90>)
   176ae:	f016 ff0d 	bl	2e4cc <z_spin_lock_valid>
   176b2:	4e1c      	ldr	r6, [pc, #112]	; (17724 <env_sensors_get_temperature+0x90>)
   176b4:	b968      	cbnz	r0, 176d2 <env_sensors_get_temperature+0x3e>
   176b6:	235c      	movs	r3, #92	; 0x5c
   176b8:	4a1b      	ldr	r2, [pc, #108]	; (17728 <env_sensors_get_temperature+0x94>)
   176ba:	491c      	ldr	r1, [pc, #112]	; (1772c <env_sensors_get_temperature+0x98>)
   176bc:	481c      	ldr	r0, [pc, #112]	; (17730 <env_sensors_get_temperature+0x9c>)
   176be:	f01b ff78 	bl	335b2 <printk>
   176c2:	4631      	mov	r1, r6
   176c4:	481b      	ldr	r0, [pc, #108]	; (17734 <env_sensors_get_temperature+0xa0>)
   176c6:	f01b ff74 	bl	335b2 <printk>
   176ca:	215c      	movs	r1, #92	; 0x5c
   176cc:	4816      	ldr	r0, [pc, #88]	; (17728 <env_sensors_get_temperature+0x94>)
   176ce:	f01c fa71 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   176d2:	4814      	ldr	r0, [pc, #80]	; (17724 <env_sensors_get_temperature+0x90>)
   176d4:	f016 ff18 	bl	2e508 <z_spin_lock_set_owner>
   176d8:	4623      	mov	r3, r4
   176da:	4d17      	ldr	r5, [pc, #92]	; (17738 <env_sensors_get_temperature+0xa4>)
   176dc:	462a      	mov	r2, r5
   176de:	ca03      	ldmia	r2!, {r0, r1}
   176e0:	42b2      	cmp	r2, r6
   176e2:	6018      	str	r0, [r3, #0]
   176e4:	6059      	str	r1, [r3, #4]
   176e6:	4615      	mov	r5, r2
   176e8:	f103 0308 	add.w	r3, r3, #8
   176ec:	d1f6      	bne.n	176dc <env_sensors_get_temperature+0x48>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   176ee:	480d      	ldr	r0, [pc, #52]	; (17724 <env_sensors_get_temperature+0x90>)
   176f0:	f016 fefa 	bl	2e4e8 <z_spin_unlock_valid>
   176f4:	b968      	cbnz	r0, 17712 <env_sensors_get_temperature+0x7e>
   176f6:	2384      	movs	r3, #132	; 0x84
   176f8:	4a0b      	ldr	r2, [pc, #44]	; (17728 <env_sensors_get_temperature+0x94>)
   176fa:	4910      	ldr	r1, [pc, #64]	; (1773c <env_sensors_get_temperature+0xa8>)
   176fc:	480c      	ldr	r0, [pc, #48]	; (17730 <env_sensors_get_temperature+0x9c>)
   176fe:	f01b ff58 	bl	335b2 <printk>
   17702:	4908      	ldr	r1, [pc, #32]	; (17724 <env_sensors_get_temperature+0x90>)
   17704:	480e      	ldr	r0, [pc, #56]	; (17740 <env_sensors_get_temperature+0xac>)
   17706:	f01b ff54 	bl	335b2 <printk>
   1770a:	2184      	movs	r1, #132	; 0x84
   1770c:	4806      	ldr	r0, [pc, #24]	; (17728 <env_sensors_get_temperature+0x94>)
   1770e:	f01c fa51 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   17712:	f387 8811 	msr	BASEPRI, r7
   17716:	f3bf 8f6f 	isb	sy
	return 0;
   1771a:	2000      	movs	r0, #0
}
   1771c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -1;
   1771e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17722:	e7fb      	b.n	1771c <env_sensors_get_temperature+0x88>
   17724:	20020918 	.word	0x20020918
   17728:	0003c745 	.word	0x0003c745
   1772c:	0003c76b 	.word	0x0003c76b
   17730:	0003b773 	.word	0x0003b773
   17734:	0003c780 	.word	0x0003c780
   17738:	20020900 	.word	0x20020900
   1773c:	0003c798 	.word	0x0003c798
   17740:	0003c7af 	.word	0x0003c7af

00017744 <env_sensors_get_humidity>:
{
   17744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (sensor_data == NULL) {
   17746:	4604      	mov	r4, r0
   17748:	2800      	cmp	r0, #0
   1774a:	d040      	beq.n	177ce <env_sensors_get_humidity+0x8a>
	__asm__ volatile(
   1774c:	f04f 0320 	mov.w	r3, #32
   17750:	f3ef 8711 	mrs	r7, BASEPRI
   17754:	f383 8811 	msr	BASEPRI, r3
   17758:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1775c:	481d      	ldr	r0, [pc, #116]	; (177d4 <env_sensors_get_humidity+0x90>)
   1775e:	f016 feb5 	bl	2e4cc <z_spin_lock_valid>
   17762:	4e1c      	ldr	r6, [pc, #112]	; (177d4 <env_sensors_get_humidity+0x90>)
   17764:	b968      	cbnz	r0, 17782 <env_sensors_get_humidity+0x3e>
   17766:	235c      	movs	r3, #92	; 0x5c
   17768:	4a1b      	ldr	r2, [pc, #108]	; (177d8 <env_sensors_get_humidity+0x94>)
   1776a:	491c      	ldr	r1, [pc, #112]	; (177dc <env_sensors_get_humidity+0x98>)
   1776c:	481c      	ldr	r0, [pc, #112]	; (177e0 <env_sensors_get_humidity+0x9c>)
   1776e:	f01b ff20 	bl	335b2 <printk>
   17772:	4631      	mov	r1, r6
   17774:	481b      	ldr	r0, [pc, #108]	; (177e4 <env_sensors_get_humidity+0xa0>)
   17776:	f01b ff1c 	bl	335b2 <printk>
   1777a:	215c      	movs	r1, #92	; 0x5c
   1777c:	4816      	ldr	r0, [pc, #88]	; (177d8 <env_sensors_get_humidity+0x94>)
   1777e:	f01c fa19 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   17782:	4814      	ldr	r0, [pc, #80]	; (177d4 <env_sensors_get_humidity+0x90>)
   17784:	f016 fec0 	bl	2e508 <z_spin_lock_set_owner>
   17788:	4623      	mov	r3, r4
   1778a:	4d17      	ldr	r5, [pc, #92]	; (177e8 <env_sensors_get_humidity+0xa4>)
   1778c:	462a      	mov	r2, r5
   1778e:	ca03      	ldmia	r2!, {r0, r1}
   17790:	42b2      	cmp	r2, r6
   17792:	6018      	str	r0, [r3, #0]
   17794:	6059      	str	r1, [r3, #4]
   17796:	4615      	mov	r5, r2
   17798:	f103 0308 	add.w	r3, r3, #8
   1779c:	d1f6      	bne.n	1778c <env_sensors_get_humidity+0x48>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1779e:	480d      	ldr	r0, [pc, #52]	; (177d4 <env_sensors_get_humidity+0x90>)
   177a0:	f016 fea2 	bl	2e4e8 <z_spin_unlock_valid>
   177a4:	b968      	cbnz	r0, 177c2 <env_sensors_get_humidity+0x7e>
   177a6:	2384      	movs	r3, #132	; 0x84
   177a8:	4a0b      	ldr	r2, [pc, #44]	; (177d8 <env_sensors_get_humidity+0x94>)
   177aa:	4910      	ldr	r1, [pc, #64]	; (177ec <env_sensors_get_humidity+0xa8>)
   177ac:	480c      	ldr	r0, [pc, #48]	; (177e0 <env_sensors_get_humidity+0x9c>)
   177ae:	f01b ff00 	bl	335b2 <printk>
   177b2:	4908      	ldr	r1, [pc, #32]	; (177d4 <env_sensors_get_humidity+0x90>)
   177b4:	480e      	ldr	r0, [pc, #56]	; (177f0 <env_sensors_get_humidity+0xac>)
   177b6:	f01b fefc 	bl	335b2 <printk>
   177ba:	2184      	movs	r1, #132	; 0x84
   177bc:	4806      	ldr	r0, [pc, #24]	; (177d8 <env_sensors_get_humidity+0x94>)
   177be:	f01c f9f9 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   177c2:	f387 8811 	msr	BASEPRI, r7
   177c6:	f3bf 8f6f 	isb	sy
	return 0;
   177ca:	2000      	movs	r0, #0
}
   177cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -1;
   177ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   177d2:	e7fb      	b.n	177cc <env_sensors_get_humidity+0x88>
   177d4:	20020038 	.word	0x20020038
   177d8:	0003c745 	.word	0x0003c745
   177dc:	0003c76b 	.word	0x0003c76b
   177e0:	0003b773 	.word	0x0003b773
   177e4:	0003c780 	.word	0x0003c780
   177e8:	20020020 	.word	0x20020020
   177ec:	0003c798 	.word	0x0003c798
   177f0:	0003c7af 	.word	0x0003c7af

000177f4 <env_sensors_get_pressure>:
{
   177f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (sensor_data == NULL) {
   177f6:	4604      	mov	r4, r0
   177f8:	2800      	cmp	r0, #0
   177fa:	d040      	beq.n	1787e <env_sensors_get_pressure+0x8a>
	__asm__ volatile(
   177fc:	f04f 0320 	mov.w	r3, #32
   17800:	f3ef 8711 	mrs	r7, BASEPRI
   17804:	f383 8811 	msr	BASEPRI, r3
   17808:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1780c:	481d      	ldr	r0, [pc, #116]	; (17884 <env_sensors_get_pressure+0x90>)
   1780e:	f016 fe5d 	bl	2e4cc <z_spin_lock_valid>
   17812:	4e1c      	ldr	r6, [pc, #112]	; (17884 <env_sensors_get_pressure+0x90>)
   17814:	b968      	cbnz	r0, 17832 <env_sensors_get_pressure+0x3e>
   17816:	235c      	movs	r3, #92	; 0x5c
   17818:	4a1b      	ldr	r2, [pc, #108]	; (17888 <env_sensors_get_pressure+0x94>)
   1781a:	491c      	ldr	r1, [pc, #112]	; (1788c <env_sensors_get_pressure+0x98>)
   1781c:	481c      	ldr	r0, [pc, #112]	; (17890 <env_sensors_get_pressure+0x9c>)
   1781e:	f01b fec8 	bl	335b2 <printk>
   17822:	4631      	mov	r1, r6
   17824:	481b      	ldr	r0, [pc, #108]	; (17894 <env_sensors_get_pressure+0xa0>)
   17826:	f01b fec4 	bl	335b2 <printk>
   1782a:	215c      	movs	r1, #92	; 0x5c
   1782c:	4816      	ldr	r0, [pc, #88]	; (17888 <env_sensors_get_pressure+0x94>)
   1782e:	f01c f9c1 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   17832:	4814      	ldr	r0, [pc, #80]	; (17884 <env_sensors_get_pressure+0x90>)
   17834:	f016 fe68 	bl	2e508 <z_spin_lock_set_owner>
   17838:	4623      	mov	r3, r4
   1783a:	4d17      	ldr	r5, [pc, #92]	; (17898 <env_sensors_get_pressure+0xa4>)
   1783c:	462a      	mov	r2, r5
   1783e:	ca03      	ldmia	r2!, {r0, r1}
   17840:	42b2      	cmp	r2, r6
   17842:	6018      	str	r0, [r3, #0]
   17844:	6059      	str	r1, [r3, #4]
   17846:	4615      	mov	r5, r2
   17848:	f103 0308 	add.w	r3, r3, #8
   1784c:	d1f6      	bne.n	1783c <env_sensors_get_pressure+0x48>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1784e:	480d      	ldr	r0, [pc, #52]	; (17884 <env_sensors_get_pressure+0x90>)
   17850:	f016 fe4a 	bl	2e4e8 <z_spin_unlock_valid>
   17854:	b968      	cbnz	r0, 17872 <env_sensors_get_pressure+0x7e>
   17856:	2384      	movs	r3, #132	; 0x84
   17858:	4a0b      	ldr	r2, [pc, #44]	; (17888 <env_sensors_get_pressure+0x94>)
   1785a:	4910      	ldr	r1, [pc, #64]	; (1789c <env_sensors_get_pressure+0xa8>)
   1785c:	480c      	ldr	r0, [pc, #48]	; (17890 <env_sensors_get_pressure+0x9c>)
   1785e:	f01b fea8 	bl	335b2 <printk>
   17862:	4908      	ldr	r1, [pc, #32]	; (17884 <env_sensors_get_pressure+0x90>)
   17864:	480e      	ldr	r0, [pc, #56]	; (178a0 <env_sensors_get_pressure+0xac>)
   17866:	f01b fea4 	bl	335b2 <printk>
   1786a:	2184      	movs	r1, #132	; 0x84
   1786c:	4806      	ldr	r0, [pc, #24]	; (17888 <env_sensors_get_pressure+0x94>)
   1786e:	f01c f9a1 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   17872:	f387 8811 	msr	BASEPRI, r7
   17876:	f3bf 8f6f 	isb	sy
	return 0;
   1787a:	2000      	movs	r0, #0
}
   1787c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -1;
   1787e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17882:	e7fb      	b.n	1787c <env_sensors_get_pressure+0x88>
   17884:	20020058 	.word	0x20020058
   17888:	0003c745 	.word	0x0003c745
   1788c:	0003c76b 	.word	0x0003c76b
   17890:	0003b773 	.word	0x0003b773
   17894:	0003c780 	.word	0x0003c780
   17898:	20020040 	.word	0x20020040
   1789c:	0003c798 	.word	0x0003c798
   178a0:	0003c7af 	.word	0x0003c7af

000178a4 <env_sensors_get_air_quality>:
{
   178a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (sensor_data == NULL) {
   178a6:	4604      	mov	r4, r0
   178a8:	2800      	cmp	r0, #0
   178aa:	d040      	beq.n	1792e <env_sensors_get_air_quality+0x8a>
	__asm__ volatile(
   178ac:	f04f 0320 	mov.w	r3, #32
   178b0:	f3ef 8711 	mrs	r7, BASEPRI
   178b4:	f383 8811 	msr	BASEPRI, r3
   178b8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   178bc:	481d      	ldr	r0, [pc, #116]	; (17934 <env_sensors_get_air_quality+0x90>)
   178be:	f016 fe05 	bl	2e4cc <z_spin_lock_valid>
   178c2:	4e1c      	ldr	r6, [pc, #112]	; (17934 <env_sensors_get_air_quality+0x90>)
   178c4:	b968      	cbnz	r0, 178e2 <env_sensors_get_air_quality+0x3e>
   178c6:	235c      	movs	r3, #92	; 0x5c
   178c8:	4a1b      	ldr	r2, [pc, #108]	; (17938 <env_sensors_get_air_quality+0x94>)
   178ca:	491c      	ldr	r1, [pc, #112]	; (1793c <env_sensors_get_air_quality+0x98>)
   178cc:	481c      	ldr	r0, [pc, #112]	; (17940 <env_sensors_get_air_quality+0x9c>)
   178ce:	f01b fe70 	bl	335b2 <printk>
   178d2:	4631      	mov	r1, r6
   178d4:	481b      	ldr	r0, [pc, #108]	; (17944 <env_sensors_get_air_quality+0xa0>)
   178d6:	f01b fe6c 	bl	335b2 <printk>
   178da:	215c      	movs	r1, #92	; 0x5c
   178dc:	4816      	ldr	r0, [pc, #88]	; (17938 <env_sensors_get_air_quality+0x94>)
   178de:	f01c f969 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   178e2:	4814      	ldr	r0, [pc, #80]	; (17934 <env_sensors_get_air_quality+0x90>)
   178e4:	f016 fe10 	bl	2e508 <z_spin_lock_set_owner>
   178e8:	4623      	mov	r3, r4
   178ea:	4d17      	ldr	r5, [pc, #92]	; (17948 <env_sensors_get_air_quality+0xa4>)
   178ec:	462a      	mov	r2, r5
   178ee:	ca03      	ldmia	r2!, {r0, r1}
   178f0:	42b2      	cmp	r2, r6
   178f2:	6018      	str	r0, [r3, #0]
   178f4:	6059      	str	r1, [r3, #4]
   178f6:	4615      	mov	r5, r2
   178f8:	f103 0308 	add.w	r3, r3, #8
   178fc:	d1f6      	bne.n	178ec <env_sensors_get_air_quality+0x48>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   178fe:	480d      	ldr	r0, [pc, #52]	; (17934 <env_sensors_get_air_quality+0x90>)
   17900:	f016 fdf2 	bl	2e4e8 <z_spin_unlock_valid>
   17904:	b968      	cbnz	r0, 17922 <env_sensors_get_air_quality+0x7e>
   17906:	2384      	movs	r3, #132	; 0x84
   17908:	4a0b      	ldr	r2, [pc, #44]	; (17938 <env_sensors_get_air_quality+0x94>)
   1790a:	4910      	ldr	r1, [pc, #64]	; (1794c <env_sensors_get_air_quality+0xa8>)
   1790c:	480c      	ldr	r0, [pc, #48]	; (17940 <env_sensors_get_air_quality+0x9c>)
   1790e:	f01b fe50 	bl	335b2 <printk>
   17912:	4908      	ldr	r1, [pc, #32]	; (17934 <env_sensors_get_air_quality+0x90>)
   17914:	480e      	ldr	r0, [pc, #56]	; (17950 <env_sensors_get_air_quality+0xac>)
   17916:	f01b fe4c 	bl	335b2 <printk>
   1791a:	2184      	movs	r1, #132	; 0x84
   1791c:	4806      	ldr	r0, [pc, #24]	; (17938 <env_sensors_get_air_quality+0x94>)
   1791e:	f01c f949 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   17922:	f387 8811 	msr	BASEPRI, r7
   17926:	f3bf 8f6f 	isb	sy
	return 0;
   1792a:	2000      	movs	r0, #0
}
   1792c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -1;
   1792e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17932:	e7fb      	b.n	1792c <env_sensors_get_air_quality+0x88>
   17934:	20020018 	.word	0x20020018
   17938:	0003c745 	.word	0x0003c745
   1793c:	0003c76b 	.word	0x0003c76b
   17940:	0003b773 	.word	0x0003b773
   17944:	0003c780 	.word	0x0003c780
   17948:	20020000 	.word	0x20020000
   1794c:	0003c798 	.word	0x0003c798
   17950:	0003c7af 	.word	0x0003c7af

00017954 <env_sensors_init_and_start>:

int env_sensors_init_and_start(struct k_work_q *work_q,
			       const env_sensors_data_ready_cb cb)
{
   17954:	b5f0      	push	{r4, r5, r6, r7, lr}
   17956:	460f      	mov	r7, r1
   17958:	b08d      	sub	sp, #52	; 0x34
	
	return_values_init bsec_ret;
	int ret;

	if ((work_q == NULL) || (cb == NULL)) {
   1795a:	4606      	mov	r6, r0
   1795c:	b100      	cbz	r0, 17960 <env_sensors_init_and_start+0xc>
   1795e:	b999      	cbnz	r1, 17988 <env_sensors_init_and_start+0x34>
		LOG_DBG("EINVAL");
   17960:	2304      	movs	r3, #4
   17962:	f04f 0000 	mov.w	r0, #0
   17966:	4a5c      	ldr	r2, [pc, #368]	; (17ad8 <env_sensors_init_and_start+0x184>)
   17968:	f363 0007 	bfi	r0, r3, #0, #8
   1796c:	4b5b      	ldr	r3, [pc, #364]	; (17adc <env_sensors_init_and_start+0x188>)
   1796e:	495c      	ldr	r1, [pc, #368]	; (17ae0 <env_sensors_init_and_start+0x18c>)
   17970:	1a9b      	subs	r3, r3, r2
   17972:	08db      	lsrs	r3, r3, #3
   17974:	f363 108f 	bfi	r0, r3, #6, #10
   17978:	4a5a      	ldr	r2, [pc, #360]	; (17ae4 <env_sensors_init_and_start+0x190>)
   1797a:	f01c f932 	bl	33be2 <log_string_sync>
	}

	i2c_master = device_get_binding("I2C_2");
	if (!i2c_master) {
		LOG_ERR("cannot bind to BME680");
		return -EINVAL;
   1797e:	f06f 0415 	mvn.w	r4, #21

	initialized = true;

	return (data_send_interval_s > 0) ?
		submit_poll_work(ENV_INIT_DELAY_S) : 0;
}
   17982:	4620      	mov	r0, r4
   17984:	b00d      	add	sp, #52	; 0x34
   17986:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   17988:	4857      	ldr	r0, [pc, #348]	; (17ae8 <env_sensors_init_and_start+0x194>)
   1798a:	f013 ff39 	bl	2b800 <z_impl_device_get_binding>
	i2c_master = device_get_binding("I2C_2");
   1798e:	4b57      	ldr	r3, [pc, #348]	; (17aec <env_sensors_init_and_start+0x198>)
   17990:	6018      	str	r0, [r3, #0]
	if (!i2c_master) {
   17992:	b960      	cbnz	r0, 179ae <env_sensors_init_and_start+0x5a>
		LOG_ERR("cannot bind to BME680");
   17994:	2301      	movs	r3, #1
   17996:	4a50      	ldr	r2, [pc, #320]	; (17ad8 <env_sensors_init_and_start+0x184>)
   17998:	f363 0007 	bfi	r0, r3, #0, #8
   1799c:	4b4f      	ldr	r3, [pc, #316]	; (17adc <env_sensors_init_and_start+0x188>)
   1799e:	4954      	ldr	r1, [pc, #336]	; (17af0 <env_sensors_init_and_start+0x19c>)
   179a0:	1a9b      	subs	r3, r3, r2
   179a2:	08db      	lsrs	r3, r3, #3
   179a4:	f363 108f 	bfi	r0, r3, #6, #10
   179a8:	f01c f91b 	bl	33be2 <log_string_sync>
   179ac:	e7e7      	b.n	1797e <env_sensors_init_and_start+0x2a>
	settings_subsys_init();
   179ae:	f002 fa5b 	bl	19e68 <settings_subsys_init>
	struct settings_handler my_conf = {
   179b2:	2214      	movs	r2, #20
   179b4:	2100      	movs	r1, #0
   179b6:	a807      	add	r0, sp, #28
   179b8:	f021 fb3d 	bl	39036 <memset>
   179bc:	4b4d      	ldr	r3, [pc, #308]	; (17af4 <env_sensors_init_and_start+0x1a0>)
	err = settings_register(&my_conf);
   179be:	a806      	add	r0, sp, #24
	struct settings_handler my_conf = {
   179c0:	9306      	str	r3, [sp, #24]
   179c2:	4b4d      	ldr	r3, [pc, #308]	; (17af8 <env_sensors_init_and_start+0x1a4>)
   179c4:	9308      	str	r3, [sp, #32]
	err = settings_register(&my_conf);
   179c6:	f002 f9a1 	bl	19d0c <settings_register>
	if (err) {
   179ca:	4604      	mov	r4, r0
   179cc:	b1e8      	cbz	r0, 17a0a <env_sensors_init_and_start+0xb6>
		LOG_ERR("Cannot register settings handler");
   179ce:	2301      	movs	r3, #1
   179d0:	f04f 0000 	mov.w	r0, #0
   179d4:	4a40      	ldr	r2, [pc, #256]	; (17ad8 <env_sensors_init_and_start+0x184>)
   179d6:	f363 0007 	bfi	r0, r3, #0, #8
   179da:	4b40      	ldr	r3, [pc, #256]	; (17adc <env_sensors_init_and_start+0x188>)
   179dc:	4947      	ldr	r1, [pc, #284]	; (17afc <env_sensors_init_and_start+0x1a8>)
   179de:	1a9b      	subs	r3, r3, r2
   179e0:	08db      	lsrs	r3, r3, #3
   179e2:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("Cannot load settings");
   179e6:	f01c f8fc 	bl	33be2 <log_string_sync>
		LOG_ERR("Cannot enable settings err: %d", ret);
   179ea:	2301      	movs	r3, #1
   179ec:	f04f 0000 	mov.w	r0, #0
   179f0:	4a39      	ldr	r2, [pc, #228]	; (17ad8 <env_sensors_init_and_start+0x184>)
   179f2:	f363 0007 	bfi	r0, r3, #0, #8
   179f6:	4b39      	ldr	r3, [pc, #228]	; (17adc <env_sensors_init_and_start+0x188>)
   179f8:	4941      	ldr	r1, [pc, #260]	; (17b00 <env_sensors_init_and_start+0x1ac>)
   179fa:	1a9b      	subs	r3, r3, r2
   179fc:	08db      	lsrs	r3, r3, #3
   179fe:	f363 108f 	bfi	r0, r3, #6, #10
   17a02:	4622      	mov	r2, r4
   17a04:	f01c f8ed 	bl	33be2 <log_string_sync>
		return ret;
   17a08:	e7bb      	b.n	17982 <env_sensors_init_and_start+0x2e>
	err = settings_load();
   17a0a:	f01c fb6c 	bl	340e6 <settings_load>
	if (err) {
   17a0e:	4604      	mov	r4, r0
   17a10:	2800      	cmp	r0, #0
   17a12:	d03f      	beq.n	17a94 <env_sensors_init_and_start+0x140>
		LOG_ERR("Cannot load settings");
   17a14:	2301      	movs	r3, #1
   17a16:	f04f 0000 	mov.w	r0, #0
   17a1a:	4a2f      	ldr	r2, [pc, #188]	; (17ad8 <env_sensors_init_and_start+0x184>)
   17a1c:	f363 0007 	bfi	r0, r3, #0, #8
   17a20:	4b2e      	ldr	r3, [pc, #184]	; (17adc <env_sensors_init_and_start+0x188>)
   17a22:	4938      	ldr	r1, [pc, #224]	; (17b04 <env_sensors_init_and_start+0x1b0>)
   17a24:	1a9b      	subs	r3, r3, r2
   17a26:	08db      	lsrs	r3, r3, #3
   17a28:	f363 108f 	bfi	r0, r3, #6, #10
   17a2c:	e7db      	b.n	179e6 <env_sensors_init_and_start+0x92>
	bsec_ret = bsec_iot_init(BSEC_SAMPLE_RATE, 1.2f, bus_write,
   17a2e:	f99d 5019 	ldrsb.w	r5, [sp, #25]
	} else if (bsec_ret.bsec_status) {
   17a32:	b165      	cbz	r5, 17a4e <env_sensors_init_and_start+0xfa>
		LOG_ERR("Could not initialize BSEC library");
   17a34:	2301      	movs	r3, #1
   17a36:	f04f 0000 	mov.w	r0, #0
   17a3a:	4a27      	ldr	r2, [pc, #156]	; (17ad8 <env_sensors_init_and_start+0x184>)
   17a3c:	f363 0007 	bfi	r0, r3, #0, #8
   17a40:	4b26      	ldr	r3, [pc, #152]	; (17adc <env_sensors_init_and_start+0x188>)
   17a42:	4931      	ldr	r1, [pc, #196]	; (17b08 <env_sensors_init_and_start+0x1b4>)
   17a44:	1a9b      	subs	r3, r3, r2
   17a46:	08db      	lsrs	r3, r3, #3
   17a48:	f363 108f 	bfi	r0, r3, #6, #10
   17a4c:	e03f      	b.n	17ace <env_sensors_init_and_start+0x17a>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   17a4e:	2307      	movs	r3, #7
   17a50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   17a54:	e9cd 4302 	strd	r4, r3, [sp, #8]
   17a58:	492c      	ldr	r1, [pc, #176]	; (17b0c <env_sensors_init_and_start+0x1b8>)
   17a5a:	4b2d      	ldr	r3, [pc, #180]	; (17b10 <env_sensors_init_and_start+0x1bc>)
   17a5c:	e9cd 4404 	strd	r4, r4, [sp, #16]
   17a60:	e9cd 4400 	strd	r4, r4, [sp]
   17a64:	482b      	ldr	r0, [pc, #172]	; (17b14 <env_sensors_init_and_start+0x1c0>)
   17a66:	f016 fc53 	bl	2e310 <z_impl_k_thread_create>
	data_ready_cb = cb;
   17a6a:	4b2b      	ldr	r3, [pc, #172]	; (17b18 <env_sensors_init_and_start+0x1c4>)
	k_delayed_work_init(&env_sensors_poller, env_sensors_poll_fn);
   17a6c:	492b      	ldr	r1, [pc, #172]	; (17b1c <env_sensors_init_and_start+0x1c8>)
	data_ready_cb = cb;
   17a6e:	601f      	str	r7, [r3, #0]
	env_sensors_work_q = work_q;
   17a70:	4b2b      	ldr	r3, [pc, #172]	; (17b20 <env_sensors_init_and_start+0x1cc>)
	k_delayed_work_init(&env_sensors_poller, env_sensors_poll_fn);
   17a72:	482c      	ldr	r0, [pc, #176]	; (17b24 <env_sensors_init_and_start+0x1d0>)
	env_sensors_work_q = work_q;
   17a74:	601e      	str	r6, [r3, #0]
	k_delayed_work_init(&env_sensors_poller, env_sensors_poll_fn);
   17a76:	f021 f9ca 	bl	38e0e <k_delayed_work_init>
	initialized = true;
   17a7a:	2201      	movs	r2, #1
   17a7c:	4b2a      	ldr	r3, [pc, #168]	; (17b28 <env_sensors_init_and_start+0x1d4>)
   17a7e:	701a      	strb	r2, [r3, #0]
	return (data_send_interval_s > 0) ?
   17a80:	4b2a      	ldr	r3, [pc, #168]	; (17b2c <env_sensors_init_and_start+0x1d8>)
		submit_poll_work(ENV_INIT_DELAY_S) : 0;
   17a82:	681b      	ldr	r3, [r3, #0]
   17a84:	2b00      	cmp	r3, #0
   17a86:	f43f af7c 	beq.w	17982 <env_sensors_init_and_start+0x2e>
   17a8a:	2005      	movs	r0, #5
   17a8c:	f7ff fb40 	bl	17110 <submit_poll_work>
   17a90:	4604      	mov	r4, r0
   17a92:	e776      	b.n	17982 <env_sensors_init_and_start+0x2e>
	bsec_ret = bsec_iot_init(BSEC_SAMPLE_RATE, 1.2f, bus_write,
   17a94:	4b26      	ldr	r3, [pc, #152]	; (17b30 <env_sensors_init_and_start+0x1dc>)
   17a96:	4a27      	ldr	r2, [pc, #156]	; (17b34 <env_sensors_init_and_start+0x1e0>)
   17a98:	9300      	str	r3, [sp, #0]
   17a9a:	4927      	ldr	r1, [pc, #156]	; (17b38 <env_sensors_init_and_start+0x1e4>)
   17a9c:	4b27      	ldr	r3, [pc, #156]	; (17b3c <env_sensors_init_and_start+0x1e8>)
   17a9e:	4828      	ldr	r0, [pc, #160]	; (17b40 <env_sensors_init_and_start+0x1ec>)
   17aa0:	eddf 0a28 	vldr	s1, [pc, #160]	; 17b44 <env_sensors_init_and_start+0x1f0>
   17aa4:	ed9f 0a28 	vldr	s0, [pc, #160]	; 17b48 <env_sensors_init_and_start+0x1f4>
   17aa8:	f000 f852 	bl	17b50 <bsec_iot_init>
   17aac:	b245      	sxtb	r5, r0
   17aae:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (bsec_ret.bme680_status) {
   17ab2:	2d00      	cmp	r5, #0
   17ab4:	d0bb      	beq.n	17a2e <env_sensors_init_and_start+0xda>
		LOG_ERR("Could not initialize BME680");
   17ab6:	2301      	movs	r3, #1
   17ab8:	f04f 0000 	mov.w	r0, #0
   17abc:	4a06      	ldr	r2, [pc, #24]	; (17ad8 <env_sensors_init_and_start+0x184>)
   17abe:	f363 0007 	bfi	r0, r3, #0, #8
   17ac2:	4b06      	ldr	r3, [pc, #24]	; (17adc <env_sensors_init_and_start+0x188>)
   17ac4:	4921      	ldr	r1, [pc, #132]	; (17b4c <env_sensors_init_and_start+0x1f8>)
   17ac6:	1a9b      	subs	r3, r3, r2
   17ac8:	08db      	lsrs	r3, r3, #3
   17aca:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("Could not initialize BSEC library");
   17ace:	f01c f888 	bl	33be2 <log_string_sync>
		return (int)bsec_ret.bsec_status;
   17ad2:	462c      	mov	r4, r5
   17ad4:	e755      	b.n	17982 <env_sensors_init_and_start+0x2e>
   17ad6:	bf00      	nop
   17ad8:	00039f48 	.word	0x00039f48
   17adc:	00039f68 	.word	0x00039f68
   17ae0:	0003c56e 	.word	0x0003c56e
   17ae4:	0003c553 	.word	0x0003c553
   17ae8:	0003c579 	.word	0x0003c579
   17aec:	20021560 	.word	0x20021560
   17af0:	0003c57f 	.word	0x0003c57f
   17af4:	0003c595 	.word	0x0003c595
   17af8:	00017165 	.word	0x00017165
   17afc:	0003c59a 	.word	0x0003c59a
   17b00:	0003c60e 	.word	0x0003c60e
   17b04:	0003c5bb 	.word	0x0003c5bb
   17b08:	0003c5ec 	.word	0x0003c5ec
   17b0c:	20030608 	.word	0x20030608
   17b10:	00017129 	.word	0x00017129
   17b14:	2002156c 	.word	0x2002156c
   17b18:	20021538 	.word	0x20021538
   17b1c:	000171cd 	.word	0x000171cd
   17b20:	2002155c 	.word	0x2002155c
   17b24:	2002153c 	.word	0x2002153c
   17b28:	20027f27 	.word	0x20027f27
   17b2c:	20020088 	.word	0x20020088
   17b30:	00032e0b 	.word	0x00032e0b
   17b34:	00032e37 	.word	0x00032e37
   17b38:	00017201 	.word	0x00017201
   17b3c:	000171a5 	.word	0x000171a5
   17b40:	00017645 	.word	0x00017645
   17b44:	3f99999a 	.word	0x3f99999a
   17b48:	3eaaaa3b 	.word	0x3eaaaa3b
   17b4c:	0003c5d0 	.word	0x0003c5d0

00017b50 <bsec_iot_init>:
 *
 * @return      zero if successful, negative otherwise
 */
return_values_init bsec_iot_init(float sample_rate, float temperature_offset, bme680_com_fptr_t bus_write, 
                    bme680_com_fptr_t bus_read, sleep_fct sleep, state_load_fct state_load, config_load_fct config_load)
{
   17b50:	b5f0      	push	{r4, r5, r6, r7, lr}
   17b52:	ed2d 8b02 	vpush	{d8}
   17b56:	f2ad 5de4 	subw	sp, sp, #1508	; 0x5e4
   17b5a:	460d      	mov	r5, r1
   17b5c:	4607      	mov	r7, r0
   17b5e:	4614      	mov	r4, r2
    return_values_init ret = {BME680_OK, BSEC_OK};
    bsec_library_return_t bsec_status = BSEC_OK;
    
    uint8_t bsec_state[BSEC_MAX_PROPERTY_BLOB_SIZE] = {0};
   17b60:	2100      	movs	r1, #0
   17b62:	f44f 72e3 	mov.w	r2, #454	; 0x1c6
   17b66:	a822      	add	r0, sp, #136	; 0x88
{
   17b68:	eeb0 8a40 	vmov.f32	s16, s0
   17b6c:	eef0 8a60 	vmov.f32	s17, s1
   17b70:	461e      	mov	r6, r3
    uint8_t bsec_state[BSEC_MAX_PROPERTY_BLOB_SIZE] = {0};
   17b72:	f021 fa60 	bl	39036 <memset>
    uint8_t bsec_config[BSEC_MAX_PROPERTY_BLOB_SIZE] = {0};
   17b76:	f44f 72e3 	mov.w	r2, #454	; 0x1c6
   17b7a:	2100      	movs	r1, #0
   17b7c:	a894      	add	r0, sp, #592	; 0x250
   17b7e:	f021 fa5a 	bl	39036 <memset>
    uint8_t work_buffer[BSEC_MAX_PROPERTY_BLOB_SIZE] = {0};
   17b82:	f44f 72e3 	mov.w	r2, #454	; 0x1c6
   17b86:	2100      	movs	r1, #0
   17b88:	f50d 6083 	add.w	r0, sp, #1048	; 0x418
   17b8c:	f021 fa53 	bl	39036 <memset>
    int bsec_state_len, bsec_config_len;
    
    /* Fixed I2C configuration */
    bme680_g.dev_id = BME680_I2C_ADDR_PRIMARY;
   17b90:	2376      	movs	r3, #118	; 0x76
   17b92:	4843      	ldr	r0, [pc, #268]	; (17ca0 <bsec_iot_init+0x150>)
   17b94:	7043      	strb	r3, [r0, #1]
    bme680_g.intf = BME680_I2C_INTF;
   17b96:	2301      	movs	r3, #1
    /* User configurable I2C configuration */
    bme680_g.write = bus_write;
    bme680_g.read = bus_read;
   17b98:	e9c0 5712 	strd	r5, r7, [r0, #72]	; 0x48
    bme680_g.intf = BME680_I2C_INTF;
   17b9c:	7083      	strb	r3, [r0, #2]
    bme680_g.delay_ms = sleep;
   17b9e:	6504      	str	r4, [r0, #80]	; 0x50
    
    /* Initialize BME680 API */
    ret.bme680_status = bme680_init(&bme680_g);
   17ba0:	f01b fa4a 	bl	33038 <bme680_init>
    if (ret.bme680_status != BME680_OK)
   17ba4:	4605      	mov	r5, r0
   17ba6:	b190      	cbz	r0, 17bce <bsec_iot_init+0x7e>
    {
        return ret;
   17ba8:	2300      	movs	r3, #0
   17baa:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
   17bae:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   17bb2:	2000      	movs	r0, #0
   17bb4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   17bb8:	f363 0007 	bfi	r0, r3, #0, #8
   17bbc:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   17bc0:	f363 200f 	bfi	r0, r3, #8, #8
    {
        return ret;
    }
    
    return ret;
}
   17bc4:	f20d 5de4 	addw	sp, sp, #1508	; 0x5e4
   17bc8:	ecbd 8b02 	vpop	{d8}
   17bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret.bsec_status = bsec_init();
   17bce:	f7f5 ff57 	bl	da80 <bsec_init>
    if (ret.bsec_status != BSEC_OK)
   17bd2:	4604      	mov	r4, r0
   17bd4:	b120      	cbz	r0, 17be0 <bsec_iot_init+0x90>
        return ret;
   17bd6:	f88d 5048 	strb.w	r5, [sp, #72]	; 0x48
   17bda:	f88d 0049 	strb.w	r0, [sp, #73]	; 0x49
   17bde:	e7e8      	b.n	17bb2 <bsec_iot_init+0x62>
    bsec_config_len = config_load(bsec_config, sizeof(bsec_config));
   17be0:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
   17be4:	a894      	add	r0, sp, #592	; 0x250
   17be6:	f8dd 3600 	ldr.w	r3, [sp, #1536]	; 0x600
   17bea:	4798      	blx	r3
    if (bsec_config_len != 0)
   17bec:	4601      	mov	r1, r0
   17bee:	b160      	cbz	r0, 17c0a <bsec_iot_init+0xba>
        ret.bsec_status = bsec_set_configuration(bsec_config, bsec_config_len, work_buffer, sizeof(work_buffer));     
   17bf0:	f44f 73e3 	mov.w	r3, #454	; 0x1c6
   17bf4:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
   17bf8:	a894      	add	r0, sp, #592	; 0x250
   17bfa:	f7f5 ff73 	bl	dae4 <bsec_set_configuration>
        if (ret.bsec_status != BSEC_OK)
   17bfe:	b120      	cbz	r0, 17c0a <bsec_iot_init+0xba>
            return ret;
   17c00:	f88d 4048 	strb.w	r4, [sp, #72]	; 0x48
            return ret;
   17c04:	f88d 0049 	strb.w	r0, [sp, #73]	; 0x49
   17c08:	e7d3      	b.n	17bb2 <bsec_iot_init+0x62>
    bsec_state_len = state_load(bsec_state, sizeof(bsec_state));
   17c0a:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
   17c0e:	a822      	add	r0, sp, #136	; 0x88
   17c10:	47b0      	blx	r6
    if (bsec_state_len != 0)
   17c12:	4601      	mov	r1, r0
   17c14:	b158      	cbz	r0, 17c2e <bsec_iot_init+0xde>
        ret.bsec_status = bsec_set_state(bsec_state, bsec_state_len, work_buffer, sizeof(work_buffer));     
   17c16:	f44f 73e3 	mov.w	r3, #454	; 0x1c6
   17c1a:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
   17c1e:	a822      	add	r0, sp, #136	; 0x88
   17c20:	f7f5 ff6e 	bl	db00 <bsec_set_state>
        if (ret.bsec_status != BSEC_OK)
   17c24:	b118      	cbz	r0, 17c2e <bsec_iot_init+0xde>
            return ret;
   17c26:	2300      	movs	r3, #0
   17c28:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   17c2c:	e7ea      	b.n	17c04 <bsec_iot_init+0xb4>
    bme680_temperature_offset_g = temperature_offset;
   17c2e:	4b1d      	ldr	r3, [pc, #116]	; (17ca4 <bsec_iot_init+0x154>)
    uint8_t n_required_sensor_settings = BSEC_MAX_PHYSICAL_SENSOR;
   17c30:	2108      	movs	r1, #8
    bme680_temperature_offset_g = temperature_offset;
   17c32:	edc3 8a00 	vstr	s17, [r3]
    requested_virtual_sensors[0].sensor_id = BSEC_OUTPUT_IAQ;
   17c36:	2301      	movs	r3, #1
   17c38:	f88d 300c 	strb.w	r3, [sp, #12]
    requested_virtual_sensors[1].sensor_id = BSEC_OUTPUT_SENSOR_HEAT_COMPENSATED_TEMPERATURE;
   17c3c:	230e      	movs	r3, #14
   17c3e:	f88d 3014 	strb.w	r3, [sp, #20]
    requested_virtual_sensors[2].sensor_id = BSEC_OUTPUT_RAW_PRESSURE;
   17c42:	2307      	movs	r3, #7
   17c44:	f88d 301c 	strb.w	r3, [sp, #28]
    requested_virtual_sensors[3].sensor_id = BSEC_OUTPUT_SENSOR_HEAT_COMPENSATED_HUMIDITY;
   17c48:	230f      	movs	r3, #15
   17c4a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    requested_virtual_sensors[4].sensor_id = BSEC_OUTPUT_RAW_GAS;
   17c4e:	2309      	movs	r3, #9
   17c50:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    requested_virtual_sensors[5].sensor_id = BSEC_OUTPUT_RAW_TEMPERATURE;
   17c54:	2306      	movs	r3, #6
   17c56:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    requested_virtual_sensors[7].sensor_id = BSEC_OUTPUT_STATIC_IAQ;
   17c5a:	2302      	movs	r3, #2
    status = bsec_update_subscription(requested_virtual_sensors, n_requested_virtual_sensors, required_sensor_settings,
   17c5c:	aa12      	add	r2, sp, #72	; 0x48
    requested_virtual_sensors[7].sensor_id = BSEC_OUTPUT_STATIC_IAQ;
   17c5e:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    status = bsec_update_subscription(requested_virtual_sensors, n_requested_virtual_sensors, required_sensor_settings,
   17c62:	eb0d 0001 	add.w	r0, sp, r1
   17c66:	f10d 0307 	add.w	r3, sp, #7
    uint8_t n_required_sensor_settings = BSEC_MAX_PHYSICAL_SENSOR;
   17c6a:	f88d 1007 	strb.w	r1, [sp, #7]
    requested_virtual_sensors[0].sample_rate = sample_rate;
   17c6e:	ed8d 8a02 	vstr	s16, [sp, #8]
    requested_virtual_sensors[1].sample_rate = sample_rate;
   17c72:	ed8d 8a04 	vstr	s16, [sp, #16]
    requested_virtual_sensors[2].sample_rate = sample_rate;
   17c76:	ed8d 8a06 	vstr	s16, [sp, #24]
    requested_virtual_sensors[3].sample_rate = sample_rate;
   17c7a:	ed8d 8a08 	vstr	s16, [sp, #32]
    requested_virtual_sensors[4].sample_rate = sample_rate;
   17c7e:	ed8d 8a0a 	vstr	s16, [sp, #40]	; 0x28
    requested_virtual_sensors[5].sample_rate = sample_rate;
   17c82:	ed8d 8a0c 	vstr	s16, [sp, #48]	; 0x30
    requested_virtual_sensors[6].sensor_id = BSEC_OUTPUT_RAW_HUMIDITY;
   17c86:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
    requested_virtual_sensors[6].sample_rate = sample_rate;
   17c8a:	ed8d 8a0e 	vstr	s16, [sp, #56]	; 0x38
    requested_virtual_sensors[7].sample_rate = sample_rate;
   17c8e:	ed8d 8a10 	vstr	s16, [sp, #64]	; 0x40
    status = bsec_update_subscription(requested_virtual_sensors, n_requested_virtual_sensors, required_sensor_settings,
   17c92:	f7f5 ff03 	bl	da9c <bsec_update_subscription>
    if (ret.bsec_status != BSEC_OK)
   17c96:	2800      	cmp	r0, #0
   17c98:	d1c5      	bne.n	17c26 <bsec_iot_init+0xd6>
    return ret;
   17c9a:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
   17c9e:	e788      	b.n	17bb2 <bsec_iot_init+0x62>
   17ca0:	20021624 	.word	0x20021624
   17ca4:	2002167c 	.word	0x2002167c

00017ca8 <bsec_iot_loop>:
 *
 * @return      none
 */
void bsec_iot_loop(sleep_fct sleep, get_timestamp_us_fct get_timestamp_us, output_ready_fct output_ready,
                    state_save_fct state_save, uint32_t save_intvl)
{
   17ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17cac:	ed2d 8b02 	vpush	{d8}
    bsec_bme_settings_t sensor_settings;
    
    /* Save state variables */
    uint8_t bsec_state[BSEC_MAX_STATE_BLOB_SIZE];
    uint8_t work_buffer[BSEC_MAX_STATE_BLOB_SIZE];
    uint32_t bsec_state_len = 0;
   17cb0:	2500      	movs	r5, #0
{
   17cb2:	4680      	mov	r8, r0
   17cb4:	4689      	mov	r9, r1
   17cb6:	4692      	mov	sl, r2
   17cb8:	469b      	mov	fp, r3
    float breath_voc_equivalent = 0.0f;
   17cba:	ed9f 8aa6 	vldr	s16, [pc, #664]	; 17f54 <bsec_iot_loop+0x2ac>
{
   17cbe:	f5ad 7d2d 	sub.w	sp, sp, #692	; 0x2b4
   17cc2:	4ca5      	ldr	r4, [pc, #660]	; (17f58 <bsec_iot_loop+0x2b0>)
    uint32_t bsec_state_len = 0;
   17cc4:	9507      	str	r5, [sp, #28]
    bsec_library_return_t bsec_status = BSEC_OK;

    while (1)
    {
        /* get the timestamp in nanoseconds before calling bsec_sensor_control() */
        time_stamp = get_timestamp_us() * 1000;
   17cc6:	47c8      	blx	r9
   17cc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   17ccc:	fba0 6703 	umull	r6, r7, r0, r3
   17cd0:	fb03 7701 	mla	r7, r3, r1, r7
        
        /* Retrieve sensor settings to be used in this time instant by calling bsec_sensor_control */
        bsec_sensor_control(time_stamp, &sensor_settings);
   17cd4:	aa08      	add	r2, sp, #32
   17cd6:	4630      	mov	r0, r6
   17cd8:	4639      	mov	r1, r7
   17cda:	f7f5 ff53 	bl	db84 <bsec_sensor_control>
    if (sensor_settings->trigger_measurement)
   17cde:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   17ce2:	b1f3      	cbz	r3, 17d22 <bsec_iot_loop+0x7a>
        bme680_g.tph_sett.os_pres = sensor_settings->pressure_oversampling;
   17ce4:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
        bme680_status = bme680_set_sensor_settings(set_required_settings, &bme680_g);
   17ce8:	4621      	mov	r1, r4
        bme680_g.tph_sett.os_pres = sensor_settings->pressure_oversampling;
   17cea:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        bme680_g.tph_sett.os_hum  = sensor_settings->humidity_oversampling;
   17cee:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
        bme680_status = bme680_set_sensor_settings(set_required_settings, &bme680_g);
   17cf2:	20cf      	movs	r0, #207	; 0xcf
        bme680_g.tph_sett.os_hum  = sensor_settings->humidity_oversampling;
   17cf4:	ba5b      	rev16	r3, r3
   17cf6:	8723      	strh	r3, [r4, #56]	; 0x38
        bme680_g.gas_sett.run_gas = sensor_settings->run_gas;
   17cf8:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   17cfc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        bme680_g.gas_sett.heatr_temp = sensor_settings->heater_temperature; /* degree Celsius */
   17d00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17d02:	6423      	str	r3, [r4, #64]	; 0x40
        bme680_g.power_mode = BME680_FORCED_MODE;
   17d04:	2301      	movs	r3, #1
   17d06:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        bme680_status = bme680_set_sensor_settings(set_required_settings, &bme680_g);
   17d0a:	f000 f935 	bl	17f78 <bme680_set_sensor_settings>
        bme680_status = bme680_set_sensor_mode(&bme680_g);
   17d0e:	4620      	mov	r0, r4
   17d10:	f01b fa69 	bl	331e6 <bme680_set_sensor_mode>
        bme680_get_profile_dur(&meas_period, &bme680_g);
   17d14:	a874      	add	r0, sp, #464	; 0x1d0
   17d16:	4621      	mov	r1, r4
   17d18:	f000 faac 	bl	18274 <bme680_get_profile_dur>
        sleep((uint32_t)meas_period);
   17d1c:	f8bd 01d0 	ldrh.w	r0, [sp, #464]	; 0x1d0
        sleep(5);
   17d20:	47c0      	blx	r8
        bme680_status = bme680_get_sensor_mode(&bme680_g);
   17d22:	4620      	mov	r0, r4
   17d24:	f01b fa9e 	bl	33264 <bme680_get_sensor_mode>
    while (bme680_g.power_mode == BME680_FORCED_MODE)
   17d28:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   17d2c:	2b01      	cmp	r3, #1
   17d2e:	f000 80a4 	beq.w	17e7a <bsec_iot_loop+0x1d2>
        /* Trigger a measurement if necessary */
        bme680_bsec_trigger_measurement(&sensor_settings, sleep);
        
        /* Read data from last measurement */
        num_bsec_inputs = 0;
        bme680_bsec_read_data(time_stamp, bsec_inputs, &num_bsec_inputs, sensor_settings.process_data);
   17d32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if (bsec_process_data)
   17d34:	2b00      	cmp	r3, #0
   17d36:	f000 80a4 	beq.w	17e82 <bsec_iot_loop+0x1da>
        bme680_status = bme680_get_sensor_data(&data, &bme680_g);
   17d3a:	4a88      	ldr	r2, [pc, #544]	; (17f5c <bsec_iot_loop+0x2b4>)
   17d3c:	4621      	mov	r1, r4
   17d3e:	4610      	mov	r0, r2
   17d40:	9305      	str	r3, [sp, #20]
   17d42:	f000 facb 	bl	182dc <bme680_get_sensor_data>
        if (data.status & BME680_NEW_DATA_MSK)
   17d46:	4a85      	ldr	r2, [pc, #532]	; (17f5c <bsec_iot_loop+0x2b4>)
   17d48:	7810      	ldrb	r0, [r2, #0]
   17d4a:	0603      	lsls	r3, r0, #24
   17d4c:	f140 8099 	bpl.w	17e82 <bsec_iot_loop+0x1da>
            if (bsec_process_data & BSEC_PROCESS_PRESSURE)
   17d50:	9b05      	ldr	r3, [sp, #20]
   17d52:	f013 0101 	ands.w	r1, r3, #1
   17d56:	d00a      	beq.n	17d6e <bsec_iot_loop+0xc6>
                inputs[*num_bsec_inputs].signal = data.pressure;
   17d58:	edd2 7a02 	vldr	s15, [r2, #8]
   17d5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                inputs[*num_bsec_inputs].sensor_id = BSEC_INPUT_PRESSURE;
   17d60:	2101      	movs	r1, #1
                inputs[*num_bsec_inputs].signal = data.pressure;
   17d62:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
                inputs[*num_bsec_inputs].time_stamp = time_stamp_trigger;
   17d66:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
                inputs[*num_bsec_inputs].sensor_id = BSEC_INPUT_PRESSURE;
   17d6a:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
            if (bsec_process_data & BSEC_PROCESS_TEMPERATURE)
   17d6e:	f013 0f04 	tst.w	r3, #4
   17d72:	d029      	beq.n	17dc8 <bsec_iot_loop+0x120>
                    inputs[*num_bsec_inputs].signal = data.temperature / 100.0f;
   17d74:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
   17d78:	eddf 6a79 	vldr	s13, [pc, #484]	; 17f60 <bsec_iot_loop+0x2b8>
   17d7c:	ee07 2a90 	vmov	s15, r2
   17d80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                inputs[*num_bsec_inputs].sensor_id = BSEC_INPUT_TEMPERATURE;
   17d84:	f04f 0e03 	mov.w	lr, #3
                    inputs[*num_bsec_inputs].signal = data.temperature / 100.0f;
   17d88:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                inputs[*num_bsec_inputs].sensor_id = BSEC_INPUT_TEMPERATURE;
   17d8c:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
   17d90:	eb0c 1c01 	add.w	ip, ip, r1, lsl #4
                (*num_bsec_inputs)++;
   17d94:	1c4a      	adds	r2, r1, #1
                inputs[*num_bsec_inputs].time_stamp = time_stamp_trigger;
   17d96:	e9cc 6700 	strd	r6, r7, [ip]
                inputs[*num_bsec_inputs].sensor_id = BSEC_INPUT_TEMPERATURE;
   17d9a:	f88c e00d 	strb.w	lr, [ip, #13]
                    inputs[*num_bsec_inputs].signal = data.temperature / 100.0f;
   17d9e:	ed8c 7a02 	vstr	s14, [ip, #8]
                inputs[*num_bsec_inputs].sensor_id = BSEC_INPUT_HEATSOURCE;
   17da2:	b2d2      	uxtb	r2, r2
   17da4:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
   17da8:	eb0c 1202 	add.w	r2, ip, r2, lsl #4
   17dac:	f04f 0c0e 	mov.w	ip, #14
   17db0:	f882 c00d 	strb.w	ip, [r2, #13]
                inputs[*num_bsec_inputs].signal = bme680_temperature_offset_g;
   17db4:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 17f74 <bsec_iot_loop+0x2cc>
                inputs[*num_bsec_inputs].time_stamp = time_stamp_trigger;
   17db8:	e9c2 6700 	strd	r6, r7, [r2]
                inputs[*num_bsec_inputs].signal = bme680_temperature_offset_g;
   17dbc:	f8dc c000 	ldr.w	ip, [ip]
                (*num_bsec_inputs)++;
   17dc0:	3102      	adds	r1, #2
                inputs[*num_bsec_inputs].signal = bme680_temperature_offset_g;
   17dc2:	f8c2 c008 	str.w	ip, [r2, #8]
                (*num_bsec_inputs)++;
   17dc6:	b2c9      	uxtb	r1, r1
            if (bsec_process_data & BSEC_PROCESS_HUMIDITY)
   17dc8:	079a      	lsls	r2, r3, #30
   17dca:	d516      	bpl.n	17dfa <bsec_iot_loop+0x152>
                inputs[*num_bsec_inputs].sensor_id = BSEC_INPUT_HUMIDITY;
   17dcc:	f04f 0c02 	mov.w	ip, #2
   17dd0:	aa0e      	add	r2, sp, #56	; 0x38
   17dd2:	eb02 1201 	add.w	r2, r2, r1, lsl #4
   17dd6:	f882 c00d 	strb.w	ip, [r2, #13]
                    inputs[*num_bsec_inputs].signal = data.humidity / 1000.0f;
   17dda:	f8df c180 	ldr.w	ip, [pc, #384]	; 17f5c <bsec_iot_loop+0x2b4>
   17dde:	eddf 6a61 	vldr	s13, [pc, #388]	; 17f64 <bsec_iot_loop+0x2bc>
   17de2:	eddc 7a03 	vldr	s15, [ip, #12]
   17de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
   17dea:	ee87 7aa6 	vdiv.f32	s14, s15, s13
   17dee:	ed82 7a02 	vstr	s14, [r2, #8]
                inputs[*num_bsec_inputs].time_stamp = time_stamp_trigger;
   17df2:	e9c2 6700 	strd	r6, r7, [r2]
                (*num_bsec_inputs)++;
   17df6:	3101      	adds	r1, #1
   17df8:	b2c9      	uxtb	r1, r1
            if (bsec_process_data & BSEC_PROCESS_GAS)
   17dfa:	071a      	lsls	r2, r3, #28
   17dfc:	d53f      	bpl.n	17e7e <bsec_iot_loop+0x1d6>
                if(data.status & BME680_GASM_VALID_MSK)
   17dfe:	0683      	lsls	r3, r0, #26
   17e00:	d53d      	bpl.n	17e7e <bsec_iot_loop+0x1d6>
                    inputs[*num_bsec_inputs].sensor_id = BSEC_INPUT_GASRESISTOR;
   17e02:	2204      	movs	r2, #4
   17e04:	ab0e      	add	r3, sp, #56	; 0x38
   17e06:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   17e0a:	735a      	strb	r2, [r3, #13]
                    inputs[*num_bsec_inputs].signal = data.gas_resistance;
   17e0c:	4a53      	ldr	r2, [pc, #332]	; (17f5c <bsec_iot_loop+0x2b4>)
                    inputs[*num_bsec_inputs].time_stamp = time_stamp_trigger;
   17e0e:	e9c3 6700 	strd	r6, r7, [r3]
                    inputs[*num_bsec_inputs].signal = data.gas_resistance;
   17e12:	edd2 7a04 	vldr	s15, [r2, #16]
   17e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
   17e1a:	edc3 7a02 	vstr	s15, [r3, #8]
                    (*num_bsec_inputs)++;
   17e1e:	3101      	adds	r1, #1
   17e20:	b2c9      	uxtb	r1, r1
        num_bsec_outputs = BSEC_NUMBER_OUTPUTS;
   17e22:	230e      	movs	r3, #14
        bsec_status = bsec_do_steps(bsec_inputs, num_bsec_inputs, bsec_outputs, &num_bsec_outputs);
   17e24:	aa74      	add	r2, sp, #464	; 0x1d0
        num_bsec_outputs = BSEC_NUMBER_OUTPUTS;
   17e26:	f88d 301b 	strb.w	r3, [sp, #27]
        bsec_status = bsec_do_steps(bsec_inputs, num_bsec_inputs, bsec_outputs, &num_bsec_outputs);
   17e2a:	a80e      	add	r0, sp, #56	; 0x38
   17e2c:	f10d 031b 	add.w	r3, sp, #27
   17e30:	f7f5 fe46 	bl	dac0 <bsec_do_steps>
        for (index = 0; index < num_bsec_outputs; index++)
   17e34:	2700      	movs	r7, #0
        bsec_status = bsec_do_steps(bsec_inputs, num_bsec_inputs, bsec_outputs, &num_bsec_outputs);
   17e36:	9005      	str	r0, [sp, #20]
    float breath_voc_equivalent = 0.0f;
   17e38:	eef0 4a48 	vmov.f32	s9, s16
    float co2_equivalent = 0.0f;
   17e3c:	eeb0 4a48 	vmov.f32	s8, s16
    float static_iaq = 0.0f;
   17e40:	eef0 3a48 	vmov.f32	s7, s16
    float raw_gas = 0.0f;
   17e44:	eeb0 3a48 	vmov.f32	s6, s16
    float raw_humidity = 0.0f;
   17e48:	eef0 2a48 	vmov.f32	s5, s16
    float humidity = 0.0f;
   17e4c:	eeb0 1a48 	vmov.f32	s2, s16
    float raw_pressure = 0.0f;
   17e50:	eef0 1a48 	vmov.f32	s3, s16
    float raw_temp = 0.0f;
   17e54:	eeb0 2a48 	vmov.f32	s4, s16
    float temp = 0.0f;
   17e58:	eef0 0a48 	vmov.f32	s1, s16
    uint8_t iaq_accuracy = 0;
   17e5c:	463a      	mov	r2, r7
    float iaq = 0.0f;
   17e5e:	eeb0 0a48 	vmov.f32	s0, s16
    int64_t timestamp = 0;
   17e62:	2000      	movs	r0, #0
   17e64:	2100      	movs	r1, #0
        for (index = 0; index < num_bsec_outputs; index++)
   17e66:	f89d e01b 	ldrb.w	lr, [sp, #27]
   17e6a:	ae74      	add	r6, sp, #464	; 0x1d0
   17e6c:	fa5f fc87 	uxtb.w	ip, r7
   17e70:	45e6      	cmp	lr, ip
   17e72:	d836      	bhi.n	17ee2 <bsec_iot_loop+0x23a>
        output_ready(timestamp, iaq, iaq_accuracy, temp, humidity, raw_pressure, raw_temp, 
   17e74:	9b05      	ldr	r3, [sp, #20]
   17e76:	47d0      	blx	sl
   17e78:	e003      	b.n	17e82 <bsec_iot_loop+0x1da>
        sleep(5);
   17e7a:	2005      	movs	r0, #5
   17e7c:	e750      	b.n	17d20 <bsec_iot_loop+0x78>
    if (num_bsec_inputs > 0)
   17e7e:	2900      	cmp	r1, #0
   17e80:	d1cf      	bne.n	17e22 <bsec_iot_loop+0x17a>
        
        /* Increment sample counter */
        n_samples++;
        
        /* Retrieve and store state if the passed save_intvl */
        if (n_samples >= save_intvl)
   17e82:	9bb8      	ldr	r3, [sp, #736]	; 0x2e0
        n_samples++;
   17e84:	3501      	adds	r5, #1
        if (n_samples >= save_intvl)
   17e86:	429d      	cmp	r5, r3
   17e88:	d30e      	bcc.n	17ea8 <bsec_iot_loop+0x200>
        {
            bsec_status = bsec_get_state(0, bsec_state, sizeof(bsec_state), work_buffer, sizeof(work_buffer), &bsec_state_len);
   17e8a:	228b      	movs	r2, #139	; 0x8b
   17e8c:	ae07      	add	r6, sp, #28
   17e8e:	9601      	str	r6, [sp, #4]
   17e90:	9200      	str	r2, [sp, #0]
   17e92:	ab51      	add	r3, sp, #324	; 0x144
   17e94:	a92e      	add	r1, sp, #184	; 0xb8
   17e96:	2000      	movs	r0, #0
   17e98:	f7f5 fe5a 	bl	db50 <bsec_get_state>
            if (bsec_status == BSEC_OK)
   17e9c:	4605      	mov	r5, r0
   17e9e:	2800      	cmp	r0, #0
   17ea0:	d156      	bne.n	17f50 <bsec_iot_loop+0x2a8>
            {
                state_save(bsec_state, bsec_state_len);
   17ea2:	6831      	ldr	r1, [r6, #0]
   17ea4:	a82e      	add	r0, sp, #184	; 0xb8
   17ea6:	47d8      	blx	fp
        }
        
        
        /* Compute how long we can sleep until we need to call bsec_sensor_control() next */
        /* Time_stamp is converted from microseconds to nanoseconds first and then the difference to milliseconds */
        time_stamp_interval_ms = (sensor_settings.next_call - get_timestamp_us() * 1000) / 1000000;
   17ea8:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   17eac:	47c8      	blx	r9
   17eae:	4a2e      	ldr	r2, [pc, #184]	; (17f68 <bsec_iot_loop+0x2c0>)
   17eb0:	4243      	negs	r3, r0
   17eb2:	fb02 3301 	mla	r3, r2, r1, r3
   17eb6:	fba0 0102 	umull	r0, r1, r0, r2
   17eba:	4419      	add	r1, r3
   17ebc:	1983      	adds	r3, r0, r6
   17ebe:	9302      	str	r3, [sp, #8]
   17ec0:	eb41 0307 	adc.w	r3, r1, r7
   17ec4:	9303      	str	r3, [sp, #12]
        if (time_stamp_interval_ms > 0)
   17ec6:	2300      	movs	r3, #0
   17ec8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   17ecc:	4a27      	ldr	r2, [pc, #156]	; (17f6c <bsec_iot_loop+0x2c4>)
   17ece:	4282      	cmp	r2, r0
   17ed0:	418b      	sbcs	r3, r1
   17ed2:	f6bf aef8 	bge.w	17cc6 <bsec_iot_loop+0x1e>
        time_stamp_interval_ms = (sensor_settings.next_call - get_timestamp_us() * 1000) / 1000000;
   17ed6:	4a26      	ldr	r2, [pc, #152]	; (17f70 <bsec_iot_loop+0x2c8>)
   17ed8:	2300      	movs	r3, #0
   17eda:	f7f5 fbf9 	bl	d6d0 <__aeabi_ldivmod>
        {
            sleep((uint32_t)time_stamp_interval_ms);
   17ede:	47c0      	blx	r8
   17ee0:	e6f1      	b.n	17cc6 <bsec_iot_loop+0x1e>
            switch (bsec_outputs[index].sensor_id)
   17ee2:	f896 c00d 	ldrb.w	ip, [r6, #13]
   17ee6:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   17eea:	f1bc 0f14 	cmp.w	ip, #20
   17eee:	d811      	bhi.n	17f14 <bsec_iot_loop+0x26c>
   17ef0:	e8df f00c 	tbb	[pc, ip]
   17ef4:	1916130b 	.word	0x1916130b
   17ef8:	2b1f2810 	.word	0x2b1f2810
   17efc:	10101025 	.word	0x10101025
   17f00:	10221c10 	.word	0x10221c10
   17f04:	10100e10 	.word	0x10100e10
   17f08:	0e          	.byte	0x0e
   17f09:	00          	.byte	0x00
                    iaq = bsec_outputs[index].signal;
   17f0a:	ed96 0a02 	vldr	s0, [r6, #8]
                    iaq_accuracy = bsec_outputs[index].accuracy;
   17f0e:	7bb2      	ldrb	r2, [r6, #14]
            timestamp = bsec_outputs[index].time_stamp;
   17f10:	e9d6 0100 	ldrd	r0, r1, [r6]
   17f14:	3701      	adds	r7, #1
   17f16:	3610      	adds	r6, #16
   17f18:	e7a8      	b.n	17e6c <bsec_iot_loop+0x1c4>
                    static_iaq = bsec_outputs[index].signal;
   17f1a:	edd6 3a02 	vldr	s7, [r6, #8]
                    break;
   17f1e:	e7f7      	b.n	17f10 <bsec_iot_loop+0x268>
                    co2_equivalent = bsec_outputs[index].signal;
   17f20:	ed96 4a02 	vldr	s8, [r6, #8]
                    break;
   17f24:	e7f4      	b.n	17f10 <bsec_iot_loop+0x268>
                    breath_voc_equivalent = bsec_outputs[index].signal;
   17f26:	edd6 4a02 	vldr	s9, [r6, #8]
                    break;
   17f2a:	e7f1      	b.n	17f10 <bsec_iot_loop+0x268>
                    temp = bsec_outputs[index].signal;
   17f2c:	edd6 0a02 	vldr	s1, [r6, #8]
                    break;
   17f30:	e7ee      	b.n	17f10 <bsec_iot_loop+0x268>
                    raw_pressure = bsec_outputs[index].signal;
   17f32:	edd6 1a02 	vldr	s3, [r6, #8]
                    break;
   17f36:	e7eb      	b.n	17f10 <bsec_iot_loop+0x268>
                    humidity = bsec_outputs[index].signal;
   17f38:	ed96 1a02 	vldr	s2, [r6, #8]
                    break;
   17f3c:	e7e8      	b.n	17f10 <bsec_iot_loop+0x268>
                    raw_gas = bsec_outputs[index].signal;
   17f3e:	ed96 3a02 	vldr	s6, [r6, #8]
                    break;
   17f42:	e7e5      	b.n	17f10 <bsec_iot_loop+0x268>
                    raw_temp = bsec_outputs[index].signal;
   17f44:	ed96 2a02 	vldr	s4, [r6, #8]
                    break;
   17f48:	e7e2      	b.n	17f10 <bsec_iot_loop+0x268>
                    raw_humidity = bsec_outputs[index].signal;
   17f4a:	edd6 2a02 	vldr	s5, [r6, #8]
                    break;
   17f4e:	e7df      	b.n	17f10 <bsec_iot_loop+0x268>
            n_samples = 0;
   17f50:	2500      	movs	r5, #0
   17f52:	e7a9      	b.n	17ea8 <bsec_iot_loop+0x200>
   17f54:	00000000 	.word	0x00000000
   17f58:	20021624 	.word	0x20021624
   17f5c:	20021680 	.word	0x20021680
   17f60:	42c80000 	.word	0x42c80000
   17f64:	447a0000 	.word	0x447a0000
   17f68:	fffffc18 	.word	0xfffffc18
   17f6c:	000f423f 	.word	0x000f423f
   17f70:	000f4240 	.word	0x000f4240
   17f74:	2002167c 	.word	0x2002167c

00017f78 <bme680_set_sensor_settings>:
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
   17f78:	2300      	movs	r3, #0
{
   17f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17f7e:	4606      	mov	r6, r0
   17f80:	b088      	sub	sp, #32
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   17f82:	4608      	mov	r0, r1
{
   17f84:	460c      	mov	r4, r1
	uint8_t data = 0;
   17f86:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
   17f8a:	9304      	str	r3, [sp, #16]
   17f8c:	f8ad 3014 	strh.w	r3, [sp, #20]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
   17f90:	9306      	str	r3, [sp, #24]
   17f92:	f8ad 301c 	strh.w	r3, [sp, #28]
	rslt = null_ptr_check(dev);
   17f96:	f01a ff50 	bl	32e3a <null_ptr_check>
	if (rslt == BME680_OK) {
   17f9a:	2800      	cmp	r0, #0
   17f9c:	f040 8101 	bne.w	181a2 <bme680_set_sensor_settings+0x22a>
		if (desired_settings & BME680_GAS_MEAS_SEL)
   17fa0:	f016 0308 	ands.w	r3, r6, #8
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
   17fa4:	f891 7044 	ldrb.w	r7, [r1, #68]	; 0x44
		if (desired_settings & BME680_GAS_MEAS_SEL)
   17fa8:	d105      	bne.n	17fb6 <bme680_set_sensor_settings+0x3e>
			rslt = set_gas_config(dev);

		dev->power_mode = BME680_SLEEP_MODE;
   17faa:	f881 3044 	strb.w	r3, [r1, #68]	; 0x44
		if (rslt == BME680_OK)
			rslt = bme680_set_sensor_mode(dev);
   17fae:	4620      	mov	r0, r4
   17fb0:	f01b f919 	bl	331e6 <bme680_set_sensor_mode>
   17fb4:	e009      	b.n	17fca <bme680_set_sensor_settings+0x52>
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
   17fb6:	2f01      	cmp	r7, #1
		uint8_t reg_addr[2] = {0};
   17fb8:	f8ad 0008 	strh.w	r0, [sp, #8]
		uint8_t reg_data[2] = {0};
   17fbc:	f8ad 000c 	strh.w	r0, [sp, #12]
		if (dev->power_mode == BME680_FORCED_MODE) {
   17fc0:	f000 80f2 	beq.w	181a8 <bme680_set_sensor_settings+0x230>
		dev->power_mode = BME680_SLEEP_MODE;
   17fc4:	f881 0044 	strb.w	r0, [r1, #68]	; 0x44
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
			dev->gas_sett.nb_conv = 0;
		} else {
			rslt = BME680_W_DEFINE_PWR_MODE;
   17fc8:	2001      	movs	r0, #1
		if (desired_settings & BME680_FILTER_SEL) {
   17fca:	f016 0510 	ands.w	r5, r6, #16
   17fce:	d020      	beq.n	18012 <bme680_set_sensor_settings+0x9a>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
   17fd0:	f104 0246 	add.w	r2, r4, #70	; 0x46
   17fd4:	2107      	movs	r1, #7
   17fd6:	f104 003b 	add.w	r0, r4, #59	; 0x3b
   17fda:	f01a ff86 	bl	32eea <boundary_check.isra.1.constprop.6>
			if (rslt == BME680_OK)
   17fde:	b930      	cbnz	r0, 17fee <bme680_set_sensor_settings+0x76>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   17fe0:	4623      	mov	r3, r4
   17fe2:	2201      	movs	r2, #1
   17fe4:	f10d 0107 	add.w	r1, sp, #7
   17fe8:	2075      	movs	r0, #117	; 0x75
   17fea:	f01a ff8a 	bl	32f02 <bme680_get_regs>
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
   17fee:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
   17ff2:	f89d 2007 	ldrb.w	r2, [sp, #7]
   17ff6:	009b      	lsls	r3, r3, #2
   17ff8:	f022 021c 	bic.w	r2, r2, #28
   17ffc:	f003 031c 	and.w	r3, r3, #28
   18000:	4313      	orrs	r3, r2
			reg_array[count] = reg_addr; /* Append configuration */
   18002:	2275      	movs	r2, #117	; 0x75
			count++;
   18004:	2501      	movs	r5, #1
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
   18006:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
   1800a:	f88d 2010 	strb.w	r2, [sp, #16]
			data_array[count] = data;
   1800e:	f88d 3018 	strb.w	r3, [sp, #24]
		if (desired_settings & BME680_HCNTRL_SEL) {
   18012:	06b3      	lsls	r3, r6, #26
   18014:	d522      	bpl.n	1805c <bme680_set_sensor_settings+0xe4>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
   18016:	f104 0246 	add.w	r2, r4, #70	; 0x46
   1801a:	2108      	movs	r1, #8
   1801c:	f104 003d 	add.w	r0, r4, #61	; 0x3d
   18020:	f01a ff63 	bl	32eea <boundary_check.isra.1.constprop.6>
			if (rslt == BME680_OK)
   18024:	b930      	cbnz	r0, 18034 <bme680_set_sensor_settings+0xbc>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   18026:	4623      	mov	r3, r4
   18028:	2201      	movs	r2, #1
   1802a:	f10d 0107 	add.w	r1, sp, #7
   1802e:	2070      	movs	r0, #112	; 0x70
   18030:	f01a ff67 	bl	32f02 <bme680_get_regs>
			reg_array[count] = reg_addr; /* Append configuration */
   18034:	2170      	movs	r1, #112	; 0x70
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
   18036:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1803a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
   1803e:	f023 0308 	bic.w	r3, r3, #8
   18042:	f002 0208 	and.w	r2, r2, #8
   18046:	4313      	orrs	r3, r2
			reg_array[count] = reg_addr; /* Append configuration */
   18048:	aa08      	add	r2, sp, #32
   1804a:	442a      	add	r2, r5
			count++;
   1804c:	3501      	adds	r5, #1
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
   1804e:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
   18052:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
   18056:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
   1805a:	b2ed      	uxtb	r5, r5
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
   1805c:	07b1      	lsls	r1, r6, #30
   1805e:	d033      	beq.n	180c8 <bme680_set_sensor_settings+0x150>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
   18060:	f104 0246 	add.w	r2, r4, #70	; 0x46
   18064:	2105      	movs	r1, #5
   18066:	f104 0039 	add.w	r0, r4, #57	; 0x39
   1806a:	f01a ff3e 	bl	32eea <boundary_check.isra.1.constprop.6>
			if (rslt == BME680_OK)
   1806e:	b930      	cbnz	r0, 1807e <bme680_set_sensor_settings+0x106>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   18070:	4623      	mov	r3, r4
   18072:	2201      	movs	r2, #1
   18074:	f10d 0107 	add.w	r1, sp, #7
   18078:	2074      	movs	r0, #116	; 0x74
   1807a:	f01a ff42 	bl	32f02 <bme680_get_regs>
			if (desired_settings & BME680_OST_SEL)
   1807e:	07f2      	lsls	r2, r6, #31
   18080:	d509      	bpl.n	18096 <bme680_set_sensor_settings+0x11e>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
   18082:	f89d 3007 	ldrb.w	r3, [sp, #7]
   18086:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
   1808a:	f003 031f 	and.w	r3, r3, #31
   1808e:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   18092:	f88d 3007 	strb.w	r3, [sp, #7]
			if (desired_settings & BME680_OSP_SEL)
   18096:	07b3      	lsls	r3, r6, #30
   18098:	d50b      	bpl.n	180b2 <bme680_set_sensor_settings+0x13a>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
   1809a:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   1809e:	f89d 2007 	ldrb.w	r2, [sp, #7]
   180a2:	009b      	lsls	r3, r3, #2
   180a4:	f003 031c 	and.w	r3, r3, #28
   180a8:	f022 021c 	bic.w	r2, r2, #28
   180ac:	4313      	orrs	r3, r2
   180ae:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr;
   180b2:	2274      	movs	r2, #116	; 0x74
   180b4:	ab08      	add	r3, sp, #32
   180b6:	442b      	add	r3, r5
   180b8:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
   180bc:	f89d 2007 	ldrb.w	r2, [sp, #7]
			count++;
   180c0:	3501      	adds	r5, #1
			data_array[count] = data;
   180c2:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
   180c6:	b2ed      	uxtb	r5, r5
		if (desired_settings & BME680_OSH_SEL) {
   180c8:	0771      	lsls	r1, r6, #29
   180ca:	d522      	bpl.n	18112 <bme680_set_sensor_settings+0x19a>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
   180cc:	f104 0246 	add.w	r2, r4, #70	; 0x46
   180d0:	2105      	movs	r1, #5
   180d2:	f104 0038 	add.w	r0, r4, #56	; 0x38
   180d6:	f01a ff08 	bl	32eea <boundary_check.isra.1.constprop.6>
			if (rslt == BME680_OK)
   180da:	b930      	cbnz	r0, 180ea <bme680_set_sensor_settings+0x172>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   180dc:	4623      	mov	r3, r4
   180de:	2201      	movs	r2, #1
   180e0:	f10d 0107 	add.w	r1, sp, #7
   180e4:	2072      	movs	r0, #114	; 0x72
   180e6:	f01a ff0c 	bl	32f02 <bme680_get_regs>
			reg_array[count] = reg_addr; /* Append configuration */
   180ea:	2172      	movs	r1, #114	; 0x72
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
   180ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
   180f0:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   180f4:	f023 0307 	bic.w	r3, r3, #7
   180f8:	f002 0207 	and.w	r2, r2, #7
   180fc:	4313      	orrs	r3, r2
			reg_array[count] = reg_addr; /* Append configuration */
   180fe:	aa08      	add	r2, sp, #32
   18100:	442a      	add	r2, r5
			count++;
   18102:	3501      	adds	r5, #1
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
   18104:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
   18108:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
   1810c:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
   18110:	b2ed      	uxtb	r5, r5
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
   18112:	f016 0fc0 	tst.w	r6, #192	; 0xc0
   18116:	d03b      	beq.n	18190 <bme680_set_sensor_settings+0x218>
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
   18118:	f104 0846 	add.w	r8, r4, #70	; 0x46
   1811c:	4642      	mov	r2, r8
   1811e:	2101      	movs	r1, #1
   18120:	f104 003e 	add.w	r0, r4, #62	; 0x3e
   18124:	f01a fee1 	bl	32eea <boundary_check.isra.1.constprop.6>
			if (rslt == BME680_OK) {
   18128:	b960      	cbnz	r0, 18144 <bme680_set_sensor_settings+0x1cc>
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
   1812a:	210a      	movs	r1, #10
   1812c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   18130:	f01a fedb 	bl	32eea <boundary_check.isra.1.constprop.6>
			if (rslt == BME680_OK)
   18134:	b930      	cbnz	r0, 18144 <bme680_set_sensor_settings+0x1cc>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   18136:	4623      	mov	r3, r4
   18138:	2201      	movs	r2, #1
   1813a:	f10d 0107 	add.w	r1, sp, #7
   1813e:	2071      	movs	r0, #113	; 0x71
   18140:	f01a fedf 	bl	32f02 <bme680_get_regs>
			if (desired_settings & BME680_RUN_GAS_SEL)
   18144:	0672      	lsls	r2, r6, #25
   18146:	d50b      	bpl.n	18160 <bme680_set_sensor_settings+0x1e8>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
   18148:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
   1814c:	f89d 2007 	ldrb.w	r2, [sp, #7]
   18150:	011b      	lsls	r3, r3, #4
   18152:	f003 0310 	and.w	r3, r3, #16
   18156:	f022 0210 	bic.w	r2, r2, #16
   1815a:	4313      	orrs	r3, r2
   1815c:	f88d 3007 	strb.w	r3, [sp, #7]
			if (desired_settings & BME680_NBCONV_SEL)
   18160:	0633      	lsls	r3, r6, #24
   18162:	d50a      	bpl.n	1817a <bme680_set_sensor_settings+0x202>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
   18164:	f89d 3007 	ldrb.w	r3, [sp, #7]
   18168:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   1816c:	f023 030f 	bic.w	r3, r3, #15
   18170:	f002 020f 	and.w	r2, r2, #15
   18174:	4313      	orrs	r3, r2
   18176:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
   1817a:	2271      	movs	r2, #113	; 0x71
   1817c:	ab08      	add	r3, sp, #32
   1817e:	442b      	add	r3, r5
   18180:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
   18184:	f89d 2007 	ldrb.w	r2, [sp, #7]
			count++;
   18188:	3501      	adds	r5, #1
			data_array[count] = data;
   1818a:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
   1818e:	b2ed      	uxtb	r5, r5
		if (rslt == BME680_OK)
   18190:	b928      	cbnz	r0, 1819e <bme680_set_sensor_settings+0x226>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
   18192:	4623      	mov	r3, r4
   18194:	462a      	mov	r2, r5
   18196:	a906      	add	r1, sp, #24
   18198:	a804      	add	r0, sp, #16
   1819a:	f01a fed6 	bl	32f4a <bme680_set_regs>
		dev->power_mode = intended_power_mode;
   1819e:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
}
   181a2:	b008      	add	sp, #32
   181a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (temp > 400) /* Cap temperature */
		temp = 400;

	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
   181a8:	8a4a      	ldrh	r2, [r1, #18]
   181aa:	2105      	movs	r1, #5
   181ac:	4b30      	ldr	r3, [pc, #192]	; (18270 <bme680_set_sensor_settings+0x2f8>)
	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
   181ae:	f994 5014 	ldrsb.w	r5, [r4, #20]
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
   181b2:	fb12 3301 	smlabb	r3, r2, r1, r3
   181b6:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
   181ba:	2164      	movs	r1, #100	; 0x64
   181bc:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
   181c0:	bf28      	it	cs
   181c2:	f44f 72c8 	movcs.w	r2, #400	; 0x190
   181c6:	435a      	muls	r2, r3
   181c8:	fbb2 f2f1 	udiv	r2, r2, r1
   181cc:	230a      	movs	r3, #10
   181ce:	f502 1248 	add.w	r2, r2, #3276800	; 0x320000
   181d2:	fbb2 f2f3 	udiv	r2, r2, r3
   181d6:	f994 3011 	ldrsb.w	r3, [r4, #17]
   181da:	f503 7344 	add.w	r3, r3, #784	; 0x310
   181de:	435a      	muls	r2, r3
	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
   181e0:	f994 3004 	ldrsb.w	r3, [r4, #4]
   181e4:	fb13 f305 	smulbb	r3, r3, r5
   181e8:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   181ec:	fb93 f3f5 	sdiv	r3, r3, r5
   181f0:	021b      	lsls	r3, r3, #8
	var3 = var1 + (var2 / 2);
   181f2:	eb03 0362 	add.w	r3, r3, r2, asr #1
	var4 = (var3 / (dev->calib.res_heat_range + 4));
   181f6:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
	var5 = (131 * dev->calib.res_heat_val) + 65536;
   181fa:	f994 5035 	ldrsb.w	r5, [r4, #53]	; 0x35
	var4 = (var3 / (dev->calib.res_heat_range + 4));
   181fe:	3204      	adds	r2, #4
   18200:	fbb3 f3f2 	udiv	r3, r3, r2
	var5 = (131 * dev->calib.res_heat_val) + 65536;
   18204:	2283      	movs	r2, #131	; 0x83
   18206:	436a      	muls	r2, r5
   18208:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
	heatr_res_x100 = (int32_t) (((var4 / var5) - 250) * 34);
   1820c:	fbb3 f3f2 	udiv	r3, r3, r2
   18210:	2222      	movs	r2, #34	; 0x22
   18212:	4353      	muls	r3, r2
	heatr_res = (uint8_t) ((heatr_res_x100 + 50) / 100);
   18214:	f5a3 5304 	sub.w	r3, r3, #8448	; 0x2100
   18218:	3b02      	subs	r3, #2
   1821a:	fb93 f3f1 	sdiv	r3, r3, r1
   1821e:	f88d 300c 	strb.w	r3, [sp, #12]
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
   18222:	f246 435a 	movw	r3, #25690	; 0x645a
   18226:	f8ad 3008 	strh.w	r3, [sp, #8]
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
   1822a:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
static uint8_t calc_heater_dur(uint16_t dur)
{
	uint8_t factor = 0;
	uint8_t durval;

	if (dur >= 0xfc0) {
   1822e:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
   18232:	d21a      	bcs.n	1826a <bme680_set_sensor_settings+0x2f2>
		durval = 0xff; /* Max duration*/
	} else {
		while (dur > 0x3F) {
   18234:	2b3f      	cmp	r3, #63	; 0x3f
   18236:	b242      	sxtb	r2, r0
   18238:	f100 0001 	add.w	r0, r0, #1
   1823c:	d813      	bhi.n	18266 <bme680_set_sensor_settings+0x2ee>
			dur = dur / 4;
			factor += 1;
		}
		durval = (uint8_t) (dur + (factor * 64));
   1823e:	eb03 1382 	add.w	r3, r3, r2, lsl #6
   18242:	b2db      	uxtb	r3, r3
			dev->gas_sett.nb_conv = 0;
   18244:	2500      	movs	r5, #0
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
   18246:	f88d 300d 	strb.w	r3, [sp, #13]
			dev->gas_sett.nb_conv = 0;
   1824a:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
   1824e:	4623      	mov	r3, r4
   18250:	2202      	movs	r2, #2
   18252:	a903      	add	r1, sp, #12
   18254:	a802      	add	r0, sp, #8
   18256:	f01a fe78 	bl	32f4a <bme680_set_regs>
		dev->power_mode = BME680_SLEEP_MODE;
   1825a:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
		if (rslt == BME680_OK)
   1825e:	2800      	cmp	r0, #0
   18260:	f47f aeb3 	bne.w	17fca <bme680_set_sensor_settings+0x52>
   18264:	e6a3      	b.n	17fae <bme680_set_sensor_settings+0x36>
			dur = dur / 4;
   18266:	089b      	lsrs	r3, r3, #2
			factor += 1;
   18268:	e7e4      	b.n	18234 <bme680_set_sensor_settings+0x2bc>
		durval = 0xff; /* Max duration*/
   1826a:	23ff      	movs	r3, #255	; 0xff
   1826c:	e7ea      	b.n	18244 <bme680_set_sensor_settings+0x2cc>
   1826e:	bf00      	nop
   18270:	000bbffd 	.word	0x000bbffd

00018274 <bme680_get_profile_dur>:
{
   18274:	b513      	push	{r0, r1, r4, lr}
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
   18276:	4b18      	ldr	r3, [pc, #96]	; (182d8 <bme680_get_profile_dur+0x64>)
	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
   18278:	aa02      	add	r2, sp, #8
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
   1827a:	9300      	str	r3, [sp, #0]
   1827c:	f241 0308 	movw	r3, #4104	; 0x1008
   18280:	f8ad 3004 	strh.w	r3, [sp, #4]
	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
   18284:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
   18288:	f891 403a 	ldrb.w	r4, [r1, #58]	; 0x3a
	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
   1828c:	4413      	add	r3, r2
   1828e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
   18292:	ab02      	add	r3, sp, #8
   18294:	441c      	add	r4, r3
   18296:	f814 3c08 	ldrb.w	r3, [r4, #-8]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
   1829a:	ac02      	add	r4, sp, #8
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
   1829c:	441a      	add	r2, r3
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
   1829e:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
   182a2:	4423      	add	r3, r4
   182a4:	f813 3c08 	ldrb.w	r3, [r3, #-8]
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
   182a8:	f240 74ab 	movw	r4, #1963	; 0x7ab
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
   182ac:	4413      	add	r3, r2
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
   182ae:	f241 22b9 	movw	r2, #4793	; 0x12b9
   182b2:	fb04 2303 	mla	r3, r4, r3, r2
	tph_dur /= UINT32_C(1000); /* Convert to ms */
   182b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   182ba:	fbb3 f3f2 	udiv	r3, r3, r2
	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */
   182be:	3301      	adds	r3, #1
	*duration = (uint16_t) tph_dur;
   182c0:	b29b      	uxth	r3, r3
   182c2:	8003      	strh	r3, [r0, #0]
	if (dev->gas_sett.run_gas) {
   182c4:	f891 203e 	ldrb.w	r2, [r1, #62]	; 0x3e
   182c8:	b11a      	cbz	r2, 182d2 <bme680_get_profile_dur+0x5e>
		*duration += dev->gas_sett.heatr_dur;
   182ca:	f8b1 2042 	ldrh.w	r2, [r1, #66]	; 0x42
   182ce:	4413      	add	r3, r2
   182d0:	8003      	strh	r3, [r0, #0]
}
   182d2:	b002      	add	sp, #8
   182d4:	bd10      	pop	{r4, pc}
   182d6:	bf00      	nop
   182d8:	04020100 	.word	0x04020100

000182dc <bme680_get_sensor_data>:
{
   182dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   182e0:	4606      	mov	r6, r0
   182e2:	b0a9      	sub	sp, #164	; 0xa4
	rslt = null_ptr_check(dev);
   182e4:	4608      	mov	r0, r1
{
   182e6:	460c      	mov	r4, r1
	rslt = null_ptr_check(dev);
   182e8:	f01a fda7 	bl	32e3a <null_ptr_check>
	if (rslt == BME680_OK) {
   182ec:	4605      	mov	r5, r0
   182ee:	2800      	cmp	r0, #0
   182f0:	f040 8199 	bne.w	18626 <bme680_get_sensor_data+0x34a>
 * @brief This internal API is used to calculate the field data of sensor.
 */
static int8_t read_field_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
	int8_t rslt;
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
   182f4:	f10d 0a10 	add.w	sl, sp, #16
   182f8:	4601      	mov	r1, r0
   182fa:	220f      	movs	r2, #15
   182fc:	4650      	mov	r0, sl
   182fe:	f020 fe9a 	bl	39036 <memset>
	uint16_t adc_hum;
	uint16_t adc_gas_res;
	uint8_t tries = 10;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   18302:	4620      	mov	r0, r4
   18304:	f01a fd99 	bl	32e3a <null_ptr_check>
   18308:	f04f 090a 	mov.w	r9, #10
   1830c:	4605      	mov	r5, r0
	do {
		if (rslt == BME680_OK) {
   1830e:	2d00      	cmp	r5, #0
   18310:	f040 8190 	bne.w	18634 <bme680_get_sensor_data+0x358>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
   18314:	4623      	mov	r3, r4
   18316:	220f      	movs	r2, #15
   18318:	4651      	mov	r1, sl
   1831a:	201d      	movs	r0, #29
   1831c:	f01a fdf1 	bl	32f02 <bme680_get_regs>
			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
   18320:	f89d 1018 	ldrb.w	r1, [sp, #24]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
   18324:	f89d 701e 	ldrb.w	r7, [sp, #30]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
   18328:	9101      	str	r1, [sp, #4]
   1832a:	f89d 1019 	ldrb.w	r1, [sp, #25]
			data->status = buff[0] & BME680_NEW_DATA_MSK;
   1832e:	f89d b010 	ldrb.w	fp, [sp, #16]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
   18332:	9102      	str	r1, [sp, #8]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
   18334:	f89d 101d 	ldrb.w	r1, [sp, #29]
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
   18338:	fa4f fe87 	sxtb.w	lr, r7
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
   1833c:	f00b 030f 	and.w	r3, fp, #15
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
   18340:	9103      	str	r1, [sp, #12]
			data->status = buff[0] & BME680_NEW_DATA_MSK;
   18342:	f02b 0b7f 	bic.w	fp, fp, #127	; 0x7f
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
   18346:	f00e 0120 	and.w	r1, lr, #32
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
   1834a:	7073      	strb	r3, [r6, #1]
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
   1834c:	ea4b 0101 	orr.w	r1, fp, r1
			data->meas_index = buff[1];
   18350:	f89d 3011 	ldrb.w	r3, [sp, #17]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
   18354:	f00e 0e10 	and.w	lr, lr, #16
   18358:	ea41 010e 	orr.w	r1, r1, lr
   1835c:	b249      	sxtb	r1, r1
			data->meas_index = buff[1];
   1835e:	70b3      	strb	r3, [r6, #2]
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
   18360:	f89d 3012 	ldrb.w	r3, [sp, #18]

			if (data->status & BME680_NEW_DATA_MSK) {
   18364:	2900      	cmp	r1, #0
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
   18366:	4605      	mov	r5, r0
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
   18368:	9300      	str	r3, [sp, #0]
   1836a:	f89d c013 	ldrb.w	ip, [sp, #19]
				| ((uint32_t) buff[4] / 16));
   1836e:	f89d 3014 	ldrb.w	r3, [sp, #20]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
   18372:	f89d 2015 	ldrb.w	r2, [sp, #21]
   18376:	f89d 8016 	ldrb.w	r8, [sp, #22]
				| ((uint32_t) buff[7] / 16));
   1837a:	f89d 0017 	ldrb.w	r0, [sp, #23]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
   1837e:	7031      	strb	r1, [r6, #0]
			if (data->status & BME680_NEW_DATA_MSK) {
   18380:	f280 8155 	bge.w	1862e <bme680_get_sensor_data+0x352>
				| ((uint32_t) buff[7] / 16));
   18384:	0900      	lsrs	r0, r0, #4
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
   18386:	ea40 1808 	orr.w	r8, r0, r8, lsl #4
   1838a:	ea48 3202 	orr.w	r2, r8, r2, lsl #12
	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
   1838e:	f8b4 8016 	ldrh.w	r8, [r4, #22]
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
   18392:	f994 001a 	ldrsb.w	r0, [r4, #26]
	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
   18396:	ea4f 0848 	mov.w	r8, r8, lsl #1
   1839a:	ebc8 02d2 	rsb	r2, r8, r2, lsr #3
   1839e:	17d1      	asrs	r1, r2, #31
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
   183a0:	ea4f 0a52 	mov.w	sl, r2, lsr #1
   183a4:	ea4a 7ac1 	orr.w	sl, sl, r1, lsl #31
   183a8:	1049      	asrs	r1, r1, #1
   183aa:	fb0a f101 	mul.w	r1, sl, r1
   183ae:	fbaa ab0a 	umull	sl, fp, sl, sl
   183b2:	eb0b 0b41 	add.w	fp, fp, r1, lsl #1
   183b6:	ea4f 3e1a 	mov.w	lr, sl, lsr #12
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
   183ba:	0101      	lsls	r1, r0, #4
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
   183bc:	ea4e 5e0b 	orr.w	lr, lr, fp, lsl #20
   183c0:	ea4f 382b 	mov.w	r8, fp, asr #12
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
   183c4:	ea4f 7be1 	mov.w	fp, r1, asr #31
   183c8:	fb0e f00b 	mul.w	r0, lr, fp
   183cc:	fbae ab01 	umull	sl, fp, lr, r1
   183d0:	fb01 0808 	mla	r8, r1, r8, r0
   183d4:	44c3      	add	fp, r8
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
   183d6:	f9b4 8018 	ldrsh.w	r8, [r4, #24]
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
   183da:	ea4f 309a 	mov.w	r0, sl, lsr #14
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
   183de:	fb88 8902 	smull	r8, r9, r8, r2
   183e2:	ea4f 22d8 	mov.w	r2, r8, lsr #11
   183e6:	ea42 5249 	orr.w	r2, r2, r9, lsl #21
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
   183ea:	ea40 408b 	orr.w	r0, r0, fp, lsl #18
	dev->calib.t_fine = (int32_t) (var2 + var3);
   183ee:	4410      	add	r0, r2
   183f0:	6320      	str	r0, [r4, #48]	; 0x30
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
   183f2:	eb00 0280 	add.w	r2, r0, r0, lsl #2
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
   183f6:	1040      	asrs	r0, r0, #1
   183f8:	f5a0 407a 	sub.w	r0, r0, #64000	; 0xfa00
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
   183fc:	1081      	asrs	r1, r0, #2
   183fe:	4349      	muls	r1, r1
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
   18400:	3280      	adds	r2, #128	; 0x80
   18402:	1212      	asrs	r2, r2, #8
   18404:	80b2      	strh	r2, [r6, #4]
		(int32_t)dev->calib.par_p6) >> 2;
   18406:	f994 8026 	ldrsb.w	r8, [r4, #38]	; 0x26
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
   1840a:	ea4f 2ee1 	mov.w	lr, r1, asr #11
   1840e:	fb08 f80e 	mul.w	r8, r8, lr
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
   18412:	f9b4 e024 	ldrsh.w	lr, [r4, #36]	; 0x24
				| ((uint32_t) buff[4] / 16));
   18416:	091b      	lsrs	r3, r3, #4
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
   18418:	fb00 fe0e 	mul.w	lr, r0, lr
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
   1841c:	ea43 1c0c 	orr.w	ip, r3, ip, lsl #4
   18420:	9b00      	ldr	r3, [sp, #0]
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
   18422:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
   18426:	ea4c 3c03 	orr.w	ip, ip, r3, lsl #12
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
   1842a:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
   1842e:	eb0e 0ea8 	add.w	lr, lr, r8, asr #2
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
   18432:	041b      	lsls	r3, r3, #16
   18434:	eb03 0eae 	add.w	lr, r3, lr, asr #2
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
   18438:	f640 4335 	movw	r3, #3125	; 0xc35
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
   1843c:	f9b4 801e 	ldrsh.w	r8, [r4, #30]
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
   18440:	1349      	asrs	r1, r1, #13
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
   18442:	fb00 f008 	mul.w	r0, r0, r8
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
   18446:	f994 8020 	ldrsb.w	r8, [r4, #32]
	pressure_comp = 1048576 - pres_adc;
   1844a:	f5cc 1c80 	rsb	ip, ip, #1048576	; 0x100000
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
   1844e:	ea4f 1848 	mov.w	r8, r8, lsl #5
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
   18452:	fb01 f108 	mul.w	r1, r1, r8
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
   18456:	10c9      	asrs	r1, r1, #3
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
   18458:	eb01 0060 	add.w	r0, r1, r0, asr #1
	var1 = var1 >> 18;
   1845c:	1480      	asrs	r0, r0, #18
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
   1845e:	8ba1      	ldrh	r1, [r4, #28]
   18460:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
   18464:	ebac 3e2e 	sub.w	lr, ip, lr, asr #12
   18468:	fb03 fe0e 	mul.w	lr, r3, lr
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
   1846c:	4341      	muls	r1, r0
	if (pressure_comp >= BME680_MAX_OVERFLOW_VAL)
   1846e:	f1be 4f80 	cmp.w	lr, #1073741824	; 0x40000000
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
   18472:	ea4f 31e1 	mov.w	r1, r1, asr #15
		pressure_comp = ((pressure_comp / var1) << 1);
   18476:	bfad      	iteet	ge
   18478:	fb9e f3f1 	sdivge	r3, lr, r1
		pressure_comp = ((pressure_comp << 1) / var1);
   1847c:	ea4f 0e4e 	movlt.w	lr, lr, lsl #1
   18480:	fb9e f3f1 	sdivlt	r3, lr, r1
		pressure_comp = ((pressure_comp / var1) << 1);
   18484:	005b      	lslge	r3, r3, #1
		(int32_t)dev->calib.par_p8) >> 13;
   18486:	f9b4 0028 	ldrsh.w	r0, [r4, #40]	; 0x28
	var2 = ((int32_t)(pressure_comp >> 2) *
   1848a:	ea4f 0ea3 	mov.w	lr, r3, asr #2
   1848e:	fb00 fe0e 	mul.w	lr, r0, lr
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
   18492:	10d9      	asrs	r1, r3, #3
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
   18494:	f994 0027 	ldrsb.w	r0, [r4, #39]	; 0x27
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
   18498:	4349      	muls	r1, r1
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
   1849a:	01c0      	lsls	r0, r0, #7
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
   1849c:	eb00 306e 	add.w	r0, r0, lr, asr #13
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
   184a0:	f9b4 e02a 	ldrsh.w	lr, [r4, #42]	; 0x2a
		(pressure_comp >> 3)) >> 13)) >> 12;
   184a4:	1349      	asrs	r1, r1, #13
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
   184a6:	fb0e f101 	mul.w	r1, lr, r1
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
   184aa:	ea4f 2c23 	mov.w	ip, r3, asr #8
   184ae:	fb0c fe0c 	mul.w	lr, ip, ip
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
   184b2:	eb00 3121 	add.w	r1, r0, r1, asr #12
		(int32_t)dev->calib.par_p10) >> 17;
   184b6:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
		(int32_t)(pressure_comp >> 8) *
   184ba:	fb00 f00e 	mul.w	r0, r0, lr
   184be:	fb0c f000 	mul.w	r0, ip, r0
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
   184c2:	eb01 4060 	add.w	r0, r1, r0, asr #17
   184c6:	eb03 1320 	add.w	r3, r3, r0, asr #4
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
   184ca:	2064      	movs	r0, #100	; 0x64
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
   184cc:	60b3      	str	r3, [r6, #8]
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
   184ce:	f994 100e 	ldrsb.w	r1, [r4, #14]
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
   184d2:	f994 300d 	ldrsb.w	r3, [r4, #13]
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
   184d6:	4351      	muls	r1, r2
   184d8:	fb91 f1f0 	sdiv	r1, r1, r0
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
   184dc:	4353      	muls	r3, r2
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
   184de:	4351      	muls	r1, r2
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
   184e0:	fb93 f3f0 	sdiv	r3, r3, r0
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
   184e4:	1189      	asrs	r1, r1, #6
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
   184e6:	fb91 f1f0 	sdiv	r1, r1, r0
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
   184ea:	f06f 0e0f 	mvn.w	lr, #15
	var2 = ((int32_t) dev->calib.par_h2
   184ee:	f8b4 c00a 	ldrh.w	ip, [r4, #10]
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
   184f2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   184f6:	4419      	add	r1, r3
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
   184f8:	fb0c f101 	mul.w	r1, ip, r1
	var2 = ((int32_t) dev->calib.par_h2
   184fc:	ea4f 2ca1 	mov.w	ip, r1, asr #10
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
   18500:	e9dd 1301 	ldrd	r1, r3, [sp, #4]
   18504:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   18508:	8921      	ldrh	r1, [r4, #8]
   1850a:	fb0e 3101 	mla	r1, lr, r1, r3
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
   1850e:	f994 300c 	ldrsb.w	r3, [r4, #12]
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
   18512:	f10d 0e20 	add.w	lr, sp, #32
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
   18516:	4353      	muls	r3, r2
   18518:	fb93 f3f0 	sdiv	r3, r3, r0
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
   1851c:	eba1 0163 	sub.w	r1, r1, r3, asr #1
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
   18520:	f994 3010 	ldrsb.w	r3, [r4, #16]
	var3 = var1 * var2;
   18524:	fb01 f10c 	mul.w	r1, r1, ip
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
   18528:	4353      	muls	r3, r2
   1852a:	fb93 f3f0 	sdiv	r3, r3, r0
	var4 = (int32_t) dev->calib.par_h6 << 7;
   1852e:	7be2      	ldrb	r2, [r4, #15]
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
   18530:	f8df c11c 	ldr.w	ip, [pc, #284]	; 18650 <bme680_get_sensor_data+0x374>
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
   18534:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
   18538:	138a      	asrs	r2, r1, #14
   1853a:	4352      	muls	r2, r2
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
   1853c:	111b      	asrs	r3, r3, #4
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
   1853e:	1292      	asrs	r2, r2, #10
	var6 = (var4 * var5) >> 1;
   18540:	4353      	muls	r3, r2
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
   18542:	eb01 0363 	add.w	r3, r1, r3, asr #1
   18546:	1299      	asrs	r1, r3, #10
   18548:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1854c:	434b      	muls	r3, r1
				data->humidity = calc_humidity(adc_hum, dev);
   1854e:	4a3f      	ldr	r2, [pc, #252]	; (1864c <bme680_get_sensor_data+0x370>)
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
   18550:	131b      	asrs	r3, r3, #12
   18552:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
				data->humidity = calc_humidity(adc_hum, dev);
   18556:	4293      	cmp	r3, r2
   18558:	bfd4      	ite	le
   1855a:	60f3      	strle	r3, [r6, #12]
   1855c:	60f2      	strgt	r2, [r6, #12]
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
   1855e:	f994 8036 	ldrsb.w	r8, [r4, #54]	; 0x36
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
   18562:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   18566:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1856a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1856e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   18572:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   18576:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1857a:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
	uint32_t lookupTable2[16] = { UINT32_C(4096000000), UINT32_C(2048000000), UINT32_C(1024000000), UINT32_C(512000000),
   1857e:	f10c 0c10 	add.w	ip, ip, #16
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
   18582:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	uint32_t lookupTable2[16] = { UINT32_C(4096000000), UINT32_C(2048000000), UINT32_C(1024000000), UINT32_C(512000000),
   18586:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1858a:	f10d 0e60 	add.w	lr, sp, #96	; 0x60
   1858e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   18592:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   18596:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1859a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1859e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   185a2:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   185a6:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
   185aa:	2305      	movs	r3, #5
   185ac:	f240 503c 	movw	r0, #1340	; 0x53c
   185b0:	2100      	movs	r1, #0
		((int64_t) lookupTable1[gas_range])) >> 16;
   185b2:	f007 0c0f 	and.w	ip, r7, #15
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
   185b6:	fbc8 0103 	smlal	r0, r1, r8, r3
		((int64_t) lookupTable1[gas_range])) >> 16;
   185ba:	ab28      	add	r3, sp, #160	; 0xa0
   185bc:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   185c0:	f85c ec80 	ldr.w	lr, [ip, #-128]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
   185c4:	ea4f 1897 	mov.w	r8, r7, lsr #6
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
   185c8:	fba0 230e 	umull	r2, r3, r0, lr
   185cc:	fb0e 3301 	mla	r3, lr, r1, r3
   185d0:	0c11      	lsrs	r1, r2, #16
   185d2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   185d6:	1418      	asrs	r0, r3, #16
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
   185d8:	9b03      	ldr	r3, [sp, #12]
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
   185da:	f85c 7c40 	ldr.w	r7, [ip, #-64]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
   185de:	ea48 0883 	orr.w	r8, r8, r3, lsl #2
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
   185e2:	fa1f f888 	uxth.w	r8, r8
   185e6:	ea4f 4358 	mov.w	r3, r8, lsr #17
   185ea:	ea4f 32c8 	mov.w	r2, r8, lsl #15
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
   185ee:	fba7 8901 	umull	r8, r9, r7, r1
   185f2:	fb07 9900 	mla	r9, r7, r0, r9
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
   185f6:	f112 427f 	adds.w	r2, r2, #4278190080	; 0xff000000
   185fa:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
   185fe:	1852      	adds	r2, r2, r1
   18600:	eb40 0303 	adc.w	r3, r0, r3
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
   18604:	0857      	lsrs	r7, r2, #1
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
   18606:	ea4f 2058 	mov.w	r0, r8, lsr #9
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
   1860a:	ea47 77c3 	orr.w	r7, r7, r3, lsl #31
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
   1860e:	ea40 50c9 	orr.w	r0, r0, r9, lsl #23
   18612:	ea4f 2c69 	mov.w	ip, r9, asr #9
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
   18616:	1059      	asrs	r1, r3, #1
   18618:	19c0      	adds	r0, r0, r7
   1861a:	eb4c 0101 	adc.w	r1, ip, r1
   1861e:	f7f5 f857 	bl	d6d0 <__aeabi_ldivmod>
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
   18622:	6130      	str	r0, [r6, #16]
		if (rslt == BME680_OK) {
   18624:	b175      	cbz	r5, 18644 <bme680_get_sensor_data+0x368>
}
   18626:	4628      	mov	r0, r5
   18628:	b029      	add	sp, #164	; 0xa4
   1862a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				break;
			}
			/* Delay to poll the data */
			dev->delay_ms(BME680_POLL_PERIOD_MS);
   1862e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   18630:	200a      	movs	r0, #10
   18632:	4798      	blx	r3
		}
		tries--;
   18634:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
	} while (tries);
   18638:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
   1863c:	f47f ae67 	bne.w	1830e <bme680_get_sensor_data+0x32>

	if (!tries)
		rslt = BME680_W_NO_NEW_DATA;
   18640:	2502      	movs	r5, #2
	return rslt;
   18642:	e7f0      	b.n	18626 <bme680_get_sensor_data+0x34a>
				dev->new_fields = 1;
   18644:	2301      	movs	r3, #1
   18646:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   1864a:	e7ec      	b.n	18626 <bme680_get_sensor_data+0x34a>
   1864c:	000186a0 	.word	0x000186a0
   18650:	0003a030 	.word	0x0003a030

00018654 <primary_feed_worker>:
static struct wdt_data_storage wdt_data;
static struct k_work_q *second_work_q;

static void primary_feed_worker(struct k_work *work_desc)
{
	k_work_submit_to_queue(second_work_q, &wdt_data.second_workqueue_work);
   18654:	4b08      	ldr	r3, [pc, #32]	; (18678 <primary_feed_worker+0x24>)
   18656:	4909      	ldr	r1, [pc, #36]	; (1867c <primary_feed_worker+0x28>)
   18658:	6818      	ldr	r0, [r3, #0]
   1865a:	e8d1 3fef 	ldaex	r3, [r1]
   1865e:	f043 0201 	orr.w	r2, r3, #1
   18662:	e8c1 2fec 	stlex	ip, r2, [r1]
   18666:	f1bc 0f00 	cmp.w	ip, #0
   1866a:	d1f6      	bne.n	1865a <primary_feed_worker+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1866c:	07db      	lsls	r3, r3, #31
   1866e:	d402      	bmi.n	18676 <primary_feed_worker+0x22>
		k_queue_append(&work_q->queue, work);
   18670:	3908      	subs	r1, #8
   18672:	f020 bb0c 	b.w	38c8e <k_queue_append>
}
   18676:	4770      	bx	lr
   18678:	20021694 	.word	0x20021694
   1867c:	200216c8 	.word	0x200216c8

00018680 <secondary_feed_worker>:
static void secondary_feed_worker(struct k_work *work_desc)
{
   18680:	b570      	push	{r4, r5, r6, lr}
	int err = wdt_feed(wdt_data.wdt_drv, wdt_data.wdt_channel_id);
   18682:	4d17      	ldr	r5, [pc, #92]	; (186e0 <secondary_feed_worker+0x60>)
   18684:	e9d5 0100 	ldrd	r0, r1, [r5]
static inline int z_impl_wdt_feed(struct device *dev, int channel_id)
{
	const struct wdt_driver_api *api =
		(const struct wdt_driver_api *)dev->driver_api;

	return api->feed(dev, channel_id);
   18688:	6883      	ldr	r3, [r0, #8]
   1868a:	4c16      	ldr	r4, [pc, #88]	; (186e4 <secondary_feed_worker+0x64>)
   1868c:	68db      	ldr	r3, [r3, #12]
   1868e:	4798      	blx	r3

	LOG_DBG("Feeding watchdog");
   18690:	2304      	movs	r3, #4
   18692:	4606      	mov	r6, r0
   18694:	f04f 0000 	mov.w	r0, #0
   18698:	f363 0007 	bfi	r0, r3, #0, #8
   1869c:	4b12      	ldr	r3, [pc, #72]	; (186e8 <secondary_feed_worker+0x68>)
   1869e:	4a13      	ldr	r2, [pc, #76]	; (186ec <secondary_feed_worker+0x6c>)
   186a0:	1ae4      	subs	r4, r4, r3
   186a2:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   186a6:	f364 108f 	bfi	r0, r4, #6, #10
   186aa:	4911      	ldr	r1, [pc, #68]	; (186f0 <secondary_feed_worker+0x70>)
   186ac:	f01b fa99 	bl	33be2 <log_string_sync>

	if (err) {
   186b0:	b166      	cbz	r6, 186cc <secondary_feed_worker+0x4c>
		LOG_ERR("Cannot feed watchdog. Error code: %d", err);
   186b2:	f04f 0000 	mov.w	r0, #0
   186b6:	2301      	movs	r3, #1
   186b8:	f363 0007 	bfi	r0, r3, #0, #8
   186bc:	f364 108f 	bfi	r0, r4, #6, #10
   186c0:	4632      	mov	r2, r6
	} else {
		k_delayed_work_submit(&wdt_data.system_workqueue_work,
				      K_MSEC(WDT_FEED_WORKER_DELAY_MS));
	}
}
   186c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		LOG_ERR("Cannot feed watchdog. Error code: %d", err);
   186c6:	490b      	ldr	r1, [pc, #44]	; (186f4 <secondary_feed_worker+0x74>)
   186c8:	f01b ba8b 	b.w	33be2 <log_string_sync>
 * @retval -EADDRINUSE Work item is pending on a different workqueue.
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					k_timeout_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   186cc:	f105 0108 	add.w	r1, r5, #8
   186d0:	f241 3288 	movw	r2, #5000	; 0x1388
}
   186d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   186d8:	4807      	ldr	r0, [pc, #28]	; (186f8 <secondary_feed_worker+0x78>)
   186da:	f015 bf41 	b.w	2e560 <k_delayed_work_submit_to_queue>
   186de:	bf00      	nop
   186e0:	20021698 	.word	0x20021698
   186e4:	0003a008 	.word	0x0003a008
   186e8:	00039f48 	.word	0x00039f48
   186ec:	0003c812 	.word	0x0003c812
   186f0:	0003c828 	.word	0x0003c828
   186f4:	0003c83d 	.word	0x0003c83d
   186f8:	20027524 	.word	0x20027524

000186fc <watchdog_init_and_start>:

	return 0;
}

int watchdog_init_and_start(struct k_work_q *work_q)
{
   186fc:	b570      	push	{r4, r5, r6, lr}
	if (work_q == NULL) {
   186fe:	2800      	cmp	r0, #0
   18700:	f000 808b 	beq.w	1881a <watchdog_init_and_start+0x11e>
		return -EINVAL;
	}
	second_work_q = work_q;
   18704:	4b46      	ldr	r3, [pc, #280]	; (18820 <watchdog_init_and_start+0x124>)
   18706:	6018      	str	r0, [r3, #0]
   18708:	4846      	ldr	r0, [pc, #280]	; (18824 <watchdog_init_and_start+0x128>)
   1870a:	f013 f879 	bl	2b800 <z_impl_device_get_binding>
   1870e:	4d46      	ldr	r5, [pc, #280]	; (18828 <watchdog_init_and_start+0x12c>)
   18710:	4a46      	ldr	r2, [pc, #280]	; (1882c <watchdog_init_and_start+0x130>)
	data->wdt_drv = device_get_binding(DT_LABEL(DT_NODELABEL(wdt)));
   18712:	4e47      	ldr	r6, [pc, #284]	; (18830 <watchdog_init_and_start+0x134>)
   18714:	1aad      	subs	r5, r5, r2
   18716:	6030      	str	r0, [r6, #0]
	if (data->wdt_drv == NULL) {
   18718:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   1871c:	b968      	cbnz	r0, 1873a <watchdog_init_and_start+0x3e>
		LOG_ERR("Cannot bind watchdog driver");
   1871e:	2301      	movs	r3, #1
   18720:	f04f 0000 	mov.w	r0, #0
   18724:	f363 0007 	bfi	r0, r3, #0, #8
   18728:	f365 108f 	bfi	r0, r5, #6, #10
   1872c:	4941      	ldr	r1, [pc, #260]	; (18834 <watchdog_init_and_start+0x138>)
   1872e:	f01b fa58 	bl	33be2 <log_string_sync>
		return err;
   18732:	f06f 0405 	mvn.w	r4, #5
	return watchdog_enable(&wdt_data);
}
   18736:	4620      	mov	r0, r4
   18738:	bd70      	pop	{r4, r5, r6, pc}
	return api->install_timeout(dev, cfg);
   1873a:	6883      	ldr	r3, [r0, #8]
   1873c:	493e      	ldr	r1, [pc, #248]	; (18838 <watchdog_init_and_start+0x13c>)
   1873e:	689b      	ldr	r3, [r3, #8]
   18740:	4798      	blx	r3
   18742:	4602      	mov	r2, r0
	if (data->wdt_channel_id < 0) {
   18744:	2a00      	cmp	r2, #0
	data->wdt_channel_id = wdt_install_timeout(
   18746:	6070      	str	r0, [r6, #4]
		LOG_ERR("Cannot install watchdog timer! Error code: %d",
   18748:	f04f 0000 	mov.w	r0, #0
	if (data->wdt_channel_id < 0) {
   1874c:	da0a      	bge.n	18764 <watchdog_init_and_start+0x68>
		LOG_ERR("Cannot install watchdog timer! Error code: %d",
   1874e:	2101      	movs	r1, #1
   18750:	f361 0007 	bfi	r0, r1, #0, #8
   18754:	f365 108f 	bfi	r0, r5, #6, #10
   18758:	4938      	ldr	r1, [pc, #224]	; (1883c <watchdog_init_and_start+0x140>)
   1875a:	f01b fa42 	bl	33be2 <log_string_sync>
		return -EFAULT;
   1875e:	f06f 040d 	mvn.w	r4, #13
   18762:	e7e8      	b.n	18736 <watchdog_init_and_start+0x3a>
	LOG_INF("Watchdog timeout installed. Timeout: %d",
   18764:	2303      	movs	r3, #3
   18766:	f363 0007 	bfi	r0, r3, #0, #8
   1876a:	f365 108f 	bfi	r0, r5, #6, #10
   1876e:	f242 7210 	movw	r2, #10000	; 0x2710
   18772:	4933      	ldr	r1, [pc, #204]	; (18840 <watchdog_init_and_start+0x144>)
   18774:	f01b fa35 	bl	33be2 <log_string_sync>
	int err = wdt_setup(data->wdt_drv, WDT_OPT_PAUSE_HALTED_BY_DBG);
   18778:	6830      	ldr	r0, [r6, #0]
	return api->setup(dev, options);
   1877a:	6883      	ldr	r3, [r0, #8]
   1877c:	2102      	movs	r1, #2
   1877e:	681b      	ldr	r3, [r3, #0]
   18780:	4798      	blx	r3
	if (err) {
   18782:	4604      	mov	r4, r0
		LOG_ERR("Cannot start watchdog! Error code: %d", err);
   18784:	f04f 0000 	mov.w	r0, #0
	if (err) {
   18788:	b14c      	cbz	r4, 1879e <watchdog_init_and_start+0xa2>
		LOG_ERR("Cannot start watchdog! Error code: %d", err);
   1878a:	2301      	movs	r3, #1
   1878c:	4622      	mov	r2, r4
   1878e:	f363 0007 	bfi	r0, r3, #0, #8
   18792:	492c      	ldr	r1, [pc, #176]	; (18844 <watchdog_init_and_start+0x148>)
   18794:	f365 108f 	bfi	r0, r5, #6, #10
		LOG_INF("Watchdog feed enabled. Timeout: %d",
   18798:	f01b fa23 	bl	33be2 <log_string_sync>
	if (err) {
   1879c:	e7cb      	b.n	18736 <watchdog_init_and_start+0x3a>
		LOG_INF("Watchdog started");
   1879e:	2303      	movs	r3, #3
   187a0:	f363 0007 	bfi	r0, r3, #0, #8
   187a4:	f365 108f 	bfi	r0, r5, #6, #10
   187a8:	4927      	ldr	r1, [pc, #156]	; (18848 <watchdog_init_and_start+0x14c>)
   187aa:	f01b fa1a 	bl	33be2 <log_string_sync>
	k_delayed_work_init(&data->system_workqueue_work, primary_feed_worker);
   187ae:	f106 0008 	add.w	r0, r6, #8
   187b2:	4926      	ldr	r1, [pc, #152]	; (1884c <watchdog_init_and_start+0x150>)
   187b4:	f020 fb2b 	bl	38e0e <k_delayed_work_init>
	int err = wdt_feed(data->wdt_drv, data->wdt_channel_id);
   187b8:	e9d6 0100 	ldrd	r0, r1, [r6]
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   187bc:	4b24      	ldr	r3, [pc, #144]	; (18850 <watchdog_init_and_start+0x154>)
   187be:	62b4      	str	r4, [r6, #40]	; 0x28
   187c0:	e9c6 340b 	strd	r3, r4, [r6, #44]	; 0x2c
	return api->feed(dev, channel_id);
   187c4:	6883      	ldr	r3, [r0, #8]
   187c6:	68db      	ldr	r3, [r3, #12]
   187c8:	4798      	blx	r3
	if (err) {
   187ca:	4604      	mov	r4, r0
   187cc:	b148      	cbz	r0, 187e2 <watchdog_init_and_start+0xe6>
		LOG_ERR("Cannot feed watchdog. Error code: %d", err);
   187ce:	f04f 0000 	mov.w	r0, #0
   187d2:	2301      	movs	r3, #1
   187d4:	f363 0007 	bfi	r0, r3, #0, #8
   187d8:	f365 108f 	bfi	r0, r5, #6, #10
   187dc:	4622      	mov	r2, r4
   187de:	491d      	ldr	r1, [pc, #116]	; (18854 <watchdog_init_and_start+0x158>)
   187e0:	e7da      	b.n	18798 <watchdog_init_and_start+0x9c>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   187e2:	f241 3288 	movw	r2, #5000	; 0x1388
   187e6:	f106 0108 	add.w	r1, r6, #8
   187ea:	481b      	ldr	r0, [pc, #108]	; (18858 <watchdog_init_and_start+0x15c>)
   187ec:	f015 feb8 	bl	2e560 <k_delayed_work_submit_to_queue>
	if (err) {
   187f0:	4604      	mov	r4, r0
		LOG_ERR("Cannot start watchdog feed worker!"
   187f2:	f04f 0000 	mov.w	r0, #0
	if (err) {
   187f6:	b13c      	cbz	r4, 18808 <watchdog_init_and_start+0x10c>
		LOG_ERR("Cannot start watchdog feed worker!"
   187f8:	2301      	movs	r3, #1
   187fa:	f363 0007 	bfi	r0, r3, #0, #8
   187fe:	f365 108f 	bfi	r0, r5, #6, #10
   18802:	4622      	mov	r2, r4
   18804:	4915      	ldr	r1, [pc, #84]	; (1885c <watchdog_init_and_start+0x160>)
   18806:	e7c7      	b.n	18798 <watchdog_init_and_start+0x9c>
		LOG_INF("Watchdog feed enabled. Timeout: %d",
   18808:	2303      	movs	r3, #3
   1880a:	f363 0007 	bfi	r0, r3, #0, #8
   1880e:	f365 108f 	bfi	r0, r5, #6, #10
   18812:	f241 3288 	movw	r2, #5000	; 0x1388
   18816:	4912      	ldr	r1, [pc, #72]	; (18860 <watchdog_init_and_start+0x164>)
   18818:	e7be      	b.n	18798 <watchdog_init_and_start+0x9c>
		return -EINVAL;
   1881a:	f06f 0415 	mvn.w	r4, #21
   1881e:	e78a      	b.n	18736 <watchdog_init_and_start+0x3a>
   18820:	20021694 	.word	0x20021694
   18824:	0003c862 	.word	0x0003c862
   18828:	0003a008 	.word	0x0003a008
   1882c:	00039f48 	.word	0x00039f48
   18830:	20021698 	.word	0x20021698
   18834:	0003c866 	.word	0x0003c866
   18838:	0003a228 	.word	0x0003a228
   1883c:	0003c882 	.word	0x0003c882
   18840:	0003c8b0 	.word	0x0003c8b0
   18844:	0003c8d8 	.word	0x0003c8d8
   18848:	0003c8fe 	.word	0x0003c8fe
   1884c:	00018655 	.word	0x00018655
   18850:	00018681 	.word	0x00018681
   18854:	0003c83d 	.word	0x0003c83d
   18858:	20027524 	.word	0x20027524
   1885c:	0003c90f 	.word	0x0003c90f
   18860:	0003c941 	.word	0x0003c941

00018864 <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   18864:	2803      	cmp	r0, #3
{
   18866:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   18868:	d906      	bls.n	18878 <_check_fd+0x14>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (fdtable[fd].obj == NULL) {
		errno = EBADF;
   1886a:	f01c fe32 	bl	354d2 <__errno>
   1886e:	2309      	movs	r3, #9
   18870:	6003      	str	r3, [r0, #0]
   18872:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return -1;
	}

	return 0;
}
   18876:	bd08      	pop	{r3, pc}
	if (fdtable[fd].obj == NULL) {
   18878:	4b03      	ldr	r3, [pc, #12]	; (18888 <_check_fd+0x24>)
   1887a:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   1887e:	2b00      	cmp	r3, #0
   18880:	d0f3      	beq.n	1886a <_check_fd+0x6>
	return 0;
   18882:	2000      	movs	r0, #0
   18884:	e7f7      	b.n	18876 <_check_fd+0x12>
   18886:	bf00      	nop
   18888:	200216cc 	.word	0x200216cc

0001888c <z_get_fd_obj>:

void *z_get_fd_obj(int fd, const struct fd_op_vtable *vtable, int err)
{
   1888c:	b570      	push	{r4, r5, r6, lr}
   1888e:	4604      	mov	r4, r0
   18890:	460d      	mov	r5, r1
   18892:	4616      	mov	r6, r2
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
   18894:	f7ff ffe6 	bl	18864 <_check_fd>
   18898:	2800      	cmp	r0, #0
   1889a:	db09      	blt.n	188b0 <z_get_fd_obj+0x24>
		return NULL;
	}

	fd_entry = &fdtable[fd];

	if (vtable != NULL && fd_entry->vtable != vtable) {
   1889c:	4b07      	ldr	r3, [pc, #28]	; (188bc <z_get_fd_obj+0x30>)
   1889e:	b14d      	cbz	r5, 188b4 <z_get_fd_obj+0x28>
   188a0:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
   188a4:	6852      	ldr	r2, [r2, #4]
   188a6:	42aa      	cmp	r2, r5
   188a8:	d004      	beq.n	188b4 <z_get_fd_obj+0x28>
		errno = err;
   188aa:	f01c fe12 	bl	354d2 <__errno>
   188ae:	6006      	str	r6, [r0, #0]
		return NULL;
   188b0:	2000      	movs	r0, #0
   188b2:	e001      	b.n	188b8 <z_get_fd_obj+0x2c>
		return NULL;
	}

	return fd_entry->obj;
   188b4:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
}
   188b8:	bd70      	pop	{r4, r5, r6, pc}
   188ba:	bf00      	nop
   188bc:	200216cc 	.word	0x200216cc

000188c0 <z_get_fd_obj_and_vtable>:

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable)
{
   188c0:	b538      	push	{r3, r4, r5, lr}
   188c2:	4604      	mov	r4, r0
   188c4:	460d      	mov	r5, r1
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
   188c6:	f7ff ffcd 	bl	18864 <_check_fd>
   188ca:	2800      	cmp	r0, #0
		return NULL;
	}

	fd_entry = &fdtable[fd];
	*vtable = fd_entry->vtable;
   188cc:	bfa9      	itett	ge
   188ce:	4b05      	ldrge	r3, [pc, #20]	; (188e4 <z_get_fd_obj_and_vtable+0x24>)
		return NULL;
   188d0:	2000      	movlt	r0, #0
	*vtable = fd_entry->vtable;
   188d2:	eb03 02c4 	addge.w	r2, r3, r4, lsl #3
   188d6:	6852      	ldrge	r2, [r2, #4]

	return fd_entry->obj;
   188d8:	bfa4      	itt	ge
   188da:	f853 0034 	ldrge.w	r0, [r3, r4, lsl #3]
	*vtable = fd_entry->vtable;
   188de:	602a      	strge	r2, [r5, #0]
}
   188e0:	bd38      	pop	{r3, r4, r5, pc}
   188e2:	bf00      	nop
   188e4:	200216cc 	.word	0x200216cc

000188e8 <z_reserve_fd>:

int z_reserve_fd(void)
{
   188e8:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   188ea:	2400      	movs	r4, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   188ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   188f0:	480c      	ldr	r0, [pc, #48]	; (18924 <z_reserve_fd+0x3c>)
   188f2:	f013 fe81 	bl	2c5f8 <z_impl_k_mutex_lock>
		if (fdtable[fd].obj == NULL) {
   188f6:	4b0c      	ldr	r3, [pc, #48]	; (18928 <z_reserve_fd+0x40>)
   188f8:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
   188fc:	b16a      	cbz	r2, 1891a <z_reserve_fd+0x32>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   188fe:	3401      	adds	r4, #1
   18900:	2c04      	cmp	r4, #4
   18902:	d1f9      	bne.n	188f8 <z_reserve_fd+0x10>
	errno = ENFILE;
   18904:	f01c fde5 	bl	354d2 <__errno>
   18908:	2317      	movs	r3, #23
	return -1;
   1890a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	errno = ENFILE;
   1890e:	6003      	str	r3, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   18910:	4804      	ldr	r0, [pc, #16]	; (18924 <z_reserve_fd+0x3c>)
   18912:	f013 ff4f 	bl	2c7b4 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
   18916:	4620      	mov	r0, r4
   18918:	bd10      	pop	{r4, pc}
		fdtable[fd].obj = FD_OBJ_RESERVED;
   1891a:	2201      	movs	r2, #1
   1891c:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
   18920:	e7f6      	b.n	18910 <z_reserve_fd+0x28>
   18922:	bf00      	nop
   18924:	20020734 	.word	0x20020734
   18928:	200216cc 	.word	0x200216cc

0001892c <z_finalize_fd>:

void z_finalize_fd(int fd, void *obj, const struct fd_op_vtable *vtable)
{
	/* Assumes fd was already bounds-checked. */
	fdtable[fd].obj = obj;
   1892c:	4b03      	ldr	r3, [pc, #12]	; (1893c <z_finalize_fd+0x10>)
   1892e:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	fdtable[fd].vtable = vtable;
   18932:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   18936:	605a      	str	r2, [r3, #4]
}
   18938:	4770      	bx	lr
   1893a:	bf00      	nop
   1893c:	200216cc 	.word	0x200216cc

00018940 <z_free_fd>:

void z_free_fd(int fd)
{
	/* Assumes fd was already bounds-checked. */
	fdtable[fd].obj = NULL;
   18940:	2200      	movs	r2, #0
   18942:	4b02      	ldr	r3, [pc, #8]	; (1894c <z_free_fd+0xc>)
   18944:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
}
   18948:	4770      	bx	lr
   1894a:	bf00      	nop
   1894c:	200216cc 	.word	0x200216cc

00018950 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
   18950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18954:	b085      	sub	sp, #20
   18956:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   18958:	469b      	mov	fp, r3
   1895a:	2c01      	cmp	r4, #1
   1895c:	bfb8      	it	lt
   1895e:	2401      	movlt	r4, #1
   18960:	2b01      	cmp	r3, #1
   18962:	bf0c      	ite	eq
   18964:	2330      	moveq	r3, #48	; 0x30
   18966:	2320      	movne	r3, #32
   18968:	4616      	mov	r6, r2
   1896a:	4682      	mov	sl, r0
   1896c:	4688      	mov	r8, r1
   1896e:	2501      	movs	r5, #1
   18970:	270a      	movs	r7, #10
   18972:	2200      	movs	r2, #0
   18974:	f8df 906c 	ldr.w	r9, [pc, #108]	; 189e4 <_printk_dec_ulong+0x94>
   18978:	9302      	str	r3, [sp, #8]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
   1897a:	fbb6 f3f9 	udiv	r3, r6, r9
   1897e:	9301      	str	r3, [sp, #4]
   18980:	b90a      	cbnz	r2, 18986 <_printk_dec_ulong+0x36>
   18982:	45b1      	cmp	r9, r6
   18984:	d81c      	bhi.n	189c0 <_printk_dec_ulong+0x70>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
   18986:	9b01      	ldr	r3, [sp, #4]
   18988:	4641      	mov	r1, r8
   1898a:	f103 0030 	add.w	r0, r3, #48	; 0x30
   1898e:	47d0      	blx	sl
			found_largest_digit = 1;
   18990:	2201      	movs	r2, #1
			digits++;
   18992:	3501      	adds	r5, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
   18994:	9b01      	ldr	r3, [sp, #4]
		remaining--;
   18996:	3f01      	subs	r7, #1
		remainder %= pos;
   18998:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
   1899c:	230a      	movs	r3, #10
	while (pos >= 10) {
   1899e:	2f01      	cmp	r7, #1
		pos /= 10;
   189a0:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
   189a4:	d1e9      	bne.n	1897a <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
   189a6:	4641      	mov	r1, r8
   189a8:	f106 0030 	add.w	r0, r6, #48	; 0x30
   189ac:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
   189ae:	f1bb 0f03 	cmp.w	fp, #3
   189b2:	d102      	bne.n	189ba <_printk_dec_ulong+0x6a>
		remaining = min_width - digits;
   189b4:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
   189b6:	2c00      	cmp	r4, #0
   189b8:	dc0e      	bgt.n	189d8 <_printk_dec_ulong+0x88>
			out(' ', ctx);
		}
	}
}
   189ba:	b005      	add	sp, #20
   189bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
   189c0:	42bc      	cmp	r4, r7
   189c2:	dbe7      	blt.n	18994 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
   189c4:	f1bb 0f02 	cmp.w	fp, #2
   189c8:	d8e4      	bhi.n	18994 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
   189ca:	4641      	mov	r1, r8
   189cc:	9802      	ldr	r0, [sp, #8]
   189ce:	9203      	str	r2, [sp, #12]
			digits++;
   189d0:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
   189d2:	47d0      	blx	sl
			digits++;
   189d4:	9a03      	ldr	r2, [sp, #12]
   189d6:	e7dd      	b.n	18994 <_printk_dec_ulong+0x44>
			out(' ', ctx);
   189d8:	4641      	mov	r1, r8
   189da:	2020      	movs	r0, #32
   189dc:	47d0      	blx	sl
   189de:	3c01      	subs	r4, #1
   189e0:	e7e9      	b.n	189b6 <_printk_dec_ulong+0x66>
   189e2:	bf00      	nop
   189e4:	3b9aca00 	.word	0x3b9aca00

000189e8 <__printk_hook_install>:
	_char_out = fn;
   189e8:	4b01      	ldr	r3, [pc, #4]	; (189f0 <__printk_hook_install+0x8>)
   189ea:	6018      	str	r0, [r3, #0]
}
   189ec:	4770      	bx	lr
   189ee:	bf00      	nop
   189f0:	200200a4 	.word	0x200200a4

000189f4 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   189f4:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
   189f6:	2500      	movs	r5, #0
{
   189f8:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   189fa:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   189fe:	4604      	mov	r4, r0

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
   18a00:	a901      	add	r1, sp, #4
   18a02:	4805      	ldr	r0, [pc, #20]	; (18a18 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   18a04:	9503      	str	r5, [sp, #12]
	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
   18a06:	f01a fc64 	bl	332d2 <z_vprintk>

	if (ctx.count < ctx.max) {
   18a0a:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   18a0e:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   18a10:	bfb8      	it	lt
   18a12:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   18a14:	b005      	add	sp, #20
   18a16:	bd30      	pop	{r4, r5, pc}
   18a18:	000332ad 	.word	0x000332ad

00018a1c <timeutil_timegm64>:

	return era * 146097 + (time_t)doe - 719468;
}

s64_t timeutil_timegm64(const struct tm *tm)
{
   18a1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	s64_t y = 1900 + (s64_t)tm->tm_year;
	unsigned int m = tm->tm_mon + 1;
   18a20:	6903      	ldr	r3, [r0, #16]
	unsigned int d = tm->tm_mday - 1;
   18a22:	68c4      	ldr	r4, [r0, #12]
	unsigned int m = tm->tm_mon + 1;
   18a24:	f103 0801 	add.w	r8, r3, #1
	unsigned int d = tm->tm_mday - 1;
   18a28:	1e63      	subs	r3, r4, #1
	s64_t y = 1900 + (s64_t)tm->tm_year;
   18a2a:	f240 746c 	movw	r4, #1900	; 0x76c
   18a2e:	2500      	movs	r5, #0
	unsigned int d = tm->tm_mday - 1;
   18a30:	461e      	mov	r6, r3
	s64_t y = 1900 + (s64_t)tm->tm_year;
   18a32:	6943      	ldr	r3, [r0, #20]
{
   18a34:	4681      	mov	r9, r0
	s64_t y = 1900 + (s64_t)tm->tm_year;
   18a36:	18e1      	adds	r1, r4, r3
   18a38:	eb45 72e3 	adc.w	r2, r5, r3, asr #31
	y -= m <= 2;
   18a3c:	f1b8 0f02 	cmp.w	r8, #2
   18a40:	bf8c      	ite	hi
   18a42:	2300      	movhi	r3, #0
   18a44:	2301      	movls	r3, #1
   18a46:	1acc      	subs	r4, r1, r3
   18a48:	f162 0500 	sbc.w	r5, r2, #0
	s64_t era = (y >= 0 ? y : y - 399) / 400;
   18a4c:	2c00      	cmp	r4, #0
   18a4e:	f175 0300 	sbcs.w	r3, r5, #0
   18a52:	da5c      	bge.n	18b0e <timeutil_timegm64+0xf2>
   18a54:	f46f 70c7 	mvn.w	r0, #398	; 0x18e
   18a58:	f44f 72c8 	mov.w	r2, #400	; 0x190
   18a5c:	2300      	movs	r3, #0
   18a5e:	1820      	adds	r0, r4, r0
   18a60:	f145 31ff 	adc.w	r1, r5, #4294967295	; 0xffffffff
   18a64:	f7f4 fe34 	bl	d6d0 <__aeabi_ldivmod>
	unsigned int yoe = y - era * 400;
   18a68:	4b2c      	ldr	r3, [pc, #176]	; (18b1c <timeutil_timegm64+0x100>)
	s64_t ndays = time_days_from_civil(y, m, d);
	s64_t time = tm->tm_sec;

	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   18a6a:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
	unsigned int yoe = y - era * 400;
   18a6e:	fb03 4400 	mla	r4, r3, r0, r4
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   18a72:	e9d9 5300 	ldrd	r5, r3, [r9]
   18a76:	469a      	mov	sl, r3
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   18a78:	f1b8 0f02 	cmp.w	r8, #2
   18a7c:	bf8c      	ite	hi
   18a7e:	f06f 0e02 	mvnhi.w	lr, #2
   18a82:	f04f 0e09 	movls.w	lr, #9
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   18a86:	ea4f 7be3 	mov.w	fp, r3, asr #31
   18a8a:	f8d9 3008 	ldr.w	r3, [r9, #8]
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   18a8e:	44f0      	add	r8, lr
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   18a90:	fbcc ab03 	smlal	sl, fp, ip, r3
   18a94:	fbaa 230c 	umull	r2, r3, sl, ip
   18a98:	fb0c 330b 	mla	r3, ip, fp, r3
   18a9c:	eb12 0905 	adds.w	r9, r2, r5
   18aa0:	eb43 7ae5 	adc.w	sl, r3, r5, asr #31
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   18aa4:	f240 156d 	movw	r5, #365	; 0x16d
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   18aa8:	f04f 0e99 	mov.w	lr, #153	; 0x99
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   18aac:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   18ab0:	fb05 c504 	mla	r5, r5, r4, ip
   18ab4:	f04f 0c64 	mov.w	ip, #100	; 0x64
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   18ab8:	fb0e fe08 	mul.w	lr, lr, r8
   18abc:	f04f 0805 	mov.w	r8, #5
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   18ac0:	fbb4 f4fc 	udiv	r4, r4, ip
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   18ac4:	f10e 0e02 	add.w	lr, lr, #2
   18ac8:	fbbe fef8 	udiv	lr, lr, r8
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   18acc:	4435      	add	r5, r6
	return era * 146097 + (time_t)doe - 719468;
   18ace:	f8df c058 	ldr.w	ip, [pc, #88]	; 18b28 <timeutil_timegm64+0x10c>
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   18ad2:	1b2c      	subs	r4, r5, r4
   18ad4:	44a6      	add	lr, r4
	return era * 146097 + (time_t)doe - 719468;
   18ad6:	fba0 450c 	umull	r4, r5, r0, ip
   18ada:	fb0c 5501 	mla	r5, ip, r1, r5
   18ade:	4910      	ldr	r1, [pc, #64]	; (18b20 <timeutil_timegm64+0x104>)
   18ae0:	1863      	adds	r3, r4, r1
   18ae2:	9300      	str	r3, [sp, #0]
   18ae4:	f145 33ff 	adc.w	r3, r5, #4294967295	; 0xffffffff
	time += 86400LL * ndays;
   18ae8:	490e      	ldr	r1, [pc, #56]	; (18b24 <timeutil_timegm64+0x108>)
	return era * 146097 + (time_t)doe - 719468;
   18aea:	9301      	str	r3, [sp, #4]
   18aec:	e9dd 6700 	ldrd	r6, r7, [sp]
   18af0:	eb16 060e 	adds.w	r6, r6, lr
	time += 86400LL * ndays;
   18af4:	fba6 4501 	umull	r4, r5, r6, r1
	return era * 146097 + (time_t)doe - 719468;
   18af8:	f147 0700 	adc.w	r7, r7, #0
	time += 86400LL * ndays;
   18afc:	fb01 5507 	mla	r5, r1, r7, r5

	return time;
}
   18b00:	eb14 0009 	adds.w	r0, r4, r9
   18b04:	eb45 010a 	adc.w	r1, r5, sl
   18b08:	b003      	add	sp, #12
   18b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t era = (y >= 0 ? y : y - 399) / 400;
   18b0e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   18b12:	2300      	movs	r3, #0
   18b14:	4620      	mov	r0, r4
   18b16:	4629      	mov	r1, r5
   18b18:	e7a4      	b.n	18a64 <timeutil_timegm64+0x48>
   18b1a:	bf00      	nop
   18b1c:	fffffe70 	.word	0xfffffe70
   18b20:	fff50594 	.word	0xfff50594
   18b24:	00015180 	.word	0x00015180
   18b28:	00023ab1 	.word	0x00023ab1

00018b2c <str_encode>:
	return append_bytes("]", 1, data);
}

static int str_encode(const char **str, json_append_bytes_t append_bytes,
		      void *data)
{
   18b2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18b2e:	460c      	mov	r4, r1
   18b30:	4606      	mov	r6, r0
	int ret;

	ret = append_bytes("\"", 1, data);
   18b32:	2101      	movs	r1, #1
   18b34:	4811      	ldr	r0, [pc, #68]	; (18b7c <str_encode+0x50>)
{
   18b36:	4615      	mov	r5, r2
	ret = append_bytes("\"", 1, data);
   18b38:	47a0      	blx	r4
	if (ret < 0) {
   18b3a:	2800      	cmp	r0, #0
   18b3c:	db17      	blt.n	18b6e <str_encode+0x42>
			char bytes[2] = { '\\', escaped };
   18b3e:	275c      	movs	r7, #92	; 0x5c
   18b40:	6836      	ldr	r6, [r6, #0]
   18b42:	4633      	mov	r3, r6
	for (cur = str; ret == 0 && *cur; cur++) {
   18b44:	f816 0b01 	ldrb.w	r0, [r6], #1
   18b48:	b920      	cbnz	r0, 18b54 <str_encode+0x28>
		return ret;
	}

	ret = json_escape_internal(*str, append_bytes, data);
	if (!ret) {
		return append_bytes("\"", 1, data);
   18b4a:	462a      	mov	r2, r5
   18b4c:	2101      	movs	r1, #1
   18b4e:	480b      	ldr	r0, [pc, #44]	; (18b7c <str_encode+0x50>)
   18b50:	47a0      	blx	r4
   18b52:	e00c      	b.n	18b6e <str_encode+0x42>
		char escaped = escape_as(*cur);
   18b54:	f01b f813 	bl	33b7e <escape_as>
		if (escaped) {
   18b58:	b158      	cbz	r0, 18b72 <str_encode+0x46>
			ret = append_bytes(bytes, 2, data);
   18b5a:	462a      	mov	r2, r5
   18b5c:	2102      	movs	r1, #2
			char bytes[2] = { '\\', escaped };
   18b5e:	f88d 0005 	strb.w	r0, [sp, #5]
   18b62:	f88d 7004 	strb.w	r7, [sp, #4]
			ret = append_bytes(bytes, 2, data);
   18b66:	a801      	add	r0, sp, #4
			ret = append_bytes(cur, 1, data);
   18b68:	47a0      	blx	r4
	for (cur = str; ret == 0 && *cur; cur++) {
   18b6a:	2800      	cmp	r0, #0
   18b6c:	d0e9      	beq.n	18b42 <str_encode+0x16>
	}

	return ret;
}
   18b6e:	b003      	add	sp, #12
   18b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ret = append_bytes(cur, 1, data);
   18b72:	462a      	mov	r2, r5
   18b74:	2101      	movs	r1, #1
   18b76:	4618      	mov	r0, r3
   18b78:	e7f6      	b.n	18b68 <str_encode+0x3c>
   18b7a:	bf00      	nop
   18b7c:	0003c50b 	.word	0x0003c50b

00018b80 <json_obj_encode>:
}

int json_obj_encode(const struct json_obj_descr *descr, size_t descr_len,
		    const void *val, json_append_bytes_t append_bytes,
		    void *data)
{
   18b80:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b84:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   18b86:	4606      	mov	r6, r0
   18b88:	4688      	mov	r8, r1
   18b8a:	4691      	mov	r9, r2
	size_t i;
	int ret;

	ret = append_bytes("{", 1, data);
   18b8c:	2101      	movs	r1, #1
   18b8e:	462a      	mov	r2, r5
   18b90:	481b      	ldr	r0, [pc, #108]	; (18c00 <json_obj_encode+0x80>)
{
   18b92:	461c      	mov	r4, r3
	ret = append_bytes("{", 1, data);
   18b94:	4798      	blx	r3
	if (ret < 0) {
   18b96:	2800      	cmp	r0, #0
   18b98:	db2f      	blt.n	18bfa <json_obj_encode+0x7a>
		return ret;
	}

	for (i = 0; i < descr_len; i++) {
   18b9a:	2700      	movs	r7, #0
				 append_bytes, data);
		if (ret < 0) {
			return ret;
		}

		ret = append_bytes(":", 1, data);
   18b9c:	f8df a068 	ldr.w	sl, [pc, #104]	; 18c08 <json_obj_encode+0x88>
		if (ret < 0) {
			return ret;
		}

		if (i < descr_len - 1) {
			ret = append_bytes(",", 1, data);
   18ba0:	f8df b068 	ldr.w	fp, [pc, #104]	; 18c0c <json_obj_encode+0x8c>
	for (i = 0; i < descr_len; i++) {
   18ba4:	45b8      	cmp	r8, r7
		ret = str_encode((const char **)&descr[i].field_name,
   18ba6:	462a      	mov	r2, r5
	for (i = 0; i < descr_len; i++) {
   18ba8:	d106      	bne.n	18bb8 <json_obj_encode+0x38>
				return ret;
			}
		}
	}

	return append_bytes("}", 1, data);
   18baa:	2101      	movs	r1, #1
   18bac:	4623      	mov	r3, r4
   18bae:	4815      	ldr	r0, [pc, #84]	; (18c04 <json_obj_encode+0x84>)
}
   18bb0:	b001      	add	sp, #4
   18bb2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return append_bytes("}", 1, data);
   18bb6:	4718      	bx	r3
		ret = str_encode((const char **)&descr[i].field_name,
   18bb8:	4621      	mov	r1, r4
   18bba:	4630      	mov	r0, r6
   18bbc:	f7ff ffb6 	bl	18b2c <str_encode>
		if (ret < 0) {
   18bc0:	2800      	cmp	r0, #0
   18bc2:	db1a      	blt.n	18bfa <json_obj_encode+0x7a>
		ret = append_bytes(":", 1, data);
   18bc4:	462a      	mov	r2, r5
   18bc6:	2101      	movs	r1, #1
   18bc8:	4650      	mov	r0, sl
   18bca:	47a0      	blx	r4
		if (ret < 0) {
   18bcc:	2800      	cmp	r0, #0
   18bce:	db14      	blt.n	18bfa <json_obj_encode+0x7a>
		ret = encode(&descr[i], val, append_bytes, data);
   18bd0:	462b      	mov	r3, r5
   18bd2:	4622      	mov	r2, r4
   18bd4:	4649      	mov	r1, r9
   18bd6:	4630      	mov	r0, r6
   18bd8:	f000 f81a 	bl	18c10 <encode>
		if (ret < 0) {
   18bdc:	2800      	cmp	r0, #0
   18bde:	db0c      	blt.n	18bfa <json_obj_encode+0x7a>
		if (i < descr_len - 1) {
   18be0:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   18be4:	429f      	cmp	r7, r3
   18be6:	d302      	bcc.n	18bee <json_obj_encode+0x6e>
	for (i = 0; i < descr_len; i++) {
   18be8:	3701      	adds	r7, #1
   18bea:	3610      	adds	r6, #16
   18bec:	e7da      	b.n	18ba4 <json_obj_encode+0x24>
			ret = append_bytes(",", 1, data);
   18bee:	462a      	mov	r2, r5
   18bf0:	2101      	movs	r1, #1
   18bf2:	4658      	mov	r0, fp
   18bf4:	47a0      	blx	r4
			if (ret < 0) {
   18bf6:	2800      	cmp	r0, #0
   18bf8:	daf6      	bge.n	18be8 <json_obj_encode+0x68>
}
   18bfa:	b001      	add	sp, #4
   18bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c00:	0003c966 	.word	0x0003c966
   18c04:	0003c96a 	.word	0x0003c96a
   18c08:	0003e3de 	.word	0x0003e3de
   18c0c:	0003c968 	.word	0x0003c968

00018c10 <encode>:
{
   18c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c14:	461d      	mov	r5, r3
	switch (descr->type) {
   18c16:	7943      	ldrb	r3, [r0, #5]
{
   18c18:	4614      	mov	r4, r2
	switch (descr->type) {
   18c1a:	085b      	lsrs	r3, r3, #1
	void *ptr = (char *)val + descr->offset;
   18c1c:	88c2      	ldrh	r2, [r0, #6]
	switch (descr->type) {
   18c1e:	2b5b      	cmp	r3, #91	; 0x5b
{
   18c20:	b087      	sub	sp, #28
	void *ptr = (char *)val + descr->offset;
   18c22:	eb01 0602 	add.w	r6, r1, r2
	switch (descr->type) {
   18c26:	d01f      	beq.n	18c68 <encode+0x58>
   18c28:	d806      	bhi.n	18c38 <encode+0x28>
   18c2a:	2b22      	cmp	r3, #34	; 0x22
   18c2c:	d014      	beq.n	18c58 <encode+0x48>
   18c2e:	2b30      	cmp	r3, #48	; 0x30
   18c30:	d051      	beq.n	18cd6 <encode+0xc6>
		return -EINVAL;
   18c32:	f06f 0015 	mvn.w	r0, #21
   18c36:	e014      	b.n	18c62 <encode+0x52>
	switch (descr->type) {
   18c38:	2b74      	cmp	r3, #116	; 0x74
   18c3a:	d003      	beq.n	18c44 <encode+0x34>
   18c3c:	2b7b      	cmp	r3, #123	; 0x7b
   18c3e:	d042      	beq.n	18cc6 <encode+0xb6>
   18c40:	2b66      	cmp	r3, #102	; 0x66
   18c42:	d1f6      	bne.n	18c32 <encode+0x22>
	if (*value) {
   18c44:	5c8b      	ldrb	r3, [r1, r2]
		return append_bytes("true", 4, data);
   18c46:	462a      	mov	r2, r5
	if (*value) {
   18c48:	b11b      	cbz	r3, 18c52 <encode+0x42>
		return append_bytes("true", 4, data);
   18c4a:	2104      	movs	r1, #4
   18c4c:	482b      	ldr	r0, [pc, #172]	; (18cfc <encode+0xec>)
	return append_bytes(buf, (size_t)ret, data);
   18c4e:	47a0      	blx	r4
   18c50:	e007      	b.n	18c62 <encode+0x52>
	return append_bytes("false", 5, data);
   18c52:	2105      	movs	r1, #5
   18c54:	482a      	ldr	r0, [pc, #168]	; (18d00 <encode+0xf0>)
   18c56:	e7fa      	b.n	18c4e <encode+0x3e>
		return str_encode(ptr, append_bytes, data);
   18c58:	462a      	mov	r2, r5
   18c5a:	4621      	mov	r1, r4
   18c5c:	4630      	mov	r0, r6
   18c5e:	f7ff ff65 	bl	18b2c <str_encode>
}
   18c62:	b007      	add	sp, #28
   18c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return arr_encode(descr->array.element_descr, ptr,
   18c68:	f8d0 8008 	ldr.w	r8, [r0, #8]
	ptrdiff_t elem_size = get_elem_size(elem_descr);
   18c6c:	4640      	mov	r0, r8
   18c6e:	f01a ff48 	bl	33b02 <get_elem_size>
	size_t n_elem = *(size_t *)((char *)val + elem_descr->offset);
   18c72:	f8b8 3006 	ldrh.w	r3, [r8, #6]
	ptrdiff_t elem_size = get_elem_size(elem_descr);
   18c76:	4682      	mov	sl, r0
	size_t n_elem = *(size_t *)((char *)val + elem_descr->offset);
   18c78:	f851 9003 	ldr.w	r9, [r1, r3]
	ret = append_bytes("[", 1, data);
   18c7c:	462a      	mov	r2, r5
   18c7e:	2101      	movs	r1, #1
   18c80:	4820      	ldr	r0, [pc, #128]	; (18d04 <encode+0xf4>)
   18c82:	47a0      	blx	r4
	if (ret < 0) {
   18c84:	2800      	cmp	r0, #0
   18c86:	dbec      	blt.n	18c62 <encode+0x52>
	for (i = 0; i < n_elem; i++) {
   18c88:	2700      	movs	r7, #0
		if (i < n_elem - 1) {
   18c8a:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
	for (i = 0; i < n_elem; i++) {
   18c8e:	45b9      	cmp	r9, r7
   18c90:	d103      	bne.n	18c9a <encode+0x8a>
	return append_bytes("]", 1, data);
   18c92:	462a      	mov	r2, r5
   18c94:	2101      	movs	r1, #1
   18c96:	481c      	ldr	r0, [pc, #112]	; (18d08 <encode+0xf8>)
   18c98:	e7d9      	b.n	18c4e <encode+0x3e>
		ret = encode(elem_descr, (char *)field - elem_descr->offset,
   18c9a:	f8b8 1006 	ldrh.w	r1, [r8, #6]
   18c9e:	462b      	mov	r3, r5
   18ca0:	4622      	mov	r2, r4
   18ca2:	1a71      	subs	r1, r6, r1
   18ca4:	4640      	mov	r0, r8
   18ca6:	f7ff ffb3 	bl	18c10 <encode>
		if (ret < 0) {
   18caa:	2800      	cmp	r0, #0
   18cac:	dbd9      	blt.n	18c62 <encode+0x52>
		if (i < n_elem - 1) {
   18cae:	45bb      	cmp	fp, r7
   18cb0:	d802      	bhi.n	18cb8 <encode+0xa8>
		field = (char *)field + elem_size;
   18cb2:	4456      	add	r6, sl
	for (i = 0; i < n_elem; i++) {
   18cb4:	3701      	adds	r7, #1
   18cb6:	e7ea      	b.n	18c8e <encode+0x7e>
			ret = append_bytes(",", 1, data);
   18cb8:	462a      	mov	r2, r5
   18cba:	2101      	movs	r1, #1
   18cbc:	4813      	ldr	r0, [pc, #76]	; (18d0c <encode+0xfc>)
   18cbe:	47a0      	blx	r4
			if (ret < 0) {
   18cc0:	2800      	cmp	r0, #0
   18cc2:	daf6      	bge.n	18cb2 <encode+0xa2>
   18cc4:	e7cd      	b.n	18c62 <encode+0x52>
		return json_obj_encode(descr->object.sub_descr,
   18cc6:	9500      	str	r5, [sp, #0]
   18cc8:	4623      	mov	r3, r4
   18cca:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   18cce:	4632      	mov	r2, r6
   18cd0:	f7ff ff56 	bl	18b80 <json_obj_encode>
   18cd4:	e7c5      	b.n	18c62 <encode+0x52>
	ret = snprintk(buf, sizeof(buf), "%d", *num);
   18cd6:	588b      	ldr	r3, [r1, r2]
   18cd8:	210c      	movs	r1, #12
   18cda:	4a0d      	ldr	r2, [pc, #52]	; (18d10 <encode+0x100>)
   18cdc:	eb0d 0001 	add.w	r0, sp, r1
   18ce0:	f01a fc74 	bl	335cc <snprintk>
	if (ret < 0) {
   18ce4:	2800      	cmp	r0, #0
   18ce6:	dbbc      	blt.n	18c62 <encode+0x52>
	if (ret >= (int)sizeof(buf)) {
   18ce8:	280b      	cmp	r0, #11
   18cea:	dc03      	bgt.n	18cf4 <encode+0xe4>
	return append_bytes(buf, (size_t)ret, data);
   18cec:	4601      	mov	r1, r0
   18cee:	462a      	mov	r2, r5
   18cf0:	a803      	add	r0, sp, #12
   18cf2:	e7ac      	b.n	18c4e <encode+0x3e>
		return -ENOMEM;
   18cf4:	f06f 000b 	mvn.w	r0, #11
		return num_encode(ptr, append_bytes, data);
   18cf8:	e7b3      	b.n	18c62 <encode+0x52>
   18cfa:	bf00      	nop
   18cfc:	0003c4f7 	.word	0x0003c4f7
   18d00:	0003c4f1 	.word	0x0003c4f1
   18d04:	0003c964 	.word	0x0003c964
   18d08:	0003c4fd 	.word	0x0003c4fd
   18d0c:	0003c968 	.word	0x0003c968
   18d10:	0003c655 	.word	0x0003c655

00018d14 <nordicsemi_nrf91_init>:
	__asm__ volatile(
   18d14:	f04f 0220 	mov.w	r2, #32
   18d18:	f3ef 8311 	mrs	r3, BASEPRI
   18d1c:	f382 8811 	msr	BASEPRI, r2
   18d20:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   18d24:	2101      	movs	r1, #1
   18d26:	4a04      	ldr	r2, [pc, #16]	; (18d38 <nordicsemi_nrf91_init+0x24>)
   18d28:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   18d2c:	f383 8811 	msr	BASEPRI, r3
   18d30:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   18d34:	2000      	movs	r0, #0
   18d36:	4770      	bx	lr
   18d38:	40039000 	.word	0x40039000

00018d3c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   18d3c:	b120      	cbz	r0, 18d48 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   18d3e:	4b03      	ldr	r3, [pc, #12]	; (18d4c <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   18d40:	0180      	lsls	r0, r0, #6
   18d42:	f043 0301 	orr.w	r3, r3, #1
   18d46:	4718      	bx	r3

void arch_busy_wait(u32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   18d48:	4770      	bx	lr
   18d4a:	bf00      	nop
   18d4c:	0003a120 	.word	0x0003a120

00018d50 <log_generic>:
	if (_is_user_context()) {
		log_generic_from_user(src_level, fmt, ap);
	} else  if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) &&
	    (!IS_ENABLED(CONFIG_LOG_FRONTEND))) {
		struct log_backend const *backend;
		u32_t timestamp = timestamp_func();
   18d50:	4b13      	ldr	r3, [pc, #76]	; (18da0 <log_generic+0x50>)
{
   18d52:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		u32_t timestamp = timestamp_func();
   18d56:	681b      	ldr	r3, [r3, #0]
{
   18d58:	4680      	mov	r8, r0
   18d5a:	4689      	mov	r9, r1
   18d5c:	4692      	mov	sl, r2
		u32_t timestamp = timestamp_func();
   18d5e:	4798      	blx	r3

		for (int i = 0; i < log_backend_count_get(); i++) {
   18d60:	2600      	movs	r6, #0
		u32_t timestamp = timestamp_func();
   18d62:	4607      	mov	r7, r0
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   18d64:	4c0f      	ldr	r4, [pc, #60]	; (18da4 <log_generic+0x54>)
   18d66:	4d10      	ldr	r5, [pc, #64]	; (18da8 <log_generic+0x58>)
   18d68:	1b2d      	subs	r5, r5, r4
   18d6a:	112d      	asrs	r5, r5, #4
		for (int i = 0; i < log_backend_count_get(); i++) {
   18d6c:	42ae      	cmp	r6, r5
   18d6e:	db02      	blt.n	18d76 <log_generic+0x26>
			args[i] = va_arg(ap, log_arg_t);
		}

		log_n(fmt, args, nargs, src_level);
	}
}
   18d70:	b003      	add	sp, #12
   18d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (log_backend_is_active(backend)) {
   18d76:	4620      	mov	r0, r4
   18d78:	f01a ff26 	bl	33bc8 <log_backend_is_active>
   18d7c:	b160      	cbz	r0, 18d98 <log_generic+0x48>
	if (backend->api->put_sync_string) {
   18d7e:	6823      	ldr	r3, [r4, #0]
   18d80:	f8d3 b004 	ldr.w	fp, [r3, #4]
   18d84:	f1bb 0f00 	cmp.w	fp, #0
   18d88:	d006      	beq.n	18d98 <log_generic+0x48>
		backend->api->put_sync_string(backend, src_level,
   18d8a:	f8cd a000 	str.w	sl, [sp]
   18d8e:	464b      	mov	r3, r9
   18d90:	463a      	mov	r2, r7
   18d92:	4641      	mov	r1, r8
   18d94:	4620      	mov	r0, r4
   18d96:	47d8      	blx	fp
		for (int i = 0; i < log_backend_count_get(); i++) {
   18d98:	3601      	adds	r6, #1
   18d9a:	3410      	adds	r4, #16
   18d9c:	e7e6      	b.n	18d6c <log_generic+0x1c>
   18d9e:	bf00      	nop
   18da0:	200200a8 	.word	0x200200a8
   18da4:	0003a018 	.word	0x0003a018
   18da8:	0003a028 	.word	0x0003a028

00018dac <log_core_init>:
	/* Set default timestamp. */
	if (sys_clock_hw_cycles_per_sec() > 1000000) {
		timestamp_func = k_uptime_get_32;
		freq = 1000;
	} else {
		timestamp_func = k_cycle_get_32_wrapper;
   18dac:	4b03      	ldr	r3, [pc, #12]	; (18dbc <log_core_init+0x10>)
   18dae:	4a04      	ldr	r2, [pc, #16]	; (18dc0 <log_core_init+0x14>)
		freq = sys_clock_hw_cycles_per_sec();
	}

	log_output_timestamp_freq_set(freq);
   18db0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
   18db4:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
   18db6:	f000 ba35 	b.w	19224 <log_output_timestamp_freq_set>
   18dba:	bf00      	nop
   18dbc:	200200a8 	.word	0x200200a8
   18dc0:	00033bcf 	.word	0x00033bcf

00018dc4 <log_source_name_get>:
   18dc4:	4a04      	ldr	r2, [pc, #16]	; (18dd8 <log_source_name_get+0x14>)
   18dc6:	4b05      	ldr	r3, [pc, #20]	; (18ddc <log_source_name_get+0x18>)
   18dc8:	1a9b      	subs	r3, r3, r2
	return log_sources_count();
}

const char *log_source_name_get(u32_t domain_id, u32_t src_id)
{
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   18dca:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   18dce:	bf34      	ite	cc
   18dd0:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
   18dd4:	2000      	movcs	r0, #0
}
   18dd6:	4770      	bx	lr
   18dd8:	00039f48 	.word	0x00039f48
   18ddc:	0003a018 	.word	0x0003a018

00018de0 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			u32_t level)
{
   18de0:	b570      	push	{r4, r5, r6, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	u32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   18de2:	4c10      	ldr	r4, [pc, #64]	; (18e24 <log_backend_enable+0x44>)
{
   18de4:	4605      	mov	r5, r0
	id += backend - log_backend_get(0);
   18de6:	1b04      	subs	r4, r0, r4
   18de8:	1124      	asrs	r4, r4, #4
   18dea:	3401      	adds	r4, #1
{
   18dec:	460e      	mov	r6, r1

	log_backend_id_set(backend, id);
   18dee:	b2e4      	uxtb	r4, r4
	__ASSERT_NO_MSG(backend != NULL);
   18df0:	b948      	cbnz	r0, 18e06 <log_backend_enable+0x26>
   18df2:	490d      	ldr	r1, [pc, #52]	; (18e28 <log_backend_enable+0x48>)
   18df4:	480d      	ldr	r0, [pc, #52]	; (18e2c <log_backend_enable+0x4c>)
   18df6:	23c0      	movs	r3, #192	; 0xc0
   18df8:	4a0d      	ldr	r2, [pc, #52]	; (18e30 <log_backend_enable+0x50>)
   18dfa:	f01a fbda 	bl	335b2 <printk>
   18dfe:	21c0      	movs	r1, #192	; 0xc0
   18e00:	480b      	ldr	r0, [pc, #44]	; (18e30 <log_backend_enable+0x50>)
   18e02:	f01a fed7 	bl	33bb4 <assert_post_action>
static inline void log_backend_activate(const struct log_backend *const backend,
					void *ctx)
{
	__ASSERT_NO_MSG(backend != NULL);
	backend->cb->ctx = ctx;
	backend->cb->active = true;
   18e06:	2201      	movs	r2, #1
	backend->cb->id = id;
   18e08:	686b      	ldr	r3, [r5, #4]
   18e0a:	711c      	strb	r4, [r3, #4]
	log_backend_activate(backend, ctx);

	/* Wakeup logger thread after attaching first backend. It might be
	 * blocked with log messages pending.
	 */
	if (!backend_attached) {
   18e0c:	4c09      	ldr	r4, [pc, #36]	; (18e34 <log_backend_enable+0x54>)
	backend->cb->active = true;
   18e0e:	715a      	strb	r2, [r3, #5]
   18e10:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
   18e12:	601e      	str	r6, [r3, #0]
   18e14:	b912      	cbnz	r2, 18e1c <log_backend_enable+0x3c>
	z_impl_k_sem_give(sem);
   18e16:	4808      	ldr	r0, [pc, #32]	; (18e38 <log_backend_enable+0x58>)
   18e18:	f015 f8de 	bl	2dfd8 <z_impl_k_sem_give>
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
   18e1c:	2301      	movs	r3, #1
   18e1e:	7023      	strb	r3, [r4, #0]
}
   18e20:	bd70      	pop	{r4, r5, r6, pc}
   18e22:	bf00      	nop
   18e24:	0003a018 	.word	0x0003a018
   18e28:	0003c9aa 	.word	0x0003c9aa
   18e2c:	0003b773 	.word	0x0003b773
   18e30:	0003c979 	.word	0x0003c979
   18e34:	20027fb3 	.word	0x20027fb3
   18e38:	200206d4 	.word	0x200206d4

00018e3c <log_init>:
{
   18e3c:	b570      	push	{r4, r5, r6, lr}
	return __log_backends_end - __log_backends_start;
   18e3e:	4c13      	ldr	r4, [pc, #76]	; (18e8c <log_init+0x50>)
   18e40:	4d13      	ldr	r5, [pc, #76]	; (18e90 <log_init+0x54>)
   18e42:	1b2d      	subs	r5, r5, r4
   18e44:	112d      	asrs	r5, r5, #4
	assert(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   18e46:	2d09      	cmp	r5, #9
   18e48:	d906      	bls.n	18e58 <log_init+0x1c>
   18e4a:	4b12      	ldr	r3, [pc, #72]	; (18e94 <log_init+0x58>)
   18e4c:	4a12      	ldr	r2, [pc, #72]	; (18e98 <log_init+0x5c>)
   18e4e:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
   18e52:	4812      	ldr	r0, [pc, #72]	; (18e9c <log_init+0x60>)
   18e54:	f018 f9a4 	bl	311a0 <__assert_func>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   18e58:	4b11      	ldr	r3, [pc, #68]	; (18ea0 <log_init+0x64>)
   18e5a:	e8d3 6fef 	ldaex	r6, [r3]
   18e5e:	1c72      	adds	r2, r6, #1
   18e60:	e8c3 2fe1 	stlex	r1, r2, [r3]
   18e64:	2900      	cmp	r1, #0
   18e66:	d1f8      	bne.n	18e5a <log_init+0x1e>
	if (atomic_inc(&initialized) != 0) {
   18e68:	b90e      	cbnz	r6, 18e6e <log_init+0x32>
	for (i = 0; i < log_backend_count_get(); i++) {
   18e6a:	42ae      	cmp	r6, r5
   18e6c:	d100      	bne.n	18e70 <log_init+0x34>
}
   18e6e:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   18e70:	7b23      	ldrb	r3, [r4, #12]
   18e72:	b143      	cbz	r3, 18e86 <log_init+0x4a>
			if (backend->api->init != NULL) {
   18e74:	6823      	ldr	r3, [r4, #0]
   18e76:	695b      	ldr	r3, [r3, #20]
   18e78:	b103      	cbz	r3, 18e7c <log_init+0x40>
				backend->api->init();
   18e7a:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
   18e7c:	2204      	movs	r2, #4
   18e7e:	2100      	movs	r1, #0
   18e80:	4620      	mov	r0, r4
   18e82:	f7ff ffad 	bl	18de0 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   18e86:	3601      	adds	r6, #1
   18e88:	3410      	adds	r4, #16
   18e8a:	e7ee      	b.n	18e6a <log_init+0x2e>
   18e8c:	0003a018 	.word	0x0003a018
   18e90:	0003a028 	.word	0x0003a028
   18e94:	0003c9c1 	.word	0x0003c9c1
   18e98:	0003c970 	.word	0x0003c970
   18e9c:	0003c9f8 	.word	0x0003c9f8
   18ea0:	200216ec 	.word	0x200216ec

00018ea4 <z_impl_log_panic>:
{
   18ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   18ea6:	4f0c      	ldr	r7, [pc, #48]	; (18ed8 <z_impl_log_panic+0x34>)
   18ea8:	783d      	ldrb	r5, [r7, #0]
   18eaa:	b94d      	cbnz	r5, 18ec0 <z_impl_log_panic+0x1c>
	log_init();
   18eac:	f7ff ffc6 	bl	18e3c <log_init>
   18eb0:	4c0a      	ldr	r4, [pc, #40]	; (18edc <z_impl_log_panic+0x38>)
   18eb2:	4e0b      	ldr	r6, [pc, #44]	; (18ee0 <z_impl_log_panic+0x3c>)
   18eb4:	1b36      	subs	r6, r6, r4
   18eb6:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   18eb8:	42b5      	cmp	r5, r6
   18eba:	db02      	blt.n	18ec2 <z_impl_log_panic+0x1e>
	panic_mode = true;
   18ebc:	2301      	movs	r3, #1
   18ebe:	703b      	strb	r3, [r7, #0]
}
   18ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
   18ec2:	4620      	mov	r0, r4
   18ec4:	f01a fe80 	bl	33bc8 <log_backend_is_active>
   18ec8:	b118      	cbz	r0, 18ed2 <z_impl_log_panic+0x2e>
	backend->api->panic(backend);
   18eca:	6823      	ldr	r3, [r4, #0]
   18ecc:	4620      	mov	r0, r4
   18ece:	691b      	ldr	r3, [r3, #16]
   18ed0:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   18ed2:	3501      	adds	r5, #1
   18ed4:	3410      	adds	r4, #16
   18ed6:	e7ef      	b.n	18eb8 <z_impl_log_panic+0x14>
   18ed8:	20027fb4 	.word	0x20027fb4
   18edc:	0003a018 	.word	0x0003a018
   18ee0:	0003a028 	.word	0x0003a028

00018ee4 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
   18ee4:	b40e      	push	{r1, r2, r3}
   18ee6:	b503      	push	{r0, r1, lr}
   18ee8:	ab03      	add	r3, sp, #12
   18eea:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
   18eee:	4601      	mov	r1, r0
   18ef0:	4804      	ldr	r0, [pc, #16]	; (18f04 <print_formatted+0x20>)
	va_start(args, fmt);
   18ef2:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
   18ef4:	f01a f9ed 	bl	332d2 <z_vprintk>
#endif
	va_end(args);

	return length;
}
   18ef8:	2000      	movs	r0, #0
   18efa:	b002      	add	sp, #8
   18efc:	f85d eb04 	ldr.w	lr, [sp], #4
   18f00:	b003      	add	sp, #12
   18f02:	4770      	bx	lr
   18f04:	00033c09 	.word	0x00033c09

00018f08 <prefix_print>:
}

static u32_t prefix_print(const struct log_output *log_output,
			 u32_t flags, bool func_on, u32_t timestamp, u8_t level,
			 u8_t domain_id, u16_t source_id)
{
   18f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
   18f0c:	f011 0402 	ands.w	r4, r1, #2
{
   18f10:	b085      	sub	sp, #20
   18f12:	4606      	mov	r6, r0
   18f14:	4690      	mov	r8, r2
   18f16:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   18f1a:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   18f1e:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
   18f22:	d007      	beq.n	18f34 <prefix_print+0x2c>
	if (!format) {
   18f24:	f011 0f44 	tst.w	r1, #68	; 0x44
   18f28:	d137      	bne.n	18f9a <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
   18f2a:	461a      	mov	r2, r3
   18f2c:	4932      	ldr	r1, [pc, #200]	; (18ff8 <prefix_print+0xf0>)
   18f2e:	f7ff ffd9 	bl	18ee4 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
   18f32:	4604      	mov	r4, r0
	if (color) {
   18f34:	f1b9 0f00 	cmp.w	r9, #0
   18f38:	d00a      	beq.n	18f50 <prefix_print+0x48>
		const char *color = start && (colors[level] != NULL) ?
   18f3a:	4b30      	ldr	r3, [pc, #192]	; (18ffc <prefix_print+0xf4>)
		print_formatted(log_output, "%s", color);
   18f3c:	4930      	ldr	r1, [pc, #192]	; (19000 <prefix_print+0xf8>)
		const char *color = start && (colors[level] != NULL) ?
   18f3e:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
   18f42:	4b30      	ldr	r3, [pc, #192]	; (19004 <prefix_print+0xfc>)
   18f44:	4630      	mov	r0, r6
   18f46:	2a00      	cmp	r2, #0
   18f48:	bf08      	it	eq
   18f4a:	461a      	moveq	r2, r3
   18f4c:	f7ff ffca 	bl	18ee4 <print_formatted>
	if (level_on) {
   18f50:	b13d      	cbz	r5, 18f62 <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
   18f52:	4b2d      	ldr	r3, [pc, #180]	; (19008 <prefix_print+0x100>)
   18f54:	492d      	ldr	r1, [pc, #180]	; (1900c <prefix_print+0x104>)
   18f56:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
   18f5a:	4630      	mov	r0, r6
   18f5c:	f7ff ffc2 	bl	18ee4 <print_formatted>
   18f60:	4605      	mov	r5, r0
	total += print_formatted(log_output,
   18f62:	f1b8 0f00 	cmp.w	r8, #0
   18f66:	d044      	beq.n	18ff2 <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   18f68:	2301      	movs	r3, #1
   18f6a:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
   18f6e:	4b28      	ldr	r3, [pc, #160]	; (19010 <prefix_print+0x108>)
   18f70:	f017 0f10 	tst.w	r7, #16
   18f74:	4f27      	ldr	r7, [pc, #156]	; (19014 <prefix_print+0x10c>)
   18f76:	bf18      	it	ne
   18f78:	461f      	movne	r7, r3
   18f7a:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
   18f7e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   18f82:	f7ff ff1f 	bl	18dc4 <log_source_name_get>
   18f86:	4639      	mov	r1, r7
   18f88:	4602      	mov	r2, r0
   18f8a:	4630      	mov	r0, r6
   18f8c:	f7ff ffaa 	bl	18ee4 <print_formatted>
   18f90:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
   18f92:	4420      	add	r0, r4
   18f94:	b005      	add	sp, #20
   18f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
   18f9a:	4a1f      	ldr	r2, [pc, #124]	; (19018 <prefix_print+0x110>)
   18f9c:	6811      	ldr	r1, [r2, #0]
   18f9e:	b331      	cbz	r1, 18fee <prefix_print+0xe6>
		timestamp /= timestamp_div;
   18fa0:	4a1e      	ldr	r2, [pc, #120]	; (1901c <prefix_print+0x114>)
   18fa2:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
   18fa6:	6814      	ldr	r4, [r2, #0]
		ms = (remainder * 1000U) / freq;
   18fa8:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
   18fac:	fbb3 f3f4 	udiv	r3, r3, r4
		seconds = timestamp / freq;
   18fb0:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
   18fb4:	fbb4 f2fe 	udiv	r2, r4, lr
   18fb8:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
   18fbc:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
   18fc0:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   18fc4:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
   18fc8:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   18fcc:	fb01 441b 	mls	r4, r1, fp, r4
   18fd0:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
   18fd4:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   18fd8:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
   18fdc:	e9cd b101 	strd	fp, r1, [sp, #4]
   18fe0:	fb0a e113 	mls	r1, sl, r3, lr
   18fe4:	9100      	str	r1, [sp, #0]
   18fe6:	490e      	ldr	r1, [pc, #56]	; (19020 <prefix_print+0x118>)
   18fe8:	f7ff ff7c 	bl	18ee4 <print_formatted>
   18fec:	e7a1      	b.n	18f32 <prefix_print+0x2a>
		length = 0;
   18fee:	4608      	mov	r0, r1
   18ff0:	e79f      	b.n	18f32 <prefix_print+0x2a>
	total += print_formatted(log_output,
   18ff2:	4f08      	ldr	r7, [pc, #32]	; (19014 <prefix_print+0x10c>)
   18ff4:	e7c1      	b.n	18f7a <prefix_print+0x72>
   18ff6:	bf00      	nop
   18ff8:	0003ca9c 	.word	0x0003ca9c
   18ffc:	0003a238 	.word	0x0003a238
   19000:	0003e619 	.word	0x0003e619
   19004:	0003ca8e 	.word	0x0003ca8e
   19008:	0003a24c 	.word	0x0003a24c
   1900c:	0003cac1 	.word	0x0003cac1
   19010:	0003ca98 	.word	0x0003ca98
   19014:	0003ca93 	.word	0x0003ca93
   19018:	200216f0 	.word	0x200216f0
   1901c:	200216f4 	.word	0x200216f4
   19020:	0003caa5 	.word	0x0003caa5

00019024 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  u32_t flags, u8_t level)
{
   19024:	b538      	push	{r3, r4, r5, lr}
   19026:	460c      	mov	r4, r1
	if (color) {
   19028:	07e1      	lsls	r1, r4, #31
{
   1902a:	4605      	mov	r5, r0
	if (color) {
   1902c:	d503      	bpl.n	19036 <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
   1902e:	4a08      	ldr	r2, [pc, #32]	; (19050 <postfix_print+0x2c>)
   19030:	4908      	ldr	r1, [pc, #32]	; (19054 <postfix_print+0x30>)
   19032:	f7ff ff57 	bl	18ee4 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   19036:	06e2      	lsls	r2, r4, #27
   19038:	d408      	bmi.n	1904c <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   1903a:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   1903c:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
   1903e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
   19042:	bf4c      	ite	mi
   19044:	4904      	ldrmi	r1, [pc, #16]	; (19058 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   19046:	4905      	ldrpl	r1, [pc, #20]	; (1905c <postfix_print+0x38>)
   19048:	f7ff bf4c 	b.w	18ee4 <print_formatted>
}
   1904c:	bd38      	pop	{r3, r4, r5, pc}
   1904e:	bf00      	nop
   19050:	0003ca8e 	.word	0x0003ca8e
   19054:	0003e619 	.word	0x0003e619
   19058:	0003cb80 	.word	0x0003cb80
   1905c:	0003f566 	.word	0x0003f566

00019060 <hexdump_line_print>:
{
   19060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19064:	4698      	mov	r8, r3
   19066:	9b08      	ldr	r3, [sp, #32]
   19068:	4604      	mov	r4, r0
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   1906a:	06dd      	lsls	r5, r3, #27
{
   1906c:	460e      	mov	r6, r1
   1906e:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   19070:	d405      	bmi.n	1907e <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   19072:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   19074:	bf4c      	ite	mi
   19076:	492a      	ldrmi	r1, [pc, #168]	; (19120 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
   19078:	492a      	ldrpl	r1, [pc, #168]	; (19124 <hexdump_line_print+0xc4>)
   1907a:	f7ff ff33 	bl	18ee4 <print_formatted>
{
   1907e:	2500      	movs	r5, #0
		print_formatted(log_output, " ");
   19080:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1912c <hexdump_line_print+0xcc>
	for (int i = 0; i < prefix_offset; i++) {
   19084:	4545      	cmp	r5, r8
   19086:	db2d      	blt.n	190e4 <hexdump_line_print+0x84>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   19088:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
   1908a:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 19130 <hexdump_line_print+0xd0>
			print_formatted(log_output, "%02x ", data[i]);
   1908e:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 19134 <hexdump_line_print+0xd4>
			print_formatted(log_output, " ");
   19092:	f8df a098 	ldr.w	sl, [pc, #152]	; 1912c <hexdump_line_print+0xcc>
		if (i < length) {
   19096:	42bd      	cmp	r5, r7
   19098:	d231      	bcs.n	190fe <hexdump_line_print+0x9e>
			print_formatted(log_output, "%02x ", data[i]);
   1909a:	5d72      	ldrb	r2, [r6, r5]
   1909c:	4649      	mov	r1, r9
   1909e:	4620      	mov	r0, r4
   190a0:	f7ff ff20 	bl	18ee4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   190a4:	3501      	adds	r5, #1
   190a6:	2d10      	cmp	r5, #16
   190a8:	d122      	bne.n	190f0 <hexdump_line_print+0x90>
	print_formatted(log_output, "|");
   190aa:	491f      	ldr	r1, [pc, #124]	; (19128 <hexdump_line_print+0xc8>)
   190ac:	4620      	mov	r0, r4
   190ae:	f7ff ff19 	bl	18ee4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   190b2:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
   190b4:	f8df 8074 	ldr.w	r8, [pc, #116]	; 1912c <hexdump_line_print+0xcc>
			      isprint((int)c) ? c : '.');
   190b8:	f8df 907c 	ldr.w	r9, [pc, #124]	; 19138 <hexdump_line_print+0xd8>
			print_formatted(log_output, "%c",
   190bc:	f8df a07c 	ldr.w	sl, [pc, #124]	; 1913c <hexdump_line_print+0xdc>
		if (i < length) {
   190c0:	42af      	cmp	r7, r5
   190c2:	d928      	bls.n	19116 <hexdump_line_print+0xb6>
			char c = (char)data[i];
   190c4:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
   190c6:	4651      	mov	r1, sl
   190c8:	f812 3009 	ldrb.w	r3, [r2, r9]
   190cc:	4620      	mov	r0, r4
   190ce:	f013 0f97 	tst.w	r3, #151	; 0x97
   190d2:	bf08      	it	eq
   190d4:	222e      	moveq	r2, #46	; 0x2e
   190d6:	f7ff ff05 	bl	18ee4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   190da:	3501      	adds	r5, #1
   190dc:	2d10      	cmp	r5, #16
   190de:	d113      	bne.n	19108 <hexdump_line_print+0xa8>
}
   190e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
   190e4:	4649      	mov	r1, r9
   190e6:	4620      	mov	r0, r4
   190e8:	f7ff fefc 	bl	18ee4 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   190ec:	3501      	adds	r5, #1
   190ee:	e7c9      	b.n	19084 <hexdump_line_print+0x24>
		if (i > 0 && !(i % 8)) {
   190f0:	076a      	lsls	r2, r5, #29
   190f2:	d1d0      	bne.n	19096 <hexdump_line_print+0x36>
			print_formatted(log_output, " ");
   190f4:	4651      	mov	r1, sl
   190f6:	4620      	mov	r0, r4
   190f8:	f7ff fef4 	bl	18ee4 <print_formatted>
   190fc:	e7cb      	b.n	19096 <hexdump_line_print+0x36>
			print_formatted(log_output, "   ");
   190fe:	4641      	mov	r1, r8
   19100:	4620      	mov	r0, r4
   19102:	f7ff feef 	bl	18ee4 <print_formatted>
   19106:	e7cd      	b.n	190a4 <hexdump_line_print+0x44>
		if (i > 0 && !(i % 8)) {
   19108:	076b      	lsls	r3, r5, #29
   1910a:	d1d9      	bne.n	190c0 <hexdump_line_print+0x60>
			print_formatted(log_output, " ");
   1910c:	4641      	mov	r1, r8
   1910e:	4620      	mov	r0, r4
   19110:	f7ff fee8 	bl	18ee4 <print_formatted>
   19114:	e7d4      	b.n	190c0 <hexdump_line_print+0x60>
			print_formatted(log_output, " ");
   19116:	4641      	mov	r1, r8
   19118:	4620      	mov	r0, r4
   1911a:	f7ff fee3 	bl	18ee4 <print_formatted>
   1911e:	e7dc      	b.n	190da <hexdump_line_print+0x7a>
   19120:	0003cb80 	.word	0x0003cb80
   19124:	0003f566 	.word	0x0003f566
   19128:	0003ca47 	.word	0x0003ca47
   1912c:	0003ca45 	.word	0x0003ca45
   19130:	0003ca43 	.word	0x0003ca43
   19134:	0003ca3d 	.word	0x0003ca3d
   19138:	0004017c 	.word	0x0004017c
   1913c:	0003ca49 	.word	0x0003ca49

00019140 <log_output_string>:
}

void log_output_string(const struct log_output *log_output,
		       struct log_msg_ids src_level, u32_t timestamp,
		       const char *fmt, va_list ap, u32_t flags)
{
   19140:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
		log_output_string_syst_process(log_output,
				src_level, fmt, ap, flags);
		return;
	}

	if (!raw_string) {
   19144:	f011 0407 	ands.w	r4, r1, #7
{
   19148:	4606      	mov	r6, r0
   1914a:	e9dd 870a 	ldrd	r8, r7, [sp, #40]	; 0x28
   1914e:	461d      	mov	r5, r3
	if (!raw_string) {
   19150:	d00b      	beq.n	1916a <log_output_string+0x2a>
		prefix_print(log_output, flags, true, timestamp,
   19152:	f3c1 1389 	ubfx	r3, r1, #6, #10
   19156:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   1915a:	9302      	str	r3, [sp, #8]
   1915c:	e9cd 4100 	strd	r4, r1, [sp]
   19160:	4613      	mov	r3, r2
   19162:	4639      	mov	r1, r7
   19164:	2201      	movs	r2, #1
   19166:	f7ff fecf 	bl	18f08 <prefix_print>

#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, ap);
#else
	z_vprintk(out_func, (void *)log_output, fmt, ap);
   1916a:	4643      	mov	r3, r8
   1916c:	462a      	mov	r2, r5
   1916e:	4631      	mov	r1, r6
   19170:	480d      	ldr	r0, [pc, #52]	; (191a8 <log_output_string+0x68>)
   19172:	f01a f8ae 	bl	332d2 <z_vprintk>
#endif

	(void)length;

	if (raw_string) {
   19176:	b98c      	cbnz	r4, 1919c <log_output_string+0x5c>
   19178:	3d01      	subs	r5, #1
	while (*fmt != '\0') {
   1917a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   1917e:	b95b      	cbnz	r3, 19198 <log_output_string+0x58>
		/* add \r if string ends with newline. */
		if (ends_with_newline(fmt)) {
   19180:	2c0a      	cmp	r4, #10
   19182:	d103      	bne.n	1918c <log_output_string+0x4c>
			print_formatted(log_output, "\r");
   19184:	4909      	ldr	r1, [pc, #36]	; (191ac <log_output_string+0x6c>)
   19186:	4630      	mov	r0, r6
   19188:	f7ff feac 	bl	18ee4 <print_formatted>
		}
	} else {
		postfix_print(log_output, flags, level);
	}

	log_output_flush(log_output);
   1918c:	4630      	mov	r0, r6
}
   1918e:	b004      	add	sp, #16
   19190:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	log_output_flush(log_output);
   19194:	f01a bd51 	b.w	33c3a <log_output_flush>
	while (*fmt != '\0') {
   19198:	461c      	mov	r4, r3
   1919a:	e7ee      	b.n	1917a <log_output_string+0x3a>
		postfix_print(log_output, flags, level);
   1919c:	4622      	mov	r2, r4
   1919e:	4639      	mov	r1, r7
   191a0:	4630      	mov	r0, r6
   191a2:	f7ff ff3f 	bl	19024 <postfix_print>
   191a6:	e7f1      	b.n	1918c <log_output_string+0x4c>
   191a8:	00033c09 	.word	0x00033c09
   191ac:	0003ca8c 	.word	0x0003ca8c

000191b0 <log_output_hexdump>:

void log_output_hexdump(const struct log_output *log_output,
			     struct log_msg_ids src_level, u32_t timestamp,
			     const char *metadata, const u8_t *data,
			     u32_t length, u32_t flags)
{
   191b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   191b4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   191b6:	4698      	mov	r8, r3
   191b8:	e9dd 750c 	ldrd	r7, r5, [sp, #48]	; 0x30
		log_output_hexdump_syst_process(log_output,
				src_level, data, length, flags);
		return;
	}

	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   191bc:	f3c1 1389 	ubfx	r3, r1, #6, #10
	u8_t level = (u8_t)src_level.level;
   191c0:	f001 0907 	and.w	r9, r1, #7
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   191c4:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   191c8:	9302      	str	r3, [sp, #8]
   191ca:	e9cd 9100 	strd	r9, r1, [sp]
   191ce:	4613      	mov	r3, r2
   191d0:	4631      	mov	r1, r6
   191d2:	2201      	movs	r2, #1
{
   191d4:	4604      	mov	r4, r0
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   191d6:	f7ff fe97 	bl	18f08 <prefix_print>
				     level, domain_id, source_id);

	/* Print metadata */
	print_formatted(log_output, "%s", metadata);
   191da:	4642      	mov	r2, r8
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   191dc:	4682      	mov	sl, r0
	print_formatted(log_output, "%s", metadata);
   191de:	4910      	ldr	r1, [pc, #64]	; (19220 <log_output_hexdump+0x70>)
   191e0:	4620      	mov	r0, r4
   191e2:	f7ff fe7f 	bl	18ee4 <print_formatted>

	while (length) {
   191e6:	b955      	cbnz	r5, 191fe <log_output_hexdump+0x4e>

		data += part_len;
		length -= part_len;
	};

	postfix_print(log_output, flags, level);
   191e8:	4620      	mov	r0, r4
   191ea:	464a      	mov	r2, r9
   191ec:	4631      	mov	r1, r6
   191ee:	f7ff ff19 	bl	19024 <postfix_print>
	log_output_flush(log_output);
   191f2:	4620      	mov	r0, r4
}
   191f4:	b004      	add	sp, #16
   191f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(log_output);
   191fa:	f01a bd1e 	b.w	33c3a <log_output_flush>
		u32_t part_len = length > HEXDUMP_BYTES_IN_LINE ?
   191fe:	2d10      	cmp	r5, #16
   19200:	46a8      	mov	r8, r5
   19202:	bf28      	it	cs
   19204:	f04f 0810 	movcs.w	r8, #16
		hexdump_line_print(log_output, data, part_len,
   19208:	4639      	mov	r1, r7
   1920a:	9600      	str	r6, [sp, #0]
   1920c:	4653      	mov	r3, sl
   1920e:	4642      	mov	r2, r8
   19210:	4620      	mov	r0, r4
   19212:	f7ff ff25 	bl	19060 <hexdump_line_print>
		data += part_len;
   19216:	4447      	add	r7, r8
		length -= part_len;
   19218:	eba5 0508 	sub.w	r5, r5, r8
   1921c:	e7e3      	b.n	191e6 <log_output_hexdump+0x36>
   1921e:	bf00      	nop
   19220:	0003e619 	.word	0x0003e619

00019224 <log_output_timestamp_freq_set>:
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
}

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
   19224:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   19226:	2100      	movs	r1, #0
	timestamp_div = 1U;
   19228:	4a07      	ldr	r2, [pc, #28]	; (19248 <log_output_timestamp_freq_set+0x24>)
{
   1922a:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
   1922c:	4c07      	ldr	r4, [pc, #28]	; (1924c <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   1922e:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   19230:	42a0      	cmp	r0, r4
   19232:	d804      	bhi.n	1923e <log_output_timestamp_freq_set+0x1a>
   19234:	b101      	cbz	r1, 19238 <log_output_timestamp_freq_set+0x14>
   19236:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   19238:	4b05      	ldr	r3, [pc, #20]	; (19250 <log_output_timestamp_freq_set+0x2c>)
   1923a:	6018      	str	r0, [r3, #0]
}
   1923c:	bd10      	pop	{r4, pc}
		frequency /= 2U;
   1923e:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   19240:	005b      	lsls	r3, r3, #1
   19242:	2101      	movs	r1, #1
   19244:	e7f4      	b.n	19230 <log_output_timestamp_freq_set+0xc>
   19246:	bf00      	nop
   19248:	200216f4 	.word	0x200216f4
   1924c:	000f4240 	.word	0x000f4240
   19250:	200216f0 	.word	0x200216f0

00019254 <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
   19254:	4801      	ldr	r0, [pc, #4]	; (1925c <panic+0x8>)
   19256:	f01a bcf0 	b.w	33c3a <log_output_flush>
   1925a:	bf00      	nop
   1925c:	0003a278 	.word	0x0003a278

00019260 <log_backend_uart_init>:

	log_backend_std_put(&log_output, flag, msg);
}

static void log_backend_uart_init(void)
{
   19260:	b508      	push	{r3, lr}
   19262:	4806      	ldr	r0, [pc, #24]	; (1927c <log_backend_uart_init+0x1c>)
   19264:	f012 facc 	bl	2b800 <z_impl_device_get_binding>
	struct device *dev;

	dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
	assert(dev);
   19268:	b928      	cbnz	r0, 19276 <log_backend_uart_init+0x16>
   1926a:	4b05      	ldr	r3, [pc, #20]	; (19280 <log_backend_uart_init+0x20>)
   1926c:	4a05      	ldr	r2, [pc, #20]	; (19284 <log_backend_uart_init+0x24>)
   1926e:	212d      	movs	r1, #45	; 0x2d
   19270:	4805      	ldr	r0, [pc, #20]	; (19288 <log_backend_uart_init+0x28>)
   19272:	f017 ff95 	bl	311a0 <__assert_func>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
   19276:	4b05      	ldr	r3, [pc, #20]	; (1928c <log_backend_uart_init+0x2c>)
   19278:	6058      	str	r0, [r3, #4]

	log_output_ctx_set(&log_output, dev);
}
   1927a:	bd08      	pop	{r3, pc}
   1927c:	0003cafd 	.word	0x0003cafd
   19280:	0003c1b2 	.word	0x0003c1b2
   19284:	0003cae7 	.word	0x0003cae7
   19288:	0003cb04 	.word	0x0003cb04
   1928c:	20021700 	.word	0x20021700

00019290 <sync_hexdump>:
}

static void sync_hexdump(const struct log_backend *const backend,
			 struct log_msg_ids src_level, u32_t timestamp,
			 const char *metadata, const u8_t *data, u32_t length)
{
   19290:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		 * by another one, lock context for whole log processing.
		 */
		key = irq_lock();
	}

	log_output_hexdump(log_output, src_level, timestamp,
   19292:	200f      	movs	r0, #15
   19294:	9002      	str	r0, [sp, #8]
   19296:	9807      	ldr	r0, [sp, #28]
   19298:	9001      	str	r0, [sp, #4]
   1929a:	9806      	ldr	r0, [sp, #24]
   1929c:	9000      	str	r0, [sp, #0]
   1929e:	4803      	ldr	r0, [pc, #12]	; (192ac <sync_hexdump+0x1c>)
   192a0:	f7ff ff86 	bl	191b0 <log_output_hexdump>
	u32_t flag = IS_ENABLED(CONFIG_LOG_BACKEND_UART_SYST_ENABLE) ?
		LOG_OUTPUT_FLAG_FORMAT_SYST : 0;

	log_backend_std_sync_hexdump(&log_output, flag, src_level,
				     timestamp, metadata, data, length);
}
   192a4:	b005      	add	sp, #20
   192a6:	f85d fb04 	ldr.w	pc, [sp], #4
   192aa:	bf00      	nop
   192ac:	0003a278 	.word	0x0003a278

000192b0 <sync_string>:
{
   192b0:	b507      	push	{r0, r1, r2, lr}
	log_output_string(log_output, src_level, timestamp, fmt, ap, flags);
   192b2:	200f      	movs	r0, #15
   192b4:	9001      	str	r0, [sp, #4]
   192b6:	9804      	ldr	r0, [sp, #16]
   192b8:	9000      	str	r0, [sp, #0]
   192ba:	4803      	ldr	r0, [pc, #12]	; (192c8 <sync_string+0x18>)
   192bc:	f7ff ff40 	bl	19140 <log_output_string>
}
   192c0:	b003      	add	sp, #12
   192c2:	f85d fb04 	ldr.w	pc, [sp], #4
   192c6:	bf00      	nop
   192c8:	0003a278 	.word	0x0003a278

000192cc <net_context_get_state>:
 *
 * @return Network state.
 */
static inline
enum net_context_state net_context_get_state(struct net_context *context)
{
   192cc:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   192ce:	4604      	mov	r4, r0
   192d0:	b970      	cbnz	r0, 192f0 <net_context_get_state+0x24>
   192d2:	490a      	ldr	r1, [pc, #40]	; (192fc <net_context_get_state+0x30>)
   192d4:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
   192d8:	4a09      	ldr	r2, [pc, #36]	; (19300 <net_context_get_state+0x34>)
   192da:	480a      	ldr	r0, [pc, #40]	; (19304 <net_context_get_state+0x38>)
   192dc:	f01a f969 	bl	335b2 <printk>
   192e0:	4809      	ldr	r0, [pc, #36]	; (19308 <net_context_get_state+0x3c>)
   192e2:	f01a f966 	bl	335b2 <printk>
   192e6:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
   192ea:	4805      	ldr	r0, [pc, #20]	; (19300 <net_context_get_state+0x34>)
   192ec:	f01a fc62 	bl	33bb4 <assert_post_action>

	return (enum net_context_state)
		((context->flags >> NET_CONTEXT_STATE_SHIFT) &
   192f0:	f8b4 007a 	ldrh.w	r0, [r4, #122]	; 0x7a
		NET_CONTEXT_STATE_MASK);
}
   192f4:	f3c0 0041 	ubfx	r0, r0, #1, #2
   192f8:	bd10      	pop	{r4, pc}
   192fa:	bf00      	nop
   192fc:	0003cb77 	.word	0x0003cb77
   19300:	0003cb4a 	.word	0x0003cb4a
   19304:	0003b773 	.word	0x0003b773
   19308:	0003cb7f 	.word	0x0003cb7f

0001930c <net_context_get_type>:
 *
 * @return Network context type.
 */
static inline
enum net_sock_type net_context_get_type(struct net_context *context)
{
   1930c:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   1930e:	4604      	mov	r4, r0
   19310:	b970      	cbnz	r0, 19330 <net_context_get_type+0x24>
   19312:	490a      	ldr	r1, [pc, #40]	; (1933c <net_context_get_type+0x30>)
   19314:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
   19318:	4a09      	ldr	r2, [pc, #36]	; (19340 <net_context_get_type+0x34>)
   1931a:	480a      	ldr	r0, [pc, #40]	; (19344 <net_context_get_type+0x38>)
   1931c:	f01a f949 	bl	335b2 <printk>
   19320:	4809      	ldr	r0, [pc, #36]	; (19348 <net_context_get_type+0x3c>)
   19322:	f01a f946 	bl	335b2 <printk>
   19326:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
   1932a:	4805      	ldr	r0, [pc, #20]	; (19340 <net_context_get_type+0x34>)
   1932c:	f01a fc42 	bl	33bb4 <assert_post_action>

	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
   19330:	f8b4 007a 	ldrh.w	r0, [r4, #122]	; 0x7a
}
   19334:	f3c0 1081 	ubfx	r0, r0, #6, #2
   19338:	bd10      	pop	{r4, pc}
   1933a:	bf00      	nop
   1933c:	0003cb77 	.word	0x0003cb77
   19340:	0003cb4a 	.word	0x0003cb4a
   19344:	0003b773 	.word	0x0003b773
   19348:	0003cb7f 	.word	0x0003cb7f

0001934c <zsock_accepted_cb>:
#include <syscalls/zsock_shutdown_mrsh.c>
#endif /* CONFIG_USERSPACE */

static void zsock_accepted_cb(struct net_context *new_ctx,
			      struct sockaddr *addr, socklen_t addrlen,
			      int status, void *user_data) {
   1934c:	b538      	push	{r3, r4, r5, lr}
   1934e:	9d04      	ldr	r5, [sp, #16]
   19350:	4604      	mov	r4, r0
	struct net_context *parent = user_data;

	NET_DBG("parent=%p, ctx=%p, st=%d", parent, new_ctx, status);

	if (status == 0) {
   19352:	461a      	mov	r2, r3
   19354:	b96b      	cbnz	r3, 19372 <zsock_accepted_cb+0x26>
		/* This just installs a callback, so cannot fail. */
		(void)net_context_recv(new_ctx, zsock_received_cb, K_NO_WAIT,
   19356:	4907      	ldr	r1, [pc, #28]	; (19374 <zsock_accepted_cb+0x28>)
   19358:	f003 feb0 	bl	1d0bc <net_context_recv>
	z_impl_k_queue_init(queue);
   1935c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   19360:	f01f fc88 	bl	38c74 <z_impl_k_queue_init>
				       NULL);
		k_fifo_init(&new_ctx->recv_q);

		k_fifo_put(&parent->accept_q, new_ctx);
   19364:	4621      	mov	r1, r4
   19366:	f105 005c 	add.w	r0, r5, #92	; 0x5c
	}
}
   1936a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		k_fifo_put(&parent->accept_q, new_ctx);
   1936e:	f01f bc8e 	b.w	38c8e <k_queue_append>
}
   19372:	bd38      	pop	{r3, r4, r5, pc}
   19374:	00033d3d 	.word	0x00033d3d

00019378 <zsock_socket_internal>:
{
   19378:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1937a:	4607      	mov	r7, r0
   1937c:	460e      	mov	r6, r1
   1937e:	4614      	mov	r4, r2
	int fd = z_reserve_fd();
   19380:	f7ff fab2 	bl	188e8 <z_reserve_fd>
	if (fd < 0) {
   19384:	1e05      	subs	r5, r0, #0
   19386:	db17      	blt.n	193b8 <zsock_socket_internal+0x40>
	if (proto == 0) {
   19388:	b93c      	cbnz	r4, 1939a <zsock_socket_internal+0x22>
		if (family == AF_INET || family == AF_INET6) {
   1938a:	1e7b      	subs	r3, r7, #1
   1938c:	2b01      	cmp	r3, #1
   1938e:	d804      	bhi.n	1939a <zsock_socket_internal+0x22>
			if (type == SOCK_DGRAM) {
   19390:	2e02      	cmp	r6, #2
   19392:	d014      	beq.n	193be <zsock_socket_internal+0x46>
			} else if (type == SOCK_STREAM) {
   19394:	2e01      	cmp	r6, #1
				proto = IPPROTO_TCP;
   19396:	bf08      	it	eq
   19398:	2406      	moveq	r4, #6
	res = net_context_get(family, type, proto, &ctx);
   1939a:	b2f1      	uxtb	r1, r6
   1939c:	ab01      	add	r3, sp, #4
   1939e:	b2a2      	uxth	r2, r4
   193a0:	b2b8      	uxth	r0, r7
   193a2:	f003 fa5d 	bl	1c860 <net_context_get>
	if (res < 0) {
   193a6:	1e06      	subs	r6, r0, #0
   193a8:	da0b      	bge.n	193c2 <zsock_socket_internal+0x4a>
		z_free_fd(fd);
   193aa:	4628      	mov	r0, r5
   193ac:	f7ff fac8 	bl	18940 <z_free_fd>
		errno = -res;
   193b0:	f01c f88f 	bl	354d2 <__errno>
   193b4:	4276      	negs	r6, r6
   193b6:	6006      	str	r6, [r0, #0]
		return -1;
   193b8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   193bc:	e012      	b.n	193e4 <zsock_socket_internal+0x6c>
				proto = IPPROTO_UDP;
   193be:	2411      	movs	r4, #17
   193c0:	e7eb      	b.n	1939a <zsock_socket_internal+0x22>
	ctx->user_data = NULL;
   193c2:	2300      	movs	r3, #0
   193c4:	9801      	ldr	r0, [sp, #4]
   193c6:	6003      	str	r3, [r0, #0]
	ctx->socket_data = NULL;
   193c8:	6583      	str	r3, [r0, #88]	; 0x58
   193ca:	305c      	adds	r0, #92	; 0x5c
   193cc:	f01f fc52 	bl	38c74 <z_impl_k_queue_init>
	if (proto == IPPROTO_TCP) {
   193d0:	2c06      	cmp	r4, #6
   193d2:	d102      	bne.n	193da <zsock_socket_internal+0x62>
		net_context_ref(ctx);
   193d4:	9801      	ldr	r0, [sp, #4]
   193d6:	f01c fad3 	bl	35980 <net_context_ref>
	z_finalize_fd(fd, ctx, (const struct fd_op_vtable *)&sock_fd_op_vtable);
   193da:	4a04      	ldr	r2, [pc, #16]	; (193ec <zsock_socket_internal+0x74>)
   193dc:	9901      	ldr	r1, [sp, #4]
   193de:	4628      	mov	r0, r5
   193e0:	f7ff faa4 	bl	1892c <z_finalize_fd>
}
   193e4:	4628      	mov	r0, r5
   193e6:	b003      	add	sp, #12
   193e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   193ea:	bf00      	nop
   193ec:	0003a288 	.word	0x0003a288

000193f0 <z_impl_zsock_socket>:
{
   193f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   193f4:	f8df 909c 	ldr.w	r9, [pc, #156]	; 19494 <z_impl_zsock_socket+0xa4>
{
   193f8:	4605      	mov	r5, r0
   193fa:	460f      	mov	r7, r1
   193fc:	4690      	mov	r8, r2
   193fe:	46ca      	mov	sl, r9
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   19400:	4c1d      	ldr	r4, [pc, #116]	; (19478 <z_impl_zsock_socket+0x88>)
   19402:	4e1e      	ldr	r6, [pc, #120]	; (1947c <z_impl_zsock_socket+0x8c>)
   19404:	454c      	cmp	r4, r9
   19406:	d90c      	bls.n	19422 <z_impl_zsock_socket+0x32>
   19408:	491d      	ldr	r1, [pc, #116]	; (19480 <z_impl_zsock_socket+0x90>)
   1940a:	2399      	movs	r3, #153	; 0x99
   1940c:	4632      	mov	r2, r6
   1940e:	481d      	ldr	r0, [pc, #116]	; (19484 <z_impl_zsock_socket+0x94>)
   19410:	f01a f8cf 	bl	335b2 <printk>
   19414:	481c      	ldr	r0, [pc, #112]	; (19488 <z_impl_zsock_socket+0x98>)
   19416:	f01a f8cc 	bl	335b2 <printk>
   1941a:	2199      	movs	r1, #153	; 0x99
   1941c:	4630      	mov	r0, r6
   1941e:	f01a fbc9 	bl	33bb4 <assert_post_action>
   19422:	4554      	cmp	r4, sl
   19424:	d306      	bcc.n	19434 <z_impl_zsock_socket+0x44>
		return zsock_socket_internal(family, type, proto);
   19426:	4642      	mov	r2, r8
   19428:	4639      	mov	r1, r7
   1942a:	4628      	mov	r0, r5
}
   1942c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return zsock_socket_internal(family, type, proto);
   19430:	f7ff bfa2 	b.w	19378 <zsock_socket_internal>
		if (sock_family->family != family &&
   19434:	6823      	ldr	r3, [r4, #0]
   19436:	42ab      	cmp	r3, r5
   19438:	d000      	beq.n	1943c <z_impl_zsock_socket+0x4c>
   1943a:	b9db      	cbnz	r3, 19474 <z_impl_zsock_socket+0x84>
		NET_ASSERT(sock_family->is_supported);
   1943c:	6863      	ldr	r3, [r4, #4]
   1943e:	b963      	cbnz	r3, 1945a <z_impl_zsock_socket+0x6a>
   19440:	4912      	ldr	r1, [pc, #72]	; (1948c <z_impl_zsock_socket+0x9c>)
   19442:	239f      	movs	r3, #159	; 0x9f
   19444:	4632      	mov	r2, r6
   19446:	480f      	ldr	r0, [pc, #60]	; (19484 <z_impl_zsock_socket+0x94>)
   19448:	f01a f8b3 	bl	335b2 <printk>
   1944c:	4810      	ldr	r0, [pc, #64]	; (19490 <z_impl_zsock_socket+0xa0>)
   1944e:	f01a f8b0 	bl	335b2 <printk>
   19452:	219f      	movs	r1, #159	; 0x9f
   19454:	4630      	mov	r0, r6
   19456:	f01a fbad 	bl	33bb4 <assert_post_action>
		if (!sock_family->is_supported(family, type, proto)) {
   1945a:	6863      	ldr	r3, [r4, #4]
   1945c:	4642      	mov	r2, r8
   1945e:	4639      	mov	r1, r7
   19460:	4628      	mov	r0, r5
   19462:	4798      	blx	r3
   19464:	b130      	cbz	r0, 19474 <z_impl_zsock_socket+0x84>
		return sock_family->handler(family, type, proto);
   19466:	68a3      	ldr	r3, [r4, #8]
   19468:	4642      	mov	r2, r8
   1946a:	4639      	mov	r1, r7
   1946c:	4628      	mov	r0, r5
}
   1946e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return sock_family->handler(family, type, proto);
   19472:	4718      	bx	r3
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   19474:	340c      	adds	r4, #12
   19476:	e7c5      	b.n	19404 <z_impl_zsock_socket+0x14>
   19478:	00039f3c 	.word	0x00039f3c
   1947c:	0003cb82 	.word	0x0003cb82
   19480:	0003cbd0 	.word	0x0003cbd0
   19484:	0003b773 	.word	0x0003b773
   19488:	0003cbfd 	.word	0x0003cbfd
   1948c:	0003cbb6 	.word	0x0003cbb6
   19490:	0003cb7f 	.word	0x0003cb7f
   19494:	00039f48 	.word	0x00039f48

00019498 <zsock_bind_ctx>:
	k_fifo_put(&ctx->recv_q, pkt);
}

int zsock_bind_ctx(struct net_context *ctx, const struct sockaddr *addr,
		   socklen_t addrlen)
{
   19498:	b538      	push	{r3, r4, r5, lr}
   1949a:	4604      	mov	r4, r0
	SET_ERRNO(net_context_bind(ctx, addr, addrlen));
   1949c:	f003 fada 	bl	1ca54 <net_context_bind>
   194a0:	1e05      	subs	r5, r0, #0
   194a2:	da06      	bge.n	194b2 <zsock_bind_ctx+0x1a>
   194a4:	f01c f815 	bl	354d2 <__errno>
   194a8:	426d      	negs	r5, r5
   194aa:	6005      	str	r5, [r0, #0]
	/* For DGRAM socket, we expect to receive packets after call to
	 * bind(), but for STREAM socket, next expected operation is
	 * listen(), which doesn't work if recv callback is set.
	 */
	if (net_context_get_type(ctx) == SOCK_DGRAM) {
		SET_ERRNO(net_context_recv(ctx, zsock_received_cb, K_NO_WAIT,
   194ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   194b0:	e005      	b.n	194be <zsock_bind_ctx+0x26>
	if (net_context_get_type(ctx) == SOCK_DGRAM) {
   194b2:	4620      	mov	r0, r4
   194b4:	f7ff ff2a 	bl	1930c <net_context_get_type>
   194b8:	2802      	cmp	r0, #2
   194ba:	d001      	beq.n	194c0 <zsock_bind_ctx+0x28>
					   ctx->user_data));
	}

	return 0;
   194bc:	2000      	movs	r0, #0
}
   194be:	bd38      	pop	{r3, r4, r5, pc}
		SET_ERRNO(net_context_recv(ctx, zsock_received_cb, K_NO_WAIT,
   194c0:	6823      	ldr	r3, [r4, #0]
   194c2:	4620      	mov	r0, r4
   194c4:	2200      	movs	r2, #0
   194c6:	4905      	ldr	r1, [pc, #20]	; (194dc <zsock_bind_ctx+0x44>)
   194c8:	f003 fdf8 	bl	1d0bc <net_context_recv>
   194cc:	1e04      	subs	r4, r0, #0
   194ce:	daf5      	bge.n	194bc <zsock_bind_ctx+0x24>
   194d0:	f01b ffff 	bl	354d2 <__errno>
   194d4:	4264      	negs	r4, r4
   194d6:	6004      	str	r4, [r0, #0]
   194d8:	e7e8      	b.n	194ac <zsock_bind_ctx+0x14>
   194da:	bf00      	nop
   194dc:	00033d3d 	.word	0x00033d3d

000194e0 <zsock_connect_ctx>:
#include <syscalls/zsock_bind_mrsh.c>
#endif /* CONFIG_USERSPACE */

int zsock_connect_ctx(struct net_context *ctx, const struct sockaddr *addr,
		      socklen_t addrlen)
{
   194e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
		SET_ERRNO(net_context_recv(ctx, zsock_received_cb,
					   K_NO_WAIT, ctx->user_data));
		return 0;
	}
#endif
	SET_ERRNO(net_context_connect(ctx, addr, addrlen, NULL,
   194e2:	f640 33b8 	movw	r3, #3000	; 0xbb8
   194e6:	2400      	movs	r4, #0
   194e8:	e9cd 3400 	strd	r3, r4, [sp]
   194ec:	4623      	mov	r3, r4
{
   194ee:	4606      	mov	r6, r0
	SET_ERRNO(net_context_connect(ctx, addr, addrlen, NULL,
   194f0:	f003 fcc0 	bl	1ce74 <net_context_connect>
   194f4:	1e05      	subs	r5, r0, #0
   194f6:	da07      	bge.n	19508 <zsock_connect_ctx+0x28>
			      K_MSEC(CONFIG_NET_SOCKETS_CONNECT_TIMEOUT),
			      NULL));
	SET_ERRNO(net_context_recv(ctx, zsock_received_cb, K_NO_WAIT,
   194f8:	f01b ffeb 	bl	354d2 <__errno>
   194fc:	426d      	negs	r5, r5
   194fe:	6005      	str	r5, [r0, #0]
   19500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
				   ctx->user_data));

	return 0;
}
   19504:	b002      	add	sp, #8
   19506:	bd70      	pop	{r4, r5, r6, pc}
	SET_ERRNO(net_context_recv(ctx, zsock_received_cb, K_NO_WAIT,
   19508:	6833      	ldr	r3, [r6, #0]
   1950a:	4622      	mov	r2, r4
   1950c:	4903      	ldr	r1, [pc, #12]	; (1951c <zsock_connect_ctx+0x3c>)
   1950e:	4630      	mov	r0, r6
   19510:	f003 fdd4 	bl	1d0bc <net_context_recv>
   19514:	1e05      	subs	r5, r0, #0
   19516:	dbef      	blt.n	194f8 <zsock_connect_ctx+0x18>
	return 0;
   19518:	4620      	mov	r0, r4
   1951a:	e7f3      	b.n	19504 <zsock_connect_ctx+0x24>
   1951c:	00033d3d 	.word	0x00033d3d

00019520 <zsock_listen_ctx>:
}
#include <syscalls/zsock_connect_mrsh.c>
#endif /* CONFIG_USERSPACE */

int zsock_listen_ctx(struct net_context *ctx, int backlog)
{
   19520:	b538      	push	{r3, r4, r5, lr}
   19522:	4605      	mov	r5, r0
	SET_ERRNO(net_context_listen(ctx, backlog));
   19524:	f003 fb20 	bl	1cb68 <net_context_listen>
   19528:	1e04      	subs	r4, r0, #0
   1952a:	da06      	bge.n	1953a <zsock_listen_ctx+0x1a>
	SET_ERRNO(net_context_accept(ctx, zsock_accepted_cb, K_NO_WAIT, ctx));
   1952c:	f01b ffd1 	bl	354d2 <__errno>
   19530:	4264      	negs	r4, r4
   19532:	6004      	str	r4, [r0, #0]
   19534:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

	return 0;
}
   19538:	bd38      	pop	{r3, r4, r5, pc}
	SET_ERRNO(net_context_accept(ctx, zsock_accepted_cb, K_NO_WAIT, ctx));
   1953a:	462b      	mov	r3, r5
   1953c:	2200      	movs	r2, #0
   1953e:	4904      	ldr	r1, [pc, #16]	; (19550 <zsock_listen_ctx+0x30>)
   19540:	4628      	mov	r0, r5
   19542:	f003 fd6b 	bl	1d01c <net_context_accept>
   19546:	1e04      	subs	r4, r0, #0
   19548:	dbf0      	blt.n	1952c <zsock_listen_ctx+0xc>
	return 0;
   1954a:	2000      	movs	r0, #0
   1954c:	e7f4      	b.n	19538 <zsock_listen_ctx+0x18>
   1954e:	bf00      	nop
   19550:	0001934d 	.word	0x0001934d

00019554 <zsock_accept_ctx>:
#include <syscalls/zsock_listen_mrsh.c>
#endif /* CONFIG_USERSPACE */

int zsock_accept_ctx(struct net_context *parent, struct sockaddr *addr,
		     socklen_t *addrlen)
{
   19554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19556:	4605      	mov	r5, r0
   19558:	460f      	mov	r7, r1
   1955a:	4616      	mov	r6, r2
	k_timeout_t timeout = K_FOREVER;
	struct net_context *ctx;
	struct net_pkt *last_pkt;
	int fd;

	fd = z_reserve_fd();
   1955c:	f7ff f9c4 	bl	188e8 <z_reserve_fd>
	if (fd < 0) {
   19560:	1e04      	subs	r4, r0, #0
   19562:	db31      	blt.n	195c8 <zsock_accept_ctx+0x74>
		return -1;
	}

	if (sock_is_nonblock(parent)) {
   19564:	6da9      	ldr	r1, [r5, #88]	; 0x58
   19566:	f081 0102 	eor.w	r1, r1, #2
   1956a:	f341 0140 	sbfx	r1, r1, #1, #1
	return z_impl_k_queue_get(queue, timeout);
   1956e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   19572:	f013 faab 	bl	2cacc <z_impl_k_queue_get>
		timeout = K_NO_WAIT;
	}

	ctx = k_fifo_get(&parent->accept_q, timeout);
	if (ctx == NULL) {
   19576:	4605      	mov	r5, r0
   19578:	b938      	cbnz	r0, 1958a <zsock_accept_ctx+0x36>
		z_free_fd(fd);
   1957a:	4620      	mov	r0, r4
   1957c:	f7ff f9e0 	bl	18940 <z_free_fd>
		errno = EAGAIN;
   19580:	f01b ffa7 	bl	354d2 <__errno>
   19584:	230b      	movs	r3, #11
			*addrlen = sizeof(struct sockaddr_in);
		} else if (ctx->remote.sa_family == AF_INET6) {
			*addrlen = sizeof(struct sockaddr_in6);
		} else {
			z_free_fd(fd);
			errno = ENOTSUP;
   19586:	6003      	str	r3, [r0, #0]
			return -1;
   19588:	e01e      	b.n	195c8 <zsock_accept_ctx+0x74>
	return z_queue_node_peek(sys_sflist_peek_tail(&queue->data_q), false);
   1958a:	2100      	movs	r1, #0
   1958c:	6e00      	ldr	r0, [r0, #96]	; 0x60
   1958e:	f01f fb65 	bl	38c5c <z_queue_node_peek>
	if (last_pkt) {
   19592:	b170      	cbz	r0, 195b2 <zsock_accept_ctx+0x5e>
}

#if defined(CONFIG_NET_SOCKETS)
static inline u8_t net_pkt_eof(struct net_pkt *pkt)
{
	return pkt->sent_or_eof;
   19594:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
		if (net_pkt_eof(last_pkt)) {
   19598:	0799      	lsls	r1, r3, #30
   1959a:	d50a      	bpl.n	195b2 <zsock_accept_ctx+0x5e>
static inline void sock_set_flag(struct net_context *ctx, uintptr_t mask,
				 uintptr_t flag)
{
	uintptr_t val = POINTER_TO_UINT(ctx->socket_data);

	val = (val & ~mask) | flag;
   1959c:	6dab      	ldr	r3, [r5, #88]	; 0x58
			z_free_fd(fd);
   1959e:	4620      	mov	r0, r4
   195a0:	f043 0301 	orr.w	r3, r3, #1
	(ctx)->socket_data = UINT_TO_POINTER(val);
   195a4:	65ab      	str	r3, [r5, #88]	; 0x58
   195a6:	f7ff f9cb 	bl	18940 <z_free_fd>
			errno = ECONNABORTED;
   195aa:	f01b ff92 	bl	354d2 <__errno>
   195ae:	2371      	movs	r3, #113	; 0x71
   195b0:	e7e9      	b.n	19586 <zsock_accept_ctx+0x32>
	return context->flags & NET_CONTEXT_CLOSING_SOCK;
   195b2:	f8b5 307a 	ldrh.w	r3, [r5, #122]	; 0x7a
	if (net_context_is_closing(ctx)) {
   195b6:	055a      	lsls	r2, r3, #21
   195b8:	d509      	bpl.n	195ce <zsock_accept_ctx+0x7a>
		errno = ECONNABORTED;
   195ba:	f01b ff8a 	bl	354d2 <__errno>
   195be:	2371      	movs	r3, #113	; 0x71
   195c0:	6003      	str	r3, [r0, #0]
		z_free_fd(fd);
   195c2:	4620      	mov	r0, r4
   195c4:	f7ff f9bc 	bl	18940 <z_free_fd>
		return -1;
   195c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   195cc:	e01b      	b.n	19606 <zsock_accept_ctx+0xb2>
		context->flags &= ~NET_CONTEXT_ACCEPTING_SOCK;
   195ce:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   195d2:	f8a5 307a 	strh.w	r3, [r5, #122]	; 0x7a
	if (addr != NULL && addrlen != NULL) {
   195d6:	b177      	cbz	r7, 195f6 <zsock_accept_ctx+0xa2>
   195d8:	b16e      	cbz	r6, 195f6 <zsock_accept_ctx+0xa2>
		int len = MIN(*addrlen, sizeof(ctx->remote));
   195da:	6832      	ldr	r2, [r6, #0]
   195dc:	f105 0124 	add.w	r1, r5, #36	; 0x24
   195e0:	2a08      	cmp	r2, #8
   195e2:	bf28      	it	cs
   195e4:	2208      	movcs	r2, #8
   195e6:	4638      	mov	r0, r7
   195e8:	f01f fceb 	bl	38fc2 <memcpy>
		if (ctx->remote.sa_family == AF_INET) {
   195ec:	8cab      	ldrh	r3, [r5, #36]	; 0x24
   195ee:	2b01      	cmp	r3, #1
   195f0:	d10b      	bne.n	1960a <zsock_accept_ctx+0xb6>
			*addrlen = sizeof(struct sockaddr_in);
   195f2:	2308      	movs	r3, #8
			*addrlen = sizeof(struct sockaddr_in6);
   195f4:	6033      	str	r3, [r6, #0]
	 * connection, but it must not dispose of the context behind
	 * the application back. Likewise, when application "closes"
	 * context, it's not disposed of immediately - there's yet
	 * closing handshake for stack to perform.
	 */
	net_context_ref(ctx);
   195f6:	4628      	mov	r0, r5
   195f8:	f01c f9c2 	bl	35980 <net_context_ref>

	NET_DBG("accept: ctx=%p, fd=%d", ctx, fd);

	z_finalize_fd(fd, ctx, (const struct fd_op_vtable *)&sock_fd_op_vtable);
   195fc:	4a08      	ldr	r2, [pc, #32]	; (19620 <zsock_accept_ctx+0xcc>)
   195fe:	4629      	mov	r1, r5
   19600:	4620      	mov	r0, r4
   19602:	f7ff f993 	bl	1892c <z_finalize_fd>

	return fd;
}
   19606:	4620      	mov	r0, r4
   19608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		} else if (ctx->remote.sa_family == AF_INET6) {
   1960a:	2b02      	cmp	r3, #2
   1960c:	d101      	bne.n	19612 <zsock_accept_ctx+0xbe>
			*addrlen = sizeof(struct sockaddr_in6);
   1960e:	2318      	movs	r3, #24
   19610:	e7f0      	b.n	195f4 <zsock_accept_ctx+0xa0>
			z_free_fd(fd);
   19612:	4620      	mov	r0, r4
   19614:	f7ff f994 	bl	18940 <z_free_fd>
			errno = ENOTSUP;
   19618:	f01b ff5b 	bl	354d2 <__errno>
   1961c:	2386      	movs	r3, #134	; 0x86
   1961e:	e7b2      	b.n	19586 <zsock_accept_ctx+0x32>
   19620:	0003a288 	.word	0x0003a288

00019624 <zsock_sendto_ctx>:
#endif /* CONFIG_USERSPACE */

ssize_t zsock_sendto_ctx(struct net_context *ctx, const void *buf, size_t len,
			 int flags,
			 const struct sockaddr *dest_addr, socklen_t addrlen)
{
   19624:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_timeout_t timeout = K_FOREVER;
	int status;

	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
   19628:	065b      	lsls	r3, r3, #25
   1962a:	bf58      	it	pl
   1962c:	6d84      	ldrpl	r4, [r0, #88]	; 0x58
{
   1962e:	b085      	sub	sp, #20
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
   19630:	bf58      	it	pl
   19632:	f084 0402 	eorpl.w	r4, r4, #2
{
   19636:	4688      	mov	r8, r1
   19638:	4691      	mov	r9, r2
	}

	/* Register the callback before sending in order to receive the response
	 * from the peer.
	 */
	status = net_context_recv(ctx, zsock_received_cb,
   1963a:	6803      	ldr	r3, [r0, #0]
   1963c:	f04f 0200 	mov.w	r2, #0
   19640:	4919      	ldr	r1, [pc, #100]	; (196a8 <zsock_sendto_ctx+0x84>)
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
   19642:	bf54      	ite	pl
   19644:	f344 0440 	sbfxpl	r4, r4, #1, #1
		timeout = K_NO_WAIT;
   19648:	2400      	movmi	r4, #0
{
   1964a:	4605      	mov	r5, r0
   1964c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	status = net_context_recv(ctx, zsock_received_cb,
   1964e:	f003 fd35 	bl	1d0bc <net_context_recv>
				  K_NO_WAIT, ctx->user_data);
	if (status < 0) {
   19652:	1e07      	subs	r7, r0, #0
   19654:	da09      	bge.n	1966a <zsock_sendto_ctx+0x46>
		errno = -status;
   19656:	f01b ff3c 	bl	354d2 <__errno>
   1965a:	427f      	negs	r7, r7
   1965c:	6007      	str	r7, [r0, #0]
					  ctx->user_data);
	}

	if (status < 0) {
		errno = -status;
		return -1;
   1965e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	}

	return status;
}
   19662:	4620      	mov	r0, r4
   19664:	b005      	add	sp, #20
   19666:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (dest_addr) {
   1966a:	682b      	ldr	r3, [r5, #0]
   1966c:	b19e      	cbz	r6, 19696 <zsock_sendto_ctx+0x72>
		status = net_context_sendto(ctx, buf, len, dest_addr,
   1966e:	e9cd 4302 	strd	r4, r3, [sp, #8]
   19672:	2300      	movs	r3, #0
   19674:	9301      	str	r3, [sp, #4]
   19676:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   19678:	464a      	mov	r2, r9
   1967a:	9300      	str	r3, [sp, #0]
   1967c:	4641      	mov	r1, r8
   1967e:	4633      	mov	r3, r6
   19680:	4628      	mov	r0, r5
   19682:	f01c fa18 	bl	35ab6 <net_context_sendto>
	if (status < 0) {
   19686:	2800      	cmp	r0, #0
		status = net_context_send(ctx, buf, len, NULL, timeout,
   19688:	4604      	mov	r4, r0
	if (status < 0) {
   1968a:	daea      	bge.n	19662 <zsock_sendto_ctx+0x3e>
		errno = -status;
   1968c:	f01b ff21 	bl	354d2 <__errno>
   19690:	4264      	negs	r4, r4
   19692:	6004      	str	r4, [r0, #0]
   19694:	e7e3      	b.n	1965e <zsock_sendto_ctx+0x3a>
		status = net_context_send(ctx, buf, len, NULL, timeout,
   19696:	e9cd 4300 	strd	r4, r3, [sp]
   1969a:	464a      	mov	r2, r9
   1969c:	4633      	mov	r3, r6
   1969e:	4641      	mov	r1, r8
   196a0:	4628      	mov	r0, r5
   196a2:	f01c f9bb 	bl	35a1c <net_context_send>
   196a6:	e7ee      	b.n	19686 <zsock_sendto_ctx+0x62>
   196a8:	00033d3d 	.word	0x00033d3d

000196ac <zsock_recvfrom_ctx>:
}

ssize_t zsock_recvfrom_ctx(struct net_context *ctx, void *buf, size_t max_len,
			   int flags,
			   struct sockaddr *src_addr, socklen_t *addrlen)
{
   196ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   196b0:	b08d      	sub	sp, #52	; 0x34
   196b2:	461d      	mov	r5, r3
   196b4:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
   196b8:	4680      	mov	r8, r0
   196ba:	9102      	str	r1, [sp, #8]
   196bc:	9200      	str	r2, [sp, #0]
	enum net_sock_type sock_type = net_context_get_type(ctx);
   196be:	f7ff fe25 	bl	1930c <net_context_get_type>

	if (max_len == 0) {
   196c2:	9b00      	ldr	r3, [sp, #0]
   196c4:	b90b      	cbnz	r3, 196ca <zsock_recvfrom_ctx+0x1e>
	if (sock_type == SOCK_DGRAM) {
		return zsock_recv_dgram(ctx, buf, max_len, flags, src_addr, addrlen);
	} else if (sock_type == SOCK_STREAM) {
		return zsock_recv_stream(ctx, buf, max_len, flags);
	} else {
		__ASSERT(0, "Unknown socket type");
   196c6:	2400      	movs	r4, #0
   196c8:	e0bf      	b.n	1984a <zsock_recvfrom_ctx+0x19e>
	if (sock_type == SOCK_DGRAM) {
   196ca:	2802      	cmp	r0, #2
   196cc:	f040 80c6 	bne.w	1985c <zsock_recvfrom_ctx+0x1b0>
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
   196d0:	066b      	lsls	r3, r5, #25
   196d2:	bf57      	itett	pl
   196d4:	f8d8 1058 	ldrpl.w	r1, [r8, #88]	; 0x58
		timeout = K_NO_WAIT;
   196d8:	2100      	movmi	r1, #0
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
   196da:	f081 0102 	eorpl.w	r1, r1, #2
   196de:	f341 0140 	sbfxpl	r1, r1, #1, #1
	if (flags & ZSOCK_MSG_PEEK) {
   196e2:	f015 0502 	ands.w	r5, r5, #2
   196e6:	f108 005c 	add.w	r0, r8, #92	; 0x5c
   196ea:	d01c      	beq.n	19726 <zsock_recvfrom_ctx+0x7a>
		res = k_fifo_wait_non_empty(&ctx->recv_q, timeout);
   196ec:	f01a fb11 	bl	33d12 <k_fifo_wait_non_empty>
		if (res && res != -EAGAIN && res != -EINTR) {
   196f0:	f100 030b 	add.w	r3, r0, #11
   196f4:	2b0b      	cmp	r3, #11
		res = k_fifo_wait_non_empty(&ctx->recv_q, timeout);
   196f6:	4604      	mov	r4, r0
		if (res && res != -EAGAIN && res != -EINTR) {
   196f8:	d806      	bhi.n	19708 <zsock_recvfrom_ctx+0x5c>
   196fa:	f640 0181 	movw	r1, #2177	; 0x881
   196fe:	40d9      	lsrs	r1, r3
   19700:	43c9      	mvns	r1, r1
   19702:	f011 0101 	ands.w	r1, r1, #1
   19706:	d004      	beq.n	19712 <zsock_recvfrom_ctx+0x66>
			errno = -res;
   19708:	f01b fee3 	bl	354d2 <__errno>
   1970c:	4264      	negs	r4, r4
   1970e:	6004      	str	r4, [r0, #0]
			return -1;
   19710:	e033      	b.n	1977a <zsock_recvfrom_ctx+0xce>
	return z_queue_node_peek(sys_sflist_peek_head(&queue->data_q), false);
   19712:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
   19716:	f01f faa1 	bl	38c5c <z_queue_node_peek>
   1971a:	4604      	mov	r4, r0
	if (!pkt) {
   1971c:	b930      	cbnz	r0, 1972c <zsock_recvfrom_ctx+0x80>
				errno = EAGAIN;
   1971e:	f01b fed8 	bl	354d2 <__errno>
   19722:	230b      	movs	r3, #11
   19724:	e0b6      	b.n	19894 <zsock_recvfrom_ctx+0x1e8>
   19726:	f013 f9d1 	bl	2cacc <z_impl_k_queue_get>
   1972a:	e7f6      	b.n	1971a <zsock_recvfrom_ctx+0x6e>
 */
static inline void net_pkt_cursor_backup(struct net_pkt *pkt,
					 struct net_pkt_cursor *backup)
{
	backup->buf = pkt->cursor.buf;
	backup->pos = pkt->cursor.pos;
   1972c:	e9d0 a305 	ldrd	sl, r3, [r0, #20]
   19730:	9301      	str	r3, [sp, #4]
	if (src_addr && addrlen) {
   19732:	2e00      	cmp	r6, #0
   19734:	d06a      	beq.n	1980c <zsock_recvfrom_ctx+0x160>
   19736:	2f00      	cmp	r7, #0
   19738:	d068      	beq.n	1980c <zsock_recvfrom_ctx+0x160>
		rv = sock_get_pkt_src_addr(pkt, net_context_get_ip_proto(ctx),
   1973a:	f8b8 3078 	ldrh.w	r3, [r8, #120]	; 0x78
   1973e:	f8d7 8000 	ldr.w	r8, [r7]
   19742:	9303      	str	r3, [sp, #12]
	net_pkt_cursor_init(pkt);
   19744:	f01c fb21 	bl	35d8a <net_pkt_cursor_init>
	return pkt->family;
   19748:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
   1974c:	f3c3 0342 	ubfx	r3, r3, #1, #3
	if (IS_ENABLED(CONFIG_NET_IPV4) &&
   19750:	2b01      	cmp	r3, #1
	addr->sa_family = net_pkt_family(pkt);
   19752:	8033      	strh	r3, [r6, #0]
	if (IS_ENABLED(CONFIG_NET_IPV4) &&
   19754:	d014      	beq.n	19780 <zsock_recvfrom_ctx+0xd4>
		ret = -ENOTSUP;
   19756:	f06f 0985 	mvn.w	r9, #133	; 0x85
 */
static inline void net_pkt_cursor_restore(struct net_pkt *pkt,
					  struct net_pkt_cursor *backup)
{
	pkt->cursor.buf = backup->buf;
	pkt->cursor.pos = backup->pos;
   1975a:	9b01      	ldr	r3, [sp, #4]
	pkt->cursor.buf = backup->buf;
   1975c:	f8c4 a014 	str.w	sl, [r4, #20]
	pkt->cursor.pos = backup->pos;
   19760:	61a3      	str	r3, [r4, #24]
		if (rv < 0) {
   19762:	f1b9 0f00 	cmp.w	r9, #0
   19766:	d04c      	beq.n	19802 <zsock_recvfrom_ctx+0x156>
			errno = -rv;
   19768:	f01b feb3 	bl	354d2 <__errno>
   1976c:	f1c9 0300 	rsb	r3, r9, #0
		errno = ENOBUFS;
   19770:	6003      	str	r3, [r0, #0]
	if (!(flags & ZSOCK_MSG_PEEK)) {
   19772:	b915      	cbnz	r5, 1977a <zsock_recvfrom_ctx+0xce>
		net_pkt_unref(pkt);
   19774:	4620      	mov	r0, r4
   19776:	f01c faa4 	bl	35cc2 <net_pkt_unref>
	return -1;
   1977a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1977e:	e064      	b.n	1984a <zsock_recvfrom_ctx+0x19e>
		NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access,
   19780:	f04f 0c00 	mov.w	ip, #0
   19784:	2314      	movs	r3, #20
		if (addrlen < sizeof(struct sockaddr_in)) {
   19786:	f1b8 0f07 	cmp.w	r8, #7
		NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access,
   1978a:	e9cd c307 	strd	ip, r3, [sp, #28]
		if (addrlen < sizeof(struct sockaddr_in)) {
   1978e:	d92c      	bls.n	197ea <zsock_recvfrom_ctx+0x13e>
		ipv4_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(
   19790:	f10d 081c 	add.w	r8, sp, #28
   19794:	4641      	mov	r1, r8
   19796:	4620      	mov	r0, r4
   19798:	f01c fcd5 	bl	36146 <net_pkt_get_data>
		if (!ipv4_hdr ||
   1979c:	4683      	mov	fp, r0
   1979e:	b910      	cbnz	r0, 197a6 <zsock_recvfrom_ctx+0xfa>
			ret = -ENOBUFS;
   197a0:	f06f 0968 	mvn.w	r9, #104	; 0x68
   197a4:	e7d9      	b.n	1975a <zsock_recvfrom_ctx+0xae>
 * Packet needs to be set to overwrite mode.
 */
static inline int net_pkt_acknowledge_data(struct net_pkt *pkt,
					   struct net_pkt_data_access *access)
{
	return net_pkt_skip(pkt, access->size);
   197a6:	9908      	ldr	r1, [sp, #32]
   197a8:	4620      	mov	r0, r4
   197aa:	f01c fb78 	bl	35e9e <net_pkt_skip>
		if (!ipv4_hdr ||
   197ae:	2800      	cmp	r0, #0
   197b0:	d1f6      	bne.n	197a0 <zsock_recvfrom_ctx+0xf4>
		    net_pkt_skip(pkt, net_pkt_ipv4_opts_len(pkt))) {
   197b2:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
   197b6:	4620      	mov	r0, r4
   197b8:	f01c fb71 	bl	35e9e <net_pkt_skip>
		    net_pkt_acknowledge_data(pkt, &ipv4_access) ||
   197bc:	4681      	mov	r9, r0
   197be:	2800      	cmp	r0, #0
   197c0:	d1ee      	bne.n	197a0 <zsock_recvfrom_ctx+0xf4>
		net_ipaddr_copy(&addr4->sin_addr, &ipv4_hdr->src);
   197c2:	f8db 100c 	ldr.w	r1, [fp, #12]
		rv = sock_get_pkt_src_addr(pkt, net_context_get_ip_proto(ctx),
   197c6:	f89d 200c 	ldrb.w	r2, [sp, #12]
		net_ipaddr_copy(&addr4->sin_addr, &ipv4_hdr->src);
   197ca:	6071      	str	r1, [r6, #4]
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   197cc:	2a11      	cmp	r2, #17
   197ce:	d10f      	bne.n	197f0 <zsock_recvfrom_ctx+0x144>
		NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   197d0:	aa05      	add	r2, sp, #20
   197d2:	9207      	str	r2, [sp, #28]
   197d4:	2208      	movs	r2, #8
		udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt,
   197d6:	4641      	mov	r1, r8
		NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   197d8:	9208      	str	r2, [sp, #32]
		tcp_hdr = (struct net_tcp_hdr *)net_pkt_get_data(pkt,
   197da:	4620      	mov	r0, r4
   197dc:	f01c fcb3 	bl	36146 <net_pkt_get_data>
		if (!tcp_hdr) {
   197e0:	2800      	cmp	r0, #0
   197e2:	d0dd      	beq.n	197a0 <zsock_recvfrom_ctx+0xf4>
		*port = tcp_hdr->src_port;
   197e4:	8802      	ldrh	r2, [r0, #0]
   197e6:	8072      	strh	r2, [r6, #2]
   197e8:	e7b7      	b.n	1975a <zsock_recvfrom_ctx+0xae>
			ret = -EINVAL;
   197ea:	f06f 0915 	mvn.w	r9, #21
   197ee:	e7b4      	b.n	1975a <zsock_recvfrom_ctx+0xae>
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   197f0:	2a06      	cmp	r2, #6
   197f2:	d1b0      	bne.n	19756 <zsock_recvfrom_ctx+0xaa>
		NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
   197f4:	2214      	movs	r2, #20
   197f6:	f8cd 8014 	str.w	r8, [sp, #20]
   197fa:	9206      	str	r2, [sp, #24]
		tcp_hdr = (struct net_tcp_hdr *)net_pkt_get_data(pkt,
   197fc:	eb0d 0102 	add.w	r1, sp, r2
   19800:	e7eb      	b.n	197da <zsock_recvfrom_ctx+0x12e>
		if (src_addr->sa_family == AF_INET) {
   19802:	8833      	ldrh	r3, [r6, #0]
   19804:	2b01      	cmp	r3, #1
   19806:	d113      	bne.n	19830 <zsock_recvfrom_ctx+0x184>
			*addrlen = sizeof(struct sockaddr_in);
   19808:	2308      	movs	r3, #8
			*addrlen = sizeof(struct sockaddr_in6);
   1980a:	603b      	str	r3, [r7, #0]
	recv_len = net_pkt_remaining_data(pkt);
   1980c:	4620      	mov	r0, r4
   1980e:	f01c fbc0 	bl	35f92 <net_pkt_remaining_data>
	if (recv_len > max_len) {
   19812:	9b00      	ldr	r3, [sp, #0]
	if (net_pkt_read(pkt, buf, recv_len)) {
   19814:	9902      	ldr	r1, [sp, #8]
   19816:	4283      	cmp	r3, r0
   19818:	bf28      	it	cs
   1981a:	4603      	movcs	r3, r0
   1981c:	4620      	mov	r0, r4
   1981e:	461a      	mov	r2, r3
   19820:	461e      	mov	r6, r3
   19822:	f01c fb52 	bl	35eca <net_pkt_read>
   19826:	b158      	cbz	r0, 19840 <zsock_recvfrom_ctx+0x194>
		errno = ENOBUFS;
   19828:	f01b fe53 	bl	354d2 <__errno>
   1982c:	2369      	movs	r3, #105	; 0x69
   1982e:	e79f      	b.n	19770 <zsock_recvfrom_ctx+0xc4>
		} else if (src_addr->sa_family == AF_INET6) {
   19830:	2b02      	cmp	r3, #2
   19832:	d101      	bne.n	19838 <zsock_recvfrom_ctx+0x18c>
			*addrlen = sizeof(struct sockaddr_in6);
   19834:	2318      	movs	r3, #24
   19836:	e7e8      	b.n	1980a <zsock_recvfrom_ctx+0x15e>
			errno = ENOTSUP;
   19838:	f01b fe4b 	bl	354d2 <__errno>
   1983c:	2386      	movs	r3, #134	; 0x86
   1983e:	e797      	b.n	19770 <zsock_recvfrom_ctx+0xc4>
	if (!(flags & ZSOCK_MSG_PEEK)) {
   19840:	b93d      	cbnz	r5, 19852 <zsock_recvfrom_ctx+0x1a6>
		net_pkt_unref(pkt);
   19842:	4620      	mov	r0, r4
   19844:	f01c fa3d 	bl	35cc2 <net_pkt_unref>
	return recv_len;
   19848:	4634      	mov	r4, r6
	}

	return 0;
}
   1984a:	4620      	mov	r0, r4
   1984c:	b00d      	add	sp, #52	; 0x34
   1984e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	pkt->cursor.pos = backup->pos;
   19852:	9b01      	ldr	r3, [sp, #4]
	pkt->cursor.buf = backup->buf;
   19854:	f8c4 a014 	str.w	sl, [r4, #20]
	pkt->cursor.pos = backup->pos;
   19858:	61a3      	str	r3, [r4, #24]
   1985a:	e7f5      	b.n	19848 <zsock_recvfrom_ctx+0x19c>
	} else if (sock_type == SOCK_STREAM) {
   1985c:	2801      	cmp	r0, #1
   1985e:	f040 8087 	bne.w	19970 <zsock_recvfrom_ctx+0x2c4>
	NET_ASSERT(context);
   19862:	f1b8 0f00 	cmp.w	r8, #0
   19866:	d10e      	bne.n	19886 <zsock_recvfrom_ctx+0x1da>
   19868:	4949      	ldr	r1, [pc, #292]	; (19990 <zsock_recvfrom_ctx+0x2e4>)
   1986a:	f44f 73a9 	mov.w	r3, #338	; 0x152
   1986e:	4a49      	ldr	r2, [pc, #292]	; (19994 <zsock_recvfrom_ctx+0x2e8>)
   19870:	4849      	ldr	r0, [pc, #292]	; (19998 <zsock_recvfrom_ctx+0x2ec>)
   19872:	f019 fe9e 	bl	335b2 <printk>
   19876:	4849      	ldr	r0, [pc, #292]	; (1999c <zsock_recvfrom_ctx+0x2f0>)
   19878:	f019 fe9b 	bl	335b2 <printk>
   1987c:	f44f 71a9 	mov.w	r1, #338	; 0x152
   19880:	4844      	ldr	r0, [pc, #272]	; (19994 <zsock_recvfrom_ctx+0x2e8>)
   19882:	f01a f997 	bl	33bb4 <assert_post_action>
	if (!net_context_is_used(ctx)) {
   19886:	f8b8 307a 	ldrh.w	r3, [r8, #122]	; 0x7a
   1988a:	07dc      	lsls	r4, r3, #31
   1988c:	d404      	bmi.n	19898 <zsock_recvfrom_ctx+0x1ec>
		errno = EBADF;
   1988e:	f01b fe20 	bl	354d2 <__errno>
   19892:	2309      	movs	r3, #9
			errno = ENOBUFS;
   19894:	6003      	str	r3, [r0, #0]
			return -1;
   19896:	e770      	b.n	1977a <zsock_recvfrom_ctx+0xce>
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
   19898:	0668      	lsls	r0, r5, #25
}

static inline uintptr_t sock_get_flag(struct net_context *ctx, uintptr_t mask)
{
	return POINTER_TO_UINT(ctx->socket_data) & mask;
   1989a:	f8d8 7058 	ldr.w	r7, [r8, #88]	; 0x58
		timeout = K_NO_WAIT;
   1989e:	bf4e      	itee	mi
   198a0:	2700      	movmi	r7, #0
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
   198a2:	f087 0702 	eorpl.w	r7, r7, #2
   198a6:	f347 0740 	sbfxpl	r7, r7, #1, #1
		res = k_fifo_wait_non_empty(&ctx->recv_q, timeout);
   198aa:	f108 0a5c 	add.w	sl, r8, #92	; 0x5c
   198ae:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
		if (sock_is_eof(ctx)) {
   198b2:	07d9      	lsls	r1, r3, #31
   198b4:	f53f af07 	bmi.w	196c6 <zsock_recvfrom_ctx+0x1a>
		res = k_fifo_wait_non_empty(&ctx->recv_q, timeout);
   198b8:	4639      	mov	r1, r7
   198ba:	4650      	mov	r0, sl
   198bc:	f01a fa29 	bl	33d12 <k_fifo_wait_non_empty>
		if (res && res != -EAGAIN && res != -EINTR) {
   198c0:	f100 010b 	add.w	r1, r0, #11
   198c4:	290b      	cmp	r1, #11
		res = k_fifo_wait_non_empty(&ctx->recv_q, timeout);
   198c6:	4604      	mov	r4, r0
		if (res && res != -EAGAIN && res != -EINTR) {
   198c8:	f63f af1e 	bhi.w	19708 <zsock_recvfrom_ctx+0x5c>
   198cc:	f640 0381 	movw	r3, #2177	; 0x881
   198d0:	fa23 f101 	lsr.w	r1, r3, r1
   198d4:	43c9      	mvns	r1, r1
   198d6:	f011 0101 	ands.w	r1, r1, #1
   198da:	f47f af15 	bne.w	19708 <zsock_recvfrom_ctx+0x5c>
   198de:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
   198e2:	f01f f9bb 	bl	38c5c <z_queue_node_peek>
		if (!pkt) {
   198e6:	4606      	mov	r6, r0
   198e8:	b928      	cbnz	r0, 198f6 <zsock_recvfrom_ctx+0x24a>
   198ea:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
			if (sock_is_eof(ctx)) {
   198ee:	07da      	lsls	r2, r3, #31
   198f0:	f53f aee9 	bmi.w	196c6 <zsock_recvfrom_ctx+0x1a>
   198f4:	e713      	b.n	1971e <zsock_recvfrom_ctx+0x72>
	backup->buf = pkt->cursor.buf;
   198f6:	6943      	ldr	r3, [r0, #20]
   198f8:	9303      	str	r3, [sp, #12]
	backup->pos = pkt->cursor.pos;
   198fa:	6983      	ldr	r3, [r0, #24]
   198fc:	9301      	str	r3, [sp, #4]
		data_len = net_pkt_remaining_data(pkt);
   198fe:	f01c fb48 	bl	35f92 <net_pkt_remaining_data>
   19902:	9b00      	ldr	r3, [sp, #0]
   19904:	4683      	mov	fp, r0
		if (recv_len > max_len) {
   19906:	4283      	cmp	r3, r0
   19908:	bf28      	it	cs
   1990a:	4603      	movcs	r3, r0
		if (net_pkt_read(pkt, buf, recv_len)) {
   1990c:	9902      	ldr	r1, [sp, #8]
   1990e:	461a      	mov	r2, r3
   19910:	4630      	mov	r0, r6
   19912:	461c      	mov	r4, r3
   19914:	f01c fad9 	bl	35eca <net_pkt_read>
   19918:	9b03      	ldr	r3, [sp, #12]
   1991a:	b118      	cbz	r0, 19924 <zsock_recvfrom_ctx+0x278>
			errno = ENOBUFS;
   1991c:	f01b fdd9 	bl	354d2 <__errno>
   19920:	2369      	movs	r3, #105	; 0x69
   19922:	e7b7      	b.n	19894 <zsock_recvfrom_ctx+0x1e8>
		if (!(flags & ZSOCK_MSG_PEEK)) {
   19924:	f015 0902 	ands.w	r9, r5, #2
   19928:	d11e      	bne.n	19968 <zsock_recvfrom_ctx+0x2bc>
			if (recv_len == data_len) {
   1992a:	9b00      	ldr	r3, [sp, #0]
   1992c:	455b      	cmp	r3, fp
   1992e:	d310      	bcc.n	19952 <zsock_recvfrom_ctx+0x2a6>
   19930:	4649      	mov	r1, r9
   19932:	4650      	mov	r0, sl
   19934:	f013 f8ca 	bl	2cacc <z_impl_k_queue_get>
	return pkt->sent_or_eof;
   19938:	f896 303d 	ldrb.w	r3, [r6, #61]	; 0x3d
				net_pkt_unref(pkt);
   1993c:	4630      	mov	r0, r6
				if (net_pkt_eof(pkt)) {
   1993e:	079b      	lsls	r3, r3, #30
	val = (val & ~mask) | flag;
   19940:	bf42      	ittt	mi
   19942:	f8d8 3058 	ldrmi.w	r3, [r8, #88]	; 0x58
   19946:	f043 0301 	orrmi.w	r3, r3, #1
	(ctx)->socket_data = UINT_TO_POINTER(val);
   1994a:	f8c8 3058 	strmi.w	r3, [r8, #88]	; 0x58
				net_pkt_unref(pkt);
   1994e:	f01c f9b8 	bl	35cc2 <net_pkt_unref>
	} while (recv_len == 0);
   19952:	2c00      	cmp	r4, #0
   19954:	d0ab      	beq.n	198ae <zsock_recvfrom_ctx+0x202>
	if (!(flags & ZSOCK_MSG_PEEK)) {
   19956:	f1b9 0f00 	cmp.w	r9, #0
   1995a:	f47f af76 	bne.w	1984a <zsock_recvfrom_ctx+0x19e>
		net_context_update_recv_wnd(ctx, recv_len);
   1995e:	4621      	mov	r1, r4
   19960:	4640      	mov	r0, r8
   19962:	f01c f8c9 	bl	35af8 <net_context_update_recv_wnd>
	return recv_len;
   19966:	e770      	b.n	1984a <zsock_recvfrom_ctx+0x19e>
	pkt->cursor.buf = backup->buf;
   19968:	6173      	str	r3, [r6, #20]
	pkt->cursor.pos = backup->pos;
   1996a:	9b01      	ldr	r3, [sp, #4]
   1996c:	61b3      	str	r3, [r6, #24]
   1996e:	e7f0      	b.n	19952 <zsock_recvfrom_ctx+0x2a6>
		__ASSERT(0, "Unknown socket type");
   19970:	f240 339f 	movw	r3, #927	; 0x39f
   19974:	4a0a      	ldr	r2, [pc, #40]	; (199a0 <zsock_recvfrom_ctx+0x2f4>)
   19976:	490b      	ldr	r1, [pc, #44]	; (199a4 <zsock_recvfrom_ctx+0x2f8>)
   19978:	4807      	ldr	r0, [pc, #28]	; (19998 <zsock_recvfrom_ctx+0x2ec>)
   1997a:	f019 fe1a 	bl	335b2 <printk>
   1997e:	480a      	ldr	r0, [pc, #40]	; (199a8 <zsock_recvfrom_ctx+0x2fc>)
   19980:	f019 fe17 	bl	335b2 <printk>
   19984:	f240 319f 	movw	r1, #927	; 0x39f
   19988:	4805      	ldr	r0, [pc, #20]	; (199a0 <zsock_recvfrom_ctx+0x2f4>)
   1998a:	f01a f913 	bl	33bb4 <assert_post_action>
   1998e:	e69a      	b.n	196c6 <zsock_recvfrom_ctx+0x1a>
   19990:	0003cb77 	.word	0x0003cb77
   19994:	0003cb4a 	.word	0x0003cb4a
   19998:	0003b773 	.word	0x0003b773
   1999c:	0003cb7f 	.word	0x0003cb7f
   199a0:	0003cb82 	.word	0x0003cb82
   199a4:	0003fd2f 	.word	0x0003fd2f
   199a8:	0003cc1c 	.word	0x0003cc1c

000199ac <z_impl_zsock_poll>:

	return timeout - elapsed;
}

int z_impl_zsock_poll(struct zsock_pollfd *fds, int nfds, int poll_timeout)
{
   199ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   199b0:	4683      	mov	fp, r0
   199b2:	4688      	mov	r8, r1
   199b4:	ea42 79e2 	orr.w	r9, r2, r2, asr #31
   199b8:	b09b      	sub	sp, #108	; 0x6c
		poll_timeout = SYS_FOREVER_MS;
	} else {
		timeout = K_MSEC(poll_timeout);
	}

	end = z_timeout_end_calc(timeout);
   199ba:	4648      	mov	r0, r9
   199bc:	f01f fa35 	bl	38e2a <z_timeout_end_calc>

	pev = poll_events;
	for (pfd = fds, i = nfds; i--; pfd++) {
   199c0:	4646      	mov	r6, r8
   199c2:	464c      	mov	r4, r9
   199c4:	465f      	mov	r7, fp
	end = z_timeout_end_calc(timeout);
   199c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
	pev = poll_events;
   199ca:	ad0b      	add	r5, sp, #44	; 0x2c
   199cc:	9509      	str	r5, [sp, #36]	; 0x24
	for (pfd = fds, i = nfds; i--; pfd++) {
   199ce:	b9ee      	cbnz	r6, 19a0c <z_impl_zsock_poll+0x60>
			errno = -result;
			return -1;
		}
	}

	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   199d0:	1c63      	adds	r3, r4, #1
   199d2:	2b01      	cmp	r3, #1
   199d4:	d94f      	bls.n	19a76 <z_impl_zsock_poll+0xca>
	    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
		s64_t remaining = end - z_tick_get();
   199d6:	f015 f987 	bl	2ece8 <z_tick_get>
   199da:	9b06      	ldr	r3, [sp, #24]
   199dc:	1a1b      	subs	r3, r3, r0
   199de:	9302      	str	r3, [sp, #8]
   199e0:	9b07      	ldr	r3, [sp, #28]
   199e2:	eb63 0301 	sbc.w	r3, r3, r1
   199e6:	9303      	str	r3, [sp, #12]

		if (remaining <= 0) {
   199e8:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   199ec:	2b01      	cmp	r3, #1
   199ee:	f174 0300 	sbcs.w	r3, r4, #0
   199f2:	db3f      	blt.n	19a74 <z_impl_zsock_poll+0xc8>
			return (u32_t)((t * to_hz + off) / from_hz);
   199f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   199f8:	f647 72ff 	movw	r2, #32767	; 0x7fff
   199fc:	2300      	movs	r3, #0
   199fe:	9802      	ldr	r0, [sp, #8]
   19a00:	fbe1 2300 	umlal	r2, r3, r1, r0
   19a04:	0bd4      	lsrs	r4, r2, #15
   19a06:	ea44 4443 	orr.w	r4, r4, r3, lsl #17
   19a0a:	e034      	b.n	19a76 <z_impl_zsock_poll+0xca>
		if (pfd->fd < 0) {
   19a0c:	6838      	ldr	r0, [r7, #0]
   19a0e:	2800      	cmp	r0, #0
   19a10:	db2d      	blt.n	19a6e <z_impl_zsock_poll+0xc2>
		ctx = z_get_fd_obj_and_vtable(pfd->fd, &vtable);
   19a12:	a90a      	add	r1, sp, #40	; 0x28
   19a14:	f7fe ff54 	bl	188c0 <z_get_fd_obj_and_vtable>
		if (ctx == NULL) {
   19a18:	4682      	mov	sl, r0
   19a1a:	b340      	cbz	r0, 19a6e <z_impl_zsock_poll+0xc2>
		result = z_fdtable_call_ioctl(vtable, ctx,
   19a1c:	ab1a      	add	r3, sp, #104	; 0x68
   19a1e:	9301      	str	r3, [sp, #4]
   19a20:	ab09      	add	r3, sp, #36	; 0x24
   19a22:	9300      	str	r3, [sp, #0]
   19a24:	4601      	mov	r1, r0
   19a26:	463b      	mov	r3, r7
   19a28:	f240 1203 	movw	r2, #259	; 0x103
   19a2c:	980a      	ldr	r0, [sp, #40]	; 0x28
   19a2e:	f01a f959 	bl	33ce4 <z_fdtable_call_ioctl>
		if (result == -EALREADY) {
   19a32:	f110 0f78 	cmn.w	r0, #120	; 0x78
		result = z_fdtable_call_ioctl(vtable, ctx,
   19a36:	4603      	mov	r3, r0
		if (result == -EALREADY) {
   19a38:	d018      	beq.n	19a6c <z_impl_zsock_poll+0xc0>
		} else if (result == -EXDEV) {
   19a3a:	f110 0f12 	cmn.w	r0, #18
   19a3e:	d10d      	bne.n	19a5c <z_impl_zsock_poll+0xb0>
			return z_fdtable_call_ioctl(vtable, ctx,
   19a40:	e9cd 8900 	strd	r8, r9, [sp]
   19a44:	465b      	mov	r3, fp
   19a46:	f240 1205 	movw	r2, #261	; 0x105
   19a4a:	4651      	mov	r1, sl
   19a4c:	980a      	ldr	r0, [sp, #40]	; 0x28
   19a4e:	f01a f949 	bl	33ce4 <z_fdtable_call_ioctl>
   19a52:	4606      	mov	r6, r0
			}
		}
	} while (retry);

	return ret;
}
   19a54:	4630      	mov	r0, r6
   19a56:	b01b      	add	sp, #108	; 0x6c
   19a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (result != 0) {
   19a5c:	b138      	cbz	r0, 19a6e <z_impl_zsock_poll+0xc2>
   19a5e:	9302      	str	r3, [sp, #8]
				errno = -result;
   19a60:	f01b fd37 	bl	354d2 <__errno>
   19a64:	9b02      	ldr	r3, [sp, #8]
   19a66:	425b      	negs	r3, r3
   19a68:	6003      	str	r3, [r0, #0]
				return -1;
   19a6a:	e01d      	b.n	19aa8 <z_impl_zsock_poll+0xfc>
			timeout = K_NO_WAIT;
   19a6c:	2400      	movs	r4, #0
	for (pfd = fds, i = nfds; i--; pfd++) {
   19a6e:	3708      	adds	r7, #8
   19a70:	3e01      	subs	r6, #1
   19a72:	e7ac      	b.n	199ce <z_impl_zsock_poll+0x22>
			timeout = K_NO_WAIT;
   19a74:	4634      	mov	r4, r6
		ret = k_poll(poll_events, pev - poll_events, timeout);
   19a76:	9909      	ldr	r1, [sp, #36]	; 0x24
   19a78:	4b35      	ldr	r3, [pc, #212]	; (19b50 <z_impl_zsock_poll+0x1a4>)
   19a7a:	1b49      	subs	r1, r1, r5
   19a7c:	1089      	asrs	r1, r1, #2
   19a7e:	4359      	muls	r1, r3
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&events, *(uintptr_t *)&num_events, *(uintptr_t *)&timeout, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   19a80:	4622      	mov	r2, r4
   19a82:	4628      	mov	r0, r5
   19a84:	f015 fbbc 	bl	2f200 <z_impl_k_poll>
		if (ret != 0 && ret != -EAGAIN && ret != -EINTR) {
   19a88:	f100 030b 	add.w	r3, r0, #11
   19a8c:	2b0b      	cmp	r3, #11
   19a8e:	4606      	mov	r6, r0
   19a90:	d806      	bhi.n	19aa0 <z_impl_zsock_poll+0xf4>
   19a92:	f640 0781 	movw	r7, #2177	; 0x881
   19a96:	40df      	lsrs	r7, r3
   19a98:	43ff      	mvns	r7, r7
   19a9a:	f017 0701 	ands.w	r7, r7, #1
   19a9e:	d006      	beq.n	19aae <z_impl_zsock_poll+0x102>
			errno = -ret;
   19aa0:	f01b fd17 	bl	354d2 <__errno>
   19aa4:	4276      	negs	r6, r6
   19aa6:	6006      	str	r6, [r0, #0]
			return -1;
   19aa8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   19aac:	e7d2      	b.n	19a54 <z_impl_zsock_poll+0xa8>
		for (pfd = fds, i = nfds; i--; pfd++) {
   19aae:	46c2      	mov	sl, r8
   19ab0:	46d9      	mov	r9, fp
		ret = 0;
   19ab2:	463e      	mov	r6, r7
		pev = poll_events;
   19ab4:	9509      	str	r5, [sp, #36]	; 0x24
		for (pfd = fds, i = nfds; i--; pfd++) {
   19ab6:	f1ba 0f00 	cmp.w	sl, #0
   19aba:	d11d      	bne.n	19af8 <z_impl_zsock_poll+0x14c>
		if (retry) {
   19abc:	2f00      	cmp	r7, #0
   19abe:	d0c9      	beq.n	19a54 <z_impl_zsock_poll+0xa8>
			if (ret > 0) {
   19ac0:	2e00      	cmp	r6, #0
   19ac2:	dcc7      	bgt.n	19a54 <z_impl_zsock_poll+0xa8>
			if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   19ac4:	2c00      	cmp	r4, #0
   19ac6:	d0c5      	beq.n	19a54 <z_impl_zsock_poll+0xa8>
			if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   19ac8:	1c63      	adds	r3, r4, #1
   19aca:	d0d4      	beq.n	19a76 <z_impl_zsock_poll+0xca>
				s64_t remaining = end - z_tick_get();
   19acc:	f015 f90c 	bl	2ece8 <z_tick_get>
   19ad0:	9b06      	ldr	r3, [sp, #24]
   19ad2:	1a1b      	subs	r3, r3, r0
   19ad4:	9304      	str	r3, [sp, #16]
   19ad6:	9b07      	ldr	r3, [sp, #28]
   19ad8:	eb63 0301 	sbc.w	r3, r3, r1
   19adc:	9305      	str	r3, [sp, #20]
				if (remaining <= 0) {
   19ade:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   19ae2:	2b01      	cmp	r3, #1
   19ae4:	f174 0300 	sbcs.w	r3, r4, #0
   19ae8:	dbb4      	blt.n	19a54 <z_impl_zsock_poll+0xa8>
   19aea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   19aee:	f647 72ff 	movw	r2, #32767	; 0x7fff
   19af2:	2300      	movs	r3, #0
   19af4:	9804      	ldr	r0, [sp, #16]
   19af6:	e783      	b.n	19a00 <z_impl_zsock_poll+0x54>
			pfd->revents = 0;
   19af8:	f04f 0300 	mov.w	r3, #0
			if (pfd->fd < 0) {
   19afc:	f8d9 0000 	ldr.w	r0, [r9]
			pfd->revents = 0;
   19b00:	f8a9 3006 	strh.w	r3, [r9, #6]
			if (pfd->fd < 0) {
   19b04:	2800      	cmp	r0, #0
   19b06:	db1b      	blt.n	19b40 <z_impl_zsock_poll+0x194>
			ctx = z_get_fd_obj_and_vtable(pfd->fd, &vtable);
   19b08:	a90a      	add	r1, sp, #40	; 0x28
   19b0a:	f7fe fed9 	bl	188c0 <z_get_fd_obj_and_vtable>
			if (ctx == NULL) {
   19b0e:	4601      	mov	r1, r0
   19b10:	b920      	cbnz	r0, 19b1c <z_impl_zsock_poll+0x170>
				pfd->revents = ZSOCK_POLLNVAL;
   19b12:	2320      	movs	r3, #32
   19b14:	f8a9 3006 	strh.w	r3, [r9, #6]
				ret++;
   19b18:	3601      	adds	r6, #1
   19b1a:	e011      	b.n	19b40 <z_impl_zsock_poll+0x194>
			result = z_fdtable_call_ioctl(vtable, ctx,
   19b1c:	ab09      	add	r3, sp, #36	; 0x24
   19b1e:	9300      	str	r3, [sp, #0]
   19b20:	f44f 7282 	mov.w	r2, #260	; 0x104
   19b24:	464b      	mov	r3, r9
   19b26:	980a      	ldr	r0, [sp, #40]	; 0x28
   19b28:	f01a f8dc 	bl	33ce4 <z_fdtable_call_ioctl>
			if (result == -EAGAIN) {
   19b2c:	f110 0f0b 	cmn.w	r0, #11
			result = z_fdtable_call_ioctl(vtable, ctx,
   19b30:	4603      	mov	r3, r0
			if (result == -EAGAIN) {
   19b32:	d00a      	beq.n	19b4a <z_impl_zsock_poll+0x19e>
			} else if (result != 0) {
   19b34:	2800      	cmp	r0, #0
   19b36:	d192      	bne.n	19a5e <z_impl_zsock_poll+0xb2>
			if (pfd->revents != 0) {
   19b38:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
   19b3c:	2b00      	cmp	r3, #0
   19b3e:	d1eb      	bne.n	19b18 <z_impl_zsock_poll+0x16c>
		for (pfd = fds, i = nfds; i--; pfd++) {
   19b40:	f109 0908 	add.w	r9, r9, #8
   19b44:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   19b48:	e7b5      	b.n	19ab6 <z_impl_zsock_poll+0x10a>
				retry = true;
   19b4a:	2701      	movs	r7, #1
   19b4c:	e7f8      	b.n	19b40 <z_impl_zsock_poll+0x194>
   19b4e:	bf00      	nop
   19b50:	cccccccd 	.word	0xcccccccd

00019b54 <socket_offload_dns_register>:
#include "sockets_internal.h"

const struct socket_dns_offload *dns_offload;

void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
   19b54:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(ops);
   19b56:	4605      	mov	r5, r0
   19b58:	b948      	cbnz	r0, 19b6e <socket_offload_dns_register+0x1a>
   19b5a:	490c      	ldr	r1, [pc, #48]	; (19b8c <socket_offload_dns_register+0x38>)
   19b5c:	480c      	ldr	r0, [pc, #48]	; (19b90 <socket_offload_dns_register+0x3c>)
   19b5e:	2313      	movs	r3, #19
   19b60:	4a0c      	ldr	r2, [pc, #48]	; (19b94 <socket_offload_dns_register+0x40>)
   19b62:	f019 fd26 	bl	335b2 <printk>
   19b66:	2113      	movs	r1, #19
   19b68:	480a      	ldr	r0, [pc, #40]	; (19b94 <socket_offload_dns_register+0x40>)
   19b6a:	f01a f823 	bl	33bb4 <assert_post_action>
	__ASSERT_NO_MSG(dns_offload == NULL);
   19b6e:	4c0a      	ldr	r4, [pc, #40]	; (19b98 <socket_offload_dns_register+0x44>)
   19b70:	6822      	ldr	r2, [r4, #0]
   19b72:	b14a      	cbz	r2, 19b88 <socket_offload_dns_register+0x34>
   19b74:	4909      	ldr	r1, [pc, #36]	; (19b9c <socket_offload_dns_register+0x48>)
   19b76:	4806      	ldr	r0, [pc, #24]	; (19b90 <socket_offload_dns_register+0x3c>)
   19b78:	2314      	movs	r3, #20
   19b7a:	4a06      	ldr	r2, [pc, #24]	; (19b94 <socket_offload_dns_register+0x40>)
   19b7c:	f019 fd19 	bl	335b2 <printk>
   19b80:	2114      	movs	r1, #20
   19b82:	4804      	ldr	r0, [pc, #16]	; (19b94 <socket_offload_dns_register+0x40>)
   19b84:	f01a f816 	bl	33bb4 <assert_post_action>

	dns_offload = ops;
   19b88:	6025      	str	r5, [r4, #0]
}
   19b8a:	bd38      	pop	{r3, r4, r5, pc}
   19b8c:	0003fa4c 	.word	0x0003fa4c
   19b90:	0003b773 	.word	0x0003b773
   19b94:	0003cc32 	.word	0x0003cc32
   19b98:	2002170c 	.word	0x2002170c
   19b9c:	0003cc6d 	.word	0x0003cc6d

00019ba0 <socket_offload_getaddrinfo>:

int socket_offload_getaddrinfo(const char *node, const char *service,
			       const struct zsock_addrinfo *hints,
			       struct zsock_addrinfo **res)
{
   19ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(dns_offload);
   19ba4:	4c13      	ldr	r4, [pc, #76]	; (19bf4 <socket_offload_getaddrinfo+0x54>)
{
   19ba6:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(dns_offload);
   19ba8:	6823      	ldr	r3, [r4, #0]
{
   19baa:	4605      	mov	r5, r0
   19bac:	460e      	mov	r6, r1
   19bae:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(dns_offload);
   19bb0:	b94b      	cbnz	r3, 19bc6 <socket_offload_getaddrinfo+0x26>
   19bb2:	4911      	ldr	r1, [pc, #68]	; (19bf8 <socket_offload_getaddrinfo+0x58>)
   19bb4:	4811      	ldr	r0, [pc, #68]	; (19bfc <socket_offload_getaddrinfo+0x5c>)
   19bb6:	231d      	movs	r3, #29
   19bb8:	4a11      	ldr	r2, [pc, #68]	; (19c00 <socket_offload_getaddrinfo+0x60>)
   19bba:	f019 fcfa 	bl	335b2 <printk>
   19bbe:	211d      	movs	r1, #29
   19bc0:	480f      	ldr	r0, [pc, #60]	; (19c00 <socket_offload_getaddrinfo+0x60>)
   19bc2:	f019 fff7 	bl	33bb4 <assert_post_action>
	__ASSERT_NO_MSG(dns_offload->getaddrinfo);
   19bc6:	6823      	ldr	r3, [r4, #0]
   19bc8:	681b      	ldr	r3, [r3, #0]
   19bca:	b94b      	cbnz	r3, 19be0 <socket_offload_getaddrinfo+0x40>
   19bcc:	490d      	ldr	r1, [pc, #52]	; (19c04 <socket_offload_getaddrinfo+0x64>)
   19bce:	480b      	ldr	r0, [pc, #44]	; (19bfc <socket_offload_getaddrinfo+0x5c>)
   19bd0:	231e      	movs	r3, #30
   19bd2:	4a0b      	ldr	r2, [pc, #44]	; (19c00 <socket_offload_getaddrinfo+0x60>)
   19bd4:	f019 fced 	bl	335b2 <printk>
   19bd8:	211e      	movs	r1, #30
   19bda:	4809      	ldr	r0, [pc, #36]	; (19c00 <socket_offload_getaddrinfo+0x60>)
   19bdc:	f019 ffea 	bl	33bb4 <assert_post_action>

	return dns_offload->getaddrinfo(node, service, hints, res);
   19be0:	6823      	ldr	r3, [r4, #0]
   19be2:	463a      	mov	r2, r7
   19be4:	681c      	ldr	r4, [r3, #0]
   19be6:	4631      	mov	r1, r6
   19be8:	4643      	mov	r3, r8
   19bea:	4628      	mov	r0, r5
   19bec:	46a4      	mov	ip, r4
}
   19bee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return dns_offload->getaddrinfo(node, service, hints, res);
   19bf2:	4760      	bx	ip
   19bf4:	2002170c 	.word	0x2002170c
   19bf8:	0003cca2 	.word	0x0003cca2
   19bfc:	0003b773 	.word	0x0003b773
   19c00:	0003cc32 	.word	0x0003cc32
   19c04:	0003ccae 	.word	0x0003ccae

00019c08 <socket_offload_freeaddrinfo>:

void socket_offload_freeaddrinfo(struct zsock_addrinfo *res)
{
   19c08:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(dns_offload);
   19c0a:	4c10      	ldr	r4, [pc, #64]	; (19c4c <socket_offload_freeaddrinfo+0x44>)
{
   19c0c:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(dns_offload);
   19c0e:	6823      	ldr	r3, [r4, #0]
   19c10:	b94b      	cbnz	r3, 19c26 <socket_offload_freeaddrinfo+0x1e>
   19c12:	490f      	ldr	r1, [pc, #60]	; (19c50 <socket_offload_freeaddrinfo+0x48>)
   19c14:	480f      	ldr	r0, [pc, #60]	; (19c54 <socket_offload_freeaddrinfo+0x4c>)
   19c16:	2325      	movs	r3, #37	; 0x25
   19c18:	4a0f      	ldr	r2, [pc, #60]	; (19c58 <socket_offload_freeaddrinfo+0x50>)
   19c1a:	f019 fcca 	bl	335b2 <printk>
   19c1e:	2125      	movs	r1, #37	; 0x25
   19c20:	480d      	ldr	r0, [pc, #52]	; (19c58 <socket_offload_freeaddrinfo+0x50>)
   19c22:	f019 ffc7 	bl	33bb4 <assert_post_action>
	__ASSERT_NO_MSG(dns_offload->freeaddrinfo);
   19c26:	6823      	ldr	r3, [r4, #0]
   19c28:	685b      	ldr	r3, [r3, #4]
   19c2a:	b94b      	cbnz	r3, 19c40 <socket_offload_freeaddrinfo+0x38>
   19c2c:	490b      	ldr	r1, [pc, #44]	; (19c5c <socket_offload_freeaddrinfo+0x54>)
   19c2e:	4809      	ldr	r0, [pc, #36]	; (19c54 <socket_offload_freeaddrinfo+0x4c>)
   19c30:	2326      	movs	r3, #38	; 0x26
   19c32:	4a09      	ldr	r2, [pc, #36]	; (19c58 <socket_offload_freeaddrinfo+0x50>)
   19c34:	f019 fcbd 	bl	335b2 <printk>
   19c38:	2126      	movs	r1, #38	; 0x26
   19c3a:	4807      	ldr	r0, [pc, #28]	; (19c58 <socket_offload_freeaddrinfo+0x50>)
   19c3c:	f019 ffba 	bl	33bb4 <assert_post_action>

	return dns_offload->freeaddrinfo(res);
   19c40:	6823      	ldr	r3, [r4, #0]
   19c42:	4628      	mov	r0, r5
}
   19c44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return dns_offload->freeaddrinfo(res);
   19c48:	685b      	ldr	r3, [r3, #4]
   19c4a:	4718      	bx	r3
   19c4c:	2002170c 	.word	0x2002170c
   19c50:	0003cca2 	.word	0x0003cca2
   19c54:	0003b773 	.word	0x0003b773
   19c58:	0003cc32 	.word	0x0003cc32
   19c5c:	0003cc88 	.word	0x0003cc88

00019c60 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   19c60:	4b0e      	ldr	r3, [pc, #56]	; (19c9c <settings_save_one+0x3c>)
{
   19c62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
   19c66:	681c      	ldr	r4, [r3, #0]
{
   19c68:	4606      	mov	r6, r0
   19c6a:	460f      	mov	r7, r1
   19c6c:	4690      	mov	r8, r2
	if (!cs) {
   19c6e:	b194      	cbz	r4, 19c96 <settings_save_one+0x36>
	return z_impl_k_mutex_lock(mutex, timeout);
   19c70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19c74:	480a      	ldr	r0, [pc, #40]	; (19ca0 <settings_save_one+0x40>)
   19c76:	f012 fcbf 	bl	2c5f8 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   19c7a:	6863      	ldr	r3, [r4, #4]
   19c7c:	463a      	mov	r2, r7
   19c7e:	689d      	ldr	r5, [r3, #8]
   19c80:	4631      	mov	r1, r6
   19c82:	4643      	mov	r3, r8
   19c84:	4620      	mov	r0, r4
   19c86:	47a8      	blx	r5
   19c88:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   19c8a:	4805      	ldr	r0, [pc, #20]	; (19ca0 <settings_save_one+0x40>)
   19c8c:	f012 fd92 	bl	2c7b4 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   19c90:	4620      	mov	r0, r4
   19c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   19c96:	f06f 0401 	mvn.w	r4, #1
   19c9a:	e7f9      	b.n	19c90 <settings_save_one+0x30>
   19c9c:	20021718 	.word	0x20021718
   19ca0:	20020748 	.word	0x20020748

00019ca4 <settings_load_subtree>:
	const struct settings_load_arg arg = {
   19ca4:	2300      	movs	r3, #0
{
   19ca6:	b530      	push	{r4, r5, lr}
   19ca8:	b085      	sub	sp, #20
   19caa:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   19cac:	e9cd 3302 	strd	r3, r3, [sp, #8]
   19cb0:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   19cb2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19cb6:	480b      	ldr	r0, [pc, #44]	; (19ce4 <settings_load_subtree+0x40>)
   19cb8:	f012 fc9e 	bl	2c5f8 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   19cbc:	4b0a      	ldr	r3, [pc, #40]	; (19ce8 <settings_load_subtree+0x44>)
   19cbe:	681c      	ldr	r4, [r3, #0]
   19cc0:	b134      	cbz	r4, 19cd0 <settings_load_subtree+0x2c>
		cs->cs_itf->csi_load(cs, &arg);
   19cc2:	6863      	ldr	r3, [r4, #4]
   19cc4:	4620      	mov	r0, r4
   19cc6:	681b      	ldr	r3, [r3, #0]
   19cc8:	a901      	add	r1, sp, #4
   19cca:	4798      	blx	r3
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19ccc:	6824      	ldr	r4, [r4, #0]
	return node->next;
   19cce:	e7f7      	b.n	19cc0 <settings_load_subtree+0x1c>
	rc = settings_commit_subtree(subtree);
   19cd0:	4628      	mov	r0, r5
   19cd2:	f000 f875 	bl	19dc0 <settings_commit_subtree>
   19cd6:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   19cd8:	4802      	ldr	r0, [pc, #8]	; (19ce4 <settings_load_subtree+0x40>)
   19cda:	f012 fd6b 	bl	2c7b4 <z_impl_k_mutex_unlock>
}
   19cde:	4620      	mov	r0, r4
   19ce0:	b005      	add	sp, #20
   19ce2:	bd30      	pop	{r4, r5, pc}
   19ce4:	20020748 	.word	0x20020748
   19ce8:	20021710 	.word	0x20021710

00019cec <settings_store_init>:
	list->head = NULL;
   19cec:	2200      	movs	r2, #0
   19cee:	4b02      	ldr	r3, [pc, #8]	; (19cf8 <settings_store_init+0xc>)
	list->tail = NULL;
   19cf0:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   19cf4:	4770      	bx	lr
   19cf6:	bf00      	nop
   19cf8:	20021710 	.word	0x20021710

00019cfc <settings_init>:
	list->head = NULL;
   19cfc:	2200      	movs	r2, #0
   19cfe:	4b02      	ldr	r3, [pc, #8]	; (19d08 <settings_init+0xc>)
	list->tail = NULL;
   19d00:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   19d04:	f7ff bff2 	b.w	19cec <settings_store_init>
   19d08:	2002171c 	.word	0x2002171c

00019d0c <settings_register>:
}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
int settings_register(struct settings_handler *handler)
{
   19d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   19d10:	4d23      	ldr	r5, [pc, #140]	; (19da0 <settings_register+0x94>)
{
   19d12:	4606      	mov	r6, r0
   19d14:	46a8      	mov	r8, r5
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   19d16:	4c23      	ldr	r4, [pc, #140]	; (19da4 <settings_register+0x98>)
   19d18:	4f23      	ldr	r7, [pc, #140]	; (19da8 <settings_register+0x9c>)
   19d1a:	42ac      	cmp	r4, r5
   19d1c:	d90c      	bls.n	19d38 <settings_register+0x2c>
   19d1e:	4923      	ldr	r1, [pc, #140]	; (19dac <settings_register+0xa0>)
   19d20:	232b      	movs	r3, #43	; 0x2b
   19d22:	463a      	mov	r2, r7
   19d24:	4822      	ldr	r0, [pc, #136]	; (19db0 <settings_register+0xa4>)
   19d26:	f019 fc44 	bl	335b2 <printk>
   19d2a:	4822      	ldr	r0, [pc, #136]	; (19db4 <settings_register+0xa8>)
   19d2c:	f019 fc41 	bl	335b2 <printk>
   19d30:	212b      	movs	r1, #43	; 0x2b
   19d32:	4638      	mov	r0, r7
   19d34:	f019 ff3e 	bl	33bb4 <assert_post_action>
   19d38:	4544      	cmp	r4, r8
   19d3a:	d316      	bcc.n	19d6a <settings_register+0x5e>
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   19d3c:	4d1e      	ldr	r5, [pc, #120]	; (19db8 <settings_register+0xac>)
	return z_impl_k_mutex_lock(mutex, timeout);
   19d3e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19d42:	481e      	ldr	r0, [pc, #120]	; (19dbc <settings_register+0xb0>)
   19d44:	f012 fc58 	bl	2c5f8 <z_impl_k_mutex_lock>
   19d48:	682c      	ldr	r4, [r5, #0]
   19d4a:	b9ac      	cbnz	r4, 19d78 <settings_register+0x6c>
	parent->next = child;
   19d4c:	2400      	movs	r4, #0
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   19d4e:	686a      	ldr	r2, [r5, #4]
		if (strcmp(handler->name, ch->name) == 0) {
			rc = -EEXIST;
			goto end;
		}
	}
	sys_slist_append(&settings_handlers, &handler->node);
   19d50:	f106 0314 	add.w	r3, r6, #20
	parent->next = child;
   19d54:	6174      	str	r4, [r6, #20]
Z_GENLIST_APPEND(slist, snode)
   19d56:	b9ca      	cbnz	r2, 19d8c <settings_register+0x80>
	int rc = 0;
   19d58:	4614      	mov	r4, r2
	list->head = node;
   19d5a:	e9c5 3300 	strd	r3, r3, [r5]
	return z_impl_k_mutex_unlock(mutex);
   19d5e:	4817      	ldr	r0, [pc, #92]	; (19dbc <settings_register+0xb0>)
   19d60:	f012 fd28 	bl	2c7b4 <z_impl_k_mutex_unlock>

end:
	k_mutex_unlock(&settings_lock);
	return rc;
}
   19d64:	4620      	mov	r0, r4
   19d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(handler->name, ch->name) == 0) {
   19d6a:	6821      	ldr	r1, [r4, #0]
   19d6c:	6830      	ldr	r0, [r6, #0]
   19d6e:	f7f8 f97d 	bl	1206c <strcmp>
   19d72:	b188      	cbz	r0, 19d98 <settings_register+0x8c>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   19d74:	3414      	adds	r4, #20
   19d76:	e7d0      	b.n	19d1a <settings_register+0xe>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   19d78:	3c14      	subs	r4, #20
   19d7a:	2c00      	cmp	r4, #0
   19d7c:	d0e6      	beq.n	19d4c <settings_register+0x40>
		if (strcmp(handler->name, ch->name) == 0) {
   19d7e:	6821      	ldr	r1, [r4, #0]
   19d80:	6830      	ldr	r0, [r6, #0]
   19d82:	f7f8 f973 	bl	1206c <strcmp>
   19d86:	b120      	cbz	r0, 19d92 <settings_register+0x86>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19d88:	6964      	ldr	r4, [r4, #20]
	return node->next;
   19d8a:	e7de      	b.n	19d4a <settings_register+0x3e>
	parent->next = child;
   19d8c:	6013      	str	r3, [r2, #0]
	list->tail = node;
   19d8e:	606b      	str	r3, [r5, #4]
   19d90:	e7e5      	b.n	19d5e <settings_register+0x52>
			rc = -EEXIST;
   19d92:	f06f 0410 	mvn.w	r4, #16
   19d96:	e7e2      	b.n	19d5e <settings_register+0x52>
			return -EEXIST;
   19d98:	f06f 0410 	mvn.w	r4, #16
   19d9c:	e7e2      	b.n	19d64 <settings_register+0x58>
   19d9e:	bf00      	nop
   19da0:	00039f48 	.word	0x00039f48
   19da4:	00039f48 	.word	0x00039f48
   19da8:	0003ccc7 	.word	0x0003ccc7
   19dac:	0003ccf9 	.word	0x0003ccf9
   19db0:	0003b773 	.word	0x0003b773
   19db4:	0003cbfd 	.word	0x0003cbfd
   19db8:	2002171c 	.word	0x2002171c
   19dbc:	20020748 	.word	0x20020748

00019dc0 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   19dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int rc;
	int rc2;

	rc = 0;

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   19dc4:	4f21      	ldr	r7, [pc, #132]	; (19e4c <settings_commit_subtree+0x8c>)
{
   19dc6:	4606      	mov	r6, r0
	rc = 0;
   19dc8:	2500      	movs	r5, #0
   19dca:	46b9      	mov	r9, r7
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   19dcc:	4c20      	ldr	r4, [pc, #128]	; (19e50 <settings_commit_subtree+0x90>)
   19dce:	f8df 8094 	ldr.w	r8, [pc, #148]	; 19e64 <settings_commit_subtree+0xa4>
   19dd2:	42bc      	cmp	r4, r7
   19dd4:	d90c      	bls.n	19df0 <settings_commit_subtree+0x30>
   19dd6:	491f      	ldr	r1, [pc, #124]	; (19e54 <settings_commit_subtree+0x94>)
   19dd8:	23f4      	movs	r3, #244	; 0xf4
   19dda:	4642      	mov	r2, r8
   19ddc:	481e      	ldr	r0, [pc, #120]	; (19e58 <settings_commit_subtree+0x98>)
   19dde:	f019 fbe8 	bl	335b2 <printk>
   19de2:	481e      	ldr	r0, [pc, #120]	; (19e5c <settings_commit_subtree+0x9c>)
   19de4:	f019 fbe5 	bl	335b2 <printk>
   19de8:	21f4      	movs	r1, #244	; 0xf4
   19dea:	4640      	mov	r0, r8
   19dec:	f019 fee2 	bl	33bb4 <assert_post_action>
   19df0:	454c      	cmp	r4, r9
   19df2:	d307      	bcc.n	19e04 <settings_commit_subtree+0x44>
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   19df4:	4b1a      	ldr	r3, [pc, #104]	; (19e60 <settings_commit_subtree+0xa0>)
   19df6:	681c      	ldr	r4, [r3, #0]
   19df8:	b10c      	cbz	r4, 19dfe <settings_commit_subtree+0x3e>
   19dfa:	3c14      	subs	r4, #20
   19dfc:	b9a4      	cbnz	r4, 19e28 <settings_commit_subtree+0x68>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   19dfe:	4628      	mov	r0, r5
   19e00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   19e04:	b91e      	cbnz	r6, 19e0e <settings_commit_subtree+0x4e>
		if (ch->h_commit) {
   19e06:	68e3      	ldr	r3, [r4, #12]
   19e08:	b94b      	cbnz	r3, 19e1e <settings_commit_subtree+0x5e>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   19e0a:	3414      	adds	r4, #20
   19e0c:	e7e1      	b.n	19dd2 <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   19e0e:	2200      	movs	r2, #0
   19e10:	4631      	mov	r1, r6
   19e12:	6820      	ldr	r0, [r4, #0]
   19e14:	f01a f96a 	bl	340ec <settings_name_steq>
   19e18:	2800      	cmp	r0, #0
   19e1a:	d1f4      	bne.n	19e06 <settings_commit_subtree+0x46>
   19e1c:	e7f5      	b.n	19e0a <settings_commit_subtree+0x4a>
			rc2 = ch->h_commit();
   19e1e:	4798      	blx	r3
				rc = rc2;
   19e20:	2d00      	cmp	r5, #0
   19e22:	bf08      	it	eq
   19e24:	4605      	moveq	r5, r0
   19e26:	e7f0      	b.n	19e0a <settings_commit_subtree+0x4a>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   19e28:	b91e      	cbnz	r6, 19e32 <settings_commit_subtree+0x72>
		if (ch->h_commit) {
   19e2a:	68e3      	ldr	r3, [r4, #12]
   19e2c:	b94b      	cbnz	r3, 19e42 <settings_commit_subtree+0x82>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19e2e:	6964      	ldr	r4, [r4, #20]
   19e30:	e7e2      	b.n	19df8 <settings_commit_subtree+0x38>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   19e32:	2200      	movs	r2, #0
   19e34:	4631      	mov	r1, r6
   19e36:	6820      	ldr	r0, [r4, #0]
   19e38:	f01a f958 	bl	340ec <settings_name_steq>
   19e3c:	2800      	cmp	r0, #0
   19e3e:	d1f4      	bne.n	19e2a <settings_commit_subtree+0x6a>
   19e40:	e7f5      	b.n	19e2e <settings_commit_subtree+0x6e>
			rc2 = ch->h_commit();
   19e42:	4798      	blx	r3
				rc = rc2;
   19e44:	2d00      	cmp	r5, #0
   19e46:	bf08      	it	eq
   19e48:	4605      	moveq	r5, r0
   19e4a:	e7f0      	b.n	19e2e <settings_commit_subtree+0x6e>
   19e4c:	00039f48 	.word	0x00039f48
   19e50:	00039f48 	.word	0x00039f48
   19e54:	0003ccf9 	.word	0x0003ccf9
   19e58:	0003b773 	.word	0x0003b773
   19e5c:	0003cbfd 	.word	0x0003cbfd
   19e60:	2002171c 	.word	0x2002171c
   19e64:	0003ccc7 	.word	0x0003ccc7

00019e68 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   19e68:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   19e6a:	4c06      	ldr	r4, [pc, #24]	; (19e84 <settings_subsys_init+0x1c>)
   19e6c:	7823      	ldrb	r3, [r4, #0]
   19e6e:	b93b      	cbnz	r3, 19e80 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
   19e70:	f7ff ff44 	bl	19cfc <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
   19e74:	f01a f95a 	bl	3412c <settings_backend_init>

	if (!err) {
   19e78:	b908      	cbnz	r0, 19e7e <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
   19e7a:	2301      	movs	r3, #1
   19e7c:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
   19e7e:	bd10      	pop	{r4, pc}
		return 0;
   19e80:	2000      	movs	r0, #0
   19e82:	e7fc      	b.n	19e7e <settings_subsys_init+0x16>
   19e84:	20027fb6 	.word	0x20027fb6

00019e88 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
   19e88:	b508      	push	{r3, lr}
   19e8a:	4604      	mov	r4, r0
	__asm__ volatile(
   19e8c:	f04f 0220 	mov.w	r2, #32
   19e90:	f3ef 8311 	mrs	r3, BASEPRI
   19e94:	f382 8811 	msr	BASEPRI, r2
   19e98:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
   19e9c:	f01a f97c 	bl	34198 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
   19ea0:	4620      	mov	r0, r4
   19ea2:	f001 fb39 	bl	1b518 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   19ea6:	4803      	ldr	r0, [pc, #12]	; (19eb4 <sys_reboot+0x2c>)
   19ea8:	f019 fb83 	bl	335b2 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   19eac:	f000 ff30 	bl	1ad10 <arch_cpu_idle>
   19eb0:	e7fc      	b.n	19eac <sys_reboot+0x24>
   19eb2:	bf00      	nop
   19eb4:	0003cd27 	.word	0x0003cd27

00019eb8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
   19eb8:	b510      	push	{r4, lr}
   19eba:	4807      	ldr	r0, [pc, #28]	; (19ed8 <uart_console_init+0x20>)
   19ebc:	f011 fca0 	bl	2b800 <z_impl_device_get_binding>
	__stdout_hook_install(console_out);
   19ec0:	4c06      	ldr	r4, [pc, #24]	; (19edc <uart_console_init+0x24>)

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   19ec2:	4b07      	ldr	r3, [pc, #28]	; (19ee0 <uart_console_init+0x28>)
   19ec4:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
   19ec6:	4620      	mov	r0, r4
   19ec8:	f001 fda4 	bl	1ba14 <__stdout_hook_install>
	__printk_hook_install(console_out);
   19ecc:	4620      	mov	r0, r4
   19ece:	f7fe fd8b 	bl	189e8 <__printk_hook_install>
#endif

	uart_console_hook_install();

	return 0;
}
   19ed2:	2000      	movs	r0, #0
   19ed4:	bd10      	pop	{r4, pc}
   19ed6:	bf00      	nop
   19ed8:	0003cafd 	.word	0x0003cafd
   19edc:	00019ee5 	.word	0x00019ee5
   19ee0:	20021724 	.word	0x20021724

00019ee4 <console_out>:
	if ('\n' == c) {
   19ee4:	280a      	cmp	r0, #10
{
   19ee6:	b538      	push	{r3, r4, r5, lr}
   19ee8:	4604      	mov	r4, r0
   19eea:	4d07      	ldr	r5, [pc, #28]	; (19f08 <console_out+0x24>)
	if ('\n' == c) {
   19eec:	d104      	bne.n	19ef8 <console_out+0x14>
   19eee:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
   19ef0:	6883      	ldr	r3, [r0, #8]
   19ef2:	210d      	movs	r1, #13
   19ef4:	685b      	ldr	r3, [r3, #4]
   19ef6:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   19ef8:	6828      	ldr	r0, [r5, #0]
   19efa:	6883      	ldr	r3, [r0, #8]
   19efc:	b2e1      	uxtb	r1, r4
   19efe:	685b      	ldr	r3, [r3, #4]
   19f00:	4798      	blx	r3
}
   19f02:	4620      	mov	r0, r4
   19f04:	bd38      	pop	{r3, r4, r5, pc}
   19f06:	bf00      	nop
   19f08:	20021724 	.word	0x20021724

00019f0c <get_status>:
	return &config->subsys[type];
}

static enum clock_control_status get_status(struct device *dev,
					    clock_control_subsys_t subsys)
{
   19f0c:	b538      	push	{r3, r4, r5, lr}
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
	struct nrf_clock_control_sub_data *data;

	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   19f0e:	b2cc      	uxtb	r4, r1
   19f10:	2c01      	cmp	r4, #1
{
   19f12:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   19f14:	d909      	bls.n	19f2a <get_status+0x1e>
   19f16:	490b      	ldr	r1, [pc, #44]	; (19f44 <get_status+0x38>)
   19f18:	480b      	ldr	r0, [pc, #44]	; (19f48 <get_status+0x3c>)
   19f1a:	237f      	movs	r3, #127	; 0x7f
   19f1c:	4a0b      	ldr	r2, [pc, #44]	; (19f4c <get_status+0x40>)
   19f1e:	f019 fb48 	bl	335b2 <printk>
   19f22:	217f      	movs	r1, #127	; 0x7f
   19f24:	4809      	ldr	r0, [pc, #36]	; (19f4c <get_status+0x40>)
   19f26:	f019 fe45 	bl	33bb4 <assert_post_action>
	data = get_sub_data(dev, type);
	if (data->started) {
   19f2a:	210c      	movs	r1, #12
	data = get_sub_data(dev, type);
   19f2c:	68eb      	ldr	r3, [r5, #12]
	if (data->started) {
   19f2e:	fb04 3101 	mla	r1, r4, r1, r3
   19f32:	7a4b      	ldrb	r3, [r1, #9]
   19f34:	b923      	cbnz	r3, 19f40 <get_status+0x34>
		return CLOCK_CONTROL_STATUS_ON;
	}

	if (data->ref > 0) {
   19f36:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
   19f38:	fab0 f080 	clz	r0, r0
   19f3c:	0940      	lsrs	r0, r0, #5
		return CLOCK_CONTROL_STATUS_STARTING;
	}

	return CLOCK_CONTROL_STATUS_OFF;
}
   19f3e:	bd38      	pop	{r3, r4, r5, pc}
		return CLOCK_CONTROL_STATUS_ON;
   19f40:	2002      	movs	r0, #2
   19f42:	e7fc      	b.n	19f3e <get_status+0x32>
   19f44:	0003cdeb 	.word	0x0003cdeb
   19f48:	0003b773 	.word	0x0003b773
   19f4c:	0003cdb0 	.word	0x0003cdb0

00019f50 <clock_async_start>:
}

static int clock_async_start(struct device *dev,
			     clock_control_subsys_t subsys,
			     struct clock_control_async_data *data)
{
   19f50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct nrf_clock_control_sub_config *config;
	struct nrf_clock_control_sub_data *clk_data;
	int key;
	u8_t ref;

	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   19f54:	b2ce      	uxtb	r6, r1
   19f56:	2e01      	cmp	r6, #1
{
   19f58:	4680      	mov	r8, r0
   19f5a:	4689      	mov	r9, r1
   19f5c:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   19f5e:	d909      	bls.n	19f74 <clock_async_start+0x24>
   19f60:	493f      	ldr	r1, [pc, #252]	; (1a060 <clock_async_start+0x110>)
   19f62:	4840      	ldr	r0, [pc, #256]	; (1a064 <clock_async_start+0x114>)
   19f64:	23ef      	movs	r3, #239	; 0xef
   19f66:	4a40      	ldr	r2, [pc, #256]	; (1a068 <clock_async_start+0x118>)
   19f68:	f019 fb23 	bl	335b2 <printk>
   19f6c:	21ef      	movs	r1, #239	; 0xef
   19f6e:	483e      	ldr	r0, [pc, #248]	; (1a068 <clock_async_start+0x118>)
   19f70:	f019 fe20 	bl	33bb4 <assert_post_action>
	config = get_sub_config(dev, type);
   19f74:	f8d8 a004 	ldr.w	sl, [r8, #4]
	clk_data = get_sub_data(dev, type);
   19f78:	f8d8 700c 	ldr.w	r7, [r8, #12]

	__ASSERT_NO_MSG((data == NULL) ||
   19f7c:	2c00      	cmp	r4, #0
   19f7e:	d151      	bne.n	1a024 <clock_async_start+0xd4>
   19f80:	f04f 0320 	mov.w	r3, #32
   19f84:	f3ef 8b11 	mrs	fp, BASEPRI
   19f88:	f383 8811 	msr	BASEPRI, r3
   19f8c:	f3bf 8f6f 	isb	sy
	    && is_in_list(&clk_data->list, &data->node)) {
		return -EBUSY;
	}

	key = irq_lock();
	ref = ++clk_data->ref;
   19f90:	230c      	movs	r3, #12
   19f92:	fb06 7303 	mla	r3, r6, r3, r7
   19f96:	7a1d      	ldrb	r5, [r3, #8]
   19f98:	3501      	adds	r5, #1
   19f9a:	b2ed      	uxtb	r5, r5
   19f9c:	721d      	strb	r5, [r3, #8]
	__ASSERT_NO_MSG(clk_data->ref > 0);
   19f9e:	b95d      	cbnz	r5, 19fb8 <clock_async_start+0x68>
   19fa0:	4932      	ldr	r1, [pc, #200]	; (1a06c <clock_async_start+0x11c>)
   19fa2:	4830      	ldr	r0, [pc, #192]	; (1a064 <clock_async_start+0x114>)
   19fa4:	f44f 7380 	mov.w	r3, #256	; 0x100
   19fa8:	4a2f      	ldr	r2, [pc, #188]	; (1a068 <clock_async_start+0x118>)
   19faa:	f019 fb02 	bl	335b2 <printk>
   19fae:	f44f 7180 	mov.w	r1, #256	; 0x100
   19fb2:	482d      	ldr	r0, [pc, #180]	; (1a068 <clock_async_start+0x118>)
   19fb4:	f019 fdfe 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   19fb8:	f38b 8811 	msr	BASEPRI, fp
   19fbc:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	if (data) {
   19fc0:	b324      	cbz	r4, 1a00c <clock_async_start+0xbc>
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   19fc2:	2203      	movs	r2, #3
   19fc4:	4b2a      	ldr	r3, [pc, #168]	; (1a070 <clock_async_start+0x120>)
   19fc6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		bool already_started;

		clock_irqs_disable();
		already_started = clk_data->started;
   19fca:	220c      	movs	r2, #12
   19fcc:	4372      	muls	r2, r6
   19fce:	18bb      	adds	r3, r7, r2
   19fd0:	7a59      	ldrb	r1, [r3, #9]
		if (!already_started) {
   19fd2:	b989      	cbnz	r1, 19ff8 <clock_async_start+0xa8>
	__asm__ volatile(
   19fd4:	f04f 0020 	mov.w	r0, #32
   19fd8:	f3ef 8c11 	mrs	ip, BASEPRI
   19fdc:	f380 8811 	msr	BASEPRI, r0
   19fe0:	f3bf 8f6f 	isb	sy
	parent->next = child;
   19fe4:	6021      	str	r1, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   19fe6:	6858      	ldr	r0, [r3, #4]
   19fe8:	2800      	cmp	r0, #0
   19fea:	d132      	bne.n	1a052 <clock_async_start+0x102>
	list->tail = node;
   19fec:	605c      	str	r4, [r3, #4]
	list->head = node;
   19fee:	50bc      	str	r4, [r7, r2]
	__asm__ volatile(
   19ff0:	f38c 8811 	msr	BASEPRI, ip
   19ff4:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
   19ff8:	2203      	movs	r2, #3
   19ffa:	4b1d      	ldr	r3, [pc, #116]	; (1a070 <clock_async_start+0x120>)
   19ffc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
			list_append(&clk_data->list, &data->node);
		}
		clock_irqs_enable();

		if (already_started) {
   1a000:	b121      	cbz	r1, 1a00c <clock_async_start+0xbc>
			data->cb(dev, subsys, data->user_data);
   1a002:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   1a006:	4649      	mov	r1, r9
   1a008:	4640      	mov	r0, r8
   1a00a:	4798      	blx	r3
		}
	}

	if (ref == 1) {
   1a00c:	2d01      	cmp	r5, #1
   1a00e:	d107      	bne.n	1a020 <clock_async_start+0xd0>
		if (IS_ENABLED(CONFIG_NRF52_ANOMALY_132_WORKAROUND) &&
			(subsys == CLOCK_CONTROL_NRF_SUBSYS_LF)) {
			anomaly_132_workaround();
		}

		nrf_clock_task_trigger(NRF_CLOCK, config->start_tsk);
   1a010:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_clock_task_trigger(NRF_CLOCK_Type * p_reg, nrf_clock_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a014:	78b3      	ldrb	r3, [r6, #2]
   1a016:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a01a:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   1a01e:	601d      	str	r5, [r3, #0]
	}

	return 0;
   1a020:	2000      	movs	r0, #0
   1a022:	e01b      	b.n	1a05c <clock_async_start+0x10c>
	__ASSERT_NO_MSG((data == NULL) ||
   1a024:	6863      	ldr	r3, [r4, #4]
   1a026:	b94b      	cbnz	r3, 1a03c <clock_async_start+0xec>
   1a028:	4912      	ldr	r1, [pc, #72]	; (1a074 <clock_async_start+0x124>)
   1a02a:	480e      	ldr	r0, [pc, #56]	; (1a064 <clock_async_start+0x114>)
   1a02c:	23f4      	movs	r3, #244	; 0xf4
   1a02e:	4a0e      	ldr	r2, [pc, #56]	; (1a068 <clock_async_start+0x118>)
   1a030:	f019 fabf 	bl	335b2 <printk>
   1a034:	21f4      	movs	r1, #244	; 0xf4
   1a036:	480c      	ldr	r0, [pc, #48]	; (1a068 <clock_async_start+0x118>)
   1a038:	f019 fdbc 	bl	33bb4 <assert_post_action>
	sys_snode_t *item = sys_slist_peek_head(list);
   1a03c:	230c      	movs	r3, #12
   1a03e:	4373      	muls	r3, r6
   1a040:	58fb      	ldr	r3, [r7, r3]
		if (item == node) {
   1a042:	429c      	cmp	r4, r3
   1a044:	d008      	beq.n	1a058 <clock_async_start+0x108>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1a046:	2b00      	cmp	r3, #0
   1a048:	d09a      	beq.n	19f80 <clock_async_start+0x30>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1a04a:	681b      	ldr	r3, [r3, #0]
	} while (item);
   1a04c:	2b00      	cmp	r3, #0
   1a04e:	d1f8      	bne.n	1a042 <clock_async_start+0xf2>
   1a050:	e796      	b.n	19f80 <clock_async_start+0x30>
	parent->next = child;
   1a052:	6004      	str	r4, [r0, #0]
	list->tail = node;
   1a054:	605c      	str	r4, [r3, #4]
   1a056:	e7cb      	b.n	19ff0 <clock_async_start+0xa0>
		return -EBUSY;
   1a058:	f06f 000f 	mvn.w	r0, #15
}
   1a05c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a060:	0003cdeb 	.word	0x0003cdeb
   1a064:	0003b773 	.word	0x0003b773
   1a068:	0003cdb0 	.word	0x0003cdb0
   1a06c:	0003cd9e 	.word	0x0003cd9e
   1a070:	40005000 	.word	0x40005000
   1a074:	0003cd50 	.word	0x0003cd50

0001a078 <clock_stop>:
{
   1a078:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1a07a:	b2cc      	uxtb	r4, r1
   1a07c:	2c01      	cmp	r4, #1
{
   1a07e:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1a080:	d909      	bls.n	1a096 <clock_stop+0x1e>
   1a082:	4919      	ldr	r1, [pc, #100]	; (1a0e8 <clock_stop+0x70>)
   1a084:	4819      	ldr	r0, [pc, #100]	; (1a0ec <clock_stop+0x74>)
   1a086:	2394      	movs	r3, #148	; 0x94
   1a088:	4a19      	ldr	r2, [pc, #100]	; (1a0f0 <clock_stop+0x78>)
   1a08a:	f019 fa92 	bl	335b2 <printk>
   1a08e:	2194      	movs	r1, #148	; 0x94
   1a090:	4817      	ldr	r0, [pc, #92]	; (1a0f0 <clock_stop+0x78>)
   1a092:	f019 fd8f 	bl	33bb4 <assert_post_action>
	config = get_sub_config(dev, type);
   1a096:	6869      	ldr	r1, [r5, #4]
	data = get_sub_data(dev, type);
   1a098:	68ed      	ldr	r5, [r5, #12]
	__asm__ volatile(
   1a09a:	f04f 0320 	mov.w	r3, #32
   1a09e:	f3ef 8611 	mrs	r6, BASEPRI
   1a0a2:	f383 8811 	msr	BASEPRI, r3
   1a0a6:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
   1a0aa:	230c      	movs	r3, #12
   1a0ac:	4363      	muls	r3, r4
   1a0ae:	18ea      	adds	r2, r5, r3
   1a0b0:	7a10      	ldrb	r0, [r2, #8]
   1a0b2:	b1a0      	cbz	r0, 1a0de <clock_stop+0x66>
	data->ref--;
   1a0b4:	3801      	subs	r0, #1
   1a0b6:	b2c0      	uxtb	r0, r0
   1a0b8:	7210      	strb	r0, [r2, #8]
	if (data->ref == 0) {
   1a0ba:	b998      	cbnz	r0, 1a0e4 <clock_stop+0x6c>
		nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
   1a0bc:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
	list->head = NULL;
   1a0c0:	50e8      	str	r0, [r5, r3]
   1a0c2:	78cb      	ldrb	r3, [r1, #3]
   1a0c4:	2101      	movs	r1, #1
   1a0c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a0ca:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
	list->tail = NULL;
   1a0ce:	6050      	str	r0, [r2, #4]
   1a0d0:	6019      	str	r1, [r3, #0]
		data->started = false;
   1a0d2:	7250      	strb	r0, [r2, #9]
	__asm__ volatile(
   1a0d4:	f386 8811 	msr	BASEPRI, r6
   1a0d8:	f3bf 8f6f 	isb	sy
}
   1a0dc:	bd70      	pop	{r4, r5, r6, pc}
		err = -EALREADY;
   1a0de:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1a0e2:	e7f7      	b.n	1a0d4 <clock_stop+0x5c>
	int err = 0;
   1a0e4:	2000      	movs	r0, #0
   1a0e6:	e7f5      	b.n	1a0d4 <clock_stop+0x5c>
   1a0e8:	0003cdeb 	.word	0x0003cdeb
   1a0ec:	0003b773 	.word	0x0003b773
   1a0f0:	0003cdb0 	.word	0x0003cdb0

0001a0f4 <clk_init>:
 * symbol.
 */
void nrf_power_clock_isr(void *arg);

static int clk_init(struct device *dev)
{
   1a0f4:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1a0f6:	2200      	movs	r2, #0
{
   1a0f8:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1a0fa:	2101      	movs	r1, #1
   1a0fc:	2005      	movs	r0, #5
   1a0fe:	f000 fd7d 	bl	1abfc <z_arm_irq_priority_set>
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_INST_IRQN(0));
   1a102:	2005      	movs	r0, #5
   1a104:	f000 fd6a 	bl	1abdc <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
   1a108:	2202      	movs	r2, #2
   1a10a:	4b07      	ldr	r3, [pc, #28]	; (1a128 <clk_init+0x34>)
	list->head = NULL;
   1a10c:	2000      	movs	r0, #0
   1a10e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
   1a112:	2203      	movs	r2, #3
   1a114:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	clock_irqs_enable();

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		sys_slist_init(&(get_sub_data(dev, i)->list));
   1a118:	68e3      	ldr	r3, [r4, #12]
	list->tail = NULL;
   1a11a:	e9c3 0000 	strd	r0, r0, [r3]
   1a11e:	68e3      	ldr	r3, [r4, #12]
   1a120:	e9c3 0003 	strd	r0, r0, [r3, #12]
	}

	return 0;
}
   1a124:	bd10      	pop	{r4, pc}
   1a126:	bf00      	nop
   1a128:	40005000 	.word	0x40005000

0001a12c <clkstarted_handle.constprop.9>:
DEVICE_AND_API_INIT(clock_nrf, DT_INST_LABEL(0),
		    clk_init, &data, &config, PRE_KERNEL_1,
		    CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &clock_control_api);

static void clkstarted_handle(struct device *dev,
   1a12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
	struct clock_control_async_data *async_data;

	DBG(dev, type, "Clock started");
	sub_data->started = true;
   1a12e:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   1a130:	4d11      	ldr	r5, [pc, #68]	; (1a178 <clkstarted_handle.constprop.9+0x4c>)
static void clkstarted_handle(struct device *dev,
   1a132:	4606      	mov	r6, r0
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   1a134:	68eb      	ldr	r3, [r5, #12]
	sub_data->started = true;
   1a136:	fb04 3400 	mla	r4, r4, r0, r3
   1a13a:	2301      	movs	r3, #1
   1a13c:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
   1a13e:	f04f 0320 	mov.w	r3, #32
   1a142:	f3ef 8111 	mrs	r1, BASEPRI
   1a146:	f383 8811 	msr	BASEPRI, r3
   1a14a:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1a14e:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   1a150:	b12b      	cbz	r3, 1a15e <clkstarted_handle.constprop.9+0x32>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1a152:	6860      	ldr	r0, [r4, #4]
   1a154:	681a      	ldr	r2, [r3, #0]
   1a156:	4283      	cmp	r3, r0
	list->head = node;
   1a158:	6022      	str	r2, [r4, #0]
	list->tail = node;
   1a15a:	bf08      	it	eq
   1a15c:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
   1a15e:	f381 8811 	msr	BASEPRI, r1
   1a162:	f3bf 8f6f 	isb	sy

	while ((async_data = list_get(&sub_data->list)) != NULL) {
   1a166:	b903      	cbnz	r3, 1a16a <clkstarted_handle.constprop.9+0x3e>
		async_data->cb(dev, (clock_control_subsys_t)type,
				async_data->user_data);
	}
}
   1a168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		async_data->cb(dev, (clock_control_subsys_t)type,
   1a16a:	e9d3 7201 	ldrd	r7, r2, [r3, #4]
   1a16e:	4631      	mov	r1, r6
   1a170:	4628      	mov	r0, r5
   1a172:	47b8      	blx	r7
   1a174:	e7e3      	b.n	1a13e <clkstarted_handle.constprop.9+0x12>
   1a176:	bf00      	nop
   1a178:	20020504 	.word	0x20020504

0001a17c <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
   1a17c:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1a17e:	4b10      	ldr	r3, [pc, #64]	; (1a1c0 <nrf_power_clock_isr+0x44>)
   1a180:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
   1a182:	b162      	cbz	r2, 1a19e <nrf_power_clock_isr+0x22>
    return p_reg->INTENSET & mask;
   1a184:	4a0f      	ldr	r2, [pc, #60]	; (1a1c4 <nrf_power_clock_isr+0x48>)
   1a186:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
   1a18a:	07d1      	lsls	r1, r2, #31
   1a18c:	d507      	bpl.n	1a19e <nrf_power_clock_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a18e:	2200      	movs	r2, #0
   1a190:	601a      	str	r2, [r3, #0]
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   1a192:	4b0d      	ldr	r3, [pc, #52]	; (1a1c8 <nrf_power_clock_isr+0x4c>)

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
   1a194:	68db      	ldr	r3, [r3, #12]
   1a196:	7a58      	ldrb	r0, [r3, #9]
   1a198:	b908      	cbnz	r0, 1a19e <nrf_power_clock_isr+0x22>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   1a19a:	f7ff ffc7 	bl	1a12c <clkstarted_handle.constprop.9>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1a19e:	4b0b      	ldr	r3, [pc, #44]	; (1a1cc <nrf_power_clock_isr+0x50>)
   1a1a0:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
   1a1a2:	b15a      	cbz	r2, 1a1bc <nrf_power_clock_isr+0x40>
    return p_reg->INTENSET & mask;
   1a1a4:	4a07      	ldr	r2, [pc, #28]	; (1a1c4 <nrf_power_clock_isr+0x48>)
   1a1a6:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
   1a1aa:	0792      	lsls	r2, r2, #30
   1a1ac:	d506      	bpl.n	1a1bc <nrf_power_clock_isr+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a1ae:	2200      	movs	r2, #0
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started();
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1a1b0:	2001      	movs	r0, #1
   1a1b2:	601a      	str	r2, [r3, #0]
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
   1a1b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1a1b8:	f7ff bfb8 	b.w	1a12c <clkstarted_handle.constprop.9>
}
   1a1bc:	bd08      	pop	{r3, pc}
   1a1be:	bf00      	nop
   1a1c0:	40005100 	.word	0x40005100
   1a1c4:	40005000 	.word	0x40005000
   1a1c8:	20020504 	.word	0x20020504
   1a1cc:	40005104 	.word	0x40005104

0001a1d0 <wdt_nrf_install_timeout>:
	return -EPERM;
}

static int wdt_nrf_install_timeout(struct device *dev,
				   const struct wdt_timeout_cfg *cfg)
{
   1a1d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	nrfx_err_t err_code;
	nrfx_wdt_channel_id channel_id;

	if (cfg->flags != WDT_FLAG_RESET_SOC) {
   1a1d2:	7b0b      	ldrb	r3, [r1, #12]
{
   1a1d4:	4604      	mov	r4, r0
	if (cfg->flags != WDT_FLAG_RESET_SOC) {
   1a1d6:	2b02      	cmp	r3, #2
{
   1a1d8:	460d      	mov	r5, r1
	if (cfg->flags != WDT_FLAG_RESET_SOC) {
   1a1da:	d128      	bne.n	1a22e <wdt_nrf_install_timeout+0x5e>
		return -ENOTSUP;
	}

	if (cfg->window.min != 0U) {
   1a1dc:	680b      	ldr	r3, [r1, #0]
   1a1de:	bb1b      	cbnz	r3, 1a228 <wdt_nrf_install_timeout+0x58>
		return -EINVAL;
	}

	if (get_dev_data(dev)->m_allocated_channels == 0U) {
   1a1e0:	68c2      	ldr	r2, [r0, #12]
	return dev->driver_data;
   1a1e2:	684b      	ldr	r3, [r1, #4]
	if (get_dev_data(dev)->m_allocated_channels == 0U) {
   1a1e4:	f892 1024 	ldrb.w	r1, [r2, #36]	; 0x24
   1a1e8:	b9d9      	cbnz	r1, 1a222 <wdt_nrf_install_timeout+0x52>
		 * in all nRF chips can use reload values (determining
		 * the timeout) from range 0xF-0xFFFFFFFF given in 32768 Hz
		 * clock ticks. This makes the allowed range of 0x1-0x07CFFFFF
		 * in milliseconds. Check if the provided value is within
		 * this range. */
		if ((cfg->window.max == 0U) || (cfg->window.max > 0x07CFFFFF)) {
   1a1ea:	4914      	ldr	r1, [pc, #80]	; (1a23c <wdt_nrf_install_timeout+0x6c>)
   1a1ec:	1e58      	subs	r0, r3, #1
   1a1ee:	4288      	cmp	r0, r1
   1a1f0:	d81a      	bhi.n	1a228 <wdt_nrf_install_timeout+0x58>
			return -EINVAL;
		}

		/* Save timeout value from first registered watchdog channel. */
		get_dev_data(dev)->m_timeout = cfg->window.max;
   1a1f2:	6213      	str	r3, [r2, #32]
	} else if (cfg->window.max != get_dev_data(dev)->m_timeout) {
		return -EINVAL;
	}

	err_code = nrfx_wdt_channel_alloc(&get_dev_config(dev)->wdt,
   1a1f4:	f10d 0107 	add.w	r1, sp, #7
   1a1f8:	6860      	ldr	r0, [r4, #4]
   1a1fa:	f011 fa6d 	bl	2b6d8 <nrfx_wdt_channel_alloc>
					  &channel_id);

	if (err_code == NRFX_ERROR_NO_MEM) {
   1a1fe:	4b10      	ldr	r3, [pc, #64]	; (1a240 <wdt_nrf_install_timeout+0x70>)
   1a200:	4298      	cmp	r0, r3
   1a202:	d017      	beq.n	1a234 <wdt_nrf_install_timeout+0x64>
		return -ENOMEM;
	}

	if (cfg->callback != NULL) {
   1a204:	68ab      	ldr	r3, [r5, #8]
   1a206:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1a20a:	b113      	cbz	r3, 1a212 <wdt_nrf_install_timeout+0x42>
   1a20c:	68e2      	ldr	r2, [r4, #12]
		get_dev_data(dev)->m_callbacks[channel_id] = cfg->callback;
   1a20e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	}

	get_dev_data(dev)->m_allocated_channels++;
   1a212:	68e2      	ldr	r2, [r4, #12]
   1a214:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   1a218:	3301      	adds	r3, #1
   1a21a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	return channel_id;
}
   1a21e:	b003      	add	sp, #12
   1a220:	bd30      	pop	{r4, r5, pc}
	} else if (cfg->window.max != get_dev_data(dev)->m_timeout) {
   1a222:	6a12      	ldr	r2, [r2, #32]
   1a224:	429a      	cmp	r2, r3
   1a226:	d0e5      	beq.n	1a1f4 <wdt_nrf_install_timeout+0x24>
		return -EINVAL;
   1a228:	f06f 0015 	mvn.w	r0, #21
   1a22c:	e7f7      	b.n	1a21e <wdt_nrf_install_timeout+0x4e>
		return -ENOTSUP;
   1a22e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1a232:	e7f4      	b.n	1a21e <wdt_nrf_install_timeout+0x4e>
		return -ENOMEM;
   1a234:	f06f 000b 	mvn.w	r0, #11
   1a238:	e7f1      	b.n	1a21e <wdt_nrf_install_timeout+0x4e>
   1a23a:	bf00      	nop
   1a23c:	07cffffe 	.word	0x07cffffe
   1a240:	0bad0002 	.word	0x0bad0002

0001a244 <wdt_0_init>:
			    &wdt_##idx##z_config,			       \
			    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,  \
			    &wdt_nrfx_driver_api)

#ifdef CONFIG_NRFX_WDT0
WDT_NRFX_WDT_DEVICE(0);
   1a244:	b510      	push	{r4, lr}
   1a246:	4604      	mov	r4, r0
   1a248:	2200      	movs	r2, #0
   1a24a:	2101      	movs	r1, #1
   1a24c:	2018      	movs	r0, #24
   1a24e:	f000 fcd5 	bl	1abfc <z_arm_irq_priority_set>
   1a252:	6860      	ldr	r0, [r4, #4]
   1a254:	4a05      	ldr	r2, [pc, #20]	; (1a26c <wdt_0_init+0x28>)
   1a256:	f100 0108 	add.w	r1, r0, #8
   1a25a:	f011 f9b3 	bl	2b5c4 <nrfx_wdt_init>
   1a25e:	4b04      	ldr	r3, [pc, #16]	; (1a270 <wdt_0_init+0x2c>)
   1a260:	4298      	cmp	r0, r3
   1a262:	bf14      	ite	ne
   1a264:	f06f 000f 	mvnne.w	r0, #15
   1a268:	2000      	moveq	r0, #0
   1a26a:	bd10      	pop	{r4, pc}
   1a26c:	0001a275 	.word	0x0001a275
   1a270:	0bad0000 	.word	0x0bad0000

0001a274 <wdt_0_event_handler>:
   1a274:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < get_dev_data(dev)->m_allocated_channels; ++i) {
   1a276:	2400      	movs	r4, #0
   1a278:	4d0a      	ldr	r5, [pc, #40]	; (1a2a4 <wdt_0_event_handler+0x30>)
   1a27a:	68ea      	ldr	r2, [r5, #12]
   1a27c:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   1a280:	429c      	cmp	r4, r3
   1a282:	db00      	blt.n	1a286 <wdt_0_event_handler+0x12>
WDT_NRFX_WDT_DEVICE(0);
   1a284:	bd38      	pop	{r3, r4, r5, pc}
		if (nrf_wdt_request_status(get_dev_config(dev)->wdt.p_reg,
   1a286:	686b      	ldr	r3, [r5, #4]
   1a288:	681b      	ldr	r3, [r3, #0]
}

NRF_STATIC_INLINE bool nrf_wdt_request_status(NRF_WDT_Type const *  p_reg,
                                              nrf_wdt_rr_register_t rr_register)
{
    return (bool)(((p_reg->REQSTATUS) >> rr_register) & 0x1UL);
   1a28a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
   1a28e:	40e3      	lsrs	r3, r4
   1a290:	07db      	lsls	r3, r3, #31
   1a292:	d505      	bpl.n	1a2a0 <wdt_0_event_handler+0x2c>
			if (get_dev_data(dev)->m_callbacks[i]) {
   1a294:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   1a298:	b113      	cbz	r3, 1a2a0 <wdt_0_event_handler+0x2c>
				get_dev_data(dev)->m_callbacks[i](dev, i);
   1a29a:	4621      	mov	r1, r4
   1a29c:	4628      	mov	r0, r5
   1a29e:	4798      	blx	r3
	for (i = 0; i < get_dev_data(dev)->m_allocated_channels; ++i) {
   1a2a0:	3401      	adds	r4, #1
   1a2a2:	e7ea      	b.n	1a27a <wdt_0_event_handler+0x6>
   1a2a4:	20020514 	.word	0x20020514

0001a2a8 <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
   1a2a8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
   1a2aa:	4c06      	ldr	r4, [pc, #24]	; (1a2c4 <z_clock_isr+0x1c>)
   1a2ac:	4906      	ldr	r1, [pc, #24]	; (1a2c8 <z_clock_isr+0x20>)
   1a2ae:	4622      	mov	r2, r4
   1a2b0:	4806      	ldr	r0, [pc, #24]	; (1a2cc <z_clock_isr+0x24>)
   1a2b2:	2317      	movs	r3, #23
   1a2b4:	f019 f97d 	bl	335b2 <printk>
   1a2b8:	4620      	mov	r0, r4
}
   1a2ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
   1a2be:	2117      	movs	r1, #23
   1a2c0:	f019 bc78 	b.w	33bb4 <assert_post_action>
   1a2c4:	0003ce42 	.word	0x0003ce42
   1a2c8:	0003fd2f 	.word	0x0003fd2f
   1a2cc:	0003b773 	.word	0x0003b773

0001a2d0 <handle_next_tick_case>:
 * counter progresses during that time it means that 1 tick elapsed and
 * interrupt is set pending.
 */
static void handle_next_tick_case(u32_t t)
{
	set_comparator(t + 2);
   1a2d0:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   1a2d2:	4b08      	ldr	r3, [pc, #32]	; (1a2f4 <handle_next_tick_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   1a2d4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1a2d8:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   1a2dc:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
   1a2e0:	4290      	cmp	r0, r2
   1a2e2:	d100      	bne.n	1a2e6 <handle_next_tick_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
   1a2e4:	4770      	bx	lr
   1a2e6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
   1a2ea:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   1a2ec:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1a2f0:	e7f2      	b.n	1a2d8 <handle_next_tick_case+0x8>
   1a2f2:	bf00      	nop
   1a2f4:	40015000 	.word	0x40015000

0001a2f8 <rtc1_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1a2f8:	2200      	movs	r2, #0
   1a2fa:	4b06      	ldr	r3, [pc, #24]	; (1a314 <rtc1_nrf_isr+0x1c>)
   1a2fc:	601a      	str	r2, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	u32_t t = get_comparator();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
   1a2fe:	4a06      	ldr	r2, [pc, #24]	; (1a318 <rtc1_nrf_isr+0x20>)
    return p_reg->CC[ch];
   1a300:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
   1a304:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   1a306:	1ac0      	subs	r0, r0, r3
   1a308:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   1a30c:	4403      	add	r3, r0
   1a30e:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_ticks(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
   1a310:	f014 bc38 	b.w	2eb84 <z_clock_announce>
   1a314:	40015140 	.word	0x40015140
   1a318:	20021768 	.word	0x20021768

0001a31c <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
   1a31c:	b538      	push	{r3, r4, r5, lr}
   1a31e:	4814      	ldr	r0, [pc, #80]	; (1a370 <z_clock_driver_init+0x54>)
   1a320:	f011 fa6e 	bl	2b800 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_LABEL(DT_INST(0, nordic_nrf_clock)));
	if (!clock) {
   1a324:	b300      	cbz	r0, 1a368 <z_clock_driver_init+0x4c>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
   1a326:	6883      	ldr	r3, [r0, #8]
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
   1a328:	2400      	movs	r4, #0
   1a32a:	681b      	ldr	r3, [r3, #0]
   1a32c:	2101      	movs	r1, #1
   1a32e:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a330:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1a334:	4d0f      	ldr	r5, [pc, #60]	; (1a374 <z_clock_driver_init+0x58>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1a336:	4b10      	ldr	r3, [pc, #64]	; (1a378 <z_clock_driver_init+0x5c>)
    p_reg->PRESCALER = val;
   1a338:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1a33c:	601c      	str	r4, [r3, #0]
   1a33e:	4b0f      	ldr	r3, [pc, #60]	; (1a37c <z_clock_driver_init+0x60>)
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC1_IRQn);
	int_enable();

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
   1a340:	2101      	movs	r1, #1
   1a342:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
   1a346:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1a34a:	4622      	mov	r2, r4
   1a34c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   1a350:	2015      	movs	r0, #21
   1a352:	f000 fc53 	bl	1abfc <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
   1a356:	2015      	movs	r0, #21
   1a358:	f000 fc40 	bl	1abdc <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1a35c:	2301      	movs	r3, #1

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
   1a35e:	4620      	mov	r0, r4
   1a360:	4a07      	ldr	r2, [pc, #28]	; (1a380 <z_clock_driver_init+0x64>)
   1a362:	6013      	str	r3, [r2, #0]
   1a364:	602b      	str	r3, [r5, #0]
}
   1a366:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   1a368:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a36c:	e7fb      	b.n	1a366 <z_clock_driver_init+0x4a>
   1a36e:	bf00      	nop
   1a370:	0003ce0f 	.word	0x0003ce0f
   1a374:	40015000 	.word	0x40015000
   1a378:	40015140 	.word	0x40015140
   1a37c:	e000e100 	.word	0xe000e100
   1a380:	40015008 	.word	0x40015008

0001a384 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
   1a384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     return p_reg->COUNTER;
   1a386:	4b2c      	ldr	r3, [pc, #176]	; (1a438 <z_clock_set_timeout+0xb4>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1a388:	4c2c      	ldr	r4, [pc, #176]	; (1a43c <z_clock_set_timeout+0xb8>)
   1a38a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	u32_t unannounced = counter_sub(counter(), last_count);
   1a38e:	4b2c      	ldr	r3, [pc, #176]	; (1a440 <z_clock_set_timeout+0xbc>)
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1a390:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1a394:	bf08      	it	eq
   1a396:	4620      	moveq	r0, r4
	u32_t unannounced = counter_sub(counter(), last_count);
   1a398:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
   1a39a:	1a52      	subs	r2, r2, r1
   1a39c:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
   1a3a0:	0212      	lsls	r2, r2, #8
   1a3a2:	d436      	bmi.n	1a412 <z_clock_set_timeout+0x8e>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
   1a3a4:	3801      	subs	r0, #1
   1a3a6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1a3aa:	42a0      	cmp	r0, r4
   1a3ac:	bfa8      	it	ge
   1a3ae:	4620      	movge	r0, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1a3b0:	3301      	adds	r3, #1
   1a3b2:	4418      	add	r0, r3
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
   1a3b4:	42a0      	cmp	r0, r4
   1a3b6:	bf94      	ite	ls
   1a3b8:	180c      	addls	r4, r1, r0
   1a3ba:	190c      	addhi	r4, r1, r4
    p_reg->INTENCLR = mask;
   1a3bc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1a3c0:	2700      	movs	r7, #0
    p_reg->INTENCLR = mask;
   1a3c2:	4b1d      	ldr	r3, [pc, #116]	; (1a438 <z_clock_set_timeout+0xb4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1a3c4:	4e1f      	ldr	r6, [pc, #124]	; (1a444 <z_clock_set_timeout+0xc0>)
    p_reg->INTENCLR = mask;
   1a3c6:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
     return p_reg->COUNTER;
   1a3ca:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    return p_reg->CC[ch];
   1a3ce:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   1a3d2:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	return (a - b) & COUNTER_MAX;
   1a3d6:	1a52      	subs	r2, r2, r1
   1a3d8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	if (counter_sub(prev_val, now) == 1) {
   1a3dc:	2a01      	cmp	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1a3de:	6037      	str	r7, [r6, #0]
    p_reg->CC[ch] = cc_val;
   1a3e0:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1a3e4:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	return (a - b) & COUNTER_MAX;
   1a3e8:	461d      	mov	r5, r3
	if (counter_sub(prev_val, now) == 1) {
   1a3ea:	d103      	bne.n	1a3f4 <z_clock_set_timeout+0x70>
	z_impl_k_busy_wait(usec_to_wait);
   1a3ec:	200f      	movs	r0, #15
   1a3ee:	f01e fca3 	bl	38d38 <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1a3f2:	6037      	str	r7, [r6, #0]
   1a3f4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1a3f8:	4b13      	ldr	r3, [pc, #76]	; (1a448 <z_clock_set_timeout+0xc4>)
   1a3fa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
   1a3fe:	f8d5 0504 	ldr.w	r0, [r5, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1a402:	1a23      	subs	r3, r4, r0
   1a404:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (diff == 1) {
   1a408:	2b01      	cmp	r3, #1
   1a40a:	d104      	bne.n	1a416 <z_clock_set_timeout+0x92>
		handle_next_tick_case(t);
   1a40c:	f7ff ff60 	bl	1a2d0 <handle_next_tick_case>
   1a410:	e00b      	b.n	1a42a <z_clock_set_timeout+0xa6>
		ticks = 0;
   1a412:	2000      	movs	r0, #0
   1a414:	e7cc      	b.n	1a3b0 <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   1a416:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1a41a:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
     return p_reg->COUNTER;
   1a41e:	f8d5 0504 	ldr.w	r0, [r5, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1a422:	1a24      	subs	r4, r4, r0
   1a424:	3c02      	subs	r4, #2
	if (diff > MAX_TICKS) {
   1a426:	0223      	lsls	r3, r4, #8
   1a428:	d4f0      	bmi.n	1a40c <z_clock_set_timeout+0x88>
    p_reg->INTENSET = mask;
   1a42a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1a42e:	4b02      	ldr	r3, [pc, #8]	; (1a438 <z_clock_set_timeout+0xb4>)
   1a430:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	set_protected_absolute_ticks(cyc);
}
   1a434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a436:	bf00      	nop
   1a438:	40015000 	.word	0x40015000
   1a43c:	007fffff 	.word	0x007fffff
   1a440:	20021768 	.word	0x20021768
   1a444:	40015140 	.word	0x40015140
   1a448:	e000e100 	.word	0xe000e100

0001a44c <z_clock_elapsed>:

u32_t z_clock_elapsed(void)
{
   1a44c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1a44e:	f04f 0320 	mov.w	r3, #32
   1a452:	f3ef 8511 	mrs	r5, BASEPRI
   1a456:	f383 8811 	msr	BASEPRI, r3
   1a45a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a45e:	481a      	ldr	r0, [pc, #104]	; (1a4c8 <z_clock_elapsed+0x7c>)
   1a460:	f014 f834 	bl	2e4cc <z_spin_lock_valid>
   1a464:	b968      	cbnz	r0, 1a482 <z_clock_elapsed+0x36>
   1a466:	235c      	movs	r3, #92	; 0x5c
   1a468:	4a18      	ldr	r2, [pc, #96]	; (1a4cc <z_clock_elapsed+0x80>)
   1a46a:	4919      	ldr	r1, [pc, #100]	; (1a4d0 <z_clock_elapsed+0x84>)
   1a46c:	4819      	ldr	r0, [pc, #100]	; (1a4d4 <z_clock_elapsed+0x88>)
   1a46e:	f019 f8a0 	bl	335b2 <printk>
   1a472:	4915      	ldr	r1, [pc, #84]	; (1a4c8 <z_clock_elapsed+0x7c>)
   1a474:	4818      	ldr	r0, [pc, #96]	; (1a4d8 <z_clock_elapsed+0x8c>)
   1a476:	f019 f89c 	bl	335b2 <printk>
   1a47a:	215c      	movs	r1, #92	; 0x5c
   1a47c:	4813      	ldr	r0, [pc, #76]	; (1a4cc <z_clock_elapsed+0x80>)
   1a47e:	f019 fb99 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a482:	4811      	ldr	r0, [pc, #68]	; (1a4c8 <z_clock_elapsed+0x7c>)
   1a484:	f014 f840 	bl	2e508 <z_spin_lock_set_owner>
     return p_reg->COUNTER;
   1a488:	4b14      	ldr	r3, [pc, #80]	; (1a4dc <z_clock_elapsed+0x90>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a48a:	480f      	ldr	r0, [pc, #60]	; (1a4c8 <z_clock_elapsed+0x7c>)
   1a48c:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   1a490:	4b13      	ldr	r3, [pc, #76]	; (1a4e0 <z_clock_elapsed+0x94>)
	return (a - b) & COUNTER_MAX;
   1a492:	681b      	ldr	r3, [r3, #0]
   1a494:	1ae4      	subs	r4, r4, r3
   1a496:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
   1a49a:	f014 f825 	bl	2e4e8 <z_spin_unlock_valid>
   1a49e:	b968      	cbnz	r0, 1a4bc <z_clock_elapsed+0x70>
   1a4a0:	2384      	movs	r3, #132	; 0x84
   1a4a2:	4a0a      	ldr	r2, [pc, #40]	; (1a4cc <z_clock_elapsed+0x80>)
   1a4a4:	490f      	ldr	r1, [pc, #60]	; (1a4e4 <z_clock_elapsed+0x98>)
   1a4a6:	480b      	ldr	r0, [pc, #44]	; (1a4d4 <z_clock_elapsed+0x88>)
   1a4a8:	f019 f883 	bl	335b2 <printk>
   1a4ac:	4906      	ldr	r1, [pc, #24]	; (1a4c8 <z_clock_elapsed+0x7c>)
   1a4ae:	480e      	ldr	r0, [pc, #56]	; (1a4e8 <z_clock_elapsed+0x9c>)
   1a4b0:	f019 f87f 	bl	335b2 <printk>
   1a4b4:	2184      	movs	r1, #132	; 0x84
   1a4b6:	4805      	ldr	r0, [pc, #20]	; (1a4cc <z_clock_elapsed+0x80>)
   1a4b8:	f019 fb7c 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   1a4bc:	f385 8811 	msr	BASEPRI, r5
   1a4c0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   1a4c4:	4620      	mov	r0, r4
   1a4c6:	bd38      	pop	{r3, r4, r5, pc}
   1a4c8:	2002176c 	.word	0x2002176c
   1a4cc:	0003c745 	.word	0x0003c745
   1a4d0:	0003c76b 	.word	0x0003c76b
   1a4d4:	0003b773 	.word	0x0003b773
   1a4d8:	0003c780 	.word	0x0003c780
   1a4dc:	40015000 	.word	0x40015000
   1a4e0:	20021768 	.word	0x20021768
   1a4e4:	0003c798 	.word	0x0003c798
   1a4e8:	0003c7af 	.word	0x0003c7af

0001a4ec <z_timer_cycle_get_32>:

u32_t z_timer_cycle_get_32(void)
{
   1a4ec:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1a4ee:	f04f 0320 	mov.w	r3, #32
   1a4f2:	f3ef 8511 	mrs	r5, BASEPRI
   1a4f6:	f383 8811 	msr	BASEPRI, r3
   1a4fa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a4fe:	481b      	ldr	r0, [pc, #108]	; (1a56c <z_timer_cycle_get_32+0x80>)
   1a500:	f013 ffe4 	bl	2e4cc <z_spin_lock_valid>
   1a504:	b968      	cbnz	r0, 1a522 <z_timer_cycle_get_32+0x36>
   1a506:	235c      	movs	r3, #92	; 0x5c
   1a508:	4a19      	ldr	r2, [pc, #100]	; (1a570 <z_timer_cycle_get_32+0x84>)
   1a50a:	491a      	ldr	r1, [pc, #104]	; (1a574 <z_timer_cycle_get_32+0x88>)
   1a50c:	481a      	ldr	r0, [pc, #104]	; (1a578 <z_timer_cycle_get_32+0x8c>)
   1a50e:	f019 f850 	bl	335b2 <printk>
   1a512:	4916      	ldr	r1, [pc, #88]	; (1a56c <z_timer_cycle_get_32+0x80>)
   1a514:	4819      	ldr	r0, [pc, #100]	; (1a57c <z_timer_cycle_get_32+0x90>)
   1a516:	f019 f84c 	bl	335b2 <printk>
   1a51a:	215c      	movs	r1, #92	; 0x5c
   1a51c:	4814      	ldr	r0, [pc, #80]	; (1a570 <z_timer_cycle_get_32+0x84>)
   1a51e:	f019 fb49 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a522:	4812      	ldr	r0, [pc, #72]	; (1a56c <z_timer_cycle_get_32+0x80>)
   1a524:	f013 fff0 	bl	2e508 <z_spin_lock_set_owner>
   1a528:	4b15      	ldr	r3, [pc, #84]	; (1a580 <z_timer_cycle_get_32+0x94>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a52a:	4810      	ldr	r0, [pc, #64]	; (1a56c <z_timer_cycle_get_32+0x80>)
   1a52c:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
   1a530:	4b14      	ldr	r3, [pc, #80]	; (1a584 <z_timer_cycle_get_32+0x98>)
   1a532:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
   1a534:	1ae4      	subs	r4, r4, r3
   1a536:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	u32_t ret = counter_sub(counter(), last_count) + last_count;
   1a53a:	441c      	add	r4, r3
   1a53c:	f013 ffd4 	bl	2e4e8 <z_spin_unlock_valid>
   1a540:	b968      	cbnz	r0, 1a55e <z_timer_cycle_get_32+0x72>
   1a542:	2384      	movs	r3, #132	; 0x84
   1a544:	4a0a      	ldr	r2, [pc, #40]	; (1a570 <z_timer_cycle_get_32+0x84>)
   1a546:	4910      	ldr	r1, [pc, #64]	; (1a588 <z_timer_cycle_get_32+0x9c>)
   1a548:	480b      	ldr	r0, [pc, #44]	; (1a578 <z_timer_cycle_get_32+0x8c>)
   1a54a:	f019 f832 	bl	335b2 <printk>
   1a54e:	4907      	ldr	r1, [pc, #28]	; (1a56c <z_timer_cycle_get_32+0x80>)
   1a550:	480e      	ldr	r0, [pc, #56]	; (1a58c <z_timer_cycle_get_32+0xa0>)
   1a552:	f019 f82e 	bl	335b2 <printk>
   1a556:	2184      	movs	r1, #132	; 0x84
   1a558:	4805      	ldr	r0, [pc, #20]	; (1a570 <z_timer_cycle_get_32+0x84>)
   1a55a:	f019 fb2b 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   1a55e:	f385 8811 	msr	BASEPRI, r5
   1a562:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   1a566:	4620      	mov	r0, r4
   1a568:	bd38      	pop	{r3, r4, r5, pc}
   1a56a:	bf00      	nop
   1a56c:	2002176c 	.word	0x2002176c
   1a570:	0003c745 	.word	0x0003c745
   1a574:	0003c76b 	.word	0x0003c76b
   1a578:	0003b773 	.word	0x0003b773
   1a57c:	0003c780 	.word	0x0003c780
   1a580:	40015000 	.word	0x40015000
   1a584:	20021768 	.word	0x20021768
   1a588:	0003c798 	.word	0x0003c798
   1a58c:	0003c7af 	.word	0x0003c7af

0001a590 <uECC_set_rng>:
static uECC_RNG_Function g_rng_function = 0;
#endif

void uECC_set_rng(uECC_RNG_Function rng_function)
{
	g_rng_function = rng_function;
   1a590:	4b01      	ldr	r3, [pc, #4]	; (1a598 <uECC_set_rng+0x8>)
   1a592:	6018      	str	r0, [r3, #0]
}
   1a594:	4770      	bx	lr
   1a596:	bf00      	nop
   1a598:	200200ac 	.word	0x200200ac

0001a59c <uECC_get_rng>:

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
   1a59c:	4b01      	ldr	r3, [pc, #4]	; (1a5a4 <uECC_get_rng+0x8>)
   1a59e:	6818      	ldr	r0, [r3, #0]
   1a5a0:	4770      	bx	lr
   1a5a2:	bf00      	nop
   1a5a4:	200200ac 	.word	0x200200ac

0001a5a8 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
   1a5a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   1a5aa:	2208      	movs	r2, #8
{
   1a5ac:	b089      	sub	sp, #36	; 0x24
   1a5ae:	460c      	mov	r4, r1
   1a5b0:	4606      	mov	r6, r0
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   1a5b2:	f01a f82b 	bl	3460c <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
   1a5b6:	2700      	movs	r7, #0
	tmp[3] = product[11];
   1a5b8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
	tmp[4] = product[12];
	tmp[5] = product[13];
	tmp[6] = product[14];
	tmp[7] = product[15];
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   1a5ba:	466a      	mov	r2, sp
	tmp[3] = product[11];
   1a5bc:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
   1a5be:	6b0b      	ldr	r3, [r1, #48]	; 0x30
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   1a5c0:	4668      	mov	r0, sp
	tmp[4] = product[12];
   1a5c2:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
   1a5c4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
	tmp[0] = tmp[1] = tmp[2] = 0;
   1a5c6:	e9cd 7701 	strd	r7, r7, [sp, #4]
	tmp[5] = product[13];
   1a5ca:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
   1a5cc:	6b8b      	ldr	r3, [r1, #56]	; 0x38
	tmp[0] = tmp[1] = tmp[2] = 0;
   1a5ce:	9700      	str	r7, [sp, #0]
	tmp[6] = product[14];
   1a5d0:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   1a5d2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   1a5d4:	4669      	mov	r1, sp
	tmp[7] = product[15];
   1a5d6:	9307      	str	r3, [sp, #28]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   1a5d8:	2308      	movs	r3, #8
   1a5da:	f019 ff1c 	bl	34416 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   1a5de:	2308      	movs	r3, #8
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   1a5e0:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   1a5e2:	466a      	mov	r2, sp
   1a5e4:	4631      	mov	r1, r6
   1a5e6:	4630      	mov	r0, r6
   1a5e8:	f019 ff15 	bl	34416 <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
   1a5ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   1a5ee:	4405      	add	r5, r0
	tmp[3] = product[12];
   1a5f0:	9303      	str	r3, [sp, #12]
	tmp[4] = product[13];
   1a5f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
	tmp[5] = product[14];
	tmp[6] = product[15];
	tmp[7] = 0;
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   1a5f4:	466a      	mov	r2, sp
	tmp[4] = product[13];
   1a5f6:	9304      	str	r3, [sp, #16]
	tmp[5] = product[14];
   1a5f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   1a5fa:	4669      	mov	r1, sp
	tmp[5] = product[14];
   1a5fc:	9305      	str	r3, [sp, #20]
	tmp[6] = product[15];
   1a5fe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   1a600:	4668      	mov	r0, sp
	tmp[7] = 0;
   1a602:	e9cd 3706 	strd	r3, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   1a606:	2308      	movs	r3, #8
   1a608:	f019 ff05 	bl	34416 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   1a60c:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   1a60e:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   1a610:	2308      	movs	r3, #8
   1a612:	466a      	mov	r2, sp
   1a614:	4630      	mov	r0, r6
   1a616:	f019 fefe 	bl	34416 <uECC_vli_add>

	/* s3 */
	tmp[0] = product[8];
   1a61a:	6a23      	ldr	r3, [r4, #32]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   1a61c:	4405      	add	r5, r0
	tmp[0] = product[8];
   1a61e:	9300      	str	r3, [sp, #0]
	tmp[1] = product[9];
   1a620:	6a63      	ldr	r3, [r4, #36]	; 0x24
	tmp[2] = product[10];
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
	tmp[7] = product[15];
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   1a622:	466a      	mov	r2, sp
	tmp[1] = product[9];
   1a624:	9301      	str	r3, [sp, #4]
	tmp[2] = product[10];
   1a626:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   1a628:	4630      	mov	r0, r6
	tmp[2] = product[10];
   1a62a:	9302      	str	r3, [sp, #8]
	tmp[6] = product[14];
   1a62c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	tmp[3] = tmp[4] = tmp[5] = 0;
   1a62e:	e9cd 7704 	strd	r7, r7, [sp, #16]
	tmp[6] = product[14];
   1a632:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   1a634:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[3] = tmp[4] = tmp[5] = 0;
   1a636:	9703      	str	r7, [sp, #12]
	tmp[7] = product[15];
   1a638:	9307      	str	r3, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   1a63a:	2308      	movs	r3, #8
   1a63c:	f019 feeb 	bl	34416 <uECC_vli_add>

	/* s4 */
	tmp[0] = product[9];
   1a640:	6a63      	ldr	r3, [r4, #36]	; 0x24
	tmp[1] = product[10];
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
   1a642:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	tmp[0] = product[9];
   1a644:	9300      	str	r3, [sp, #0]
	tmp[1] = product[10];
   1a646:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[4] = product[14];
   1a648:	9204      	str	r2, [sp, #16]
	tmp[1] = product[10];
   1a64a:	9301      	str	r3, [sp, #4]
	tmp[2] = product[11];
   1a64c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[5] = product[15];
   1a64e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	tmp[2] = product[11];
   1a650:	9302      	str	r3, [sp, #8]
	tmp[3] = product[13];
   1a652:	6b63      	ldr	r3, [r4, #52]	; 0x34
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   1a654:	4405      	add	r5, r0
	tmp[6] = product[13];
   1a656:	e9cd 2305 	strd	r2, r3, [sp, #20]
	tmp[3] = product[13];
   1a65a:	9303      	str	r3, [sp, #12]
	tmp[7] = product[8];
   1a65c:	6a23      	ldr	r3, [r4, #32]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   1a65e:	466a      	mov	r2, sp
	tmp[7] = product[8];
   1a660:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   1a662:	4630      	mov	r0, r6
   1a664:	2308      	movs	r3, #8
   1a666:	f019 fed6 	bl	34416 <uECC_vli_add>

	/* d1 */
	tmp[0] = product[11];
   1a66a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   1a66c:	4405      	add	r5, r0
	tmp[0] = product[11];
   1a66e:	9300      	str	r3, [sp, #0]
	tmp[1] = product[12];
   1a670:	6b23      	ldr	r3, [r4, #48]	; 0x30
	tmp[2] = product[13];
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
	tmp[7] = product[10];
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1a672:	466a      	mov	r2, sp
	tmp[1] = product[12];
   1a674:	9301      	str	r3, [sp, #4]
	tmp[2] = product[13];
   1a676:	6b63      	ldr	r3, [r4, #52]	; 0x34
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1a678:	4630      	mov	r0, r6
	tmp[2] = product[13];
   1a67a:	9302      	str	r3, [sp, #8]
	tmp[6] = product[8];
   1a67c:	6a23      	ldr	r3, [r4, #32]
	tmp[3] = tmp[4] = tmp[5] = 0;
   1a67e:	e9cd 7704 	strd	r7, r7, [sp, #16]
	tmp[6] = product[8];
   1a682:	9306      	str	r3, [sp, #24]
	tmp[7] = product[10];
   1a684:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[3] = tmp[4] = tmp[5] = 0;
   1a686:	9703      	str	r7, [sp, #12]
	tmp[7] = product[10];
   1a688:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1a68a:	2308      	movs	r3, #8
   1a68c:	f019 ffe1 	bl	34652 <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
   1a690:	6b23      	ldr	r3, [r4, #48]	; 0x30
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1a692:	1a2d      	subs	r5, r5, r0
	tmp[0] = product[12];
   1a694:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
   1a696:	6b63      	ldr	r3, [r4, #52]	; 0x34
	tmp[2] = product[14];
	tmp[3] = product[15];
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
	tmp[7] = product[11];
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1a698:	466a      	mov	r2, sp
	tmp[1] = product[13];
   1a69a:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
   1a69c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1a69e:	4630      	mov	r0, r6
	tmp[2] = product[14];
   1a6a0:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
   1a6a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[4] = tmp[5] = 0;
   1a6a4:	e9cd 7704 	strd	r7, r7, [sp, #16]
	tmp[3] = product[15];
   1a6a8:	9303      	str	r3, [sp, #12]
	tmp[6] = product[9];
   1a6aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1a6ac:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
   1a6ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1a6b0:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1a6b2:	2308      	movs	r3, #8
   1a6b4:	f019 ffcd 	bl	34652 <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
   1a6b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1a6ba:	1a2d      	subs	r5, r5, r0
	tmp[0] = product[13];
   1a6bc:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
   1a6be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	tmp[3] = product[8];
	tmp[4] = product[9];
	tmp[5] = product[10];
	tmp[6] = 0;
	tmp[7] = product[12];
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1a6c0:	466a      	mov	r2, sp
	tmp[1] = product[14];
   1a6c2:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
   1a6c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1a6c6:	4630      	mov	r0, r6
	tmp[2] = product[15];
   1a6c8:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
   1a6ca:	6a23      	ldr	r3, [r4, #32]
   1a6cc:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
   1a6ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1a6d0:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
   1a6d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
   1a6d4:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
   1a6d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1a6da:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1a6dc:	2308      	movs	r3, #8
   1a6de:	f019 ffb8 	bl	34652 <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
   1a6e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1a6e4:	1a2d      	subs	r5, r5, r0
	tmp[0] = product[14];
   1a6e6:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
   1a6e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[3] = product[9];
	tmp[4] = product[10];
	tmp[5] = product[11];
	tmp[6] = 0;
	tmp[7] = product[13];
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1a6ea:	466a      	mov	r2, sp
	tmp[2] = 0;
   1a6ec:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
   1a6f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1a6f2:	4630      	mov	r0, r6
	tmp[3] = product[9];
   1a6f4:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
   1a6f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1a6f8:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
   1a6fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
   1a6fc:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
   1a700:	6b63      	ldr	r3, [r4, #52]	; 0x34

	if (carry < 0) {
		do {
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   1a702:	4c10      	ldr	r4, [pc, #64]	; (1a744 <vli_mmod_fast_secp256r1+0x19c>)
	tmp[7] = product[13];
   1a704:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1a706:	2308      	movs	r3, #8
   1a708:	f019 ffa3 	bl	34652 <uECC_vli_sub>
	if (carry < 0) {
   1a70c:	1a2d      	subs	r5, r5, r0
   1a70e:	d40f      	bmi.n	1a730 <vli_mmod_fast_secp256r1+0x188>
		}
		while (carry < 0);
	} else  {
		while (carry || 
   1a710:	b935      	cbnz	r5, 1a720 <vli_mmod_fast_secp256r1+0x178>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   1a712:	2208      	movs	r2, #8
   1a714:	4631      	mov	r1, r6
   1a716:	4620      	mov	r0, r4
   1a718:	f019 ff84 	bl	34624 <uECC_vli_cmp_unsafe>
		while (carry || 
   1a71c:	2801      	cmp	r0, #1
   1a71e:	d00f      	beq.n	1a740 <vli_mmod_fast_secp256r1+0x198>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   1a720:	2308      	movs	r3, #8
   1a722:	4622      	mov	r2, r4
   1a724:	4631      	mov	r1, r6
   1a726:	4630      	mov	r0, r6
   1a728:	f019 ff93 	bl	34652 <uECC_vli_sub>
   1a72c:	1a2d      	subs	r5, r5, r0
   1a72e:	e7ef      	b.n	1a710 <vli_mmod_fast_secp256r1+0x168>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   1a730:	2308      	movs	r3, #8
   1a732:	4622      	mov	r2, r4
   1a734:	4631      	mov	r1, r6
   1a736:	4630      	mov	r0, r6
   1a738:	f019 fe6d 	bl	34416 <uECC_vli_add>
		while (carry < 0);
   1a73c:	182d      	adds	r5, r5, r0
   1a73e:	d4f7      	bmi.n	1a730 <vli_mmod_fast_secp256r1+0x188>
		}
	}
}
   1a740:	b009      	add	sp, #36	; 0x24
   1a742:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a744:	0003a304 	.word	0x0003a304

0001a748 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   1a748:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a74a:	4607      	mov	r7, r0
   1a74c:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   1a74e:	4e27      	ldr	r6, [pc, #156]	; (1a7ec <tc_aes128_set_encrypt_key+0xa4>)
   1a750:	ad01      	add	r5, sp, #4
{
   1a752:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   1a754:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1a756:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1a758:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1a75a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1a75c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   1a760:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   1a764:	2f00      	cmp	r7, #0
   1a766:	d03d      	beq.n	1a7e4 <tc_aes128_set_encrypt_key+0x9c>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   1a768:	2c00      	cmp	r4, #0
   1a76a:	d03d      	beq.n	1a7e8 <tc_aes128_set_encrypt_key+0xa0>
   1a76c:	1f38      	subs	r0, r7, #4
   1a76e:	4602      	mov	r2, r0
   1a770:	4621      	mov	r1, r4
   1a772:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   1a774:	784b      	ldrb	r3, [r1, #1]
   1a776:	780d      	ldrb	r5, [r1, #0]
   1a778:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   1a77a:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   1a77e:	78cd      	ldrb	r5, [r1, #3]
   1a780:	3104      	adds	r1, #4
   1a782:	432b      	orrs	r3, r5
   1a784:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
   1a788:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   1a78a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   1a78e:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   1a792:	d1ef      	bne.n	1a774 <tc_aes128_set_encrypt_key+0x2c>
   1a794:	2104      	movs	r1, #4
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
   1a796:	4c16      	ldr	r4, [pc, #88]	; (1a7f0 <tc_aes128_set_encrypt_key+0xa8>)
		if ((i % Nk) == 0) {
   1a798:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   1a79a:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   1a79c:	d118      	bne.n	1a7d0 <tc_aes128_set_encrypt_key+0x88>
	return (((a) >> 24)|((a) << 8));
   1a79e:	ea4f 6333 	mov.w	r3, r3, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
   1a7a2:	0e1a      	lsrs	r2, r3, #24
   1a7a4:	5ca5      	ldrb	r5, [r4, r2]
   1a7a6:	b2da      	uxtb	r2, r3
   1a7a8:	5ca2      	ldrb	r2, [r4, r2]
   1a7aa:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   1a7ae:	f3c3 4507 	ubfx	r5, r3, #16, #8
   1a7b2:	5d65      	ldrb	r5, [r4, r5]
   1a7b4:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1a7b8:	5ce3      	ldrb	r3, [r4, r3]
   1a7ba:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   1a7be:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   1a7c2:	ad0c      	add	r5, sp, #48	; 0x30
   1a7c4:	f021 0303 	bic.w	r3, r1, #3
   1a7c8:	442b      	add	r3, r5
   1a7ca:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   1a7ce:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
   1a7d0:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   1a7d4:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   1a7d6:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   1a7d8:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   1a7da:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   1a7dc:	d1dc      	bne.n	1a798 <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
   1a7de:	2001      	movs	r0, #1
}
   1a7e0:	b00d      	add	sp, #52	; 0x34
   1a7e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1a7e4:	4638      	mov	r0, r7
   1a7e6:	e7fb      	b.n	1a7e0 <tc_aes128_set_encrypt_key+0x98>
   1a7e8:	4620      	mov	r0, r4
   1a7ea:	e7f9      	b.n	1a7e0 <tc_aes128_set_encrypt_key+0x98>
   1a7ec:	0003a0b0 	.word	0x0003a0b0
   1a7f0:	0003ce74 	.word	0x0003ce74

0001a7f4 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   1a7f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a7f8:	4615      	mov	r5, r2
   1a7fa:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   1a7fc:	4607      	mov	r7, r0
   1a7fe:	2800      	cmp	r0, #0
   1a800:	d059      	beq.n	1a8b6 <tc_aes_encrypt+0xc2>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   1a802:	2900      	cmp	r1, #0
   1a804:	d05a      	beq.n	1a8bc <tc_aes_encrypt+0xc8>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   1a806:	2a00      	cmp	r2, #0
   1a808:	d05a      	beq.n	1a8c0 <tc_aes_encrypt+0xcc>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   1a80a:	2310      	movs	r3, #16
   1a80c:	460a      	mov	r2, r1
   1a80e:	4668      	mov	r0, sp
   1a810:	4619      	mov	r1, r3
		s[i] = sbox[s[i]];
   1a812:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 1a8c4 <tc_aes_encrypt+0xd0>
	(void)_copy(state, sizeof(state), in, sizeof(state));
   1a816:	f019 fcc0 	bl	3419a <_copy>
	add_round_key(state, s->words);
   1a81a:	4629      	mov	r1, r5
   1a81c:	4668      	mov	r0, sp
   1a81e:	f01a fbd0 	bl	34fc2 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   1a822:	46c8      	mov	r8, r9
   1a824:	f105 0610 	add.w	r6, r5, #16
   1a828:	35a0      	adds	r5, #160	; 0xa0
   1a82a:	466c      	mov	r4, sp
{
   1a82c:	466a      	mov	r2, sp
   1a82e:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
   1a830:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   1a832:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
   1a834:	f819 1001 	ldrb.w	r1, [r9, r1]
   1a838:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   1a83c:	d1f8      	bne.n	1a830 <tc_aes_encrypt+0x3c>
		sub_bytes(state);
		shift_rows(state);
   1a83e:	4668      	mov	r0, sp
   1a840:	f01a fc04 	bl	3504c <shift_rows>
	mult_row_column(t, s);
   1a844:	4669      	mov	r1, sp
   1a846:	a804      	add	r0, sp, #16
   1a848:	f01a fc39 	bl	350be <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   1a84c:	a901      	add	r1, sp, #4
   1a84e:	a805      	add	r0, sp, #20
   1a850:	f01a fc35 	bl	350be <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   1a854:	a902      	add	r1, sp, #8
   1a856:	a806      	add	r0, sp, #24
   1a858:	f01a fc31 	bl	350be <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   1a85c:	a903      	add	r1, sp, #12
   1a85e:	a807      	add	r0, sp, #28
   1a860:	f01a fc2d 	bl	350be <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1a864:	2310      	movs	r3, #16
   1a866:	4668      	mov	r0, sp
   1a868:	4619      	mov	r1, r3
   1a86a:	eb0d 0203 	add.w	r2, sp, r3
   1a86e:	f019 fc94 	bl	3419a <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   1a872:	4631      	mov	r1, r6
   1a874:	4668      	mov	r0, sp
   1a876:	3610      	adds	r6, #16
   1a878:	f01a fba3 	bl	34fc2 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   1a87c:	42ae      	cmp	r6, r5
   1a87e:	d1d4      	bne.n	1a82a <tc_aes_encrypt+0x36>
   1a880:	2610      	movs	r6, #16
		s[i] = sbox[s[i]];
   1a882:	7823      	ldrb	r3, [r4, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   1a884:	3e01      	subs	r6, #1
		s[i] = sbox[s[i]];
   1a886:	f818 3003 	ldrb.w	r3, [r8, r3]
   1a88a:	f804 3b01 	strb.w	r3, [r4], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   1a88e:	d1f8      	bne.n	1a882 <tc_aes_encrypt+0x8e>
	}

	sub_bytes(state);
	shift_rows(state);
   1a890:	4668      	mov	r0, sp
   1a892:	f01a fbdb 	bl	3504c <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   1a896:	4629      	mov	r1, r5
   1a898:	4668      	mov	r0, sp
   1a89a:	f01a fb92 	bl	34fc2 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   1a89e:	2310      	movs	r3, #16
   1a8a0:	466a      	mov	r2, sp
   1a8a2:	4619      	mov	r1, r3
   1a8a4:	4638      	mov	r0, r7
   1a8a6:	f019 fc78 	bl	3419a <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   1a8aa:	4668      	mov	r0, sp
   1a8ac:	2210      	movs	r2, #16
   1a8ae:	4631      	mov	r1, r6
   1a8b0:	f019 fc80 	bl	341b4 <_set>

	return TC_CRYPTO_SUCCESS;
   1a8b4:	2001      	movs	r0, #1
}
   1a8b6:	b009      	add	sp, #36	; 0x24
   1a8b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   1a8bc:	4608      	mov	r0, r1
   1a8be:	e7fa      	b.n	1a8b6 <tc_aes_encrypt+0xc2>
   1a8c0:	4610      	mov	r0, r2
   1a8c2:	e7f8      	b.n	1a8b6 <tc_aes_encrypt+0xc2>
   1a8c4:	0003ce74 	.word	0x0003ce74

0001a8c8 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
   1a8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int t1, t2;
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   1a8cc:	6803      	ldr	r3, [r0, #0]
{
   1a8ce:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   1a8d0:	9302      	str	r3, [sp, #8]
   1a8d2:	6843      	ldr	r3, [r0, #4]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   1a8d4:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   1a8d6:	9303      	str	r3, [sp, #12]
   1a8d8:	6883      	ldr	r3, [r0, #8]
{
   1a8da:	9100      	str	r1, [sp, #0]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   1a8dc:	9304      	str	r3, [sp, #16]
   1a8de:	68c3      	ldr	r3, [r0, #12]
   1a8e0:	4965      	ldr	r1, [pc, #404]	; (1aa78 <compress+0x1b0>)
   1a8e2:	9305      	str	r3, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   1a8e4:	6903      	ldr	r3, [r0, #16]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   1a8e6:	9c02      	ldr	r4, [sp, #8]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   1a8e8:	9306      	str	r3, [sp, #24]
   1a8ea:	6943      	ldr	r3, [r0, #20]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   1a8ec:	e9dd e205 	ldrd	lr, r2, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   1a8f0:	9307      	str	r3, [sp, #28]
   1a8f2:	6983      	ldr	r3, [r0, #24]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   1a8f4:	e9dd 6a03 	ldrd	r6, sl, [sp, #12]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   1a8f8:	9308      	str	r3, [sp, #32]
   1a8fa:	69c3      	ldr	r3, [r0, #28]
   1a8fc:	e9dd cb07 	ldrd	ip, fp, [sp, #28]
   1a900:	4698      	mov	r8, r3
   1a902:	9309      	str	r3, [sp, #36]	; 0x24
	n = (((unsigned int)(*((*c)++))) << 24);
   1a904:	9b00      	ldr	r3, [sp, #0]
   1a906:	59dd      	ldr	r5, [r3, r7]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
		t1 = work_space[i] = n;
   1a908:	ab0c      	add	r3, sp, #48	; 0x30
   1a90a:	ba2d      	rev	r5, r5
   1a90c:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
   1a90e:	f851 3b04 	ldr.w	r3, [r1], #4
   1a912:	3704      	adds	r7, #4
   1a914:	eb05 0903 	add.w	r9, r5, r3
   1a918:	ea4f 25f2 	mov.w	r5, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   1a91c:	ea85 15b2 	eor.w	r5, r5, r2, ror #6
   1a920:	ea85 6572 	eor.w	r5, r5, r2, ror #25
   1a924:	444d      	add	r5, r9
   1a926:	ea2b 0302 	bic.w	r3, fp, r2
   1a92a:	ea02 090c 	and.w	r9, r2, ip
   1a92e:	ea83 0309 	eor.w	r3, r3, r9
   1a932:	442b      	add	r3, r5
   1a934:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
   1a936:	ea86 050a 	eor.w	r5, r6, sl
	return (((a) >> n) | ((a) << (32 - n)));
   1a93a:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
   1a93e:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
   1a942:	4025      	ands	r5, r4
   1a944:	ea06 090a 	and.w	r9, r6, sl
   1a948:	ea85 0509 	eor.w	r5, r5, r9
   1a94c:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
   1a950:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
   1a952:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
   1a954:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
   1a958:	4443      	add	r3, r8
   1a95a:	46d6      	mov	lr, sl
   1a95c:	46d8      	mov	r8, fp
	for (i = 0; i < 16; ++i) {
   1a95e:	d17d      	bne.n	1aa5c <compress+0x194>
   1a960:	4946      	ldr	r1, [pc, #280]	; (1aa7c <compress+0x1b4>)
   1a962:	910a      	str	r1, [sp, #40]	; 0x28
   1a964:	2110      	movs	r1, #16
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
   1a966:	1c4f      	adds	r7, r1, #1
   1a968:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
   1a96c:	970b      	str	r7, [sp, #44]	; 0x2c
   1a96e:	f007 070f 	and.w	r7, r7, #15
   1a972:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
   1a976:	f857 7c40 	ldr.w	r7, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   1a97a:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
   1a97e:	ea4f 48b7 	mov.w	r8, r7, ror #18
		s0 = work_space[(i+1)&0x0f];
   1a982:	9700      	str	r7, [sp, #0]
		s0 = sigma0(s0);
   1a984:	ea88 18f7 	eor.w	r8, r8, r7, ror #7
		s1 = work_space[(i+14)&0x0f];
   1a988:	f101 070e 	add.w	r7, r1, #14
   1a98c:	f007 070f 	and.w	r7, r7, #15
   1a990:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
   1a994:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   1a998:	3109      	adds	r1, #9
	return (((a) >> n) | ((a) << (32 - n)));
   1a99a:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s1 = work_space[(i+14)&0x0f];
   1a99e:	9701      	str	r7, [sp, #4]
		s1 = sigma1(s1);
   1a9a0:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   1a9a4:	f001 010f 	and.w	r1, r1, #15
   1a9a8:	af1c      	add	r7, sp, #112	; 0x70
   1a9aa:	eb07 0989 	add.w	r9, r7, r9, lsl #2
   1a9ae:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   1a9b2:	f851 1c40 	ldr.w	r1, [r1, #-64]
   1a9b6:	f859 7c40 	ldr.w	r7, [r9, #-64]
   1a9ba:	4439      	add	r1, r7
		s0 = sigma0(s0);
   1a9bc:	9f00      	ldr	r7, [sp, #0]
   1a9be:	ea88 08d7 	eor.w	r8, r8, r7, lsr #3
		s1 = sigma1(s1);
   1a9c2:	9f01      	ldr	r7, [sp, #4]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   1a9c4:	4441      	add	r1, r8
		s1 = sigma1(s1);
   1a9c6:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   1a9ca:	9f0a      	ldr	r7, [sp, #40]	; 0x28
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   1a9cc:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   1a9ce:	f857 eb04 	ldr.w	lr, [r7], #4
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   1a9d2:	f849 1c40 	str.w	r1, [r9, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
   1a9d6:	ea4f 29f5 	mov.w	r9, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   1a9da:	970a      	str	r7, [sp, #40]	; 0x28
   1a9dc:	ea89 19b5 	eor.w	r9, r9, r5, ror #6
   1a9e0:	ea2c 0705 	bic.w	r7, ip, r5
   1a9e4:	ea05 0802 	and.w	r8, r5, r2
   1a9e8:	ea89 6975 	eor.w	r9, r9, r5, ror #25
   1a9ec:	ea87 0708 	eor.w	r7, r7, r8
   1a9f0:	444f      	add	r7, r9
   1a9f2:	4477      	add	r7, lr
   1a9f4:	4439      	add	r1, r7
   1a9f6:	4459      	add	r1, fp
	return (((a) >> n) | ((a) << (32 - n)));
   1a9f8:	ea4f 3773 	mov.w	r7, r3, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
   1a9fc:	ea84 0b06 	eor.w	fp, r4, r6
   1aa00:	ea0b 0b03 	and.w	fp, fp, r3
   1aa04:	ea87 07b3 	eor.w	r7, r7, r3, ror #2
   1aa08:	ea04 0e06 	and.w	lr, r4, r6
   1aa0c:	ea87 57b3 	eor.w	r7, r7, r3, ror #22
   1aa10:	ea8b 0e0e 	eor.w	lr, fp, lr
   1aa14:	44be      	add	lr, r7
		h = g; g = f; f = e; e = d + t1;
		d = c; c = b; b = a; a = t1 + t2;
   1aa16:	448e      	add	lr, r1
		h = g; g = f; f = e; e = d + t1;
   1aa18:	eb01 070a 	add.w	r7, r1, sl
		d = c; c = b; b = a; a = t1 + t2;
   1aa1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1aa1e:	46b2      	mov	sl, r6
	for ( ; i < 64; ++i) {
   1aa20:	2940      	cmp	r1, #64	; 0x40
   1aa22:	46e3      	mov	fp, ip
   1aa24:	d121      	bne.n	1aa6a <compress+0x1a2>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
   1aa26:	9902      	ldr	r1, [sp, #8]
   1aa28:	4471      	add	r1, lr
   1aa2a:	6001      	str	r1, [r0, #0]
   1aa2c:	9903      	ldr	r1, [sp, #12]
   1aa2e:	4419      	add	r1, r3
   1aa30:	9b04      	ldr	r3, [sp, #16]
   1aa32:	6041      	str	r1, [r0, #4]
   1aa34:	4423      	add	r3, r4
   1aa36:	6083      	str	r3, [r0, #8]
   1aa38:	9b05      	ldr	r3, [sp, #20]
   1aa3a:	4433      	add	r3, r6
   1aa3c:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
   1aa3e:	9b06      	ldr	r3, [sp, #24]
   1aa40:	443b      	add	r3, r7
   1aa42:	6103      	str	r3, [r0, #16]
   1aa44:	9b07      	ldr	r3, [sp, #28]
   1aa46:	442b      	add	r3, r5
   1aa48:	6143      	str	r3, [r0, #20]
   1aa4a:	9b08      	ldr	r3, [sp, #32]
   1aa4c:	4413      	add	r3, r2
   1aa4e:	6183      	str	r3, [r0, #24]
   1aa50:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1aa52:	4463      	add	r3, ip
   1aa54:	61c3      	str	r3, [r0, #28]
}
   1aa56:	b01d      	add	sp, #116	; 0x74
   1aa58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa5c:	46e3      	mov	fp, ip
   1aa5e:	46b2      	mov	sl, r6
   1aa60:	4694      	mov	ip, r2
   1aa62:	4626      	mov	r6, r4
		h = g; g = f; f = e; e = d + t1;
   1aa64:	462a      	mov	r2, r5
		d = c; c = b; b = a; a = t1 + t2;
   1aa66:	461c      	mov	r4, r3
   1aa68:	e74c      	b.n	1a904 <compress+0x3c>
   1aa6a:	4694      	mov	ip, r2
   1aa6c:	4626      	mov	r6, r4
   1aa6e:	462a      	mov	r2, r5
   1aa70:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
   1aa72:	463d      	mov	r5, r7
		d = c; c = b; b = a; a = t1 + t2;
   1aa74:	4673      	mov	r3, lr
   1aa76:	e776      	b.n	1a966 <compress+0x9e>
   1aa78:	0003a3b0 	.word	0x0003a3b0
   1aa7c:	0003a3f0 	.word	0x0003a3f0

0001aa80 <tc_sha256_init>:
{
   1aa80:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
   1aa82:	4604      	mov	r4, r0
   1aa84:	b1c8      	cbz	r0, 1aaba <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
   1aa86:	2270      	movs	r2, #112	; 0x70
   1aa88:	2100      	movs	r1, #0
   1aa8a:	f019 fb93 	bl	341b4 <_set>
	s->iv[1] = 0xbb67ae85;
   1aa8e:	4b0b      	ldr	r3, [pc, #44]	; (1aabc <tc_sha256_init+0x3c>)
   1aa90:	4a0b      	ldr	r2, [pc, #44]	; (1aac0 <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
   1aa92:	490c      	ldr	r1, [pc, #48]	; (1aac4 <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
   1aa94:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
   1aa98:	4b0b      	ldr	r3, [pc, #44]	; (1aac8 <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
   1aa9a:	480c      	ldr	r0, [pc, #48]	; (1aacc <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
   1aa9c:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
   1aaa0:	4b0b      	ldr	r3, [pc, #44]	; (1aad0 <tc_sha256_init+0x50>)
   1aaa2:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
   1aaa6:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
   1aaa8:	4b0a      	ldr	r3, [pc, #40]	; (1aad4 <tc_sha256_init+0x54>)
   1aaaa:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
   1aaac:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
   1aab0:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
   1aab4:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
   1aab8:	61e3      	str	r3, [r4, #28]
}
   1aaba:	bd10      	pop	{r4, pc}
   1aabc:	bb67ae85 	.word	0xbb67ae85
   1aac0:	6a09e667 	.word	0x6a09e667
   1aac4:	3c6ef372 	.word	0x3c6ef372
   1aac8:	a54ff53a 	.word	0xa54ff53a
   1aacc:	510e527f 	.word	0x510e527f
   1aad0:	9b05688c 	.word	0x9b05688c
   1aad4:	1f83d9ab 	.word	0x1f83d9ab

0001aad8 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
   1aad8:	4a09      	ldr	r2, [pc, #36]	; (1ab00 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   1aada:	490a      	ldr	r1, [pc, #40]	; (1ab04 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   1aadc:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   1aade:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   1aae0:	66d8      	str	r0, [r3, #108]	; 0x6c
	_current->arch.swap_return_value = _k_neg_eagain;
   1aae2:	6719      	str	r1, [r3, #112]	; 0x70

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1aae4:	4908      	ldr	r1, [pc, #32]	; (1ab08 <arch_swap+0x30>)
   1aae6:	684b      	ldr	r3, [r1, #4]
   1aae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   1aaec:	604b      	str	r3, [r1, #4]
   1aaee:	2300      	movs	r3, #0
   1aaf0:	f383 8811 	msr	BASEPRI, r3
   1aaf4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   1aaf8:	6893      	ldr	r3, [r2, #8]
}
   1aafa:	6f18      	ldr	r0, [r3, #112]	; 0x70
   1aafc:	4770      	bx	lr
   1aafe:	bf00      	nop
   1ab00:	200274dc 	.word	0x200274dc
   1ab04:	0003ac24 	.word	0x0003ac24
   1ab08:	e000ed00 	.word	0xe000ed00

0001ab0c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   1ab0c:	4929      	ldr	r1, [pc, #164]	; (1abb4 <in_fp_endif+0x2c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1ab0e:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   1ab10:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   1ab14:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   1ab16:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   1ab1a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
   1ab1e:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   1ab22:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
   1ab26:	d004      	beq.n	1ab32 <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
   1ab28:	f8d2 00b4 	ldr.w	r0, [r2, #180]	; 0xb4
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
   1ab2c:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
   1ab30:	e007      	b.n	1ab42 <out_fp_endif>

0001ab32 <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
   1ab32:	f102 0074 	add.w	r0, r2, #116	; 0x74
    vstmia r0, {s16-s31}
   1ab36:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
   1ab3a:	f8d2 00b4 	ldr.w	r0, [r2, #180]	; 0xb4
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
   1ab3e:	f050 0004 	orrs.w	r0, r0, #4

0001ab42 <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
   1ab42:	f8c2 00b4 	str.w	r0, [r2, #180]	; 0xb4

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1ab46:	2020      	movs	r0, #32
    msr BASEPRI, r0
   1ab48:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   1ab4c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   1ab50:	4f19      	ldr	r7, [pc, #100]	; (1abb8 <in_fp_endif+0x30>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   1ab52:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1ab56:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   1ab58:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1ab5a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   1ab5c:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
    movs r3, #0
   1ab5e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   1ab60:	66d3      	str	r3, [r2, #108]	; 0x6c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   1ab62:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
   1ab66:	f8d2 00b4 	ldr.w	r0, [r2, #180]	; 0xb4
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
   1ab6a:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
   1ab6e:	d105      	bne.n	1ab7c <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   1ab70:	2300      	movs	r3, #0
    vmsr fpscr, r3
   1ab72:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   1ab76:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
   1ab7a:	e005      	b.n	1ab88 <in_fp_endif>

0001ab7c <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
   1ab7c:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
   1ab80:	f102 0074 	add.w	r0, r2, #116	; 0x74
    vldmia r0, {s16-s31}
   1ab84:	ec90 8a10 	vldmia	r0, {s16-s31}

0001ab88 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   1ab88:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
   1ab8c:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   1ab90:	f383 8814 	msr	CONTROL, r3
    isb
   1ab94:	f3bf 8f6f 	isb	sy
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   1ab98:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   1ab9c:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   1aba0:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   1aba4:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   1aba8:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   1abaa:	f01a fc42 	bl	35432 <configure_builtin_stack_guard>
    pop {r2, lr}
   1abae:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
   1abb2:	4770      	bx	lr
    ldr r1, =_kernel
   1abb4:	200274dc 	.word	0x200274dc
    ldr v4, =_SCS_ICSR
   1abb8:	e000ed04 	.word	0xe000ed04

0001abbc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   1abbc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   1abc0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   1abc2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   1abc6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   1abca:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   1abcc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   1abd0:	2902      	cmp	r1, #2
    beq _oops
   1abd2:	d0ff      	beq.n	1abd4 <_oops>

0001abd4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   1abd4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   1abd6:	f01a fc30 	bl	3543a <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   1abda:	bd01      	pop	{r0, pc}

0001abdc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   1abdc:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   1abde:	2b00      	cmp	r3, #0
   1abe0:	db08      	blt.n	1abf4 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1abe2:	2201      	movs	r2, #1
   1abe4:	f000 001f 	and.w	r0, r0, #31
   1abe8:	fa02 f000 	lsl.w	r0, r2, r0
   1abec:	4a02      	ldr	r2, [pc, #8]	; (1abf8 <arch_irq_enable+0x1c>)
   1abee:	095b      	lsrs	r3, r3, #5
   1abf0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   1abf4:	4770      	bx	lr
   1abf6:	bf00      	nop
   1abf8:	e000e100 	.word	0xe000e100

0001abfc <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, u32_t flags)
{
   1abfc:	b570      	push	{r4, r5, r6, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
   1abfe:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   1ac00:	2c07      	cmp	r4, #7
{
   1ac02:	4605      	mov	r5, r0
   1ac04:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   1ac06:	d90e      	bls.n	1ac26 <z_arm_irq_priority_set+0x2a>
   1ac08:	235e      	movs	r3, #94	; 0x5e
   1ac0a:	4a10      	ldr	r2, [pc, #64]	; (1ac4c <z_arm_irq_priority_set+0x50>)
   1ac0c:	4910      	ldr	r1, [pc, #64]	; (1ac50 <z_arm_irq_priority_set+0x54>)
   1ac0e:	4811      	ldr	r0, [pc, #68]	; (1ac54 <z_arm_irq_priority_set+0x58>)
   1ac10:	f018 fccf 	bl	335b2 <printk>
   1ac14:	4631      	mov	r1, r6
   1ac16:	4810      	ldr	r0, [pc, #64]	; (1ac58 <z_arm_irq_priority_set+0x5c>)
   1ac18:	2207      	movs	r2, #7
   1ac1a:	f018 fcca 	bl	335b2 <printk>
   1ac1e:	215e      	movs	r1, #94	; 0x5e
   1ac20:	480a      	ldr	r0, [pc, #40]	; (1ac4c <z_arm_irq_priority_set+0x50>)
   1ac22:	f018 ffc7 	bl	33bb4 <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   1ac26:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   1ac28:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1ac2a:	bfa8      	it	ge
   1ac2c:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
   1ac30:	ea4f 1444 	mov.w	r4, r4, lsl #5
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1ac34:	bfb8      	it	lt
   1ac36:	4b09      	ldrlt	r3, [pc, #36]	; (1ac5c <z_arm_irq_priority_set+0x60>)
   1ac38:	b2e4      	uxtb	r4, r4
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1ac3a:	bfab      	itete	ge
   1ac3c:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1ac40:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1ac44:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1ac48:	555c      	strblt	r4, [r3, r5]
}
   1ac4a:	bd70      	pop	{r4, r5, r6, pc}
   1ac4c:	0003cf74 	.word	0x0003cf74
   1ac50:	0003cfaa 	.word	0x0003cfaa
   1ac54:	0003b773 	.word	0x0003b773
   1ac58:	0003cfc5 	.word	0x0003cfc5
   1ac5c:	e000ed14 	.word	0xe000ed14

0001ac60 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
   1ac60:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   1ac62:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   1ac64:	4b04      	ldr	r3, [pc, #16]	; (1ac78 <_arch_isr_direct_pm+0x18>)
   1ac66:	6a18      	ldr	r0, [r3, #32]
   1ac68:	b118      	cbz	r0, 1ac72 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   1ac6a:	2200      	movs	r2, #0
   1ac6c:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
   1ac6e:	f01d ff3c 	bl	38aea <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   1ac72:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   1ac74:	bd08      	pop	{r3, pc}
   1ac76:	bf00      	nop
   1ac78:	200274dc 	.word	0x200274dc

0001ac7c <arch_new_thread>:
#ifdef CONFIG_INIT_STACKS
	memset(stack, 0xaa, stack_size);
#endif
#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)stack;
	thread->stack_info.size = stack_size;
   1ac7c:	e9c0 1218 	strd	r1, r2, [r0, #96]	; 0x60
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
   1ac80:	440a      	add	r2, r1
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(Z_STACK_PTR_ALIGN(stackEnd -
   1ac82:	3a20      	subs	r2, #32
   1ac84:	f022 0207 	bic.w	r2, r2, #7
#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
   1ac88:	6013      	str	r3, [r2, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
   1ac8a:	9b00      	ldr	r3, [sp, #0]
	pInitCtx->basic.pc &= 0xfffffffe;
   1ac8c:	4908      	ldr	r1, [pc, #32]	; (1acb0 <arch_new_thread+0x34>)
	pInitCtx->basic.a2 = (u32_t)parameter1;
   1ac8e:	6053      	str	r3, [r2, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
   1ac90:	9b01      	ldr	r3, [sp, #4]
	pInitCtx->basic.pc &= 0xfffffffe;
   1ac92:	f021 0101 	bic.w	r1, r1, #1
	pInitCtx->basic.a3 = (u32_t)parameter2;
   1ac96:	6093      	str	r3, [r2, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
   1ac98:	9b02      	ldr	r3, [sp, #8]
	pInitCtx->basic.pc &= 0xfffffffe;
   1ac9a:	6191      	str	r1, [r2, #24]
	pInitCtx->basic.a4 = (u32_t)parameter3;
   1ac9c:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	pInitCtx->basic.xpsr =
   1ac9e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1aca2:	61d3      	str	r3, [r2, #28]
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (u32_t)pInitCtx;

	thread->arch.basepri = 0;
   1aca4:	2300      	movs	r3, #0
	thread->callee_saved.psp = (u32_t)pInitCtx;
   1aca6:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   1aca8:	66c3      	str	r3, [r0, #108]	; 0x6c

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FPU_SHARING)
	thread->arch.mode = 0;
   1acaa:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   1acae:	4770      	bx	lr
   1acb0:	0003360f 	.word	0x0003360f

0001acb4 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
   1acb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1acb6:	461e      	mov	r6, r3
   1acb8:	4607      	mov	r7, r0
   1acba:	460d      	mov	r5, r1
   1acbc:	4614      	mov	r4, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   1acbe:	2300      	movs	r3, #0
   1acc0:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1acc4:	f3ef 8214 	mrs	r2, CONTROL
	 * initialized at thread creation for threads that make use of the FP).
	 */
	__set_FPSCR(0);
#if defined(CONFIG_FPU_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   1acc8:	f022 0204 	bic.w	r2, r2, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   1accc:	f382 8814 	msr	CONTROL, r2
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
   1acd0:	f3bf 8f6f 	isb	sy
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1acd4:	f000 fc7c 	bl	1b5d0 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);

	_current = main_thread;
   1acd8:	4b09      	ldr	r3, [pc, #36]	; (1ad00 <arch_switch_to_main_thread+0x4c>)
	start_of_main_stack =
   1acda:	442c      	add	r4, r5
	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);
   1acdc:	f024 0407 	bic.w	r4, r4, #7
	_current = main_thread;
   1ace0:	609f      	str	r7, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1ace2:	f385 880b 	msr	PSPLIM, r5

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   1ace6:	4630      	mov	r0, r6
   1ace8:	f384 8809 	msr	PSP, r4
   1acec:	2100      	movs	r1, #0
   1acee:	b663      	cpsie	if
   1acf0:	f381 8811 	msr	BASEPRI, r1
   1acf4:	f3bf 8f6f 	isb	sy
   1acf8:	2200      	movs	r2, #0
   1acfa:	2300      	movs	r3, #0
   1acfc:	f018 fc87 	bl	3360e <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   1ad00:	200274dc 	.word	0x200274dc

0001ad04 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   1ad04:	4901      	ldr	r1, [pc, #4]	; (1ad0c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   1ad06:	2210      	movs	r2, #16
	str	r2, [r1]
   1ad08:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   1ad0a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   1ad0c:	e000ed10 	.word	0xe000ed10

0001ad10 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   1ad10:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   1ad12:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   1ad14:	f380 8811 	msr	BASEPRI, r0
	isb
   1ad18:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   1ad1c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   1ad20:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   1ad22:	b662      	cpsie	i
	isb
   1ad24:	f3bf 8f6f 	isb	sy

	bx	lr
   1ad28:	4770      	bx	lr
   1ad2a:	bf00      	nop

0001ad2c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1ad2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ad30:	4681      	mov	r9, r0
   1ad32:	b086      	sub	sp, #24

	if (esf != NULL) {
   1ad34:	460c      	mov	r4, r1
   1ad36:	2900      	cmp	r1, #0
   1ad38:	d075      	beq.n	1ae26 <z_arm_fatal_error+0xfa>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   1ad3a:	2301      	movs	r3, #1
   1ad3c:	f04f 0000 	mov.w	r0, #0
   1ad40:	4d3c      	ldr	r5, [pc, #240]	; (1ae34 <z_arm_fatal_error+0x108>)
   1ad42:	f363 0007 	bfi	r0, r3, #0, #8
   1ad46:	4b3c      	ldr	r3, [pc, #240]	; (1ae38 <z_arm_fatal_error+0x10c>)
   1ad48:	4627      	mov	r7, r4
   1ad4a:	1aed      	subs	r5, r5, r3
   1ad4c:	688b      	ldr	r3, [r1, #8]
   1ad4e:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   1ad52:	9300      	str	r3, [sp, #0]
   1ad54:	e9d1 2300 	ldrd	r2, r3, [r1]
   1ad58:	f365 108f 	bfi	r0, r5, #6, #10
   1ad5c:	4937      	ldr	r1, [pc, #220]	; (1ae3c <z_arm_fatal_error+0x110>)
   1ad5e:	f018 ff40 	bl	33be2 <log_string_sync>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   1ad62:	2301      	movs	r3, #1
   1ad64:	f04f 0000 	mov.w	r0, #0
   1ad68:	f363 0007 	bfi	r0, r3, #0, #8
   1ad6c:	6963      	ldr	r3, [r4, #20]
   1ad6e:	f365 108f 	bfi	r0, r5, #6, #10
   1ad72:	9300      	str	r3, [sp, #0]
   1ad74:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   1ad78:	4931      	ldr	r1, [pc, #196]	; (1ae40 <z_arm_fatal_error+0x114>)
   1ad7a:	f018 ff32 	bl	33be2 <log_string_sync>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   1ad7e:	2301      	movs	r3, #1
   1ad80:	f04f 0000 	mov.w	r0, #0
   1ad84:	f363 0007 	bfi	r0, r3, #0, #8
   1ad88:	f365 108f 	bfi	r0, r5, #6, #10
   1ad8c:	69e2      	ldr	r2, [r4, #28]
   1ad8e:	492d      	ldr	r1, [pc, #180]	; (1ae44 <z_arm_fatal_error+0x118>)
   1ad90:	f018 ff27 	bl	33be2 <log_string_sync>
	for (int i = 0; i < 16; i += 4) {
   1ad94:	2600      	movs	r6, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   1ad96:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 1ae50 <z_arm_fatal_error+0x124>
   1ad9a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   1ad9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   1ada2:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   1ada6:	f043 0301 	orr.w	r3, r3, #1
   1adaa:	f363 0807 	bfi	r8, r3, #0, #8
   1adae:	1cf3      	adds	r3, r6, #3
   1adb0:	ed97 7a08 	vldr	s14, [r7, #32]
   1adb4:	9304      	str	r3, [sp, #16]
   1adb6:	edcd 7a05 	vstr	s15, [sp, #20]
   1adba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
   1adbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   1adc2:	1cb3      	adds	r3, r6, #2
   1adc4:	9302      	str	r3, [sp, #8]
   1adc6:	edcd 7a03 	vstr	s15, [sp, #12]
   1adca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
   1adce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   1add2:	edcd 7a01 	vstr	s15, [sp, #4]
   1add6:	eefc 7ac7 	vcvt.u32.f32	s15, s14
   1adda:	1c73      	adds	r3, r6, #1
   1addc:	f365 188f 	bfi	r8, r5, #6, #10
   1ade0:	9300      	str	r3, [sp, #0]
   1ade2:	4632      	mov	r2, r6
   1ade4:	ee17 3a90 	vmov	r3, s15
   1ade8:	4651      	mov	r1, sl
   1adea:	4640      	mov	r0, r8
	for (int i = 0; i < 16; i += 4) {
   1adec:	3604      	adds	r6, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   1adee:	f018 fef8 	bl	33be2 <log_string_sync>
	for (int i = 0; i < 16; i += 4) {
   1adf2:	2e10      	cmp	r6, #16
   1adf4:	f107 0710 	add.w	r7, r7, #16
   1adf8:	d1cf      	bne.n	1ad9a <z_arm_fatal_error+0x6e>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
   1adfa:	2301      	movs	r3, #1
   1adfc:	f04f 0000 	mov.w	r0, #0
   1ae00:	f363 0007 	bfi	r0, r3, #0, #8
   1ae04:	f365 108f 	bfi	r0, r5, #6, #10
   1ae08:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1ae0a:	490f      	ldr	r1, [pc, #60]	; (1ae48 <z_arm_fatal_error+0x11c>)
   1ae0c:	f018 fee9 	bl	33be2 <log_string_sync>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   1ae10:	f04f 0000 	mov.w	r0, #0
   1ae14:	2301      	movs	r3, #1
   1ae16:	f363 0007 	bfi	r0, r3, #0, #8
   1ae1a:	f365 108f 	bfi	r0, r5, #6, #10
   1ae1e:	69a2      	ldr	r2, [r4, #24]
   1ae20:	490a      	ldr	r1, [pc, #40]	; (1ae4c <z_arm_fatal_error+0x120>)
   1ae22:	f018 fede 	bl	33be2 <log_string_sync>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1ae26:	4621      	mov	r1, r4
   1ae28:	4648      	mov	r0, r9
}
   1ae2a:	b006      	add	sp, #24
   1ae2c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_fatal_error(reason, esf);
   1ae30:	f010 bd10 	b.w	2b854 <z_fatal_error>
   1ae34:	00039fd8 	.word	0x00039fd8
   1ae38:	00039f48 	.word	0x00039f48
   1ae3c:	0003cffa 	.word	0x0003cffa
   1ae40:	0003d029 	.word	0x0003d029
   1ae44:	0003d058 	.word	0x0003d058
   1ae48:	0003d0aa 	.word	0x0003d0aa
   1ae4c:	0003d0b9 	.word	0x0003d0b9
   1ae50:	0003d067 	.word	0x0003d067

0001ae54 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   1ae54:	bf30      	wfi
    b z_SysNmiOnReset
   1ae56:	f7ff bffd 	b.w	1ae54 <z_SysNmiOnReset>
   1ae5a:	bf00      	nop

0001ae5c <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1ae5c:	4a14      	ldr	r2, [pc, #80]	; (1aeb0 <z_arm_prep_c+0x54>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   1ae5e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1ae60:	4b14      	ldr	r3, [pc, #80]	; (1aeb4 <z_arm_prep_c+0x58>)
   1ae62:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1ae66:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1ae68:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1ae6c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   1ae70:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   1ae74:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   1ae78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   1ae7c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   1ae80:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   1ae84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   1ae88:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   1ae8c:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
   1ae90:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1ae94:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   1ae98:	2300      	movs	r3, #0
   1ae9a:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   1ae9e:	f010 fd7b 	bl	2b998 <z_bss_zero>
	z_data_copy();
   1aea2:	f010 fd83 	bl	2b9ac <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   1aea6:	f000 fb49 	bl	1b53c <z_arm_interrupt_init>
	z_cstart();
   1aeaa:	f010 fdbd 	bl	2ba28 <z_cstart>
   1aeae:	bf00      	nop
   1aeb0:	0000c000 	.word	0x0000c000
   1aeb4:	e000ed00 	.word	0xe000ed00

0001aeb8 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   1aeb8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   1aeba:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   1aebc:	4a0b      	ldr	r2, [pc, #44]	; (1aeec <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   1aebe:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   1aec0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   1aec2:	bf1e      	ittt	ne
	movne	r1, #0
   1aec4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   1aec6:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
   1aec8:	f01d fe0f 	blne	38aea <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   1aecc:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   1aece:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1aed2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1aed6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   1aeda:	4905      	ldr	r1, [pc, #20]	; (1aef0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   1aedc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   1aede:	c909      	ldmia	r1!, {r0, r3}
#ifdef CONFIG_EXECUTION_BENCHMARKING
	push {r0, r3}	/* Save r0 and r3 into stack */
	bl read_timer_end_of_isr
	pop {r0, r3}	/* Restore r0 and r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
   1aee0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1aee2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   1aee6:	4903      	ldr	r1, [pc, #12]	; (1aef4 <_isr_wrapper+0x3c>)
	bx r1
   1aee8:	4708      	bx	r1
   1aeea:	0000      	.short	0x0000
	ldr r2, =_kernel
   1aeec:	200274dc 	.word	0x200274dc
	ldr r1, =_sw_isr_table
   1aef0:	00039d34 	.word	0x00039d34
	ldr r1, =z_arm_int_exit
   1aef4:	0001b4fd 	.word	0x0001b4fd

0001aef8 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   1aef8:	f018 fe64 	bl	33bc4 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1aefc:	2020      	movs	r0, #32
    msr BASEPRI, r0
   1aefe:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   1af02:	4808      	ldr	r0, [pc, #32]	; (1af24 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
   1af04:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   1af08:	1840      	adds	r0, r0, r1
    msr PSP, r0
   1af0a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   1af0e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   1af12:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   1af14:	4308      	orrs	r0, r1
    msr CONTROL, r0
   1af16:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   1af1a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   1af1e:	f7ff ff9d 	bl	1ae5c <z_arm_prep_c>
   1af22:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   1af24:	200349d8 	.word	0x200349d8

0001af28 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   1af28:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   1af2c:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
   1af30:	4672      	mov	r2, lr

	push {r0, lr}
   1af32:	b501      	push	{r0, lr}

	bl z_arm_fault
   1af34:	f000 f9ce 	bl	1b2d4 <z_arm_fault>

	pop {r0, pc}
   1af38:	bd01      	pop	{r0, pc}
   1af3a:	bf00      	nop

0001af3c <mem_manage_fault.isra.2>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   1af3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			      bool *recoverable)
{
	u32_t reason = K_ERR_CPU_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
   1af3e:	2301      	movs	r3, #1
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   1af40:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
   1af42:	f04f 0000 	mov.w	r0, #0
   1af46:	4c40      	ldr	r4, [pc, #256]	; (1b048 <mem_manage_fault.isra.2+0x10c>)
   1af48:	f363 0007 	bfi	r0, r3, #0, #8
   1af4c:	4b3f      	ldr	r3, [pc, #252]	; (1b04c <mem_manage_fault.isra.2+0x110>)
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   1af4e:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   1af50:	1ae4      	subs	r4, r4, r3
   1af52:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   1af56:	493e      	ldr	r1, [pc, #248]	; (1b050 <mem_manage_fault.isra.2+0x114>)
   1af58:	f364 108f 	bfi	r0, r4, #6, #10
   1af5c:	f018 fe41 	bl	33be2 <log_string_sync>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1af60:	4b3c      	ldr	r3, [pc, #240]	; (1b054 <mem_manage_fault.isra.2+0x118>)
   1af62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1af64:	06d9      	lsls	r1, r3, #27
   1af66:	d509      	bpl.n	1af7c <mem_manage_fault.isra.2+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
   1af68:	f04f 0000 	mov.w	r0, #0
   1af6c:	2301      	movs	r3, #1
   1af6e:	f363 0007 	bfi	r0, r3, #0, #8
   1af72:	f364 108f 	bfi	r0, r4, #6, #10
   1af76:	4938      	ldr	r1, [pc, #224]	; (1b058 <mem_manage_fault.isra.2+0x11c>)
   1af78:	f018 fe33 	bl	33be2 <log_string_sync>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   1af7c:	4b35      	ldr	r3, [pc, #212]	; (1b054 <mem_manage_fault.isra.2+0x118>)
   1af7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1af80:	071a      	lsls	r2, r3, #28
   1af82:	d509      	bpl.n	1af98 <mem_manage_fault.isra.2+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   1af84:	f04f 0000 	mov.w	r0, #0
   1af88:	2301      	movs	r3, #1
   1af8a:	f363 0007 	bfi	r0, r3, #0, #8
   1af8e:	f364 108f 	bfi	r0, r4, #6, #10
   1af92:	4932      	ldr	r1, [pc, #200]	; (1b05c <mem_manage_fault.isra.2+0x120>)
   1af94:	f018 fe25 	bl	33be2 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   1af98:	4d2e      	ldr	r5, [pc, #184]	; (1b054 <mem_manage_fault.isra.2+0x118>)
   1af9a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1af9c:	079b      	lsls	r3, r3, #30
   1af9e:	d51c      	bpl.n	1afda <mem_manage_fault.isra.2+0x9e>
		PR_FAULT_INFO("  Data Access Violation");
   1afa0:	2301      	movs	r3, #1
   1afa2:	f04f 0000 	mov.w	r0, #0
   1afa6:	f363 0007 	bfi	r0, r3, #0, #8
   1afaa:	f364 108f 	bfi	r0, r4, #6, #10
   1afae:	492c      	ldr	r1, [pc, #176]	; (1b060 <mem_manage_fault.isra.2+0x124>)
   1afb0:	f018 fe17 	bl	33be2 <log_string_sync>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
   1afb4:	6b6a      	ldr	r2, [r5, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   1afb6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1afb8:	0618      	lsls	r0, r3, #24
   1afba:	d50e      	bpl.n	1afda <mem_manage_fault.isra.2+0x9e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   1afbc:	f04f 0000 	mov.w	r0, #0
   1afc0:	2301      	movs	r3, #1
   1afc2:	f363 0007 	bfi	r0, r3, #0, #8
   1afc6:	f364 108f 	bfi	r0, r4, #6, #10
   1afca:	4926      	ldr	r1, [pc, #152]	; (1b064 <mem_manage_fault.isra.2+0x128>)
   1afcc:	f018 fe09 	bl	33be2 <log_string_sync>
			if (from_hard_fault) {
   1afd0:	b11f      	cbz	r7, 1afda <mem_manage_fault.isra.2+0x9e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   1afd2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1afd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1afd8:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   1afda:	4b1e      	ldr	r3, [pc, #120]	; (1b054 <mem_manage_fault.isra.2+0x118>)
   1afdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1afde:	07d9      	lsls	r1, r3, #31
   1afe0:	d509      	bpl.n	1aff6 <mem_manage_fault.isra.2+0xba>
		PR_FAULT_INFO("  Instruction Access Violation");
   1afe2:	f04f 0000 	mov.w	r0, #0
   1afe6:	2301      	movs	r3, #1
   1afe8:	f363 0007 	bfi	r0, r3, #0, #8
   1afec:	f364 108f 	bfi	r0, r4, #6, #10
   1aff0:	491d      	ldr	r1, [pc, #116]	; (1b068 <mem_manage_fault.isra.2+0x12c>)
   1aff2:	f018 fdf6 	bl	33be2 <log_string_sync>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1aff6:	4b17      	ldr	r3, [pc, #92]	; (1b054 <mem_manage_fault.isra.2+0x118>)
   1aff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1affa:	069a      	lsls	r2, r3, #26
   1affc:	d509      	bpl.n	1b012 <mem_manage_fault.isra.2+0xd6>
		PR_FAULT_INFO(
   1affe:	f04f 0000 	mov.w	r0, #0
   1b002:	2301      	movs	r3, #1
   1b004:	f363 0007 	bfi	r0, r3, #0, #8
   1b008:	f364 108f 	bfi	r0, r4, #6, #10
   1b00c:	4917      	ldr	r1, [pc, #92]	; (1b06c <mem_manage_fault.isra.2+0x130>)
   1b00e:	f018 fde8 	bl	33be2 <log_string_sync>
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
   1b012:	4b10      	ldr	r3, [pc, #64]	; (1b054 <mem_manage_fault.isra.2+0x118>)
   1b014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b016:	06db      	lsls	r3, r3, #27
   1b018:	d50e      	bpl.n	1b038 <mem_manage_fault.isra.2+0xfc>
					"Stacking error not a stack fail\n");
			}
		}
#else
	(void)mmfar;
	__ASSERT(0,
   1b01a:	4915      	ldr	r1, [pc, #84]	; (1b070 <mem_manage_fault.isra.2+0x134>)
   1b01c:	f240 1337 	movw	r3, #311	; 0x137
   1b020:	4a14      	ldr	r2, [pc, #80]	; (1b074 <mem_manage_fault.isra.2+0x138>)
   1b022:	4815      	ldr	r0, [pc, #84]	; (1b078 <mem_manage_fault.isra.2+0x13c>)
   1b024:	f018 fac5 	bl	335b2 <printk>
   1b028:	4814      	ldr	r0, [pc, #80]	; (1b07c <mem_manage_fault.isra.2+0x140>)
   1b02a:	f018 fac2 	bl	335b2 <printk>
   1b02e:	f240 1137 	movw	r1, #311	; 0x137
   1b032:	4810      	ldr	r0, [pc, #64]	; (1b074 <mem_manage_fault.isra.2+0x138>)
   1b034:	f018 fdbe 	bl	33bb4 <assert_post_action>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
   1b038:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   1b03a:	4a06      	ldr	r2, [pc, #24]	; (1b054 <mem_manage_fault.isra.2+0x118>)
   1b03c:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1b03e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   1b042:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   1b044:	7030      	strb	r0, [r6, #0]

	return reason;
}
   1b046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b048:	00039fd8 	.word	0x00039fd8
   1b04c:	00039f48 	.word	0x00039f48
   1b050:	0003d16f 	.word	0x0003d16f
   1b054:	e000ed00 	.word	0xe000ed00
   1b058:	0003d185 	.word	0x0003d185
   1b05c:	0003d1b8 	.word	0x0003d1b8
   1b060:	0003d1cb 	.word	0x0003d1cb
   1b064:	0003d1e3 	.word	0x0003d1e3
   1b068:	0003d1f9 	.word	0x0003d1f9
   1b06c:	0003d218 	.word	0x0003d218
   1b070:	0003fd2f 	.word	0x0003fd2f
   1b074:	0003d247 	.word	0x0003d247
   1b078:	0003b773 	.word	0x0003b773
   1b07c:	0003d281 	.word	0x0003d281

0001b080 <bus_fault.isra.3>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   1b080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
   1b082:	2301      	movs	r3, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   1b084:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
   1b086:	f04f 0000 	mov.w	r0, #0
   1b08a:	4c3d      	ldr	r4, [pc, #244]	; (1b180 <bus_fault.isra.3+0x100>)
   1b08c:	f363 0007 	bfi	r0, r3, #0, #8
   1b090:	4b3c      	ldr	r3, [pc, #240]	; (1b184 <bus_fault.isra.3+0x104>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   1b092:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   1b094:	1ae4      	subs	r4, r4, r3
   1b096:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   1b09a:	493b      	ldr	r1, [pc, #236]	; (1b188 <bus_fault.isra.3+0x108>)
   1b09c:	f364 108f 	bfi	r0, r4, #6, #10
   1b0a0:	f018 fd9f 	bl	33be2 <log_string_sync>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   1b0a4:	4b39      	ldr	r3, [pc, #228]	; (1b18c <bus_fault.isra.3+0x10c>)
   1b0a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b0a8:	04d9      	lsls	r1, r3, #19
   1b0aa:	d509      	bpl.n	1b0c0 <bus_fault.isra.3+0x40>
		PR_FAULT_INFO("  Stacking error");
   1b0ac:	f04f 0000 	mov.w	r0, #0
   1b0b0:	2301      	movs	r3, #1
   1b0b2:	f363 0007 	bfi	r0, r3, #0, #8
   1b0b6:	f364 108f 	bfi	r0, r4, #6, #10
   1b0ba:	4935      	ldr	r1, [pc, #212]	; (1b190 <bus_fault.isra.3+0x110>)
   1b0bc:	f018 fd91 	bl	33be2 <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   1b0c0:	4b32      	ldr	r3, [pc, #200]	; (1b18c <bus_fault.isra.3+0x10c>)
   1b0c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b0c4:	051a      	lsls	r2, r3, #20
   1b0c6:	d509      	bpl.n	1b0dc <bus_fault.isra.3+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   1b0c8:	f04f 0000 	mov.w	r0, #0
   1b0cc:	2301      	movs	r3, #1
   1b0ce:	f363 0007 	bfi	r0, r3, #0, #8
   1b0d2:	f364 108f 	bfi	r0, r4, #6, #10
   1b0d6:	492f      	ldr	r1, [pc, #188]	; (1b194 <bus_fault.isra.3+0x114>)
   1b0d8:	f018 fd83 	bl	33be2 <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   1b0dc:	4d2b      	ldr	r5, [pc, #172]	; (1b18c <bus_fault.isra.3+0x10c>)
   1b0de:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1b0e0:	059b      	lsls	r3, r3, #22
   1b0e2:	d51c      	bpl.n	1b11e <bus_fault.isra.3+0x9e>
		PR_FAULT_INFO("  Precise data bus error");
   1b0e4:	2301      	movs	r3, #1
   1b0e6:	f04f 0000 	mov.w	r0, #0
   1b0ea:	f363 0007 	bfi	r0, r3, #0, #8
   1b0ee:	f364 108f 	bfi	r0, r4, #6, #10
   1b0f2:	4929      	ldr	r1, [pc, #164]	; (1b198 <bus_fault.isra.3+0x118>)
   1b0f4:	f018 fd75 	bl	33be2 <log_string_sync>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   1b0f8:	6baa      	ldr	r2, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   1b0fa:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1b0fc:	0418      	lsls	r0, r3, #16
   1b0fe:	d50e      	bpl.n	1b11e <bus_fault.isra.3+0x9e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   1b100:	f04f 0000 	mov.w	r0, #0
   1b104:	2301      	movs	r3, #1
   1b106:	f363 0007 	bfi	r0, r3, #0, #8
   1b10a:	f364 108f 	bfi	r0, r4, #6, #10
   1b10e:	4923      	ldr	r1, [pc, #140]	; (1b19c <bus_fault.isra.3+0x11c>)
   1b110:	f018 fd67 	bl	33be2 <log_string_sync>
			if (from_hard_fault) {
   1b114:	b11f      	cbz	r7, 1b11e <bus_fault.isra.3+0x9e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   1b116:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1b118:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   1b11c:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   1b11e:	4b1b      	ldr	r3, [pc, #108]	; (1b18c <bus_fault.isra.3+0x10c>)
   1b120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b122:	0559      	lsls	r1, r3, #21
   1b124:	d509      	bpl.n	1b13a <bus_fault.isra.3+0xba>
		PR_FAULT_INFO("  Imprecise data bus error");
   1b126:	f04f 0000 	mov.w	r0, #0
   1b12a:	2301      	movs	r3, #1
   1b12c:	f363 0007 	bfi	r0, r3, #0, #8
   1b130:	f364 108f 	bfi	r0, r4, #6, #10
   1b134:	491a      	ldr	r1, [pc, #104]	; (1b1a0 <bus_fault.isra.3+0x120>)
   1b136:	f018 fd54 	bl	33be2 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   1b13a:	4b14      	ldr	r3, [pc, #80]	; (1b18c <bus_fault.isra.3+0x10c>)
   1b13c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1b13e:	05d2      	lsls	r2, r2, #23
   1b140:	d511      	bpl.n	1b166 <bus_fault.isra.3+0xe6>
		PR_FAULT_INFO("  Instruction bus error");
   1b142:	f04f 0000 	mov.w	r0, #0
   1b146:	2301      	movs	r3, #1
   1b148:	4916      	ldr	r1, [pc, #88]	; (1b1a4 <bus_fault.isra.3+0x124>)
   1b14a:	f363 0007 	bfi	r0, r3, #0, #8
   1b14e:	f364 108f 	bfi	r0, r4, #6, #10
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1b152:	f018 fd46 	bl	33be2 <log_string_sync>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
   1b156:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   1b158:	4a0c      	ldr	r2, [pc, #48]	; (1b18c <bus_fault.isra.3+0x10c>)
   1b15a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1b15c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   1b160:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   1b162:	7030      	strb	r0, [r6, #0]

	return reason;
}
   1b164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   1b166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b168:	049b      	lsls	r3, r3, #18
   1b16a:	d5f4      	bpl.n	1b156 <bus_fault.isra.3+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1b16c:	f04f 0000 	mov.w	r0, #0
   1b170:	2301      	movs	r3, #1
   1b172:	f363 0007 	bfi	r0, r3, #0, #8
   1b176:	f364 108f 	bfi	r0, r4, #6, #10
   1b17a:	490b      	ldr	r1, [pc, #44]	; (1b1a8 <bus_fault.isra.3+0x128>)
   1b17c:	e7e9      	b.n	1b152 <bus_fault.isra.3+0xd2>
   1b17e:	bf00      	nop
   1b180:	00039fd8 	.word	0x00039fd8
   1b184:	00039f48 	.word	0x00039f48
   1b188:	0003d0e7 	.word	0x0003d0e7
   1b18c:	e000ed00 	.word	0xe000ed00
   1b190:	0003d0fd 	.word	0x0003d0fd
   1b194:	0003d1b8 	.word	0x0003d1b8
   1b198:	0003d10e 	.word	0x0003d10e
   1b19c:	0003d127 	.word	0x0003d127
   1b1a0:	0003d13c 	.word	0x0003d13c
   1b1a4:	0003d157 	.word	0x0003d157
   1b1a8:	0003d218 	.word	0x0003d218

0001b1ac <usage_fault.isra.4>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
   1b1ac:	b538      	push	{r3, r4, r5, lr}
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   1b1ae:	f04f 0000 	mov.w	r0, #0
   1b1b2:	2301      	movs	r3, #1
   1b1b4:	4c3c      	ldr	r4, [pc, #240]	; (1b2a8 <usage_fault.isra.4+0xfc>)
   1b1b6:	f363 0007 	bfi	r0, r3, #0, #8
   1b1ba:	4b3c      	ldr	r3, [pc, #240]	; (1b2ac <usage_fault.isra.4+0x100>)
   1b1bc:	493c      	ldr	r1, [pc, #240]	; (1b2b0 <usage_fault.isra.4+0x104>)
   1b1be:	1ae4      	subs	r4, r4, r3
   1b1c0:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   1b1c4:	f364 108f 	bfi	r0, r4, #6, #10
   1b1c8:	f018 fd0b 	bl	33be2 <log_string_sync>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1b1cc:	4b39      	ldr	r3, [pc, #228]	; (1b2b4 <usage_fault.isra.4+0x108>)
   1b1ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b1d0:	019b      	lsls	r3, r3, #6
   1b1d2:	d509      	bpl.n	1b1e8 <usage_fault.isra.4+0x3c>
		PR_FAULT_INFO("  Division by zero");
   1b1d4:	f04f 0000 	mov.w	r0, #0
   1b1d8:	2301      	movs	r3, #1
   1b1da:	f363 0007 	bfi	r0, r3, #0, #8
   1b1de:	f364 108f 	bfi	r0, r4, #6, #10
   1b1e2:	4935      	ldr	r1, [pc, #212]	; (1b2b8 <usage_fault.isra.4+0x10c>)
   1b1e4:	f018 fcfd 	bl	33be2 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   1b1e8:	4b32      	ldr	r3, [pc, #200]	; (1b2b4 <usage_fault.isra.4+0x108>)
   1b1ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b1ec:	01dd      	lsls	r5, r3, #7
   1b1ee:	d509      	bpl.n	1b204 <usage_fault.isra.4+0x58>
		PR_FAULT_INFO("  Unaligned memory access");
   1b1f0:	f04f 0000 	mov.w	r0, #0
   1b1f4:	2301      	movs	r3, #1
   1b1f6:	f363 0007 	bfi	r0, r3, #0, #8
   1b1fa:	f364 108f 	bfi	r0, r4, #6, #10
   1b1fe:	492f      	ldr	r1, [pc, #188]	; (1b2bc <usage_fault.isra.4+0x110>)
   1b200:	f018 fcef 	bl	33be2 <log_string_sync>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   1b204:	4b2b      	ldr	r3, [pc, #172]	; (1b2b4 <usage_fault.isra.4+0x108>)
   1b206:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   1b208:	f415 1580 	ands.w	r5, r5, #1048576	; 0x100000
   1b20c:	d00a      	beq.n	1b224 <usage_fault.isra.4+0x78>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   1b20e:	2301      	movs	r3, #1
   1b210:	f04f 0000 	mov.w	r0, #0
   1b214:	f363 0007 	bfi	r0, r3, #0, #8
   1b218:	f364 108f 	bfi	r0, r4, #6, #10
   1b21c:	4928      	ldr	r1, [pc, #160]	; (1b2c0 <usage_fault.isra.4+0x114>)
   1b21e:	f018 fce0 	bl	33be2 <log_string_sync>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   1b222:	2502      	movs	r5, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   1b224:	4b23      	ldr	r3, [pc, #140]	; (1b2b4 <usage_fault.isra.4+0x108>)
   1b226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b228:	0318      	lsls	r0, r3, #12
   1b22a:	d509      	bpl.n	1b240 <usage_fault.isra.4+0x94>
		PR_FAULT_INFO("  No coprocessor instructions");
   1b22c:	f04f 0000 	mov.w	r0, #0
   1b230:	2301      	movs	r3, #1
   1b232:	f363 0007 	bfi	r0, r3, #0, #8
   1b236:	f364 108f 	bfi	r0, r4, #6, #10
   1b23a:	4922      	ldr	r1, [pc, #136]	; (1b2c4 <usage_fault.isra.4+0x118>)
   1b23c:	f018 fcd1 	bl	33be2 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   1b240:	4b1c      	ldr	r3, [pc, #112]	; (1b2b4 <usage_fault.isra.4+0x108>)
   1b242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b244:	0359      	lsls	r1, r3, #13
   1b246:	d509      	bpl.n	1b25c <usage_fault.isra.4+0xb0>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   1b248:	f04f 0000 	mov.w	r0, #0
   1b24c:	2301      	movs	r3, #1
   1b24e:	f363 0007 	bfi	r0, r3, #0, #8
   1b252:	f364 108f 	bfi	r0, r4, #6, #10
   1b256:	491c      	ldr	r1, [pc, #112]	; (1b2c8 <usage_fault.isra.4+0x11c>)
   1b258:	f018 fcc3 	bl	33be2 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   1b25c:	4b15      	ldr	r3, [pc, #84]	; (1b2b4 <usage_fault.isra.4+0x108>)
   1b25e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b260:	039a      	lsls	r2, r3, #14
   1b262:	d509      	bpl.n	1b278 <usage_fault.isra.4+0xcc>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   1b264:	f04f 0000 	mov.w	r0, #0
   1b268:	2301      	movs	r3, #1
   1b26a:	f363 0007 	bfi	r0, r3, #0, #8
   1b26e:	f364 108f 	bfi	r0, r4, #6, #10
   1b272:	4916      	ldr	r1, [pc, #88]	; (1b2cc <usage_fault.isra.4+0x120>)
   1b274:	f018 fcb5 	bl	33be2 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   1b278:	4b0e      	ldr	r3, [pc, #56]	; (1b2b4 <usage_fault.isra.4+0x108>)
   1b27a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b27c:	03db      	lsls	r3, r3, #15
   1b27e:	d509      	bpl.n	1b294 <usage_fault.isra.4+0xe8>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   1b280:	f04f 0000 	mov.w	r0, #0
   1b284:	2301      	movs	r3, #1
   1b286:	f363 0007 	bfi	r0, r3, #0, #8
   1b28a:	f364 108f 	bfi	r0, r4, #6, #10
   1b28e:	4910      	ldr	r1, [pc, #64]	; (1b2d0 <usage_fault.isra.4+0x124>)
   1b290:	f018 fca7 	bl	33be2 <log_string_sync>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   1b294:	4a07      	ldr	r2, [pc, #28]	; (1b2b4 <usage_fault.isra.4+0x108>)

	return reason;
}
   1b296:	4628      	mov	r0, r5
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   1b298:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1b29a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   1b29e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   1b2a2:	6293      	str	r3, [r2, #40]	; 0x28
}
   1b2a4:	bd38      	pop	{r3, r4, r5, pc}
   1b2a6:	bf00      	nop
   1b2a8:	00039fd8 	.word	0x00039fd8
   1b2ac:	00039f48 	.word	0x00039f48
   1b2b0:	0003d2bb 	.word	0x0003d2bb
   1b2b4:	e000ed00 	.word	0xe000ed00
   1b2b8:	0003d2d3 	.word	0x0003d2d3
   1b2bc:	0003d2e6 	.word	0x0003d2e6
   1b2c0:	0003d300 	.word	0x0003d300
   1b2c4:	0003d32a 	.word	0x0003d32a
   1b2c8:	0003d348 	.word	0x0003d348
   1b2cc:	0003d36d 	.word	0x0003d36d
   1b2d0:	0003d387 	.word	0x0003d387

0001b2d4 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
   1b2d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1b2d8:	4b70      	ldr	r3, [pc, #448]	; (1b49c <z_arm_fault+0x1c8>)
{
   1b2da:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1b2dc:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   1b2e0:	4606      	mov	r6, r0
   1b2e2:	4689      	mov	r9, r1
   1b2e4:	4614      	mov	r4, r2
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1b2e6:	f3c8 0708 	ubfx	r7, r8, #0, #9
   1b2ea:	2500      	movs	r5, #0
   1b2ec:	f385 8811 	msr	BASEPRI, r5
   1b2f0:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   1b2f4:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   1b2f8:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   1b2fc:	d11b      	bne.n	1b336 <z_arm_fault+0x62>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   1b2fe:	07d0      	lsls	r0, r2, #31
   1b300:	d419      	bmi.n	1b336 <z_arm_fault+0x62>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   1b302:	0651      	lsls	r1, r2, #25
   1b304:	d403      	bmi.n	1b30e <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   1b306:	0722      	lsls	r2, r4, #28
   1b308:	d412      	bmi.n	1b330 <z_arm_fault+0x5c>
			*nested_exc = true;
   1b30a:	2501      	movs	r5, #1
   1b30c:	e012      	b.n	1b334 <z_arm_fault+0x60>
		PR_FAULT_INFO("Exception occurred in Secure State");
   1b30e:	2301      	movs	r3, #1
   1b310:	f04f 0000 	mov.w	r0, #0
	return ((u8_t *)data - (u8_t *)__log_const_start)/
   1b314:	4a62      	ldr	r2, [pc, #392]	; (1b4a0 <z_arm_fault+0x1cc>)
   1b316:	f363 0007 	bfi	r0, r3, #0, #8
   1b31a:	4b62      	ldr	r3, [pc, #392]	; (1b4a4 <z_arm_fault+0x1d0>)
   1b31c:	4962      	ldr	r1, [pc, #392]	; (1b4a8 <z_arm_fault+0x1d4>)
   1b31e:	1a9b      	subs	r3, r3, r2
   1b320:	08db      	lsrs	r3, r3, #3
   1b322:	f363 108f 	bfi	r0, r3, #6, #10
   1b326:	f018 fc5c 	bl	33be2 <log_string_sync>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   1b32a:	f014 0504 	ands.w	r5, r4, #4
   1b32e:	d001      	beq.n	1b334 <z_arm_fault+0x60>
			ptr_esf = (z_arch_esf_t *)psp;
   1b330:	464e      	mov	r6, r9
	*nested_exc = false;
   1b332:	2500      	movs	r5, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   1b334:	b97e      	cbnz	r6, 1b356 <z_arm_fault+0x82>
   1b336:	f240 33b2 	movw	r3, #946	; 0x3b2
   1b33a:	4a5c      	ldr	r2, [pc, #368]	; (1b4ac <z_arm_fault+0x1d8>)
   1b33c:	495c      	ldr	r1, [pc, #368]	; (1b4b0 <z_arm_fault+0x1dc>)
   1b33e:	485d      	ldr	r0, [pc, #372]	; (1b4b4 <z_arm_fault+0x1e0>)
   1b340:	f018 f937 	bl	335b2 <printk>
   1b344:	485c      	ldr	r0, [pc, #368]	; (1b4b8 <z_arm_fault+0x1e4>)
   1b346:	f018 f934 	bl	335b2 <printk>
   1b34a:	f240 31b2 	movw	r1, #946	; 0x3b2
   1b34e:	4857      	ldr	r0, [pc, #348]	; (1b4ac <z_arm_fault+0x1d8>)
   1b350:	f018 fc30 	bl	33bb4 <assert_post_action>
   1b354:	2600      	movs	r6, #0
	*recoverable = false;
   1b356:	2300      	movs	r3, #0
   1b358:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   1b35c:	1efb      	subs	r3, r7, #3
   1b35e:	2b09      	cmp	r3, #9
   1b360:	d87f      	bhi.n	1b462 <z_arm_fault+0x18e>
   1b362:	e8df f003 	tbb	[pc, r3]
   1b366:	6905      	.short	0x6905
   1b368:	7e7e4c6d 	.word	0x7e7e4c6d
   1b36c:	717e7e7e 	.word	0x717e7e7e
	PR_FAULT_INFO("***** HARD FAULT *****");
   1b370:	2301      	movs	r3, #1
   1b372:	f04f 0000 	mov.w	r0, #0
	*recoverable = false;
   1b376:	f04f 0800 	mov.w	r8, #0
	PR_FAULT_INFO("***** HARD FAULT *****");
   1b37a:	f363 0007 	bfi	r0, r3, #0, #8
   1b37e:	4f49      	ldr	r7, [pc, #292]	; (1b4a4 <z_arm_fault+0x1d0>)
   1b380:	4b47      	ldr	r3, [pc, #284]	; (1b4a0 <z_arm_fault+0x1cc>)
   1b382:	494e      	ldr	r1, [pc, #312]	; (1b4bc <z_arm_fault+0x1e8>)
   1b384:	1aff      	subs	r7, r7, r3
   1b386:	f3c7 07c9 	ubfx	r7, r7, #3, #10
   1b38a:	f367 108f 	bfi	r0, r7, #6, #10
   1b38e:	f018 fc28 	bl	33be2 <log_string_sync>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1b392:	4b42      	ldr	r3, [pc, #264]	; (1b49c <z_arm_fault+0x1c8>)
	*recoverable = false;
   1b394:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1b398:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   1b39a:	f014 0402 	ands.w	r4, r4, #2
   1b39e:	d00b      	beq.n	1b3b8 <z_arm_fault+0xe4>
		PR_EXC("  Bus fault on vector table read");
   1b3a0:	f04f 0000 	mov.w	r0, #0
   1b3a4:	2301      	movs	r3, #1
   1b3a6:	4946      	ldr	r1, [pc, #280]	; (1b4c0 <z_arm_fault+0x1ec>)
   1b3a8:	f363 0007 	bfi	r0, r3, #0, #8
   1b3ac:	f367 108f 	bfi	r0, r7, #6, #10
	PR_FAULT_INFO(
   1b3b0:	f018 fc17 	bl	33be2 <log_string_sync>
	u32_t reason = K_ERR_CPU_EXCEPTION;
   1b3b4:	2400      	movs	r4, #0
   1b3b6:	e025      	b.n	1b404 <z_arm_fault+0x130>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   1b3b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b3ba:	005b      	lsls	r3, r3, #1
   1b3bc:	d522      	bpl.n	1b404 <z_arm_fault+0x130>
		PR_EXC("  Fault escalation (see below)");
   1b3be:	2301      	movs	r3, #1
   1b3c0:	f04f 0000 	mov.w	r0, #0
   1b3c4:	f363 0007 	bfi	r0, r3, #0, #8
   1b3c8:	f367 108f 	bfi	r0, r7, #6, #10
   1b3cc:	493d      	ldr	r1, [pc, #244]	; (1b4c4 <z_arm_fault+0x1f0>)
   1b3ce:	f018 fc08 	bl	33be2 <log_string_sync>
		if (SCB_MMFSR != 0) {
   1b3d2:	4b3d      	ldr	r3, [pc, #244]	; (1b4c8 <z_arm_fault+0x1f4>)
   1b3d4:	781b      	ldrb	r3, [r3, #0]
   1b3d6:	b12b      	cbz	r3, 1b3e4 <z_arm_fault+0x110>
			reason = mem_manage_fault(esf, 1, recoverable);
   1b3d8:	2001      	movs	r0, #1
   1b3da:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   1b3de:	f7ff fdad 	bl	1af3c <mem_manage_fault.isra.2>
   1b3e2:	e00e      	b.n	1b402 <z_arm_fault+0x12e>
		} else if (SCB_BFSR != 0) {
   1b3e4:	4b39      	ldr	r3, [pc, #228]	; (1b4cc <z_arm_fault+0x1f8>)
   1b3e6:	781b      	ldrb	r3, [r3, #0]
   1b3e8:	b12b      	cbz	r3, 1b3f6 <z_arm_fault+0x122>
			reason = bus_fault(esf, 1, recoverable);
   1b3ea:	2001      	movs	r0, #1
   1b3ec:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   1b3f0:	f7ff fe46 	bl	1b080 <bus_fault.isra.3>
   1b3f4:	e005      	b.n	1b402 <z_arm_fault+0x12e>
		} else if (SCB_UFSR != 0) {
   1b3f6:	4b36      	ldr	r3, [pc, #216]	; (1b4d0 <z_arm_fault+0x1fc>)
   1b3f8:	881b      	ldrh	r3, [r3, #0]
   1b3fa:	b29b      	uxth	r3, r3
   1b3fc:	b113      	cbz	r3, 1b404 <z_arm_fault+0x130>
			reason = usage_fault(esf);
   1b3fe:	f7ff fed5 	bl	1b1ac <usage_fault.isra.4>
   1b402:	4604      	mov	r4, r0
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   1b404:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1b408:	b99b      	cbnz	r3, 1b432 <z_arm_fault+0x15e>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   1b40a:	2268      	movs	r2, #104	; 0x68
   1b40c:	4631      	mov	r1, r6
   1b40e:	a802      	add	r0, sp, #8
   1b410:	f01d fdd7 	bl	38fc2 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   1b414:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b416:	2d00      	cmp	r5, #0
   1b418:	d03a      	beq.n	1b490 <z_arm_fault+0x1bc>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   1b41a:	f3c3 0208 	ubfx	r2, r3, #0, #9
   1b41e:	b922      	cbnz	r2, 1b42a <z_arm_fault+0x156>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   1b420:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   1b424:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1b428:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   1b42a:	a902      	add	r1, sp, #8
   1b42c:	4620      	mov	r0, r4
   1b42e:	f7ff fc7d 	bl	1ad2c <z_arm_fatal_error>
}
   1b432:	b01d      	add	sp, #116	; 0x74
   1b434:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   1b438:	f10d 0107 	add.w	r1, sp, #7
   1b43c:	2000      	movs	r0, #0
   1b43e:	e7ce      	b.n	1b3de <z_arm_fault+0x10a>
		reason = bus_fault(esf, 0, recoverable);
   1b440:	f10d 0107 	add.w	r1, sp, #7
   1b444:	2000      	movs	r0, #0
   1b446:	e7d3      	b.n	1b3f0 <z_arm_fault+0x11c>
	PR_FAULT_INFO(
   1b448:	2301      	movs	r3, #1
   1b44a:	f04f 0000 	mov.w	r0, #0
   1b44e:	4a14      	ldr	r2, [pc, #80]	; (1b4a0 <z_arm_fault+0x1cc>)
   1b450:	f363 0007 	bfi	r0, r3, #0, #8
   1b454:	4b13      	ldr	r3, [pc, #76]	; (1b4a4 <z_arm_fault+0x1d0>)
   1b456:	491f      	ldr	r1, [pc, #124]	; (1b4d4 <z_arm_fault+0x200>)
   1b458:	1a9b      	subs	r3, r3, r2
   1b45a:	08db      	lsrs	r3, r3, #3
   1b45c:	f363 108f 	bfi	r0, r3, #6, #10
   1b460:	e7a6      	b.n	1b3b0 <z_arm_fault+0xdc>
	PR_FAULT_INFO("***** %s %d) *****",
   1b462:	2301      	movs	r3, #1
   1b464:	f04f 0000 	mov.w	r0, #0
   1b468:	4a0d      	ldr	r2, [pc, #52]	; (1b4a0 <z_arm_fault+0x1cc>)
   1b46a:	f363 0007 	bfi	r0, r3, #0, #8
   1b46e:	4b0d      	ldr	r3, [pc, #52]	; (1b4a4 <z_arm_fault+0x1d0>)
   1b470:	4919      	ldr	r1, [pc, #100]	; (1b4d8 <z_arm_fault+0x204>)
   1b472:	1a9b      	subs	r3, r3, r2
   1b474:	08db      	lsrs	r3, r3, #3
   1b476:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   1b47a:	f363 108f 	bfi	r0, r3, #6, #10
   1b47e:	4a17      	ldr	r2, [pc, #92]	; (1b4dc <z_arm_fault+0x208>)
   1b480:	f1a7 0310 	sub.w	r3, r7, #16
   1b484:	bf08      	it	eq
   1b486:	460a      	moveq	r2, r1
   1b488:	4915      	ldr	r1, [pc, #84]	; (1b4e0 <z_arm_fault+0x20c>)
   1b48a:	f018 fbaa 	bl	33be2 <log_string_sync>
   1b48e:	e791      	b.n	1b3b4 <z_arm_fault+0xe0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1b490:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   1b494:	f023 0301 	bic.w	r3, r3, #1
   1b498:	e7c6      	b.n	1b428 <z_arm_fault+0x154>
   1b49a:	bf00      	nop
   1b49c:	e000ed00 	.word	0xe000ed00
   1b4a0:	00039f48 	.word	0x00039f48
   1b4a4:	00039fd8 	.word	0x00039fd8
   1b4a8:	0003d3e0 	.word	0x0003d3e0
   1b4ac:	0003d247 	.word	0x0003d247
   1b4b0:	0003d403 	.word	0x0003d403
   1b4b4:	0003b773 	.word	0x0003b773
   1b4b8:	0003d416 	.word	0x0003d416
   1b4bc:	0003d454 	.word	0x0003d454
   1b4c0:	0003d46b 	.word	0x0003d46b
   1b4c4:	0003d48c 	.word	0x0003d48c
   1b4c8:	e000ed28 	.word	0xe000ed28
   1b4cc:	e000ed29 	.word	0xe000ed29
   1b4d0:	e000ed2a 	.word	0xe000ed2a
   1b4d4:	0003d4ab 	.word	0x0003d4ab
   1b4d8:	0003d3b2 	.word	0x0003d3b2
   1b4dc:	0003d3c7 	.word	0x0003d3c7
   1b4e0:	0003d4e1 	.word	0x0003d4e1

0001b4e4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1b4e4:	4b04      	ldr	r3, [pc, #16]	; (1b4f8 <z_arm_fault_init+0x14>)
   1b4e6:	695a      	ldr	r2, [r3, #20]
   1b4e8:	f042 0210 	orr.w	r2, r2, #16
   1b4ec:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   1b4ee:	695a      	ldr	r2, [r3, #20]
   1b4f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   1b4f4:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   1b4f6:	4770      	bx	lr
   1b4f8:	e000ed00 	.word	0xe000ed00

0001b4fc <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   1b4fc:	4b04      	ldr	r3, [pc, #16]	; (1b510 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   1b4fe:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   1b500:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
   1b502:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   1b504:	d003      	beq.n	1b50e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   1b506:	4903      	ldr	r1, [pc, #12]	; (1b514 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   1b508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   1b50c:	600a      	str	r2, [r1, #0]

0001b50e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   1b50e:	4770      	bx	lr
	ldr r3, =_kernel
   1b510:	200274dc 	.word	0x200274dc
	ldr r1, =_SCS_ICSR
   1b514:	e000ed04 	.word	0xe000ed04

0001b518 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   1b518:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1b51c:	4905      	ldr	r1, [pc, #20]	; (1b534 <sys_arch_reboot+0x1c>)
   1b51e:	4b06      	ldr	r3, [pc, #24]	; (1b538 <sys_arch_reboot+0x20>)
   1b520:	68ca      	ldr	r2, [r1, #12]
   1b522:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1b526:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1b528:	60cb      	str	r3, [r1, #12]
   1b52a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1b52e:	bf00      	nop
   1b530:	e7fd      	b.n	1b52e <sys_arch_reboot+0x16>
   1b532:	bf00      	nop
   1b534:	e000ed00 	.word	0xe000ed00
   1b538:	05fa0004 	.word	0x05fa0004

0001b53c <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   1b53c:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1b53e:	2120      	movs	r1, #32
   1b540:	4803      	ldr	r0, [pc, #12]	; (1b550 <z_arm_interrupt_init+0x14>)
   1b542:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   1b544:	3301      	adds	r3, #1
   1b546:	2b41      	cmp	r3, #65	; 0x41
   1b548:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   1b54c:	d1f9      	bne.n	1b542 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   1b54e:	4770      	bx	lr
   1b550:	e000e100 	.word	0xe000e100

0001b554 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
   1b554:	b538      	push	{r3, r4, r5, lr}
   1b556:	4604      	mov	r4, r0
	__asm__ volatile(
   1b558:	f04f 0320 	mov.w	r3, #32
   1b55c:	f3ef 8511 	mrs	r5, BASEPRI
   1b560:	f383 8811 	msr	BASEPRI, r3
   1b564:	f3bf 8f6f 	isb	sy
	unsigned int key;

	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   1b568:	7b03      	ldrb	r3, [r0, #12]
   1b56a:	07db      	lsls	r3, r3, #31
   1b56c:	d50c      	bpl.n	1b588 <z_impl_k_thread_abort+0x34>
   1b56e:	4912      	ldr	r1, [pc, #72]	; (1b5b8 <z_impl_k_thread_abort+0x64>)
   1b570:	2324      	movs	r3, #36	; 0x24
   1b572:	4a12      	ldr	r2, [pc, #72]	; (1b5bc <z_impl_k_thread_abort+0x68>)
   1b574:	4812      	ldr	r0, [pc, #72]	; (1b5c0 <z_impl_k_thread_abort+0x6c>)
   1b576:	f018 f81c 	bl	335b2 <printk>
   1b57a:	4812      	ldr	r0, [pc, #72]	; (1b5c4 <z_impl_k_thread_abort+0x70>)
   1b57c:	f018 f819 	bl	335b2 <printk>
   1b580:	2124      	movs	r1, #36	; 0x24
   1b582:	480e      	ldr	r0, [pc, #56]	; (1b5bc <z_impl_k_thread_abort+0x68>)
   1b584:	f018 fb16 	bl	33bb4 <assert_post_action>
		 "essential thread aborted");

	z_thread_single_abort(thread);
   1b588:	4620      	mov	r0, r4
   1b58a:	f012 f883 	bl	2d694 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
   1b58e:	4b0e      	ldr	r3, [pc, #56]	; (1b5c8 <z_impl_k_thread_abort+0x74>)
   1b590:	689b      	ldr	r3, [r3, #8]
   1b592:	42a3      	cmp	r3, r4
   1b594:	d10b      	bne.n	1b5ae <z_impl_k_thread_abort+0x5a>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
   1b596:	4b0d      	ldr	r3, [pc, #52]	; (1b5cc <z_impl_k_thread_abort+0x78>)
   1b598:	685a      	ldr	r2, [r3, #4]
   1b59a:	f3c2 0208 	ubfx	r2, r2, #0, #9
   1b59e:	b912      	cbnz	r2, 1b5a6 <z_impl_k_thread_abort+0x52>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
   1b5a0:	4628      	mov	r0, r5
   1b5a2:	f7ff fa99 	bl	1aad8 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1b5a6:	685a      	ldr	r2, [r3, #4]
   1b5a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   1b5ac:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
   1b5ae:	4628      	mov	r0, r5
}
   1b5b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
   1b5b4:	f01d bb7e 	b.w	38cb4 <z_reschedule_irqlock>
   1b5b8:	0003d535 	.word	0x0003d535
   1b5bc:	0003d4f4 	.word	0x0003d4f4
   1b5c0:	0003b773 	.word	0x0003b773
   1b5c4:	0003d563 	.word	0x0003d563
   1b5c8:	200274dc 	.word	0x200274dc
   1b5cc:	e000ed00 	.word	0xe000ed00

0001b5d0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   1b5d0:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   1b5d2:	4b0e      	ldr	r3, [pc, #56]	; (1b60c <z_arm_configure_static_mpu_regions+0x3c>)
{
   1b5d4:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
   1b5d6:	9302      	str	r3, [sp, #8]
   1b5d8:	4b0d      	ldr	r3, [pc, #52]	; (1b610 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   1b5da:	4c0e      	ldr	r4, [pc, #56]	; (1b614 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
   1b5dc:	9303      	str	r3, [sp, #12]
   1b5de:	4b0e      	ldr	r3, [pc, #56]	; (1b618 <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   1b5e0:	4a0e      	ldr	r2, [pc, #56]	; (1b61c <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
   1b5e2:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
   1b5e4:	ab02      	add	r3, sp, #8
   1b5e6:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   1b5e8:	a801      	add	r0, sp, #4
   1b5ea:	4623      	mov	r3, r4
   1b5ec:	2101      	movs	r1, #1
   1b5ee:	f000 f97d 	bl	1b8ec <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
   1b5f2:	2300      	movs	r3, #0
   1b5f4:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   1b5f6:	4b0a      	ldr	r3, [pc, #40]	; (1b620 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1b5f8:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   1b5fa:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1b5fc:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
   1b5fe:	9305      	str	r3, [sp, #20]
   1b600:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1b602:	f000 f999 	bl	1b938 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   1b606:	b008      	add	sp, #32
   1b608:	bd10      	pop	{r4, pc}
   1b60a:	bf00      	nop
   1b60c:	20020000 	.word	0x20020000
   1b610:	00000000 	.word	0x00000000
   1b614:	20040000 	.word	0x20040000
   1b618:	00010006 	.word	0x00010006
   1b61c:	20020000 	.word	0x20020000
   1b620:	20020900 	.word	0x20020900

0001b624 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
   1b624:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1b626:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   1b628:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1b62a:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   1b62e:	f004 031f 	and.w	r3, r4, #31
   1b632:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   1b634:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   1b636:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   1b638:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   1b63c:	4904      	ldr	r1, [pc, #16]	; (1b650 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   1b63e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   1b642:	f043 0301 	orr.w	r3, r3, #1
   1b646:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   1b648:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   1b64a:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   1b64c:	bd10      	pop	{r4, pc}
   1b64e:	bf00      	nop
   1b650:	e000ed90 	.word	0xe000ed90

0001b654 <region_allocate_and_init>:

static int region_allocate_and_init(const u8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
   1b654:	280f      	cmp	r0, #15
{
   1b656:	b510      	push	{r4, lr}
   1b658:	4604      	mov	r4, r0
	if (index > (get_num_regions() - 1)) {
   1b65a:	d912      	bls.n	1b682 <region_allocate_and_init+0x2e>

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   1b65c:	2301      	movs	r3, #1
   1b65e:	f04f 0000 	mov.w	r0, #0
   1b662:	4a09      	ldr	r2, [pc, #36]	; (1b688 <region_allocate_and_init+0x34>)
   1b664:	f363 0007 	bfi	r0, r3, #0, #8
   1b668:	4b08      	ldr	r3, [pc, #32]	; (1b68c <region_allocate_and_init+0x38>)
   1b66a:	4909      	ldr	r1, [pc, #36]	; (1b690 <region_allocate_and_init+0x3c>)
   1b66c:	1a9b      	subs	r3, r3, r2
   1b66e:	08db      	lsrs	r3, r3, #3
   1b670:	4622      	mov	r2, r4
   1b672:	f363 108f 	bfi	r0, r3, #6, #10
   1b676:	f018 fab4 	bl	33be2 <log_string_sync>
		return -EINVAL;
   1b67a:	f06f 0415 	mvn.w	r4, #21

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   1b67e:	4620      	mov	r0, r4
   1b680:	bd10      	pop	{r4, pc}
	region_init(index, region_conf);
   1b682:	f7ff ffcf 	bl	1b624 <region_init>
	return index;
   1b686:	e7fa      	b.n	1b67e <region_allocate_and_init+0x2a>
   1b688:	00039f48 	.word	0x00039f48
   1b68c:	00039fc8 	.word	0x00039fc8
   1b690:	0003d709 	.word	0x0003d709

0001b694 <mpu_configure_regions_and_partition.constprop.2>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   1b694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b698:	4607      	mov	r7, r0
   1b69a:	4688      	mov	r8, r1
   1b69c:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   1b69e:	2600      	movs	r6, #0
	MPU->RNR = index;
   1b6a0:	4d58      	ldr	r5, [pc, #352]	; (1b804 <mpu_configure_regions_and_partition.constprop.2+0x170>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   1b6a2:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   1b6a4:	4546      	cmp	r6, r8
   1b6a6:	da3d      	bge.n	1b724 <mpu_configure_regions_and_partition.constprop.2+0x90>
		if (regions[i]->size == 0U) {
   1b6a8:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
   1b6ac:	f8d3 9004 	ldr.w	r9, [r3, #4]
   1b6b0:	f1b9 0f00 	cmp.w	r9, #0
   1b6b4:	d059      	beq.n	1b76a <mpu_configure_regions_and_partition.constprop.2+0xd6>
		&&
   1b6b6:	f1b9 0f1f 	cmp.w	r9, #31
   1b6ba:	d922      	bls.n	1b702 <mpu_configure_regions_and_partition.constprop.2+0x6e>
		&&
   1b6bc:	f019 0f1f 	tst.w	r9, #31
   1b6c0:	d11f      	bne.n	1b702 <mpu_configure_regions_and_partition.constprop.2+0x6e>
		((part->start &
   1b6c2:	f8d3 a000 	ldr.w	sl, [r3]
		&&
   1b6c6:	f01a 0f1f 	tst.w	sl, #31
   1b6ca:	d11a      	bne.n	1b702 <mpu_configure_regions_and_partition.constprop.2+0x6e>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1b6cc:	4650      	mov	r0, sl
   1b6ce:	f019 feda 	bl	35486 <arm_cmse_mpu_region_get>
   1b6d2:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1b6d4:	eb09 000a 	add.w	r0, r9, sl
   1b6d8:	3801      	subs	r0, #1
   1b6da:	f019 fed4 	bl	35486 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   1b6de:	4583      	cmp	fp, r0
   1b6e0:	d024      	beq.n	1b72c <mpu_configure_regions_and_partition.constprop.2+0x98>
	return -EINVAL;
   1b6e2:	f06f 0b15 	mvn.w	fp, #21
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   1b6e6:	2301      	movs	r3, #1
   1b6e8:	f04f 0000 	mov.w	r0, #0
   1b6ec:	4a46      	ldr	r2, [pc, #280]	; (1b808 <mpu_configure_regions_and_partition.constprop.2+0x174>)
   1b6ee:	f363 0007 	bfi	r0, r3, #0, #8
   1b6f2:	4b46      	ldr	r3, [pc, #280]	; (1b80c <mpu_configure_regions_and_partition.constprop.2+0x178>)
   1b6f4:	4946      	ldr	r1, [pc, #280]	; (1b810 <mpu_configure_regions_and_partition.constprop.2+0x17c>)
   1b6f6:	1a9b      	subs	r3, r3, r2
   1b6f8:	08db      	lsrs	r3, r3, #3
   1b6fa:	f363 108f 	bfi	r0, r3, #6, #10
   1b6fe:	465a      	mov	r2, fp
   1b700:	e00c      	b.n	1b71c <mpu_configure_regions_and_partition.constprop.2+0x88>
			LOG_ERR("Partition %u: sanity check failed.", i);
   1b702:	2301      	movs	r3, #1
   1b704:	f04f 0000 	mov.w	r0, #0
   1b708:	4a3f      	ldr	r2, [pc, #252]	; (1b808 <mpu_configure_regions_and_partition.constprop.2+0x174>)
   1b70a:	f363 0007 	bfi	r0, r3, #0, #8
   1b70e:	4b3f      	ldr	r3, [pc, #252]	; (1b80c <mpu_configure_regions_and_partition.constprop.2+0x178>)
   1b710:	4940      	ldr	r1, [pc, #256]	; (1b814 <mpu_configure_regions_and_partition.constprop.2+0x180>)
   1b712:	1a9b      	subs	r3, r3, r2
   1b714:	4632      	mov	r2, r6
   1b716:	08db      	lsrs	r3, r3, #3
   1b718:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_ERR("Invalid underlying region index %u",
   1b71c:	f018 fa61 	bl	33be2 <log_string_sync>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   1b720:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   1b724:	4620      	mov	r0, r4
   1b726:	b005      	add	sp, #20
   1b728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   1b72c:	f11b 0f16 	cmn.w	fp, #22
   1b730:	d0d9      	beq.n	1b6e6 <mpu_configure_regions_and_partition.constprop.2+0x52>
			(u_reg_index > (reg_index - 1))) {
   1b732:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   1b734:	455b      	cmp	r3, fp
   1b736:	dbd6      	blt.n	1b6e6 <mpu_configure_regions_and_partition.constprop.2+0x52>
	MPU->RNR = index;
   1b738:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   1b73c:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
   1b73e:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   1b742:	692b      	ldr	r3, [r5, #16]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   1b744:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   1b748:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   1b74c:	f043 0a1f 	orr.w	sl, r3, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   1b750:	e9d1 3200 	ldrd	r3, r2, [r1]
   1b754:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
   1b756:	4298      	cmp	r0, r3
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   1b758:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
		if ((regions[i]->start == u_reg_base) &&
   1b75c:	d118      	bne.n	1b790 <mpu_configure_regions_and_partition.constprop.2+0xfc>
   1b75e:	45ca      	cmp	sl, r9
   1b760:	d105      	bne.n	1b76e <mpu_configure_regions_and_partition.constprop.2+0xda>
			mpu_configure_region(u_reg_index, regions[i]);
   1b762:	fa5f f08b 	uxtb.w	r0, fp
   1b766:	f019 fe73 	bl	35450 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   1b76a:	3601      	adds	r6, #1
   1b76c:	e79a      	b.n	1b6a4 <mpu_configure_regions_and_partition.constprop.2+0x10>
	MPU->RNR = index;
   1b76e:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   1b772:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   1b774:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   1b778:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   1b77c:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   1b77e:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
   1b780:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
   1b782:	f019 fe65 	bl	35450 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   1b786:	f110 0f16 	cmn.w	r0, #22
   1b78a:	d0c9      	beq.n	1b720 <mpu_configure_regions_and_partition.constprop.2+0x8c>
			reg_index++;
   1b78c:	1c44      	adds	r4, r0, #1
   1b78e:	e7ec      	b.n	1b76a <mpu_configure_regions_and_partition.constprop.2+0xd6>
	MPU->RNR = index;
   1b790:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   1b794:	692a      	ldr	r2, [r5, #16]
   1b796:	3b01      	subs	r3, #1
   1b798:	f023 031f 	bic.w	r3, r3, #31
   1b79c:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   1b7a0:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   1b7a2:	45ca      	cmp	sl, r9
   1b7a4:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   1b7a6:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
   1b7a8:	d0eb      	beq.n	1b782 <mpu_configure_regions_and_partition.constprop.2+0xee>
				mpu_configure_region(reg_index, regions[i]);
   1b7aa:	f019 fe51 	bl	35450 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   1b7ae:	f110 0f16 	cmn.w	r0, #22
   1b7b2:	d0b5      	beq.n	1b720 <mpu_configure_regions_and_partition.constprop.2+0x8c>
	MPU->RNR = index;
   1b7b4:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
   1b7b8:	68ea      	ldr	r2, [r5, #12]
   1b7ba:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
   1b7be:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
	attr->rbar = MPU->RBAR &
   1b7c2:	f362 0304 	bfi	r3, r2, #0, #5
   1b7c6:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   1b7ca:	692b      	ldr	r3, [r5, #16]
   1b7cc:	f89d 2008 	ldrb.w	r2, [sp, #8]
   1b7d0:	085b      	lsrs	r3, r3, #1
   1b7d2:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
   1b7d6:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   1b7da:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
   1b7de:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b7e2:	4413      	add	r3, r2
   1b7e4:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
   1b7e6:	f023 031f 	bic.w	r3, r3, #31
   1b7ea:	4453      	add	r3, sl
   1b7ec:	eba3 0309 	sub.w	r3, r3, r9
			reg_index++;
   1b7f0:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
   1b7f2:	f023 031f 	bic.w	r3, r3, #31
				region_allocate_and_init(reg_index,
   1b7f6:	4669      	mov	r1, sp
   1b7f8:	b2c0      	uxtb	r0, r0
			fill_region.attr.r_limit =
   1b7fa:	9303      	str	r3, [sp, #12]
				region_allocate_and_init(reg_index,
   1b7fc:	f7ff ff2a 	bl	1b654 <region_allocate_and_init>
   1b800:	e7c1      	b.n	1b786 <mpu_configure_regions_and_partition.constprop.2+0xf2>
   1b802:	bf00      	nop
   1b804:	e000ed90 	.word	0xe000ed90
   1b808:	00039f48 	.word	0x00039f48
   1b80c:	00039fc8 	.word	0x00039fc8
   1b810:	0003d6e6 	.word	0x0003d6e6
   1b814:	0003d6c3 	.word	0x0003d6c3

0001b818 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   1b818:	2205      	movs	r2, #5
   1b81a:	4b03      	ldr	r3, [pc, #12]	; (1b828 <arm_core_mpu_enable+0x10>)
   1b81c:	605a      	str	r2, [r3, #4]
   1b81e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1b822:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   1b826:	4770      	bx	lr
   1b828:	e000ed90 	.word	0xe000ed90

0001b82c <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   1b82c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   1b830:	2200      	movs	r2, #0
   1b832:	4b01      	ldr	r3, [pc, #4]	; (1b838 <arm_core_mpu_disable+0xc>)
   1b834:	605a      	str	r2, [r3, #4]
}
   1b836:	4770      	bx	lr
   1b838:	e000ed90 	.word	0xe000ed90

0001b83c <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
   1b83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   1b83e:	4f21      	ldr	r7, [pc, #132]	; (1b8c4 <arm_mpu_init+0x88>)
   1b840:	683e      	ldr	r6, [r7, #0]
   1b842:	2e10      	cmp	r6, #16
   1b844:	d913      	bls.n	1b86e <arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   1b846:	f240 133d 	movw	r3, #317	; 0x13d
   1b84a:	4a1f      	ldr	r2, [pc, #124]	; (1b8c8 <arm_mpu_init+0x8c>)
   1b84c:	491f      	ldr	r1, [pc, #124]	; (1b8cc <arm_mpu_init+0x90>)
   1b84e:	4820      	ldr	r0, [pc, #128]	; (1b8d0 <arm_mpu_init+0x94>)
   1b850:	f017 feaf 	bl	335b2 <printk>
   1b854:	2210      	movs	r2, #16
   1b856:	4631      	mov	r1, r6
   1b858:	481e      	ldr	r0, [pc, #120]	; (1b8d4 <arm_mpu_init+0x98>)
   1b85a:	f017 feaa 	bl	335b2 <printk>
   1b85e:	481a      	ldr	r0, [pc, #104]	; (1b8c8 <arm_mpu_init+0x8c>)
   1b860:	f240 113d 	movw	r1, #317	; 0x13d
   1b864:	f018 f9a6 	bl	33bb4 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   1b868:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
   1b86c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1b86e:	2400      	movs	r4, #0
	arm_core_mpu_disable();
   1b870:	f7ff ffdc 	bl	1b82c <arm_core_mpu_disable>
	MPU->MAIR0 =
   1b874:	4d18      	ldr	r5, [pc, #96]	; (1b8d8 <arm_mpu_init+0x9c>)
   1b876:	4a19      	ldr	r2, [pc, #100]	; (1b8dc <arm_mpu_init+0xa0>)
   1b878:	632a      	str	r2, [r5, #48]	; 0x30
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1b87a:	42a6      	cmp	r6, r4
   1b87c:	d119      	bne.n	1b8b2 <arm_mpu_init+0x76>
	static_regions_num = mpu_config.num_regions;
   1b87e:	4b18      	ldr	r3, [pc, #96]	; (1b8e0 <arm_mpu_init+0xa4>)
   1b880:	701e      	strb	r6, [r3, #0]
	arm_core_mpu_enable();
   1b882:	f7ff ffc9 	bl	1b818 <arm_core_mpu_enable>
	__ASSERT(
   1b886:	682b      	ldr	r3, [r5, #0]
   1b888:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1b88c:	2b10      	cmp	r3, #16
   1b88e:	d00e      	beq.n	1b8ae <arm_mpu_init+0x72>
   1b890:	4914      	ldr	r1, [pc, #80]	; (1b8e4 <arm_mpu_init+0xa8>)
   1b892:	f44f 73af 	mov.w	r3, #350	; 0x15e
   1b896:	4a0c      	ldr	r2, [pc, #48]	; (1b8c8 <arm_mpu_init+0x8c>)
   1b898:	480d      	ldr	r0, [pc, #52]	; (1b8d0 <arm_mpu_init+0x94>)
   1b89a:	f017 fe8a 	bl	335b2 <printk>
   1b89e:	4812      	ldr	r0, [pc, #72]	; (1b8e8 <arm_mpu_init+0xac>)
   1b8a0:	f017 fe87 	bl	335b2 <printk>
   1b8a4:	f44f 71af 	mov.w	r1, #350	; 0x15e
   1b8a8:	4807      	ldr	r0, [pc, #28]	; (1b8c8 <arm_mpu_init+0x8c>)
   1b8aa:	f018 f983 	bl	33bb4 <assert_post_action>
	return 0;
   1b8ae:	2000      	movs	r0, #0
   1b8b0:	e7dc      	b.n	1b86c <arm_mpu_init+0x30>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   1b8b2:	6879      	ldr	r1, [r7, #4]
   1b8b4:	4620      	mov	r0, r4
   1b8b6:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   1b8ba:	f7ff feb3 	bl	1b624 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1b8be:	3401      	adds	r4, #1
   1b8c0:	e7db      	b.n	1b87a <arm_mpu_init+0x3e>
   1b8c2:	bf00      	nop
   1b8c4:	0003a4b0 	.word	0x0003a4b0
   1b8c8:	0003d5dd 	.word	0x0003d5dd
   1b8cc:	0003fd2f 	.word	0x0003fd2f
   1b8d0:	0003b773 	.word	0x0003b773
   1b8d4:	0003d61d 	.word	0x0003d61d
   1b8d8:	e000ed90 	.word	0xe000ed90
   1b8dc:	0044ffaa 	.word	0x0044ffaa
   1b8e0:	20027fb7 	.word	0x20027fb7
   1b8e4:	0003d651 	.word	0x0003d651
   1b8e8:	0003d6a2 	.word	0x0003d6a2

0001b8ec <arm_core_mpu_configure_static_mpu_regions>:
{
   1b8ec:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   1b8ee:	4c0d      	ldr	r4, [pc, #52]	; (1b924 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   1b8f0:	460d      	mov	r5, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   1b8f2:	7822      	ldrb	r2, [r4, #0]
   1b8f4:	f7ff fece 	bl	1b694 <mpu_configure_regions_and_partition.constprop.2>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   1b8f8:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   1b8fa:	3016      	adds	r0, #22
   1b8fc:	d111      	bne.n	1b922 <arm_core_mpu_configure_static_mpu_regions+0x36>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   1b8fe:	f240 1303 	movw	r3, #259	; 0x103
   1b902:	4a09      	ldr	r2, [pc, #36]	; (1b928 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   1b904:	4909      	ldr	r1, [pc, #36]	; (1b92c <arm_core_mpu_configure_static_mpu_regions+0x40>)
   1b906:	480a      	ldr	r0, [pc, #40]	; (1b930 <arm_core_mpu_configure_static_mpu_regions+0x44>)
   1b908:	f017 fe53 	bl	335b2 <printk>
   1b90c:	4629      	mov	r1, r5
   1b90e:	4809      	ldr	r0, [pc, #36]	; (1b934 <arm_core_mpu_configure_static_mpu_regions+0x48>)
   1b910:	f017 fe4f 	bl	335b2 <printk>
}
   1b914:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   1b918:	f240 1103 	movw	r1, #259	; 0x103
   1b91c:	4802      	ldr	r0, [pc, #8]	; (1b928 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   1b91e:	f018 b949 	b.w	33bb4 <assert_post_action>
}
   1b922:	bd38      	pop	{r3, r4, r5, pc}
   1b924:	20027fb7 	.word	0x20027fb7
   1b928:	0003d5dd 	.word	0x0003d5dd
   1b92c:	0003fd2f 	.word	0x0003fd2f
   1b930:	0003b773 	.word	0x0003b773
   1b934:	0003d582 	.word	0x0003d582

0001b938 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   1b938:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b93c:	4c2e      	ldr	r4, [pc, #184]	; (1b9f8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>)
   1b93e:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1b940:	4680      	mov	r8, r0
   1b942:	2700      	movs	r7, #0
   1b944:	46a2      	mov	sl, r4
	attr->rbar = MPU->RBAR &
   1b946:	f04f 0b14 	mov.w	fp, #20
	MPU->RNR = index;
   1b94a:	4d2c      	ldr	r5, [pc, #176]	; (1b9fc <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1b94c:	454f      	cmp	r7, r9
   1b94e:	db02      	blt.n	1b956 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1e>
}
   1b950:	b003      	add	sp, #12
   1b952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   1b956:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1b95a:	9301      	str	r3, [sp, #4]
   1b95c:	2b00      	cmp	r3, #0
   1b95e:	d046      	beq.n	1b9ee <arm_core_mpu_mark_areas_for_dynamic_regions+0xb6>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   1b960:	f8d8 1000 	ldr.w	r1, [r8]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1b964:	4608      	mov	r0, r1
   1b966:	9100      	str	r1, [sp, #0]
   1b968:	f019 fd8d 	bl	35486 <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1b96c:	e9dd 1300 	ldrd	r1, r3, [sp]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1b970:	4606      	mov	r6, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1b972:	1858      	adds	r0, r3, r1
   1b974:	3801      	subs	r0, #1
   1b976:	f019 fd86 	bl	35486 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   1b97a:	4286      	cmp	r6, r0
   1b97c:	4a20      	ldr	r2, [pc, #128]	; (1ba00 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
   1b97e:	d018      	beq.n	1b9b2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x7a>
		dyn_reg_info[i].index =
   1b980:	2314      	movs	r3, #20
   1b982:	435f      	muls	r7, r3
   1b984:	f06f 0315 	mvn.w	r3, #21
   1b988:	f84a 3007 	str.w	r3, [sl, r7]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   1b98c:	f240 1313 	movw	r3, #275	; 0x113
   1b990:	4a1c      	ldr	r2, [pc, #112]	; (1ba04 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
   1b992:	491d      	ldr	r1, [pc, #116]	; (1ba08 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
   1b994:	481d      	ldr	r0, [pc, #116]	; (1ba0c <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
   1b996:	f017 fe0c 	bl	335b2 <printk>
   1b99a:	4649      	mov	r1, r9
   1b99c:	481c      	ldr	r0, [pc, #112]	; (1ba10 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   1b99e:	f017 fe08 	bl	335b2 <printk>
   1b9a2:	f240 1113 	movw	r1, #275	; 0x113
   1b9a6:	4817      	ldr	r0, [pc, #92]	; (1ba04 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
}
   1b9a8:	b003      	add	sp, #12
   1b9aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   1b9ae:	f018 b901 	b.w	33bb4 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   1b9b2:	f116 0f16 	cmn.w	r6, #22
		dyn_reg_info[i].index =
   1b9b6:	6026      	str	r6, [r4, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   1b9b8:	d0e8      	beq.n	1b98c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   1b9ba:	7813      	ldrb	r3, [r2, #0]
   1b9bc:	42b3      	cmp	r3, r6
   1b9be:	dde5      	ble.n	1b98c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
   1b9c0:	fb0b a307 	mla	r3, fp, r7, sl
	MPU->RNR = index;
   1b9c4:	60ae      	str	r6, [r5, #8]
	MPU->RNR = index;
   1b9c6:	60ae      	str	r6, [r5, #8]
	attr->rbar = MPU->RBAR &
   1b9c8:	68e8      	ldr	r0, [r5, #12]
   1b9ca:	7b19      	ldrb	r1, [r3, #12]
   1b9cc:	f360 0104 	bfi	r1, r0, #0, #5
   1b9d0:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   1b9d2:	6929      	ldr	r1, [r5, #16]
   1b9d4:	7b18      	ldrb	r0, [r3, #12]
   1b9d6:	0849      	lsrs	r1, r1, #1
   1b9d8:	f361 1047 	bfi	r0, r1, #5, #3
   1b9dc:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   1b9de:	68eb      	ldr	r3, [r5, #12]
   1b9e0:	f023 031f 	bic.w	r3, r3, #31
   1b9e4:	6063      	str	r3, [r4, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   1b9e6:	692b      	ldr	r3, [r5, #16]
   1b9e8:	f023 031f 	bic.w	r3, r3, #31
   1b9ec:	6123      	str	r3, [r4, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1b9ee:	3701      	adds	r7, #1
   1b9f0:	3414      	adds	r4, #20
   1b9f2:	f108 080c 	add.w	r8, r8, #12
   1b9f6:	e7a9      	b.n	1b94c <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
   1b9f8:	20021770 	.word	0x20021770
   1b9fc:	e000ed90 	.word	0xe000ed90
   1ba00:	20027fb7 	.word	0x20027fb7
   1ba04:	0003d5dd 	.word	0x0003d5dd
   1ba08:	0003fd2f 	.word	0x0003fd2f
   1ba0c:	0003b773 	.word	0x0003b773
   1ba10:	0003d5ae 	.word	0x0003d5ae

0001ba14 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   1ba14:	4b01      	ldr	r3, [pc, #4]	; (1ba1c <__stdout_hook_install+0x8>)
   1ba16:	6018      	str	r0, [r3, #0]
}
   1ba18:	4770      	bx	lr
   1ba1a:	bf00      	nop
   1ba1c:	200200b4 	.word	0x200200b4

0001ba20 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   1ba20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ba22:	4606      	mov	r6, r0
   1ba24:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   1ba26:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   1ba28:	4f06      	ldr	r7, [pc, #24]	; (1ba44 <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   1ba2a:	42ac      	cmp	r4, r5
   1ba2c:	da08      	bge.n	1ba40 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   1ba2e:	683b      	ldr	r3, [r7, #0]
   1ba30:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   1ba32:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   1ba34:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   1ba36:	f104 0401 	add.w	r4, r4, #1
   1ba3a:	d001      	beq.n	1ba40 <z_impl_zephyr_read_stdin+0x20>
   1ba3c:	280d      	cmp	r0, #13
   1ba3e:	d1f4      	bne.n	1ba2a <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   1ba40:	4620      	mov	r0, r4
   1ba42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ba44:	200200b0 	.word	0x200200b0

0001ba48 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   1ba48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ba4a:	460e      	mov	r6, r1
   1ba4c:	4f09      	ldr	r7, [pc, #36]	; (1ba74 <z_impl_zephyr_write_stdout+0x2c>)
   1ba4e:	1e44      	subs	r4, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   1ba50:	f1c0 0501 	rsb	r5, r0, #1
   1ba54:	192b      	adds	r3, r5, r4
   1ba56:	429e      	cmp	r6, r3
   1ba58:	dc01      	bgt.n	1ba5e <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   1ba5a:	4630      	mov	r0, r6
   1ba5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   1ba5e:	7863      	ldrb	r3, [r4, #1]
   1ba60:	2b0a      	cmp	r3, #10
   1ba62:	d102      	bne.n	1ba6a <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   1ba64:	683b      	ldr	r3, [r7, #0]
   1ba66:	200d      	movs	r0, #13
   1ba68:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   1ba6a:	683b      	ldr	r3, [r7, #0]
   1ba6c:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   1ba70:	4798      	blx	r3
   1ba72:	e7ef      	b.n	1ba54 <z_impl_zephyr_write_stdout+0xc>
   1ba74:	200200b4 	.word	0x200200b4

0001ba78 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   1ba78:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   1ba7a:	2105      	movs	r1, #5
   1ba7c:	4801      	ldr	r0, [pc, #4]	; (1ba84 <_exit+0xc>)
   1ba7e:	f7ff ffe3 	bl	1ba48 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
		;
   1ba82:	e7fe      	b.n	1ba82 <_exit+0xa>
   1ba84:	0003d72f 	.word	0x0003d72f

0001ba88 <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(int count)
{
   1ba88:	b538      	push	{r3, r4, r5, lr}
   1ba8a:	4605      	mov	r5, r0
	void *ret, *ptr;

	sys_sem_take(&heap_sem, K_FOREVER);
   1ba8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ba90:	480b      	ldr	r0, [pc, #44]	; (1bac0 <_sbrk+0x38>)
   1ba92:	f017 fdad 	bl	335f0 <sys_sem_take>

#if CONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE
	ptr = heap_base + heap_sz;
#else
	ptr = ((char *)HEAP_BASE) + heap_sz;
   1ba96:	4a0b      	ldr	r2, [pc, #44]	; (1bac4 <_sbrk+0x3c>)
#endif

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   1ba98:	490b      	ldr	r1, [pc, #44]	; (1bac8 <_sbrk+0x40>)
	ptr = ((char *)HEAP_BASE) + heap_sz;
   1ba9a:	6814      	ldr	r4, [r2, #0]
	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   1ba9c:	f1c1 5300 	rsb	r3, r1, #536870912	; 0x20000000
   1baa0:	4425      	add	r5, r4
   1baa2:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   1baa6:	429d      	cmp	r5, r3
		heap_sz += count;
		ret = ptr;
	} else {
		ret = (void *)-1;
   1baa8:	bf2c      	ite	cs
   1baaa:	f04f 34ff 	movcs.w	r4, #4294967295	; 0xffffffff
	ptr = ((char *)HEAP_BASE) + heap_sz;
   1baae:	1864      	addcc	r4, r4, r1
	}

	sys_sem_give(&heap_sem);
   1bab0:	4803      	ldr	r0, [pc, #12]	; (1bac0 <_sbrk+0x38>)
		heap_sz += count;
   1bab2:	bf38      	it	cc
   1bab4:	6015      	strcc	r5, [r2, #0]
	sys_sem_give(&heap_sem);
   1bab6:	f017 fd96 	bl	335e6 <sys_sem_give>

	return ret;
}
   1baba:	4620      	mov	r0, r4
   1babc:	bd38      	pop	{r3, r4, r5, pc}
   1babe:	bf00      	nop
   1bac0:	2002071c 	.word	0x2002071c
   1bac4:	20021784 	.word	0x20021784
   1bac8:	20038b6f 	.word	0x20038b6f

0001bacc <thingy91_board_init>:
#endif
	return 0;
}

static int thingy91_board_init(struct device *dev)
{
   1bacc:	b530      	push	{r4, r5, lr}
   1bace:	b0a3      	sub	sp, #140	; 0x8c
	return z_impl_zsock_socket(family, type, proto);
   1bad0:	f240 2201 	movw	r2, #513	; 0x201
   1bad4:	2102      	movs	r1, #2
   1bad6:	2066      	movs	r0, #102	; 0x66
   1bad8:	f7fd fc8a 	bl	193f0 <z_impl_zsock_socket>
	if (at_socket_fd == -1) {
   1badc:	1c43      	adds	r3, r0, #1
   1bade:	4604      	mov	r4, r0
   1bae0:	d11f      	bne.n	1bb22 <thingy91_board_init+0x56>
		LOG_ERR("AT socket could not be opened");
   1bae2:	2301      	movs	r3, #1
   1bae4:	f04f 0000 	mov.w	r0, #0
   1bae8:	4a5d      	ldr	r2, [pc, #372]	; (1bc60 <thingy91_board_init+0x194>)
   1baea:	f363 0007 	bfi	r0, r3, #0, #8
   1baee:	4b5d      	ldr	r3, [pc, #372]	; (1bc64 <thingy91_board_init+0x198>)
   1baf0:	495d      	ldr	r1, [pc, #372]	; (1bc68 <thingy91_board_init+0x19c>)
   1baf2:	1a9b      	subs	r3, r3, r2
   1baf4:	08db      	lsrs	r3, r3, #3
   1baf6:	f363 108f 	bfi	r0, r3, #6, #10
   1bafa:	f018 f872 	bl	33be2 <log_string_sync>
		return -EFAULT;
   1bafe:	f06f 050d 	mvn.w	r5, #13
	int err;

	err = thingy91_magpio_configure();
	if (err) {
		LOG_ERR("thingy91_magpio_configure failed with error: %d", err);
   1bb02:	2301      	movs	r3, #1
   1bb04:	f04f 0000 	mov.w	r0, #0
   1bb08:	4a55      	ldr	r2, [pc, #340]	; (1bc60 <thingy91_board_init+0x194>)
   1bb0a:	f363 0007 	bfi	r0, r3, #0, #8
   1bb0e:	4b55      	ldr	r3, [pc, #340]	; (1bc64 <thingy91_board_init+0x198>)
   1bb10:	4956      	ldr	r1, [pc, #344]	; (1bc6c <thingy91_board_init+0x1a0>)
   1bb12:	1a9b      	subs	r3, r3, r2
   1bb14:	08db      	lsrs	r3, r3, #3
   1bb16:	f363 108f 	bfi	r0, r3, #6, #10
   1bb1a:	462a      	mov	r2, r5
   1bb1c:	f018 f861 	bl	33be2 <log_string_sync>
		return err;
   1bb20:	e09a      	b.n	1bc58 <thingy91_board_init+0x18c>
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   1bb22:	2500      	movs	r5, #0
   1bb24:	2210      	movs	r2, #16
   1bb26:	e9cd 5500 	strd	r5, r5, [sp]
   1bb2a:	462b      	mov	r3, r5
   1bb2c:	4950      	ldr	r1, [pc, #320]	; (1bc70 <thingy91_board_init+0x1a4>)
   1bb2e:	f018 f9a4 	bl	33e7a <z_impl_zsock_sendto>
	if (buffer != AT_CMD_LEN(AT_CMD_TRACE)) {
   1bb32:	2810      	cmp	r0, #16
   1bb34:	d01d      	beq.n	1bb72 <thingy91_board_init+0xa6>
		LOG_ERR("XMODEMTRACE command failed");
   1bb36:	2301      	movs	r3, #1
   1bb38:	f04f 0000 	mov.w	r0, #0
   1bb3c:	4a48      	ldr	r2, [pc, #288]	; (1bc60 <thingy91_board_init+0x194>)
   1bb3e:	f363 0007 	bfi	r0, r3, #0, #8
   1bb42:	4b48      	ldr	r3, [pc, #288]	; (1bc64 <thingy91_board_init+0x198>)
   1bb44:	494b      	ldr	r1, [pc, #300]	; (1bc74 <thingy91_board_init+0x1a8>)
   1bb46:	1a9b      	subs	r3, r3, r2
   1bb48:	08db      	lsrs	r3, r3, #3
   1bb4a:	f363 108f 	bfi	r0, r3, #6, #10
   1bb4e:	f018 f848 	bl	33be2 <log_string_sync>
		close(at_socket_fd);
   1bb52:	4620      	mov	r0, r4
   1bb54:	f019 fcbf 	bl	354d6 <close>
		__ASSERT_NO_MSG(false);
   1bb58:	4947      	ldr	r1, [pc, #284]	; (1bc78 <thingy91_board_init+0x1ac>)
   1bb5a:	232a      	movs	r3, #42	; 0x2a
   1bb5c:	4a47      	ldr	r2, [pc, #284]	; (1bc7c <thingy91_board_init+0x1b0>)
   1bb5e:	4848      	ldr	r0, [pc, #288]	; (1bc80 <thingy91_board_init+0x1b4>)
   1bb60:	f017 fd27 	bl	335b2 <printk>
   1bb64:	212a      	movs	r1, #42	; 0x2a
		__ASSERT_NO_MSG(false);
   1bb66:	4845      	ldr	r0, [pc, #276]	; (1bc7c <thingy91_board_init+0x1b0>)
   1bb68:	f018 f824 	bl	33bb4 <assert_post_action>
		return -EIO;
   1bb6c:	f06f 0504 	mvn.w	r5, #4
   1bb70:	e7c7      	b.n	1bb02 <thingy91_board_init+0x36>
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   1bb72:	2280      	movs	r2, #128	; 0x80
   1bb74:	e9cd 5500 	strd	r5, r5, [sp]
   1bb78:	462b      	mov	r3, r5
   1bb7a:	a902      	add	r1, sp, #8
   1bb7c:	4620      	mov	r0, r4
   1bb7e:	f018 f9ce 	bl	33f1e <z_impl_zsock_recvfrom>
	if ((buffer < 2) ||
   1bb82:	2801      	cmp	r0, #1
   1bb84:	dc18      	bgt.n	1bbb8 <thingy91_board_init+0xec>
		LOG_ERR("XMODEMTRACE received unexpected response");
   1bb86:	2301      	movs	r3, #1
   1bb88:	f04f 0000 	mov.w	r0, #0
   1bb8c:	4a34      	ldr	r2, [pc, #208]	; (1bc60 <thingy91_board_init+0x194>)
   1bb8e:	f363 0007 	bfi	r0, r3, #0, #8
   1bb92:	4b34      	ldr	r3, [pc, #208]	; (1bc64 <thingy91_board_init+0x198>)
   1bb94:	493b      	ldr	r1, [pc, #236]	; (1bc84 <thingy91_board_init+0x1b8>)
   1bb96:	1a9b      	subs	r3, r3, r2
   1bb98:	08db      	lsrs	r3, r3, #3
   1bb9a:	f363 108f 	bfi	r0, r3, #6, #10
   1bb9e:	f018 f820 	bl	33be2 <log_string_sync>
		close(at_socket_fd);
   1bba2:	4620      	mov	r0, r4
   1bba4:	f019 fc97 	bl	354d6 <close>
		__ASSERT_NO_MSG(false);
   1bba8:	4933      	ldr	r1, [pc, #204]	; (1bc78 <thingy91_board_init+0x1ac>)
   1bbaa:	2334      	movs	r3, #52	; 0x34
   1bbac:	4a33      	ldr	r2, [pc, #204]	; (1bc7c <thingy91_board_init+0x1b0>)
   1bbae:	4834      	ldr	r0, [pc, #208]	; (1bc80 <thingy91_board_init+0x1b4>)
   1bbb0:	f017 fcff 	bl	335b2 <printk>
   1bbb4:	2134      	movs	r1, #52	; 0x34
   1bbb6:	e7d6      	b.n	1bb66 <thingy91_board_init+0x9a>
	    (memcmp("OK", read_buffer, 2 != 0))) {
   1bbb8:	2201      	movs	r2, #1
   1bbba:	a902      	add	r1, sp, #8
   1bbbc:	4832      	ldr	r0, [pc, #200]	; (1bc88 <thingy91_board_init+0x1bc>)
   1bbbe:	f01d f9f2 	bl	38fa6 <memcmp>
	if ((buffer < 2) ||
   1bbc2:	4605      	mov	r5, r0
   1bbc4:	2800      	cmp	r0, #0
   1bbc6:	d1de      	bne.n	1bb86 <thingy91_board_init+0xba>
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   1bbc8:	225c      	movs	r2, #92	; 0x5c
   1bbca:	e9cd 0000 	strd	r0, r0, [sp]
   1bbce:	4603      	mov	r3, r0
   1bbd0:	492e      	ldr	r1, [pc, #184]	; (1bc8c <thingy91_board_init+0x1c0>)
   1bbd2:	4620      	mov	r0, r4
   1bbd4:	f018 f951 	bl	33e7a <z_impl_zsock_sendto>
	if (buffer != AT_CMD_LEN(AT_CMD_MAGPIO)) {
   1bbd8:	285c      	cmp	r0, #92	; 0x5c
   1bbda:	d00c      	beq.n	1bbf6 <thingy91_board_init+0x12a>
		LOG_ERR("MAGPIO command failed");
   1bbdc:	2301      	movs	r3, #1
   1bbde:	f04f 0000 	mov.w	r0, #0
   1bbe2:	4a1f      	ldr	r2, [pc, #124]	; (1bc60 <thingy91_board_init+0x194>)
   1bbe4:	f363 0007 	bfi	r0, r3, #0, #8
   1bbe8:	4b1e      	ldr	r3, [pc, #120]	; (1bc64 <thingy91_board_init+0x198>)
   1bbea:	4929      	ldr	r1, [pc, #164]	; (1bc90 <thingy91_board_init+0x1c4>)
   1bbec:	1a9b      	subs	r3, r3, r2
   1bbee:	08db      	lsrs	r3, r3, #3
   1bbf0:	f363 108f 	bfi	r0, r3, #6, #10
   1bbf4:	e015      	b.n	1bc22 <thingy91_board_init+0x156>
   1bbf6:	2217      	movs	r2, #23
   1bbf8:	e9cd 5500 	strd	r5, r5, [sp]
   1bbfc:	462b      	mov	r3, r5
   1bbfe:	4925      	ldr	r1, [pc, #148]	; (1bc94 <thingy91_board_init+0x1c8>)
   1bc00:	4620      	mov	r0, r4
   1bc02:	f018 f93a 	bl	33e7a <z_impl_zsock_sendto>
	if (buffer != AT_CMD_LEN(AT_CMD_COEX0)) {
   1bc06:	2817      	cmp	r0, #23
   1bc08:	d011      	beq.n	1bc2e <thingy91_board_init+0x162>
		LOG_ERR("COEX0 command failed");
   1bc0a:	2301      	movs	r3, #1
   1bc0c:	f04f 0000 	mov.w	r0, #0
   1bc10:	4a13      	ldr	r2, [pc, #76]	; (1bc60 <thingy91_board_init+0x194>)
   1bc12:	f363 0007 	bfi	r0, r3, #0, #8
   1bc16:	4b13      	ldr	r3, [pc, #76]	; (1bc64 <thingy91_board_init+0x198>)
   1bc18:	491f      	ldr	r1, [pc, #124]	; (1bc98 <thingy91_board_init+0x1cc>)
   1bc1a:	1a9b      	subs	r3, r3, r2
   1bc1c:	08db      	lsrs	r3, r3, #3
   1bc1e:	f363 108f 	bfi	r0, r3, #6, #10
   1bc22:	f017 ffde 	bl	33be2 <log_string_sync>
		close(at_socket_fd);
   1bc26:	4620      	mov	r0, r4
   1bc28:	f019 fc55 	bl	354d6 <close>
   1bc2c:	e79e      	b.n	1bb6c <thingy91_board_init+0xa0>
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   1bc2e:	2280      	movs	r2, #128	; 0x80
   1bc30:	e9cd 5500 	strd	r5, r5, [sp]
   1bc34:	462b      	mov	r3, r5
   1bc36:	a902      	add	r1, sp, #8
   1bc38:	4620      	mov	r0, r4
   1bc3a:	f018 f970 	bl	33f1e <z_impl_zsock_recvfrom>
	if ((buffer < 2) ||
   1bc3e:	2801      	cmp	r0, #1
   1bc40:	ddcc      	ble.n	1bbdc <thingy91_board_init+0x110>
	    (memcmp("OK", read_buffer, 2 != 0))) {
   1bc42:	2201      	movs	r2, #1
   1bc44:	a902      	add	r1, sp, #8
   1bc46:	4810      	ldr	r0, [pc, #64]	; (1bc88 <thingy91_board_init+0x1bc>)
   1bc48:	f01d f9ad 	bl	38fa6 <memcmp>
	if ((buffer < 2) ||
   1bc4c:	4605      	mov	r5, r0
   1bc4e:	2800      	cmp	r0, #0
   1bc50:	d1c4      	bne.n	1bbdc <thingy91_board_init+0x110>
	close(at_socket_fd);
   1bc52:	4620      	mov	r0, r4
   1bc54:	f019 fc3f 	bl	354d6 <close>
	}

	return 0;
}
   1bc58:	4628      	mov	r0, r5
   1bc5a:	b023      	add	sp, #140	; 0x8c
   1bc5c:	bd30      	pop	{r4, r5, pc}
   1bc5e:	bf00      	nop
   1bc60:	00039f48 	.word	0x00039f48
   1bc64:	00039f58 	.word	0x00039f58
   1bc68:	0003d754 	.word	0x0003d754
   1bc6c:	0003d8a8 	.word	0x0003d8a8
   1bc70:	0003d772 	.word	0x0003d772
   1bc74:	0003d783 	.word	0x0003d783
   1bc78:	0003fd2f 	.word	0x0003fd2f
   1bc7c:	0003d79e 	.word	0x0003d79e
   1bc80:	0003b773 	.word	0x0003b773
   1bc84:	0003d7dc 	.word	0x0003d7dc
   1bc88:	0003d805 	.word	0x0003d805
   1bc8c:	0003d808 	.word	0x0003d808
   1bc90:	0003d865 	.word	0x0003d865
   1bc94:	0003d87b 	.word	0x0003d87b
   1bc98:	0003d893 	.word	0x0003d893

0001bc9c <net_buf_id>:

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	return buf - pool->__bufs;
   1bc9c:	212c      	movs	r1, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1bc9e:	7983      	ldrb	r3, [r0, #6]
	return buf - pool->__bufs;
   1bca0:	4a04      	ldr	r2, [pc, #16]	; (1bcb4 <net_buf_id+0x18>)
   1bca2:	fb01 2303 	mla	r3, r1, r3, r2
   1bca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1bca8:	1ac0      	subs	r0, r0, r3
}
   1bcaa:	4b03      	ldr	r3, [pc, #12]	; (1bcb8 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   1bcac:	10c0      	asrs	r0, r0, #3
}
   1bcae:	4358      	muls	r0, r3
   1bcb0:	4770      	bx	lr
   1bcb2:	bf00      	nop
   1bcb4:	200207f8 	.word	0x200207f8
   1bcb8:	aaaaaaab 	.word	0xaaaaaaab

0001bcbc <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static u8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1bcbc:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1bcbe:	242c      	movs	r4, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1bcc0:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1bcc2:	4a09      	ldr	r2, [pc, #36]	; (1bce8 <fixed_data_alloc+0x2c>)
   1bcc4:	fb04 2303 	mla	r3, r4, r3, r2
   1bcc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	*size = MIN(fixed->data_size, *size);
   1bcca:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1bccc:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1bcce:	6823      	ldr	r3, [r4, #0]
   1bcd0:	429a      	cmp	r2, r3
   1bcd2:	bf94      	ite	ls
   1bcd4:	600a      	strls	r2, [r1, #0]
   1bcd6:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1bcd8:	f7ff ffe0 	bl	1bc9c <net_buf_id>
   1bcdc:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1bce0:	fb02 3000 	mla	r0, r2, r0, r3
   1bce4:	bd10      	pop	{r4, pc}
   1bce6:	bf00      	nop
   1bce8:	200207f8 	.word	0x200207f8

0001bcec <net_buf_reset>:
{
   1bcec:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
   1bcee:	7943      	ldrb	r3, [r0, #5]
{
   1bcf0:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
   1bcf2:	b14b      	cbz	r3, 1bd08 <net_buf_reset+0x1c>
   1bcf4:	490d      	ldr	r1, [pc, #52]	; (1bd2c <net_buf_reset+0x40>)
   1bcf6:	480e      	ldr	r0, [pc, #56]	; (1bd30 <net_buf_reset+0x44>)
   1bcf8:	234f      	movs	r3, #79	; 0x4f
   1bcfa:	4a0e      	ldr	r2, [pc, #56]	; (1bd34 <net_buf_reset+0x48>)
   1bcfc:	f017 fc59 	bl	335b2 <printk>
   1bd00:	214f      	movs	r1, #79	; 0x4f
   1bd02:	480c      	ldr	r0, [pc, #48]	; (1bd34 <net_buf_reset+0x48>)
   1bd04:	f017 ff56 	bl	33bb4 <assert_post_action>
	__ASSERT_NO_MSG(buf->frags == NULL);
   1bd08:	6823      	ldr	r3, [r4, #0]
   1bd0a:	b14b      	cbz	r3, 1bd20 <net_buf_reset+0x34>
   1bd0c:	490a      	ldr	r1, [pc, #40]	; (1bd38 <net_buf_reset+0x4c>)
   1bd0e:	4808      	ldr	r0, [pc, #32]	; (1bd30 <net_buf_reset+0x44>)
   1bd10:	2350      	movs	r3, #80	; 0x50
   1bd12:	4a08      	ldr	r2, [pc, #32]	; (1bd34 <net_buf_reset+0x48>)
   1bd14:	f017 fc4d 	bl	335b2 <printk>
   1bd18:	2150      	movs	r1, #80	; 0x50
   1bd1a:	4806      	ldr	r0, [pc, #24]	; (1bd34 <net_buf_reset+0x48>)
   1bd1c:	f017 ff4a 	bl	33bb4 <assert_post_action>
 *
 * @param buf Buffer to reset.
 */
static inline void net_buf_simple_reset(struct net_buf_simple *buf)
{
	buf->len  = 0U;
   1bd20:	2300      	movs	r3, #0
   1bd22:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   1bd24:	6923      	ldr	r3, [r4, #16]
   1bd26:	60a3      	str	r3, [r4, #8]
}
   1bd28:	bd10      	pop	{r4, pc}
   1bd2a:	bf00      	nop
   1bd2c:	0003d91e 	.word	0x0003d91e
   1bd30:	0003b773 	.word	0x0003b773
   1bd34:	0003d8fa 	.word	0x0003d8fa
   1bd38:	0003d92f 	.word	0x0003d92f

0001bd3c <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1bd3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bd40:	4605      	mov	r5, r0
	u64_t end = z_timeout_end_calc(timeout);
   1bd42:	4610      	mov	r0, r2
{
   1bd44:	9101      	str	r1, [sp, #4]
   1bd46:	4616      	mov	r6, r2
	u64_t end = z_timeout_end_calc(timeout);
   1bd48:	f01d f86f 	bl	38e2a <z_timeout_end_calc>
   1bd4c:	4607      	mov	r7, r0
   1bd4e:	468a      	mov	sl, r1
	struct net_buf *buf;
	unsigned int key;

	__ASSERT_NO_MSG(pool);
   1bd50:	b94d      	cbnz	r5, 1bd66 <net_buf_alloc_len+0x2a>
   1bd52:	494c      	ldr	r1, [pc, #304]	; (1be84 <net_buf_alloc_len+0x148>)
   1bd54:	484c      	ldr	r0, [pc, #304]	; (1be88 <net_buf_alloc_len+0x14c>)
   1bd56:	23f1      	movs	r3, #241	; 0xf1
   1bd58:	4a4c      	ldr	r2, [pc, #304]	; (1be8c <net_buf_alloc_len+0x150>)
   1bd5a:	f017 fc2a 	bl	335b2 <printk>
   1bd5e:	21f1      	movs	r1, #241	; 0xf1
   1bd60:	484a      	ldr	r0, [pc, #296]	; (1be8c <net_buf_alloc_len+0x150>)
   1bd62:	f017 ff27 	bl	33bb4 <assert_post_action>
   1bd66:	f04f 0320 	mov.w	r3, #32
   1bd6a:	f3ef 8b11 	mrs	fp, BASEPRI
   1bd6e:	f383 8811 	msr	BASEPRI, r3
   1bd72:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1bd76:	8beb      	ldrh	r3, [r5, #30]
   1bd78:	2b00      	cmp	r3, #0
   1bd7a:	d056      	beq.n	1be2a <net_buf_alloc_len+0xee>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1bd7c:	8baa      	ldrh	r2, [r5, #28]
   1bd7e:	429a      	cmp	r2, r3
   1bd80:	d93f      	bls.n	1be02 <net_buf_alloc_len+0xc6>
	return z_impl_k_queue_get(queue, timeout);
   1bd82:	2100      	movs	r1, #0
   1bd84:	4628      	mov	r0, r5
   1bd86:	f010 fea1 	bl	2cacc <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1bd8a:	4604      	mov	r4, r0
   1bd8c:	2800      	cmp	r0, #0
   1bd8e:	d038      	beq.n	1be02 <net_buf_alloc_len+0xc6>
	__asm__ volatile(
   1bd90:	f38b 8811 	msr	BASEPRI, fp
   1bd94:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1bd98:	9d01      	ldr	r5, [sp, #4]
   1bd9a:	2d00      	cmp	r5, #0
   1bd9c:	d070      	beq.n	1be80 <net_buf_alloc_len+0x144>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1bd9e:	1c73      	adds	r3, r6, #1
   1bda0:	2b01      	cmp	r3, #1
   1bda2:	d916      	bls.n	1bdd2 <net_buf_alloc_len+0x96>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			s64_t remaining = end - z_tick_get();
   1bda4:	f012 ffa0 	bl	2ece8 <z_tick_get>
   1bda8:	ebb7 0800 	subs.w	r8, r7, r0
   1bdac:	eb6a 0901 	sbc.w	r9, sl, r1

			if (remaining <= 0) {
   1bdb0:	f1b8 0f01 	cmp.w	r8, #1
   1bdb4:	f179 0300 	sbcs.w	r3, r9, #0
   1bdb8:	bfa3      	ittte	ge
   1bdba:	f647 72ff 	movwge	r2, #32767	; 0x7fff
   1bdbe:	2300      	movge	r3, #0
   1bdc0:	f44f 717a 	movge.w	r1, #1000	; 0x3e8
				timeout = K_NO_WAIT;
   1bdc4:	2600      	movlt	r6, #0
   1bdc6:	bfa2      	ittt	ge
   1bdc8:	fbe1 2308 	umlalge	r2, r3, r1, r8
   1bdcc:	0bd6      	lsrge	r6, r2, #15
   1bdce:	ea46 4643 	orrge.w	r6, r6, r3, lsl #17
	return pool->alloc->cb->alloc(buf, size, timeout);
   1bdd2:	f04f 082c 	mov.w	r8, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1bdd6:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1bdd8:	4f2d      	ldr	r7, [pc, #180]	; (1be90 <net_buf_alloc_len+0x154>)
   1bdda:	4632      	mov	r2, r6
   1bddc:	fb08 7303 	mla	r3, r8, r3, r7
   1bde0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1bde2:	a901      	add	r1, sp, #4
   1bde4:	681b      	ldr	r3, [r3, #0]
   1bde6:	4620      	mov	r0, r4
   1bde8:	681b      	ldr	r3, [r3, #0]
   1bdea:	4798      	blx	r3
   1bdec:	4606      	mov	r6, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1bdee:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1bdf0:	bb50      	cbnz	r0, 1be48 <net_buf_alloc_len+0x10c>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
   1bdf2:	79a0      	ldrb	r0, [r4, #6]
   1bdf4:	4621      	mov	r1, r4
   1bdf6:	fb00 7008 	mla	r0, r0, r8, r7
   1bdfa:	f01c ff4d 	bl	38c98 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1bdfe:	4634      	mov	r4, r6
   1be00:	e01e      	b.n	1be40 <net_buf_alloc_len+0x104>
		uninit_count = pool->uninit_count--;
   1be02:	8beb      	ldrh	r3, [r5, #30]
   1be04:	1e5a      	subs	r2, r3, #1
   1be06:	83ea      	strh	r2, [r5, #30]
   1be08:	f38b 8811 	msr	BASEPRI, fp
   1be0c:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   1be10:	2218      	movs	r2, #24
   1be12:	8bac      	ldrh	r4, [r5, #28]
   1be14:	1ae4      	subs	r4, r4, r3
   1be16:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1be18:	fb02 3404 	mla	r4, r2, r4, r3
	return pool - _net_buf_pool_list;
   1be1c:	4b1c      	ldr	r3, [pc, #112]	; (1be90 <net_buf_alloc_len+0x154>)
   1be1e:	1aed      	subs	r5, r5, r3
   1be20:	4b1c      	ldr	r3, [pc, #112]	; (1be94 <net_buf_alloc_len+0x158>)
   1be22:	10ad      	asrs	r5, r5, #2
   1be24:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1be26:	71a5      	strb	r5, [r4, #6]
		goto success;
   1be28:	e7b6      	b.n	1bd98 <net_buf_alloc_len+0x5c>
   1be2a:	f38b 8811 	msr	BASEPRI, fp
   1be2e:	f3bf 8f6f 	isb	sy
   1be32:	4631      	mov	r1, r6
   1be34:	4628      	mov	r0, r5
   1be36:	f010 fe49 	bl	2cacc <z_impl_k_queue_get>
	if (!buf) {
   1be3a:	4604      	mov	r4, r0
   1be3c:	2800      	cmp	r0, #0
   1be3e:	d1ab      	bne.n	1bd98 <net_buf_alloc_len+0x5c>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	pool->avail_count--;
	__ASSERT_NO_MSG(pool->avail_count >= 0);
#endif
	return buf;
}
   1be40:	4620      	mov	r0, r4
   1be42:	b003      	add	sp, #12
   1be44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   1be48:	9b01      	ldr	r3, [sp, #4]
   1be4a:	429d      	cmp	r5, r3
   1be4c:	d90e      	bls.n	1be6c <net_buf_alloc_len+0x130>
   1be4e:	4912      	ldr	r1, [pc, #72]	; (1be98 <net_buf_alloc_len+0x15c>)
   1be50:	f240 1351 	movw	r3, #337	; 0x151
   1be54:	4a0d      	ldr	r2, [pc, #52]	; (1be8c <net_buf_alloc_len+0x150>)
   1be56:	480c      	ldr	r0, [pc, #48]	; (1be88 <net_buf_alloc_len+0x14c>)
   1be58:	f017 fbab 	bl	335b2 <printk>
   1be5c:	480f      	ldr	r0, [pc, #60]	; (1be9c <net_buf_alloc_len+0x160>)
   1be5e:	f017 fba8 	bl	335b2 <printk>
   1be62:	f240 1151 	movw	r1, #337	; 0x151
   1be66:	4809      	ldr	r0, [pc, #36]	; (1be8c <net_buf_alloc_len+0x150>)
   1be68:	f017 fea4 	bl	33bb4 <assert_post_action>
	buf->frags = NULL;
   1be6c:	2300      	movs	r3, #0
   1be6e:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1be70:	2301      	movs	r3, #1
   1be72:	80a3      	strh	r3, [r4, #4]
	buf->size  = size;
   1be74:	9b01      	ldr	r3, [sp, #4]
	net_buf_reset(buf);
   1be76:	4620      	mov	r0, r4
	buf->size  = size;
   1be78:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   1be7a:	f7ff ff37 	bl	1bcec <net_buf_reset>
	return buf;
   1be7e:	e7df      	b.n	1be40 <net_buf_alloc_len+0x104>
		buf->__buf = NULL;
   1be80:	6125      	str	r5, [r4, #16]
   1be82:	e7f3      	b.n	1be6c <net_buf_alloc_len+0x130>
   1be84:	0003d8d8 	.word	0x0003d8d8
   1be88:	0003b773 	.word	0x0003b773
   1be8c:	0003d8fa 	.word	0x0003d8fa
   1be90:	200207f8 	.word	0x200207f8
   1be94:	ba2e8ba3 	.word	0xba2e8ba3
   1be98:	0003d8dd 	.word	0x0003d8dd
   1be9c:	0003cb7f 	.word	0x0003cb7f

0001bea0 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1bea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1bea4:	4604      	mov	r4, r0
   1bea6:	b328      	cbz	r0, 1bef4 <net_buf_unref+0x54>
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1bea8:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1beaa:	272c      	movs	r7, #44	; 0x2c
   1beac:	4d1b      	ldr	r5, [pc, #108]	; (1bf1c <net_buf_unref+0x7c>)
		if (--buf->ref > 0) {
   1beae:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1beb0:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   1beb4:	3b01      	subs	r3, #1
   1beb6:	b2db      	uxtb	r3, r3
   1beb8:	7123      	strb	r3, [r4, #4]
   1beba:	b9cb      	cbnz	r3, 1bef0 <net_buf_unref+0x50>
		if (buf->__buf) {
   1bebc:	6921      	ldr	r1, [r4, #16]
   1bebe:	b159      	cbz	r1, 1bed8 <net_buf_unref+0x38>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1bec0:	7963      	ldrb	r3, [r4, #5]
   1bec2:	079b      	lsls	r3, r3, #30
   1bec4:	d407      	bmi.n	1bed6 <net_buf_unref+0x36>
	pool->alloc->cb->unref(buf, data);
   1bec6:	79a3      	ldrb	r3, [r4, #6]
   1bec8:	4620      	mov	r0, r4
   1beca:	fb07 5303 	mla	r3, r7, r3, r5
   1bece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1bed0:	681b      	ldr	r3, [r3, #0]
   1bed2:	689b      	ldr	r3, [r3, #8]
   1bed4:	4798      	blx	r3
			buf->__buf = NULL;
   1bed6:	6126      	str	r6, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   1bed8:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1beda:	60a6      	str	r6, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		__ASSERT_NO_MSG(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   1bedc:	fb07 5300 	mla	r3, r7, r0, r5
   1bee0:	6a1b      	ldr	r3, [r3, #32]
		buf->frags = NULL;
   1bee2:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   1bee4:	b1a3      	cbz	r3, 1bf10 <net_buf_unref+0x70>
			pool->destroy(buf);
   1bee6:	4620      	mov	r0, r4
   1bee8:	4798      	blx	r3
	while (buf) {
   1beea:	4644      	mov	r4, r8
   1beec:	2c00      	cmp	r4, #0
   1beee:	d1de      	bne.n	1beae <net_buf_unref+0xe>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1bef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   1bef4:	490a      	ldr	r1, [pc, #40]	; (1bf20 <net_buf_unref+0x80>)
   1bef6:	480b      	ldr	r0, [pc, #44]	; (1bf24 <net_buf_unref+0x84>)
   1bef8:	f44f 7303 	mov.w	r3, #524	; 0x20c
   1befc:	4a0a      	ldr	r2, [pc, #40]	; (1bf28 <net_buf_unref+0x88>)
   1befe:	f017 fb58 	bl	335b2 <printk>
}
   1bf02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1bf06:	f44f 7103 	mov.w	r1, #524	; 0x20c
   1bf0a:	4807      	ldr	r0, [pc, #28]	; (1bf28 <net_buf_unref+0x88>)
   1bf0c:	f017 be52 	b.w	33bb4 <assert_post_action>
   1bf10:	4621      	mov	r1, r4
   1bf12:	fb00 5007 	mla	r0, r0, r7, r5
   1bf16:	f01c febf 	bl	38c98 <k_queue_prepend>
   1bf1a:	e7e6      	b.n	1beea <net_buf_unref+0x4a>
   1bf1c:	200207f8 	.word	0x200207f8
   1bf20:	0003d980 	.word	0x0003d980
   1bf24:	0003b773 	.word	0x0003b773
   1bf28:	0003d8fa 	.word	0x0003d8fa

0001bf2c <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1bf2c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   1bf2e:	4604      	mov	r4, r0
   1bf30:	b958      	cbnz	r0, 1bf4a <net_buf_frag_last+0x1e>
   1bf32:	4909      	ldr	r1, [pc, #36]	; (1bf58 <net_buf_frag_last+0x2c>)
   1bf34:	4809      	ldr	r0, [pc, #36]	; (1bf5c <net_buf_frag_last+0x30>)
   1bf36:	f44f 731e 	mov.w	r3, #632	; 0x278
   1bf3a:	4a09      	ldr	r2, [pc, #36]	; (1bf60 <net_buf_frag_last+0x34>)
   1bf3c:	f017 fb39 	bl	335b2 <printk>
   1bf40:	f44f 711e 	mov.w	r1, #632	; 0x278
   1bf44:	4806      	ldr	r0, [pc, #24]	; (1bf60 <net_buf_frag_last+0x34>)
   1bf46:	f017 fe35 	bl	33bb4 <assert_post_action>

	while (buf->frags) {
   1bf4a:	6823      	ldr	r3, [r4, #0]
   1bf4c:	b90b      	cbnz	r3, 1bf52 <net_buf_frag_last+0x26>
		buf = buf->frags;
	}

	return buf;
}
   1bf4e:	4620      	mov	r0, r4
   1bf50:	bd10      	pop	{r4, pc}
   1bf52:	461c      	mov	r4, r3
   1bf54:	e7f9      	b.n	1bf4a <net_buf_frag_last+0x1e>
   1bf56:	bf00      	nop
   1bf58:	0003d980 	.word	0x0003d980
   1bf5c:	0003b773 	.word	0x0003b773
   1bf60:	0003d8fa 	.word	0x0003d8fa

0001bf64 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1bf64:	b538      	push	{r3, r4, r5, lr}
   1bf66:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   1bf68:	4604      	mov	r4, r0
   1bf6a:	b958      	cbnz	r0, 1bf84 <net_buf_frag_insert+0x20>
   1bf6c:	4910      	ldr	r1, [pc, #64]	; (1bfb0 <net_buf_frag_insert+0x4c>)
   1bf6e:	4811      	ldr	r0, [pc, #68]	; (1bfb4 <net_buf_frag_insert+0x50>)
   1bf70:	f240 2383 	movw	r3, #643	; 0x283
   1bf74:	4a10      	ldr	r2, [pc, #64]	; (1bfb8 <net_buf_frag_insert+0x54>)
   1bf76:	f017 fb1c 	bl	335b2 <printk>
   1bf7a:	f240 2183 	movw	r1, #643	; 0x283
   1bf7e:	480e      	ldr	r0, [pc, #56]	; (1bfb8 <net_buf_frag_insert+0x54>)
   1bf80:	f017 fe18 	bl	33bb4 <assert_post_action>
	__ASSERT_NO_MSG(frag);
   1bf84:	b95d      	cbnz	r5, 1bf9e <net_buf_frag_insert+0x3a>
   1bf86:	490d      	ldr	r1, [pc, #52]	; (1bfbc <net_buf_frag_insert+0x58>)
   1bf88:	480a      	ldr	r0, [pc, #40]	; (1bfb4 <net_buf_frag_insert+0x50>)
   1bf8a:	f44f 7321 	mov.w	r3, #644	; 0x284
   1bf8e:	4a0a      	ldr	r2, [pc, #40]	; (1bfb8 <net_buf_frag_insert+0x54>)
   1bf90:	f017 fb0f 	bl	335b2 <printk>
   1bf94:	f44f 7121 	mov.w	r1, #644	; 0x284
   1bf98:	4807      	ldr	r0, [pc, #28]	; (1bfb8 <net_buf_frag_insert+0x54>)
   1bf9a:	f017 fe0b 	bl	33bb4 <assert_post_action>

	if (parent->frags) {
   1bf9e:	6823      	ldr	r3, [r4, #0]
   1bfa0:	b123      	cbz	r3, 1bfac <net_buf_frag_insert+0x48>
		net_buf_frag_last(frag)->frags = parent->frags;
   1bfa2:	4628      	mov	r0, r5
   1bfa4:	f7ff ffc2 	bl	1bf2c <net_buf_frag_last>
   1bfa8:	6823      	ldr	r3, [r4, #0]
   1bfaa:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1bfac:	6025      	str	r5, [r4, #0]
}
   1bfae:	bd38      	pop	{r3, r4, r5, pc}
   1bfb0:	0003d8ee 	.word	0x0003d8ee
   1bfb4:	0003b773 	.word	0x0003b773
   1bfb8:	0003d8fa 	.word	0x0003d8fa
   1bfbc:	0003d8f5 	.word	0x0003d8f5

0001bfc0 <net_buf_simple_add>:
{
	memcpy(clone, original, sizeof(struct net_buf_simple));
}

void *net_buf_simple_add(struct net_buf_simple *buf, size_t len)
{
   1bfc0:	b570      	push	{r4, r5, r6, lr}
	return buf->data + buf->len;
   1bfc2:	6803      	ldr	r3, [r0, #0]
   1bfc4:	8886      	ldrh	r6, [r0, #4]
   1bfc6:	4604      	mov	r4, r0
   1bfc8:	460d      	mov	r5, r1
   1bfca:	441e      	add	r6, r3
	u8_t *tail = net_buf_simple_tail(buf);

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1bfcc:	f019 fa8c 	bl	354e8 <net_buf_simple_tailroom>
   1bfd0:	4288      	cmp	r0, r1
   1bfd2:	d20b      	bcs.n	1bfec <net_buf_simple_add+0x2c>
   1bfd4:	4908      	ldr	r1, [pc, #32]	; (1bff8 <net_buf_simple_add+0x38>)
   1bfd6:	4809      	ldr	r0, [pc, #36]	; (1bffc <net_buf_simple_add+0x3c>)
   1bfd8:	f240 3319 	movw	r3, #793	; 0x319
   1bfdc:	4a08      	ldr	r2, [pc, #32]	; (1c000 <net_buf_simple_add+0x40>)
   1bfde:	f017 fae8 	bl	335b2 <printk>
   1bfe2:	f240 3119 	movw	r1, #793	; 0x319
   1bfe6:	4806      	ldr	r0, [pc, #24]	; (1c000 <net_buf_simple_add+0x40>)
   1bfe8:	f017 fde4 	bl	33bb4 <assert_post_action>

	buf->len += len;
   1bfec:	88a3      	ldrh	r3, [r4, #4]
	return tail;
}
   1bfee:	4630      	mov	r0, r6
	buf->len += len;
   1bff0:	441d      	add	r5, r3
   1bff2:	80a5      	strh	r5, [r4, #4]
}
   1bff4:	bd70      	pop	{r4, r5, r6, pc}
   1bff6:	bf00      	nop
   1bff8:	0003d949 	.word	0x0003d949
   1bffc:	0003b773 	.word	0x0003b773
   1c000:	0003d8fa 	.word	0x0003d8fa

0001c004 <net_ipv4_is_ll_addr>:
 *
 * @return True if it is, false otherwise.
 */
static inline bool net_ipv4_is_ll_addr(const struct in_addr *addr)
{
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xA9FE0000) == 0xA9FE0000;
   1c004:	6803      	ldr	r3, [r0, #0]
   1c006:	4a04      	ldr	r2, [pc, #16]	; (1c018 <net_ipv4_is_ll_addr+0x14>)
   1c008:	ba1b      	rev	r3, r3
   1c00a:	ea32 0303 	bics.w	r3, r2, r3
}
   1c00e:	bf0c      	ite	eq
   1c010:	2001      	moveq	r0, #1
   1c012:	2000      	movne	r0, #0
   1c014:	4770      	bx	lr
   1c016:	bf00      	nop
   1c018:	a9fe0000 	.word	0xa9fe0000

0001c01c <net_if_flag_is_set>:
 *
 * @return True if the value is set, false otherwise
 */
static inline bool net_if_flag_is_set(struct net_if *iface,
				      enum net_if_flag value)
{
   1c01c:	b538      	push	{r3, r4, r5, lr}
   1c01e:	460d      	mov	r5, r1
	NET_ASSERT(iface);
   1c020:	4604      	mov	r4, r0
   1c022:	b970      	cbnz	r0, 1c042 <net_if_flag_is_set+0x26>
   1c024:	490b      	ldr	r1, [pc, #44]	; (1c054 <net_if_flag_is_set+0x38>)
   1c026:	f44f 7307 	mov.w	r3, #540	; 0x21c
   1c02a:	4a0b      	ldr	r2, [pc, #44]	; (1c058 <net_if_flag_is_set+0x3c>)
   1c02c:	480b      	ldr	r0, [pc, #44]	; (1c05c <net_if_flag_is_set+0x40>)
   1c02e:	f017 fac0 	bl	335b2 <printk>
   1c032:	480b      	ldr	r0, [pc, #44]	; (1c060 <net_if_flag_is_set+0x44>)
   1c034:	f017 fabd 	bl	335b2 <printk>
   1c038:	f44f 7107 	mov.w	r1, #540	; 0x21c
   1c03c:	4806      	ldr	r0, [pc, #24]	; (1c058 <net_if_flag_is_set+0x3c>)
   1c03e:	f017 fdb9 	bl	33bb4 <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c042:	6823      	ldr	r3, [r4, #0]
   1c044:	330c      	adds	r3, #12
   1c046:	e8d3 0faf 	lda	r0, [r3]
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1c04a:	4128      	asrs	r0, r5

	return atomic_test_bit(iface->if_dev->flags, value);
}
   1c04c:	f000 0001 	and.w	r0, r0, #1
   1c050:	bd38      	pop	{r3, r4, r5, pc}
   1c052:	bf00      	nop
   1c054:	0003d9ac 	.word	0x0003d9ac
   1c058:	0003d984 	.word	0x0003d984
   1c05c:	0003b773 	.word	0x0003b773
   1c060:	0003cb7f 	.word	0x0003cb7f

0001c064 <iface_router_run_timer>:
	}
}


static void iface_router_run_timer(u32_t current_time)
{
   1c064:	b538      	push	{r3, r4, r5, lr}
   1c066:	4604      	mov	r4, r0
	return k_ticks_to_ms_floor32(z_timeout_remaining(&work->timeout));
   1c068:	4817      	ldr	r0, [pc, #92]	; (1c0c8 <iface_router_run_timer+0x64>)
   1c06a:	f012 fca9 	bl	2e9c0 <z_timeout_remaining>
   1c06e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1c072:	fba0 0103 	umull	r0, r1, r0, r3
   1c076:	0bc3      	lsrs	r3, r0, #15
	struct net_if_router *router, *next;
	u32_t new_timer = UINT_MAX;

	if (k_delayed_work_remaining_get(&router_timer)) {
   1c078:	ea53 4341 	orrs.w	r3, r3, r1, lsl #17
   1c07c:	d002      	beq.n	1c084 <iface_router_run_timer+0x20>
		k_delayed_work_cancel(&router_timer);
   1c07e:	4813      	ldr	r0, [pc, #76]	; (1c0cc <iface_router_run_timer+0x68>)
   1c080:	f012 fb00 	bl	2e684 <k_delayed_work_cancel>
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
   1c084:	4b12      	ldr	r3, [pc, #72]	; (1c0d0 <iface_router_run_timer+0x6c>)
   1c086:	681b      	ldr	r3, [r3, #0]
   1c088:	b1e3      	cbz	r3, 1c0c4 <iface_router_run_timer+0x60>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1c08a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
					 router, next, node) {
		u32_t current_timer = router->life_start +
			(MSEC_PER_SEC * router->lifetime) - current_time;
   1c08e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   1c092:	6819      	ldr	r1, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
   1c094:	b93b      	cbnz	r3, 1c0a6 <iface_router_run_timer+0x42>

		new_timer = MIN(current_timer, new_timer);
	}

	if (new_timer != UINT_MAX) {
   1c096:	1c53      	adds	r3, r2, #1
   1c098:	d014      	beq.n	1c0c4 <iface_router_run_timer+0x60>
		k_delayed_work_submit(&router_timer, K_MSEC(new_timer));
	}
}
   1c09a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1c09e:	490b      	ldr	r1, [pc, #44]	; (1c0cc <iface_router_run_timer+0x68>)
   1c0a0:	480c      	ldr	r0, [pc, #48]	; (1c0d4 <iface_router_run_timer+0x70>)
   1c0a2:	f012 ba5d 	b.w	2e560 <k_delayed_work_submit_to_queue>
			(MSEC_PER_SEC * router->lifetime) - current_time;
   1c0a6:	8c18      	ldrh	r0, [r3, #32]
		u32_t current_timer = router->life_start +
   1c0a8:	69db      	ldr	r3, [r3, #28]
   1c0aa:	1b1b      	subs	r3, r3, r4
   1c0ac:	fb05 3300 	mla	r3, r5, r0, r3
		new_timer = MIN(current_timer, new_timer);
   1c0b0:	429a      	cmp	r2, r3
   1c0b2:	bf28      	it	cs
   1c0b4:	461a      	movcs	r2, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
   1c0b6:	b119      	cbz	r1, 1c0c0 <iface_router_run_timer+0x5c>
   1c0b8:	6808      	ldr	r0, [r1, #0]
   1c0ba:	460b      	mov	r3, r1
   1c0bc:	4601      	mov	r1, r0
   1c0be:	e7e9      	b.n	1c094 <iface_router_run_timer+0x30>
   1c0c0:	4608      	mov	r0, r1
   1c0c2:	e7fa      	b.n	1c0ba <iface_router_run_timer+0x56>
}
   1c0c4:	bd38      	pop	{r3, r4, r5, pc}
   1c0c6:	bf00      	nop
   1c0c8:	200217e4 	.word	0x200217e4
   1c0cc:	200217d8 	.word	0x200217d8
   1c0d0:	20021788 	.word	0x20021788
   1c0d4:	20027524 	.word	0x20027524

0001c0d8 <net_if_flag_set.constprop.32>:
static inline void net_if_flag_set(struct net_if *iface,
   1c0d8:	b510      	push	{r4, lr}
	NET_ASSERT(iface);
   1c0da:	4604      	mov	r4, r0
   1c0dc:	b970      	cbnz	r0, 1c0fc <net_if_flag_set.constprop.32+0x24>
   1c0de:	490d      	ldr	r1, [pc, #52]	; (1c114 <net_if_flag_set.constprop.32+0x3c>)
   1c0e0:	f44f 73f7 	mov.w	r3, #494	; 0x1ee
   1c0e4:	4a0c      	ldr	r2, [pc, #48]	; (1c118 <net_if_flag_set.constprop.32+0x40>)
   1c0e6:	480d      	ldr	r0, [pc, #52]	; (1c11c <net_if_flag_set.constprop.32+0x44>)
   1c0e8:	f017 fa63 	bl	335b2 <printk>
   1c0ec:	480c      	ldr	r0, [pc, #48]	; (1c120 <net_if_flag_set.constprop.32+0x48>)
   1c0ee:	f017 fa60 	bl	335b2 <printk>
   1c0f2:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
   1c0f6:	4808      	ldr	r0, [pc, #32]	; (1c118 <net_if_flag_set.constprop.32+0x40>)
   1c0f8:	f017 fd5c 	bl	33bb4 <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c0fc:	6823      	ldr	r3, [r4, #0]
   1c0fe:	330c      	adds	r3, #12
   1c100:	e8d3 2fef 	ldaex	r2, [r3]
   1c104:	f042 0201 	orr.w	r2, r2, #1
   1c108:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1c10c:	2900      	cmp	r1, #0
   1c10e:	d1f7      	bne.n	1c100 <net_if_flag_set.constprop.32+0x28>
}
   1c110:	bd10      	pop	{r4, pc}
   1c112:	bf00      	nop
   1c114:	0003d9ac 	.word	0x0003d9ac
   1c118:	0003d984 	.word	0x0003d984
   1c11c:	0003b773 	.word	0x0003b773
   1c120:	0003cb7f 	.word	0x0003cb7f

0001c124 <net_if_ipv4_get_best_match.isra.17>:
	}

	return false;
}

static struct in_addr *net_if_ipv4_get_best_match(struct net_if *iface,
   1c124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c126:	4615      	mov	r5, r2
	struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;
	struct in_addr *src = NULL;
	u8_t len;
	int i;

	if (!ipv4) {
   1c128:	4604      	mov	r4, r0
   1c12a:	b310      	cbz	r0, 1c172 <net_if_ipv4_get_best_match.isra.17+0x4e>
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1c12c:	6942      	ldr	r2, [r0, #20]
   1c12e:	4b17      	ldr	r3, [pc, #92]	; (1c18c <net_if_ipv4_get_best_match.isra.17+0x68>)
   1c130:	4013      	ands	r3, r2
   1c132:	4a17      	ldr	r2, [pc, #92]	; (1c190 <net_if_ipv4_get_best_match.isra.17+0x6c>)
   1c134:	4293      	cmp	r3, r2
   1c136:	d001      	beq.n	1c13c <net_if_ipv4_get_best_match.isra.17+0x18>
		return NULL;
   1c138:	2400      	movs	r4, #0
   1c13a:	e01a      	b.n	1c172 <net_if_ipv4_get_best_match.isra.17+0x4e>
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1c13c:	8823      	ldrh	r3, [r4, #0]
   1c13e:	2b01      	cmp	r3, #1
   1c140:	d1fa      	bne.n	1c138 <net_if_ipv4_get_best_match.isra.17+0x14>
	    !net_ipv4_is_ll_addr(&addr->address.in_addr)) {
   1c142:	1d26      	adds	r6, r4, #4
   1c144:	4630      	mov	r0, r6
   1c146:	f7ff ff5d 	bl	1c004 <net_ipv4_is_ll_addr>
	    addr->address.family == AF_INET &&
   1c14a:	2800      	cmp	r0, #0
   1c14c:	d1f4      	bne.n	1c138 <net_if_ipv4_get_best_match.isra.17+0x14>
   1c14e:	3901      	subs	r1, #1
   1c150:	3403      	adds	r4, #3
		if (src[j] == dst[j]) {
   1c152:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1c156:	f814 7f01 	ldrb.w	r7, [r4, #1]!
   1c15a:	f100 0208 	add.w	r2, r0, #8
   1c15e:	42bb      	cmp	r3, r7
   1c160:	d109      	bne.n	1c176 <net_if_ipv4_get_best_match.isra.17+0x52>
			len += 8U;
   1c162:	b2d0      	uxtb	r0, r2
	for (j = 0U; j < addr_len; j++) {
   1c164:	2820      	cmp	r0, #32
   1c166:	d1f4      	bne.n	1c152 <net_if_ipv4_get_best_match.isra.17+0x2e>
		if (!is_proper_ipv4_address(&ipv4->unicast[i])) {
			continue;
		}

		len = get_diff_ipv4(dst, &ipv4->unicast[i].address.in_addr);
		if (len >= *best_so_far) {
   1c168:	782b      	ldrb	r3, [r5, #0]
   1c16a:	4283      	cmp	r3, r0
   1c16c:	d8e4      	bhi.n	1c138 <net_if_ipv4_get_best_match.isra.17+0x14>
		len = get_diff_ipv4(dst, &ipv4->unicast[i].address.in_addr);
   1c16e:	4634      	mov	r4, r6
			*best_so_far = len;
   1c170:	7028      	strb	r0, [r5, #0]
			src = &ipv4->unicast[i].address.in_addr;
		}
	}

	return src;
}
   1c172:	4620      	mov	r0, r4
   1c174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xor = src[j] ^ dst[j];
   1c176:	407b      	eors	r3, r7
			for (k = 0U; k < 8; k++) {
   1c178:	b2d2      	uxtb	r2, r2
				if (!(xor & 0x80)) {
   1c17a:	0619      	lsls	r1, r3, #24
   1c17c:	d4f4      	bmi.n	1c168 <net_if_ipv4_get_best_match.isra.17+0x44>
					len++;
   1c17e:	3001      	adds	r0, #1
   1c180:	b2c0      	uxtb	r0, r0
					xor <<= 1;
   1c182:	005b      	lsls	r3, r3, #1
			for (k = 0U; k < 8; k++) {
   1c184:	4282      	cmp	r2, r0
					xor <<= 1;
   1c186:	b2db      	uxtb	r3, r3
			for (k = 0U; k < 8; k++) {
   1c188:	d1f7      	bne.n	1c17a <net_if_ipv4_get_best_match.isra.17+0x56>
   1c18a:	e7ed      	b.n	1c168 <net_if_ipv4_get_best_match.isra.17+0x44>
   1c18c:	0002ff00 	.word	0x0002ff00
   1c190:	00020100 	.word	0x00020100

0001c194 <iface_router_expired>:
{
   1c194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u32_t current_time = k_uptime_get_32();
   1c196:	f019 fa9b 	bl	356d0 <k_uptime_get_32>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
   1c19a:	4a18      	ldr	r2, [pc, #96]	; (1c1fc <iface_router_expired+0x68>)
   1c19c:	6813      	ldr	r3, [r2, #0]
   1c19e:	b91b      	cbnz	r3, 1c1a8 <iface_router_expired+0x14>
}
   1c1a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	iface_router_run_timer(current_time);
   1c1a4:	f7ff bf5e 	b.w	1c064 <iface_router_run_timer>
   1c1a8:	2100      	movs	r1, #0
			    (MSEC_PER_SEC * router->lifetime) -
   1c1aa:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
	parent->next = child;
   1c1ae:	468c      	mov	ip, r1
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1c1b0:	681c      	ldr	r4, [r3, #0]
   1c1b2:	69de      	ldr	r6, [r3, #28]
   1c1b4:	8c1d      	ldrh	r5, [r3, #32]
   1c1b6:	1a36      	subs	r6, r6, r0
   1c1b8:	fb0e 6505 	mla	r5, lr, r5, r6
		if ((s32_t)(router->life_start +
   1c1bc:	2d00      	cmp	r5, #0
   1c1be:	461f      	mov	r7, r3
   1c1c0:	dc0f      	bgt.n	1c1e2 <iface_router_expired+0x4e>
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   1c1c2:	681d      	ldr	r5, [r3, #0]
   1c1c4:	b999      	cbnz	r1, 1c1ee <iface_router_expired+0x5a>
   1c1c6:	6856      	ldr	r6, [r2, #4]
	list->head = node;
   1c1c8:	6015      	str	r5, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c1ca:	429e      	cmp	r6, r3
   1c1cc:	d100      	bne.n	1c1d0 <iface_router_expired+0x3c>
	list->tail = node;
   1c1ce:	6055      	str	r5, [r2, #4]
		router->is_used = false;
   1c1d0:	460f      	mov	r7, r1
   1c1d2:	f893 5022 	ldrb.w	r5, [r3, #34]	; 0x22
	parent->next = child;
   1c1d6:	f8c3 c000 	str.w	ip, [r3]
   1c1da:	f36c 0500 	bfi	r5, ip, #0, #1
   1c1de:	f883 5022 	strb.w	r5, [r3, #34]	; 0x22
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
   1c1e2:	2c00      	cmp	r4, #0
   1c1e4:	d0dc      	beq.n	1c1a0 <iface_router_expired+0xc>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1c1e6:	4623      	mov	r3, r4
   1c1e8:	4639      	mov	r1, r7
   1c1ea:	6824      	ldr	r4, [r4, #0]
   1c1ec:	e7e1      	b.n	1c1b2 <iface_router_expired+0x1e>
	parent->next = child;
   1c1ee:	600d      	str	r5, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c1f0:	6855      	ldr	r5, [r2, #4]
   1c1f2:	429d      	cmp	r5, r3
	list->tail = node;
   1c1f4:	bf08      	it	eq
   1c1f6:	6051      	streq	r1, [r2, #4]
   1c1f8:	e7ea      	b.n	1c1d0 <iface_router_expired+0x3c>
   1c1fa:	bf00      	nop
   1c1fc:	20021788 	.word	0x20021788

0001c200 <net_if_queue_tx>:
{
   1c200:	b510      	push	{r4, lr}
	u8_t tc = net_tx_priority2tc(prio);
   1c202:	2000      	movs	r0, #0
{
   1c204:	460c      	mov	r4, r1
	u8_t tc = net_tx_priority2tc(prio);
   1c206:	f001 f8e1 	bl	1d3cc <net_tx_priority2tc>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1c20a:	2300      	movs	r3, #0
   1c20c:	4a04      	ldr	r2, [pc, #16]	; (1c220 <net_if_queue_tx+0x20>)
   1c20e:	6023      	str	r3, [r4, #0]
   1c210:	e9c4 2301 	strd	r2, r3, [r4, #4]
	if (!net_tc_submit_to_tx_queue(tc, pkt)) {
   1c214:	4621      	mov	r1, r4
}
   1c216:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (!net_tc_submit_to_tx_queue(tc, pkt)) {
   1c21a:	b2c0      	uxtb	r0, r0
   1c21c:	f001 b8c2 	b.w	1d3a4 <net_tc_submit_to_tx_queue>
   1c220:	0001c3e5 	.word	0x0001c3e5

0001c224 <net_if_get_default>:
}
   1c224:	4b02      	ldr	r3, [pc, #8]	; (1c230 <net_if_get_default+0xc>)
	if (__net_if_start == __net_if_end) {
   1c226:	4803      	ldr	r0, [pc, #12]	; (1c234 <net_if_get_default+0x10>)
}
   1c228:	4298      	cmp	r0, r3
   1c22a:	bf08      	it	eq
   1c22c:	2000      	moveq	r0, #0
   1c22e:	4770      	bx	lr
   1c230:	200208e0 	.word	0x200208e0
   1c234:	200208c0 	.word	0x200208c0

0001c238 <net_if_ipv4_is_addr_bcast>:
{
   1c238:	b570      	push	{r4, r5, r6, lr}
   1c23a:	460e      	mov	r6, r1
	if (iface) {
   1c23c:	b168      	cbz	r0, 1c25a <net_if_ipv4_is_addr_bcast+0x22>
}
   1c23e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return ipv4_is_broadcast_address(iface, addr);
   1c242:	f019 ba66 	b.w	35712 <ipv4_is_broadcast_address>
		ret = ipv4_is_broadcast_address(iface, addr);
   1c246:	4631      	mov	r1, r6
   1c248:	4620      	mov	r0, r4
   1c24a:	f019 fa62 	bl	35712 <ipv4_is_broadcast_address>
		if (ret) {
   1c24e:	b918      	cbnz	r0, 1c258 <net_if_ipv4_is_addr_bcast+0x20>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1c250:	3420      	adds	r4, #32
   1c252:	42ac      	cmp	r4, r5
   1c254:	d1f7      	bne.n	1c246 <net_if_ipv4_is_addr_bcast+0xe>
	return false;
   1c256:	2000      	movs	r0, #0
}
   1c258:	bd70      	pop	{r4, r5, r6, pc}
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1c25a:	4c01      	ldr	r4, [pc, #4]	; (1c260 <net_if_ipv4_is_addr_bcast+0x28>)
   1c25c:	4d01      	ldr	r5, [pc, #4]	; (1c264 <net_if_ipv4_is_addr_bcast+0x2c>)
   1c25e:	e7f8      	b.n	1c252 <net_if_ipv4_is_addr_bcast+0x1a>
   1c260:	200208c0 	.word	0x200208c0
   1c264:	200208e0 	.word	0x200208e0

0001c268 <net_if_ipv4_select_src_iface>:
{
   1c268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1c26a:	4c0a      	ldr	r4, [pc, #40]	; (1c294 <net_if_ipv4_select_src_iface+0x2c>)
{
   1c26c:	4607      	mov	r7, r0
   1c26e:	4625      	mov	r5, r4
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1c270:	4e09      	ldr	r6, [pc, #36]	; (1c298 <net_if_ipv4_select_src_iface+0x30>)
   1c272:	42b4      	cmp	r4, r6
   1c274:	d106      	bne.n	1c284 <net_if_ipv4_select_src_iface+0x1c>
		return NULL;
   1c276:	4b07      	ldr	r3, [pc, #28]	; (1c294 <net_if_ipv4_select_src_iface+0x2c>)
   1c278:	42a5      	cmp	r5, r4
   1c27a:	bf14      	ite	ne
   1c27c:	461c      	movne	r4, r3
   1c27e:	2400      	moveq	r4, #0
}
   1c280:	4620      	mov	r0, r4
   1c282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ret = net_if_ipv4_addr_mask_cmp(iface, dst);
   1c284:	4639      	mov	r1, r7
   1c286:	4620      	mov	r0, r4
   1c288:	f019 fa2f 	bl	356ea <net_if_ipv4_addr_mask_cmp>
		if (ret) {
   1c28c:	2800      	cmp	r0, #0
   1c28e:	d1f7      	bne.n	1c280 <net_if_ipv4_select_src_iface+0x18>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1c290:	3420      	adds	r4, #32
   1c292:	e7ee      	b.n	1c272 <net_if_ipv4_select_src_iface+0xa>
   1c294:	200208c0 	.word	0x200208c0
   1c298:	200208e0 	.word	0x200208e0

0001c29c <net_if_ipv4_select_src_addr>:

const struct in_addr *net_if_ipv4_select_src_addr(struct net_if *dst_iface,
						  const struct in_addr *dst)
{
	struct in_addr *src = NULL;
	u8_t best_match = 0U;
   1c29c:	2300      	movs	r3, #0
{
   1c29e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1c2a2:	4605      	mov	r5, r0
	struct net_if *iface;

	if (!net_ipv4_is_ll_addr(dst) && !net_ipv4_is_addr_mcast(dst)) {
   1c2a4:	4608      	mov	r0, r1
{
   1c2a6:	460e      	mov	r6, r1
	u8_t best_match = 0U;
   1c2a8:	f88d 3007 	strb.w	r3, [sp, #7]
	if (!net_ipv4_is_ll_addr(dst) && !net_ipv4_is_addr_mcast(dst)) {
   1c2ac:	f7ff feaa 	bl	1c004 <net_ipv4_is_ll_addr>
   1c2b0:	bba8      	cbnz	r0, 1c31e <net_if_ipv4_select_src_addr+0x82>
   1c2b2:	4608      	mov	r0, r1
   1c2b4:	f019 f9c6 	bl	35644 <net_ipv4_is_addr_mcast>
   1c2b8:	bb88      	cbnz	r0, 1c31e <net_if_ipv4_select_src_addr+0x82>

		for (iface = __net_if_start;
   1c2ba:	4f1d      	ldr	r7, [pc, #116]	; (1c330 <net_if_ipv4_select_src_addr+0x94>)
	struct in_addr *src = NULL;
   1c2bc:	4604      	mov	r4, r0
		     !dst_iface && iface != __net_if_end;
   1c2be:	f8df 8074 	ldr.w	r8, [pc, #116]	; 1c334 <net_if_ipv4_select_src_addr+0x98>
		for (iface = __net_if_start;
   1c2c2:	b185      	cbz	r5, 1c2e6 <net_if_ipv4_select_src_addr+0x4a>
			}
		}

		/* If caller has supplied interface, then use that */
		if (dst_iface) {
			src = net_if_ipv4_get_best_match(dst_iface, dst,
   1c2c4:	f10d 0207 	add.w	r2, sp, #7
   1c2c8:	6868      	ldr	r0, [r5, #4]
   1c2ca:	f7ff ff2b 	bl	1c124 <net_if_ipv4_get_best_match.isra.17>
				break;
			}
		}

		if (dst_iface) {
			src = net_if_ipv4_get_ll(dst_iface, NET_ADDR_PREFERRED);
   1c2ce:	4604      	mov	r4, r0
   1c2d0:	e00b      	b.n	1c2ea <net_if_ipv4_select_src_addr+0x4e>
			addr = net_if_ipv4_get_best_match(iface, dst,
   1c2d2:	6878      	ldr	r0, [r7, #4]
   1c2d4:	f10d 0207 	add.w	r2, sp, #7
   1c2d8:	4631      	mov	r1, r6
   1c2da:	f7ff ff23 	bl	1c124 <net_if_ipv4_get_best_match.isra.17>
			if (addr) {
   1c2de:	2800      	cmp	r0, #0
   1c2e0:	bf18      	it	ne
   1c2e2:	4604      	movne	r4, r0
		     iface++) {
   1c2e4:	3720      	adds	r7, #32
		     !dst_iface && iface != __net_if_end;
   1c2e6:	4547      	cmp	r7, r8
   1c2e8:	d1f3      	bne.n	1c2d2 <net_if_ipv4_select_src_addr+0x36>
		}
	}

	if (!src) {
   1c2ea:	b16c      	cbz	r4, 1c308 <net_if_ipv4_select_src_addr+0x6c>

		return net_ipv4_unspecified_address();
	}

	return src;
}
   1c2ec:	4620      	mov	r0, r4
   1c2ee:	b002      	add	sp, #8
   1c2f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			addr = net_if_ipv4_get_ll(iface, NET_ADDR_PREFERRED);
   1c2f4:	2101      	movs	r1, #1
   1c2f6:	4630      	mov	r0, r6
   1c2f8:	f019 fa1c 	bl	35734 <net_if_ipv4_get_ll>
			if (addr) {
   1c2fc:	4604      	mov	r4, r0
   1c2fe:	2800      	cmp	r0, #0
   1c300:	d1f4      	bne.n	1c2ec <net_if_ipv4_select_src_addr+0x50>
		     iface++) {
   1c302:	3620      	adds	r6, #32
		     !dst_iface && iface != __net_if_end;
   1c304:	42be      	cmp	r6, r7
   1c306:	d1f5      	bne.n	1c2f4 <net_if_ipv4_select_src_addr+0x58>
		src = net_if_ipv4_get_global_addr(dst_iface,
   1c308:	2101      	movs	r1, #1
   1c30a:	4628      	mov	r0, r5
   1c30c:	f019 fa15 	bl	3573a <net_if_ipv4_get_global_addr>
		if (src) {
   1c310:	4604      	mov	r4, r0
   1c312:	2800      	cmp	r0, #0
   1c314:	d1ea      	bne.n	1c2ec <net_if_ipv4_select_src_addr+0x50>
		return net_ipv4_unspecified_address();
   1c316:	f000 f957 	bl	1c5c8 <net_ipv4_unspecified_address>
   1c31a:	4604      	mov	r4, r0
   1c31c:	e7e6      	b.n	1c2ec <net_if_ipv4_select_src_addr+0x50>
   1c31e:	4e04      	ldr	r6, [pc, #16]	; (1c330 <net_if_ipv4_select_src_addr+0x94>)
		     !dst_iface && iface != __net_if_end;
   1c320:	4f04      	ldr	r7, [pc, #16]	; (1c334 <net_if_ipv4_select_src_addr+0x98>)
		for (iface = __net_if_start;
   1c322:	2d00      	cmp	r5, #0
   1c324:	d0ee      	beq.n	1c304 <net_if_ipv4_select_src_addr+0x68>
			src = net_if_ipv4_get_ll(dst_iface, NET_ADDR_PREFERRED);
   1c326:	2101      	movs	r1, #1
   1c328:	4628      	mov	r0, r5
   1c32a:	f019 fa03 	bl	35734 <net_if_ipv4_get_ll>
   1c32e:	e7ce      	b.n	1c2ce <net_if_ipv4_select_src_addr+0x32>
   1c330:	200208c0 	.word	0x200208c0
   1c334:	200208e0 	.word	0x200208e0

0001c338 <net_if_ipv4_addr_lookup>:

struct net_if_addr *net_if_ipv4_addr_lookup(const struct in_addr *addr,
					    struct net_if **ret)
{
   1c338:	b570      	push	{r4, r5, r6, lr}
	struct net_if *iface;

	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1c33a:	4a0c      	ldr	r2, [pc, #48]	; (1c36c <net_if_ipv4_addr_lookup+0x34>)
   1c33c:	4c0c      	ldr	r4, [pc, #48]	; (1c370 <net_if_ipv4_addr_lookup+0x38>)
   1c33e:	42a2      	cmp	r2, r4
   1c340:	d101      	bne.n	1c346 <net_if_ipv4_addr_lookup+0xe>
				return &ipv4->unicast[i];
			}
		}
	}

	return NULL;
   1c342:	2000      	movs	r0, #0
   1c344:	e00e      	b.n	1c364 <net_if_ipv4_addr_lookup+0x2c>
		struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;
   1c346:	6853      	ldr	r3, [r2, #4]
		if (!ipv4) {
   1c348:	b16b      	cbz	r3, 1c366 <net_if_ipv4_addr_lookup+0x2e>
			if (!ipv4->unicast[i].is_used ||
   1c34a:	7d9d      	ldrb	r5, [r3, #22]
   1c34c:	07ad      	lsls	r5, r5, #30
   1c34e:	d50a      	bpl.n	1c366 <net_if_ipv4_addr_lookup+0x2e>
   1c350:	881d      	ldrh	r5, [r3, #0]
   1c352:	2d01      	cmp	r5, #1
   1c354:	d107      	bne.n	1c366 <net_if_ipv4_addr_lookup+0x2e>
			if (UNALIGNED_GET(&addr->s4_addr32[0]) ==
   1c356:	6805      	ldr	r5, [r0, #0]
   1c358:	685e      	ldr	r6, [r3, #4]
   1c35a:	42ae      	cmp	r6, r5
   1c35c:	d103      	bne.n	1c366 <net_if_ipv4_addr_lookup+0x2e>
				if (ret) {
   1c35e:	b101      	cbz	r1, 1c362 <net_if_ipv4_addr_lookup+0x2a>
					*ret = iface;
   1c360:	600a      	str	r2, [r1, #0]
				return &ipv4->unicast[i];
   1c362:	4618      	mov	r0, r3
}
   1c364:	bd70      	pop	{r4, r5, r6, pc}
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1c366:	3220      	adds	r2, #32
   1c368:	e7e9      	b.n	1c33e <net_if_ipv4_addr_lookup+0x6>
   1c36a:	bf00      	nop
   1c36c:	200208c0 	.word	0x200208c0
   1c370:	200208e0 	.word	0x200208e0

0001c374 <net_if_ipv4_maddr_lookup>:
	return false;
}

struct net_if_mcast_addr *net_if_ipv4_maddr_lookup(const struct in_addr *maddr,
						   struct net_if **ret)
{
   1c374:	b570      	push	{r4, r5, r6, lr}
	struct net_if_mcast_addr *addr;
	struct net_if *iface;

	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1c376:	4a0f      	ldr	r2, [pc, #60]	; (1c3b4 <net_if_ipv4_maddr_lookup+0x40>)
   1c378:	4c0f      	ldr	r4, [pc, #60]	; (1c3b8 <net_if_ipv4_maddr_lookup+0x44>)
   1c37a:	42a2      	cmp	r2, r4
   1c37c:	d101      	bne.n	1c382 <net_if_ipv4_maddr_lookup+0xe>

			return addr;
		}
	}

	return NULL;
   1c37e:	2000      	movs	r0, #0
   1c380:	e00e      	b.n	1c3a0 <net_if_ipv4_maddr_lookup+0x2c>
		if (ret && *ret && iface != *ret) {
   1c382:	b119      	cbz	r1, 1c38c <net_if_ipv4_maddr_lookup+0x18>
   1c384:	680b      	ldr	r3, [r1, #0]
   1c386:	b10b      	cbz	r3, 1c38c <net_if_ipv4_maddr_lookup+0x18>
   1c388:	4293      	cmp	r3, r2
   1c38a:	d10e      	bne.n	1c3aa <net_if_ipv4_maddr_lookup+0x36>
		addr = ipv4_maddr_find(iface, true, maddr);
   1c38c:	6853      	ldr	r3, [r2, #4]
	if (!ipv4) {
   1c38e:	b163      	cbz	r3, 1c3aa <net_if_ipv4_maddr_lookup+0x36>
		if ((is_used && !ipv4->mcast[i].is_used) ||
   1c390:	f893 502c 	ldrb.w	r5, [r3, #44]	; 0x2c
   1c394:	07ed      	lsls	r5, r5, #31
   1c396:	d508      	bpl.n	1c3aa <net_if_ipv4_maddr_lookup+0x36>
		if (addr) {
   1c398:	b918      	cbnz	r0, 1c3a2 <net_if_ipv4_maddr_lookup+0x2e>
		return &ipv4->mcast[i];
   1c39a:	f103 0018 	add.w	r0, r3, #24
			if (ret) {
   1c39e:	b931      	cbnz	r1, 1c3ae <net_if_ipv4_maddr_lookup+0x3a>
}
   1c3a0:	bd70      	pop	{r4, r5, r6, pc}
 *  @return True if the addresses are the same, false otherwise.
 */
static inline bool net_ipv4_addr_cmp(const struct in_addr *addr1,
				     const struct in_addr *addr2)
{
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   1c3a2:	69de      	ldr	r6, [r3, #28]
   1c3a4:	6805      	ldr	r5, [r0, #0]
			if (!net_ipv4_addr_cmp(&ipv4->mcast[i].address.in_addr,
   1c3a6:	42ae      	cmp	r6, r5
   1c3a8:	d0f7      	beq.n	1c39a <net_if_ipv4_maddr_lookup+0x26>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1c3aa:	3220      	adds	r2, #32
   1c3ac:	e7e5      	b.n	1c37a <net_if_ipv4_maddr_lookup+0x6>
				*ret = iface;
   1c3ae:	600a      	str	r2, [r1, #0]
   1c3b0:	e7f6      	b.n	1c3a0 <net_if_ipv4_maddr_lookup+0x2c>
   1c3b2:	bf00      	nop
   1c3b4:	200208c0 	.word	0x200208c0
   1c3b8:	200208e0 	.word	0x200208e0

0001c3bc <net_if_call_link_cb>:
	sys_slist_find_and_remove(&link_callbacks, &link->node);
}

void net_if_call_link_cb(struct net_if *iface, struct net_linkaddr *lladdr,
			 int status)
{
   1c3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct net_if_link_cb *link, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   1c3be:	4b08      	ldr	r3, [pc, #32]	; (1c3e0 <net_if_call_link_cb+0x24>)
{
   1c3c0:	4605      	mov	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   1c3c2:	681b      	ldr	r3, [r3, #0]
{
   1c3c4:	460e      	mov	r6, r1
   1c3c6:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   1c3c8:	b14b      	cbz	r3, 1c3de <net_if_call_link_cb+0x22>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1c3ca:	681c      	ldr	r4, [r3, #0]
		link->cb(iface, lladdr, status);
   1c3cc:	685b      	ldr	r3, [r3, #4]
   1c3ce:	463a      	mov	r2, r7
   1c3d0:	4631      	mov	r1, r6
   1c3d2:	4628      	mov	r0, r5
   1c3d4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   1c3d6:	b114      	cbz	r4, 1c3de <net_if_call_link_cb+0x22>
   1c3d8:	4623      	mov	r3, r4
   1c3da:	6824      	ldr	r4, [r4, #0]
   1c3dc:	e7f6      	b.n	1c3cc <net_if_call_link_cb+0x10>
	}
}
   1c3de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c3e0:	200217d0 	.word	0x200217d0

0001c3e4 <process_tx_packet>:
	struct net_linkaddr ll_dst = {
   1c3e4:	2300      	movs	r3, #0
{
   1c3e6:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c3e8:	b085      	sub	sp, #20
	struct net_linkaddr ll_dst = {
   1c3ea:	e9cd 3300 	strd	r3, r3, [sp]
Z_GENLIST_IS_EMPTY(slist)
   1c3ee:	4b24      	ldr	r3, [pc, #144]	; (1c480 <process_tx_packet+0x9c>)
{
   1c3f0:	4604      	mov	r4, r0
	if (!sys_slist_is_empty(&link_callbacks)) {
   1c3f2:	681b      	ldr	r3, [r3, #0]
	iface = net_pkt_iface(pkt);
   1c3f4:	6a05      	ldr	r5, [r0, #32]
	if (!sys_slist_is_empty(&link_callbacks)) {
   1c3f6:	b1ab      	cbz	r3, 1c424 <process_tx_packet+0x40>
		if (net_linkaddr_set(&ll_dst_storage,
   1c3f8:	6b01      	ldr	r1, [r0, #48]	; 0x30
   1c3fa:	f890 6034 	ldrb.w	r6, [r0, #52]	; 0x34
 * This value should always be <= NET_LINK_ADDR_MAX_LENGTH.
 */
static inline int net_linkaddr_set(struct net_linkaddr_storage *lladdr_store,
				   u8_t *new_addr, u8_t new_len)
{
	if (!lladdr_store || !new_addr) {
   1c3fe:	b189      	cbz	r1, 1c424 <process_tx_packet+0x40>
		return -EINVAL;
	}

	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   1c400:	2e06      	cmp	r6, #6
   1c402:	d80f      	bhi.n	1c424 <process_tx_packet+0x40>
		return -EMSGSIZE;
	}

	lladdr_store->len = new_len;
	memcpy(lladdr_store->addr, new_addr, new_len);
   1c404:	f10d 070a 	add.w	r7, sp, #10
   1c408:	2306      	movs	r3, #6
   1c40a:	4632      	mov	r2, r6
   1c40c:	4638      	mov	r0, r7
	lladdr_store->len = new_len;
   1c40e:	f88d 6009 	strb.w	r6, [sp, #9]
	memcpy(lladdr_store->addr, new_addr, new_len);
   1c412:	f01c fde3 	bl	38fdc <__memcpy_chk>
			ll_dst.type = net_pkt_lladdr_dst(pkt)->type;
   1c416:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
			ll_dst.addr = ll_dst_storage.addr;
   1c41a:	9700      	str	r7, [sp, #0]
			ll_dst.len = ll_dst_storage.len;
   1c41c:	f88d 6004 	strb.w	r6, [sp, #4]
			ll_dst.type = net_pkt_lladdr_dst(pkt)->type;
   1c420:	f88d 3005 	strb.w	r3, [sp, #5]
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   1c424:	2100      	movs	r1, #0
   1c426:	4628      	mov	r0, r5
	context = net_pkt_context(pkt);
   1c428:	69e7      	ldr	r7, [r4, #28]
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   1c42a:	f7ff fdf7 	bl	1c01c <net_if_flag_is_set>
   1c42e:	b320      	cbz	r0, 1c47a <process_tx_packet+0x96>
	return pkt->family;
   1c430:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
		status = net_if_l2(iface)->send(iface, pkt);
   1c434:	4628      	mov	r0, r5
		if (IS_ENABLED(CONFIG_NET_TCP) &&
   1c436:	f013 0f0e 	tst.w	r3, #14
	pkt->pkt_queued = send;
   1c43a:	bf1e      	ittt	ne
   1c43c:	f894 303e 	ldrbne.w	r3, [r4, #62]	; 0x3e
   1c440:	f36f 0300 	bfcne	r3, #0, #1
   1c444:	f884 303e 	strbne.w	r3, [r4, #62]	; 0x3e
		status = net_if_l2(iface)->send(iface, pkt);
   1c448:	f019 f905 	bl	35656 <net_if_l2>
   1c44c:	4621      	mov	r1, r4
   1c44e:	6843      	ldr	r3, [r0, #4]
   1c450:	4628      	mov	r0, r5
   1c452:	4798      	blx	r3
	if (status < 0) {
   1c454:	1e06      	subs	r6, r0, #0
   1c456:	da02      	bge.n	1c45e <process_tx_packet+0x7a>
		net_pkt_unref(pkt);
   1c458:	4620      	mov	r0, r4
   1c45a:	f019 fc32 	bl	35cc2 <net_pkt_unref>
	if (context) {
   1c45e:	b11f      	cbz	r7, 1c468 <process_tx_packet+0x84>
		net_context_send_cb(context, status);
   1c460:	4631      	mov	r1, r6
   1c462:	4638      	mov	r0, r7
   1c464:	f019 f8fc 	bl	35660 <net_context_send_cb>
	if (ll_dst.addr) {
   1c468:	9b00      	ldr	r3, [sp, #0]
   1c46a:	b123      	cbz	r3, 1c476 <process_tx_packet+0x92>
		net_if_call_link_cb(iface, &ll_dst, status);
   1c46c:	4632      	mov	r2, r6
   1c46e:	4669      	mov	r1, sp
   1c470:	4628      	mov	r0, r5
   1c472:	f7ff ffa3 	bl	1c3bc <net_if_call_link_cb>
}
   1c476:	b005      	add	sp, #20
   1c478:	bdf0      	pop	{r4, r5, r6, r7, pc}
		status = -ENETDOWN;
   1c47a:	f06f 0672 	mvn.w	r6, #114	; 0x72
   1c47e:	e7eb      	b.n	1c458 <process_tx_packet+0x74>
   1c480:	200217d0 	.word	0x200217d0

0001c484 <net_if_get_by_index>:
	return need_calc_checksum(iface, ETHERNET_HW_RX_CHKSUM_OFFLOAD);
}

struct net_if *net_if_get_by_index(int index)
{
	if (index <= 0) {
   1c484:	2800      	cmp	r0, #0
   1c486:	dd08      	ble.n	1c49a <net_if_get_by_index+0x16>
		return NULL;
	}

	if (&__net_if_start[index - 1] >= __net_if_end) {
   1c488:	1e43      	subs	r3, r0, #1
   1c48a:	4805      	ldr	r0, [pc, #20]	; (1c4a0 <net_if_get_by_index+0x1c>)
   1c48c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
		return NULL;
   1c490:	4b04      	ldr	r3, [pc, #16]	; (1c4a4 <net_if_get_by_index+0x20>)
   1c492:	4298      	cmp	r0, r3
   1c494:	bf28      	it	cs
   1c496:	2000      	movcs	r0, #0
   1c498:	4770      	bx	lr
   1c49a:	2000      	movs	r0, #0
		NET_DBG("Index %d is too large", index);
		return NULL;
	}

	return &__net_if_start[index - 1];
}
   1c49c:	4770      	bx	lr
   1c49e:	bf00      	nop
   1c4a0:	200208c0 	.word	0x200208c0
   1c4a4:	200208e0 	.word	0x200208e0

0001c4a8 <net_if_get_by_iface>:

int net_if_get_by_iface(struct net_if *iface)
{
	if (!(iface >= __net_if_start && iface < __net_if_end)) {
   1c4a8:	4b06      	ldr	r3, [pc, #24]	; (1c4c4 <net_if_get_by_iface+0x1c>)
   1c4aa:	4298      	cmp	r0, r3
   1c4ac:	d306      	bcc.n	1c4bc <net_if_get_by_iface+0x14>
   1c4ae:	4a06      	ldr	r2, [pc, #24]	; (1c4c8 <net_if_get_by_iface+0x20>)
   1c4b0:	4290      	cmp	r0, r2
   1c4b2:	d203      	bcs.n	1c4bc <net_if_get_by_iface+0x14>
		return -1;
	}

	return (iface - __net_if_start) + 1;
   1c4b4:	1ac0      	subs	r0, r0, r3
   1c4b6:	1140      	asrs	r0, r0, #5
   1c4b8:	3001      	adds	r0, #1
   1c4ba:	4770      	bx	lr
		return -1;
   1c4bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1c4c0:	4770      	bx	lr
   1c4c2:	bf00      	nop
   1c4c4:	200208c0 	.word	0x200208c0
   1c4c8:	200208e0 	.word	0x200208e0

0001c4cc <net_if_up>:
		cb(iface, user_data);
	}
}

int net_if_up(struct net_if *iface)
{
   1c4cc:	b538      	push	{r3, r4, r5, lr}
	int status;

	NET_DBG("iface %p", iface);

	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   1c4ce:	2100      	movs	r1, #0
{
   1c4d0:	4605      	mov	r5, r0
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   1c4d2:	f7ff fda3 	bl	1c01c <net_if_flag_is_set>
   1c4d6:	b928      	cbnz	r0, 1c4e4 <net_if_up+0x18>
 * @return True if socket offloading is active, false otherwise.
 */
static inline bool net_if_is_socket_offloaded(struct net_if *iface)
{
#if defined(CONFIG_NET_SOCKETS_OFFLOAD)
	return iface->if_dev->offloaded;
   1c4d8:	682b      	ldr	r3, [r5, #0]

	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
	     net_if_is_ip_offloaded(iface)) ||
	    (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD) &&
	     net_if_is_socket_offloaded(iface))) {
		net_if_flag_set(iface, NET_IF_UP);
   1c4da:	4628      	mov	r0, r5
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   1c4dc:	7e9b      	ldrb	r3, [r3, #26]
   1c4de:	b11b      	cbz	r3, 1c4e8 <net_if_up+0x1c>
		net_if_flag_set(iface, NET_IF_UP);
   1c4e0:	f7ff fdfa 	bl	1c0d8 <net_if_flag_set.constprop.32>
		return 0;
   1c4e4:	2000      	movs	r0, #0
   1c4e6:	e023      	b.n	1c530 <net_if_up+0x64>
		goto exit;
	}

	/* If the L2 does not support enable just set the flag */
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   1c4e8:	f019 f8b5 	bl	35656 <net_if_l2>
   1c4ec:	b9c0      	cbnz	r0, 1c520 <net_if_up+0x54>

done:
	/* In many places it's assumed that link address was set with
	 * net_if_set_link_addr(). Better check that now.
	 */
	NET_ASSERT(net_if_get_link_addr(iface)->addr != NULL);
   1c4ee:	682b      	ldr	r3, [r5, #0]
   1c4f0:	691b      	ldr	r3, [r3, #16]
   1c4f2:	b973      	cbnz	r3, 1c512 <net_if_up+0x46>
   1c4f4:	490f      	ldr	r1, [pc, #60]	; (1c534 <net_if_up+0x68>)
   1c4f6:	f640 53ba 	movw	r3, #3514	; 0xdba
   1c4fa:	4a0f      	ldr	r2, [pc, #60]	; (1c538 <net_if_up+0x6c>)
   1c4fc:	480f      	ldr	r0, [pc, #60]	; (1c53c <net_if_up+0x70>)
   1c4fe:	f017 f858 	bl	335b2 <printk>
   1c502:	480f      	ldr	r0, [pc, #60]	; (1c540 <net_if_up+0x74>)
   1c504:	f017 f855 	bl	335b2 <printk>
   1c508:	f640 51ba 	movw	r1, #3514	; 0xdba
   1c50c:	480a      	ldr	r0, [pc, #40]	; (1c538 <net_if_up+0x6c>)
   1c50e:	f017 fb51 	bl	33bb4 <assert_post_action>

	net_if_flag_set(iface, NET_IF_UP);
   1c512:	4628      	mov	r0, r5
   1c514:	f7ff fde0 	bl	1c0d8 <net_if_flag_set.constprop.32>

	/* If the interface is only having point-to-point traffic then we do
	 * not need to run DAD etc for it.
	 */
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   1c518:	4628      	mov	r0, r5
   1c51a:	f019 f8a7 	bl	3566c <l2_flags_get>
   1c51e:	e7e1      	b.n	1c4e4 <net_if_up+0x18>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   1c520:	6883      	ldr	r3, [r0, #8]
   1c522:	2b00      	cmp	r3, #0
   1c524:	d0e3      	beq.n	1c4ee <net_if_up+0x22>
	status = net_if_l2(iface)->enable(iface, true);
   1c526:	2101      	movs	r1, #1
   1c528:	4628      	mov	r0, r5
   1c52a:	4798      	blx	r3
	if (status < 0) {
   1c52c:	2800      	cmp	r0, #0
   1c52e:	dade      	bge.n	1c4ee <net_if_up+0x22>

exit:
	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

	return 0;
}
   1c530:	bd38      	pop	{r3, r4, r5, pc}
   1c532:	bf00      	nop
   1c534:	0003d9b2 	.word	0x0003d9b2
   1c538:	0003d9e3 	.word	0x0003d9e3
   1c53c:	0003b773 	.word	0x0003b773
   1c540:	0003cb7f 	.word	0x0003cb7f

0001c544 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   1c544:	b570      	push	{r4, r5, r6, lr}

	NET_DBG("");

	net_tc_tx_init();

	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
   1c546:	4c10      	ldr	r4, [pc, #64]	; (1c588 <net_if_init+0x44>)
	net_tc_tx_init();
   1c548:	f000 ff48 	bl	1d3dc <net_tc_tx_init>
	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
   1c54c:	4625      	mov	r5, r4
   1c54e:	4e0f      	ldr	r6, [pc, #60]	; (1c58c <net_if_init+0x48>)
   1c550:	42b4      	cmp	r4, r6
   1c552:	d10e      	bne.n	1c572 <net_if_init+0x2e>
	     iface++, if_count++) {
		init_iface(iface);
	}

	if (iface == __net_if_start) {
   1c554:	42ac      	cmp	r4, r5
   1c556:	d00b      	beq.n	1c570 <net_if_init+0x2c>
		ipv4_addresses[i].ipv4.ttl = CONFIG_NET_INITIAL_TTL;
   1c558:	2240      	movs	r2, #64	; 0x40
   1c55a:	4b0d      	ldr	r3, [pc, #52]	; (1c590 <net_if_init+0x4c>)
	k_delayed_work_init(&router_timer, iface_router_expired);
   1c55c:	490d      	ldr	r1, [pc, #52]	; (1c594 <net_if_init+0x50>)
		ipv4_addresses[i].ipv4.ttl = CONFIG_NET_INITIAL_TTL;
   1c55e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	k_delayed_work_init(&router_timer, iface_router_expired);
   1c562:	480d      	ldr	r0, [pc, #52]	; (1c598 <net_if_init+0x54>)
   1c564:	f01c fc53 	bl	38e0e <k_delayed_work_init>
	list->head = NULL;
   1c568:	2200      	movs	r2, #0
   1c56a:	4b0c      	ldr	r3, [pc, #48]	; (1c59c <net_if_init+0x58>)
	list->tail = NULL;
   1c56c:	e9c3 2200 	strd	r2, r2, [r3]
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
   1c570:	bd70      	pop	{r4, r5, r6, pc}
	return iface->if_dev->dev;
   1c572:	6823      	ldr	r3, [r4, #0]
	const struct net_if_api *api = net_if_get_device(iface)->driver_api;
   1c574:	681b      	ldr	r3, [r3, #0]
   1c576:	689b      	ldr	r3, [r3, #8]
	if (!api || !api->init) {
   1c578:	b11b      	cbz	r3, 1c582 <net_if_init+0x3e>
   1c57a:	681b      	ldr	r3, [r3, #0]
   1c57c:	b10b      	cbz	r3, 1c582 <net_if_init+0x3e>
	api->init(iface);
   1c57e:	4620      	mov	r0, r4
   1c580:	4798      	blx	r3
	     iface++, if_count++) {
   1c582:	3420      	adds	r4, #32
   1c584:	e7e4      	b.n	1c550 <net_if_init+0xc>
   1c586:	bf00      	nop
   1c588:	200208c0 	.word	0x200208c0
   1c58c:	200208e0 	.word	0x200208e0
   1c590:	20021790 	.word	0x20021790
   1c594:	0001c195 	.word	0x0001c195
   1c598:	200217d8 	.word	0x200217d8
   1c59c:	20021788 	.word	0x20021788

0001c5a0 <net_if_post_init>:

void net_if_post_init(void)
{
   1c5a0:	b538      	push	{r3, r4, r5, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1c5a2:	4c07      	ldr	r4, [pc, #28]	; (1c5c0 <net_if_post_init+0x20>)
   1c5a4:	4d07      	ldr	r5, [pc, #28]	; (1c5c4 <net_if_post_init+0x24>)
   1c5a6:	42ac      	cmp	r4, r5
   1c5a8:	d100      	bne.n	1c5ac <net_if_post_init+0xc>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   1c5aa:	bd38      	pop	{r3, r4, r5, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   1c5ac:	2103      	movs	r1, #3
   1c5ae:	4620      	mov	r0, r4
   1c5b0:	f7ff fd34 	bl	1c01c <net_if_flag_is_set>
   1c5b4:	b910      	cbnz	r0, 1c5bc <net_if_post_init+0x1c>
			net_if_up(iface);
   1c5b6:	4620      	mov	r0, r4
   1c5b8:	f7ff ff88 	bl	1c4cc <net_if_up>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1c5bc:	3420      	adds	r4, #32
   1c5be:	e7f2      	b.n	1c5a6 <net_if_post_init+0x6>
   1c5c0:	200208c0 	.word	0x200208c0
   1c5c4:	200208e0 	.word	0x200208e0

0001c5c8 <net_ipv4_unspecified_address>:
const struct in_addr *net_ipv4_unspecified_address(void)
{
	static const struct in_addr addr;

	return &addr;
}
   1c5c8:	4800      	ldr	r0, [pc, #0]	; (1c5cc <net_ipv4_unspecified_address+0x4>)
   1c5ca:	4770      	bx	lr
   1c5cc:	0003a4e4 	.word	0x0003a4e4

0001c5d0 <net_ipv4_broadcast_address>:
const struct in_addr *net_ipv4_broadcast_address(void)
{
	static const struct in_addr addr = { { { 255, 255, 255, 255 } } };

	return &addr;
}
   1c5d0:	4800      	ldr	r0, [pc, #0]	; (1c5d4 <net_ipv4_broadcast_address+0x4>)
   1c5d2:	4770      	bx	lr
   1c5d4:	0003a4e8 	.word	0x0003a4e8

0001c5d8 <net_context_is_used>:
{
   1c5d8:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   1c5da:	4604      	mov	r4, r0
   1c5dc:	b970      	cbnz	r0, 1c5fc <net_context_is_used+0x24>
   1c5de:	490a      	ldr	r1, [pc, #40]	; (1c608 <net_context_is_used+0x30>)
   1c5e0:	f44f 73a9 	mov.w	r3, #338	; 0x152
   1c5e4:	4a09      	ldr	r2, [pc, #36]	; (1c60c <net_context_is_used+0x34>)
   1c5e6:	480a      	ldr	r0, [pc, #40]	; (1c610 <net_context_is_used+0x38>)
   1c5e8:	f016 ffe3 	bl	335b2 <printk>
   1c5ec:	4809      	ldr	r0, [pc, #36]	; (1c614 <net_context_is_used+0x3c>)
   1c5ee:	f016 ffe0 	bl	335b2 <printk>
   1c5f2:	f44f 71a9 	mov.w	r1, #338	; 0x152
   1c5f6:	4805      	ldr	r0, [pc, #20]	; (1c60c <net_context_is_used+0x34>)
   1c5f8:	f017 fadc 	bl	33bb4 <assert_post_action>
	return context->flags & NET_CONTEXT_IN_USE;
   1c5fc:	f894 007a 	ldrb.w	r0, [r4, #122]	; 0x7a
}
   1c600:	f000 0001 	and.w	r0, r0, #1
   1c604:	bd10      	pop	{r4, pc}
   1c606:	bf00      	nop
   1c608:	0003cb77 	.word	0x0003cb77
   1c60c:	0003cb4a 	.word	0x0003cb4a
   1c610:	0003b773 	.word	0x0003b773
   1c614:	0003cb7f 	.word	0x0003cb7f

0001c618 <check_used_port>:
#if defined(CONFIG_NET_UDP) || defined(CONFIG_NET_TCP)
static int check_used_port(enum net_ip_protocol ip_proto,
			   u16_t local_port,
			   const struct sockaddr *local_addr)

{
   1c618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c61c:	460f      	mov	r7, r1
   1c61e:	4615      	mov	r5, r2
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
		if (!net_context_is_used(&contexts[i])) {
			continue;
		}

		if (!(net_context_get_ip_proto(&contexts[i]) == ip_proto &&
   1c620:	4680      	mov	r8, r0
   1c622:	4c0f      	ldr	r4, [pc, #60]	; (1c660 <check_used_port+0x48>)
   1c624:	f504 7640 	add.w	r6, r4, #768	; 0x300
		if (!net_context_is_used(&contexts[i])) {
   1c628:	4620      	mov	r0, r4
   1c62a:	f7ff ffd5 	bl	1c5d8 <net_context_is_used>
   1c62e:	b170      	cbz	r0, 1c64e <check_used_port+0x36>
		if (!(net_context_get_ip_proto(&contexts[i]) == ip_proto &&
   1c630:	f8b4 3078 	ldrh.w	r3, [r4, #120]	; 0x78
   1c634:	4543      	cmp	r3, r8
   1c636:	d10a      	bne.n	1c64e <check_used_port+0x36>
   1c638:	8be3      	ldrh	r3, [r4, #30]
   1c63a:	42bb      	cmp	r3, r7
   1c63c:	d107      	bne.n	1c64e <check_used_port+0x36>
							     sin6_addr,
				    &((struct sockaddr_in6 *)
				      local_addr)->sin6_addr)) {
				return -EEXIST;
			}
		} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1c63e:	882b      	ldrh	r3, [r5, #0]
   1c640:	2b01      	cmp	r3, #1
   1c642:	d104      	bne.n	1c64e <check_used_port+0x36>
   1c644:	6a23      	ldr	r3, [r4, #32]
   1c646:	686a      	ldr	r2, [r5, #4]
   1c648:	681b      	ldr	r3, [r3, #0]
			   local_addr->sa_family == AF_INET) {
			if (net_ipv4_addr_cmp(
   1c64a:	429a      	cmp	r2, r3
   1c64c:	d005      	beq.n	1c65a <check_used_port+0x42>
   1c64e:	3480      	adds	r4, #128	; 0x80
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1c650:	42b4      	cmp	r4, r6
   1c652:	d1e9      	bne.n	1c628 <check_used_port+0x10>
				return -EEXIST;
			}
		}
	}

	return 0;
   1c654:	2000      	movs	r0, #0
}
   1c656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return -EEXIST;
   1c65a:	f06f 0010 	mvn.w	r0, #16
   1c65e:	e7fa      	b.n	1c656 <check_used_port+0x3e>
   1c660:	200217f8 	.word	0x200217f8

0001c664 <net_context_get_state>:
{
   1c664:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   1c666:	4604      	mov	r4, r0
   1c668:	b970      	cbnz	r0, 1c688 <net_context_get_state+0x24>
   1c66a:	490a      	ldr	r1, [pc, #40]	; (1c694 <net_context_get_state+0x30>)
   1c66c:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
   1c670:	4a09      	ldr	r2, [pc, #36]	; (1c698 <net_context_get_state+0x34>)
   1c672:	480a      	ldr	r0, [pc, #40]	; (1c69c <net_context_get_state+0x38>)
   1c674:	f016 ff9d 	bl	335b2 <printk>
   1c678:	4809      	ldr	r0, [pc, #36]	; (1c6a0 <net_context_get_state+0x3c>)
   1c67a:	f016 ff9a 	bl	335b2 <printk>
   1c67e:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
   1c682:	4805      	ldr	r0, [pc, #20]	; (1c698 <net_context_get_state+0x34>)
   1c684:	f017 fa96 	bl	33bb4 <assert_post_action>
		((context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1c688:	f8b4 007a 	ldrh.w	r0, [r4, #122]	; 0x7a
}
   1c68c:	f3c0 0041 	ubfx	r0, r0, #1, #2
   1c690:	bd10      	pop	{r4, pc}
   1c692:	bf00      	nop
   1c694:	0003cb77 	.word	0x0003cb77
   1c698:	0003cb4a 	.word	0x0003cb4a
   1c69c:	0003b773 	.word	0x0003b773
   1c6a0:	0003cb7f 	.word	0x0003cb7f

0001c6a4 <net_context_get_family>:
{
   1c6a4:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   1c6a6:	4604      	mov	r4, r0
   1c6a8:	b970      	cbnz	r0, 1c6c8 <net_context_get_family+0x24>
   1c6aa:	490a      	ldr	r1, [pc, #40]	; (1c6d4 <net_context_get_family+0x30>)
   1c6ac:	f240 13cb 	movw	r3, #459	; 0x1cb
   1c6b0:	4a09      	ldr	r2, [pc, #36]	; (1c6d8 <net_context_get_family+0x34>)
   1c6b2:	480a      	ldr	r0, [pc, #40]	; (1c6dc <net_context_get_family+0x38>)
   1c6b4:	f016 ff7d 	bl	335b2 <printk>
   1c6b8:	4809      	ldr	r0, [pc, #36]	; (1c6e0 <net_context_get_family+0x3c>)
   1c6ba:	f016 ff7a 	bl	335b2 <printk>
   1c6be:	f240 11cb 	movw	r1, #459	; 0x1cb
   1c6c2:	4805      	ldr	r0, [pc, #20]	; (1c6d8 <net_context_get_family+0x34>)
   1c6c4:	f017 fa76 	bl	33bb4 <assert_post_action>
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
   1c6c8:	f8b4 007a 	ldrh.w	r0, [r4, #122]	; 0x7a
}
   1c6cc:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   1c6d0:	bd10      	pop	{r4, pc}
   1c6d2:	bf00      	nop
   1c6d4:	0003cb77 	.word	0x0003cb77
   1c6d8:	0003cb4a 	.word	0x0003cb4a
   1c6dc:	0003b773 	.word	0x0003b773
   1c6e0:	0003cb7f 	.word	0x0003cb7f

0001c6e4 <net_context_get_type>:
{
   1c6e4:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   1c6e6:	4604      	mov	r4, r0
   1c6e8:	b970      	cbnz	r0, 1c708 <net_context_get_type+0x24>
   1c6ea:	490a      	ldr	r1, [pc, #40]	; (1c714 <net_context_get_type+0x30>)
   1c6ec:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
   1c6f0:	4a09      	ldr	r2, [pc, #36]	; (1c718 <net_context_get_type+0x34>)
   1c6f2:	480a      	ldr	r0, [pc, #40]	; (1c71c <net_context_get_type+0x38>)
   1c6f4:	f016 ff5d 	bl	335b2 <printk>
   1c6f8:	4809      	ldr	r0, [pc, #36]	; (1c720 <net_context_get_type+0x3c>)
   1c6fa:	f016 ff5a 	bl	335b2 <printk>
   1c6fe:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
   1c702:	4805      	ldr	r0, [pc, #20]	; (1c718 <net_context_get_type+0x34>)
   1c704:	f017 fa56 	bl	33bb4 <assert_post_action>
	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
   1c708:	f8b4 007a 	ldrh.w	r0, [r4, #122]	; 0x7a
}
   1c70c:	f3c0 1081 	ubfx	r0, r0, #6, #2
   1c710:	bd10      	pop	{r4, pc}
   1c712:	bf00      	nop
   1c714:	0003cb77 	.word	0x0003cb77
   1c718:	0003cb4a 	.word	0x0003cb4a
   1c71c:	0003b773 	.word	0x0003b773
   1c720:	0003cb7f 	.word	0x0003cb7f

0001c724 <find_available_port>:

static u16_t find_available_port(struct net_context *context,
				    const struct sockaddr *addr)
{
   1c724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c726:	4605      	mov	r5, r0
   1c728:	460e      	mov	r6, r1
	u16_t local_port;

	do {
		local_port = sys_rand32_get() | 0x8000;
   1c72a:	4f08      	ldr	r7, [pc, #32]	; (1c74c <find_available_port+0x28>)
   1c72c:	f002 faea 	bl	1ed04 <sys_rand32_get>
   1c730:	ea40 0407 	orr.w	r4, r0, r7
   1c734:	ba64      	rev16	r4, r4
   1c736:	b2a4      	uxth	r4, r4
		if (local_port <= 1023U) {
			/* 0 - 1023 ports are reserved */
			continue;
		}
	} while (check_used_port(net_context_get_ip_proto(context),
   1c738:	4632      	mov	r2, r6
   1c73a:	4621      	mov	r1, r4
   1c73c:	f895 0078 	ldrb.w	r0, [r5, #120]	; 0x78
   1c740:	f7ff ff6a 	bl	1c618 <check_used_port>
				 htons(local_port), addr) == -EEXIST);
   1c744:	3011      	adds	r0, #17
   1c746:	d0f1      	beq.n	1c72c <find_available_port+0x8>

	return htons(local_port);
}
   1c748:	4620      	mov	r0, r4
   1c74a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c74c:	ffff8000 	.word	0xffff8000

0001c750 <net_context_set_iface.isra.16>:
 * @details This function binds network interface to this context.
 *
 * @param context Network context.
 * @param iface Network interface.
 */
static inline void net_context_set_iface(struct net_context *context,
   1c750:	b538      	push	{r3, r4, r5, lr}
   1c752:	4605      	mov	r5, r0
					 struct net_if *iface)
{
	NET_ASSERT(iface);
   1c754:	460c      	mov	r4, r1
   1c756:	b971      	cbnz	r1, 1c776 <net_context_set_iface.isra.16+0x26>
   1c758:	4909      	ldr	r1, [pc, #36]	; (1c780 <net_context_set_iface.isra.16+0x30>)
   1c75a:	f240 2381 	movw	r3, #641	; 0x281
   1c75e:	4a09      	ldr	r2, [pc, #36]	; (1c784 <net_context_set_iface.isra.16+0x34>)
   1c760:	4809      	ldr	r0, [pc, #36]	; (1c788 <net_context_set_iface.isra.16+0x38>)
   1c762:	f016 ff26 	bl	335b2 <printk>
   1c766:	4809      	ldr	r0, [pc, #36]	; (1c78c <net_context_set_iface.isra.16+0x3c>)
   1c768:	f016 ff23 	bl	335b2 <printk>
   1c76c:	f240 2181 	movw	r1, #641	; 0x281
   1c770:	4804      	ldr	r0, [pc, #16]	; (1c784 <net_context_set_iface.isra.16+0x34>)
   1c772:	f017 fa1f 	bl	33bb4 <assert_post_action>

	context->iface = net_if_get_by_iface(iface);
   1c776:	4620      	mov	r0, r4
   1c778:	f7ff fe96 	bl	1c4a8 <net_if_get_by_iface>
   1c77c:	7028      	strb	r0, [r5, #0]
}
   1c77e:	bd38      	pop	{r3, r4, r5, pc}
   1c780:	0003d9ac 	.word	0x0003d9ac
   1c784:	0003cb4a 	.word	0x0003cb4a
   1c788:	0003b773 	.word	0x0003b773
   1c78c:	0003cb7f 	.word	0x0003cb7f

0001c790 <net_context_packet_received>:
enum net_verdict net_context_packet_received(struct net_conn *conn,
					     struct net_pkt *pkt,
					     union net_ip_header *ip_hdr,
					     union net_proto_header *proto_hdr,
					     void *user_data)
{
   1c790:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1c794:	4682      	mov	sl, r0
   1c796:	460e      	mov	r6, r1
   1c798:	4690      	mov	r8, r2
   1c79a:	4699      	mov	r9, r3
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1c79c:	2700      	movs	r7, #0
   1c79e:	4d2a      	ldr	r5, [pc, #168]	; (1c848 <net_context_packet_received+0xb8>)
		if (!net_context_is_used(&contexts[i])) {
   1c7a0:	4628      	mov	r0, r5
   1c7a2:	462c      	mov	r4, r5
   1c7a4:	f7ff ff18 	bl	1c5d8 <net_context_is_used>
   1c7a8:	b110      	cbz	r0, 1c7b0 <net_context_packet_received+0x20>
		if (contexts[i].conn_handler == conn_handler) {
   1c7aa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1c7ac:	459a      	cmp	sl, r3
   1c7ae:	d014      	beq.n	1c7da <net_context_packet_received+0x4a>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1c7b0:	3701      	adds	r7, #1
   1c7b2:	2f06      	cmp	r7, #6
   1c7b4:	f105 0580 	add.w	r5, r5, #128	; 0x80
   1c7b8:	d1f2      	bne.n	1c7a0 <net_context_packet_received+0x10>
	struct net_context *context = find_context(conn);
	enum net_verdict verdict = NET_DROP;

	NET_ASSERT(context);
   1c7ba:	f240 63b9 	movw	r3, #1721	; 0x6b9
   1c7be:	4a23      	ldr	r2, [pc, #140]	; (1c84c <net_context_packet_received+0xbc>)
   1c7c0:	4923      	ldr	r1, [pc, #140]	; (1c850 <net_context_packet_received+0xc0>)
   1c7c2:	4824      	ldr	r0, [pc, #144]	; (1c854 <net_context_packet_received+0xc4>)
   1c7c4:	f016 fef5 	bl	335b2 <printk>
   1c7c8:	4823      	ldr	r0, [pc, #140]	; (1c858 <net_context_packet_received+0xc8>)
   1c7ca:	f016 fef2 	bl	335b2 <printk>
   1c7ce:	f240 61b9 	movw	r1, #1721	; 0x6b9
   1c7d2:	481e      	ldr	r0, [pc, #120]	; (1c84c <net_context_packet_received+0xbc>)
   1c7d4:	f017 f9ee 	bl	33bb4 <assert_post_action>
	return NULL;
   1c7d8:	2400      	movs	r4, #0
	NET_ASSERT(net_pkt_iface(pkt));
   1c7da:	6a33      	ldr	r3, [r6, #32]
   1c7dc:	b973      	cbnz	r3, 1c7fc <net_context_packet_received+0x6c>
   1c7de:	491f      	ldr	r1, [pc, #124]	; (1c85c <net_context_packet_received+0xcc>)
   1c7e0:	f240 63ba 	movw	r3, #1722	; 0x6ba
   1c7e4:	4a19      	ldr	r2, [pc, #100]	; (1c84c <net_context_packet_received+0xbc>)
   1c7e6:	481b      	ldr	r0, [pc, #108]	; (1c854 <net_context_packet_received+0xc4>)
   1c7e8:	f016 fee3 	bl	335b2 <printk>
   1c7ec:	481a      	ldr	r0, [pc, #104]	; (1c858 <net_context_packet_received+0xc8>)
   1c7ee:	f016 fee0 	bl	335b2 <printk>
   1c7f2:	f240 61ba 	movw	r1, #1722	; 0x6ba
   1c7f6:	4815      	ldr	r0, [pc, #84]	; (1c84c <net_context_packet_received+0xbc>)
   1c7f8:	f017 f9dc 	bl	33bb4 <assert_post_action>

	k_mutex_lock(&context->lock, K_FOREVER);
   1c7fc:	f104 0708 	add.w	r7, r4, #8
   1c800:	4638      	mov	r0, r7
   1c802:	f019 f8b9 	bl	35978 <k_mutex_lock.constprop.28>

	net_context_set_iface(context, net_pkt_iface(pkt));
   1c806:	6a31      	ldr	r1, [r6, #32]
   1c808:	f104 007c 	add.w	r0, r4, #124	; 0x7c
   1c80c:	f7ff ffa0 	bl	1c750 <net_context_set_iface.isra.16>
	net_pkt_set_context(pkt, context);

	/* If there is no callback registered, then we can only drop
	 * the packet.
	 */
	if (!context->recv_cb) {
   1c810:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
	pkt->context = ctx;
   1c814:	61f4      	str	r4, [r6, #28]
   1c816:	f1ba 0f00 	cmp.w	sl, #0
   1c81a:	d013      	beq.n	1c844 <net_context_packet_received+0xb4>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
		net_stats_update_tcp_recv(net_pkt_iface(pkt),
					  net_pkt_remaining_data(pkt));
	}

	context->recv_cb(context, pkt, ip_hdr, proto_hdr, 0, user_data);
   1c81c:	2500      	movs	r5, #0
   1c81e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c820:	9500      	str	r5, [sp, #0]
   1c822:	9301      	str	r3, [sp, #4]
   1c824:	4642      	mov	r2, r8
   1c826:	464b      	mov	r3, r9
   1c828:	4631      	mov	r1, r6
   1c82a:	4620      	mov	r0, r4
   1c82c:	47d0      	blx	sl
	z_impl_k_sem_give(sem);
   1c82e:	f104 0040 	add.w	r0, r4, #64	; 0x40
   1c832:	f011 fbd1 	bl	2dfd8 <z_impl_k_sem_give>
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

	verdict = NET_OK;

unlock:
	k_mutex_unlock(&context->lock);
   1c836:	4638      	mov	r0, r7
   1c838:	f019 f881 	bl	3593e <k_mutex_unlock>

	return verdict;
}
   1c83c:	4628      	mov	r0, r5
   1c83e:	b002      	add	sp, #8
   1c840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	enum net_verdict verdict = NET_DROP;
   1c844:	2502      	movs	r5, #2
   1c846:	e7f6      	b.n	1c836 <net_context_packet_received+0xa6>
   1c848:	200217f8 	.word	0x200217f8
   1c84c:	0003db8b 	.word	0x0003db8b
   1c850:	0003cb77 	.word	0x0003cb77
   1c854:	0003b773 	.word	0x0003b773
   1c858:	0003cb7f 	.word	0x0003cb7f
   1c85c:	0003dbba 	.word	0x0003dbba

0001c860 <net_context_get>:
		if (!IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6) {
   1c860:	2802      	cmp	r0, #2
{
   1c862:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c866:	4607      	mov	r7, r0
   1c868:	468a      	mov	sl, r1
   1c86a:	4690      	mov	r8, r2
   1c86c:	4699      	mov	r9, r3
		if (!IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6) {
   1c86e:	f000 809d 	beq.w	1c9ac <net_context_get+0x14c>
		if (!IS_ENABLED(CONFIG_NET_SOCKETS_CAN) && family == AF_CAN) {
   1c872:	2804      	cmp	r0, #4
   1c874:	f000 809a 	beq.w	1c9ac <net_context_get+0x14c>
		if (type == SOCK_RAW) {
   1c878:	2903      	cmp	r1, #3
   1c87a:	d003      	beq.n	1c884 <net_context_get+0x24>
			if (family == AF_PACKET || family == AF_CAN) {
   1c87c:	1ec3      	subs	r3, r0, #3
   1c87e:	2b01      	cmp	r3, #1
   1c880:	f240 809a 	bls.w	1c9b8 <net_context_get+0x158>
		if (family != AF_INET && family != AF_INET6 &&
   1c884:	1e7b      	subs	r3, r7, #1
   1c886:	2b03      	cmp	r3, #3
   1c888:	f200 8093 	bhi.w	1c9b2 <net_context_get+0x152>
		if (type != SOCK_DGRAM && type != SOCK_STREAM &&
   1c88c:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   1c890:	2b02      	cmp	r3, #2
   1c892:	f200 8091 	bhi.w	1c9b8 <net_context_get+0x158>
		if (type != SOCK_RAW && ip_proto != IPPROTO_UDP &&
   1c896:	f1ba 0f03 	cmp.w	sl, #3
   1c89a:	d00a      	beq.n	1c8b2 <net_context_get+0x52>
   1c89c:	f1b8 0f11 	cmp.w	r8, #17
   1c8a0:	f000 8090 	beq.w	1c9c4 <net_context_get+0x164>
   1c8a4:	f1b8 0f06 	cmp.w	r8, #6
   1c8a8:	f000 8093 	beq.w	1c9d2 <net_context_get+0x172>
			return -EPROTONOSUPPORT;
   1c8ac:	f06f 047a 	mvn.w	r4, #122	; 0x7a
   1c8b0:	e01f      	b.n	1c8f2 <net_context_get+0x92>
		if (!context) {
   1c8b2:	f1b9 0f00 	cmp.w	r9, #0
   1c8b6:	f000 8082 	beq.w	1c9be <net_context_get+0x15e>
	return z_impl_k_sem_take(sem, timeout);
   1c8ba:	4c47      	ldr	r4, [pc, #284]	; (1c9d8 <net_context_get+0x178>)
   1c8bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c8c0:	4846      	ldr	r0, [pc, #280]	; (1c9dc <net_context_get+0x17c>)
   1c8c2:	f011 fbcd 	bl	2e060 <z_impl_k_sem_take>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1c8c6:	f04f 0b00 	mov.w	fp, #0
   1c8ca:	4626      	mov	r6, r4
		if (net_context_is_used(&contexts[i])) {
   1c8cc:	4620      	mov	r0, r4
   1c8ce:	f7ff fe83 	bl	1c5d8 <net_context_is_used>
   1c8d2:	ea4f 15cb 	mov.w	r5, fp, lsl #7
   1c8d6:	4601      	mov	r1, r0
   1c8d8:	b170      	cbz	r0, 1c8f8 <net_context_get+0x98>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1c8da:	f10b 0b01 	add.w	fp, fp, #1
   1c8de:	f1bb 0f06 	cmp.w	fp, #6
   1c8e2:	f104 0480 	add.w	r4, r4, #128	; 0x80
   1c8e6:	d1f1      	bne.n	1c8cc <net_context_get+0x6c>
	int i, ret = -ENOENT;
   1c8e8:	f06f 0401 	mvn.w	r4, #1
	z_impl_k_sem_give(sem);
   1c8ec:	483b      	ldr	r0, [pc, #236]	; (1c9dc <net_context_get+0x17c>)
   1c8ee:	f011 fb73 	bl	2dfd8 <z_impl_k_sem_give>
}
   1c8f2:	4620      	mov	r0, r4
   1c8f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
__ssp_bos_icheck3(memset, void *, int)
   1c8f8:	2280      	movs	r2, #128	; 0x80
   1c8fa:	4620      	mov	r0, r4
   1c8fc:	f01c fb9b 	bl	39036 <memset>
		if (!net_if_is_ip_offloaded(net_if_get_default())
   1c900:	f7ff fc90 	bl	1c224 <net_if_get_default>
			&& ip_proto == IPPROTO_TCP) {
   1c904:	f1b8 0f06 	cmp.w	r8, #6
   1c908:	d032      	beq.n	1c970 <net_context_get+0x110>
		contexts[i].iface = -1;
   1c90a:	22ff      	movs	r2, #255	; 0xff
   1c90c:	1973      	adds	r3, r6, r5
   1c90e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
		contexts[i].flags = 0U;
   1c912:	2200      	movs	r2, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1c914:	2001      	movs	r0, #1
   1c916:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
   1c91a:	1d19      	adds	r1, r3, #4
   1c91c:	e8d1 cfef 	ldaex	ip, [r1]
   1c920:	e8c1 0fee 	stlex	lr, r0, [r1]
   1c924:	f1be 0f00 	cmp.w	lr, #0
   1c928:	d1f8      	bne.n	1c91c <net_context_get+0xbc>
		flag = family << 3;
   1c92a:	00f9      	lsls	r1, r7, #3
	context->flags |= flag;
   1c92c:	f8b3 007a 	ldrh.w	r0, [r3, #122]	; 0x7a
	context->flags |= flag;
   1c930:	b2c9      	uxtb	r1, r1
	context->flags |= flag;
   1c932:	ea41 118a 	orr.w	r1, r1, sl, lsl #6
   1c936:	4301      	orrs	r1, r0
   1c938:	f8a3 107a 	strh.w	r1, [r3, #122]	; 0x7a
			(void)memset(&contexts[i].remote, 0,
   1c93c:	f105 0324 	add.w	r3, r5, #36	; 0x24
	context->proto = proto;
   1c940:	f8a4 8078 	strh.w	r8, [r4, #120]	; 0x78
   1c944:	18f1      	adds	r1, r6, r3
   1c946:	50f2      	str	r2, [r6, r3]
			(void)memset(&contexts[i].local, 0,
   1c948:	f105 031c 	add.w	r3, r5, #28
   1c94c:	eb06 0803 	add.w	r8, r6, r3
		if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
   1c950:	2f01      	cmp	r7, #1
   1c952:	604a      	str	r2, [r1, #4]
   1c954:	50f2      	str	r2, [r6, r3]
   1c956:	f8c8 2004 	str.w	r2, [r8, #4]
   1c95a:	d10f      	bne.n	1c97c <net_context_get+0x11c>
			addr->sin_port = find_available_port(&contexts[i],
   1c95c:	4641      	mov	r1, r8
   1c95e:	4620      	mov	r0, r4
   1c960:	f7ff fee0 	bl	1c724 <find_available_port>
   1c964:	f8a8 0002 	strh.w	r0, [r8, #2]
			if (!addr->sin_port) {
   1c968:	b940      	cbnz	r0, 1c97c <net_context_get+0x11c>
				ret = -EADDRINUSE;
   1c96a:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   1c96e:	e7bd      	b.n	1c8ec <net_context_get+0x8c>
			if (net_tcp_get(&contexts[i]) < 0) {
   1c970:	4620      	mov	r0, r4
   1c972:	f001 ff43 	bl	1e7fc <net_tcp_get>
   1c976:	2800      	cmp	r0, #0
   1c978:	dac7      	bge.n	1c90a <net_context_get+0xaa>
   1c97a:	e7b5      	b.n	1c8e8 <net_context_get+0x88>
		k_sem_init(&contexts[i].recv_data_wait, 1, UINT_MAX);
   1c97c:	f105 0040 	add.w	r0, r5, #64	; 0x40
	return z_impl_k_sem_init(sem, initial_count, limit);
   1c980:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c984:	2101      	movs	r1, #1
   1c986:	4430      	add	r0, r6
   1c988:	f01c f9c0 	bl	38d0c <z_impl_k_sem_init>
		k_mutex_init(&contexts[i].lock);
   1c98c:	f105 0008 	add.w	r0, r5, #8
	return z_impl_k_mutex_init(mutex);
   1c990:	4430      	add	r0, r6
		contexts[i].flags |= NET_CONTEXT_IN_USE;
   1c992:	4435      	add	r5, r6
   1c994:	f01c f95b 	bl	38c4e <z_impl_k_mutex_init>
   1c998:	f8b5 307a 	ldrh.w	r3, [r5, #122]	; 0x7a
   1c99c:	f043 0301 	orr.w	r3, r3, #1
   1c9a0:	f8a5 307a 	strh.w	r3, [r5, #122]	; 0x7a
		*context = &contexts[i];
   1c9a4:	f8c9 4000 	str.w	r4, [r9]
		ret = 0;
   1c9a8:	2400      	movs	r4, #0
		break;
   1c9aa:	e79f      	b.n	1c8ec <net_context_get+0x8c>
			return -EPFNOSUPPORT;
   1c9ac:	f06f 045f 	mvn.w	r4, #95	; 0x5f
   1c9b0:	e79f      	b.n	1c8f2 <net_context_get+0x92>
			return -EAFNOSUPPORT;
   1c9b2:	f06f 0469 	mvn.w	r4, #105	; 0x69
   1c9b6:	e79c      	b.n	1c8f2 <net_context_get+0x92>
				return -EPROTOTYPE;
   1c9b8:	f06f 046a 	mvn.w	r4, #106	; 0x6a
   1c9bc:	e799      	b.n	1c8f2 <net_context_get+0x92>
			return -EINVAL;
   1c9be:	f06f 0415 	mvn.w	r4, #21
   1c9c2:	e796      	b.n	1c8f2 <net_context_get+0x92>
		if ((type == SOCK_STREAM && ip_proto == IPPROTO_UDP) ||
   1c9c4:	f1ba 0f01 	cmp.w	sl, #1
   1c9c8:	f47f af73 	bne.w	1c8b2 <net_context_get+0x52>
			return -EOPNOTSUPP;
   1c9cc:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   1c9d0:	e78f      	b.n	1c8f2 <net_context_get+0x92>
		if ((type == SOCK_STREAM && ip_proto == IPPROTO_UDP) ||
   1c9d2:	f1ba 0f02 	cmp.w	sl, #2
   1c9d6:	e7f7      	b.n	1c9c8 <net_context_get+0x168>
   1c9d8:	200217f8 	.word	0x200217f8
   1c9dc:	20021af8 	.word	0x20021af8

0001c9e0 <net_context_put>:
{
   1c9e0:	b570      	push	{r4, r5, r6, lr}
	NET_ASSERT(context);
   1c9e2:	4605      	mov	r5, r0
   1c9e4:	b988      	cbnz	r0, 1ca0a <net_context_put+0x2a>
   1c9e6:	4916      	ldr	r1, [pc, #88]	; (1ca40 <net_context_put+0x60>)
   1c9e8:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   1c9ec:	4a15      	ldr	r2, [pc, #84]	; (1ca44 <net_context_put+0x64>)
   1c9ee:	4816      	ldr	r0, [pc, #88]	; (1ca48 <net_context_put+0x68>)
   1c9f0:	f016 fddf 	bl	335b2 <printk>
   1c9f4:	4815      	ldr	r0, [pc, #84]	; (1ca4c <net_context_put+0x6c>)
   1c9f6:	f016 fddc 	bl	335b2 <printk>
   1c9fa:	f44f 71b7 	mov.w	r1, #366	; 0x16e
   1c9fe:	4811      	ldr	r0, [pc, #68]	; (1ca44 <net_context_put+0x64>)
   1ca00:	f017 f8d8 	bl	33bb4 <assert_post_action>
		return -EINVAL;
   1ca04:	f06f 0015 	mvn.w	r0, #21
   1ca08:	e019      	b.n	1ca3e <net_context_put+0x5e>
	if (!PART_OF_ARRAY(contexts, context)) {
   1ca0a:	4b11      	ldr	r3, [pc, #68]	; (1ca50 <net_context_put+0x70>)
   1ca0c:	4298      	cmp	r0, r3
   1ca0e:	d3f9      	bcc.n	1ca04 <net_context_put+0x24>
   1ca10:	f503 7340 	add.w	r3, r3, #768	; 0x300
   1ca14:	429d      	cmp	r5, r3
   1ca16:	d2f5      	bcs.n	1ca04 <net_context_put+0x24>
	context->connect_cb = NULL;
   1ca18:	2400      	movs	r4, #0
	k_mutex_lock(&context->lock, K_FOREVER);
   1ca1a:	f105 0608 	add.w	r6, r5, #8
   1ca1e:	4630      	mov	r0, r6
   1ca20:	f018 ffaa 	bl	35978 <k_mutex_lock.constprop.28>
	context->connect_cb = NULL;
   1ca24:	63ac      	str	r4, [r5, #56]	; 0x38
	context->send_cb = NULL;
   1ca26:	e9c5 440c 	strd	r4, r4, [r5, #48]	; 0x30
	net_context_unref(context);
   1ca2a:	4628      	mov	r0, r5
   1ca2c:	f018 ffb2 	bl	35994 <net_context_unref>
	net_tcp_put(context);
   1ca30:	4628      	mov	r0, r5
   1ca32:	f01a fa5e 	bl	36ef2 <net_tcp_put>
	k_mutex_unlock(&context->lock);
   1ca36:	4630      	mov	r0, r6
   1ca38:	f018 ff81 	bl	3593e <k_mutex_unlock>
	return ret;
   1ca3c:	4620      	mov	r0, r4
}
   1ca3e:	bd70      	pop	{r4, r5, r6, pc}
   1ca40:	0003cb77 	.word	0x0003cb77
   1ca44:	0003db8b 	.word	0x0003db8b
   1ca48:	0003b773 	.word	0x0003b773
   1ca4c:	0003cb7f 	.word	0x0003cb7f
   1ca50:	200217f8 	.word	0x200217f8

0001ca54 <net_context_bind>:
{
   1ca54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ca56:	4605      	mov	r5, r0
   1ca58:	4614      	mov	r4, r2
	NET_ASSERT(addr);
   1ca5a:	460e      	mov	r6, r1
   1ca5c:	b971      	cbnz	r1, 1ca7c <net_context_bind+0x28>
   1ca5e:	493c      	ldr	r1, [pc, #240]	; (1cb50 <net_context_bind+0xfc>)
   1ca60:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
   1ca64:	4a3b      	ldr	r2, [pc, #236]	; (1cb54 <net_context_bind+0x100>)
   1ca66:	483c      	ldr	r0, [pc, #240]	; (1cb58 <net_context_bind+0x104>)
   1ca68:	f016 fda3 	bl	335b2 <printk>
   1ca6c:	483b      	ldr	r0, [pc, #236]	; (1cb5c <net_context_bind+0x108>)
   1ca6e:	f016 fda0 	bl	335b2 <printk>
   1ca72:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
   1ca76:	4837      	ldr	r0, [pc, #220]	; (1cb54 <net_context_bind+0x100>)
   1ca78:	f017 f89c 	bl	33bb4 <assert_post_action>
	NET_ASSERT(PART_OF_ARRAY(contexts, context));
   1ca7c:	b135      	cbz	r5, 1ca8c <net_context_bind+0x38>
   1ca7e:	4b38      	ldr	r3, [pc, #224]	; (1cb60 <net_context_bind+0x10c>)
   1ca80:	429d      	cmp	r5, r3
   1ca82:	d303      	bcc.n	1ca8c <net_context_bind+0x38>
   1ca84:	f503 7340 	add.w	r3, r3, #768	; 0x300
   1ca88:	429d      	cmp	r5, r3
   1ca8a:	d30e      	bcc.n	1caaa <net_context_bind+0x56>
   1ca8c:	4935      	ldr	r1, [pc, #212]	; (1cb64 <net_context_bind+0x110>)
   1ca8e:	f240 13eb 	movw	r3, #491	; 0x1eb
   1ca92:	4a30      	ldr	r2, [pc, #192]	; (1cb54 <net_context_bind+0x100>)
   1ca94:	4830      	ldr	r0, [pc, #192]	; (1cb58 <net_context_bind+0x104>)
   1ca96:	f016 fd8c 	bl	335b2 <printk>
   1ca9a:	4830      	ldr	r0, [pc, #192]	; (1cb5c <net_context_bind+0x108>)
   1ca9c:	f016 fd89 	bl	335b2 <printk>
   1caa0:	f240 11eb 	movw	r1, #491	; 0x1eb
   1caa4:	482b      	ldr	r0, [pc, #172]	; (1cb54 <net_context_bind+0x100>)
   1caa6:	f017 f885 	bl	33bb4 <assert_post_action>
	if (context->conn_handler) {
   1caaa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1caac:	2b00      	cmp	r3, #0
   1caae:	d148      	bne.n	1cb42 <net_context_bind+0xee>
	if (IS_ENABLED(CONFIG_NET_IPV4) && addr->sa_family == AF_INET) {
   1cab0:	8832      	ldrh	r2, [r6, #0]
   1cab2:	2a01      	cmp	r2, #1
   1cab4:	d148      	bne.n	1cb48 <net_context_bind+0xf4>
		if (addrlen < sizeof(struct sockaddr_in)) {
   1cab6:	2c07      	cmp	r4, #7
		struct net_if *iface = NULL;
   1cab8:	9301      	str	r3, [sp, #4]
		if (addrlen < sizeof(struct sockaddr_in)) {
   1caba:	d945      	bls.n	1cb48 <net_context_bind+0xf4>
		if (net_ipv4_is_addr_mcast(&addr4->sin_addr)) {
   1cabc:	1d32      	adds	r2, r6, #4
   1cabe:	4610      	mov	r0, r2
   1cac0:	f018 ff34 	bl	3592c <net_ipv4_is_addr_mcast>
   1cac4:	b148      	cbz	r0, 1cada <net_context_bind+0x86>
			maddr = net_if_ipv4_maddr_lookup(&addr4->sin_addr,
   1cac6:	a901      	add	r1, sp, #4
   1cac8:	4610      	mov	r0, r2
   1caca:	f7ff fc53 	bl	1c374 <net_if_ipv4_maddr_lookup>
			if (!maddr) {
   1cace:	bb78      	cbnz	r0, 1cb30 <net_context_bind+0xdc>
				return -ENOENT;
   1cad0:	f06f 0401 	mvn.w	r4, #1
}
   1cad4:	4620      	mov	r0, r4
   1cad6:	b003      	add	sp, #12
   1cad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (addr4->sin_addr.s_addr == INADDR_ANY) {
   1cada:	6873      	ldr	r3, [r6, #4]
   1cadc:	bb1b      	cbnz	r3, 1cb26 <net_context_bind+0xd2>
			iface = net_if_ipv4_select_src_iface(
   1cade:	f105 0028 	add.w	r0, r5, #40	; 0x28
   1cae2:	f7ff fbc1 	bl	1c268 <net_if_ipv4_select_src_iface>
   1cae6:	9001      	str	r0, [sp, #4]
			ptr = (struct in_addr *)net_ipv4_unspecified_address();
   1cae8:	f7ff fd6e 	bl	1c5c8 <net_ipv4_unspecified_address>
   1caec:	4604      	mov	r4, r0
		if (!iface) {
   1caee:	9b01      	ldr	r3, [sp, #4]
   1caf0:	b323      	cbz	r3, 1cb3c <net_context_bind+0xe8>
		k_mutex_lock(&context->lock, K_FOREVER);
   1caf2:	f105 0708 	add.w	r7, r5, #8
   1caf6:	4638      	mov	r0, r7
   1caf8:	f018 ff3e 	bl	35978 <k_mutex_lock.constprop.28>
		net_context_set_iface(context, iface);
   1cafc:	9901      	ldr	r1, [sp, #4]
   1cafe:	f105 007c 	add.w	r0, r5, #124	; 0x7c
   1cb02:	f7ff fe25 	bl	1c750 <net_context_set_iface.isra.16>
		net_sin_ptr(&context->local)->sin_family = AF_INET;
   1cb06:	2001      	movs	r0, #1
		if (addr4->sin_port) {
   1cb08:	8871      	ldrh	r1, [r6, #2]
		net_sin_ptr(&context->local)->sin_family = AF_INET;
   1cb0a:	83a8      	strh	r0, [r5, #28]
		net_sin_ptr(&context->local)->sin_addr = ptr;
   1cb0c:	622c      	str	r4, [r5, #32]
		if (addr4->sin_port) {
   1cb0e:	b189      	cbz	r1, 1cb34 <net_context_bind+0xe0>
			ret = check_used_port(AF_INET, addr4->sin_port,
   1cb10:	4632      	mov	r2, r6
   1cb12:	f7ff fd81 	bl	1c618 <check_used_port>
			if (!ret) {
   1cb16:	4604      	mov	r4, r0
   1cb18:	b908      	cbnz	r0, 1cb1e <net_context_bind+0xca>
				net_sin_ptr(&context->local)->sin_port =
   1cb1a:	8873      	ldrh	r3, [r6, #2]
   1cb1c:	83eb      	strh	r3, [r5, #30]
		k_mutex_unlock(&context->lock);
   1cb1e:	4638      	mov	r0, r7
   1cb20:	f018 ff0d 	bl	3593e <k_mutex_unlock>
		return ret;
   1cb24:	e7d6      	b.n	1cad4 <net_context_bind+0x80>
			ifaddr = net_if_ipv4_addr_lookup(&addr4->sin_addr,
   1cb26:	a901      	add	r1, sp, #4
   1cb28:	4610      	mov	r0, r2
   1cb2a:	f7ff fc05 	bl	1c338 <net_if_ipv4_addr_lookup>
   1cb2e:	e7ce      	b.n	1cace <net_context_bind+0x7a>
			ptr = &ifaddr->address.in_addr;
   1cb30:	1d04      	adds	r4, r0, #4
   1cb32:	e7dc      	b.n	1caee <net_context_bind+0x9a>
			addr4->sin_port =
   1cb34:	8beb      	ldrh	r3, [r5, #30]
   1cb36:	460c      	mov	r4, r1
   1cb38:	8073      	strh	r3, [r6, #2]
   1cb3a:	e7f0      	b.n	1cb1e <net_context_bind+0xca>
			return -EADDRNOTAVAIL;
   1cb3c:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   1cb40:	e7c8      	b.n	1cad4 <net_context_bind+0x80>
		return -EISCONN;
   1cb42:	f06f 047e 	mvn.w	r4, #126	; 0x7e
   1cb46:	e7c5      	b.n	1cad4 <net_context_bind+0x80>
	return -EINVAL;
   1cb48:	f06f 0415 	mvn.w	r4, #21
   1cb4c:	e7c2      	b.n	1cad4 <net_context_bind+0x80>
   1cb4e:	bf00      	nop
   1cb50:	0003db86 	.word	0x0003db86
   1cb54:	0003db8b 	.word	0x0003db8b
   1cb58:	0003b773 	.word	0x0003b773
   1cb5c:	0003cb7f 	.word	0x0003cb7f
   1cb60:	200217f8 	.word	0x200217f8
   1cb64:	0003da0d 	.word	0x0003da0d

0001cb68 <net_context_listen>:
{
   1cb68:	b538      	push	{r3, r4, r5, lr}
	NET_ASSERT(PART_OF_ARRAY(contexts, context));
   1cb6a:	4604      	mov	r4, r0
   1cb6c:	b130      	cbz	r0, 1cb7c <net_context_listen+0x14>
   1cb6e:	4b18      	ldr	r3, [pc, #96]	; (1cbd0 <net_context_listen+0x68>)
   1cb70:	4298      	cmp	r0, r3
   1cb72:	d303      	bcc.n	1cb7c <net_context_listen+0x14>
   1cb74:	f503 7340 	add.w	r3, r3, #768	; 0x300
   1cb78:	4298      	cmp	r0, r3
   1cb7a:	d30e      	bcc.n	1cb9a <net_context_listen+0x32>
   1cb7c:	4915      	ldr	r1, [pc, #84]	; (1cbd4 <net_context_listen+0x6c>)
   1cb7e:	f240 331d 	movw	r3, #797	; 0x31d
   1cb82:	4a15      	ldr	r2, [pc, #84]	; (1cbd8 <net_context_listen+0x70>)
   1cb84:	4815      	ldr	r0, [pc, #84]	; (1cbdc <net_context_listen+0x74>)
   1cb86:	f016 fd14 	bl	335b2 <printk>
   1cb8a:	4815      	ldr	r0, [pc, #84]	; (1cbe0 <net_context_listen+0x78>)
   1cb8c:	f016 fd11 	bl	335b2 <printk>
   1cb90:	f240 311d 	movw	r1, #797	; 0x31d
   1cb94:	4810      	ldr	r0, [pc, #64]	; (1cbd8 <net_context_listen+0x70>)
   1cb96:	f017 f80d 	bl	33bb4 <assert_post_action>
	if (!net_context_is_used(context)) {
   1cb9a:	4620      	mov	r0, r4
   1cb9c:	f7ff fd1c 	bl	1c5d8 <net_context_is_used>
   1cba0:	b198      	cbz	r0, 1cbca <net_context_listen+0x62>
	k_mutex_lock(&context->lock, K_FOREVER);
   1cba2:	f104 0508 	add.w	r5, r4, #8
   1cba6:	4628      	mov	r0, r5
   1cba8:	f018 fee6 	bl	35978 <k_mutex_lock.constprop.28>
	if (net_tcp_listen(context) >= 0) {
   1cbac:	4620      	mov	r0, r4
   1cbae:	f01a f9f0 	bl	36f92 <net_tcp_listen>
   1cbb2:	2800      	cmp	r0, #0
		k_mutex_unlock(&context->lock);
   1cbb4:	4628      	mov	r0, r5
	if (net_tcp_listen(context) >= 0) {
   1cbb6:	db03      	blt.n	1cbc0 <net_context_listen+0x58>
		k_mutex_unlock(&context->lock);
   1cbb8:	f018 fec1 	bl	3593e <k_mutex_unlock>
		return 0;
   1cbbc:	2000      	movs	r0, #0
}
   1cbbe:	bd38      	pop	{r3, r4, r5, pc}
	k_mutex_unlock(&context->lock);
   1cbc0:	f018 febd 	bl	3593e <k_mutex_unlock>
	return -EOPNOTSUPP;
   1cbc4:	f06f 005e 	mvn.w	r0, #94	; 0x5e
   1cbc8:	e7f9      	b.n	1cbbe <net_context_listen+0x56>
		return -EBADF;
   1cbca:	f06f 0008 	mvn.w	r0, #8
   1cbce:	e7f6      	b.n	1cbbe <net_context_listen+0x56>
   1cbd0:	200217f8 	.word	0x200217f8
   1cbd4:	0003da0d 	.word	0x0003da0d
   1cbd8:	0003db8b 	.word	0x0003db8b
   1cbdc:	0003b773 	.word	0x0003b773
   1cbe0:	0003cb7f 	.word	0x0003cb7f

0001cbe4 <net_context_create_ipv4_new>:
{
   1cbe4:	b570      	push	{r4, r5, r6, lr}
   1cbe6:	460c      	mov	r4, r1
   1cbe8:	4605      	mov	r5, r0
   1cbea:	461e      	mov	r6, r3
	if (!src) {
   1cbec:	4611      	mov	r1, r2
   1cbee:	b98a      	cbnz	r2, 1cc14 <net_context_create_ipv4_new+0x30>
		NET_ASSERT(((
   1cbf0:	6a03      	ldr	r3, [r0, #32]
   1cbf2:	b973      	cbnz	r3, 1cc12 <net_context_create_ipv4_new+0x2e>
   1cbf4:	4914      	ldr	r1, [pc, #80]	; (1cc48 <net_context_create_ipv4_new+0x64>)
   1cbf6:	f240 333d 	movw	r3, #829	; 0x33d
   1cbfa:	4a14      	ldr	r2, [pc, #80]	; (1cc4c <net_context_create_ipv4_new+0x68>)
   1cbfc:	4814      	ldr	r0, [pc, #80]	; (1cc50 <net_context_create_ipv4_new+0x6c>)
   1cbfe:	f016 fcd8 	bl	335b2 <printk>
   1cc02:	4814      	ldr	r0, [pc, #80]	; (1cc54 <net_context_create_ipv4_new+0x70>)
   1cc04:	f016 fcd5 	bl	335b2 <printk>
   1cc08:	f240 313d 	movw	r1, #829	; 0x33d
   1cc0c:	480f      	ldr	r0, [pc, #60]	; (1cc4c <net_context_create_ipv4_new+0x68>)
   1cc0e:	f016 ffd1 	bl	33bb4 <assert_post_action>
		src = ((struct sockaddr_in_ptr *)&context->local)->sin_addr;
   1cc12:	6a29      	ldr	r1, [r5, #32]
	return UNALIGNED_GET(&addr->s_addr) == 0;
   1cc14:	680b      	ldr	r3, [r1, #0]
	if (net_ipv4_is_addr_unspecified(src)
   1cc16:	b11b      	cbz	r3, 1cc20 <net_context_create_ipv4_new+0x3c>
	    || net_ipv4_is_addr_mcast(src)) {
   1cc18:	4608      	mov	r0, r1
   1cc1a:	f018 fe87 	bl	3592c <net_ipv4_is_addr_mcast>
   1cc1e:	b130      	cbz	r0, 1cc2e <net_context_create_ipv4_new+0x4a>
		src = net_if_ipv4_select_src_addr(net_pkt_iface(pkt),
   1cc20:	4631      	mov	r1, r6
   1cc22:	6a20      	ldr	r0, [r4, #32]
   1cc24:	f7ff fb3a 	bl	1c29c <net_if_ipv4_select_src_addr>
   1cc28:	6803      	ldr	r3, [r0, #0]
   1cc2a:	4601      	mov	r1, r0
		if (net_ipv4_is_addr_unspecified(src)) {
   1cc2c:	b14b      	cbz	r3, 1cc42 <net_context_create_ipv4_new+0x5e>
	net_pkt_set_ipv4_ttl(pkt, net_context_get_ipv4_ttl(context));
   1cc2e:	f895 307d 	ldrb.w	r3, [r5, #125]	; 0x7d
	return net_ipv4_create(pkt, src, dst);
   1cc32:	4632      	mov	r2, r6
	pkt->ipv4_ttl = ttl;
   1cc34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   1cc38:	4620      	mov	r0, r4
}
   1cc3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_ipv4_create(pkt, src, dst);
   1cc3e:	f019 bbd8 	b.w	363f2 <net_ipv4_create>
}
   1cc42:	f06f 0015 	mvn.w	r0, #21
   1cc46:	bd70      	pop	{r4, r5, r6, pc}
   1cc48:	0003db54 	.word	0x0003db54
   1cc4c:	0003db8b 	.word	0x0003db8b
   1cc50:	0003b773 	.word	0x0003b773
   1cc54:	0003cb7f 	.word	0x0003cb7f

0001cc58 <context_sendto.isra.21>:
static int context_sendto(struct net_context *context,
   1cc58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cc5c:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
   1cc60:	4689      	mov	r9, r1
   1cc62:	e9dd 6a0c 	ldrd	r6, sl, [sp, #48]	; 0x30
   1cc66:	4617      	mov	r7, r2
   1cc68:	461d      	mov	r5, r3
   1cc6a:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
	NET_ASSERT(PART_OF_ARRAY(contexts, context));
   1cc6e:	4604      	mov	r4, r0
   1cc70:	b130      	cbz	r0, 1cc80 <context_sendto.isra.21+0x28>
   1cc72:	4b79      	ldr	r3, [pc, #484]	; (1ce58 <context_sendto.isra.21+0x200>)
   1cc74:	4298      	cmp	r0, r3
   1cc76:	d303      	bcc.n	1cc80 <context_sendto.isra.21+0x28>
   1cc78:	f503 7340 	add.w	r3, r3, #768	; 0x300
   1cc7c:	4298      	cmp	r0, r3
   1cc7e:	d30e      	bcc.n	1cc9e <context_sendto.isra.21+0x46>
   1cc80:	4976      	ldr	r1, [pc, #472]	; (1ce5c <context_sendto.isra.21+0x204>)
   1cc82:	f240 534c 	movw	r3, #1356	; 0x54c
   1cc86:	4a76      	ldr	r2, [pc, #472]	; (1ce60 <context_sendto.isra.21+0x208>)
   1cc88:	4876      	ldr	r0, [pc, #472]	; (1ce64 <context_sendto.isra.21+0x20c>)
   1cc8a:	f016 fc92 	bl	335b2 <printk>
   1cc8e:	4876      	ldr	r0, [pc, #472]	; (1ce68 <context_sendto.isra.21+0x210>)
   1cc90:	f016 fc8f 	bl	335b2 <printk>
   1cc94:	f240 514c 	movw	r1, #1356	; 0x54c
   1cc98:	4871      	ldr	r0, [pc, #452]	; (1ce60 <context_sendto.isra.21+0x208>)
   1cc9a:	f016 ff8b 	bl	33bb4 <assert_post_action>
	if (!net_context_is_used(context)) {
   1cc9e:	4620      	mov	r0, r4
   1cca0:	f7ff fc9a 	bl	1c5d8 <net_context_is_used>
   1cca4:	2800      	cmp	r0, #0
   1cca6:	f000 80d0 	beq.w	1ce4a <context_sendto.isra.21+0x1f2>
	if (sendto && addrlen == 0 && dst_addr == NULL && buf != NULL) {
   1ccaa:	f1b8 0f00 	cmp.w	r8, #0
   1ccae:	d00b      	beq.n	1ccc8 <context_sendto.isra.21+0x70>
   1ccb0:	b956      	cbnz	r6, 1ccc8 <context_sendto.isra.21+0x70>
   1ccb2:	b95d      	cbnz	r5, 1cccc <context_sendto.isra.21+0x74>
   1ccb4:	f1b9 0f00 	cmp.w	r9, #0
   1ccb8:	f040 8093 	bne.w	1cde2 <context_sendto.isra.21+0x18a>
		return -EDESTADDRREQ;
   1ccbc:	f06f 0578 	mvn.w	r5, #120	; 0x78
}
   1ccc0:	4628      	mov	r0, r5
   1ccc2:	b003      	add	sp, #12
   1ccc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!msghdr && !dst_addr &&
   1ccc8:	2d00      	cmp	r5, #0
   1ccca:	d0f7      	beq.n	1ccbc <context_sendto.isra.21+0x64>
   1cccc:	f04f 0800 	mov.w	r8, #0
		   net_context_get_family(context) == AF_INET) {
   1ccd0:	4620      	mov	r0, r4
   1ccd2:	f7ff fce7 	bl	1c6a4 <net_context_get_family>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1ccd6:	2801      	cmp	r0, #1
   1ccd8:	f040 8087 	bne.w	1cdea <context_sendto.isra.21+0x192>
		if (msghdr) {
   1ccdc:	f1b8 0f00 	cmp.w	r8, #0
   1cce0:	f000 8081 	beq.w	1cde6 <context_sendto.isra.21+0x18e>
			addrlen = msghdr->msg_namelen;
   1cce4:	e9d8 5600 	ldrd	r5, r6, [r8]
			if (!addr4) {
   1cce8:	2d00      	cmp	r5, #0
   1ccea:	d17c      	bne.n	1cde6 <context_sendto.isra.21+0x18e>
				addr4 = net_sin(&context->remote);
   1ccec:	f104 0524 	add.w	r5, r4, #36	; 0x24
		if (!addr4->sin_addr.s_addr) {
   1ccf0:	686b      	ldr	r3, [r5, #4]
   1ccf2:	2b00      	cmp	r3, #0
   1ccf4:	d0e2      	beq.n	1ccbc <context_sendto.isra.21+0x64>
	if (msghdr && len == 0) {
   1ccf6:	f1b8 0f00 	cmp.w	r8, #0
   1ccfa:	d005      	beq.n	1cd08 <context_sendto.isra.21+0xb0>
   1ccfc:	b927      	cbnz	r7, 1cd08 <context_sendto.isra.21+0xb0>
		for (i = 0; i < msghdr->msg_iovlen; i++) {
   1ccfe:	463b      	mov	r3, r7
   1cd00:	f8d8 100c 	ldr.w	r1, [r8, #12]
   1cd04:	428b      	cmp	r3, r1
   1cd06:	d173      	bne.n	1cdf0 <context_sendto.isra.21+0x198>
	NET_ASSERT(context);
   1cd08:	b974      	cbnz	r4, 1cd28 <context_sendto.isra.21+0xd0>
   1cd0a:	4958      	ldr	r1, [pc, #352]	; (1ce6c <context_sendto.isra.21+0x214>)
   1cd0c:	f240 2371 	movw	r3, #625	; 0x271
   1cd10:	4a57      	ldr	r2, [pc, #348]	; (1ce70 <context_sendto.isra.21+0x218>)
   1cd12:	4854      	ldr	r0, [pc, #336]	; (1ce64 <context_sendto.isra.21+0x20c>)
   1cd14:	f016 fc4d 	bl	335b2 <printk>
   1cd18:	4853      	ldr	r0, [pc, #332]	; (1ce68 <context_sendto.isra.21+0x210>)
   1cd1a:	f016 fc4a 	bl	335b2 <printk>
   1cd1e:	f240 2171 	movw	r1, #625	; 0x271
   1cd22:	4853      	ldr	r0, [pc, #332]	; (1ce70 <context_sendto.isra.21+0x218>)
   1cd24:	f016 ff46 	bl	33bb4 <assert_post_action>
	return net_if_get_by_index(context->iface);
   1cd28:	f994 007c 	ldrsb.w	r0, [r4, #124]	; 0x7c
   1cd2c:	f7ff fbaa 	bl	1c484 <net_if_get_by_index>
   1cd30:	4606      	mov	r6, r0
	pkt = net_pkt_alloc_with_buffer(net_context_get_iface(context), len,
   1cd32:	4620      	mov	r0, r4
   1cd34:	f7ff fcb6 	bl	1c6a4 <net_context_get_family>
   1cd38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1cd3c:	9300      	str	r3, [sp, #0]
   1cd3e:	4602      	mov	r2, r0
   1cd40:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1cd44:	4630      	mov	r0, r6
   1cd46:	4639      	mov	r1, r7
   1cd48:	f000 fb1e 	bl	1d388 <net_pkt_alloc_with_buffer>
	if (pkt) {
   1cd4c:	4606      	mov	r6, r0
   1cd4e:	2800      	cmp	r0, #0
   1cd50:	d07e      	beq.n	1ce50 <context_sendto.isra.21+0x1f8>
	pkt->context = ctx;
   1cd52:	61c4      	str	r4, [r0, #28]
	tmp_len = net_pkt_available_payload_buffer(
   1cd54:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
   1cd58:	f018 ffe5 	bl	35d26 <net_pkt_available_payload_buffer>
	    net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1cd5c:	f8b4 3078 	ldrh.w	r3, [r4, #120]	; 0x78
   1cd60:	4287      	cmp	r7, r0
   1cd62:	bf28      	it	cs
   1cd64:	4607      	movcs	r7, r0
	} else if (IS_ENABLED(CONFIG_NET_UDP) &&
   1cd66:	2b11      	cmp	r3, #17
	context->send_cb = cb;
   1cd68:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
	context->user_data = user_data;
   1cd6c:	f8c4 b000 	str.w	fp, [r4]
	} else if (IS_ENABLED(CONFIG_NET_UDP) &&
   1cd70:	d14c      	bne.n	1ce0c <context_sendto.isra.21+0x1b4>
		   net_context_get_family(context) == AF_INET) {
   1cd72:	4620      	mov	r0, r4
   1cd74:	f7ff fc96 	bl	1c6a4 <net_context_get_family>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1cd78:	2801      	cmp	r0, #1
   1cd7a:	d160      	bne.n	1ce3e <context_sendto.isra.21+0x1e6>
		ret = net_context_create_ipv4_new(context, pkt,
   1cd7c:	1d2b      	adds	r3, r5, #4
   1cd7e:	2200      	movs	r2, #0
   1cd80:	4631      	mov	r1, r6
   1cd82:	4620      	mov	r0, r4
		dst_port = addr4->sin_port;
   1cd84:	f8b5 a002 	ldrh.w	sl, [r5, #2]
		ret = net_context_create_ipv4_new(context, pkt,
   1cd88:	f7ff ff2c 	bl	1cbe4 <net_context_create_ipv4_new>
	if (ret < 0) {
   1cd8c:	1e05      	subs	r5, r0, #0
   1cd8e:	db39      	blt.n	1ce04 <context_sendto.isra.21+0x1ac>
	ret = bind_default(context);
   1cd90:	4620      	mov	r0, r4
   1cd92:	f018 fe26 	bl	359e2 <bind_default>
	if (ret) {
   1cd96:	4605      	mov	r5, r0
   1cd98:	bb90      	cbnz	r0, 1ce00 <context_sendto.isra.21+0x1a8>
	ret = net_udp_create(pkt,
   1cd9a:	4652      	mov	r2, sl
   1cd9c:	8be1      	ldrh	r1, [r4, #30]
   1cd9e:	4630      	mov	r0, r6
   1cda0:	f01a f93a 	bl	37018 <net_udp_create>
	if (ret) {
   1cda4:	4605      	mov	r5, r0
   1cda6:	bb58      	cbnz	r0, 1ce00 <context_sendto.isra.21+0x1a8>
	ret = context_write_data(pkt, buf, len, msg);
   1cda8:	4643      	mov	r3, r8
   1cdaa:	463a      	mov	r2, r7
   1cdac:	4649      	mov	r1, r9
   1cdae:	4630      	mov	r0, r6
   1cdb0:	f018 fdc7 	bl	35942 <context_write_data>
	if (ret) {
   1cdb4:	4605      	mov	r5, r0
   1cdb6:	bb18      	cbnz	r0, 1ce00 <context_sendto.isra.21+0x1a8>
	net_pkt_cursor_init(pkt);
   1cdb8:	4630      	mov	r0, r6
   1cdba:	f018 ffe6 	bl	35d8a <net_pkt_cursor_init>
		   net_context_get_family(context) == AF_INET) {
   1cdbe:	4620      	mov	r0, r4
   1cdc0:	f7ff fc70 	bl	1c6a4 <net_context_get_family>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1cdc4:	2801      	cmp	r0, #1
   1cdc6:	d104      	bne.n	1cdd2 <context_sendto.isra.21+0x17a>
		net_ipv4_finalize(pkt, net_context_get_ip_proto(context));
   1cdc8:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
   1cdcc:	4630      	mov	r0, r6
   1cdce:	f019 fb43 	bl	36458 <net_ipv4_finalize>
		ret = net_send_data(pkt);
   1cdd2:	4630      	mov	r0, r6
   1cdd4:	f018 fbc6 	bl	35564 <net_send_data>
	if (ret < 0) {
   1cdd8:	2800      	cmp	r0, #0
		ret = net_tcp_send_data(context, cb, user_data);
   1cdda:	4605      	mov	r5, r0
	if (ret < 0) {
   1cddc:	db12      	blt.n	1ce04 <context_sendto.isra.21+0x1ac>
	return len;
   1cdde:	463d      	mov	r5, r7
   1cde0:	e76e      	b.n	1ccc0 <context_sendto.isra.21+0x68>
	if (sendto && addrlen == 0 && dst_addr == NULL && buf != NULL) {
   1cde2:	46c8      	mov	r8, r9
   1cde4:	e774      	b.n	1ccd0 <context_sendto.isra.21+0x78>
		if (addrlen < sizeof(struct sockaddr_in)) {
   1cde6:	2e07      	cmp	r6, #7
   1cde8:	d882      	bhi.n	1ccf0 <context_sendto.isra.21+0x98>
		return -EINVAL;
   1cdea:	f06f 0515 	mvn.w	r5, #21
   1cdee:	e767      	b.n	1ccc0 <context_sendto.isra.21+0x68>
			len += msghdr->msg_iov[i].iov_len;
   1cdf0:	f8d8 2008 	ldr.w	r2, [r8, #8]
   1cdf4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1cdf8:	6852      	ldr	r2, [r2, #4]
		for (i = 0; i < msghdr->msg_iovlen; i++) {
   1cdfa:	3301      	adds	r3, #1
			len += msghdr->msg_iov[i].iov_len;
   1cdfc:	4417      	add	r7, r2
   1cdfe:	e781      	b.n	1cd04 <context_sendto.isra.21+0xac>
		if (ret < 0) {
   1ce00:	2d00      	cmp	r5, #0
   1ce02:	dad9      	bge.n	1cdb8 <context_sendto.isra.21+0x160>
	net_pkt_unref(pkt);
   1ce04:	4630      	mov	r0, r6
   1ce06:	f018 ff5c 	bl	35cc2 <net_pkt_unref>
	return ret;
   1ce0a:	e759      	b.n	1ccc0 <context_sendto.isra.21+0x68>
	} else if (IS_ENABLED(CONFIG_NET_TCP) &&
   1ce0c:	2b06      	cmp	r3, #6
   1ce0e:	d119      	bne.n	1ce44 <context_sendto.isra.21+0x1ec>
		ret = context_write_data(pkt, buf, len, msghdr);
   1ce10:	4643      	mov	r3, r8
   1ce12:	463a      	mov	r2, r7
   1ce14:	4649      	mov	r1, r9
   1ce16:	4630      	mov	r0, r6
   1ce18:	f018 fd93 	bl	35942 <context_write_data>
		if (ret < 0) {
   1ce1c:	1e05      	subs	r5, r0, #0
   1ce1e:	dbf1      	blt.n	1ce04 <context_sendto.isra.21+0x1ac>
		net_pkt_cursor_init(pkt);
   1ce20:	4630      	mov	r0, r6
   1ce22:	f018 ffb2 	bl	35d8a <net_pkt_cursor_init>
		ret = net_tcp_queue_data(context, pkt);
   1ce26:	4631      	mov	r1, r6
   1ce28:	4620      	mov	r0, r4
   1ce2a:	f001 f869 	bl	1df00 <net_tcp_queue_data>
		if (ret < 0) {
   1ce2e:	1e05      	subs	r5, r0, #0
   1ce30:	dbe8      	blt.n	1ce04 <context_sendto.isra.21+0x1ac>
		ret = net_tcp_send_data(context, cb, user_data);
   1ce32:	465a      	mov	r2, fp
   1ce34:	4651      	mov	r1, sl
   1ce36:	4620      	mov	r0, r4
   1ce38:	f019 fdc5 	bl	369c6 <net_tcp_send_data>
   1ce3c:	e7cc      	b.n	1cdd8 <context_sendto.isra.21+0x180>
	int ret = -EINVAL;
   1ce3e:	f06f 0515 	mvn.w	r5, #21
   1ce42:	e7df      	b.n	1ce04 <context_sendto.isra.21+0x1ac>
		ret = -EPROTONOSUPPORT;
   1ce44:	f06f 057a 	mvn.w	r5, #122	; 0x7a
   1ce48:	e7dc      	b.n	1ce04 <context_sendto.isra.21+0x1ac>
		return -EBADF;
   1ce4a:	f06f 0508 	mvn.w	r5, #8
   1ce4e:	e737      	b.n	1ccc0 <context_sendto.isra.21+0x68>
		return -ENOMEM;
   1ce50:	f06f 050b 	mvn.w	r5, #11
   1ce54:	e734      	b.n	1ccc0 <context_sendto.isra.21+0x68>
   1ce56:	bf00      	nop
   1ce58:	200217f8 	.word	0x200217f8
   1ce5c:	0003da0d 	.word	0x0003da0d
   1ce60:	0003db8b 	.word	0x0003db8b
   1ce64:	0003b773 	.word	0x0003b773
   1ce68:	0003cb7f 	.word	0x0003cb7f
   1ce6c:	0003cb77 	.word	0x0003cb77
   1ce70:	0003cb4a 	.word	0x0003cb4a

0001ce74 <net_context_connect>:
{
   1ce74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ce78:	4604      	mov	r4, r0
   1ce7a:	b087      	sub	sp, #28
   1ce7c:	4615      	mov	r5, r2
   1ce7e:	461f      	mov	r7, r3
	NET_ASSERT(addr);
   1ce80:	460e      	mov	r6, r1
   1ce82:	b971      	cbnz	r1, 1cea2 <net_context_connect+0x2e>
   1ce84:	495d      	ldr	r1, [pc, #372]	; (1cffc <net_context_connect+0x188>)
   1ce86:	f240 3379 	movw	r3, #889	; 0x379
   1ce8a:	4a5d      	ldr	r2, [pc, #372]	; (1d000 <net_context_connect+0x18c>)
   1ce8c:	485d      	ldr	r0, [pc, #372]	; (1d004 <net_context_connect+0x190>)
   1ce8e:	f016 fb90 	bl	335b2 <printk>
   1ce92:	485d      	ldr	r0, [pc, #372]	; (1d008 <net_context_connect+0x194>)
   1ce94:	f016 fb8d 	bl	335b2 <printk>
   1ce98:	f240 3179 	movw	r1, #889	; 0x379
   1ce9c:	4858      	ldr	r0, [pc, #352]	; (1d000 <net_context_connect+0x18c>)
   1ce9e:	f016 fe89 	bl	33bb4 <assert_post_action>
	NET_ASSERT(PART_OF_ARRAY(contexts, context));
   1cea2:	b134      	cbz	r4, 1ceb2 <net_context_connect+0x3e>
   1cea4:	4b59      	ldr	r3, [pc, #356]	; (1d00c <net_context_connect+0x198>)
   1cea6:	429c      	cmp	r4, r3
   1cea8:	d303      	bcc.n	1ceb2 <net_context_connect+0x3e>
   1ceaa:	f503 7340 	add.w	r3, r3, #768	; 0x300
   1ceae:	429c      	cmp	r4, r3
   1ceb0:	d30e      	bcc.n	1ced0 <net_context_connect+0x5c>
   1ceb2:	4957      	ldr	r1, [pc, #348]	; (1d010 <net_context_connect+0x19c>)
   1ceb4:	f240 337a 	movw	r3, #890	; 0x37a
   1ceb8:	4a51      	ldr	r2, [pc, #324]	; (1d000 <net_context_connect+0x18c>)
   1ceba:	4852      	ldr	r0, [pc, #328]	; (1d004 <net_context_connect+0x190>)
   1cebc:	f016 fb79 	bl	335b2 <printk>
   1cec0:	4851      	ldr	r0, [pc, #324]	; (1d008 <net_context_connect+0x194>)
   1cec2:	f016 fb76 	bl	335b2 <printk>
   1cec6:	f240 317a 	movw	r1, #890	; 0x37a
   1ceca:	484d      	ldr	r0, [pc, #308]	; (1d000 <net_context_connect+0x18c>)
   1cecc:	f016 fe72 	bl	33bb4 <assert_post_action>
	k_mutex_lock(&context->lock, K_FOREVER);
   1ced0:	f104 0808 	add.w	r8, r4, #8
   1ced4:	4640      	mov	r0, r8
   1ced6:	f018 fd4f 	bl	35978 <k_mutex_lock.constprop.28>
	if (!net_context_is_used(context)) {
   1ceda:	4620      	mov	r0, r4
   1cedc:	f7ff fb7c 	bl	1c5d8 <net_context_is_used>
   1cee0:	2800      	cmp	r0, #0
   1cee2:	f000 8081 	beq.w	1cfe8 <net_context_connect+0x174>
	if (addr->sa_family != net_context_get_family(context)) {
   1cee6:	4620      	mov	r0, r4
   1cee8:	f8b6 9000 	ldrh.w	r9, [r6]
   1ceec:	f7ff fbda 	bl	1c6a4 <net_context_get_family>
   1cef0:	4581      	cmp	r9, r0
   1cef2:	d024      	beq.n	1cf3e <net_context_connect+0xca>
		NET_ASSERT(addr->sa_family == net_context_get_family(context),
   1cef4:	4620      	mov	r0, r4
   1cef6:	8835      	ldrh	r5, [r6, #0]
   1cef8:	f7ff fbd4 	bl	1c6a4 <net_context_get_family>
   1cefc:	4285      	cmp	r5, r0
   1cefe:	d108      	bne.n	1cf12 <net_context_connect+0x9e>
		ret = -EINVAL;
   1cf00:	f06f 0515 	mvn.w	r5, #21
	k_mutex_unlock(&context->lock);
   1cf04:	4640      	mov	r0, r8
   1cf06:	f018 fd1a 	bl	3593e <k_mutex_unlock>
}
   1cf0a:	4628      	mov	r0, r5
   1cf0c:	b007      	add	sp, #28
   1cf0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_ASSERT(addr->sa_family == net_context_get_family(context),
   1cf12:	f240 3387 	movw	r3, #903	; 0x387
   1cf16:	4a3a      	ldr	r2, [pc, #232]	; (1d000 <net_context_connect+0x18c>)
   1cf18:	493e      	ldr	r1, [pc, #248]	; (1d014 <net_context_connect+0x1a0>)
   1cf1a:	483a      	ldr	r0, [pc, #232]	; (1d004 <net_context_connect+0x190>)
   1cf1c:	f016 fb49 	bl	335b2 <printk>
   1cf20:	4620      	mov	r0, r4
   1cf22:	8835      	ldrh	r5, [r6, #0]
   1cf24:	f7ff fbbe 	bl	1c6a4 <net_context_get_family>
   1cf28:	4629      	mov	r1, r5
   1cf2a:	4602      	mov	r2, r0
   1cf2c:	483a      	ldr	r0, [pc, #232]	; (1d018 <net_context_connect+0x1a4>)
   1cf2e:	f016 fb40 	bl	335b2 <printk>
   1cf32:	f240 3187 	movw	r1, #903	; 0x387
   1cf36:	4832      	ldr	r0, [pc, #200]	; (1d000 <net_context_connect+0x18c>)
   1cf38:	f016 fe3c 	bl	33bb4 <assert_post_action>
   1cf3c:	e7e0      	b.n	1cf00 <net_context_connect+0x8c>
	if (net_context_get_state(context) == NET_CONTEXT_LISTENING) {
   1cf3e:	4620      	mov	r0, r4
   1cf40:	f7ff fb90 	bl	1c664 <net_context_get_state>
   1cf44:	2803      	cmp	r0, #3
   1cf46:	d052      	beq.n	1cfee <net_context_connect+0x17a>
		   net_context_get_family(context) == AF_INET) {
   1cf48:	4620      	mov	r0, r4
   1cf4a:	f7ff fbab 	bl	1c6a4 <net_context_get_family>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1cf4e:	2801      	cmp	r0, #1
   1cf50:	d1d6      	bne.n	1cf00 <net_context_connect+0x8c>
		if (addrlen < sizeof(struct sockaddr_in)) {
   1cf52:	2d07      	cmp	r5, #7
   1cf54:	d9d4      	bls.n	1cf00 <net_context_connect+0x8c>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1cf56:	6872      	ldr	r2, [r6, #4]
   1cf58:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   1cf5c:	62a2      	str	r2, [r4, #40]	; 0x28
		addr4->sin_port = net_sin(addr)->sin_port;
   1cf5e:	f8b6 9002 	ldrh.w	r9, [r6, #2]
		addr4->sin_family = AF_INET;
   1cf62:	84a0      	strh	r0, [r4, #36]	; 0x24
		addr4->sin_port = net_sin(addr)->sin_port;
   1cf64:	f8a4 9026 	strh.w	r9, [r4, #38]	; 0x26
		if (addr4->sin_addr.s_addr) {
   1cf68:	b33a      	cbz	r2, 1cfba <net_context_connect+0x146>
			context->flags |= NET_CONTEXT_REMOTE_ADDR_SET;
   1cf6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1cf6e:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
		ret = bind_default(context);
   1cf72:	4620      	mov	r0, r4
   1cf74:	f018 fd35 	bl	359e2 <bind_default>
		if (ret) {
   1cf78:	4605      	mov	r5, r0
   1cf7a:	2800      	cmp	r0, #0
   1cf7c:	d1c2      	bne.n	1cf04 <net_context_connect+0x90>
		net_sin_ptr(&context->local)->sin_family = AF_INET;
   1cf7e:	2301      	movs	r3, #1
		net_sin(&local_addr)->sin_port = lport =
   1cf80:	f8b4 b01e 	ldrh.w	fp, [r4, #30]
		if (net_sin_ptr(&context->local)->sin_addr) {
   1cf84:	f8d4 a020 	ldr.w	sl, [r4, #32]
		net_sin_ptr(&context->local)->sin_family = AF_INET;
   1cf88:	83a3      	strh	r3, [r4, #28]
		net_sin(&local_addr)->sin_family = AF_INET;
   1cf8a:	f8ad 3010 	strh.w	r3, [sp, #16]
		net_sin(&local_addr)->sin_port = lport =
   1cf8e:	f8ad b012 	strh.w	fp, [sp, #18]
		if (net_sin_ptr(&context->local)->sin_addr) {
   1cf92:	f1ba 0f00 	cmp.w	sl, #0
   1cf96:	d004      	beq.n	1cfa2 <net_context_connect+0x12e>
			net_ipaddr_copy(&net_sin(&local_addr)->sin_addr,
   1cf98:	f8da 3000 	ldr.w	r3, [sl]
   1cf9c:	9305      	str	r3, [sp, #20]
			laddr = &local_addr;
   1cf9e:	f10d 0a10 	add.w	sl, sp, #16
	    net_context_get_type(context) == SOCK_DGRAM) {
   1cfa2:	4620      	mov	r0, r4
   1cfa4:	f7ff fb9e 	bl	1c6e4 <net_context_get_type>
	if (IS_ENABLED(CONFIG_NET_UDP) &&
   1cfa8:	2802      	cmp	r0, #2
   1cfaa:	d10a      	bne.n	1cfc2 <net_context_connect+0x14e>
		if (cb) {
   1cfac:	2f00      	cmp	r7, #0
   1cfae:	d0a9      	beq.n	1cf04 <net_context_connect+0x90>
			cb(context, 0, user_data);
   1cfb0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1cfb2:	2100      	movs	r1, #0
   1cfb4:	4620      	mov	r0, r4
   1cfb6:	47b8      	blx	r7
   1cfb8:	e7a4      	b.n	1cf04 <net_context_connect+0x90>
			context->flags &= ~NET_CONTEXT_REMOTE_ADDR_SET;
   1cfba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   1cfbe:	b29b      	uxth	r3, r3
   1cfc0:	e7d5      	b.n	1cf6e <net_context_connect+0xfa>
		   net_context_get_type(context) == SOCK_STREAM) {
   1cfc2:	4620      	mov	r0, r4
   1cfc4:	f7ff fb8e 	bl	1c6e4 <net_context_get_type>
	} else if (IS_ENABLED(CONFIG_NET_TCP) &&
   1cfc8:	2801      	cmp	r0, #1
   1cfca:	d113      	bne.n	1cff4 <net_context_connect+0x180>
		ret = net_tcp_connect(context, addr, laddr, rport, lport,
   1cfcc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1cfce:	4652      	mov	r2, sl
   1cfd0:	e9cd 7302 	strd	r7, r3, [sp, #8]
   1cfd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1cfd6:	4631      	mov	r1, r6
   1cfd8:	e9cd b300 	strd	fp, r3, [sp]
   1cfdc:	4620      	mov	r0, r4
   1cfde:	464b      	mov	r3, r9
   1cfe0:	f001 fcd6 	bl	1e990 <net_tcp_connect>
   1cfe4:	4605      	mov	r5, r0
   1cfe6:	e78d      	b.n	1cf04 <net_context_connect+0x90>
		ret = -EBADF;
   1cfe8:	f06f 0508 	mvn.w	r5, #8
   1cfec:	e78a      	b.n	1cf04 <net_context_connect+0x90>
		ret = -EOPNOTSUPP;
   1cfee:	f06f 055e 	mvn.w	r5, #94	; 0x5e
   1cff2:	e787      	b.n	1cf04 <net_context_connect+0x90>
		ret = -ENOTSUP;
   1cff4:	f06f 0585 	mvn.w	r5, #133	; 0x85
   1cff8:	e784      	b.n	1cf04 <net_context_connect+0x90>
   1cffa:	bf00      	nop
   1cffc:	0003db86 	.word	0x0003db86
   1d000:	0003db8b 	.word	0x0003db8b
   1d004:	0003b773 	.word	0x0003b773
   1d008:	0003cb7f 	.word	0x0003cb7f
   1d00c:	200217f8 	.word	0x200217f8
   1d010:	0003da0d 	.word	0x0003da0d
   1d014:	0003daff 	.word	0x0003daff
   1d018:	0003db32 	.word	0x0003db32

0001d01c <net_context_accept>:
{
   1d01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d01e:	460e      	mov	r6, r1
   1d020:	461f      	mov	r7, r3
	NET_ASSERT(PART_OF_ARRAY(contexts, context));
   1d022:	4604      	mov	r4, r0
   1d024:	b130      	cbz	r0, 1d034 <net_context_accept+0x18>
   1d026:	4b20      	ldr	r3, [pc, #128]	; (1d0a8 <net_context_accept+0x8c>)
   1d028:	4298      	cmp	r0, r3
   1d02a:	d303      	bcc.n	1d034 <net_context_accept+0x18>
   1d02c:	f503 7340 	add.w	r3, r3, #768	; 0x300
   1d030:	4298      	cmp	r0, r3
   1d032:	d30e      	bcc.n	1d052 <net_context_accept+0x36>
   1d034:	491d      	ldr	r1, [pc, #116]	; (1d0ac <net_context_accept+0x90>)
   1d036:	f240 4325 	movw	r3, #1061	; 0x425
   1d03a:	4a1d      	ldr	r2, [pc, #116]	; (1d0b0 <net_context_accept+0x94>)
   1d03c:	481d      	ldr	r0, [pc, #116]	; (1d0b4 <net_context_accept+0x98>)
   1d03e:	f016 fab8 	bl	335b2 <printk>
   1d042:	481d      	ldr	r0, [pc, #116]	; (1d0b8 <net_context_accept+0x9c>)
   1d044:	f016 fab5 	bl	335b2 <printk>
   1d048:	f240 4125 	movw	r1, #1061	; 0x425
   1d04c:	4818      	ldr	r0, [pc, #96]	; (1d0b0 <net_context_accept+0x94>)
   1d04e:	f016 fdb1 	bl	33bb4 <assert_post_action>
	if (!net_context_is_used(context)) {
   1d052:	4620      	mov	r0, r4
   1d054:	f7ff fac0 	bl	1c5d8 <net_context_is_used>
   1d058:	b310      	cbz	r0, 1d0a0 <net_context_accept+0x84>
	k_mutex_lock(&context->lock, K_FOREVER);
   1d05a:	f104 0508 	add.w	r5, r4, #8
   1d05e:	4628      	mov	r0, r5
   1d060:	f018 fc8a 	bl	35978 <k_mutex_lock.constprop.28>
	if ((net_context_get_state(context) != NET_CONTEXT_LISTENING) &&
   1d064:	4620      	mov	r0, r4
   1d066:	f7ff fafd 	bl	1c664 <net_context_get_state>
   1d06a:	2803      	cmp	r0, #3
   1d06c:	d109      	bne.n	1d082 <net_context_accept+0x66>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1d06e:	f8b4 3078 	ldrh.w	r3, [r4, #120]	; 0x78
   1d072:	2b06      	cmp	r3, #6
   1d074:	d00d      	beq.n	1d092 <net_context_accept+0x76>
	int ret = 0;
   1d076:	2400      	movs	r4, #0
	k_mutex_unlock(&context->lock);
   1d078:	4628      	mov	r0, r5
   1d07a:	f018 fc60 	bl	3593e <k_mutex_unlock>
}
   1d07e:	4620      	mov	r0, r4
   1d080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    (net_context_get_type(context) != SOCK_STREAM)) {
   1d082:	4620      	mov	r0, r4
   1d084:	f7ff fb2e 	bl	1c6e4 <net_context_get_type>
	if ((net_context_get_state(context) != NET_CONTEXT_LISTENING) &&
   1d088:	2801      	cmp	r0, #1
   1d08a:	d0f0      	beq.n	1d06e <net_context_accept+0x52>
		ret = -EINVAL;
   1d08c:	f06f 0415 	mvn.w	r4, #21
   1d090:	e7f2      	b.n	1d078 <net_context_accept+0x5c>
		ret = net_tcp_accept(context, cb, user_data);
   1d092:	4620      	mov	r0, r4
   1d094:	463a      	mov	r2, r7
   1d096:	4631      	mov	r1, r6
   1d098:	f001 fc00 	bl	1e89c <net_tcp_accept>
   1d09c:	4604      	mov	r4, r0
		goto unlock;
   1d09e:	e7eb      	b.n	1d078 <net_context_accept+0x5c>
		return -EBADF;
   1d0a0:	f06f 0408 	mvn.w	r4, #8
   1d0a4:	e7eb      	b.n	1d07e <net_context_accept+0x62>
   1d0a6:	bf00      	nop
   1d0a8:	200217f8 	.word	0x200217f8
   1d0ac:	0003da0d 	.word	0x0003da0d
   1d0b0:	0003db8b 	.word	0x0003db8b
   1d0b4:	0003b773 	.word	0x0003b773
   1d0b8:	0003cb7f 	.word	0x0003cb7f

0001d0bc <net_context_recv>:

int net_context_recv(struct net_context *context,
		     net_context_recv_cb_t cb,
		     k_timeout_t timeout,
		     void *user_data)
{
   1d0bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d0c0:	4688      	mov	r8, r1
   1d0c2:	b088      	sub	sp, #32
   1d0c4:	4617      	mov	r7, r2
   1d0c6:	4699      	mov	r9, r3
	int ret;
	NET_ASSERT(context);
   1d0c8:	4604      	mov	r4, r0
   1d0ca:	b970      	cbnz	r0, 1d0ea <net_context_recv+0x2e>
   1d0cc:	4944      	ldr	r1, [pc, #272]	; (1d1e0 <net_context_recv+0x124>)
   1d0ce:	f240 7365 	movw	r3, #1893	; 0x765
   1d0d2:	4a44      	ldr	r2, [pc, #272]	; (1d1e4 <net_context_recv+0x128>)
   1d0d4:	4844      	ldr	r0, [pc, #272]	; (1d1e8 <net_context_recv+0x12c>)
   1d0d6:	f016 fa6c 	bl	335b2 <printk>
   1d0da:	4844      	ldr	r0, [pc, #272]	; (1d1ec <net_context_recv+0x130>)
   1d0dc:	f016 fa69 	bl	335b2 <printk>
   1d0e0:	f240 7165 	movw	r1, #1893	; 0x765
   1d0e4:	483f      	ldr	r0, [pc, #252]	; (1d1e4 <net_context_recv+0x128>)
   1d0e6:	f016 fd65 	bl	33bb4 <assert_post_action>

	if (!net_context_is_used(context)) {
   1d0ea:	4620      	mov	r0, r4
   1d0ec:	f7ff fa74 	bl	1c5d8 <net_context_is_used>
   1d0f0:	2800      	cmp	r0, #0
   1d0f2:	d071      	beq.n	1d1d8 <net_context_recv+0x11c>
		return -EBADF;
	}

	k_mutex_lock(&context->lock, K_FOREVER);
   1d0f4:	f104 0608 	add.w	r6, r4, #8
   1d0f8:	4630      	mov	r0, r6
   1d0fa:	f018 fc3d 	bl	35978 <k_mutex_lock.constprop.28>
			context, cb, timeout, user_data);
		goto unlock;
	}

	if (IS_ENABLED(CONFIG_NET_UDP) &&
	    net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1d0fe:	f8b4 3078 	ldrh.w	r3, [r4, #120]	; 0x78
	if (IS_ENABLED(CONFIG_NET_UDP) &&
   1d102:	2b11      	cmp	r3, #17
   1d104:	d15d      	bne.n	1d1c2 <net_context_recv+0x106>
	struct sockaddr local_addr = {
   1d106:	2500      	movs	r5, #0
		.sa_family = net_context_get_family(context),
   1d108:	4620      	mov	r0, r4
	struct sockaddr local_addr = {
   1d10a:	e9cd 5506 	strd	r5, r5, [sp, #24]
		.sa_family = net_context_get_family(context),
   1d10e:	f7ff fac9 	bl	1c6a4 <net_context_get_family>
	struct sockaddr local_addr = {
   1d112:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (context->conn_handler) {
   1d116:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1d118:	b110      	cbz	r0, 1d120 <net_context_recv+0x64>
		net_conn_unregister(context->conn_handler);
   1d11a:	f000 fab5 	bl	1d688 <net_conn_unregister>
		context->conn_handler = NULL;
   1d11e:	62e5      	str	r5, [r4, #44]	; 0x2c
	ret = bind_default(context);
   1d120:	4620      	mov	r0, r4
   1d122:	f018 fc5e 	bl	359e2 <bind_default>
	if (ret) {
   1d126:	4605      	mov	r5, r0
   1d128:	bb90      	cbnz	r0, 1d190 <net_context_recv+0xd4>
		   net_context_get_family(context) == AF_INET) {
   1d12a:	4620      	mov	r0, r4
   1d12c:	f7ff faba 	bl	1c6a4 <net_context_get_family>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1d130:	2801      	cmp	r0, #1
   1d132:	d144      	bne.n	1d1be <net_context_recv+0x102>
		if (net_sin_ptr(&context->local)->sin_addr) {
   1d134:	f8d4 a020 	ldr.w	sl, [r4, #32]
   1d138:	f1ba 0f00 	cmp.w	sl, #0
   1d13c:	d004      	beq.n	1d148 <net_context_recv+0x8c>
			net_ipaddr_copy(&net_sin(&local_addr)->sin_addr,
   1d13e:	f8da 3000 	ldr.w	r3, [sl]
   1d142:	9307      	str	r3, [sp, #28]
			laddr = &local_addr;
   1d144:	f10d 0a18 	add.w	sl, sp, #24
		lport = net_sin((struct sockaddr *)&context->local)->sin_port;
   1d148:	8be5      	ldrh	r5, [r4, #30]
	context->recv_cb = cb;
   1d14a:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
				net_context_get_family(context),
   1d14e:	4620      	mov	r0, r4
	ret = net_conn_register(net_context_get_ip_proto(context),
   1d150:	f8b4 8078 	ldrh.w	r8, [r4, #120]	; 0x78
				net_context_get_family(context),
   1d154:	f7ff faa6 	bl	1c6a4 <net_context_get_family>
	ret = net_conn_register(net_context_get_ip_proto(context),
   1d158:	f104 032c 	add.w	r3, r4, #44	; 0x2c
   1d15c:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
   1d160:	b2c1      	uxtb	r1, r0
				ntohs(net_sin(&context->remote)->sin_port),
   1d162:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
	ret = net_conn_register(net_context_get_ip_proto(context),
   1d164:	e9cd 9303 	strd	r9, r3, [sp, #12]
   1d168:	4b21      	ldr	r3, [pc, #132]	; (1d1f0 <net_context_recv+0x134>)
   1d16a:	ba6d      	rev16	r5, r5
   1d16c:	9302      	str	r3, [sp, #8]
				ntohs(net_sin(&context->remote)->sin_port),
   1d16e:	0203      	lsls	r3, r0, #8
   1d170:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
	ret = net_conn_register(net_context_get_ip_proto(context),
   1d174:	b29b      	uxth	r3, r3
   1d176:	f412 7280 	ands.w	r2, r2, #256	; 0x100
   1d17a:	b2ad      	uxth	r5, r5
   1d17c:	9300      	str	r3, [sp, #0]
   1d17e:	bf18      	it	ne
   1d180:	f104 0224 	addne.w	r2, r4, #36	; 0x24
   1d184:	9501      	str	r5, [sp, #4]
   1d186:	4653      	mov	r3, sl
   1d188:	4640      	mov	r0, r8
   1d18a:	f000 f9bb 	bl	1d504 <net_conn_register>
		ret = recv_udp(context, cb, timeout, user_data);
	} else if (IS_ENABLED(CONFIG_NET_TCP) &&
		   net_context_get_ip_proto(context) == IPPROTO_TCP) {
		ret = net_tcp_recv(context, cb, user_data);
   1d18e:	4605      	mov	r5, r0
		} else {
			ret = -EPROTOTYPE;
		}
	}

	if (ret < 0) {
   1d190:	2d00      	cmp	r5, #0
   1d192:	db0d      	blt.n	1d1b0 <net_context_recv+0xf4>
		goto unlock;
	}

#if defined(CONFIG_NET_CONTEXT_SYNC_RECV)
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1d194:	b167      	cbz	r7, 1d1b0 <net_context_recv+0xf4>
	sem->count = 0U;
   1d196:	2300      	movs	r3, #0
		 * net_context_packet_received() callback will release the
		 * semaphore when data has been received.
		 */
		k_sem_reset(&context->recv_data_wait);

		k_mutex_unlock(&context->lock);
   1d198:	4630      	mov	r0, r6
   1d19a:	64a3      	str	r3, [r4, #72]	; 0x48
   1d19c:	f018 fbcf 	bl	3593e <k_mutex_unlock>
	return z_impl_k_sem_take(sem, timeout);
   1d1a0:	4639      	mov	r1, r7
   1d1a2:	f104 0040 	add.w	r0, r4, #64	; 0x40
   1d1a6:	f010 ff5b 	bl	2e060 <z_impl_k_sem_take>

		ret = k_sem_take(&context->recv_data_wait, timeout);

		k_mutex_lock(&context->lock, K_FOREVER);
   1d1aa:	4630      	mov	r0, r6
   1d1ac:	f018 fbe4 	bl	35978 <k_mutex_lock.constprop.28>
		}
	}
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

unlock:
	k_mutex_unlock(&context->lock);
   1d1b0:	4630      	mov	r0, r6
   1d1b2:	f018 fbc4 	bl	3593e <k_mutex_unlock>

	return ret;
}
   1d1b6:	4628      	mov	r0, r5
   1d1b8:	b008      	add	sp, #32
   1d1ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct sockaddr *laddr = NULL;
   1d1be:	46aa      	mov	sl, r5
   1d1c0:	e7c3      	b.n	1d14a <net_context_recv+0x8e>
	} else if (IS_ENABLED(CONFIG_NET_TCP) &&
   1d1c2:	2b06      	cmp	r3, #6
   1d1c4:	d105      	bne.n	1d1d2 <net_context_recv+0x116>
		ret = net_tcp_recv(context, cb, user_data);
   1d1c6:	464a      	mov	r2, r9
   1d1c8:	4641      	mov	r1, r8
   1d1ca:	4620      	mov	r0, r4
   1d1cc:	f001 fae0 	bl	1e790 <net_tcp_recv>
   1d1d0:	e7dd      	b.n	1d18e <net_context_recv+0xd2>
			ret = -EPROTOTYPE;
   1d1d2:	f06f 056a 	mvn.w	r5, #106	; 0x6a
   1d1d6:	e7eb      	b.n	1d1b0 <net_context_recv+0xf4>
		return -EBADF;
   1d1d8:	f06f 0508 	mvn.w	r5, #8
   1d1dc:	e7eb      	b.n	1d1b6 <net_context_recv+0xfa>
   1d1de:	bf00      	nop
   1d1e0:	0003cb77 	.word	0x0003cb77
   1d1e4:	0003db8b 	.word	0x0003db8b
   1d1e8:	0003b773 	.word	0x0003b773
   1d1ec:	0003cb7f 	.word	0x0003cb7f
   1d1f0:	0001c791 	.word	0x0001c791

0001d1f4 <net_context_init>:
	return z_impl_k_sem_init(sem, initial_count, limit);
   1d1f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d1f8:	2101      	movs	r1, #1
   1d1fa:	4801      	ldr	r0, [pc, #4]	; (1d200 <net_context_init+0xc>)
   1d1fc:	f01b bd86 	b.w	38d0c <z_impl_k_sem_init>
   1d200:	20021af8 	.word	0x20021af8

0001d204 <net_pkt_alloc_buffer>:
int net_pkt_alloc_buffer(struct net_pkt *pkt,
			 size_t size,
			 enum net_ip_protocol proto,
			 k_timeout_t timeout)
#endif
{
   1d204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d208:	4607      	mov	r7, r0
   1d20a:	b085      	sub	sp, #20
	u64_t end = z_timeout_end_calc(timeout);
   1d20c:	4618      	mov	r0, r3
{
   1d20e:	460e      	mov	r6, r1
   1d210:	4690      	mov	r8, r2
   1d212:	461c      	mov	r4, r3
	u64_t end = z_timeout_end_calc(timeout);
   1d214:	f01b fe09 	bl	38e2a <z_timeout_end_calc>
   1d218:	4681      	mov	r9, r0
   1d21a:	468a      	mov	sl, r1
	struct net_buf_pool *pool = NULL;
	size_t alloc_len = 0;
	size_t hdr_len = 0;
	struct net_buf *buf;

	if (!size && proto == 0 && net_pkt_family(pkt) == AF_UNSPEC) {
   1d21c:	b946      	cbnz	r6, 1d230 <net_pkt_alloc_buffer+0x2c>
   1d21e:	f1b8 0f00 	cmp.w	r8, #0
   1d222:	d105      	bne.n	1d230 <net_pkt_alloc_buffer+0x2c>
	return pkt->family;
   1d224:	f897 003f 	ldrb.w	r0, [r7, #63]	; 0x3f
   1d228:	f3c0 0042 	ubfx	r0, r0, #1, #3
   1d22c:	2800      	cmp	r0, #0
   1d22e:	d074      	beq.n	1d31a <net_pkt_alloc_buffer+0x116>
		return 0;
	}

	if (k_is_in_isr()) {
   1d230:	f01b fd7c 	bl	38d2c <k_is_in_isr>
		timeout = K_NO_WAIT;
   1d234:	2800      	cmp	r0, #0
	}

	/* Verifying existing buffer and take into account free space there */
	alloc_len = pkt_get_size(pkt) - net_pkt_get_len(pkt);
   1d236:	6938      	ldr	r0, [r7, #16]
		timeout = K_NO_WAIT;
   1d238:	bf18      	it	ne
   1d23a:	2400      	movne	r4, #0
	struct net_buf *buf = pkt->buffer;
   1d23c:	4605      	mov	r5, r0
	size_t size = 0;
   1d23e:	f04f 0b00 	mov.w	fp, #0
	while (buf) {
   1d242:	2d00      	cmp	r5, #0
   1d244:	d156      	bne.n	1d2f4 <net_pkt_alloc_buffer+0xf0>
	return net_buf_frags_len(pkt->frags);
   1d246:	f018 fc69 	bl	35b1c <net_buf_frags_len>
   1d24a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
	if (!alloc_len) {
   1d24e:	4558      	cmp	r0, fp
   1d250:	4603      	mov	r3, r0
   1d252:	f3c2 0242 	ubfx	r2, r2, #1, #3
   1d256:	d151      	bne.n	1d2fc <net_pkt_alloc_buffer+0xf8>
		/* In case of no free space, it will account for header
		 * space estimation
		 */
		hdr_len = pkt_estimate_headers_length(pkt,
   1d258:	b290      	uxth	r0, r2
	if (family == AF_UNSPEC) {
   1d25a:	2800      	cmp	r0, #0
   1d25c:	d04e      	beq.n	1d2fc <net_pkt_alloc_buffer+0xf8>
   1d25e:	4641      	mov	r1, r8
   1d260:	f018 fca4 	bl	35bac <pkt_estimate_headers_length.isra.19.part.20>
	if (net_pkt_iface(pkt)) {
   1d264:	6a39      	ldr	r1, [r7, #32]
						      net_pkt_family(pkt),
						      proto);
	}

	/* Calculate the maximum that can be allocated depending on size */
	alloc_len = pkt_buffer_length(pkt, size + hdr_len, proto, alloc_len);
   1d266:	4406      	add	r6, r0
	if (net_pkt_iface(pkt)) {
   1d268:	b109      	cbz	r1, 1d26e <net_pkt_alloc_buffer+0x6a>
 *
 * @return the MTU
 */
static inline u16_t net_if_get_mtu(struct net_if *iface)
{
	return iface->if_dev->mtu;
   1d26a:	6809      	ldr	r1, [r1, #0]
		max_len = net_if_get_mtu(net_pkt_iface(pkt));
   1d26c:	8b09      	ldrh	r1, [r1, #24]
	} else if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
   1d26e:	2a01      	cmp	r2, #1
   1d270:	d146      	bne.n	1d300 <net_pkt_alloc_buffer+0xfc>
		max_len = MAX(max_len, NET_IPV4_MTU);
   1d272:	f5b1 7f10 	cmp.w	r1, #576	; 0x240
   1d276:	bf38      	it	cc
   1d278:	f44f 7110 	movcc.w	r1, #576	; 0x240
	max_len -= existing;
   1d27c:	eba3 030b 	sub.w	r3, r3, fp
   1d280:	4419      	add	r1, r3
	return MIN(size, max_len);
   1d282:	428e      	cmp	r6, r1
   1d284:	bf28      	it	cs
   1d286:	460e      	movcs	r6, r1
	if (pkt->context) {
		pool = get_data_pool(pkt->context);
	}

	if (!pool) {
		pool = pkt->slab == &tx_pkts ? &tx_bufs : &rx_bufs;
   1d288:	4b3c      	ldr	r3, [pc, #240]	; (1d37c <net_pkt_alloc_buffer+0x178>)
   1d28a:	68f9      	ldr	r1, [r7, #12]
   1d28c:	483c      	ldr	r0, [pc, #240]	; (1d380 <net_pkt_alloc_buffer+0x17c>)
   1d28e:	4a3d      	ldr	r2, [pc, #244]	; (1d384 <net_pkt_alloc_buffer+0x180>)
   1d290:	4281      	cmp	r1, r0
   1d292:	bf0c      	ite	eq
   1d294:	4690      	moveq	r8, r2
   1d296:	4698      	movne	r8, r3
	}

	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1d298:	1c63      	adds	r3, r4, #1
   1d29a:	2b01      	cmp	r3, #1
   1d29c:	d91a      	bls.n	1d2d4 <net_pkt_alloc_buffer+0xd0>
	    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
		s64_t remaining = end - z_tick_get();
   1d29e:	f011 fd23 	bl	2ece8 <z_tick_get>
   1d2a2:	ebb9 0300 	subs.w	r3, r9, r0
   1d2a6:	9300      	str	r3, [sp, #0]
   1d2a8:	eb6a 0301 	sbc.w	r3, sl, r1
   1d2ac:	9301      	str	r3, [sp, #4]

		if (remaining <= 0) {
   1d2ae:	e9dd 3400 	ldrd	r3, r4, [sp]
   1d2b2:	2b01      	cmp	r3, #1
   1d2b4:	f174 0300 	sbcs.w	r3, r4, #0
   1d2b8:	bfa3      	ittte	ge
   1d2ba:	f647 72ff 	movwge	r2, #32767	; 0x7fff
   1d2be:	2300      	movge	r3, #0
   1d2c0:	f44f 717a 	movge.w	r1, #1000	; 0x3e8
			timeout = K_NO_WAIT;
   1d2c4:	2400      	movlt	r4, #0
   1d2c6:	bfa1      	itttt	ge
   1d2c8:	9800      	ldrge	r0, [sp, #0]
   1d2ca:	fbe1 2300 	umlalge	r2, r3, r1, r0
   1d2ce:	0bd4      	lsrge	r4, r2, #15
   1d2d0:	ea44 4443 	orrge.w	r4, r4, r3, lsl #17
	u64_t end = z_timeout_end_calc(timeout);
   1d2d4:	4620      	mov	r0, r4
   1d2d6:	f01b fda8 	bl	38e2a <z_timeout_end_calc>
   1d2da:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
   1d2de:	4681      	mov	r9, r0
   1d2e0:	468b      	mov	fp, r1
	struct net_buf *current = NULL;
   1d2e2:	2200      	movs	r2, #0
	while (size) {
   1d2e4:	b976      	cbnz	r6, 1d304 <net_pkt_alloc_buffer+0x100>
	buf = pkt_alloc_buffer(pool, alloc_len, timeout, caller, line);
#else
	buf = pkt_alloc_buffer(pool, alloc_len, timeout);
#endif

	if (!buf) {
   1d2e6:	b1b5      	cbz	r5, 1d316 <net_pkt_alloc_buffer+0x112>
		NET_ERR("Data buffer (%zd) allocation failed.", alloc_len);
#endif
		return -ENOMEM;
	}

	net_pkt_append_buffer(pkt, buf);
   1d2e8:	4638      	mov	r0, r7
   1d2ea:	4629      	mov	r1, r5
   1d2ec:	f018 fd82 	bl	35df4 <net_pkt_append_buffer>

	return 0;
   1d2f0:	2000      	movs	r0, #0
   1d2f2:	e012      	b.n	1d31a <net_pkt_alloc_buffer+0x116>
		size += buf->size;
   1d2f4:	89eb      	ldrh	r3, [r5, #14]
		buf = buf->frags;
   1d2f6:	682d      	ldr	r5, [r5, #0]
		size += buf->size;
   1d2f8:	449b      	add	fp, r3
		buf = buf->frags;
   1d2fa:	e7a2      	b.n	1d242 <net_pkt_alloc_buffer+0x3e>
	size_t hdr_len = 0;
   1d2fc:	4628      	mov	r0, r5
   1d2fe:	e7b1      	b.n	1d264 <net_pkt_alloc_buffer+0x60>
			max_len = size;
   1d300:	4631      	mov	r1, r6
   1d302:	e7bb      	b.n	1d27c <net_pkt_alloc_buffer+0x78>
		new = net_buf_alloc_fixed(pool, timeout);
   1d304:	4621      	mov	r1, r4
   1d306:	4640      	mov	r0, r8
   1d308:	9200      	str	r2, [sp, #0]
   1d30a:	f018 f8e7 	bl	354dc <net_buf_alloc_fixed>
		if (!new) {
   1d30e:	9a00      	ldr	r2, [sp, #0]
   1d310:	4603      	mov	r3, r0
   1d312:	b928      	cbnz	r0, 1d320 <net_pkt_alloc_buffer+0x11c>
	if (first) {
   1d314:	bb6d      	cbnz	r5, 1d372 <net_pkt_alloc_buffer+0x16e>
		return -ENOMEM;
   1d316:	f06f 000b 	mvn.w	r0, #11
}
   1d31a:	b005      	add	sp, #20
   1d31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!first && !current) {
   1d320:	b905      	cbnz	r5, 1d324 <net_pkt_alloc_buffer+0x120>
   1d322:	b322      	cbz	r2, 1d36e <net_pkt_alloc_buffer+0x16a>
			current->frags = new;
   1d324:	6013      	str	r3, [r2, #0]
		if (current->size > size) {
   1d326:	89da      	ldrh	r2, [r3, #14]
   1d328:	42b2      	cmp	r2, r6
			current->size = size;
   1d32a:	bf88      	it	hi
   1d32c:	81de      	strhhi	r6, [r3, #14]
		size -= current->size;
   1d32e:	89da      	ldrh	r2, [r3, #14]
   1d330:	1ab6      	subs	r6, r6, r2
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1d332:	1c62      	adds	r2, r4, #1
   1d334:	2a01      	cmp	r2, #1
   1d336:	d918      	bls.n	1d36a <net_pkt_alloc_buffer+0x166>
   1d338:	9300      	str	r3, [sp, #0]
			s64_t remaining = end - z_tick_get();
   1d33a:	f011 fcd5 	bl	2ece8 <z_tick_get>
   1d33e:	ebb9 0300 	subs.w	r3, r9, r0
   1d342:	9302      	str	r3, [sp, #8]
   1d344:	eb6b 0301 	sbc.w	r3, fp, r1
   1d348:	9303      	str	r3, [sp, #12]
			if (remaining <= 0) {
   1d34a:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   1d34e:	2b01      	cmp	r3, #1
   1d350:	f174 0300 	sbcs.w	r3, r4, #0
   1d354:	dbc7      	blt.n	1d2e6 <net_pkt_alloc_buffer+0xe2>
   1d356:	f647 70ff 	movw	r0, #32767	; 0x7fff
   1d35a:	2100      	movs	r1, #0
   1d35c:	9b02      	ldr	r3, [sp, #8]
   1d35e:	fbea 0103 	umlal	r0, r1, sl, r3
   1d362:	9b00      	ldr	r3, [sp, #0]
   1d364:	0bc4      	lsrs	r4, r0, #15
   1d366:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
		if (!first && !current) {
   1d36a:	461a      	mov	r2, r3
   1d36c:	e7ba      	b.n	1d2e4 <net_pkt_alloc_buffer+0xe0>
   1d36e:	4605      	mov	r5, r0
   1d370:	e7d9      	b.n	1d326 <net_pkt_alloc_buffer+0x122>
		net_buf_unref(first);
   1d372:	4628      	mov	r0, r5
   1d374:	f7fe fd94 	bl	1bea0 <net_buf_unref>
   1d378:	e7cd      	b.n	1d316 <net_pkt_alloc_buffer+0x112>
   1d37a:	bf00      	nop
   1d37c:	20020850 	.word	0x20020850
   1d380:	20020684 	.word	0x20020684
   1d384:	2002087c 	.word	0x2002087c

0001d388 <net_pkt_alloc_with_buffer>:
					  size_t size,
					  sa_family_t family,
					  enum net_ip_protocol proto,
					  k_timeout_t timeout)
#endif
{
   1d388:	b513      	push	{r0, r1, r4, lr}
#if NET_LOG_LEVEL >= LOG_LEVEL_DBG
	return pkt_alloc_with_buffer(&tx_pkts, iface, size, family,
				     proto, timeout, caller, line);
#else
	return pkt_alloc_with_buffer(&tx_pkts, iface, size, family,
   1d38a:	9c04      	ldr	r4, [sp, #16]
   1d38c:	e9cd 3400 	strd	r3, r4, [sp]
   1d390:	4613      	mov	r3, r2
   1d392:	460a      	mov	r2, r1
   1d394:	4601      	mov	r1, r0
   1d396:	4802      	ldr	r0, [pc, #8]	; (1d3a0 <net_pkt_alloc_with_buffer+0x18>)
   1d398:	f018 fd3e 	bl	35e18 <pkt_alloc_with_buffer>
				     proto, timeout);
#endif
}
   1d39c:	b002      	add	sp, #8
   1d39e:	bd10      	pop	{r4, pc}
   1d3a0:	20020684 	.word	0x20020684

0001d3a4 <net_tc_submit_to_tx_queue>:

static struct net_traffic_class tx_classes[NET_TC_TX_COUNT];
static struct net_traffic_class rx_classes[NET_TC_RX_COUNT];

bool net_tc_submit_to_tx_queue(u8_t tc, struct net_pkt *pkt)
{
   1d3a4:	b508      	push	{r3, lr}
   1d3a6:	460b      	mov	r3, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d3a8:	3308      	adds	r3, #8
   1d3aa:	e8d3 3faf 	lda	r3, [r3]
	if (k_work_pending(net_pkt_work(pkt))) {
   1d3ae:	07db      	lsls	r3, r3, #31
   1d3b0:	d407      	bmi.n	1d3c2 <net_tc_submit_to_tx_queue+0x1e>
		return false;
	}

	k_work_submit_to_queue(&tx_classes[tc].work_q, net_pkt_work(pkt));
   1d3b2:	22dc      	movs	r2, #220	; 0xdc
   1d3b4:	4b04      	ldr	r3, [pc, #16]	; (1d3c8 <net_tc_submit_to_tx_queue+0x24>)
   1d3b6:	fb00 3002 	mla	r0, r0, r2, r3
   1d3ba:	f018 feea 	bl	36192 <k_work_submit_to_queue>

	return true;
   1d3be:	2001      	movs	r0, #1
}
   1d3c0:	bd08      	pop	{r3, pc}
		return false;
   1d3c2:	2000      	movs	r0, #0
   1d3c4:	e7fc      	b.n	1d3c0 <net_tc_submit_to_tx_queue+0x1c>
   1d3c6:	bf00      	nop
   1d3c8:	20021bec 	.word	0x20021bec

0001d3cc <net_tx_priority2tc>:

int net_tx_priority2tc(enum net_priority prio)
{
	if (prio > NET_PRIORITY_NC) {
		/* Use default value suggested in 802.1Q */
		prio = NET_PRIORITY_BE;
   1d3cc:	2807      	cmp	r0, #7
   1d3ce:	bf88      	it	hi
   1d3d0:	2000      	movhi	r0, #0
	}

	return tx_prio2tc_map[prio];
}
   1d3d2:	4b01      	ldr	r3, [pc, #4]	; (1d3d8 <net_tx_priority2tc+0xc>)
   1d3d4:	5c18      	ldrb	r0, [r3, r0]
   1d3d6:	4770      	bx	lr
   1d3d8:	0003dbdf 	.word	0x0003dbdf

0001d3dc <net_tc_tx_init>:

	for (i = 0; i < NET_TC_TX_COUNT; i++) {
		u8_t thread_priority;

		thread_priority = tx_tc2thread(i);
		tx_classes[i].tc = thread_priority;
   1d3dc:	2307      	movs	r3, #7
{
   1d3de:	b510      	push	{r4, lr}
		tx_classes[i].tc = thread_priority;
   1d3e0:	4c08      	ldr	r4, [pc, #32]	; (1d404 <net_tc_tx_init+0x28>)
			"prio %d (%d)", i,
			&tx_classes[i].work_q.queue,
			K_THREAD_STACK_SIZEOF(tx_stack[i]),
			thread_priority, K_PRIO_COOP(thread_priority));

		k_work_q_start(&tx_classes[i].work_q,
   1d3e2:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
		tx_classes[i].tc = thread_priority;
   1d3e6:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
		k_work_q_start(&tx_classes[i].work_q,
   1d3ea:	4907      	ldr	r1, [pc, #28]	; (1d408 <net_tc_tx_init+0x2c>)
   1d3ec:	f06f 0308 	mvn.w	r3, #8
   1d3f0:	4620      	mov	r0, r4
   1d3f2:	f011 f891 	bl	2e518 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   1d3f6:	4905      	ldr	r1, [pc, #20]	; (1d40c <net_tc_tx_init+0x30>)
   1d3f8:	f104 001c 	add.w	r0, r4, #28
			       tx_stack[i],
			       K_THREAD_STACK_SIZEOF(tx_stack[i]),
			       K_PRIO_COOP(thread_priority));
		k_thread_name_set(&tx_classes[i].work_q.thread, "tx_workq");
	}
}
   1d3fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d400:	f01b bc9c 	b.w	38d3c <z_impl_k_thread_name_set>
   1d404:	20021bec 	.word	0x20021bec
   1d408:	20031608 	.word	0x20031608
   1d40c:	0003dbd6 	.word	0x0003dbd6

0001d410 <net_tc_rx_init>:

	for (i = 0; i < NET_TC_RX_COUNT; i++) {
		u8_t thread_priority;

		thread_priority = rx_tc2thread(i);
		rx_classes[i].tc = thread_priority;
   1d410:	2307      	movs	r3, #7
{
   1d412:	b510      	push	{r4, lr}
		rx_classes[i].tc = thread_priority;
   1d414:	4c08      	ldr	r4, [pc, #32]	; (1d438 <net_tc_rx_init+0x28>)
			"prio %d (%d)", i,
			&rx_classes[i].work_q.queue,
			K_THREAD_STACK_SIZEOF(rx_stack[i]),
			thread_priority, K_PRIO_COOP(thread_priority));

		k_work_q_start(&rx_classes[i].work_q,
   1d416:	f240 52dc 	movw	r2, #1500	; 0x5dc
		rx_classes[i].tc = thread_priority;
   1d41a:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
		k_work_q_start(&rx_classes[i].work_q,
   1d41e:	4907      	ldr	r1, [pc, #28]	; (1d43c <net_tc_rx_init+0x2c>)
   1d420:	f06f 0308 	mvn.w	r3, #8
   1d424:	4620      	mov	r0, r4
   1d426:	f011 f877 	bl	2e518 <k_work_q_start>
   1d42a:	4905      	ldr	r1, [pc, #20]	; (1d440 <net_tc_rx_init+0x30>)
   1d42c:	f104 001c 	add.w	r0, r4, #28
			       rx_stack[i],
			       K_THREAD_STACK_SIZEOF(rx_stack[i]),
			       K_PRIO_COOP(thread_priority));
		k_thread_name_set(&rx_classes[i].work_q.thread, "rx_workq");
	}
}
   1d430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d434:	f01b bc82 	b.w	38d3c <z_impl_k_thread_name_set>
   1d438:	20021b10 	.word	0x20021b10
   1d43c:	20031ab8 	.word	0x20031ab8
   1d440:	0003dbcd 	.word	0x0003dbcd

0001d444 <net_icmpv4_register_handler>:
Z_GENLIST_PREPEND(slist, snode)
   1d444:	4b03      	ldr	r3, [pc, #12]	; (1d454 <net_icmpv4_register_handler+0x10>)
   1d446:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   1d448:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(slist, snode)
   1d44a:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   1d44c:	6018      	str	r0, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
   1d44e:	b902      	cbnz	r2, 1d452 <net_icmpv4_register_handler+0xe>
	list->tail = node;
   1d450:	6058      	str	r0, [r3, #4]
}

void net_icmpv4_register_handler(struct net_icmpv4_handler *handler)
{
	sys_slist_prepend(&handlers, &handler->node);
}
   1d452:	4770      	bx	lr
   1d454:	20021cc8 	.word	0x20021cc8

0001d458 <net_icmpv4_input>:
	sys_slist_find_and_remove(&handlers, &handler->node);
}

enum net_verdict net_icmpv4_input(struct net_pkt *pkt,
				  struct net_ipv4_hdr *ip_hdr)
{
   1d458:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
   1d45a:	2304      	movs	r3, #4
   1d45c:	2200      	movs	r2, #0
{
   1d45e:	460e      	mov	r6, r1
					      struct net_icmp_hdr);
	struct net_icmp_hdr *icmp_hdr;
	struct net_icmpv4_handler *cb;

	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
   1d460:	4669      	mov	r1, sp
{
   1d462:	4605      	mov	r5, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
   1d464:	e9cd 2300 	strd	r2, r3, [sp]
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
   1d468:	f018 fe6d 	bl	36146 <net_pkt_get_data>
	if (!icmp_hdr) {
   1d46c:	4604      	mov	r4, r0
   1d46e:	b910      	cbnz	r0, 1d476 <net_icmpv4_input+0x1e>
		NET_DBG("DROP: NULL ICMPv4 header");
		return NET_DROP;
   1d470:	2002      	movs	r0, #2

drop:
	net_stats_update_icmp_drop(net_pkt_iface(pkt));

	return NET_DROP;
}
   1d472:	b003      	add	sp, #12
   1d474:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
}

static inline u16_t net_calc_chksum_icmpv4(struct net_pkt *pkt)
{
	return net_calc_chksum(pkt, IPPROTO_ICMP);
   1d476:	2101      	movs	r1, #1
   1d478:	4628      	mov	r0, r5
   1d47a:	f018 f9be 	bl	357fa <net_calc_chksum>
	if (net_calc_chksum_icmpv4(pkt) != 0U) {
   1d47e:	2800      	cmp	r0, #0
   1d480:	d1f6      	bne.n	1d470 <net_icmpv4_input+0x18>
	if (net_ipv4_is_addr_bcast(net_pkt_iface(pkt), &ip_hdr->dst) &&
   1d482:	6a2f      	ldr	r7, [r5, #32]
 */
#if defined(CONFIG_NET_NATIVE_IPV4)
static inline bool net_ipv4_is_addr_bcast(struct net_if *iface,
					  const struct in_addr *addr)
{
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   1d484:	f7ff f8a4 	bl	1c5d0 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   1d488:	6932      	ldr	r2, [r6, #16]
   1d48a:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   1d48c:	429a      	cmp	r2, r3
   1d48e:	d0ef      	beq.n	1d470 <net_icmpv4_input+0x18>
		return true;
	}

	return net_if_ipv4_is_addr_bcast(iface, addr);
   1d490:	f106 0110 	add.w	r1, r6, #16
   1d494:	4638      	mov	r0, r7
   1d496:	f7fe fecf 	bl	1c238 <net_if_ipv4_is_addr_bcast>
   1d49a:	2800      	cmp	r0, #0
   1d49c:	d1e8      	bne.n	1d470 <net_icmpv4_input+0x18>
	return net_pkt_skip(pkt, access->size);
   1d49e:	9901      	ldr	r1, [sp, #4]
   1d4a0:	4628      	mov	r0, r5
   1d4a2:	f018 fcfc 	bl	35e9e <net_pkt_skip>
	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
   1d4a6:	4b0b      	ldr	r3, [pc, #44]	; (1d4d4 <net_icmpv4_input+0x7c>)
   1d4a8:	681b      	ldr	r3, [r3, #0]
   1d4aa:	2b00      	cmp	r3, #0
   1d4ac:	d0e0      	beq.n	1d470 <net_icmpv4_input+0x18>
		if (cb->type == icmp_hdr->type &&
   1d4ae:	7821      	ldrb	r1, [r4, #0]
   1d4b0:	7a1a      	ldrb	r2, [r3, #8]
   1d4b2:	428a      	cmp	r2, r1
   1d4b4:	d10a      	bne.n	1d4cc <net_icmpv4_input+0x74>
		    (cb->code == icmp_hdr->code || cb->code == 0U)) {
   1d4b6:	7a5a      	ldrb	r2, [r3, #9]
		if (cb->type == icmp_hdr->type &&
   1d4b8:	7860      	ldrb	r0, [r4, #1]
   1d4ba:	4290      	cmp	r0, r2
   1d4bc:	d000      	beq.n	1d4c0 <net_icmpv4_input+0x68>
		    (cb->code == icmp_hdr->code || cb->code == 0U)) {
   1d4be:	b92a      	cbnz	r2, 1d4cc <net_icmpv4_input+0x74>
			return cb->handler(pkt, ip_hdr, icmp_hdr);
   1d4c0:	685b      	ldr	r3, [r3, #4]
   1d4c2:	4622      	mov	r2, r4
   1d4c4:	4631      	mov	r1, r6
   1d4c6:	4628      	mov	r0, r5
   1d4c8:	4798      	blx	r3
   1d4ca:	e7d2      	b.n	1d472 <net_icmpv4_input+0x1a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1d4cc:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
   1d4ce:	2b00      	cmp	r3, #0
   1d4d0:	d1ee      	bne.n	1d4b0 <net_icmpv4_input+0x58>
   1d4d2:	e7cd      	b.n	1d470 <net_icmpv4_input+0x18>
   1d4d4:	20021cc8 	.word	0x20021cc8

0001d4d8 <net_icmpv4_init>:
	.handler = icmpv4_handle_echo_request,
};

void net_icmpv4_init(void)
{
	net_icmpv4_register_handler(&echo_request_handler);
   1d4d8:	4801      	ldr	r0, [pc, #4]	; (1d4e0 <net_icmpv4_init+0x8>)
   1d4da:	f7ff bfb3 	b.w	1d444 <net_icmpv4_register_handler>
   1d4de:	bf00      	nop
   1d4e0:	200200b8 	.word	0x200200b8

0001d4e4 <conn_set_unused>:

	sys_slist_prepend(&conn_used, &conn->node);
}

static void conn_set_unused(struct net_conn *conn)
{
   1d4e4:	b510      	push	{r4, lr}
   1d4e6:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   1d4e8:	2220      	movs	r2, #32
   1d4ea:	2100      	movs	r1, #0
   1d4ec:	f01b fda3 	bl	39036 <memset>
Z_GENLIST_PREPEND(slist, snode)
   1d4f0:	4b03      	ldr	r3, [pc, #12]	; (1d500 <conn_set_unused+0x1c>)
   1d4f2:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   1d4f4:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1d4f6:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   1d4f8:	601c      	str	r4, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
   1d4fa:	b902      	cbnz	r2, 1d4fe <conn_set_unused+0x1a>
	list->tail = node;
   1d4fc:	605c      	str	r4, [r3, #4]
	(void)memset(conn, 0, sizeof(*conn));

	sys_slist_prepend(&conn_unused, &conn->node);
}
   1d4fe:	bd10      	pop	{r4, pc}
   1d500:	20021cd0 	.word	0x20021cd0

0001d504 <net_conn_register>:
		      u16_t remote_port,
		      u16_t local_port,
		      net_conn_cb_t cb,
		      void *user_data,
		      struct net_conn_handle **handle)
{
   1d504:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn_used, conn, node) {
   1d508:	4e5d      	ldr	r6, [pc, #372]	; (1d680 <net_conn_register+0x17c>)
{
   1d50a:	9101      	str	r1, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn_used, conn, node) {
   1d50c:	6834      	ldr	r4, [r6, #0]
{
   1d50e:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
   1d512:	f8bd c034 	ldrh.w	ip, [sp, #52]	; 0x34
   1d516:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
	SYS_SLIST_FOR_EACH_CONTAINER(&conn_used, conn, node) {
   1d51a:	b344      	cbz	r4, 1d56e <net_conn_register+0x6a>
   1d51c:	fa97 f897 	rev16.w	r8, r7
   1d520:	fa9c f99c 	rev16.w	r9, ip
   1d524:	fa1f f888 	uxth.w	r8, r8
   1d528:	fa1f f989 	uxth.w	r9, r9
		if (conn->proto != proto) {
   1d52c:	8ba5      	ldrh	r5, [r4, #28]
   1d52e:	4285      	cmp	r5, r0
   1d530:	d11a      	bne.n	1d568 <net_conn_register+0x64>
		if (conn->family != family) {
   1d532:	7fa5      	ldrb	r5, [r4, #30]
   1d534:	9901      	ldr	r1, [sp, #4]
   1d536:	428d      	cmp	r5, r1
   1d538:	d116      	bne.n	1d568 <net_conn_register+0x64>
		if (remote_addr) {
   1d53a:	7fe5      	ldrb	r5, [r4, #31]
   1d53c:	f005 0a02 	and.w	sl, r5, #2
   1d540:	b1da      	cbz	r2, 1d57a <net_conn_register+0x76>
			if (!(conn->flags & NET_CONN_REMOTE_ADDR_SET)) {
   1d542:	f1ba 0f00 	cmp.w	sl, #0
   1d546:	d00f      	beq.n	1d568 <net_conn_register+0x64>
			} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1d548:	f8b2 a000 	ldrh.w	sl, [r2]
   1d54c:	f1ba 0f01 	cmp.w	sl, #1
   1d550:	d10a      	bne.n	1d568 <net_conn_register+0x64>
				   remote_addr->sa_family == AF_INET &&
   1d552:	f8b4 a004 	ldrh.w	sl, [r4, #4]
   1d556:	f1ba 0f01 	cmp.w	sl, #1
   1d55a:	d105      	bne.n	1d568 <net_conn_register+0x64>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   1d55c:	f8d2 b004 	ldr.w	fp, [r2, #4]
   1d560:	f8d4 a008 	ldr.w	sl, [r4, #8]
				if (!net_ipv4_addr_cmp(
   1d564:	45d3      	cmp	fp, sl
   1d566:	d00b      	beq.n	1d580 <net_conn_register+0x7c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1d568:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn_used, conn, node) {
   1d56a:	2c00      	cmp	r4, #0
   1d56c:	d1de      	bne.n	1d52c <net_conn_register+0x28>
	node = sys_slist_peek_head(&conn_unused);
   1d56e:	4d45      	ldr	r5, [pc, #276]	; (1d684 <net_conn_register+0x180>)
   1d570:	682c      	ldr	r4, [r5, #0]
	if (!node) {
   1d572:	bb0c      	cbnz	r4, 1d5b8 <net_conn_register+0xb4>
		return -EALREADY;
	}

	conn = conn_get_unused();
	if (!conn) {
		return -ENOENT;
   1d574:	f06f 0001 	mvn.w	r0, #1
   1d578:	e075      	b.n	1d666 <net_conn_register+0x162>
		} else if (conn->flags & NET_CONN_REMOTE_ADDR_SET) {
   1d57a:	f1ba 0f00 	cmp.w	sl, #0
   1d57e:	d1f3      	bne.n	1d568 <net_conn_register+0x64>
		if (local_addr) {
   1d580:	f005 0504 	and.w	r5, r5, #4
   1d584:	b1ab      	cbz	r3, 1d5b2 <net_conn_register+0xae>
			if (!(conn->flags & NET_CONN_LOCAL_ADDR_SET)) {
   1d586:	2d00      	cmp	r5, #0
   1d588:	d0ee      	beq.n	1d568 <net_conn_register+0x64>
			} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1d58a:	881d      	ldrh	r5, [r3, #0]
   1d58c:	2d01      	cmp	r5, #1
   1d58e:	d1eb      	bne.n	1d568 <net_conn_register+0x64>
				   local_addr->sa_family == AF_INET &&
   1d590:	89a5      	ldrh	r5, [r4, #12]
   1d592:	2d01      	cmp	r5, #1
   1d594:	d1e8      	bne.n	1d568 <net_conn_register+0x64>
   1d596:	f8d3 a004 	ldr.w	sl, [r3, #4]
   1d59a:	6925      	ldr	r5, [r4, #16]
				if (!net_ipv4_addr_cmp(
   1d59c:	45aa      	cmp	sl, r5
   1d59e:	d1e3      	bne.n	1d568 <net_conn_register+0x64>
		if (net_sin(&conn->remote_addr)->sin_port !=
   1d5a0:	88e5      	ldrh	r5, [r4, #6]
   1d5a2:	4545      	cmp	r5, r8
   1d5a4:	d1e0      	bne.n	1d568 <net_conn_register+0x64>
		if (net_sin(&conn->local_addr)->sin_port !=
   1d5a6:	89e5      	ldrh	r5, [r4, #14]
   1d5a8:	454d      	cmp	r5, r9
   1d5aa:	d1dd      	bne.n	1d568 <net_conn_register+0x64>
		return -EALREADY;
   1d5ac:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1d5b0:	e059      	b.n	1d666 <net_conn_register+0x162>
		} else if (conn->flags & NET_CONN_LOCAL_ADDR_SET) {
   1d5b2:	2d00      	cmp	r5, #0
   1d5b4:	d0f4      	beq.n	1d5a0 <net_conn_register+0x9c>
   1d5b6:	e7d7      	b.n	1d568 <net_conn_register+0x64>
Z_GENLIST_REMOVE(slist, snode)
   1d5b8:	6869      	ldr	r1, [r5, #4]
   1d5ba:	f8d4 9000 	ldr.w	r9, [r4]
   1d5be:	428c      	cmp	r4, r1
	list->head = node;
   1d5c0:	f8c5 9000 	str.w	r9, [r5]
	list->tail = node;
   1d5c4:	bf08      	it	eq
   1d5c6:	f8c5 9004 	streq.w	r9, [r5, #4]
	parent->next = child;
   1d5ca:	2500      	movs	r5, #0
   1d5cc:	6025      	str	r5, [r4, #0]
	}

	if (remote_addr) {
   1d5ce:	2a00      	cmp	r2, #0
   1d5d0:	d04c      	beq.n	1d66c <net_conn_register+0x168>
			if (!net_ipv6_is_addr_unspecified(
				    &net_sin6(remote_addr)->
				    sin6_addr)) {
				flags |= NET_CONN_REMOTE_ADDR_SPEC;
			}
		} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1d5d2:	8815      	ldrh	r5, [r2, #0]
   1d5d4:	2d01      	cmp	r5, #1
   1d5d6:	d14b      	bne.n	1d670 <net_conn_register+0x16c>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1d5d8:	6815      	ldr	r5, [r2, #0]
   1d5da:	6065      	str	r5, [r4, #4]
   1d5dc:	6855      	ldr	r5, [r2, #4]
   1d5de:	60a5      	str	r5, [r4, #8]
			   remote_addr->sa_family == AF_INET) {
			memcpy(&conn->remote_addr, remote_addr,
			       sizeof(struct sockaddr_in));

			if (net_sin(remote_addr)->sin_addr.s_addr) {
   1d5e0:	6855      	ldr	r5, [r2, #4]
				flags |= NET_CONN_REMOTE_ADDR_SPEC;
   1d5e2:	2d00      	cmp	r5, #0
		} else {
			NET_ERR("Remote address family not set");
			goto error;
		}

		flags |= NET_CONN_REMOTE_ADDR_SET;
   1d5e4:	bf14      	ite	ne
   1d5e6:	2522      	movne	r5, #34	; 0x22
   1d5e8:	2502      	moveq	r5, #2
	}

	if (local_addr) {
   1d5ea:	b1bb      	cbz	r3, 1d61c <net_conn_register+0x118>
			if (!net_ipv6_is_addr_unspecified(
				    &net_sin6(local_addr)->
				    sin6_addr)) {
				flags |= NET_CONN_LOCAL_ADDR_SPEC;
			}
		} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1d5ec:	f8b3 8000 	ldrh.w	r8, [r3]
   1d5f0:	f1b8 0f01 	cmp.w	r8, #1
   1d5f4:	d13c      	bne.n	1d670 <net_conn_register+0x16c>
   1d5f6:	f8d3 8000 	ldr.w	r8, [r3]
   1d5fa:	f8c4 800c 	str.w	r8, [r4, #12]
   1d5fe:	f8d3 8004 	ldr.w	r8, [r3, #4]
   1d602:	f8c4 8010 	str.w	r8, [r4, #16]
			   local_addr->sa_family == AF_INET) {
			memcpy(&conn->local_addr, local_addr,
			       sizeof(struct sockaddr_in));

			if (net_sin(local_addr)->sin_addr.s_addr) {
   1d606:	6859      	ldr	r1, [r3, #4]
   1d608:	b109      	cbz	r1, 1d60e <net_conn_register+0x10a>
				flags |= NET_CONN_LOCAL_ADDR_SPEC;
   1d60a:	f045 0540 	orr.w	r5, r5, #64	; 0x40
		} else {
			NET_ERR("Local address family not set");
			goto error;
		}

		flags |= NET_CONN_LOCAL_ADDR_SET;
   1d60e:	f045 0504 	orr.w	r5, r5, #4
	}

	if (remote_addr && local_addr) {
   1d612:	b11a      	cbz	r2, 1d61c <net_conn_register+0x118>
		if (remote_addr->sa_family != local_addr->sa_family) {
   1d614:	8812      	ldrh	r2, [r2, #0]
   1d616:	881b      	ldrh	r3, [r3, #0]
   1d618:	429a      	cmp	r2, r3
   1d61a:	d129      	bne.n	1d670 <net_conn_register+0x16c>
			NET_ERR("Address families different");
			goto error;
		}
	}

	if (remote_port) {
   1d61c:	b11f      	cbz	r7, 1d626 <net_conn_register+0x122>
		flags |= NET_CONN_REMOTE_PORT_SPEC;
		net_sin(&conn->remote_addr)->sin_port = htons(remote_port);
   1d61e:	ba7f      	rev16	r7, r7
		flags |= NET_CONN_REMOTE_PORT_SPEC;
   1d620:	f045 0508 	orr.w	r5, r5, #8
		net_sin(&conn->remote_addr)->sin_port = htons(remote_port);
   1d624:	80e7      	strh	r7, [r4, #6]
	}

	if (local_port) {
   1d626:	f1bc 0f00 	cmp.w	ip, #0
   1d62a:	d005      	beq.n	1d638 <net_conn_register+0x134>
		flags |= NET_CONN_LOCAL_PORT_SPEC;
		net_sin(&conn->local_addr)->sin_port = htons(local_port);
   1d62c:	fa9c fc9c 	rev16.w	ip, ip
		flags |= NET_CONN_LOCAL_PORT_SPEC;
   1d630:	f045 0510 	orr.w	r5, r5, #16
		net_sin(&conn->local_addr)->sin_port = htons(local_port);
   1d634:	f8a4 c00e 	strh.w	ip, [r4, #14]
	}

	conn->cb = cb;
   1d638:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	conn->user_data = user_data;
	conn->flags = flags;
   1d63a:	77e5      	strb	r5, [r4, #31]
	conn->cb = cb;
   1d63c:	6163      	str	r3, [r4, #20]
	conn->user_data = user_data;
   1d63e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	conn->proto = proto;
   1d640:	83a0      	strh	r0, [r4, #28]
	conn->user_data = user_data;
   1d642:	61a3      	str	r3, [r4, #24]
	conn->family = family;
   1d644:	9b01      	ldr	r3, [sp, #4]
   1d646:	77a3      	strb	r3, [r4, #30]

	if (handle) {
   1d648:	f1be 0f00 	cmp.w	lr, #0
   1d64c:	d001      	beq.n	1d652 <net_conn_register+0x14e>
		*handle = (struct net_conn_handle *)conn;
   1d64e:	f8ce 4000 	str.w	r4, [lr]
	conn->flags |= NET_CONN_IN_USE;
   1d652:	7fe3      	ldrb	r3, [r4, #31]
   1d654:	f043 0301 	orr.w	r3, r3, #1
   1d658:	77e3      	strb	r3, [r4, #31]
Z_GENLIST_PREPEND(slist, snode)
   1d65a:	6833      	ldr	r3, [r6, #0]
	parent->next = child;
   1d65c:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1d65e:	6870      	ldr	r0, [r6, #4]
	list->head = node;
   1d660:	6034      	str	r4, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1d662:	b958      	cbnz	r0, 1d67c <net_conn_register+0x178>
	list->tail = node;
   1d664:	6074      	str	r4, [r6, #4]

	return 0;
error:
	conn_set_unused(conn);
	return -EINVAL;
}
   1d666:	b003      	add	sp, #12
   1d668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	u8_t flags = 0U;
   1d66c:	4615      	mov	r5, r2
   1d66e:	e7bc      	b.n	1d5ea <net_conn_register+0xe6>
	conn_set_unused(conn);
   1d670:	4620      	mov	r0, r4
   1d672:	f7ff ff37 	bl	1d4e4 <conn_set_unused>
	return -EINVAL;
   1d676:	f06f 0015 	mvn.w	r0, #21
   1d67a:	e7f4      	b.n	1d666 <net_conn_register+0x162>
	return 0;
   1d67c:	2000      	movs	r0, #0
   1d67e:	e7f2      	b.n	1d666 <net_conn_register+0x162>
   1d680:	20021cd8 	.word	0x20021cd8
   1d684:	20021cd0 	.word	0x20021cd0

0001d688 <net_conn_unregister>:

int net_conn_unregister(struct net_conn_handle *handle)
{
   1d688:	b508      	push	{r3, lr}
	struct net_conn *conn = (struct net_conn *)handle;

	if (conn < &conns[0] || conn > &conns[CONFIG_NET_MAX_CONN]) {
   1d68a:	4b15      	ldr	r3, [pc, #84]	; (1d6e0 <net_conn_unregister+0x58>)
   1d68c:	4298      	cmp	r0, r3
   1d68e:	d321      	bcc.n	1d6d4 <net_conn_unregister+0x4c>
   1d690:	3380      	adds	r3, #128	; 0x80
   1d692:	4298      	cmp	r0, r3
   1d694:	d81e      	bhi.n	1d6d4 <net_conn_unregister+0x4c>
		return -EINVAL;
	}

	if (!(conn->flags & NET_CONN_IN_USE)) {
   1d696:	7fc3      	ldrb	r3, [r0, #31]
   1d698:	07db      	lsls	r3, r3, #31
   1d69a:	d51e      	bpl.n	1d6da <net_conn_unregister+0x52>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d69c:	2100      	movs	r1, #0
   1d69e:	4b11      	ldr	r3, [pc, #68]	; (1d6e4 <net_conn_unregister+0x5c>)
   1d6a0:	681a      	ldr	r2, [r3, #0]
   1d6a2:	b152      	cbz	r2, 1d6ba <net_conn_unregister+0x32>
   1d6a4:	4290      	cmp	r0, r2
   1d6a6:	d112      	bne.n	1d6ce <net_conn_unregister+0x46>
Z_GENLIST_REMOVE(slist, snode)
   1d6a8:	6802      	ldr	r2, [r0, #0]
   1d6aa:	b951      	cbnz	r1, 1d6c2 <net_conn_unregister+0x3a>
   1d6ac:	6859      	ldr	r1, [r3, #4]
	list->head = node;
   1d6ae:	601a      	str	r2, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1d6b0:	4288      	cmp	r0, r1
   1d6b2:	d100      	bne.n	1d6b6 <net_conn_unregister+0x2e>
	list->tail = node;
   1d6b4:	605a      	str	r2, [r3, #4]
	parent->next = child;
   1d6b6:	2300      	movs	r3, #0
   1d6b8:	6003      	str	r3, [r0, #0]

	NET_DBG("Connection handler %p removed", conn);

	sys_slist_find_and_remove(&conn_used, &conn->node);

	conn_set_unused(conn);
   1d6ba:	f7ff ff13 	bl	1d4e4 <conn_set_unused>

	return 0;
   1d6be:	2000      	movs	r0, #0
}
   1d6c0:	bd08      	pop	{r3, pc}
   1d6c2:	600a      	str	r2, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1d6c4:	685a      	ldr	r2, [r3, #4]
   1d6c6:	4290      	cmp	r0, r2
	list->tail = node;
   1d6c8:	bf08      	it	eq
   1d6ca:	6059      	streq	r1, [r3, #4]
   1d6cc:	e7f3      	b.n	1d6b6 <net_conn_unregister+0x2e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d6ce:	4611      	mov	r1, r2
   1d6d0:	6812      	ldr	r2, [r2, #0]
   1d6d2:	e7e6      	b.n	1d6a2 <net_conn_unregister+0x1a>
		return -EINVAL;
   1d6d4:	f06f 0015 	mvn.w	r0, #21
   1d6d8:	e7f2      	b.n	1d6c0 <net_conn_unregister+0x38>
		return -ENOENT;
   1d6da:	f06f 0001 	mvn.w	r0, #1
   1d6de:	e7ef      	b.n	1d6c0 <net_conn_unregister+0x38>
   1d6e0:	20021ce0 	.word	0x20021ce0
   1d6e4:	20021cd8 	.word	0x20021cd8

0001d6e8 <net_conn_input>:

enum net_verdict net_conn_input(struct net_pkt *pkt,
				union net_ip_header *ip_hdr,
				u8_t proto,
				union net_proto_header *proto_hdr)
{
   1d6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	s16_t best_rank = -1;
	struct net_conn *conn;
	u16_t src_port;
	u16_t dst_port;

	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   1d6ec:	2a11      	cmp	r2, #17
{
   1d6ee:	b087      	sub	sp, #28
   1d6f0:	4606      	mov	r6, r0
   1d6f2:	4689      	mov	r9, r1
   1d6f4:	4617      	mov	r7, r2
   1d6f6:	469a      	mov	sl, r3
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   1d6f8:	d16f      	bne.n	1d7da <net_conn_input+0xf2>
		src_port = proto_hdr->udp->src_port;
		dst_port = proto_hdr->udp->dst_port;
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
		src_port = proto_hdr->tcp->src_port;
   1d6fa:	f8da 3000 	ldr.w	r3, [sl]
   1d6fe:	881a      	ldrh	r2, [r3, #0]
   1d700:	9202      	str	r2, [sp, #8]
		dst_port = proto_hdr->tcp->dst_port;
   1d702:	f8b3 b002 	ldrh.w	fp, [r3, #2]
	return pkt->family;
   1d706:	f896 303f 	ldrb.w	r3, [r6, #63]	; 0x3f
	if (IS_ENABLED(CONFIG_NET_IPV4) && net_pkt_family(pkt) == AF_INET) {
   1d70a:	f3c3 0342 	ubfx	r3, r3, #1, #3
   1d70e:	2b01      	cmp	r3, #1
   1d710:	d069      	beq.n	1d7e6 <net_conn_input+0xfe>
	bool is_mcast_pkt = false, mcast_pkt_delivered = false;
   1d712:	2500      	movs	r5, #0
		if (net_ipv6_is_addr_mcast(&ip_hdr->ipv6->dst)) {
			is_mcast_pkt = true;
		}
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&conn_used, conn, node) {
   1d714:	4b6a      	ldr	r3, [pc, #424]	; (1d8c0 <net_conn_input+0x1d8>)
   1d716:	681c      	ldr	r4, [r3, #0]
   1d718:	2c00      	cmp	r4, #0
   1d71a:	f000 80be 	beq.w	1d89a <net_conn_input+0x1b2>
   1d71e:	2200      	movs	r2, #0
   1d720:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d724:	4690      	mov	r8, r2
   1d726:	9304      	str	r3, [sp, #16]
		if (conn->proto != proto) {
   1d728:	b2bb      	uxth	r3, r7
   1d72a:	9305      	str	r3, [sp, #20]
   1d72c:	8ba3      	ldrh	r3, [r4, #28]
   1d72e:	9905      	ldr	r1, [sp, #20]
   1d730:	428b      	cmp	r3, r1
   1d732:	d146      	bne.n	1d7c2 <net_conn_input+0xda>
			continue;
		}

		if (conn->family != AF_UNSPEC &&
   1d734:	7fa1      	ldrb	r1, [r4, #30]
   1d736:	b129      	cbz	r1, 1d744 <net_conn_input+0x5c>
   1d738:	f896 303f 	ldrb.w	r3, [r6, #63]	; 0x3f
   1d73c:	f3c3 0342 	ubfx	r3, r3, #1, #3
   1d740:	428b      	cmp	r3, r1
   1d742:	d13e      	bne.n	1d7c2 <net_conn_input+0xda>
			continue;
		}

		if (IS_ENABLED(CONFIG_NET_UDP) ||
		    IS_ENABLED(CONFIG_NET_TCP)) {
			if (net_sin(&conn->remote_addr)->sin_port) {
   1d744:	88e3      	ldrh	r3, [r4, #6]
   1d746:	b113      	cbz	r3, 1d74e <net_conn_input+0x66>
				if (net_sin(&conn->remote_addr)->sin_port !=
   1d748:	9902      	ldr	r1, [sp, #8]
   1d74a:	4299      	cmp	r1, r3
   1d74c:	d139      	bne.n	1d7c2 <net_conn_input+0xda>
				    src_port) {
					continue;
				}
			}

			if (net_sin(&conn->local_addr)->sin_port) {
   1d74e:	89e3      	ldrh	r3, [r4, #14]
   1d750:	b10b      	cbz	r3, 1d756 <net_conn_input+0x6e>
				if (net_sin(&conn->local_addr)->sin_port !=
   1d752:	459b      	cmp	fp, r3
   1d754:	d135      	bne.n	1d7c2 <net_conn_input+0xda>
				    dst_port) {
					continue;
				}
			}

			if (conn->flags & NET_CONN_REMOTE_ADDR_SET) {
   1d756:	7fe3      	ldrb	r3, [r4, #31]
   1d758:	079f      	lsls	r7, r3, #30
   1d75a:	d50f      	bpl.n	1d77c <net_conn_input+0x94>
   1d75c:	f896 103f 	ldrb.w	r1, [r6, #63]	; 0x3f
	if (addr->sa_family != net_pkt_family(pkt)) {
   1d760:	88a0      	ldrh	r0, [r4, #4]
   1d762:	f3c1 0142 	ubfx	r1, r1, #1, #3
   1d766:	4288      	cmp	r0, r1
   1d768:	d12b      	bne.n	1d7c2 <net_conn_input+0xda>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1d76a:	2901      	cmp	r1, #1
   1d76c:	d106      	bne.n	1d77c <net_conn_input+0x94>
		if (net_sin(addr)->sin_addr.s_addr) {
   1d76e:	68a1      	ldr	r1, [r4, #8]
   1d770:	b121      	cbz	r1, 1d77c <net_conn_input+0x94>
   1d772:	f8d9 0000 	ldr.w	r0, [r9]
   1d776:	68c0      	ldr	r0, [r0, #12]
			if (!net_ipv4_addr_cmp(&net_sin(addr)->sin_addr,
   1d778:	4281      	cmp	r1, r0
   1d77a:	d122      	bne.n	1d7c2 <net_conn_input+0xda>
						   true)) {
					continue;
				}
			}

			if (conn->flags & NET_CONN_LOCAL_ADDR_SET) {
   1d77c:	0758      	lsls	r0, r3, #29
   1d77e:	d50f      	bpl.n	1d7a0 <net_conn_input+0xb8>
   1d780:	f896 103f 	ldrb.w	r1, [r6, #63]	; 0x3f
	if (addr->sa_family != net_pkt_family(pkt)) {
   1d784:	89a0      	ldrh	r0, [r4, #12]
   1d786:	f3c1 0142 	ubfx	r1, r1, #1, #3
   1d78a:	4288      	cmp	r0, r1
   1d78c:	d119      	bne.n	1d7c2 <net_conn_input+0xda>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1d78e:	2901      	cmp	r1, #1
   1d790:	d106      	bne.n	1d7a0 <net_conn_input+0xb8>
		if (net_sin(addr)->sin_addr.s_addr) {
   1d792:	6921      	ldr	r1, [r4, #16]
   1d794:	b121      	cbz	r1, 1d7a0 <net_conn_input+0xb8>
   1d796:	f8d9 0000 	ldr.w	r0, [r9]
   1d79a:	6900      	ldr	r0, [r0, #16]
			if (!net_ipv4_addr_cmp(&net_sin(addr)->sin_addr,
   1d79c:	4281      	cmp	r1, r0
   1d79e:	d110      	bne.n	1d7c2 <net_conn_input+0xda>

			/* If we have an existing best_match, and that one
			 * specifies a remote port, then we've matched to a
			 * LISTENING connection that should not override.
			 */
			if (best_match != NULL &&
   1d7a0:	f1b8 0f00 	cmp.w	r8, #0
   1d7a4:	d003      	beq.n	1d7ae <net_conn_input+0xc6>
   1d7a6:	f898 101f 	ldrb.w	r1, [r8, #31]
   1d7aa:	0709      	lsls	r1, r1, #28
   1d7ac:	d409      	bmi.n	1d7c2 <net_conn_input+0xda>
			    best_match->flags & NET_CONN_REMOTE_PORT_SPEC) {
				continue;
			}

			if (best_rank < NET_CONN_RANK(conn->flags)) {
   1d7ae:	9904      	ldr	r1, [sp, #16]
   1d7b0:	f003 0378 	and.w	r3, r3, #120	; 0x78
   1d7b4:	4299      	cmp	r1, r3
   1d7b6:	da04      	bge.n	1d7c2 <net_conn_input+0xda>
				struct net_pkt *mcast_pkt;

				if (!is_mcast_pkt) {
   1d7b8:	2d00      	cmp	r5, #0
   1d7ba:	d148      	bne.n	1d84e <net_conn_input+0x166>
					best_rank = NET_CONN_RANK(conn->flags);
					best_match = conn;

					continue;
   1d7bc:	46a0      	mov	r8, r4
					best_rank = NET_CONN_RANK(conn->flags);
   1d7be:	b21b      	sxth	r3, r3
   1d7c0:	9304      	str	r3, [sp, #16]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1d7c2:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn_used, conn, node) {
   1d7c4:	2c00      	cmp	r4, #0
   1d7c6:	d1b1      	bne.n	1d72c <net_conn_input+0x44>
			best_rank = 0;
			best_match = conn;
		}
	}

	if (is_mcast_pkt && mcast_pkt_delivered) {
   1d7c8:	2d00      	cmp	r5, #0
   1d7ca:	d056      	beq.n	1d87a <net_conn_input+0x192>
   1d7cc:	2a00      	cmp	r2, #0
   1d7ce:	d054      	beq.n	1d87a <net_conn_input+0x192>
		/* As one or more multicast packets have already been delivered
		 * in the loop above, we shall not call the callback again here
		 */

		net_pkt_unref(pkt);
   1d7d0:	4630      	mov	r0, r6
   1d7d2:	f018 fa76 	bl	35cc2 <net_pkt_unref>
			goto drop;
		}

		net_stats_update_per_proto_recv(pkt_iface, proto);

		return NET_OK;
   1d7d6:	2000      	movs	r0, #0
   1d7d8:	e002      	b.n	1d7e0 <net_conn_input+0xf8>
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   1d7da:	2a06      	cmp	r2, #6
   1d7dc:	d08d      	beq.n	1d6fa <net_conn_input+0x12>
	}

drop:
	net_stats_update_per_proto_drop(pkt_iface, proto);

	return NET_DROP;
   1d7de:	2002      	movs	r0, #2
}
   1d7e0:	b007      	add	sp, #28
   1d7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (net_ipv4_addr_cmp(&ip_hdr->ipv4->src,
   1d7e6:	f8d9 4000 	ldr.w	r4, [r9]
   1d7ea:	68e2      	ldr	r2, [r4, #12]
   1d7ec:	6923      	ldr	r3, [r4, #16]
   1d7ee:	429a      	cmp	r2, r3
   1d7f0:	d061      	beq.n	1d8b6 <net_conn_input+0x1ce>
		    net_ipv4_is_my_addr(&ip_hdr->ipv4->src)) {
   1d7f2:	f104 050c 	add.w	r5, r4, #12
 */
static inline bool net_ipv4_is_my_addr(const struct in_addr *addr)
{
	bool ret;

	ret = net_if_ipv4_addr_lookup(addr, NULL) != NULL;
   1d7f6:	2100      	movs	r1, #0
   1d7f8:	4628      	mov	r0, r5
   1d7fa:	f7fe fd9d 	bl	1c338 <net_if_ipv4_addr_lookup>
   1d7fe:	f1b0 0800 	subs.w	r8, r0, #0
   1d802:	bf14      	ite	ne
   1d804:	2001      	movne	r0, #1
   1d806:	2000      	moveq	r0, #0
	if (!ret) {
   1d808:	d109      	bne.n	1d81e <net_conn_input+0x136>
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   1d80a:	f7fe fee1 	bl	1c5d0 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   1d80e:	68e2      	ldr	r2, [r4, #12]
   1d810:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   1d812:	429a      	cmp	r2, r3
   1d814:	d004      	beq.n	1d820 <net_conn_input+0x138>
	return net_if_ipv4_is_addr_bcast(iface, addr);
   1d816:	4629      	mov	r1, r5
   1d818:	4640      	mov	r0, r8
   1d81a:	f7fe fd0d 	bl	1c238 <net_if_ipv4_is_addr_bcast>
				      &ip_hdr->ipv4->dst) ||
   1d81e:	b110      	cbz	r0, 1d826 <net_conn_input+0x13e>
	if (!conn_are_end_points_valid(pkt, ip_hdr, src_port, dst_port)) {
   1d820:	9b02      	ldr	r3, [sp, #8]
   1d822:	459b      	cmp	fp, r3
   1d824:	d0db      	beq.n	1d7de <net_conn_input+0xf6>
   1d826:	f896 303f 	ldrb.w	r3, [r6, #63]	; 0x3f
	if (IS_ENABLED(CONFIG_NET_IPV4) && net_pkt_family(pkt) == AF_INET) {
   1d82a:	f3c3 0342 	ubfx	r3, r3, #1, #3
   1d82e:	2b01      	cmp	r3, #1
   1d830:	f47f af6f 	bne.w	1d712 <net_conn_input+0x2a>
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xE0000000) == 0xE0000000;
   1d834:	f8d9 3000 	ldr.w	r3, [r9]
   1d838:	691d      	ldr	r5, [r3, #16]
   1d83a:	ba2d      	rev	r5, r5
   1d83c:	f005 4560 	and.w	r5, r5, #3758096384	; 0xe0000000
		if (net_ipv4_is_addr_mcast(&ip_hdr->ipv4->dst)) {
   1d840:	f105 5c00 	add.w	ip, r5, #536870912	; 0x20000000
   1d844:	f1dc 0500 	rsbs	r5, ip, #0
   1d848:	eb45 050c 	adc.w	r5, r5, ip
   1d84c:	e762      	b.n	1d714 <net_conn_input+0x2c>
				mcast_pkt = net_pkt_clone(pkt, CLONE_TIMEOUT);
   1d84e:	2164      	movs	r1, #100	; 0x64
   1d850:	4630      	mov	r0, r6
   1d852:	f018 fbd6 	bl	36002 <net_pkt_clone>
				if (!mcast_pkt) {
   1d856:	9003      	str	r0, [sp, #12]
   1d858:	2800      	cmp	r0, #0
   1d85a:	d0c0      	beq.n	1d7de <net_conn_input+0xf6>
				if (conn->cb(conn, mcast_pkt, ip_hdr,
   1d85c:	69a3      	ldr	r3, [r4, #24]
   1d85e:	4601      	mov	r1, r0
   1d860:	9300      	str	r3, [sp, #0]
   1d862:	464a      	mov	r2, r9
   1d864:	4653      	mov	r3, sl
   1d866:	4620      	mov	r0, r4
   1d868:	6967      	ldr	r7, [r4, #20]
   1d86a:	47b8      	blx	r7
   1d86c:	2802      	cmp	r0, #2
   1d86e:	d102      	bne.n	1d876 <net_conn_input+0x18e>
					net_pkt_unref(mcast_pkt);
   1d870:	9803      	ldr	r0, [sp, #12]
   1d872:	f018 fa26 	bl	35cc2 <net_pkt_unref>
				mcast_pkt_delivered = true;
   1d876:	462a      	mov	r2, r5
   1d878:	e7a3      	b.n	1d7c2 <net_conn_input+0xda>
	if (conn) {
   1d87a:	f1b8 0f00 	cmp.w	r8, #0
   1d87e:	d00c      	beq.n	1d89a <net_conn_input+0x1b2>
		if (conn->cb(conn, pkt, ip_hdr, proto_hdr,
   1d880:	f8d8 3018 	ldr.w	r3, [r8, #24]
   1d884:	464a      	mov	r2, r9
   1d886:	9300      	str	r3, [sp, #0]
   1d888:	f8d8 4014 	ldr.w	r4, [r8, #20]
   1d88c:	4653      	mov	r3, sl
   1d88e:	4631      	mov	r1, r6
   1d890:	4640      	mov	r0, r8
   1d892:	47a0      	blx	r4
   1d894:	2802      	cmp	r0, #2
   1d896:	d19e      	bne.n	1d7d6 <net_conn_input+0xee>
   1d898:	e7a1      	b.n	1d7de <net_conn_input+0xf6>
   1d89a:	f896 303f 	ldrb.w	r3, [r6, #63]	; 0x3f
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1d89e:	f3c3 0342 	ubfx	r3, r3, #1, #3
   1d8a2:	2b01      	cmp	r3, #1
   1d8a4:	d101      	bne.n	1d8aa <net_conn_input+0x1c2>
		   net_pkt_family(pkt) == AF_INET && is_mcast_pkt) {
   1d8a6:	2d00      	cmp	r5, #0
   1d8a8:	d199      	bne.n	1d7de <net_conn_input+0xf6>
		net_icmpv4_send_error(pkt, NET_ICMPV4_DST_UNREACH,
   1d8aa:	2203      	movs	r2, #3
   1d8ac:	4630      	mov	r0, r6
   1d8ae:	4611      	mov	r1, r2
   1d8b0:	f018 fd12 	bl	362d8 <net_icmpv4_send_error>
   1d8b4:	e793      	b.n	1d7de <net_conn_input+0xf6>
	if (!conn_are_end_points_valid(pkt, ip_hdr, src_port, dst_port)) {
   1d8b6:	9b02      	ldr	r3, [sp, #8]
   1d8b8:	459b      	cmp	fp, r3
   1d8ba:	d090      	beq.n	1d7de <net_conn_input+0xf6>
   1d8bc:	e7ba      	b.n	1d834 <net_conn_input+0x14c>
   1d8be:	bf00      	nop
   1d8c0:	20021cd8 	.word	0x20021cd8

0001d8c4 <net_conn_init>:
	list->head = NULL;
   1d8c4:	2200      	movs	r2, #0
   1d8c6:	4b09      	ldr	r3, [pc, #36]	; (1d8ec <net_conn_init+0x28>)
	list->tail = NULL;
   1d8c8:	e9c3 2200 	strd	r2, r2, [r3]
	parent->next = child;
   1d8cc:	4b08      	ldr	r3, [pc, #32]	; (1d8f0 <net_conn_init+0x2c>)
   1d8ce:	4619      	mov	r1, r3
   1d8d0:	601a      	str	r2, [r3, #0]
   1d8d2:	f103 0220 	add.w	r2, r3, #32
   1d8d6:	f841 2f40 	str.w	r2, [r1, #64]!
   1d8da:	461a      	mov	r2, r3
   1d8dc:	f842 1f60 	str.w	r1, [r2, #96]!
   1d8e0:	4904      	ldr	r1, [pc, #16]	; (1d8f4 <net_conn_init+0x30>)
   1d8e2:	621b      	str	r3, [r3, #32]
	return list->tail;
   1d8e4:	e9c1 2300 	strd	r2, r3, [r1]
	sys_slist_init(&conn_used);

	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
		sys_slist_prepend(&conn_unused, &conns[i].node);
	}
}
   1d8e8:	4770      	bx	lr
   1d8ea:	bf00      	nop
   1d8ec:	20021cd8 	.word	0x20021cd8
   1d8f0:	20021ce0 	.word	0x20021ce0
   1d8f4:	20021cd0 	.word	0x20021cd0

0001d8f8 <k_delayed_work_submit>:
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1d8f8:	460a      	mov	r2, r1
   1d8fa:	4601      	mov	r1, r0
   1d8fc:	4801      	ldr	r0, [pc, #4]	; (1d904 <k_delayed_work_submit+0xc>)
   1d8fe:	f010 be2f 	b.w	2e560 <k_delayed_work_submit_to_queue>
   1d902:	bf00      	nop
   1d904:	20027524 	.word	0x20027524

0001d908 <net_context_get_family>:
{
   1d908:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   1d90a:	4604      	mov	r4, r0
   1d90c:	b970      	cbnz	r0, 1d92c <net_context_get_family+0x24>
   1d90e:	490a      	ldr	r1, [pc, #40]	; (1d938 <net_context_get_family+0x30>)
   1d910:	f240 13cb 	movw	r3, #459	; 0x1cb
   1d914:	4a09      	ldr	r2, [pc, #36]	; (1d93c <net_context_get_family+0x34>)
   1d916:	480a      	ldr	r0, [pc, #40]	; (1d940 <net_context_get_family+0x38>)
   1d918:	f015 fe4b 	bl	335b2 <printk>
   1d91c:	4809      	ldr	r0, [pc, #36]	; (1d944 <net_context_get_family+0x3c>)
   1d91e:	f015 fe48 	bl	335b2 <printk>
   1d922:	f240 11cb 	movw	r1, #459	; 0x1cb
   1d926:	4805      	ldr	r0, [pc, #20]	; (1d93c <net_context_get_family+0x34>)
   1d928:	f016 f944 	bl	33bb4 <assert_post_action>
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
   1d92c:	f8b4 007a 	ldrh.w	r0, [r4, #122]	; 0x7a
}
   1d930:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   1d934:	bd10      	pop	{r4, pc}
   1d936:	bf00      	nop
   1d938:	0003cb77 	.word	0x0003cb77
   1d93c:	0003cb4a 	.word	0x0003cb4a
   1d940:	0003b773 	.word	0x0003b773
   1d944:	0003cb7f 	.word	0x0003cb7f

0001d948 <net_context_get_state>:
{
   1d948:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   1d94a:	4604      	mov	r4, r0
   1d94c:	b970      	cbnz	r0, 1d96c <net_context_get_state+0x24>
   1d94e:	490a      	ldr	r1, [pc, #40]	; (1d978 <net_context_get_state+0x30>)
   1d950:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
   1d954:	4a09      	ldr	r2, [pc, #36]	; (1d97c <net_context_get_state+0x34>)
   1d956:	480a      	ldr	r0, [pc, #40]	; (1d980 <net_context_get_state+0x38>)
   1d958:	f015 fe2b 	bl	335b2 <printk>
   1d95c:	4809      	ldr	r0, [pc, #36]	; (1d984 <net_context_get_state+0x3c>)
   1d95e:	f015 fe28 	bl	335b2 <printk>
   1d962:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
   1d966:	4805      	ldr	r0, [pc, #20]	; (1d97c <net_context_get_state+0x34>)
   1d968:	f016 f924 	bl	33bb4 <assert_post_action>
		((context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1d96c:	f8b4 007a 	ldrh.w	r0, [r4, #122]	; 0x7a
}
   1d970:	f3c0 0041 	ubfx	r0, r0, #1, #2
   1d974:	bd10      	pop	{r4, pc}
   1d976:	bf00      	nop
   1d978:	0003cb77 	.word	0x0003cb77
   1d97c:	0003cb4a 	.word	0x0003cb4a
   1d980:	0003b773 	.word	0x0003b773
   1d984:	0003cb7f 	.word	0x0003cb7f

0001d988 <net_context_set_state>:
{
   1d988:	b538      	push	{r3, r4, r5, lr}
   1d98a:	460d      	mov	r5, r1
	NET_ASSERT(context);
   1d98c:	4604      	mov	r4, r0
   1d98e:	b970      	cbnz	r0, 1d9ae <net_context_set_state+0x26>
   1d990:	490b      	ldr	r1, [pc, #44]	; (1d9c0 <net_context_set_state+0x38>)
   1d992:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
   1d996:	4a0b      	ldr	r2, [pc, #44]	; (1d9c4 <net_context_set_state+0x3c>)
   1d998:	480b      	ldr	r0, [pc, #44]	; (1d9c8 <net_context_set_state+0x40>)
   1d99a:	f015 fe0a 	bl	335b2 <printk>
   1d99e:	480b      	ldr	r0, [pc, #44]	; (1d9cc <net_context_set_state+0x44>)
   1d9a0:	f015 fe07 	bl	335b2 <printk>
   1d9a4:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   1d9a8:	4806      	ldr	r0, [pc, #24]	; (1d9c4 <net_context_set_state+0x3c>)
   1d9aa:	f016 f903 	bl	33bb4 <assert_post_action>
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
   1d9ae:	f8b4 107a 	ldrh.w	r1, [r4, #122]	; 0x7a
   1d9b2:	f021 0106 	bic.w	r1, r1, #6
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
   1d9b6:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
   1d9ba:	f8a4 107a 	strh.w	r1, [r4, #122]	; 0x7a
}
   1d9be:	bd38      	pop	{r3, r4, r5, pc}
   1d9c0:	0003cb77 	.word	0x0003cb77
   1d9c4:	0003cb4a 	.word	0x0003cb4a
   1d9c8:	0003b773 	.word	0x0003b773
   1d9cc:	0003cb7f 	.word	0x0003cb7f

0001d9d0 <net_context_get_iface>:
{
   1d9d0:	b510      	push	{r4, lr}
	NET_ASSERT(context);
   1d9d2:	4604      	mov	r4, r0
   1d9d4:	b970      	cbnz	r0, 1d9f4 <net_context_get_iface+0x24>
   1d9d6:	490a      	ldr	r1, [pc, #40]	; (1da00 <net_context_get_iface+0x30>)
   1d9d8:	f240 2371 	movw	r3, #625	; 0x271
   1d9dc:	4a09      	ldr	r2, [pc, #36]	; (1da04 <net_context_get_iface+0x34>)
   1d9de:	480a      	ldr	r0, [pc, #40]	; (1da08 <net_context_get_iface+0x38>)
   1d9e0:	f015 fde7 	bl	335b2 <printk>
   1d9e4:	4809      	ldr	r0, [pc, #36]	; (1da0c <net_context_get_iface+0x3c>)
   1d9e6:	f015 fde4 	bl	335b2 <printk>
   1d9ea:	f240 2171 	movw	r1, #625	; 0x271
   1d9ee:	4805      	ldr	r0, [pc, #20]	; (1da04 <net_context_get_iface+0x34>)
   1d9f0:	f016 f8e0 	bl	33bb4 <assert_post_action>
	return net_if_get_by_index(context->iface);
   1d9f4:	f994 007c 	ldrsb.w	r0, [r4, #124]	; 0x7c
}
   1d9f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return net_if_get_by_index(context->iface);
   1d9fc:	f7fe bd42 	b.w	1c484 <net_if_get_by_index>
   1da00:	0003cb77 	.word	0x0003cb77
   1da04:	0003cb4a 	.word	0x0003cb4a
   1da08:	0003b773 	.word	0x0003b773
   1da0c:	0003cb7f 	.word	0x0003cb7f

0001da10 <net_context_set_iface.isra.25>:
static inline void net_context_set_iface(struct net_context *context,
   1da10:	b538      	push	{r3, r4, r5, lr}
   1da12:	4605      	mov	r5, r0
	NET_ASSERT(iface);
   1da14:	460c      	mov	r4, r1
   1da16:	b971      	cbnz	r1, 1da36 <net_context_set_iface.isra.25+0x26>
   1da18:	4909      	ldr	r1, [pc, #36]	; (1da40 <net_context_set_iface.isra.25+0x30>)
   1da1a:	f240 2381 	movw	r3, #641	; 0x281
   1da1e:	4a09      	ldr	r2, [pc, #36]	; (1da44 <net_context_set_iface.isra.25+0x34>)
   1da20:	4809      	ldr	r0, [pc, #36]	; (1da48 <net_context_set_iface.isra.25+0x38>)
   1da22:	f015 fdc6 	bl	335b2 <printk>
   1da26:	4809      	ldr	r0, [pc, #36]	; (1da4c <net_context_set_iface.isra.25+0x3c>)
   1da28:	f015 fdc3 	bl	335b2 <printk>
   1da2c:	f240 2181 	movw	r1, #641	; 0x281
   1da30:	4804      	ldr	r0, [pc, #16]	; (1da44 <net_context_set_iface.isra.25+0x34>)
   1da32:	f016 f8bf 	bl	33bb4 <assert_post_action>
	context->iface = net_if_get_by_iface(iface);
   1da36:	4620      	mov	r0, r4
   1da38:	f7fe fd36 	bl	1c4a8 <net_if_get_by_iface>
   1da3c:	7028      	strb	r0, [r5, #0]
}
   1da3e:	bd38      	pop	{r3, r4, r5, pc}
   1da40:	0003d9ac 	.word	0x0003d9ac
   1da44:	0003cb4a 	.word	0x0003cb4a
   1da48:	0003b773 	.word	0x0003b773
   1da4c:	0003cb7f 	.word	0x0003cb7f

0001da50 <tcp_backlog_find.isra.26>:
		addr6->sin6_port = port;
		addr->sa_family = AF_INET6;
	}
}

static int tcp_backlog_find(struct net_pkt *pkt,
   1da50:	b570      	push	{r4, r5, r6, lr}
			    int *empty_slot)
{
	int i, empty = -1;

	for (i = 0; i < CONFIG_NET_TCP_BACKLOG_SIZE; i++) {
		if (tcp_backlog[i].tcp == NULL && empty < 0) {
   1da52:	4d12      	ldr	r5, [pc, #72]	; (1da9c <tcp_backlog_find.isra.26+0x4c>)
static int tcp_backlog_find(struct net_pkt *pkt,
   1da54:	461e      	mov	r6, r3
		if (tcp_backlog[i].tcp == NULL && empty < 0) {
   1da56:	682c      	ldr	r4, [r5, #0]
   1da58:	b144      	cbz	r4, 1da6c <tcp_backlog_find.isra.26+0x1c>
   1da5a:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
			empty = i;
			continue;
		}

		if (net_pkt_family(pkt) != tcp_backlog[i].remote.sa_family) {
   1da5e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   1da60:	f3c0 0042 	ubfx	r0, r0, #1, #3
   1da64:	4283      	cmp	r3, r0
   1da66:	d006      	beq.n	1da76 <tcp_backlog_find.isra.26+0x26>
	int i, empty = -1;
   1da68:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		}

		return i;
	}

	if (empty_slot) {
   1da6c:	b106      	cbz	r6, 1da70 <tcp_backlog_find.isra.26+0x20>
		*empty_slot = empty;
   1da6e:	6034      	str	r4, [r6, #0]
	}

	return -EADDRNOTAVAIL;
   1da70:	f06f 007c 	mvn.w	r0, #124	; 0x7c
   1da74:	e002      	b.n	1da7c <tcp_backlog_find.isra.26+0x2c>
		if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1da76:	2801      	cmp	r0, #1
   1da78:	d001      	beq.n	1da7e <tcp_backlog_find.isra.26+0x2e>
	return -EADDRNOTAVAIL;
   1da7a:	2000      	movs	r0, #0
}
   1da7c:	bd70      	pop	{r4, r5, r6, pc}
			if (net_sin(&tcp_backlog[i].remote)->sin_port !=
   1da7e:	8de8      	ldrh	r0, [r5, #46]	; 0x2e
   1da80:	8813      	ldrh	r3, [r2, #0]
   1da82:	4298      	cmp	r0, r3
   1da84:	d1f0      	bne.n	1da68 <tcp_backlog_find.isra.26+0x18>
				   &ip_hdr->ipv4->src,
   1da86:	6809      	ldr	r1, [r1, #0]
			if (memcmp(&net_sin(&tcp_backlog[i].remote)->sin_addr,
   1da88:	2204      	movs	r2, #4
   1da8a:	310c      	adds	r1, #12
   1da8c:	f105 0030 	add.w	r0, r5, #48	; 0x30
   1da90:	f01b fa89 	bl	38fa6 <memcmp>
   1da94:	2800      	cmp	r0, #0
   1da96:	d0f0      	beq.n	1da7a <tcp_backlog_find.isra.26+0x2a>
   1da98:	e7e6      	b.n	1da68 <tcp_backlog_find.isra.26+0x18>
   1da9a:	bf00      	nop
   1da9c:	20021d60 	.word	0x20021d60

0001daa0 <prepare_segment.isra.21>:
static int prepare_segment(struct net_tcp *tcp,
   1daa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1daa4:	b08d      	sub	sp, #52	; 0x34
   1daa6:	9303      	str	r3, [sp, #12]
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
   1daa8:	ab07      	add	r3, sp, #28
   1daaa:	9305      	str	r3, [sp, #20]
   1daac:	2314      	movs	r3, #20
static int prepare_segment(struct net_tcp *tcp,
   1daae:	460e      	mov	r6, r1
   1dab0:	4614      	mov	r4, r2
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
   1dab2:	9306      	str	r3, [sp, #24]
	NET_ASSERT(context);
   1dab4:	4605      	mov	r5, r0
   1dab6:	b970      	cbnz	r0, 1dad6 <prepare_segment.isra.21+0x36>
   1dab8:	4974      	ldr	r1, [pc, #464]	; (1dc8c <prepare_segment.isra.21+0x1ec>)
   1daba:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
   1dabe:	4a74      	ldr	r2, [pc, #464]	; (1dc90 <prepare_segment.isra.21+0x1f0>)
   1dac0:	4874      	ldr	r0, [pc, #464]	; (1dc94 <prepare_segment.isra.21+0x1f4>)
   1dac2:	f015 fd76 	bl	335b2 <printk>
   1dac6:	4874      	ldr	r0, [pc, #464]	; (1dc98 <prepare_segment.isra.21+0x1f8>)
   1dac8:	f015 fd73 	bl	335b2 <printk>
   1dacc:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
   1dad0:	486f      	ldr	r0, [pc, #444]	; (1dc90 <prepare_segment.isra.21+0x1f0>)
   1dad2:	f016 f86f 	bl	33bb4 <assert_post_action>
	if (pkt) {
   1dad6:	2c00      	cmp	r4, #0
   1dad8:	f000 8095 	beq.w	1dc06 <prepare_segment.isra.21+0x166>
		pkt->buffer = NULL;
   1dadc:	2300      	movs	r3, #0
		tail = pkt->buffer;
   1dade:	f8d4 8010 	ldr.w	r8, [r4, #16]
		pkt->buffer = NULL;
   1dae2:	6123      	str	r3, [r4, #16]
		status = net_pkt_alloc_buffer(pkt, segment->optlen,
   1dae4:	2206      	movs	r2, #6
   1dae6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   1daea:	7af1      	ldrb	r1, [r6, #11]
   1daec:	4620      	mov	r0, r4
   1daee:	f7ff fb89 	bl	1d204 <net_pkt_alloc_buffer>
		if (status) {
   1daf2:	4607      	mov	r7, r0
   1daf4:	2800      	cmp	r0, #0
   1daf6:	f040 80ab 	bne.w	1dc50 <prepare_segment.isra.21+0x1b0>
		pkt_allocated = false;
   1dafa:	4681      	mov	r9, r0
	pkt->tcp_first_msg = is_1st;
   1dafc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   1db00:	f043 0301 	orr.w	r3, r3, #1
   1db04:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
	pkt->sent_or_eof = sent;
   1db08:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
   1db0c:	f36f 0341 	bfc	r3, #1, #1
   1db10:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	return pkt->family;
   1db14:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
	if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1db18:	f3c3 0342 	ubfx	r3, r3, #1, #3
   1db1c:	2b01      	cmp	r3, #1
   1db1e:	f040 80ac 	bne.w	1dc7a <prepare_segment.isra.21+0x1da>
				net_sin_ptr(segment->src_addr)->sin_addr,
   1db22:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
		status = net_context_create_ipv4_new(context, pkt,
   1db26:	4621      	mov	r1, r4
   1db28:	3304      	adds	r3, #4
   1db2a:	6852      	ldr	r2, [r2, #4]
   1db2c:	4628      	mov	r0, r5
   1db2e:	f7ff f859 	bl	1cbe4 <net_context_create_ipv4_new>
		if (status < 0) {
   1db32:	1e07      	subs	r7, r0, #0
   1db34:	f2c0 8089 	blt.w	1dc4a <prepare_segment.isra.21+0x1aa>
		dst_port = net_sin(segment->dst_addr)->sin_port;
   1db38:	6973      	ldr	r3, [r6, #20]
	tcp_hdr = (struct net_tcp_hdr *)net_pkt_get_data(pkt, &tcp_access);
   1db3a:	a905      	add	r1, sp, #20
		dst_port = net_sin(segment->dst_addr)->sin_port;
   1db3c:	885b      	ldrh	r3, [r3, #2]
	tcp_hdr = (struct net_tcp_hdr *)net_pkt_get_data(pkt, &tcp_access);
   1db3e:	4620      	mov	r0, r4
		src_port = ((struct sockaddr_in_ptr *)&context->local)->
   1db40:	f8b5 b01e 	ldrh.w	fp, [r5, #30]
		dst_port = net_sin(segment->dst_addr)->sin_port;
   1db44:	9302      	str	r3, [sp, #8]
	tcp_hdr = (struct net_tcp_hdr *)net_pkt_get_data(pkt, &tcp_access);
   1db46:	f018 fafe 	bl	36146 <net_pkt_get_data>
	if (!tcp_hdr) {
   1db4a:	4605      	mov	r5, r0
   1db4c:	2800      	cmp	r0, #0
   1db4e:	f000 8097 	beq.w	1dc80 <prepare_segment.isra.21+0x1e0>
	if (segment->options && segment->optlen) {
   1db52:	68f3      	ldr	r3, [r6, #12]
   1db54:	2b00      	cmp	r3, #0
   1db56:	d06f      	beq.n	1dc38 <prepare_segment.isra.21+0x198>
   1db58:	f896 a00b 	ldrb.w	sl, [r6, #11]
   1db5c:	f1ba 0f00 	cmp.w	sl, #0
   1db60:	d007      	beq.n	1db72 <prepare_segment.isra.21+0xd2>
		if ((segment->optlen & 0x3u) != 0u) {
   1db62:	f01a 0f03 	tst.w	sl, #3
   1db66:	d004      	beq.n	1db72 <prepare_segment.isra.21+0xd2>
			optlen = (segment->optlen & 0xfffCu) + 4u;
   1db68:	f02a 0303 	bic.w	r3, sl, #3
   1db6c:	3304      	adds	r3, #4
   1db6e:	fa5f fa83 	uxtb.w	sl, r3
__ssp_bos_icheck3(memset, void *, int)
   1db72:	2210      	movs	r2, #16
   1db74:	2100      	movs	r1, #0
   1db76:	1d28      	adds	r0, r5, #4
   1db78:	f01b fa5d 	bl	39036 <memset>
	sys_put_be32(segment->seq, tcp_hdr->seq);
   1db7c:	6832      	ldr	r2, [r6, #0]
	tcp_hdr->dst_port = dst_port;
   1db7e:	9b02      	ldr	r3, [sp, #8]
 *  @param val 32-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_be32(u32_t val, u8_t dst[4])
{
	sys_put_be16(val >> 16, dst);
   1db80:	0c11      	lsrs	r1, r2, #16
	dst[1] = val;
   1db82:	7169      	strb	r1, [r5, #5]
	dst[0] = val >> 8;
   1db84:	0a08      	lsrs	r0, r1, #8
   1db86:	f3c2 2107 	ubfx	r1, r2, #8, #8
   1db8a:	7128      	strb	r0, [r5, #4]
   1db8c:	71a9      	strb	r1, [r5, #6]
	dst[1] = val;
   1db8e:	71ea      	strb	r2, [r5, #7]
	sys_put_be32(segment->ack, tcp_hdr->ack);
   1db90:	6872      	ldr	r2, [r6, #4]
	tcp_hdr->src_port = src_port;
   1db92:	f8a5 b000 	strh.w	fp, [r5]
	sys_put_be16(val >> 16, dst);
   1db96:	0c11      	lsrs	r1, r2, #16
	dst[0] = val >> 8;
   1db98:	0a08      	lsrs	r0, r1, #8
	dst[1] = val;
   1db9a:	7269      	strb	r1, [r5, #9]
   1db9c:	72ea      	strb	r2, [r5, #11]
	dst[0] = val >> 8;
   1db9e:	f3c2 2107 	ubfx	r1, r2, #8, #8
	tcp_hdr->offset   = (NET_TCPH_LEN + optlen) << 2;
   1dba2:	f10a 0214 	add.w	r2, sl, #20
   1dba6:	0092      	lsls	r2, r2, #2
   1dba8:	7228      	strb	r0, [r5, #8]
   1dbaa:	72a9      	strb	r1, [r5, #10]
   1dbac:	732a      	strb	r2, [r5, #12]
	tcp_hdr->dst_port = dst_port;
   1dbae:	806b      	strh	r3, [r5, #2]
	tcp_hdr->flags    = segment->flags;
   1dbb0:	7ab2      	ldrb	r2, [r6, #10]
	net_pkt_set_data(pkt, &tcp_access);
   1dbb2:	4620      	mov	r0, r4
	tcp_hdr->flags    = segment->flags;
   1dbb4:	736a      	strb	r2, [r5, #13]
	sys_put_be16(segment->wnd, tcp_hdr->wnd);
   1dbb6:	8932      	ldrh	r2, [r6, #8]
   1dbb8:	0a11      	lsrs	r1, r2, #8
	dst[1] = val;
   1dbba:	73ea      	strb	r2, [r5, #15]
	tcp_hdr->chksum   = 0U;
   1dbbc:	2200      	movs	r2, #0
	dst[0] = val >> 8;
   1dbbe:	73a9      	strb	r1, [r5, #14]
   1dbc0:	742a      	strb	r2, [r5, #16]
   1dbc2:	746a      	strb	r2, [r5, #17]
	tcp_hdr->urg[0]   = 0U;
   1dbc4:	74aa      	strb	r2, [r5, #18]
	tcp_hdr->urg[1]   = 0U;
   1dbc6:	74ea      	strb	r2, [r5, #19]
	net_pkt_set_data(pkt, &tcp_access);
   1dbc8:	a905      	add	r1, sp, #20
   1dbca:	f018 fadd 	bl	36188 <net_pkt_set_data>
	if (optlen && net_pkt_write(pkt, segment->options, segment->optlen)) {
   1dbce:	f1ba 0f00 	cmp.w	sl, #0
   1dbd2:	d133      	bne.n	1dc3c <prepare_segment.isra.21+0x19c>
	if (tail) {
   1dbd4:	f1b8 0f00 	cmp.w	r8, #0
   1dbd8:	d140      	bne.n	1dc5c <prepare_segment.isra.21+0x1bc>
	net_pkt_cursor_init(pkt);
   1dbda:	4620      	mov	r0, r4
   1dbdc:	f018 f8d5 	bl	35d8a <net_pkt_cursor_init>
   1dbe0:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
	if (IS_ENABLED(CONFIG_NET_IPV4) &&
   1dbe4:	f3c3 0342 	ubfx	r3, r3, #1, #3
   1dbe8:	2b01      	cmp	r3, #1
   1dbea:	d13c      	bne.n	1dc66 <prepare_segment.isra.21+0x1c6>
		return net_ipv4_finalize(pkt, IPPROTO_TCP);
   1dbec:	2106      	movs	r1, #6
   1dbee:	4620      	mov	r0, r4
   1dbf0:	f018 fc32 	bl	36458 <net_ipv4_finalize>
	if (status < 0) {
   1dbf4:	1e07      	subs	r7, r0, #0
   1dbf6:	da39      	bge.n	1dc6c <prepare_segment.isra.21+0x1cc>
		if (pkt_allocated) {
   1dbf8:	f1b9 0f00 	cmp.w	r9, #0
   1dbfc:	d039      	beq.n	1dc72 <prepare_segment.isra.21+0x1d2>
		net_pkt_unref(pkt);
   1dbfe:	4620      	mov	r0, r4
   1dc00:	f018 f85f 	bl	35cc2 <net_pkt_unref>
   1dc04:	e035      	b.n	1dc72 <prepare_segment.isra.21+0x1d2>
		pkt = net_pkt_alloc_with_buffer(net_context_get_iface(context),
   1dc06:	4628      	mov	r0, r5
   1dc08:	f7ff fee2 	bl	1d9d0 <net_context_get_iface>
   1dc0c:	4607      	mov	r7, r0
   1dc0e:	4628      	mov	r0, r5
   1dc10:	f896 800b 	ldrb.w	r8, [r6, #11]
   1dc14:	f7ff fe78 	bl	1d908 <net_context_get_family>
   1dc18:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   1dc1c:	4602      	mov	r2, r0
   1dc1e:	9300      	str	r3, [sp, #0]
   1dc20:	4641      	mov	r1, r8
   1dc22:	2306      	movs	r3, #6
   1dc24:	4638      	mov	r0, r7
   1dc26:	f7ff fbaf 	bl	1d388 <net_pkt_alloc_with_buffer>
		if (!pkt) {
   1dc2a:	b360      	cbz	r0, 1dc86 <prepare_segment.isra.21+0x1e6>
	struct net_buf *tail = NULL;
   1dc2c:	46a0      	mov	r8, r4
	pkt->context = ctx;
   1dc2e:	61c5      	str	r5, [r0, #28]
   1dc30:	4604      	mov	r4, r0
		pkt_allocated = true;
   1dc32:	f04f 0901 	mov.w	r9, #1
   1dc36:	e761      	b.n	1dafc <prepare_segment.isra.21+0x5c>
	u8_t optlen = 0U;
   1dc38:	469a      	mov	sl, r3
   1dc3a:	e79a      	b.n	1db72 <prepare_segment.isra.21+0xd2>
	if (optlen && net_pkt_write(pkt, segment->options, segment->optlen)) {
   1dc3c:	7af2      	ldrb	r2, [r6, #11]
   1dc3e:	68f1      	ldr	r1, [r6, #12]
   1dc40:	4620      	mov	r0, r4
   1dc42:	f018 fa65 	bl	36110 <net_pkt_write>
   1dc46:	2800      	cmp	r0, #0
   1dc48:	d0c4      	beq.n	1dbd4 <prepare_segment.isra.21+0x134>
	if (pkt_allocated) {
   1dc4a:	f1b9 0f00 	cmp.w	r9, #0
   1dc4e:	d1d6      	bne.n	1dbfe <prepare_segment.isra.21+0x15e>
		net_buf_unref(pkt->buffer);
   1dc50:	6920      	ldr	r0, [r4, #16]
   1dc52:	f7fe f925 	bl	1bea0 <net_buf_unref>
		pkt->buffer = tail;
   1dc56:	f8c4 8010 	str.w	r8, [r4, #16]
   1dc5a:	e00a      	b.n	1dc72 <prepare_segment.isra.21+0x1d2>
		net_pkt_append_buffer(pkt, tail);
   1dc5c:	4641      	mov	r1, r8
   1dc5e:	4620      	mov	r0, r4
   1dc60:	f018 f8c8 	bl	35df4 <net_pkt_append_buffer>
   1dc64:	e7b9      	b.n	1dbda <prepare_segment.isra.21+0x13a>
	return -EINVAL;
   1dc66:	f06f 0715 	mvn.w	r7, #21
   1dc6a:	e7c5      	b.n	1dbf8 <prepare_segment.isra.21+0x158>
	return 0;
   1dc6c:	2700      	movs	r7, #0
	*out_pkt = pkt;
   1dc6e:	9b03      	ldr	r3, [sp, #12]
   1dc70:	601c      	str	r4, [r3, #0]
}
   1dc72:	4638      	mov	r0, r7
   1dc74:	b00d      	add	sp, #52	; 0x34
   1dc76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		status = -EINVAL;
   1dc7a:	f06f 0715 	mvn.w	r7, #21
   1dc7e:	e7e4      	b.n	1dc4a <prepare_segment.isra.21+0x1aa>
		status = -ENOBUFS;
   1dc80:	f06f 0768 	mvn.w	r7, #104	; 0x68
   1dc84:	e7e1      	b.n	1dc4a <prepare_segment.isra.21+0x1aa>
			return -ENOMEM;
   1dc86:	f06f 070b 	mvn.w	r7, #11
   1dc8a:	e7f2      	b.n	1dc72 <prepare_segment.isra.21+0x1d2>
   1dc8c:	0003cb77 	.word	0x0003cb77
   1dc90:	0003dc41 	.word	0x0003dc41
   1dc94:	0003b773 	.word	0x0003b773
   1dc98:	0003cb7f 	.word	0x0003cb7f

0001dc9c <net_tcp_alloc>:
{
   1dc9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dc9e:	4607      	mov	r7, r0
	__asm__ volatile(
   1dca0:	f04f 0320 	mov.w	r3, #32
   1dca4:	f3ef 8411 	mrs	r4, BASEPRI
   1dca8:	f383 8811 	msr	BASEPRI, r3
   1dcac:	f3bf 8f6f 	isb	sy
	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   1dcb0:	4a26      	ldr	r2, [pc, #152]	; (1dd4c <net_tcp_alloc+0xb0>)
   1dcb2:	2300      	movs	r3, #0
   1dcb4:	4616      	mov	r6, r2
		if (!net_tcp_is_used(&tcp_context[i])) {
   1dcb6:	4610      	mov	r0, r2
   1dcb8:	f018 fcd2 	bl	36660 <net_tcp_is_used>
   1dcbc:	2800      	cmp	r0, #0
   1dcbe:	d13c      	bne.n	1dd3a <net_tcp_alloc+0x9e>
			tcp_context[i].flags |= NET_TCP_IN_USE;
   1dcc0:	22c0      	movs	r2, #192	; 0xc0
   1dcc2:	fb02 6203 	mla	r2, r2, r3, r6
   1dcc6:	f8b2 10bc 	ldrh.w	r1, [r2, #188]	; 0xbc
   1dcca:	f041 0120 	orr.w	r1, r1, #32
   1dcce:	f8a2 10bc 	strh.w	r1, [r2, #188]	; 0xbc
	__asm__ volatile(
   1dcd2:	f384 8811 	msr	BASEPRI, r4
   1dcd6:	f3bf 8f6f 	isb	sy
	if (i >= NET_MAX_TCP_CONTEXT) {
   1dcda:	2b06      	cmp	r3, #6
   1dcdc:	d033      	beq.n	1dd46 <net_tcp_alloc+0xaa>
	(void)memset(&tcp_context[i], 0, sizeof(struct net_tcp));
   1dcde:	22c0      	movs	r2, #192	; 0xc0
   1dce0:	fb02 f403 	mul.w	r4, r2, r3
   1dce4:	1935      	adds	r5, r6, r4
   1dce6:	2100      	movs	r1, #0
   1dce8:	4628      	mov	r0, r5
   1dcea:	f01b f9a4 	bl	39036 <memset>
	tcp_context[i].state = NET_TCP_CLOSED;
   1dcee:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   1dcf2:	4432      	add	r2, r6
	tcp_context[i].flags = NET_TCP_IN_USE;
   1dcf4:	6853      	ldr	r3, [r2, #4]
   1dcf6:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
   1dcfa:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
   1dcfe:	f043 0320 	orr.w	r3, r3, #32
   1dd02:	6053      	str	r3, [r2, #4]
	tcp_context[i].context = context;
   1dd04:	5137      	str	r7, [r6, r4]
 * @return Return a random TCP sequence number
 */
static inline u32_t tcp_init_isn(void)
{
	/* Randomise initial seq number */
	return sys_rand32_get();
   1dd06:	f000 fffd 	bl	1ed04 <sys_rand32_get>
	tcp_context[i].accept_cb = NULL;
   1dd0a:	2700      	movs	r7, #0
	tcp_context[i].recv_wnd = MIN(NET_TCP_MAX_WIN, NET_TCP_BUF_MAX_LEN);
   1dd0c:	4b10      	ldr	r3, [pc, #64]	; (1dd50 <net_tcp_alloc+0xb4>)
	tcp_context[i].send_seq = tcp_init_isn();
   1dd0e:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
	k_delayed_work_init(&tcp_context[i].retry_timer, tcp_retry_expired);
   1dd12:	f104 0048 	add.w	r0, r4, #72	; 0x48
	tcp_context[i].recv_wnd = MIN(NET_TCP_MAX_WIN, NET_TCP_BUF_MAX_LEN);
   1dd16:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	tcp_context[i].accept_cb = NULL;
   1dd1a:	f8c5 709c 	str.w	r7, [r5, #156]	; 0x9c
	k_delayed_work_init(&tcp_context[i].retry_timer, tcp_retry_expired);
   1dd1e:	490d      	ldr	r1, [pc, #52]	; (1dd54 <net_tcp_alloc+0xb8>)
   1dd20:	4430      	add	r0, r6
   1dd22:	f01b f874 	bl	38e0e <k_delayed_work_init>
	k_sem_init(&tcp_context[i].connect_wait, 0, UINT_MAX);
   1dd26:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
	return z_impl_k_sem_init(sem, initial_count, limit);
   1dd2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1dd2e:	4639      	mov	r1, r7
   1dd30:	4430      	add	r0, r6
   1dd32:	f01a ffeb 	bl	38d0c <z_impl_k_sem_init>
}
   1dd36:	4628      	mov	r0, r5
   1dd38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   1dd3a:	3301      	adds	r3, #1
   1dd3c:	2b06      	cmp	r3, #6
   1dd3e:	f102 02c0 	add.w	r2, r2, #192	; 0xc0
   1dd42:	d1b8      	bne.n	1dcb6 <net_tcp_alloc+0x1a>
   1dd44:	e7c5      	b.n	1dcd2 <net_tcp_alloc+0x36>
		return NULL;
   1dd46:	2500      	movs	r5, #0
   1dd48:	e7f5      	b.n	1dd36 <net_tcp_alloc+0x9a>
   1dd4a:	bf00      	nop
   1dd4c:	20021d98 	.word	0x20021d98
   1dd50:	02180500 	.word	0x02180500
   1dd54:	0003691f 	.word	0x0003691f

0001dd58 <net_tcp_change_state>:
{
   1dd58:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1dd5a:	460d      	mov	r5, r1
	NET_ASSERT(tcp);
   1dd5c:	4604      	mov	r4, r0
   1dd5e:	b970      	cbnz	r0, 1dd7e <net_tcp_change_state+0x26>
   1dd60:	4922      	ldr	r1, [pc, #136]	; (1ddec <net_tcp_change_state+0x94>)
   1dd62:	f240 5319 	movw	r3, #1305	; 0x519
   1dd66:	4a22      	ldr	r2, [pc, #136]	; (1ddf0 <net_tcp_change_state+0x98>)
   1dd68:	4822      	ldr	r0, [pc, #136]	; (1ddf4 <net_tcp_change_state+0x9c>)
   1dd6a:	f015 fc22 	bl	335b2 <printk>
   1dd6e:	4822      	ldr	r0, [pc, #136]	; (1ddf8 <net_tcp_change_state+0xa0>)
   1dd70:	f015 fc1f 	bl	335b2 <printk>
   1dd74:	f240 5119 	movw	r1, #1305	; 0x519
   1dd78:	481d      	ldr	r0, [pc, #116]	; (1ddf0 <net_tcp_change_state+0x98>)
   1dd7a:	f015 ff1b 	bl	33bb4 <assert_post_action>
 * @param tcp TCP context
 */
#if defined(CONFIG_NET_NATIVE_TCP)
static inline enum net_tcp_state net_tcp_get_state(const struct net_tcp *tcp)
{
	return (enum net_tcp_state)tcp->state;
   1dd7e:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
	if (net_tcp_get_state(tcp) == new_state) {
   1dd82:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1dd86:	42ab      	cmp	r3, r5
   1dd88:	d02d      	beq.n	1dde6 <net_tcp_change_state+0x8e>
	NET_ASSERT(new_state >= NET_TCP_CLOSED &&
   1dd8a:	2d0a      	cmp	r5, #10
   1dd8c:	d90e      	bls.n	1ddac <net_tcp_change_state+0x54>
   1dd8e:	491b      	ldr	r1, [pc, #108]	; (1ddfc <net_tcp_change_state+0xa4>)
   1dd90:	f44f 63a4 	mov.w	r3, #1312	; 0x520
   1dd94:	4a16      	ldr	r2, [pc, #88]	; (1ddf0 <net_tcp_change_state+0x98>)
   1dd96:	4817      	ldr	r0, [pc, #92]	; (1ddf4 <net_tcp_change_state+0x9c>)
   1dd98:	f015 fc0b 	bl	335b2 <printk>
   1dd9c:	4816      	ldr	r0, [pc, #88]	; (1ddf8 <net_tcp_change_state+0xa0>)
   1dd9e:	f015 fc08 	bl	335b2 <printk>
   1dda2:	f44f 61a4 	mov.w	r1, #1312	; 0x520
   1dda6:	4812      	ldr	r0, [pc, #72]	; (1ddf0 <net_tcp_change_state+0x98>)
   1dda8:	f015 ff04 	bl	33bb4 <assert_post_action>
	tcp->state = new_state;
   1ddac:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   1ddb0:	f005 050f 	and.w	r5, r5, #15
   1ddb4:	f365 3350 	bfi	r3, r5, #13, #4
   1ddb8:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
	if (net_tcp_get_state(tcp) != NET_TCP_CLOSED) {
   1ddbc:	b99d      	cbnz	r5, 1dde6 <net_tcp_change_state+0x8e>
	if (!tcp->context) {
   1ddbe:	6823      	ldr	r3, [r4, #0]
   1ddc0:	b18b      	cbz	r3, 1dde6 <net_tcp_change_state+0x8e>
	if (tcp->context->conn_handler) {
   1ddc2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   1ddc4:	b118      	cbz	r0, 1ddce <net_tcp_change_state+0x76>
	return net_conn_unregister(handle);
   1ddc6:	f7ff fc5f 	bl	1d688 <net_conn_unregister>
		tcp->context->conn_handler = NULL;
   1ddca:	6823      	ldr	r3, [r4, #0]
   1ddcc:	62dd      	str	r5, [r3, #44]	; 0x2c
	if (tcp->accept_cb) {
   1ddce:	f8d4 509c 	ldr.w	r5, [r4, #156]	; 0x9c
   1ddd2:	b145      	cbz	r5, 1dde6 <net_tcp_change_state+0x8e>
		tcp->accept_cb(tcp->context,
   1ddd4:	6820      	ldr	r0, [r4, #0]
   1ddd6:	2208      	movs	r2, #8
   1ddd8:	4601      	mov	r1, r0
   1ddda:	f851 3b24 	ldr.w	r3, [r1], #36
   1ddde:	9300      	str	r3, [sp, #0]
   1dde0:	f06f 037d 	mvn.w	r3, #125	; 0x7d
   1dde4:	47a8      	blx	r5
}
   1dde6:	b003      	add	sp, #12
   1dde8:	bd30      	pop	{r4, r5, pc}
   1ddea:	bf00      	nop
   1ddec:	0003dc7c 	.word	0x0003dc7c
   1ddf0:	0003dc41 	.word	0x0003dc41
   1ddf4:	0003b773 	.word	0x0003b773
   1ddf8:	0003cb7f 	.word	0x0003cb7f
   1ddfc:	0003dbe7 	.word	0x0003dbe7

0001de00 <net_tcp_release>:
{
   1de00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!PART_OF_ARRAY(tcp_context, tcp)) {
   1de04:	4604      	mov	r4, r0
   1de06:	2800      	cmp	r0, #0
   1de08:	d074      	beq.n	1def4 <net_tcp_release+0xf4>
   1de0a:	4b3c      	ldr	r3, [pc, #240]	; (1defc <net_tcp_release+0xfc>)
   1de0c:	4298      	cmp	r0, r3
   1de0e:	d371      	bcc.n	1def4 <net_tcp_release+0xf4>
   1de10:	f503 6390 	add.w	r3, r3, #1152	; 0x480
   1de14:	4298      	cmp	r0, r3
   1de16:	d26d      	bcs.n	1def4 <net_tcp_release+0xf4>
	k_delayed_work_cancel(&tcp->retry_timer);
   1de18:	3048      	adds	r0, #72	; 0x48
   1de1a:	f010 fc33 	bl	2e684 <k_delayed_work_cancel>
	sem->count = 0U;
   1de1e:	2500      	movs	r5, #0
	k_delayed_work_cancel(&tcp->ack_timer);
   1de20:	f104 0008 	add.w	r0, r4, #8
   1de24:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
   1de28:	f010 fc2c 	bl	2e684 <k_delayed_work_cancel>
	k_delayed_work_cancel(&tcp->fin_timer);
   1de2c:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1de30:	f010 fc28 	bl	2e684 <k_delayed_work_cancel>
	k_delayed_work_cancel(&tcp->timewait_timer);
   1de34:	f104 0068 	add.w	r0, r4, #104	; 0x68
   1de38:	f010 fc24 	bl	2e684 <k_delayed_work_cancel>
	net_tcp_change_state(tcp, NET_TCP_CLOSED);
   1de3c:	4629      	mov	r1, r5
   1de3e:	4620      	mov	r0, r4
   1de40:	f7ff ff8a 	bl	1dd58 <net_tcp_change_state>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp->sent_list, pkt, tmp,
   1de44:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   1de48:	b1d3      	cbz	r3, 1de80 <net_tcp_release+0x80>
   1de4a:	f1b3 0538 	subs.w	r5, r3, #56	; 0x38
   1de4e:	d017      	beq.n	1de80 <net_tcp_release+0x80>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1de50:	681e      	ldr	r6, [r3, #0]
   1de52:	b106      	cbz	r6, 1de56 <net_tcp_release+0x56>
   1de54:	3e38      	subs	r6, #56	; 0x38
	parent->next = child;
   1de56:	f04f 0800 	mov.w	r8, #0
Z_GENLIST_REMOVE(slist, snode)
   1de5a:	462b      	mov	r3, r5
   1de5c:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
   1de60:	f853 2f38 	ldr.w	r2, [r3, #56]!
		if (atomic_get(&pkt->atomic_ref) == 0) {
   1de64:	f105 0724 	add.w	r7, r5, #36	; 0x24
   1de68:	4299      	cmp	r1, r3
	list->head = node;
   1de6a:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	list->tail = node;
   1de6e:	bf08      	it	eq
   1de70:	f8c4 208c 	streq.w	r2, [r4, #140]	; 0x8c
	parent->next = child;
   1de74:	f8c5 8038 	str.w	r8, [r5, #56]	; 0x38
   1de78:	e8d7 3faf 	lda	r3, [r7]
   1de7c:	b9d3      	cbnz	r3, 1deb4 <net_tcp_release+0xb4>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp->sent_list, pkt, tmp,
   1de7e:	bb9e      	cbnz	r6, 1dee8 <net_tcp_release+0xe8>
	tcp->context = NULL;
   1de80:	2000      	movs	r0, #0
   1de82:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
   1de84:	f04f 0320 	mov.w	r3, #32
   1de88:	f3ef 8111 	mrs	r1, BASEPRI
   1de8c:	f383 8811 	msr	BASEPRI, r3
   1de90:	f3bf 8f6f 	isb	sy
	tcp->flags &= ~(NET_TCP_IN_USE | NET_TCP_RECV_MSS_SET);
   1de94:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	; 0xbc
   1de98:	f3c3 1247 	ubfx	r2, r3, #5, #8
   1de9c:	f022 0221 	bic.w	r2, r2, #33	; 0x21
   1dea0:	f362 134c 	bfi	r3, r2, #5, #8
   1dea4:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
	__asm__ volatile(
   1dea8:	f381 8811 	msr	BASEPRI, r1
   1deac:	f3bf 8f6f 	isb	sy
}
   1deb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_pkt_unref(pkt);
   1deb4:	4628      	mov	r0, r5
   1deb6:	f017 ff04 	bl	35cc2 <net_pkt_unref>
   1deba:	e8d7 3faf 	lda	r3, [r7]
		if (refcount > 0) {
   1debe:	2b00      	cmp	r3, #0
   1dec0:	461f      	mov	r7, r3
   1dec2:	dddc      	ble.n	1de7e <net_tcp_release+0x7e>
   1dec4:	f105 0208 	add.w	r2, r5, #8
   1dec8:	e8d2 2faf 	lda	r2, [r2]
			if (k_work_pending(net_pkt_work(pkt)) ||
   1decc:	07d1      	lsls	r1, r2, #31
   1dece:	d403      	bmi.n	1ded8 <net_tcp_release+0xd8>
	return pkt->sent_or_eof;
   1ded0:	f895 203d 	ldrb.w	r2, [r5, #61]	; 0x3d
   1ded4:	0792      	lsls	r2, r2, #30
   1ded6:	d500      	bpl.n	1deda <net_tcp_release+0xda>
				refcount--;
   1ded8:	1e5f      	subs	r7, r3, #1
			while (refcount) {
   1deda:	2f00      	cmp	r7, #0
   1dedc:	d0cf      	beq.n	1de7e <net_tcp_release+0x7e>
				net_pkt_unref(pkt);
   1dede:	4628      	mov	r0, r5
   1dee0:	f017 feef 	bl	35cc2 <net_pkt_unref>
				refcount--;
   1dee4:	3f01      	subs	r7, #1
   1dee6:	e7f8      	b.n	1deda <net_tcp_release+0xda>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1dee8:	6bb3      	ldr	r3, [r6, #56]	; 0x38
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp->sent_list, pkt, tmp,
   1deea:	b103      	cbz	r3, 1deee <net_tcp_release+0xee>
   1deec:	3b38      	subs	r3, #56	; 0x38
{
   1deee:	4635      	mov	r5, r6
   1def0:	461e      	mov	r6, r3
   1def2:	e7b2      	b.n	1de5a <net_tcp_release+0x5a>
		return -EINVAL;
   1def4:	f06f 0015 	mvn.w	r0, #21
   1def8:	e7da      	b.n	1deb0 <net_tcp_release+0xb0>
   1defa:	bf00      	nop
   1defc:	20021d98 	.word	0x20021d98

0001df00 <net_tcp_queue_data>:
{
   1df00:	b570      	push	{r4, r5, r6, lr}
   1df02:	4604      	mov	r4, r0
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;
   1df04:	2500      	movs	r5, #0
   1df06:	b086      	sub	sp, #24
	struct net_conn *conn = (struct net_conn *)context->conn_handler;
   1df08:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
	size_t data_len = net_pkt_get_len(pkt);
   1df0a:	690b      	ldr	r3, [r1, #16]
{
   1df0c:	9105      	str	r1, [sp, #20]

	while (buf) {
   1df0e:	bba3      	cbnz	r3, 1df7a <net_tcp_queue_data+0x7a>
	if (net_context_get_state(context) != NET_CONTEXT_CONNECTED) {
   1df10:	4620      	mov	r0, r4
   1df12:	f7ff fd19 	bl	1d948 <net_context_get_state>
   1df16:	2802      	cmp	r0, #2
   1df18:	d133      	bne.n	1df82 <net_tcp_queue_data+0x82>
	NET_ASSERT(context->tcp);
   1df1a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1df1c:	b973      	cbnz	r3, 1df3c <net_tcp_queue_data+0x3c>
   1df1e:	491c      	ldr	r1, [pc, #112]	; (1df90 <net_tcp_queue_data+0x90>)
   1df20:	f240 3366 	movw	r3, #870	; 0x366
   1df24:	4a1b      	ldr	r2, [pc, #108]	; (1df94 <net_tcp_queue_data+0x94>)
   1df26:	481c      	ldr	r0, [pc, #112]	; (1df98 <net_tcp_queue_data+0x98>)
   1df28:	f015 fb43 	bl	335b2 <printk>
   1df2c:	481b      	ldr	r0, [pc, #108]	; (1df9c <net_tcp_queue_data+0x9c>)
   1df2e:	f015 fb40 	bl	335b2 <printk>
   1df32:	f240 3166 	movw	r1, #870	; 0x366
   1df36:	4817      	ldr	r0, [pc, #92]	; (1df94 <net_tcp_queue_data+0x94>)
   1df38:	f015 fe3c 	bl	33bb4 <assert_post_action>
	if (context->tcp->flags & NET_TCP_IS_SHUTDOWN) {
   1df3c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1df3e:	f8b0 30bc 	ldrh.w	r3, [r0, #188]	; 0xbc
   1df42:	f3c3 1347 	ubfx	r3, r3, #5, #8
   1df46:	f013 0308 	ands.w	r3, r3, #8
   1df4a:	d11d      	bne.n	1df88 <net_tcp_queue_data+0x88>
	ret = net_tcp_prepare_segment(context->tcp, NET_TCP_PSH | NET_TCP_ACK,
   1df4c:	aa05      	add	r2, sp, #20
				      NULL, 0, NULL, &conn->remote_addr, &pkt);
   1df4e:	3604      	adds	r6, #4
	ret = net_tcp_prepare_segment(context->tcp, NET_TCP_PSH | NET_TCP_ACK,
   1df50:	9202      	str	r2, [sp, #8]
   1df52:	e9cd 3600 	strd	r3, r6, [sp]
   1df56:	461a      	mov	r2, r3
   1df58:	2118      	movs	r1, #24
   1df5a:	f018 fd6d 	bl	36a38 <net_tcp_prepare_segment>
	if (ret) {
   1df5e:	b950      	cbnz	r0, 1df76 <net_tcp_queue_data+0x76>
	context->tcp->send_seq += data_len;
   1df60:	4620      	mov	r0, r4
   1df62:	f850 2f3c 	ldr.w	r2, [r0, #60]!
	return net_tcp_queue_pkt(context, pkt);
   1df66:	9905      	ldr	r1, [sp, #20]
	context->tcp->send_seq += data_len;
   1df68:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   1df6c:	441d      	add	r5, r3
   1df6e:	f8c2 5090 	str.w	r5, [r2, #144]	; 0x90
	return net_tcp_queue_pkt(context, pkt);
   1df72:	f018 fb7a 	bl	3666a <net_tcp_queue_pkt.isra.22>
}
   1df76:	b006      	add	sp, #24
   1df78:	bd70      	pop	{r4, r5, r6, pc}
		bytes += buf->len;
   1df7a:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1df7c:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1df7e:	4415      	add	r5, r2
		buf = buf->frags;
   1df80:	e7c5      	b.n	1df0e <net_tcp_queue_data+0xe>
		return -ENOTCONN;
   1df82:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1df86:	e7f6      	b.n	1df76 <net_tcp_queue_data+0x76>
		return -ESHUTDOWN;
   1df88:	f06f 006d 	mvn.w	r0, #109	; 0x6d
   1df8c:	e7f3      	b.n	1df76 <net_tcp_queue_data+0x76>
   1df8e:	bf00      	nop
   1df90:	0003dc73 	.word	0x0003dc73
   1df94:	0003dc41 	.word	0x0003dc41
   1df98:	0003b773 	.word	0x0003b773
   1df9c:	0003cb7f 	.word	0x0003cb7f

0001dfa0 <tcp_established>:
 *				    union net_ip_header *ip_hdr,
 *				    union net_proto_header *proto_hdr,
 *				    struct net_pkt *pkt,
 *                                  void *user_data)
 */
NET_CONN_CB(tcp_established)
   1dfa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dfa4:	469b      	mov	fp, r3
   1dfa6:	b087      	sub	sp, #28
   1dfa8:	9c10      	ldr	r4, [sp, #64]	; 0x40
   1dfaa:	4681      	mov	r9, r0
   1dfac:	4620      	mov	r0, r4
   1dfae:	4688      	mov	r8, r1
   1dfb0:	9204      	str	r2, [sp, #16]
   1dfb2:	f017 fce5 	bl	35980 <net_context_ref>
	enum net_verdict ret = NET_OK;
	bool do_not_send_ack = false;
	u8_t tcp_flags;
	u16_t data_len;

	k_mutex_lock(&context->lock, K_FOREVER);
   1dfb6:	f104 0308 	add.w	r3, r4, #8
	struct net_tcp_hdr *tcp_hdr = proto_hdr->tcp;
   1dfba:	f8db 7000 	ldr.w	r7, [fp]
	k_mutex_lock(&context->lock, K_FOREVER);
   1dfbe:	9303      	str	r3, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   1dfc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1dfc4:	9803      	ldr	r0, [sp, #12]
   1dfc6:	f00e fb17 	bl	2c5f8 <z_impl_k_mutex_lock>

	NET_ASSERT(context && context->tcp);
   1dfca:	b10c      	cbz	r4, 1dfd0 <tcp_established+0x30>
   1dfcc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1dfce:	b973      	cbnz	r3, 1dfee <tcp_established+0x4e>
   1dfd0:	497b      	ldr	r1, [pc, #492]	; (1e1c0 <tcp_established+0x220>)
   1dfd2:	f640 0304 	movw	r3, #2052	; 0x804
   1dfd6:	4a7b      	ldr	r2, [pc, #492]	; (1e1c4 <tcp_established+0x224>)
   1dfd8:	487b      	ldr	r0, [pc, #492]	; (1e1c8 <tcp_established+0x228>)
   1dfda:	f015 faea 	bl	335b2 <printk>
   1dfde:	487b      	ldr	r0, [pc, #492]	; (1e1cc <tcp_established+0x22c>)
   1dfe0:	f015 fae7 	bl	335b2 <printk>
   1dfe4:	f640 0104 	movw	r1, #2052	; 0x804
   1dfe8:	4876      	ldr	r0, [pc, #472]	; (1e1c4 <tcp_established+0x224>)
   1dfea:	f015 fde3 	bl	33bb4 <assert_post_action>

	if (net_tcp_get_state(context->tcp) < NET_TCP_ESTABLISHED) {
   1dfee:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
	return (enum net_tcp_state)tcp->state;
   1dff2:	f8da 30bc 	ldr.w	r3, [sl, #188]	; 0xbc
   1dff6:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1dffa:	2b03      	cmp	r3, #3
   1dffc:	d80a      	bhi.n	1e014 <tcp_established+0x74>
					 context->tcp->recv_user_data);
		}

		net_context_unref(context);

		ret = NET_DROP;
   1dffe:	2602      	movs	r6, #2
	return z_impl_k_mutex_unlock(mutex);
   1e000:	9803      	ldr	r0, [sp, #12]
   1e002:	f00e fbd7 	bl	2c7b4 <z_impl_k_mutex_unlock>
NET_CONN_CB(tcp_established)
   1e006:	4620      	mov	r0, r4
   1e008:	f017 fcc4 	bl	35994 <net_context_unref>
   1e00c:	4630      	mov	r0, r6
   1e00e:	b007      	add	sp, #28
   1e010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   1e014:	1d38      	adds	r0, r7, #4
   1e016:	f018 fb14 	bl	36642 <sys_get_be32>
 *
 * @return < 0 if seq1 < seq2, 0 if seq1 == seq2, > 0 if seq > seq2
 */
static inline s32_t net_tcp_seq_cmp(u32_t seq1, u32_t seq2)
{
	return (s32_t)(seq1 - seq2);
   1e01a:	f8da 3094 	ldr.w	r3, [sl, #148]	; 0x94
   1e01e:	1ac3      	subs	r3, r0, r3
   1e020:	2b00      	cmp	r3, #0
   1e022:	da06      	bge.n	1e032 <tcp_established+0x92>
		send_ack(context, &conn->remote_addr, true);
   1e024:	2201      	movs	r2, #1
   1e026:	f109 0104 	add.w	r1, r9, #4
   1e02a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1e02c:	f018 fd9b 	bl	36b66 <send_ack.isra.34>
		goto unlock;
   1e030:	e7e5      	b.n	1dffe <tcp_established+0x5e>
   1e032:	9305      	str	r3, [sp, #20]
	if (net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   1e034:	d1e3      	bne.n	1dffe <tcp_established+0x5e>
	tcp_flags = NET_TCP_FLAGS(tcp_hdr);
   1e036:	7b7d      	ldrb	r5, [r7, #13]
	if (tcp_flags & NET_TCP_RST) {
   1e038:	f015 0604 	ands.w	r6, r5, #4
   1e03c:	d016      	beq.n	1e06c <tcp_established+0xcc>
		if (!net_tcp_validate_seq(context->tcp, tcp_hdr)) {
   1e03e:	4639      	mov	r1, r7
   1e040:	4650      	mov	r0, sl
   1e042:	f018 fee0 	bl	36e06 <net_tcp_validate_seq>
   1e046:	2800      	cmp	r0, #0
   1e048:	d0d9      	beq.n	1dffe <tcp_established+0x5e>
		if (context->recv_cb) {
   1e04a:	6b25      	ldr	r5, [r4, #48]	; 0x30
   1e04c:	b155      	cbz	r5, 1e064 <tcp_established+0xc4>
			context->recv_cb(context, NULL, NULL, NULL, -ECONNRESET,
   1e04e:	f8da 2004 	ldr.w	r2, [sl, #4]
   1e052:	9b05      	ldr	r3, [sp, #20]
   1e054:	9201      	str	r2, [sp, #4]
   1e056:	f06f 0267 	mvn.w	r2, #103	; 0x67
   1e05a:	4619      	mov	r1, r3
   1e05c:	9200      	str	r2, [sp, #0]
   1e05e:	4620      	mov	r0, r4
   1e060:	461a      	mov	r2, r3
   1e062:	47a8      	blx	r5
		net_context_unref(context);
   1e064:	4620      	mov	r0, r4
   1e066:	f017 fc95 	bl	35994 <net_context_unref>
   1e06a:	e7c8      	b.n	1dffe <tcp_established+0x5e>
		goto unlock;
	}

	/* Handle TCP state transition */
	if (tcp_flags & NET_TCP_ACK) {
   1e06c:	06ea      	lsls	r2, r5, #27
   1e06e:	d513      	bpl.n	1e098 <tcp_established+0xf8>
		if (!net_tcp_ack_received(context,
   1e070:	f107 0008 	add.w	r0, r7, #8
   1e074:	f018 fae5 	bl	36642 <sys_get_be32>
   1e078:	4601      	mov	r1, r0
   1e07a:	4620      	mov	r0, r4
   1e07c:	f018 fdc5 	bl	36c0a <net_tcp_ack_received>
   1e080:	2800      	cmp	r0, #0
   1e082:	d0bc      	beq.n	1dffe <tcp_established+0x5e>

		/* TCP state might be changed after maintaining the sent pkt
		 * list, e.g., an ack of FIN is received.
		 */

		if (net_tcp_get_state(context->tcp)
   1e084:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1e086:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   1e08a:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1e08e:	2b07      	cmp	r3, #7
   1e090:	d133      	bne.n	1e0fa <tcp_established+0x15a>
			   == NET_TCP_FIN_WAIT_1) {
			/* Active close: step to FIN_WAIT_2 */
			net_tcp_change_state(context->tcp, NET_TCP_FIN_WAIT_2);
   1e092:	2108      	movs	r1, #8
   1e094:	f7ff fe60 	bl	1dd58 <net_tcp_change_state>
			net_pkt_unref(pkt);
			goto clean_up;
		}
	}

	if (tcp_flags & NET_TCP_FIN) {
   1e098:	f015 0301 	ands.w	r3, r5, #1
   1e09c:	469a      	mov	sl, r3
   1e09e:	d01c      	beq.n	1e0da <tcp_established+0x13a>
		if (net_tcp_get_state(context->tcp) == NET_TCP_ESTABLISHED) {
   1e0a0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1e0a2:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   1e0a6:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1e0aa:	2b04      	cmp	r3, #4
   1e0ac:	d14d      	bne.n	1e14a <tcp_established+0x1aa>
			/* Passive close: step to CLOSE_WAIT */
			net_tcp_change_state(context->tcp, NET_TCP_CLOSE_WAIT);
   1e0ae:	2105      	movs	r1, #5
   1e0b0:	f7ff fe52 	bl	1dd58 <net_tcp_change_state>
			/* We should receive ACK next in order to get rid of
			 * LAST_ACK state that we are entering in a short while.
			 * But we need to be prepared to NOT to receive it as
			 * otherwise the connection would be stuck forever.
			 */
			k_delayed_work_submit(&context->tcp->ack_timer,
   1e0b4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1e0b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1e0ba:	3008      	adds	r0, #8
   1e0bc:	f7ff fc1c 	bl	1d8f8 <k_delayed_work_submit>
		context->flags |= NET_CONTEXT_CLOSING_SOCK;
   1e0c0:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   1e0c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1e0c8:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
			k_delayed_work_cancel(&context->tcp->fin_timer);
			/* Active close: step to TIME_WAIT */
			net_tcp_change_state(context->tcp, NET_TCP_TIME_WAIT);
		}

		context->tcp->fin_rcvd = 1U;
   1e0cc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   1e0ce:	f892 30be 	ldrb.w	r3, [r2, #190]	; 0xbe
   1e0d2:	f043 0304 	orr.w	r3, r3, #4
   1e0d6:	f882 30be 	strb.w	r3, [r2, #190]	; 0xbe
	}

	if (!IS_ENABLED(CONFIG_NET_TCP_AUTO_ACCEPT) &&
   1e0da:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   1e0de:	059b      	lsls	r3, r3, #22
   1e0e0:	d464      	bmi.n	1e1ac <tcp_established+0x20c>
	    net_context_is_accepting(context)) {
		data_len = 0;
		do_not_send_ack = true;
	} else {
		data_len = net_pkt_remaining_data(pkt);
   1e0e2:	4640      	mov	r0, r8
   1e0e4:	f017 ff55 	bl	35f92 <net_pkt_remaining_data>
	return tcp->recv_wnd;
   1e0e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		data_len = net_pkt_remaining_data(pkt);
   1e0ea:	b285      	uxth	r5, r0
	}

	if (data_len > net_tcp_get_recv_wnd(context->tcp)) {
   1e0ec:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
   1e0f0:	42ab      	cmp	r3, r5
   1e0f2:	d234      	bcs.n	1e15e <tcp_established+0x1be>
		 * for net_tcp_get_recv_wnd(context->tcp) == 0, but
		 * given the if above, we know that if data_len == 1,
		 * then net_tcp_get_recv_wnd(context->tcp) can be only 0
		 * here.
		 */
		if (data_len == 1U) {
   1e0f4:	2d01      	cmp	r5, #1
   1e0f6:	d182      	bne.n	1dffe <tcp_established+0x5e>
   1e0f8:	e794      	b.n	1e024 <tcp_established+0x84>
		} else if (net_tcp_get_state(context->tcp)
   1e0fa:	2b06      	cmp	r3, #6
   1e0fc:	d1cc      	bne.n	1e098 <tcp_established+0xf8>
			net_tcp_change_state(context->tcp, NET_TCP_CLOSED);
   1e0fe:	4631      	mov	r1, r6
   1e100:	f7ff fe2a 	bl	1dd58 <net_tcp_change_state>
			net_pkt_unref(pkt);
   1e104:	4640      	mov	r0, r8
   1e106:	f017 fddc 	bl	35cc2 <net_pkt_unref>

		send_ack(context, &conn->remote_addr, false);
	}

clean_up:
	if (net_tcp_get_state(context->tcp) == NET_TCP_TIME_WAIT) {
   1e10a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1e10c:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   1e110:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1e114:	2b09      	cmp	r3, #9
   1e116:	d103      	bne.n	1e120 <tcp_established+0x180>
		k_delayed_work_submit(&context->tcp->timewait_timer,
   1e118:	21fa      	movs	r1, #250	; 0xfa
   1e11a:	3068      	adds	r0, #104	; 0x68
   1e11c:	f7ff fbec 	bl	1d8f8 <k_delayed_work_submit>
				      K_MSEC(CONFIG_NET_TCP_TIME_WAIT_DELAY));
	}

	if (net_tcp_get_state(context->tcp) == NET_TCP_CLOSED) {
   1e120:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   1e122:	f8d2 30bc 	ldr.w	r3, [r2, #188]	; 0xbc
   1e126:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1e12a:	2b00      	cmp	r3, #0
   1e12c:	f47f af68 	bne.w	1e000 <tcp_established+0x60>
		if (context->recv_cb) {
   1e130:	6b25      	ldr	r5, [r4, #48]	; 0x30
   1e132:	b135      	cbz	r5, 1e142 <tcp_established+0x1a2>
			context->recv_cb(context, NULL, NULL, NULL, 0,
   1e134:	6852      	ldr	r2, [r2, #4]
   1e136:	4619      	mov	r1, r3
   1e138:	e9cd 3200 	strd	r3, r2, [sp]
   1e13c:	4620      	mov	r0, r4
   1e13e:	461a      	mov	r2, r3
   1e140:	47a8      	blx	r5
					 context->tcp->recv_user_data);
		}

		net_context_unref(context);
   1e142:	4620      	mov	r0, r4
   1e144:	f017 fc26 	bl	35994 <net_context_unref>
   1e148:	e75a      	b.n	1e000 <tcp_established+0x60>
		} else if (net_tcp_get_state(context->tcp)
   1e14a:	2b08      	cmp	r3, #8
   1e14c:	d1be      	bne.n	1e0cc <tcp_established+0x12c>
			k_delayed_work_cancel(&context->tcp->fin_timer);
   1e14e:	3028      	adds	r0, #40	; 0x28
   1e150:	f010 fa98 	bl	2e684 <k_delayed_work_cancel>
			net_tcp_change_state(context->tcp, NET_TCP_TIME_WAIT);
   1e154:	2109      	movs	r1, #9
   1e156:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1e158:	f7ff fdfe 	bl	1dd58 <net_tcp_change_state>
   1e15c:	e7b6      	b.n	1e0cc <tcp_established+0x12c>
	if (data_len > 0) {
   1e15e:	b335      	cbz	r5, 1e1ae <tcp_established+0x20e>
	u8_t offset = tcp_hdr->offset >> 4;
   1e160:	7b3e      	ldrb	r6, [r7, #12]
   1e162:	0936      	lsrs	r6, r6, #4
	if ((offset << 2) > sizeof(struct net_tcp_hdr)) {
   1e164:	00b6      	lsls	r6, r6, #2
   1e166:	2e14      	cmp	r6, #20
   1e168:	dd08      	ble.n	1e17c <tcp_established+0x1dc>
		net_pkt_skip(pkt, (offset << 2) -
   1e16a:	f1a6 0114 	sub.w	r1, r6, #20
   1e16e:	4640      	mov	r0, r8
   1e170:	f017 fe95 	bl	35e9e <net_pkt_skip>
		data_len -= (offset << 2) - sizeof(struct net_tcp_hdr);
   1e174:	f1c6 0614 	rsb	r6, r6, #20
   1e178:	4435      	add	r5, r6
   1e17a:	b2ad      	uxth	r5, r5
		ret = net_context_packet_received(conn, pkt, ip_hdr, proto_hdr,
   1e17c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1e17e:	9a04      	ldr	r2, [sp, #16]
   1e180:	685b      	ldr	r3, [r3, #4]
   1e182:	4641      	mov	r1, r8
   1e184:	9300      	str	r3, [sp, #0]
   1e186:	4648      	mov	r0, r9
   1e188:	465b      	mov	r3, fp
   1e18a:	f7fe fb01 	bl	1c790 <net_context_packet_received>
   1e18e:	4606      	mov	r6, r0
		context->tcp->send_ack += data_len;
   1e190:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1e192:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   1e196:	441d      	add	r5, r3
		if (tcp_flags & NET_TCP_FIN) {
   1e198:	4653      	mov	r3, sl
   1e19a:	b973      	cbnz	r3, 1e1ba <tcp_established+0x21a>
			context->tcp->send_ack += 1U;
   1e19c:	f8c0 5094 	str.w	r5, [r0, #148]	; 0x94
		send_ack(context, &conn->remote_addr, false);
   1e1a0:	2200      	movs	r2, #0
   1e1a2:	f109 0104 	add.w	r1, r9, #4
   1e1a6:	f018 fcde 	bl	36b66 <send_ack.isra.34>
   1e1aa:	e7ae      	b.n	1e10a <tcp_established+0x16a>
		do_not_send_ack = true;
   1e1ac:	2501      	movs	r5, #1
		net_pkt_unref(pkt);
   1e1ae:	4640      	mov	r0, r8
   1e1b0:	f017 fd87 	bl	35cc2 <net_pkt_unref>
	if (do_not_send_ack == false) {
   1e1b4:	2d00      	cmp	r5, #0
   1e1b6:	d1a8      	bne.n	1e10a <tcp_established+0x16a>
   1e1b8:	e7ea      	b.n	1e190 <tcp_established+0x1f0>
			context->tcp->send_ack += 1U;
   1e1ba:	3501      	adds	r5, #1
   1e1bc:	e7ee      	b.n	1e19c <tcp_established+0x1fc>
   1e1be:	bf00      	nop
   1e1c0:	0003dc68 	.word	0x0003dc68
   1e1c4:	0003dc41 	.word	0x0003dc41
   1e1c8:	0003b773 	.word	0x0003b773
   1e1cc:	0003cb7f 	.word	0x0003cb7f

0001e1d0 <tcp_synack_received>:
 *					struct net_pkt *pkt,
 *				        union net_ip_header *ip_hdr,
 *				        union net_proto_header *proto_hdr,
 *					void *user_data)
 */
NET_CONN_CB(tcp_synack_received)
   1e1d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e1d4:	461d      	mov	r5, r3
   1e1d6:	b08a      	sub	sp, #40	; 0x28
   1e1d8:	9c10      	ldr	r4, [sp, #64]	; 0x40
   1e1da:	460e      	mov	r6, r1
   1e1dc:	4620      	mov	r0, r4
   1e1de:	4690      	mov	r8, r2
   1e1e0:	f017 fbce 	bl	35980 <net_context_ref>
   1e1e4:	682d      	ldr	r5, [r5, #0]
{
	struct net_context *context = (struct net_context *)user_data;
	struct net_tcp_hdr *tcp_hdr = proto_hdr->tcp;
	int ret;

	NET_ASSERT(context && context->tcp);
   1e1e6:	b10c      	cbz	r4, 1e1ec <tcp_synack_received+0x1c>
   1e1e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1e1ea:	b973      	cbnz	r3, 1e20a <tcp_synack_received+0x3a>
   1e1ec:	4958      	ldr	r1, [pc, #352]	; (1e350 <tcp_synack_received+0x180>)
   1e1ee:	f640 03cd 	movw	r3, #2253	; 0x8cd
   1e1f2:	4a58      	ldr	r2, [pc, #352]	; (1e354 <tcp_synack_received+0x184>)
   1e1f4:	4858      	ldr	r0, [pc, #352]	; (1e358 <tcp_synack_received+0x188>)
   1e1f6:	f015 f9dc 	bl	335b2 <printk>
   1e1fa:	4858      	ldr	r0, [pc, #352]	; (1e35c <tcp_synack_received+0x18c>)
   1e1fc:	f015 f9d9 	bl	335b2 <printk>
   1e200:	f640 01cd 	movw	r1, #2253	; 0x8cd
   1e204:	4853      	ldr	r0, [pc, #332]	; (1e354 <tcp_synack_received+0x184>)
   1e206:	f015 fcd5 	bl	33bb4 <assert_post_action>
   1e20a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1e20c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc

	switch (net_tcp_get_state(context->tcp)) {
   1e210:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1e214:	2b02      	cmp	r3, #2
   1e216:	d17d      	bne.n	1e314 <tcp_synack_received+0x144>
	case NET_TCP_SYN_SENT:
		net_context_set_iface(context, net_pkt_iface(pkt));
   1e218:	6a31      	ldr	r1, [r6, #32]
   1e21a:	f104 007c 	add.w	r0, r4, #124	; 0x7c
   1e21e:	f7ff fbf7 	bl	1da10 <net_context_set_iface.isra.25>
		return NET_DROP;
	}

	net_pkt_set_context(pkt, context);

	NET_ASSERT(net_pkt_iface(pkt));
   1e222:	6a33      	ldr	r3, [r6, #32]
	pkt->context = ctx;
   1e224:	61f4      	str	r4, [r6, #28]
   1e226:	b973      	cbnz	r3, 1e246 <tcp_synack_received+0x76>
   1e228:	494d      	ldr	r1, [pc, #308]	; (1e360 <tcp_synack_received+0x190>)
   1e22a:	f640 03db 	movw	r3, #2267	; 0x8db
   1e22e:	4a49      	ldr	r2, [pc, #292]	; (1e354 <tcp_synack_received+0x184>)
   1e230:	4849      	ldr	r0, [pc, #292]	; (1e358 <tcp_synack_received+0x188>)
   1e232:	f015 f9be 	bl	335b2 <printk>
   1e236:	4849      	ldr	r0, [pc, #292]	; (1e35c <tcp_synack_received+0x18c>)
   1e238:	f015 f9bb 	bl	335b2 <printk>
   1e23c:	f640 01db 	movw	r1, #2267	; 0x8db
   1e240:	4844      	ldr	r0, [pc, #272]	; (1e354 <tcp_synack_received+0x184>)
   1e242:	f015 fcb7 	bl	33bb4 <assert_post_action>

	if (NET_TCP_FLAGS(tcp_hdr) & NET_TCP_RST) {
   1e246:	7b6f      	ldrb	r7, [r5, #13]
   1e248:	077a      	lsls	r2, r7, #29
   1e24a:	d513      	bpl.n	1e274 <tcp_synack_received+0xa4>
		/* We only accept RST packet that has valid seq field. */
		if (!net_tcp_validate_seq(context->tcp, tcp_hdr)) {
   1e24c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   1e24e:	4629      	mov	r1, r5
   1e250:	4630      	mov	r0, r6
   1e252:	f018 fdd8 	bl	36e06 <net_tcp_validate_seq>
   1e256:	2800      	cmp	r0, #0
   1e258:	d05c      	beq.n	1e314 <tcp_synack_received+0x144>
	z_impl_k_sem_give(sem);
   1e25a:	f106 00a0 	add.w	r0, r6, #160	; 0xa0
   1e25e:	f00f febb 	bl	2dfd8 <z_impl_k_sem_give>

		net_stats_update_tcp_seg_rst(net_pkt_iface(pkt));

		k_sem_give(&context->tcp->connect_wait);

		if (context->connect_cb) {
   1e262:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1e264:	2b00      	cmp	r3, #0
   1e266:	d055      	beq.n	1e314 <tcp_synack_received+0x144>
			context->connect_cb(context, -ECONNREFUSED,
   1e268:	f06f 016e 	mvn.w	r1, #110	; 0x6e
   1e26c:	6822      	ldr	r2, [r4, #0]
		send_ack(context, &remote_addr, false);

		k_sem_give(&context->tcp->connect_wait);

		if (context->connect_cb) {
			context->connect_cb(context, 0, context->user_data);
   1e26e:	4620      	mov	r0, r4
   1e270:	4798      	blx	r3
   1e272:	e04f      	b.n	1e314 <tcp_synack_received+0x144>
	if (NET_TCP_FLAGS(tcp_hdr) & NET_TCP_SYN) {
   1e274:	07bb      	lsls	r3, r7, #30
   1e276:	d506      	bpl.n	1e286 <tcp_synack_received+0xb6>
			sys_get_be32(tcp_hdr->seq) + 1;
   1e278:	1d28      	adds	r0, r5, #4
   1e27a:	f018 f9e2 	bl	36642 <sys_get_be32>
		context->tcp->send_ack =
   1e27e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
			sys_get_be32(tcp_hdr->seq) + 1;
   1e280:	3001      	adds	r0, #1
		context->tcp->send_ack =
   1e282:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	if (NET_TCP_FLAGS(tcp_hdr) == (NET_TCP_SYN | NET_TCP_ACK)) {
   1e286:	f007 073f 	and.w	r7, r7, #63	; 0x3f
   1e28a:	2f12      	cmp	r7, #18
   1e28c:	d142      	bne.n	1e314 <tcp_synack_received+0x144>
	return pkt->family;
   1e28e:	f896 303f 	ldrb.w	r3, [r6, #63]	; 0x3f
	if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
   1e292:	f3c3 0342 	ubfx	r3, r3, #1, #3
   1e296:	2b01      	cmp	r3, #1
   1e298:	d117      	bne.n	1e2ca <tcp_synack_received+0xfa>
			net_ipaddr_copy(&addr4->sin_addr, &ip_hdr->ipv4->src);
   1e29a:	f8d8 1000 	ldr.w	r1, [r8]
		port = tcp_hdr->src_port;
   1e29e:	882a      	ldrh	r2, [r5, #0]
			net_ipaddr_copy(&addr4->sin_addr, &ip_hdr->ipv4->src);
   1e2a0:	68c9      	ldr	r1, [r1, #12]
   1e2a2:	9109      	str	r1, [sp, #36]	; 0x24
		addr->sa_family = AF_INET;
   1e2a4:	f8ad 3020 	strh.w	r3, [sp, #32]
   1e2a8:	f896 303f 	ldrb.w	r3, [r6, #63]	; 0x3f
		addr4->sin_port = port;
   1e2ac:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
	if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
   1e2b0:	f3c3 0342 	ubfx	r3, r3, #1, #3
   1e2b4:	2b01      	cmp	r3, #1
   1e2b6:	d108      	bne.n	1e2ca <tcp_synack_received+0xfa>
			net_ipaddr_copy(&addr4->sin_addr, &ip_hdr->ipv4->dst);
   1e2b8:	f8d8 1000 	ldr.w	r1, [r8]
		port = tcp_hdr->dst_port;
   1e2bc:	886a      	ldrh	r2, [r5, #2]
			net_ipaddr_copy(&addr4->sin_addr, &ip_hdr->ipv4->dst);
   1e2be:	6909      	ldr	r1, [r1, #16]
   1e2c0:	9107      	str	r1, [sp, #28]
		addr4->sin_port = port;
   1e2c2:	f8ad 201a 	strh.w	r2, [sp, #26]
		addr->sa_family = AF_INET;
   1e2c6:	f8ad 3018 	strh.w	r3, [sp, #24]
	return net_conn_unregister(handle);
   1e2ca:	4627      	mov	r7, r4
   1e2cc:	f857 0f2c 	ldr.w	r0, [r7, #44]!
   1e2d0:	f7ff f9da 	bl	1d688 <net_conn_unregister>
				       ntohs(tcp_hdr->dst_port),
   1e2d4:	886b      	ldrh	r3, [r5, #2]
	return net_conn_register(IPPROTO_TCP, family, remote_addr, local_addr,
   1e2d6:	4a23      	ldr	r2, [pc, #140]	; (1e364 <tcp_synack_received+0x194>)
				       ntohs(tcp_hdr->src_port),
   1e2d8:	8828      	ldrh	r0, [r5, #0]
   1e2da:	f896 103f 	ldrb.w	r1, [r6, #63]	; 0x3f
   1e2de:	9202      	str	r2, [sp, #8]
				       ntohs(tcp_hdr->dst_port),
   1e2e0:	021a      	lsls	r2, r3, #8
   1e2e2:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
				       ntohs(tcp_hdr->src_port),
   1e2e6:	0203      	lsls	r3, r0, #8
   1e2e8:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
   1e2ec:	b292      	uxth	r2, r2
   1e2ee:	b29b      	uxth	r3, r3
   1e2f0:	9201      	str	r2, [sp, #4]
   1e2f2:	9300      	str	r3, [sp, #0]
   1e2f4:	e9cd 4703 	strd	r4, r7, [sp, #12]
   1e2f8:	ab06      	add	r3, sp, #24
   1e2fa:	aa08      	add	r2, sp, #32
   1e2fc:	f3c1 0142 	ubfx	r1, r1, #1, #3
   1e300:	2006      	movs	r0, #6
   1e302:	f7ff f8ff 	bl	1d504 <net_conn_register>
		if (ret < 0) {
   1e306:	2800      	cmp	r0, #0
   1e308:	da0b      	bge.n	1e322 <tcp_synack_received+0x152>
			send_reset(context, &local_addr, &remote_addr);
   1e30a:	aa08      	add	r2, sp, #32
   1e30c:	a906      	add	r1, sp, #24
   1e30e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1e310:	f018 fa54 	bl	367bc <send_reset.isra.29>
NET_CONN_CB(tcp_synack_received)
   1e314:	4620      	mov	r0, r4
   1e316:	f017 fb3d 	bl	35994 <net_context_unref>
   1e31a:	2002      	movs	r0, #2
   1e31c:	b00a      	add	sp, #40	; 0x28
   1e31e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_tcp_change_state(context->tcp, NET_TCP_ESTABLISHED);
   1e322:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1e324:	2104      	movs	r1, #4
   1e326:	f7ff fd17 	bl	1dd58 <net_tcp_change_state>
		net_context_set_state(context, NET_CONTEXT_CONNECTED);
   1e32a:	4620      	mov	r0, r4
   1e32c:	2102      	movs	r1, #2
   1e32e:	f7ff fb2b 	bl	1d988 <net_context_set_state>
		send_ack(context, &remote_addr, false);
   1e332:	2200      	movs	r2, #0
   1e334:	a908      	add	r1, sp, #32
   1e336:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1e338:	f018 fc15 	bl	36b66 <send_ack.isra.34>
		k_sem_give(&context->tcp->connect_wait);
   1e33c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1e33e:	30a0      	adds	r0, #160	; 0xa0
   1e340:	f00f fe4a 	bl	2dfd8 <z_impl_k_sem_give>
		if (context->connect_cb) {
   1e344:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1e346:	2b00      	cmp	r3, #0
   1e348:	d0e4      	beq.n	1e314 <tcp_synack_received+0x144>
			context->connect_cb(context, 0, context->user_data);
   1e34a:	6822      	ldr	r2, [r4, #0]
   1e34c:	2100      	movs	r1, #0
   1e34e:	e78e      	b.n	1e26e <tcp_synack_received+0x9e>
   1e350:	0003dc68 	.word	0x0003dc68
   1e354:	0003dc41 	.word	0x0003dc41
   1e358:	0003b773 	.word	0x0003b773
   1e35c:	0003cb7f 	.word	0x0003cb7f
   1e360:	0003dbba 	.word	0x0003dbba
   1e364:	0001dfa1 	.word	0x0001dfa1

0001e368 <tcp_syn_rcvd>:
 *			         struct net_pkt *pkt,
 *			         union net_ip_header *ip_hdr,
 *			         union net_proto_header *proto_hdr,
 *			         void *user_data)
 */
NET_CONN_CB(tcp_syn_rcvd)
   1e368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e36c:	461e      	mov	r6, r3
   1e36e:	b08f      	sub	sp, #60	; 0x3c
   1e370:	9c18      	ldr	r4, [sp, #96]	; 0x60
   1e372:	460d      	mov	r5, r1
   1e374:	4620      	mov	r0, r4
   1e376:	4690      	mov	r8, r2
   1e378:	f017 fb02 	bl	35980 <net_context_ref>
   1e37c:	6836      	ldr	r6, [r6, #0]
	struct net_tcp *tcp;
	struct sockaddr_ptr pkt_src_addr;
	struct sockaddr local_addr;
	struct sockaddr remote_addr;

	NET_ASSERT(context && context->tcp);
   1e37e:	b10c      	cbz	r4, 1e384 <tcp_syn_rcvd+0x1c>
   1e380:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1e382:	b973      	cbnz	r3, 1e3a2 <tcp_syn_rcvd+0x3a>
   1e384:	49b6      	ldr	r1, [pc, #728]	; (1e660 <tcp_syn_rcvd+0x2f8>)
   1e386:	f640 135a 	movw	r3, #2394	; 0x95a
   1e38a:	4ab6      	ldr	r2, [pc, #728]	; (1e664 <tcp_syn_rcvd+0x2fc>)
   1e38c:	48b6      	ldr	r0, [pc, #728]	; (1e668 <tcp_syn_rcvd+0x300>)
   1e38e:	f015 f910 	bl	335b2 <printk>
   1e392:	48b6      	ldr	r0, [pc, #728]	; (1e66c <tcp_syn_rcvd+0x304>)
   1e394:	f015 f90d 	bl	335b2 <printk>
   1e398:	f640 115a 	movw	r1, #2394	; 0x95a
   1e39c:	48b1      	ldr	r0, [pc, #708]	; (1e664 <tcp_syn_rcvd+0x2fc>)
   1e39e:	f015 fc09 	bl	33bb4 <assert_post_action>

	tcp = context->tcp;
   1e3a2:	f8d4 903c 	ldr.w	r9, [r4, #60]	; 0x3c
	return (enum net_tcp_state)tcp->state;
   1e3a6:	f8d9 30bc 	ldr.w	r3, [r9, #188]	; 0xbc
   1e3aa:	f3c3 3343 	ubfx	r3, r3, #13, #4

	switch (net_tcp_get_state(tcp)) {
   1e3ae:	2b01      	cmp	r3, #1
   1e3b0:	d004      	beq.n	1e3bc <tcp_syn_rcvd+0x54>
   1e3b2:	2b03      	cmp	r3, #3
   1e3b4:	f000 80c7 	beq.w	1e546 <tcp_syn_rcvd+0x1de>
	 */
	if (NET_TCP_FLAGS(tcp_hdr) & NET_TCP_RST) {

		if (tcp_backlog_rst(pkt, ip_hdr, tcp_hdr) < 0) {
			net_stats_update_tcp_seg_rsterr(net_pkt_iface(pkt));
			return NET_DROP;
   1e3b8:	2702      	movs	r7, #2
   1e3ba:	e0bd      	b.n	1e538 <tcp_syn_rcvd+0x1d0>
		net_context_set_iface(context, net_pkt_iface(pkt));
   1e3bc:	6a29      	ldr	r1, [r5, #32]
   1e3be:	f104 007c 	add.w	r0, r4, #124	; 0x7c
   1e3c2:	f7ff fb25 	bl	1da10 <net_context_set_iface.isra.25>
	NET_ASSERT(net_pkt_iface(pkt));
   1e3c6:	6a2b      	ldr	r3, [r5, #32]
	pkt->context = ctx;
   1e3c8:	61ec      	str	r4, [r5, #28]
   1e3ca:	b973      	cbnz	r3, 1e3ea <tcp_syn_rcvd+0x82>
   1e3cc:	49a8      	ldr	r1, [pc, #672]	; (1e670 <tcp_syn_rcvd+0x308>)
   1e3ce:	f640 136f 	movw	r3, #2415	; 0x96f
   1e3d2:	4aa4      	ldr	r2, [pc, #656]	; (1e664 <tcp_syn_rcvd+0x2fc>)
   1e3d4:	48a4      	ldr	r0, [pc, #656]	; (1e668 <tcp_syn_rcvd+0x300>)
   1e3d6:	f015 f8ec 	bl	335b2 <printk>
   1e3da:	48a4      	ldr	r0, [pc, #656]	; (1e66c <tcp_syn_rcvd+0x304>)
   1e3dc:	f015 f8e9 	bl	335b2 <printk>
   1e3e0:	f640 116f 	movw	r1, #2415	; 0x96f
   1e3e4:	489f      	ldr	r0, [pc, #636]	; (1e664 <tcp_syn_rcvd+0x2fc>)
   1e3e6:	f015 fbe5 	bl	33bb4 <assert_post_action>
	return pkt->family;
   1e3ea:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
	if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
   1e3ee:	f3c3 0342 	ubfx	r3, r3, #1, #3
   1e3f2:	2b01      	cmp	r3, #1
   1e3f4:	d117      	bne.n	1e426 <tcp_syn_rcvd+0xbe>
			net_ipaddr_copy(&addr4->sin_addr, &ip_hdr->ipv4->src);
   1e3f6:	f8d8 1000 	ldr.w	r1, [r8]
		port = tcp_hdr->src_port;
   1e3fa:	8832      	ldrh	r2, [r6, #0]
			net_ipaddr_copy(&addr4->sin_addr, &ip_hdr->ipv4->src);
   1e3fc:	68c9      	ldr	r1, [r1, #12]
   1e3fe:	910d      	str	r1, [sp, #52]	; 0x34
		addr->sa_family = AF_INET;
   1e400:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
   1e404:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
		addr4->sin_port = port;
   1e408:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
	if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
   1e40c:	f3c3 0342 	ubfx	r3, r3, #1, #3
   1e410:	2b01      	cmp	r3, #1
   1e412:	d108      	bne.n	1e426 <tcp_syn_rcvd+0xbe>
			net_ipaddr_copy(&addr4->sin_addr, &ip_hdr->ipv4->dst);
   1e414:	f8d8 1000 	ldr.w	r1, [r8]
		port = tcp_hdr->dst_port;
   1e418:	8872      	ldrh	r2, [r6, #2]
			net_ipaddr_copy(&addr4->sin_addr, &ip_hdr->ipv4->dst);
   1e41a:	6909      	ldr	r1, [r1, #16]
   1e41c:	910b      	str	r1, [sp, #44]	; 0x2c
		addr4->sin_port = port;
   1e41e:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
		addr->sa_family = AF_INET;
   1e422:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	if (NET_TCP_FLAGS(tcp_hdr) == NET_TCP_SYN) {
   1e426:	7b73      	ldrb	r3, [r6, #13]
   1e428:	f003 073f 	and.w	r7, r3, #63	; 0x3f
   1e42c:	2f02      	cmp	r7, #2
   1e42e:	f040 8092 	bne.w	1e556 <tcp_syn_rcvd+0x1ee>
		struct net_tcp_options tcp_opts = {
   1e432:	f44f 7306 	mov.w	r3, #536	; 0x218
		if (net_tcp_parse_opts(pkt, opt_totlen, &tcp_opts) < 0) {
   1e436:	f06f 0113 	mvn.w	r1, #19
		struct net_tcp_options tcp_opts = {
   1e43a:	f8ad 301c 	strh.w	r3, [sp, #28]
		opt_totlen = NET_TCP_HDR_LEN(tcp_hdr)
   1e43e:	7b33      	ldrb	r3, [r6, #12]
		if (net_tcp_parse_opts(pkt, opt_totlen, &tcp_opts) < 0) {
   1e440:	aa07      	add	r2, sp, #28
			     - sizeof(struct net_tcp_hdr);
   1e442:	091b      	lsrs	r3, r3, #4
		if (net_tcp_parse_opts(pkt, opt_totlen, &tcp_opts) < 0) {
   1e444:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   1e448:	4628      	mov	r0, r5
   1e44a:	f018 fd0f 	bl	36e6c <net_tcp_parse_opts>
   1e44e:	2800      	cmp	r0, #0
   1e450:	db72      	blt.n	1e538 <tcp_syn_rcvd+0x1d0>
		net_tcp_change_state(tcp, NET_TCP_SYN_RCVD);
   1e452:	2103      	movs	r1, #3
   1e454:	4648      	mov	r0, r9
   1e456:	f7ff fc7f 	bl	1dd58 <net_tcp_change_state>
		context->tcp->send_seq = tcp_init_isn();
   1e45a:	f8d4 903c 	ldr.w	r9, [r4, #60]	; 0x3c
	return sys_rand32_get();
   1e45e:	f000 fc51 	bl	1ed04 <sys_rand32_get>
   1e462:	f8c9 0090 	str.w	r0, [r9, #144]	; 0x90
			sys_get_be32(tcp_hdr->seq) + 1;
   1e466:	1d30      	adds	r0, r6, #4
   1e468:	f018 f8eb 	bl	36642 <sys_get_be32>
		context->tcp->send_ack =
   1e46c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
			sys_get_be32(tcp_hdr->seq) + 1;
   1e46e:	3001      	adds	r0, #1
		context->tcp->send_ack =
   1e470:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	int empty_slot = -1;
   1e474:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	if (tcp_backlog_find(pkt, ip_hdr, tcp_hdr, &empty_slot) >= 0) {
   1e478:	4632      	mov	r2, r6
	int empty_slot = -1;
   1e47a:	9308      	str	r3, [sp, #32]
	if (tcp_backlog_find(pkt, ip_hdr, tcp_hdr, &empty_slot) >= 0) {
   1e47c:	4641      	mov	r1, r8
   1e47e:	ab08      	add	r3, sp, #32
   1e480:	4628      	mov	r0, r5
		r = tcp_backlog_syn(pkt, ip_hdr, tcp_hdr,
   1e482:	f8bd 901c 	ldrh.w	r9, [sp, #28]
	if (tcp_backlog_find(pkt, ip_hdr, tcp_hdr, &empty_slot) >= 0) {
   1e486:	f7ff fae3 	bl	1da50 <tcp_backlog_find.isra.26>
   1e48a:	2800      	cmp	r0, #0
   1e48c:	da54      	bge.n	1e538 <tcp_syn_rcvd+0x1d0>
	if (empty_slot < 0) {
   1e48e:	9a08      	ldr	r2, [sp, #32]
   1e490:	2a00      	cmp	r2, #0
   1e492:	db51      	blt.n	1e538 <tcp_syn_rcvd+0x1d0>
	tcp_backlog[empty_slot].tcp = context->tcp;
   1e494:	2338      	movs	r3, #56	; 0x38
   1e496:	4353      	muls	r3, r2
   1e498:	4f76      	ldr	r7, [pc, #472]	; (1e674 <tcp_syn_rcvd+0x30c>)
   1e49a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   1e49c:	18f8      	adds	r0, r7, r3
   1e49e:	50fa      	str	r2, [r7, r3]
   1e4a0:	f895 203f 	ldrb.w	r2, [r5, #63]	; 0x3f
	if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
   1e4a4:	f3c2 0242 	ubfx	r2, r2, #1, #3
   1e4a8:	2a01      	cmp	r2, #1
   1e4aa:	d10a      	bne.n	1e4c2 <tcp_syn_rcvd+0x15a>
			net_ipaddr_copy(&addr4->sin_addr, &ip_hdr->ipv4->src);
   1e4ac:	f8d8 1000 	ldr.w	r1, [r8]
	tcp_copy_ip_addr_from_hdr(net_pkt_family(pkt), ip_hdr, tcp_hdr,
   1e4b0:	332c      	adds	r3, #44	; 0x2c
			net_ipaddr_copy(&addr4->sin_addr, &ip_hdr->ipv4->src);
   1e4b2:	68c9      	ldr	r1, [r1, #12]
	tcp_copy_ip_addr_from_hdr(net_pkt_family(pkt), ip_hdr, tcp_hdr,
   1e4b4:	443b      	add	r3, r7
		port = tcp_hdr->src_port;
   1e4b6:	f8b6 c000 	ldrh.w	ip, [r6]
			net_ipaddr_copy(&addr4->sin_addr, &ip_hdr->ipv4->src);
   1e4ba:	6059      	str	r1, [r3, #4]
		addr4->sin_port = port;
   1e4bc:	f8a3 c002 	strh.w	ip, [r3, #2]
		addr->sa_family = AF_INET;
   1e4c0:	8582      	strh	r2, [r0, #44]	; 0x2c
	tcp_backlog[empty_slot].send_seq = context->tcp->send_seq;
   1e4c2:	f04f 0a38 	mov.w	sl, #56	; 0x38
   1e4c6:	9808      	ldr	r0, [sp, #32]
   1e4c8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   1e4ca:	fb0a f000 	mul.w	r0, sl, r0
   1e4ce:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
   1e4d2:	183a      	adds	r2, r7, r0
   1e4d4:	6053      	str	r3, [r2, #4]
	tcp_backlog[empty_slot].send_ack = context->tcp->send_ack;
   1e4d6:	f8d1 3094 	ldr.w	r3, [r1, #148]	; 0x94
	k_delayed_work_init(&tcp_backlog[empty_slot].ack_timer,
   1e4da:	300c      	adds	r0, #12
	tcp_backlog[empty_slot].send_ack = context->tcp->send_ack;
   1e4dc:	6093      	str	r3, [r2, #8]
	tcp_backlog[empty_slot].send_mss = send_mss;
   1e4de:	f8a2 9034 	strh.w	r9, [r2, #52]	; 0x34
	k_delayed_work_init(&tcp_backlog[empty_slot].ack_timer,
   1e4e2:	4965      	ldr	r1, [pc, #404]	; (1e678 <tcp_syn_rcvd+0x310>)
   1e4e4:	4438      	add	r0, r7
   1e4e6:	f01a fc92 	bl	38e0e <k_delayed_work_init>
	k_delayed_work_submit(&tcp_backlog[empty_slot].ack_timer, ACK_TIMEOUT);
   1e4ea:	9808      	ldr	r0, [sp, #32]
   1e4ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1e4f0:	fb0a 7000 	mla	r0, sl, r0, r7
   1e4f4:	300c      	adds	r0, #12
   1e4f6:	f7ff f9ff 	bl	1d8f8 <k_delayed_work_submit>
		get_sockaddr_ptr(ip_hdr, tcp_hdr,
   1e4fa:	4620      	mov	r0, r4
   1e4fc:	f7ff fa04 	bl	1d908 <net_context_get_family>
	(void)memset(addr, 0, sizeof(*addr));
   1e500:	2300      	movs	r3, #0
	if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
   1e502:	2801      	cmp	r0, #1
	(void)memset(addr, 0, sizeof(*addr));
   1e504:	e9cd 3308 	strd	r3, r3, [sp, #32]
	if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
   1e508:	d10b      	bne.n	1e522 <tcp_syn_rcvd+0x1ba>
		addr4->sin_family = AF_INET;
   1e50a:	f8ad 0020 	strh.w	r0, [sp, #32]
		addr4->sin_port = tcp_hdr->dst_port;
   1e50e:	78b3      	ldrb	r3, [r6, #2]
   1e510:	78f2      	ldrb	r2, [r6, #3]
   1e512:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1e516:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		addr4->sin_addr = &ip_hdr->ipv4->dst;
   1e51a:	f8d8 3000 	ldr.w	r3, [r8]
   1e51e:	3310      	adds	r3, #16
   1e520:	9309      	str	r3, [sp, #36]	; 0x24
	return send_syn_segment(context, local, remote,
   1e522:	2312      	movs	r3, #18
   1e524:	aa0c      	add	r2, sp, #48	; 0x30
   1e526:	a908      	add	r1, sp, #32
   1e528:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   1e52c:	f018 fb35 	bl	36b9a <send_syn_segment.isra.35>
		net_pkt_unref(pkt);
   1e530:	4628      	mov	r0, r5
   1e532:	f017 fbc6 	bl	35cc2 <net_pkt_unref>
		return NET_OK;
   1e536:	2700      	movs	r7, #0
NET_CONN_CB(tcp_syn_rcvd)
   1e538:	4620      	mov	r0, r4
   1e53a:	f017 fa2b 	bl	35994 <net_context_unref>
   1e53e:	4638      	mov	r0, r7
   1e540:	b00f      	add	sp, #60	; 0x3c
   1e542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (net_pkt_iface(pkt) != net_context_get_iface(context)) {
   1e546:	4620      	mov	r0, r4
   1e548:	6a2f      	ldr	r7, [r5, #32]
   1e54a:	f7ff fa41 	bl	1d9d0 <net_context_get_iface>
   1e54e:	4287      	cmp	r7, r0
   1e550:	f43f af39 	beq.w	1e3c6 <tcp_syn_rcvd+0x5e>
   1e554:	e730      	b.n	1e3b8 <tcp_syn_rcvd+0x50>
	if (NET_TCP_FLAGS(tcp_hdr) & NET_TCP_RST) {
   1e556:	f013 0704 	ands.w	r7, r3, #4
   1e55a:	d01f      	beq.n	1e59c <tcp_syn_rcvd+0x234>
	r = tcp_backlog_find(pkt, ip_hdr, tcp_hdr, NULL);
   1e55c:	4628      	mov	r0, r5
   1e55e:	2300      	movs	r3, #0
   1e560:	4632      	mov	r2, r6
   1e562:	4641      	mov	r1, r8
   1e564:	f7ff fa74 	bl	1da50 <tcp_backlog_find.isra.26>
	if (r < 0) {
   1e568:	1e05      	subs	r5, r0, #0
   1e56a:	f6ff af25 	blt.w	1e3b8 <tcp_syn_rcvd+0x50>
	if (tcp_backlog[r].send_ack != sys_get_be32(tcp_hdr->seq)) {
   1e56e:	1d30      	adds	r0, r6, #4
   1e570:	2638      	movs	r6, #56	; 0x38
   1e572:	f018 f866 	bl	36642 <sys_get_be32>
   1e576:	fb06 f305 	mul.w	r3, r6, r5
   1e57a:	4a3e      	ldr	r2, [pc, #248]	; (1e674 <tcp_syn_rcvd+0x30c>)
   1e57c:	18d5      	adds	r5, r2, r3
   1e57e:	68a9      	ldr	r1, [r5, #8]
   1e580:	4281      	cmp	r1, r0
   1e582:	f47f af19 	bne.w	1e3b8 <tcp_syn_rcvd+0x50>
	k_delayed_work_cancel(&tcp_backlog[r].ack_timer);
   1e586:	f103 000c 	add.w	r0, r3, #12
   1e58a:	4410      	add	r0, r2
   1e58c:	f010 f87a 	bl	2e684 <k_delayed_work_cancel>
   1e590:	4632      	mov	r2, r6
   1e592:	2100      	movs	r1, #0
   1e594:	4628      	mov	r0, r5
   1e596:	f01a fd4e 	bl	39036 <memset>
   1e59a:	e70d      	b.n	1e3b8 <tcp_syn_rcvd+0x50>
	}

	/*
	 * If we receive ACK, we go to ESTABLISHED state.
	 */
	if (NET_TCP_FLAGS(tcp_hdr) & NET_TCP_ACK) {
   1e59c:	06db      	lsls	r3, r3, #27
   1e59e:	f57f af0b 	bpl.w	1e3b8 <tcp_syn_rcvd+0x50>
		socklen_t addrlen;
		int ret;

		net_tcp_print_recv_info("ACK", pkt, tcp_hdr->src_port);

		if (!context->tcp->accept_cb) {
   1e5a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1e5a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   1e5a8:	b93b      	cbnz	r3, 1e5ba <tcp_syn_rcvd+0x252>

conndrop:
	net_stats_update_tcp_seg_conndrop(net_pkt_iface(pkt));

reset:
	send_reset(tcp->context, &local_addr, &remote_addr);
   1e5aa:	f8d9 3000 	ldr.w	r3, [r9]
   1e5ae:	aa0c      	add	r2, sp, #48	; 0x30
   1e5b0:	a90a      	add	r1, sp, #40	; 0x28
   1e5b2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
   1e5b4:	f018 f902 	bl	367bc <send_reset.isra.29>

	return NET_DROP;
   1e5b8:	e6fe      	b.n	1e3b8 <tcp_syn_rcvd+0x50>
   1e5ba:	f895 003f 	ldrb.w	r0, [r5, #63]	; 0x3f
		ret = net_context_get(net_pkt_family(pkt),
   1e5be:	ab08      	add	r3, sp, #32
   1e5c0:	2206      	movs	r2, #6
   1e5c2:	2101      	movs	r1, #1
   1e5c4:	f3c0 0042 	ubfx	r0, r0, #1, #3
   1e5c8:	f7fe f94a 	bl	1c860 <net_context_get>
		if (ret < 0) {
   1e5cc:	2800      	cmp	r0, #0
   1e5ce:	dbec      	blt.n	1e5aa <tcp_syn_rcvd+0x242>
	r = tcp_backlog_find(pkt, ip_hdr, tcp_hdr, NULL);
   1e5d0:	4641      	mov	r1, r8
   1e5d2:	463b      	mov	r3, r7
   1e5d4:	4632      	mov	r2, r6
   1e5d6:	4628      	mov	r0, r5
		ret = tcp_backlog_ack(pkt, ip_hdr, tcp_hdr, new_context);
   1e5d8:	f8dd a020 	ldr.w	sl, [sp, #32]
	r = tcp_backlog_find(pkt, ip_hdr, tcp_hdr, NULL);
   1e5dc:	f7ff fa38 	bl	1da50 <tcp_backlog_find.isra.26>
	if (r < 0) {
   1e5e0:	f1b0 0800 	subs.w	r8, r0, #0
   1e5e4:	db37      	blt.n	1e656 <tcp_syn_rcvd+0x2ee>
	if (tcp_backlog[r].send_seq + 1 != sys_get_be32(tcp_hdr->ack)) {
   1e5e6:	f04f 0b38 	mov.w	fp, #56	; 0x38
   1e5ea:	f106 0008 	add.w	r0, r6, #8
   1e5ee:	f018 f828 	bl	36642 <sys_get_be32>
   1e5f2:	fb0b f308 	mul.w	r3, fp, r8
   1e5f6:	4a1f      	ldr	r2, [pc, #124]	; (1e674 <tcp_syn_rcvd+0x30c>)
   1e5f8:	eb02 0803 	add.w	r8, r2, r3
   1e5fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1e600:	3101      	adds	r1, #1
   1e602:	4281      	cmp	r1, r0
   1e604:	d127      	bne.n	1e656 <tcp_syn_rcvd+0x2ee>
	memcpy(&context->remote, &tcp_backlog[r].remote,
   1e606:	f103 062c 	add.w	r6, r3, #44	; 0x2c
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1e60a:	4416      	add	r6, r2
   1e60c:	ce03      	ldmia	r6!, {r0, r1}
   1e60e:	f8ca 1028 	str.w	r1, [sl, #40]	; 0x28
   1e612:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
	context->tcp->send_seq = tcp_backlog[r].send_seq + 1;
   1e616:	f8d8 0004 	ldr.w	r0, [r8, #4]
   1e61a:	f8da 103c 	ldr.w	r1, [sl, #60]	; 0x3c
   1e61e:	3001      	adds	r0, #1
   1e620:	f8c1 0090 	str.w	r0, [r1, #144]	; 0x90
	context->tcp->send_ack = tcp_backlog[r].send_ack;
   1e624:	f8d8 0008 	ldr.w	r0, [r8, #8]
   1e628:	f8c1 0094 	str.w	r0, [r1, #148]	; 0x94
	context->tcp->send_mss = tcp_backlog[r].send_mss;
   1e62c:	f8b8 0034 	ldrh.w	r0, [r8, #52]	; 0x34
   1e630:	f8a1 00ba 	strh.w	r0, [r1, #186]	; 0xba
	k_delayed_work_cancel(&tcp_backlog[r].ack_timer);
   1e634:	f103 000c 	add.w	r0, r3, #12
   1e638:	4410      	add	r0, r2
   1e63a:	f010 f823 	bl	2e684 <k_delayed_work_cancel>
__ssp_bos_icheck3(memset, void *, int)
   1e63e:	465a      	mov	r2, fp
   1e640:	4639      	mov	r1, r7
   1e642:	4640      	mov	r0, r8
   1e644:	f01a fcf7 	bl	39036 <memset>
		ret = net_context_bind(new_context, &local_addr,
   1e648:	2208      	movs	r2, #8
   1e64a:	a90a      	add	r1, sp, #40	; 0x28
   1e64c:	9808      	ldr	r0, [sp, #32]
   1e64e:	f7fe fa01 	bl	1ca54 <net_context_bind>
		if (ret < 0) {
   1e652:	2800      	cmp	r0, #0
   1e654:	da12      	bge.n	1e67c <tcp_syn_rcvd+0x314>
			net_context_unref(new_context);
   1e656:	9808      	ldr	r0, [sp, #32]
   1e658:	f017 f99c 	bl	35994 <net_context_unref>
			goto conndrop;
   1e65c:	e7a5      	b.n	1e5aa <tcp_syn_rcvd+0x242>
   1e65e:	bf00      	nop
   1e660:	0003dc68 	.word	0x0003dc68
   1e664:	0003dc41 	.word	0x0003dc41
   1e668:	0003b773 	.word	0x0003b773
   1e66c:	0003cb7f 	.word	0x0003cb7f
   1e670:	0003dbba 	.word	0x0003dbba
   1e674:	20021d60 	.word	0x20021d60
   1e678:	000367f3 	.word	0x000367f3
		new_context->flags |= NET_CONTEXT_REMOTE_ADDR_SET;
   1e67c:	9b08      	ldr	r3, [sp, #32]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1e67e:	ae0c      	add	r6, sp, #48	; 0x30
   1e680:	f8b3 207a 	ldrh.w	r2, [r3, #122]	; 0x7a
   1e684:	ce03      	ldmia	r6!, {r0, r1}
   1e686:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   1e68a:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
		memcpy(&new_context->remote, &remote_addr,
   1e68e:	f103 0224 	add.w	r2, r3, #36	; 0x24
   1e692:	6258      	str	r0, [r3, #36]	; 0x24
   1e694:	6051      	str	r1, [r2, #4]
		ret = net_tcp_register(net_pkt_family(pkt),
   1e696:	f103 002c 	add.w	r0, r3, #44	; 0x2c
			       ntohs(net_sin(&new_context->remote)->sin_port),
   1e69a:	8cde      	ldrh	r6, [r3, #38]	; 0x26
   1e69c:	f895 103f 	ldrb.w	r1, [r5, #63]	; 0x3f
			       ntohs(net_sin(&local_addr)->sin_port),
   1e6a0:	f8bd c02a 	ldrh.w	ip, [sp, #42]	; 0x2a
	return net_conn_register(IPPROTO_TCP, family, remote_addr, local_addr,
   1e6a4:	e9cd 3003 	strd	r3, r0, [sp, #12]
   1e6a8:	4b31      	ldr	r3, [pc, #196]	; (1e770 <tcp_syn_rcvd+0x408>)
   1e6aa:	ea4f 200c 	mov.w	r0, ip, lsl #8
   1e6ae:	9302      	str	r3, [sp, #8]
			       ntohs(net_sin(&new_context->remote)->sin_port),
   1e6b0:	0233      	lsls	r3, r6, #8
			       ntohs(net_sin(&local_addr)->sin_port),
   1e6b2:	ea40 201c 	orr.w	r0, r0, ip, lsr #8
			       ntohs(net_sin(&new_context->remote)->sin_port),
   1e6b6:	ea43 2316 	orr.w	r3, r3, r6, lsr #8
   1e6ba:	b280      	uxth	r0, r0
   1e6bc:	b29b      	uxth	r3, r3
   1e6be:	9001      	str	r0, [sp, #4]
   1e6c0:	9300      	str	r3, [sp, #0]
   1e6c2:	f3c1 0142 	ubfx	r1, r1, #1, #3
   1e6c6:	ab0a      	add	r3, sp, #40	; 0x28
   1e6c8:	2006      	movs	r0, #6
   1e6ca:	f7fe ff1b 	bl	1d504 <net_conn_register>
		if (ret < 0) {
   1e6ce:	2800      	cmp	r0, #0
   1e6d0:	dbc1      	blt.n	1e656 <tcp_syn_rcvd+0x2ee>
		net_tcp_change_state(tcp, NET_TCP_LISTEN);
   1e6d2:	2101      	movs	r1, #1
   1e6d4:	4648      	mov	r0, r9
   1e6d6:	f7ff fb3f 	bl	1dd58 <net_tcp_change_state>
		net_tcp_change_state(new_context->tcp, NET_TCP_ESTABLISHED);
   1e6da:	9b08      	ldr	r3, [sp, #32]
   1e6dc:	2104      	movs	r1, #4
   1e6de:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
   1e6e0:	f7ff fb3a 	bl	1dd58 <net_tcp_change_state>
		net_context_set_accepting(new_context, true);
   1e6e4:	9e08      	ldr	r6, [sp, #32]
	NET_ASSERT(context);
   1e6e6:	b976      	cbnz	r6, 1e706 <tcp_syn_rcvd+0x39e>
   1e6e8:	4922      	ldr	r1, [pc, #136]	; (1e774 <tcp_syn_rcvd+0x40c>)
   1e6ea:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   1e6ee:	4a22      	ldr	r2, [pc, #136]	; (1e778 <tcp_syn_rcvd+0x410>)
   1e6f0:	4822      	ldr	r0, [pc, #136]	; (1e77c <tcp_syn_rcvd+0x414>)
   1e6f2:	f014 ff5e 	bl	335b2 <printk>
   1e6f6:	4822      	ldr	r0, [pc, #136]	; (1e780 <tcp_syn_rcvd+0x418>)
   1e6f8:	f014 ff5b 	bl	335b2 <printk>
   1e6fc:	f44f 71b7 	mov.w	r1, #366	; 0x16e
   1e700:	481d      	ldr	r0, [pc, #116]	; (1e778 <tcp_syn_rcvd+0x410>)
   1e702:	f015 fa57 	bl	33bb4 <assert_post_action>
		context->flags |= NET_CONTEXT_ACCEPTING_SOCK;
   1e706:	f8b6 307a 	ldrh.w	r3, [r6, #122]	; 0x7a
		net_context_set_state(new_context, NET_CONTEXT_CONNECTED);
   1e70a:	9808      	ldr	r0, [sp, #32]
   1e70c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1e710:	f8a6 307a 	strh.w	r3, [r6, #122]	; 0x7a
   1e714:	2102      	movs	r1, #2
   1e716:	f7ff f937 	bl	1d988 <net_context_set_state>
		if (new_context->remote.sa_family == AF_INET) {
   1e71a:	9808      	ldr	r0, [sp, #32]
   1e71c:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   1e71e:	2b01      	cmp	r3, #1
   1e720:	d016      	beq.n	1e750 <tcp_syn_rcvd+0x3e8>
		} else if (new_context->remote.sa_family == AF_INET6) {
   1e722:	2b02      	cmp	r3, #2
   1e724:	d022      	beq.n	1e76c <tcp_syn_rcvd+0x404>
			NET_ASSERT(false, "Invalid protocol family %d",
   1e726:	4a17      	ldr	r2, [pc, #92]	; (1e784 <tcp_syn_rcvd+0x41c>)
   1e728:	f640 2312 	movw	r3, #2578	; 0xa12
   1e72c:	4916      	ldr	r1, [pc, #88]	; (1e788 <tcp_syn_rcvd+0x420>)
   1e72e:	4813      	ldr	r0, [pc, #76]	; (1e77c <tcp_syn_rcvd+0x414>)
   1e730:	f014 ff3f 	bl	335b2 <printk>
   1e734:	9b08      	ldr	r3, [sp, #32]
   1e736:	4815      	ldr	r0, [pc, #84]	; (1e78c <tcp_syn_rcvd+0x424>)
   1e738:	8c99      	ldrh	r1, [r3, #36]	; 0x24
   1e73a:	f014 ff3a 	bl	335b2 <printk>
   1e73e:	f640 2112 	movw	r1, #2578	; 0xa12
   1e742:	4810      	ldr	r0, [pc, #64]	; (1e784 <tcp_syn_rcvd+0x41c>)
   1e744:	f015 fa36 	bl	33bb4 <assert_post_action>
			net_context_unref(new_context);
   1e748:	9808      	ldr	r0, [sp, #32]
   1e74a:	f017 f923 	bl	35994 <net_context_unref>
			return NET_DROP;
   1e74e:	e633      	b.n	1e3b8 <tcp_syn_rcvd+0x50>
			addrlen = sizeof(struct sockaddr_in);
   1e750:	2208      	movs	r2, #8
		context->tcp->accept_cb(new_context,
   1e752:	6821      	ldr	r1, [r4, #0]
   1e754:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1e756:	9100      	str	r1, [sp, #0]
   1e758:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
   1e75c:	f100 0124 	add.w	r1, r0, #36	; 0x24
   1e760:	2300      	movs	r3, #0
   1e762:	47b0      	blx	r6
		net_pkt_unref(pkt);
   1e764:	4628      	mov	r0, r5
   1e766:	f017 faac 	bl	35cc2 <net_pkt_unref>
		return NET_OK;
   1e76a:	e6e5      	b.n	1e538 <tcp_syn_rcvd+0x1d0>
			addrlen = sizeof(struct sockaddr_in6);
   1e76c:	2218      	movs	r2, #24
   1e76e:	e7f0      	b.n	1e752 <tcp_syn_rcvd+0x3ea>
   1e770:	0001dfa1 	.word	0x0001dfa1
   1e774:	0003cb77 	.word	0x0003cb77
   1e778:	0003cb4a 	.word	0x0003cb4a
   1e77c:	0003b773 	.word	0x0003b773
   1e780:	0003cb7f 	.word	0x0003cb7f
   1e784:	0003dc41 	.word	0x0003dc41
   1e788:	0003fd2f 	.word	0x0003fd2f
   1e78c:	0003dc80 	.word	0x0003dc80

0001e790 <net_tcp_recv>:
{
   1e790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NET_ASSERT(context->tcp);
   1e792:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
   1e794:	4605      	mov	r5, r0
   1e796:	460f      	mov	r7, r1
   1e798:	4616      	mov	r6, r2
	NET_ASSERT(context->tcp);
   1e79a:	b973      	cbnz	r3, 1e7ba <net_tcp_recv+0x2a>
   1e79c:	4913      	ldr	r1, [pc, #76]	; (1e7ec <net_tcp_recv+0x5c>)
   1e79e:	f240 53be 	movw	r3, #1470	; 0x5be
   1e7a2:	4a13      	ldr	r2, [pc, #76]	; (1e7f0 <net_tcp_recv+0x60>)
   1e7a4:	4813      	ldr	r0, [pc, #76]	; (1e7f4 <net_tcp_recv+0x64>)
   1e7a6:	f014 ff04 	bl	335b2 <printk>
   1e7aa:	4813      	ldr	r0, [pc, #76]	; (1e7f8 <net_tcp_recv+0x68>)
   1e7ac:	f014 ff01 	bl	335b2 <printk>
   1e7b0:	f240 51be 	movw	r1, #1470	; 0x5be
   1e7b4:	480e      	ldr	r0, [pc, #56]	; (1e7f0 <net_tcp_recv+0x60>)
   1e7b6:	f015 f9fd 	bl	33bb4 <assert_post_action>
	if (context->tcp->flags & NET_TCP_IS_SHUTDOWN) {
   1e7ba:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   1e7bc:	f8b3 00bc 	ldrh.w	r0, [r3, #188]	; 0xbc
   1e7c0:	f3c0 1047 	ubfx	r0, r0, #5, #8
   1e7c4:	f010 0408 	ands.w	r4, r0, #8
   1e7c8:	d109      	bne.n	1e7de <net_tcp_recv+0x4e>
	} else if (net_context_get_state(context) != NET_CONTEXT_CONNECTED) {
   1e7ca:	4628      	mov	r0, r5
   1e7cc:	f7ff f8bc 	bl	1d948 <net_context_get_state>
   1e7d0:	2802      	cmp	r0, #2
   1e7d2:	d107      	bne.n	1e7e4 <net_tcp_recv+0x54>
	return 0;
   1e7d4:	4620      	mov	r0, r4
	context->tcp->recv_user_data = user_data;
   1e7d6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
	context->recv_cb = cb;
   1e7d8:	632f      	str	r7, [r5, #48]	; 0x30
	context->tcp->recv_user_data = user_data;
   1e7da:	605e      	str	r6, [r3, #4]
}
   1e7dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ESHUTDOWN;
   1e7de:	f06f 006d 	mvn.w	r0, #109	; 0x6d
   1e7e2:	e7fb      	b.n	1e7dc <net_tcp_recv+0x4c>
		return -ENOTCONN;
   1e7e4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1e7e8:	e7f8      	b.n	1e7dc <net_tcp_recv+0x4c>
   1e7ea:	bf00      	nop
   1e7ec:	0003dc73 	.word	0x0003dc73
   1e7f0:	0003dc41 	.word	0x0003dc41
   1e7f4:	0003b773 	.word	0x0003b773
   1e7f8:	0003cb7f 	.word	0x0003cb7f

0001e7fc <net_tcp_get>:
{
   1e7fc:	b510      	push	{r4, lr}
   1e7fe:	4604      	mov	r4, r0
	context->tcp = net_tcp_alloc(context);
   1e800:	f7ff fa4c 	bl	1dc9c <net_tcp_alloc>
   1e804:	63e0      	str	r0, [r4, #60]	; 0x3c
	if (!context->tcp) {
   1e806:	b988      	cbnz	r0, 1e82c <net_tcp_get+0x30>
		NET_ASSERT(context->tcp, "Cannot allocate TCP context");
   1e808:	f240 731b 	movw	r3, #1819	; 0x71b
   1e80c:	4a0f      	ldr	r2, [pc, #60]	; (1e84c <net_tcp_get+0x50>)
   1e80e:	4910      	ldr	r1, [pc, #64]	; (1e850 <net_tcp_get+0x54>)
   1e810:	4810      	ldr	r0, [pc, #64]	; (1e854 <net_tcp_get+0x58>)
   1e812:	f014 fece 	bl	335b2 <printk>
   1e816:	4810      	ldr	r0, [pc, #64]	; (1e858 <net_tcp_get+0x5c>)
   1e818:	f014 fecb 	bl	335b2 <printk>
   1e81c:	480b      	ldr	r0, [pc, #44]	; (1e84c <net_tcp_get+0x50>)
   1e81e:	f240 711b 	movw	r1, #1819	; 0x71b
   1e822:	f015 f9c7 	bl	33bb4 <assert_post_action>
		return -ENOBUFS;
   1e826:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   1e82a:	bd10      	pop	{r4, pc}
	k_delayed_work_init(&context->tcp->ack_timer, handle_ack_timeout);
   1e82c:	490b      	ldr	r1, [pc, #44]	; (1e85c <net_tcp_get+0x60>)
   1e82e:	3008      	adds	r0, #8
   1e830:	f01a faed 	bl	38e0e <k_delayed_work_init>
	k_delayed_work_init(&context->tcp->fin_timer, handle_fin_timeout);
   1e834:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1e836:	490a      	ldr	r1, [pc, #40]	; (1e860 <net_tcp_get+0x64>)
   1e838:	3028      	adds	r0, #40	; 0x28
   1e83a:	f01a fae8 	bl	38e0e <k_delayed_work_init>
	k_delayed_work_init(&context->tcp->timewait_timer,
   1e83e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1e840:	4908      	ldr	r1, [pc, #32]	; (1e864 <net_tcp_get+0x68>)
   1e842:	3068      	adds	r0, #104	; 0x68
   1e844:	f01a fae3 	bl	38e0e <k_delayed_work_init>
	return 0;
   1e848:	2000      	movs	r0, #0
   1e84a:	e7ee      	b.n	1e82a <net_tcp_get+0x2e>
   1e84c:	0003dc41 	.word	0x0003dc41
   1e850:	0003dc73 	.word	0x0003dc73
   1e854:	0003b773 	.word	0x0003b773
   1e858:	0003dc23 	.word	0x0003dc23
   1e85c:	00036dc5 	.word	0x00036dc5
   1e860:	00036659 	.word	0x00036659
   1e864:	00036d85 	.word	0x00036d85

0001e868 <net_tcp_unref>:
{
   1e868:	b538      	push	{r3, r4, r5, lr}
	if (!context->tcp)
   1e86a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
   1e86c:	4604      	mov	r4, r0
	if (!context->tcp)
   1e86e:	b18b      	cbz	r3, 1e894 <net_tcp_unref+0x2c>
		if (tcp_backlog[i].tcp != context->tcp) {
   1e870:	4d09      	ldr	r5, [pc, #36]	; (1e898 <net_tcp_unref+0x30>)
   1e872:	682a      	ldr	r2, [r5, #0]
   1e874:	4293      	cmp	r3, r2
   1e876:	d108      	bne.n	1e88a <net_tcp_unref+0x22>
		k_delayed_work_cancel(&tcp_backlog[i].ack_timer);
   1e878:	f105 000c 	add.w	r0, r5, #12
   1e87c:	f00f ff02 	bl	2e684 <k_delayed_work_cancel>
		(void)memset(&tcp_backlog[i], 0, sizeof(tcp_backlog[i]));
   1e880:	2238      	movs	r2, #56	; 0x38
   1e882:	2100      	movs	r1, #0
   1e884:	4628      	mov	r0, r5
   1e886:	f01a fbd6 	bl	39036 <memset>
	net_tcp_release(context->tcp);
   1e88a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1e88c:	f7ff fab8 	bl	1de00 <net_tcp_release>
	context->tcp = NULL;
   1e890:	2300      	movs	r3, #0
   1e892:	63e3      	str	r3, [r4, #60]	; 0x3c
}
   1e894:	2000      	movs	r0, #0
   1e896:	bd38      	pop	{r3, r4, r5, pc}
   1e898:	20021d60 	.word	0x20021d60

0001e89c <net_tcp_accept>:
}

int net_tcp_accept(struct net_context *context,
		   net_tcp_accept_cb_t cb,
		   void *user_data)
{
   1e89c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct sockaddr local_addr;
	struct sockaddr *laddr = NULL;
	u16_t lport = 0U;
	int ret;

	NET_ASSERT(context->tcp);
   1e8a0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
   1e8a2:	b088      	sub	sp, #32
   1e8a4:	4604      	mov	r4, r0
   1e8a6:	460e      	mov	r6, r1
   1e8a8:	4617      	mov	r7, r2
	NET_ASSERT(context->tcp);
   1e8aa:	b973      	cbnz	r3, 1e8ca <net_tcp_accept+0x2e>
   1e8ac:	4933      	ldr	r1, [pc, #204]	; (1e97c <net_tcp_accept+0xe0>)
   1e8ae:	f640 2334 	movw	r3, #2612	; 0xa34
   1e8b2:	4a33      	ldr	r2, [pc, #204]	; (1e980 <net_tcp_accept+0xe4>)
   1e8b4:	4833      	ldr	r0, [pc, #204]	; (1e984 <net_tcp_accept+0xe8>)
   1e8b6:	f014 fe7c 	bl	335b2 <printk>
   1e8ba:	4833      	ldr	r0, [pc, #204]	; (1e988 <net_tcp_accept+0xec>)
   1e8bc:	f014 fe79 	bl	335b2 <printk>
   1e8c0:	f640 2134 	movw	r1, #2612	; 0xa34
   1e8c4:	482e      	ldr	r0, [pc, #184]	; (1e980 <net_tcp_accept+0xe4>)
   1e8c6:	f015 f975 	bl	33bb4 <assert_post_action>

	if (net_tcp_get_state(context->tcp) != NET_TCP_LISTEN) {
   1e8ca:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	return (enum net_tcp_state)tcp->state;
   1e8cc:	f8d2 30bc 	ldr.w	r3, [r2, #188]	; 0xbc
   1e8d0:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1e8d4:	2b01      	cmp	r3, #1
   1e8d6:	d14b      	bne.n	1e970 <net_tcp_accept+0xd4>
		NET_DBG("Context %p in wrong state %d, should be %d",
			context, context->tcp->state, NET_TCP_LISTEN);
		return -EINVAL;
	}

	if (cb == NULL) {
   1e8d8:	b93e      	cbnz	r6, 1e8ea <net_tcp_accept+0x4e>
		/* The context is being shut down */
		if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1e8da:	f8b4 3078 	ldrh.w	r3, [r4, #120]	; 0x78
   1e8de:	2b06      	cmp	r3, #6
   1e8e0:	d103      	bne.n	1e8ea <net_tcp_accept+0x4e>
			context->tcp->accept_cb = NULL;
   1e8e2:	f8c2 609c 	str.w	r6, [r2, #156]	; 0x9c
	/* accept callback is only valid for TCP contexts */
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
		context->tcp->accept_cb = cb;
	}

	return 0;
   1e8e6:	2000      	movs	r0, #0
   1e8e8:	e044      	b.n	1e974 <net_tcp_accept+0xd8>
	local_addr.sa_family = net_context_get_family(context);
   1e8ea:	4620      	mov	r0, r4
   1e8ec:	f7ff f80c 	bl	1d908 <net_context_get_family>
   1e8f0:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (net_context_get_family(context) == AF_INET) {
   1e8f4:	4620      	mov	r0, r4
   1e8f6:	f7ff f807 	bl	1d908 <net_context_get_family>
   1e8fa:	2801      	cmp	r0, #1
   1e8fc:	d135      	bne.n	1e96a <net_tcp_accept+0xce>
		if (net_sin_ptr(&context->local)->sin_addr) {
   1e8fe:	f8d4 8020 	ldr.w	r8, [r4, #32]
   1e902:	f1b8 0f00 	cmp.w	r8, #0
   1e906:	d004      	beq.n	1e912 <net_tcp_accept+0x76>
			net_ipaddr_copy(&net_sin(&local_addr)->sin_addr,
   1e908:	f8d8 3000 	ldr.w	r3, [r8]
   1e90c:	9307      	str	r3, [sp, #28]
			laddr = &local_addr;
   1e90e:	f10d 0818 	add.w	r8, sp, #24
		net_sin(&local_addr)->sin_port = lport =
   1e912:	8be5      	ldrh	r5, [r4, #30]
   1e914:	f8ad 501a 	strh.w	r5, [sp, #26]
	ret = net_tcp_register(net_context_get_family(context),
   1e918:	4620      	mov	r0, r4
   1e91a:	f7fe fff5 	bl	1d908 <net_context_get_family>
   1e91e:	f104 032c 	add.w	r3, r4, #44	; 0x2c
   1e922:	b2c1      	uxtb	r1, r0
	return net_conn_register(IPPROTO_TCP, family, remote_addr, local_addr,
   1e924:	e9cd 4303 	strd	r4, r3, [sp, #12]
			       ntohs(net_sin(&context->remote)->sin_port),
   1e928:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
   1e92a:	4b18      	ldr	r3, [pc, #96]	; (1e98c <net_tcp_accept+0xf0>)
	ret = net_tcp_register(net_context_get_family(context),
   1e92c:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
   1e930:	9302      	str	r3, [sp, #8]
			       ntohs(net_sin(&context->remote)->sin_port),
   1e932:	0203      	lsls	r3, r0, #8
   1e934:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
   1e938:	ba6d      	rev16	r5, r5
	ret = net_tcp_register(net_context_get_family(context),
   1e93a:	f412 7280 	ands.w	r2, r2, #256	; 0x100
   1e93e:	b29b      	uxth	r3, r3
   1e940:	b2ad      	uxth	r5, r5
   1e942:	bf18      	it	ne
   1e944:	f104 0224 	addne.w	r2, r4, #36	; 0x24
   1e948:	9300      	str	r3, [sp, #0]
   1e94a:	9501      	str	r5, [sp, #4]
   1e94c:	4643      	mov	r3, r8
   1e94e:	2006      	movs	r0, #6
   1e950:	f7fe fdd8 	bl	1d504 <net_conn_register>
	if (ret < 0) {
   1e954:	2800      	cmp	r0, #0
   1e956:	db0d      	blt.n	1e974 <net_tcp_accept+0xd8>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1e958:	f8b4 3078 	ldrh.w	r3, [r4, #120]	; 0x78
	context->user_data = user_data;
   1e95c:	6027      	str	r7, [r4, #0]
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1e95e:	2b06      	cmp	r3, #6
   1e960:	d1c1      	bne.n	1e8e6 <net_tcp_accept+0x4a>
		context->tcp->accept_cb = cb;
   1e962:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1e964:	f8c3 609c 	str.w	r6, [r3, #156]	; 0x9c
   1e968:	e7bd      	b.n	1e8e6 <net_tcp_accept+0x4a>
	u16_t lport = 0U;
   1e96a:	2500      	movs	r5, #0
	struct sockaddr *laddr = NULL;
   1e96c:	46a8      	mov	r8, r5
   1e96e:	e7d3      	b.n	1e918 <net_tcp_accept+0x7c>
		return -EINVAL;
   1e970:	f06f 0015 	mvn.w	r0, #21
}
   1e974:	b008      	add	sp, #32
   1e976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e97a:	bf00      	nop
   1e97c:	0003dc73 	.word	0x0003dc73
   1e980:	0003dc41 	.word	0x0003dc41
   1e984:	0003b773 	.word	0x0003b773
   1e988:	0003cb7f 	.word	0x0003cb7f
   1e98c:	0001e369 	.word	0x0001e369

0001e990 <net_tcp_connect>:
		    u16_t rport,
		    u16_t lport,
		    k_timeout_t timeout,
		    net_context_connect_cb_t cb,
		    void *user_data)
{
   1e990:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e994:	461d      	mov	r5, r3
	int ret;

	NET_ASSERT(context->tcp);
   1e996:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
   1e998:	b087      	sub	sp, #28
   1e99a:	4604      	mov	r4, r0
   1e99c:	460f      	mov	r7, r1
   1e99e:	4691      	mov	r9, r2
   1e9a0:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	NET_ASSERT(context->tcp);
   1e9a4:	b973      	cbnz	r3, 1e9c4 <net_tcp_connect+0x34>
   1e9a6:	492a      	ldr	r1, [pc, #168]	; (1ea50 <net_tcp_connect+0xc0>)
   1e9a8:	f640 2384 	movw	r3, #2692	; 0xa84
   1e9ac:	4a29      	ldr	r2, [pc, #164]	; (1ea54 <net_tcp_connect+0xc4>)
   1e9ae:	482a      	ldr	r0, [pc, #168]	; (1ea58 <net_tcp_connect+0xc8>)
   1e9b0:	f014 fdff 	bl	335b2 <printk>
   1e9b4:	4829      	ldr	r0, [pc, #164]	; (1ea5c <net_tcp_connect+0xcc>)
   1e9b6:	f014 fdfc 	bl	335b2 <printk>
   1e9ba:	f640 2184 	movw	r1, #2692	; 0xa84
   1e9be:	4825      	ldr	r0, [pc, #148]	; (1ea54 <net_tcp_connect+0xc4>)
   1e9c0:	f015 f8f8 	bl	33bb4 <assert_post_action>
	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
   1e9c4:	f8b4 607a 	ldrh.w	r6, [r4, #122]	; 0x7a
   1e9c8:	f3c6 1681 	ubfx	r6, r6, #6, #2

	if (net_context_get_type(context) != SOCK_STREAM) {
   1e9cc:	2e01      	cmp	r6, #1
   1e9ce:	d002      	beq.n	1e9d6 <net_tcp_connect+0x46>
		return -ENOTSUP;
   1e9d0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1e9d4:	e036      	b.n	1ea44 <net_tcp_connect+0xb4>
	}

	/* We need to register a handler, otherwise the SYN-ACK
	 * packet would not be received.
	 */
	ret = net_tcp_register(net_context_get_family(context),
   1e9d6:	4620      	mov	r0, r4
   1e9d8:	f7fe ff96 	bl	1d908 <net_context_get_family>
   1e9dc:	f104 032c 	add.w	r3, r4, #44	; 0x2c
   1e9e0:	e9cd 4303 	strd	r4, r3, [sp, #12]
   1e9e4:	4b1e      	ldr	r3, [pc, #120]	; (1ea60 <net_tcp_connect+0xd0>)
   1e9e6:	ba6d      	rev16	r5, r5
   1e9e8:	9302      	str	r3, [sp, #8]
   1e9ea:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   1e9ee:	b2ad      	uxth	r5, r5
   1e9f0:	ba5b      	rev16	r3, r3
   1e9f2:	b29b      	uxth	r3, r3
   1e9f4:	9301      	str	r3, [sp, #4]
   1e9f6:	b2c1      	uxtb	r1, r0
   1e9f8:	9500      	str	r5, [sp, #0]
   1e9fa:	464b      	mov	r3, r9
   1e9fc:	463a      	mov	r2, r7
   1e9fe:	2006      	movs	r0, #6
   1ea00:	f7fe fd80 	bl	1d504 <net_conn_register>
			       ntohs(rport),
			       ntohs(lport),
			       tcp_synack_received,
			       context,
			       &context->conn_handler);
	if (ret < 0) {
   1ea04:	2800      	cmp	r0, #0
   1ea06:	db1d      	blt.n	1ea44 <net_tcp_connect+0xb4>
	net_tcp_change_state(context->tcp, NET_TCP_SYN_SENT);
   1ea08:	4625      	mov	r5, r4
		return ret;
	}

	context->connect_cb = cb;
   1ea0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
	context->user_data = user_data;

	net_context_set_state(context, NET_CONTEXT_CONNECTING);
   1ea0c:	4631      	mov	r1, r6
	context->connect_cb = cb;
   1ea0e:	63a3      	str	r3, [r4, #56]	; 0x38
	context->user_data = user_data;
   1ea10:	9b11      	ldr	r3, [sp, #68]	; 0x44
	net_context_set_state(context, NET_CONTEXT_CONNECTING);
   1ea12:	4620      	mov	r0, r4
	context->user_data = user_data;
   1ea14:	6023      	str	r3, [r4, #0]
	net_context_set_state(context, NET_CONTEXT_CONNECTING);
   1ea16:	f7fe ffb7 	bl	1d988 <net_context_set_state>
	net_tcp_change_state(context->tcp, NET_TCP_SYN_SENT);
   1ea1a:	f855 0f3c 	ldr.w	r0, [r5, #60]!
   1ea1e:	2102      	movs	r1, #2
   1ea20:	f7ff f99a 	bl	1dd58 <net_tcp_change_state>
	return send_syn_segment(context, NULL, remote, NET_TCP_SYN, "SYN");
   1ea24:	2302      	movs	r3, #2
   1ea26:	463a      	mov	r2, r7
   1ea28:	2100      	movs	r1, #0
   1ea2a:	4628      	mov	r0, r5
   1ea2c:	f018 f8b5 	bl	36b9a <send_syn_segment.isra.35>

	send_syn(context, addr);

	/* in tcp_synack_received() we give back this semaphore */
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1ea30:	f1b8 0f00 	cmp.w	r8, #0
   1ea34:	d005      	beq.n	1ea42 <net_tcp_connect+0xb2>
	    k_sem_take(&context->tcp->connect_wait, timeout)) {
   1ea36:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1ea38:	30a0      	adds	r0, #160	; 0xa0
	return z_impl_k_sem_take(sem, timeout);
   1ea3a:	4641      	mov	r1, r8
   1ea3c:	f00f fb10 	bl	2e060 <z_impl_k_sem_take>
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1ea40:	b918      	cbnz	r0, 1ea4a <net_tcp_connect+0xba>
		return -ETIMEDOUT;
	}

	return 0;
   1ea42:	2000      	movs	r0, #0
}
   1ea44:	b007      	add	sp, #28
   1ea46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -ETIMEDOUT;
   1ea4a:	f06f 0073 	mvn.w	r0, #115	; 0x73
   1ea4e:	e7f9      	b.n	1ea44 <net_tcp_connect+0xb4>
   1ea50:	0003dc73 	.word	0x0003dc73
   1ea54:	0003dc41 	.word	0x0003dc41
   1ea58:	0003b773 	.word	0x0003b773
   1ea5c:	0003cb7f 	.word	0x0003cb7f
   1ea60:	0001e1d1 	.word	0x0001e1d1

0001ea64 <connect_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int connect_request_encode(const struct mqtt_client *client,
			   struct buf_ctx *buf)
{
   1ea64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	} else {
		mqtt_proto_desc = &mqtt_3_1_0_proto_desc;
	}

	/* Reserve space for fixed header. */
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   1ea68:	680f      	ldr	r7, [r1, #0]
	u8_t connect_flags = client->clean_session << 1;
   1ea6a:	f890 507c 	ldrb.w	r5, [r0, #124]	; 0x7c
	start = buf->cur;

	MQTT_TRC("Encoding Protocol Description. Str:%s Size:%08x.",
		 mqtt_proto_desc->utf8, mqtt_proto_desc->size);

	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   1ea6e:	4b3b      	ldr	r3, [pc, #236]	; (1eb5c <connect_request_encode+0xf8>)
   1ea70:	4a3b      	ldr	r2, [pc, #236]	; (1eb60 <connect_request_encode+0xfc>)
{
   1ea72:	4606      	mov	r6, r0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   1ea74:	f890 007a 	ldrb.w	r0, [r0, #122]	; 0x7a
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   1ea78:	3705      	adds	r7, #5
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   1ea7a:	2804      	cmp	r0, #4
   1ea7c:	bf0c      	ite	eq
   1ea7e:	4610      	moveq	r0, r2
   1ea80:	4618      	movne	r0, r3
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   1ea82:	600f      	str	r7, [r1, #0]
{
   1ea84:	460c      	mov	r4, r1
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   1ea86:	f018 fc0a 	bl	3729e <pack_utf8_str>
	u8_t connect_flags = client->clean_session << 1;
   1ea8a:	f3c5 0540 	ubfx	r5, r5, #1, #1
	if (err_code != 0) {
   1ea8e:	4603      	mov	r3, r0
   1ea90:	b938      	cbnz	r0, 1eaa2 <connect_request_encode+0x3e>
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   1ea92:	e9d4 2000 	ldrd	r2, r0, [r4]
   1ea96:	4290      	cmp	r0, r2
		return err_code;
	}

	MQTT_TRC("Encoding Protocol Version %02x.", client->protocol_version);
	err_code = pack_uint8(client->protocol_version, buf);
   1ea98:	f896 107a 	ldrb.w	r1, [r6, #122]	; 0x7a
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   1ea9c:	d104      	bne.n	1eaa8 <connect_request_encode+0x44>
		return -ENOMEM;
   1ea9e:	f06f 030b 	mvn.w	r3, #11

	/* Write the flags the connect flags. */
	*connect_flags_pos = connect_flags;

	return mqtt_encode_fixed_header(message_type, start, buf);
}
   1eaa2:	4618      	mov	r0, r3
   1eaa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*(buf->cur++) = val;
   1eaa8:	1c50      	adds	r0, r2, #1
   1eaaa:	6020      	str	r0, [r4, #0]
   1eaac:	7011      	strb	r1, [r2, #0]
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   1eaae:	e9d4 8200 	ldrd	r8, r2, [r4]
   1eab2:	4590      	cmp	r8, r2
   1eab4:	d0f3      	beq.n	1ea9e <connect_request_encode+0x3a>
	*(buf->cur++) = val;
   1eab6:	f108 0201 	add.w	r2, r8, #1
   1eaba:	6022      	str	r2, [r4, #0]
   1eabc:	f888 3000 	strb.w	r3, [r8]
	err_code = pack_uint16(client->keepalive, buf);
   1eac0:	4621      	mov	r1, r4
   1eac2:	f8b6 0078 	ldrh.w	r0, [r6, #120]	; 0x78
   1eac6:	f018 fbd8 	bl	3727a <pack_uint16>
	if (err_code != 0) {
   1eaca:	4603      	mov	r3, r0
   1eacc:	2800      	cmp	r0, #0
   1eace:	d1e8      	bne.n	1eaa2 <connect_request_encode+0x3e>
	err_code = pack_utf8_str(&client->client_id, buf);
   1ead0:	f106 0048 	add.w	r0, r6, #72	; 0x48
   1ead4:	f018 fbe3 	bl	3729e <pack_utf8_str>
	if (err_code != 0) {
   1ead8:	4603      	mov	r3, r0
   1eada:	2800      	cmp	r0, #0
   1eadc:	d1e1      	bne.n	1eaa2 <connect_request_encode+0x3e>
	if (client->will_topic != NULL) {
   1eade:	6df0      	ldr	r0, [r6, #92]	; 0x5c
	u8_t connect_flags = client->clean_session << 1;
   1eae0:	006d      	lsls	r5, r5, #1
	if (client->will_topic != NULL) {
   1eae2:	b1d8      	cbz	r0, 1eb1c <connect_request_encode+0xb8>
		connect_flags |= client->will_retain << 5;
   1eae4:	f896 307c 	ldrb.w	r3, [r6, #124]	; 0x7c
		connect_flags |= MQTT_CONNECT_FLAG_WILL_TOPIC;
   1eae8:	f045 0504 	orr.w	r5, r5, #4
		connect_flags |= client->will_retain << 5;
   1eaec:	f003 0301 	and.w	r3, r3, #1
   1eaf0:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   1eaf4:	7a03      	ldrb	r3, [r0, #8]
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   1eaf6:	4621      	mov	r1, r4
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   1eaf8:	00db      	lsls	r3, r3, #3
   1eafa:	f003 0318 	and.w	r3, r3, #24
		connect_flags |= client->will_retain << 5;
   1eafe:	431d      	orrs	r5, r3
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   1eb00:	f018 fbcd 	bl	3729e <pack_utf8_str>
		if (err_code != 0) {
   1eb04:	4603      	mov	r3, r0
   1eb06:	2800      	cmp	r0, #0
   1eb08:	d1cb      	bne.n	1eaa2 <connect_request_encode+0x3e>
		if (client->will_message != NULL) {
   1eb0a:	6e33      	ldr	r3, [r6, #96]	; 0x60
			err_code = pack_utf8_str(client->will_message, buf);
   1eb0c:	4621      	mov	r1, r4
		if (client->will_message != NULL) {
   1eb0e:	b313      	cbz	r3, 1eb56 <connect_request_encode+0xf2>
			err_code = pack_utf8_str(client->will_message, buf);
   1eb10:	4618      	mov	r0, r3
   1eb12:	f018 fbc4 	bl	3729e <pack_utf8_str>
			if (err_code != 0) {
   1eb16:	4603      	mov	r3, r0
   1eb18:	2800      	cmp	r0, #0
   1eb1a:	d1c2      	bne.n	1eaa2 <connect_request_encode+0x3e>
	if (client->user_name != NULL) {
   1eb1c:	6d70      	ldr	r0, [r6, #84]	; 0x54
   1eb1e:	b138      	cbz	r0, 1eb30 <connect_request_encode+0xcc>
		err_code = pack_utf8_str(client->user_name, buf);
   1eb20:	4621      	mov	r1, r4
   1eb22:	f018 fbbc 	bl	3729e <pack_utf8_str>
		if (err_code != 0) {
   1eb26:	4603      	mov	r3, r0
   1eb28:	2800      	cmp	r0, #0
   1eb2a:	d1ba      	bne.n	1eaa2 <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_USERNAME;
   1eb2c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
	if (client->password != NULL) {
   1eb30:	6db0      	ldr	r0, [r6, #88]	; 0x58
   1eb32:	b138      	cbz	r0, 1eb44 <connect_request_encode+0xe0>
		err_code = pack_utf8_str(client->password, buf);
   1eb34:	4621      	mov	r1, r4
   1eb36:	f018 fbb2 	bl	3729e <pack_utf8_str>
		if (err_code != 0) {
   1eb3a:	4603      	mov	r3, r0
   1eb3c:	2800      	cmp	r0, #0
   1eb3e:	d1b0      	bne.n	1eaa2 <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_PASSWORD;
   1eb40:	f045 0540 	orr.w	r5, r5, #64	; 0x40
	*connect_flags_pos = connect_flags;
   1eb44:	f888 5000 	strb.w	r5, [r8]
	return mqtt_encode_fixed_header(message_type, start, buf);
   1eb48:	4622      	mov	r2, r4
   1eb4a:	4639      	mov	r1, r7
}
   1eb4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   1eb50:	2010      	movs	r0, #16
   1eb52:	f018 bbbf 	b.w	372d4 <mqtt_encode_fixed_header>
	return pack_uint16(0x0000, buf);
   1eb56:	f018 fb90 	bl	3727a <pack_uint16>
   1eb5a:	e7dc      	b.n	1eb16 <connect_request_encode+0xb2>
   1eb5c:	0003a50c 	.word	0x0003a50c
   1eb60:	0003a514 	.word	0x0003a514

0001eb64 <disconnect_encode>:
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
}

int disconnect_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(disc_packet)) {
   1eb64:	e9d0 2300 	ldrd	r2, r3, [r0]
   1eb68:	1a9b      	subs	r3, r3, r2
   1eb6a:	2b01      	cmp	r3, #1
   1eb6c:	bf81      	itttt	hi
   1eb6e:	4b05      	ldrhi	r3, [pc, #20]	; (1eb84 <disconnect_encode+0x20>)
   1eb70:	881b      	ldrhhi	r3, [r3, #0]
   1eb72:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, disc_packet, sizeof(disc_packet));
	buf->end = buf->cur + sizeof(disc_packet);
   1eb74:	6803      	ldrhi	r3, [r0, #0]
   1eb76:	bf83      	ittte	hi
   1eb78:	3302      	addhi	r3, #2
   1eb7a:	6043      	strhi	r3, [r0, #4]

	return 0;
   1eb7c:	2000      	movhi	r0, #0
		return -ENOMEM;
   1eb7e:	f06f 000b 	mvnls.w	r0, #11
}
   1eb82:	4770      	bx	lr
   1eb84:	0003dc9d 	.word	0x0003dc9d

0001eb88 <ping_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int ping_request_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(ping_packet)) {
   1eb88:	e9d0 2300 	ldrd	r2, r3, [r0]
   1eb8c:	1a9b      	subs	r3, r3, r2
   1eb8e:	2b01      	cmp	r3, #1
   1eb90:	bf81      	itttt	hi
   1eb92:	4b05      	ldrhi	r3, [pc, #20]	; (1eba8 <ping_request_encode+0x20>)
   1eb94:	881b      	ldrhhi	r3, [r3, #0]
   1eb96:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, ping_packet, sizeof(ping_packet));
	buf->end = buf->cur + sizeof(ping_packet);
   1eb98:	6803      	ldrhi	r3, [r0, #0]
   1eb9a:	bf83      	ittte	hi
   1eb9c:	3302      	addhi	r3, #2
   1eb9e:	6043      	strhi	r3, [r0, #4]

	return 0;
   1eba0:	2000      	movhi	r0, #0
		return -ENOMEM;
   1eba2:	f06f 000b 	mvnls.w	r0, #11
}
   1eba6:	4770      	bx	lr
   1eba8:	0003dc9f 	.word	0x0003dc9f

0001ebac <mqtt_transport_connect>:
#endif /* CONFIG_MQTT_LIB_WEBSOCKET */
};

int mqtt_transport_connect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].connect(client);
   1ebac:	2314      	movs	r3, #20
   1ebae:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   1ebb2:	4353      	muls	r3, r2
   1ebb4:	4a01      	ldr	r2, [pc, #4]	; (1ebbc <mqtt_transport_connect+0x10>)
   1ebb6:	58d3      	ldr	r3, [r2, r3]
   1ebb8:	4718      	bx	r3
   1ebba:	bf00      	nop
   1ebbc:	0003a51c 	.word	0x0003a51c

0001ebc0 <mqtt_transport_write>:
}

int mqtt_transport_write(struct mqtt_client *client, const u8_t *data,
			 u32_t datalen)
{
   1ebc0:	b430      	push	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   1ebc2:	2514      	movs	r5, #20
   1ebc4:	4c03      	ldr	r4, [pc, #12]	; (1ebd4 <mqtt_transport_write+0x14>)
   1ebc6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   1ebca:	fb05 4303 	mla	r3, r5, r3, r4
							  datalen);
}
   1ebce:	bc30      	pop	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   1ebd0:	685b      	ldr	r3, [r3, #4]
   1ebd2:	4718      	bx	r3
   1ebd4:	0003a51c 	.word	0x0003a51c

0001ebd8 <mqtt_transport_write_msg>:

int mqtt_transport_write_msg(struct mqtt_client *client,
			     const struct msghdr *message)
{
   1ebd8:	b410      	push	{r4}
	return transport_fn[client->transport.type].write_msg(client, message);
   1ebda:	2414      	movs	r4, #20
   1ebdc:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   1ebe0:	4a03      	ldr	r2, [pc, #12]	; (1ebf0 <mqtt_transport_write_msg+0x18>)
   1ebe2:	fb04 2303 	mla	r3, r4, r3, r2
}
   1ebe6:	f85d 4b04 	ldr.w	r4, [sp], #4
	return transport_fn[client->transport.type].write_msg(client, message);
   1ebea:	689b      	ldr	r3, [r3, #8]
   1ebec:	4718      	bx	r3
   1ebee:	bf00      	nop
   1ebf0:	0003a51c 	.word	0x0003a51c

0001ebf4 <mqtt_transport_read>:

int mqtt_transport_read(struct mqtt_client *client, u8_t *data, u32_t buflen,
			bool shall_block)
{
   1ebf4:	b470      	push	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   1ebf6:	2614      	movs	r6, #20
   1ebf8:	4d04      	ldr	r5, [pc, #16]	; (1ec0c <mqtt_transport_read+0x18>)
   1ebfa:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
   1ebfe:	fb06 5404 	mla	r4, r6, r4, r5
   1ec02:	68e4      	ldr	r4, [r4, #12]
   1ec04:	46a4      	mov	ip, r4
							 shall_block);
}
   1ec06:	bc70      	pop	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   1ec08:	4760      	bx	ip
   1ec0a:	bf00      	nop
   1ec0c:	0003a51c 	.word	0x0003a51c

0001ec10 <mqtt_transport_disconnect>:

int mqtt_transport_disconnect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].disconnect(client);
   1ec10:	2114      	movs	r1, #20
   1ec12:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   1ec16:	4a02      	ldr	r2, [pc, #8]	; (1ec20 <mqtt_transport_disconnect+0x10>)
   1ec18:	fb01 2303 	mla	r3, r1, r3, r2
   1ec1c:	691b      	ldr	r3, [r3, #16]
   1ec1e:	4718      	bx	r3
   1ec20:	0003a51c 	.word	0x0003a51c

0001ec24 <mqtt_mutex_unlock>:
	return k_mutex_lock(&mutex->kernel_mutex, timeout);
}

static inline int sys_mutex_unlock(struct sys_mutex *mutex)
{
	if (mutex->kernel_mutex.lock_count == 0) {
   1ec24:	68c2      	ldr	r2, [r0, #12]
}

/**@brief Release the lock on the module specific mutex, if any.
 */
static inline void mqtt_mutex_unlock(struct mqtt_client *client)
{
   1ec26:	b510      	push	{r4, lr}
   1ec28:	b142      	cbz	r2, 1ec3c <mqtt_mutex_unlock+0x18>
		return -EINVAL;
	}

	if (mutex->kernel_mutex.owner != _current) {
   1ec2a:	4b0f      	ldr	r3, [pc, #60]	; (1ec68 <mqtt_mutex_unlock+0x44>)
   1ec2c:	6882      	ldr	r2, [r0, #8]
   1ec2e:	689b      	ldr	r3, [r3, #8]
   1ec30:	429a      	cmp	r2, r3
   1ec32:	d115      	bne.n	1ec60 <mqtt_mutex_unlock+0x3c>
	int ret = sys_mutex_unlock(&client->internal.mutex);

	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
	(void)ret;
}
   1ec34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_unlock(mutex);
   1ec38:	f00d bdbc 	b.w	2c7b4 <z_impl_k_mutex_unlock>
		return -EINVAL;
   1ec3c:	f06f 0415 	mvn.w	r4, #21
	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   1ec40:	2343      	movs	r3, #67	; 0x43
   1ec42:	4a0a      	ldr	r2, [pc, #40]	; (1ec6c <mqtt_mutex_unlock+0x48>)
   1ec44:	490a      	ldr	r1, [pc, #40]	; (1ec70 <mqtt_mutex_unlock+0x4c>)
   1ec46:	480b      	ldr	r0, [pc, #44]	; (1ec74 <mqtt_mutex_unlock+0x50>)
   1ec48:	f014 fcb3 	bl	335b2 <printk>
   1ec4c:	4621      	mov	r1, r4
   1ec4e:	480a      	ldr	r0, [pc, #40]	; (1ec78 <mqtt_mutex_unlock+0x54>)
   1ec50:	f014 fcaf 	bl	335b2 <printk>
}
   1ec54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   1ec58:	2143      	movs	r1, #67	; 0x43
   1ec5a:	4804      	ldr	r0, [pc, #16]	; (1ec6c <mqtt_mutex_unlock+0x48>)
   1ec5c:	f014 bfaa 	b.w	33bb4 <assert_post_action>
		return -EPERM;
   1ec60:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1ec64:	e7ec      	b.n	1ec40 <mqtt_mutex_unlock+0x1c>
   1ec66:	bf00      	nop
   1ec68:	200274dc 	.word	0x200274dc
   1ec6c:	0003dccd 	.word	0x0003dccd
   1ec70:	0003dcfe 	.word	0x0003dcfe
   1ec74:	0003b773 	.word	0x0003b773
   1ec78:	0003dd07 	.word	0x0003dd07

0001ec7c <mqtt_mutex_lock>:
{
   1ec7c:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   1ec7e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ec82:	f00d fcb9 	bl	2c5f8 <z_impl_k_mutex_lock>
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   1ec86:	4604      	mov	r4, r0
   1ec88:	b178      	cbz	r0, 1ecaa <mqtt_mutex_lock+0x2e>
   1ec8a:	2339      	movs	r3, #57	; 0x39
   1ec8c:	4a07      	ldr	r2, [pc, #28]	; (1ecac <mqtt_mutex_lock+0x30>)
   1ec8e:	4908      	ldr	r1, [pc, #32]	; (1ecb0 <mqtt_mutex_lock+0x34>)
   1ec90:	4808      	ldr	r0, [pc, #32]	; (1ecb4 <mqtt_mutex_lock+0x38>)
   1ec92:	f014 fc8e 	bl	335b2 <printk>
   1ec96:	4621      	mov	r1, r4
   1ec98:	4807      	ldr	r0, [pc, #28]	; (1ecb8 <mqtt_mutex_lock+0x3c>)
   1ec9a:	f014 fc8a 	bl	335b2 <printk>
}
   1ec9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   1eca2:	2139      	movs	r1, #57	; 0x39
   1eca4:	4801      	ldr	r0, [pc, #4]	; (1ecac <mqtt_mutex_lock+0x30>)
   1eca6:	f014 bf85 	b.w	33bb4 <assert_post_action>
}
   1ecaa:	bd10      	pop	{r4, pc}
   1ecac:	0003dccd 	.word	0x0003dccd
   1ecb0:	0003dcfe 	.word	0x0003dcfe
   1ecb4:	0003b773 	.word	0x0003b773
   1ecb8:	0003dcad 	.word	0x0003dcad

0001ecbc <z_impl_entropy_get_entropy>:
				  u16_t length);

static inline int z_impl_entropy_get_entropy(struct device *dev,
					    u8_t *buffer,
					    u16_t length)
{
   1ecbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct entropy_driver_api *api =
   1ecc0:	6885      	ldr	r5, [r0, #8]
{
   1ecc2:	4604      	mov	r4, r0
		(const struct entropy_driver_api *)dev->driver_api;

	__ASSERT(api->get_entropy != NULL,
   1ecc4:	682b      	ldr	r3, [r5, #0]
{
   1ecc6:	460e      	mov	r6, r1
   1ecc8:	4617      	mov	r7, r2
	__ASSERT(api->get_entropy != NULL,
   1ecca:	b963      	cbnz	r3, 1ece6 <z_impl_entropy_get_entropy+0x2a>
   1eccc:	4909      	ldr	r1, [pc, #36]	; (1ecf4 <z_impl_entropy_get_entropy+0x38>)
   1ecce:	234c      	movs	r3, #76	; 0x4c
   1ecd0:	4a09      	ldr	r2, [pc, #36]	; (1ecf8 <z_impl_entropy_get_entropy+0x3c>)
   1ecd2:	480a      	ldr	r0, [pc, #40]	; (1ecfc <z_impl_entropy_get_entropy+0x40>)
   1ecd4:	f014 fc6d 	bl	335b2 <printk>
   1ecd8:	4809      	ldr	r0, [pc, #36]	; (1ed00 <z_impl_entropy_get_entropy+0x44>)
   1ecda:	f014 fc6a 	bl	335b2 <printk>
   1ecde:	214c      	movs	r1, #76	; 0x4c
   1ece0:	4805      	ldr	r0, [pc, #20]	; (1ecf8 <z_impl_entropy_get_entropy+0x3c>)
   1ece2:	f014 ff67 	bl	33bb4 <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1ece6:	682b      	ldr	r3, [r5, #0]
   1ece8:	463a      	mov	r2, r7
   1ecea:	4631      	mov	r1, r6
   1ecec:	4620      	mov	r0, r4
}
   1ecee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->get_entropy(dev, buffer, length);
   1ecf2:	4718      	bx	r3
   1ecf4:	0003de15 	.word	0x0003de15
   1ecf8:	0003dde8 	.word	0x0003dde8
   1ecfc:	0003b773 	.word	0x0003b773
   1ed00:	0003de35 	.word	0x0003de35

0001ed04 <sys_rand32_get>:

static struct device *entropy_driver;

#if defined(CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR)
u32_t sys_rand32_get(void)
{
   1ed04:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct device *dev = entropy_driver;
   1ed06:	4d12      	ldr	r5, [pc, #72]	; (1ed50 <sys_rand32_get+0x4c>)
   1ed08:	682c      	ldr	r4, [r5, #0]
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
   1ed0a:	b99c      	cbnz	r4, 1ed34 <sys_rand32_get+0x30>
   1ed0c:	4811      	ldr	r0, [pc, #68]	; (1ed54 <sys_rand32_get+0x50>)
   1ed0e:	f00c fd77 	bl	2b800 <z_impl_device_get_binding>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(DT_CHOSEN_ZEPHYR_ENTROPY_LABEL);
		__ASSERT((dev != NULL),
   1ed12:	4604      	mov	r4, r0
   1ed14:	b968      	cbnz	r0, 1ed32 <sys_rand32_get+0x2e>
   1ed16:	231d      	movs	r3, #29
   1ed18:	4a0f      	ldr	r2, [pc, #60]	; (1ed58 <sys_rand32_get+0x54>)
   1ed1a:	4910      	ldr	r1, [pc, #64]	; (1ed5c <sys_rand32_get+0x58>)
   1ed1c:	4810      	ldr	r0, [pc, #64]	; (1ed60 <sys_rand32_get+0x5c>)
   1ed1e:	f014 fc48 	bl	335b2 <printk>
   1ed22:	490c      	ldr	r1, [pc, #48]	; (1ed54 <sys_rand32_get+0x50>)
   1ed24:	480f      	ldr	r0, [pc, #60]	; (1ed64 <sys_rand32_get+0x60>)
   1ed26:	f014 fc44 	bl	335b2 <printk>
   1ed2a:	211d      	movs	r1, #29
   1ed2c:	480a      	ldr	r0, [pc, #40]	; (1ed58 <sys_rand32_get+0x54>)
   1ed2e:	f014 ff41 	bl	33bb4 <assert_post_action>
			"Device driver for %s (DT_CHOSEN_ZEPHYR_ENTROPY_LABEL) not found. "
			"Check your build configuration!",
			DT_CHOSEN_ZEPHYR_ENTROPY_LABEL);
		entropy_driver = dev;
   1ed32:	602c      	str	r4, [r5, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_ENTROPY_GET_ENTROPY);
	}
#endif
	compiler_barrier();
	return z_impl_entropy_get_entropy(dev, buffer, length);
   1ed34:	2204      	movs	r2, #4
   1ed36:	4620      	mov	r0, r4
   1ed38:	eb0d 0102 	add.w	r1, sp, r2
   1ed3c:	f7ff ffbe 	bl	1ecbc <z_impl_entropy_get_entropy>
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
   1ed40:	2800      	cmp	r0, #0
   1ed42:	da02      	bge.n	1ed4a <sys_rand32_get+0x46>
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   1ed44:	f7fb fbd2 	bl	1a4ec <z_timer_cycle_get_32>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
   1ed48:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
   1ed4a:	9801      	ldr	r0, [sp, #4]
   1ed4c:	b003      	add	sp, #12
   1ed4e:	bd30      	pop	{r4, r5, pc}
   1ed50:	20022218 	.word	0x20022218
   1ed54:	0003dd29 	.word	0x0003dd29
   1ed58:	0003dd37 	.word	0x0003dd37
   1ed5c:	0003dd70 	.word	0x0003dd70
   1ed60:	0003b773 	.word	0x0003b773
   1ed64:	0003dd85 	.word	0x0003dd85

0001ed68 <default_CSPRNG>:

	return res == TC_CRYPTO_SUCCESS ? 0 : -EINVAL;
}

int default_CSPRNG(u8_t *dest, unsigned int size)
{
   1ed68:	b507      	push	{r0, r1, r2, lr}
	int res = tc_ctr_prng_generate(&prng_state, NULL, 0, dest, size);
   1ed6a:	2200      	movs	r2, #0
   1ed6c:	9100      	str	r1, [sp, #0]
   1ed6e:	4603      	mov	r3, r0
   1ed70:	4611      	mov	r1, r2
   1ed72:	4803      	ldr	r0, [pc, #12]	; (1ed80 <default_CSPRNG+0x18>)
   1ed74:	f016 fafc 	bl	35370 <tc_ctr_prng_generate>
	return res;
}
   1ed78:	b003      	add	sp, #12
   1ed7a:	f85d fb04 	ldr.w	pc, [sp], #4
   1ed7e:	bf00      	nop
   1ed80:	20020920 	.word	0x20020920

0001ed84 <jwt_add_payload>:
{
   1ed84:	b530      	push	{r4, r5, lr}
   1ed86:	b087      	sub	sp, #28
	struct jwt_payload payload = {
   1ed88:	e9cd 1203 	strd	r1, r2, [sp, #12]
	base64_outch(builder, '.');
   1ed8c:	212e      	movs	r1, #46	; 0x2e
{
   1ed8e:	4604      	mov	r4, r0
	struct jwt_payload payload = {
   1ed90:	9305      	str	r3, [sp, #20]
	base64_outch(builder, '.');
   1ed92:	f018 ffa3 	bl	37cdc <base64_outch>
	int res = json_obj_encode(jwt_payload_desc,
   1ed96:	4b07      	ldr	r3, [pc, #28]	; (1edb4 <jwt_add_payload+0x30>)
   1ed98:	9000      	str	r0, [sp, #0]
   1ed9a:	aa03      	add	r2, sp, #12
   1ed9c:	2103      	movs	r1, #3
   1ed9e:	4806      	ldr	r0, [pc, #24]	; (1edb8 <jwt_add_payload+0x34>)
   1eda0:	f7f9 feee 	bl	18b80 <json_obj_encode>
   1eda4:	4605      	mov	r5, r0
	base64_flush(builder);
   1eda6:	4620      	mov	r0, r4
   1eda8:	f018 ffab 	bl	37d02 <base64_flush>
}
   1edac:	4628      	mov	r0, r5
   1edae:	b007      	add	sp, #28
   1edb0:	bd30      	pop	{r4, r5, pc}
   1edb2:	bf00      	nop
   1edb4:	00037d7b 	.word	0x00037d7b
   1edb8:	200200e4 	.word	0x200200e4

0001edbc <jwt_sign>:

int jwt_sign(struct jwt_builder *builder,
	     const char *der_key,
	     size_t der_key_len)
{
   1edbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1edbe:	4605      	mov	r5, r0
   1edc0:	b0b7      	sub	sp, #220	; 0xdc
	struct tc_sha256_state_struct ctx;
	u8_t hash[32], sig[64];
	int res;

	tc_sha256_init(&ctx);
   1edc2:	a81a      	add	r0, sp, #104	; 0x68
{
   1edc4:	460f      	mov	r7, r1
	tc_sha256_init(&ctx);
   1edc6:	f7fb fe5b 	bl	1aa80 <tc_sha256_init>
	tc_sha256_update(&ctx, builder->base, builder->buf - builder->base);
   1edca:	e9d5 1200 	ldrd	r1, r2, [r5]
   1edce:	a81a      	add	r0, sp, #104	; 0x68
   1edd0:	1a52      	subs	r2, r2, r1
   1edd2:	f016 f9b4 	bl	3513e <tc_sha256_update>
	tc_sha256_final(hash, &ctx);
   1edd6:	a91a      	add	r1, sp, #104	; 0x68
   1edd8:	a802      	add	r0, sp, #8
   1edda:	f016 f9dc 	bl	35196 <tc_sha256_final>
	if (prng_init) {
   1edde:	4b1b      	ldr	r3, [pc, #108]	; (1ee4c <jwt_sign+0x90>)
   1ede0:	781c      	ldrb	r4, [r3, #0]
   1ede2:	b17c      	cbz	r4, 1ee04 <jwt_sign+0x48>
	res = setup_prng();

	if (res != 0) {
		return res;
	}
	uECC_set_rng(&default_CSPRNG);
   1ede4:	481a      	ldr	r0, [pc, #104]	; (1ee50 <jwt_sign+0x94>)
   1ede6:	f7fb fbd3 	bl	1a590 <uECC_set_rng>

	/* Note that tinycrypt only supports P-256. */
	res = uECC_sign(der_key, hash, sizeof(hash),
   1edea:	4b1a      	ldr	r3, [pc, #104]	; (1ee54 <jwt_sign+0x98>)
   1edec:	2220      	movs	r2, #32
   1edee:	9300      	str	r3, [sp, #0]
   1edf0:	a902      	add	r1, sp, #8
   1edf2:	ab0a      	add	r3, sp, #40	; 0x28
   1edf4:	4638      	mov	r0, r7
   1edf6:	f015 fadc 	bl	343b2 <uECC_sign>
			sig, &curve_secp256r1);
	if (res != TC_CRYPTO_SUCCESS) {
   1edfa:	2801      	cmp	r0, #1
   1edfc:	d017      	beq.n	1ee2e <jwt_sign+0x72>
		return -EINVAL;
   1edfe:	f06f 0015 	mvn.w	r0, #21
   1ee02:	e021      	b.n	1ee48 <jwt_sign+0x8c>
	prng_init = true;
   1ee04:	2201      	movs	r2, #1
   1ee06:	ae0a      	add	r6, sp, #40	; 0x28
   1ee08:	701a      	strb	r2, [r3, #0]
		u32_t rv = sys_rand32_get();
   1ee0a:	f7ff ff7b 	bl	1ed04 <sys_rand32_get>
   1ee0e:	3404      	adds	r4, #4
	for (int i = 0; i < sizeof(entropy); i += sizeof(u32_t)) {
   1ee10:	2c20      	cmp	r4, #32
   1ee12:	f846 0b04 	str.w	r0, [r6], #4
   1ee16:	d1f8      	bne.n	1ee0a <jwt_sign+0x4e>
	int res = tc_ctr_prng_init(&prng_state,
   1ee18:	2319      	movs	r3, #25
   1ee1a:	4622      	mov	r2, r4
   1ee1c:	9300      	str	r3, [sp, #0]
   1ee1e:	a90a      	add	r1, sp, #40	; 0x28
   1ee20:	4b0d      	ldr	r3, [pc, #52]	; (1ee58 <jwt_sign+0x9c>)
   1ee22:	480e      	ldr	r0, [pc, #56]	; (1ee5c <jwt_sign+0xa0>)
   1ee24:	f016 fa56 	bl	352d4 <tc_ctr_prng_init>
	return res == TC_CRYPTO_SUCCESS ? 0 : -EINVAL;
   1ee28:	2801      	cmp	r0, #1
   1ee2a:	d0db      	beq.n	1ede4 <jwt_sign+0x28>
   1ee2c:	e7e7      	b.n	1edfe <jwt_sign+0x42>
	}

	base64_outch(builder, '.');
   1ee2e:	212e      	movs	r1, #46	; 0x2e
   1ee30:	4628      	mov	r0, r5
   1ee32:	f018 ff53 	bl	37cdc <base64_outch>
	base64_append_bytes(sig, sizeof(sig), builder);
   1ee36:	462a      	mov	r2, r5
   1ee38:	2140      	movs	r1, #64	; 0x40
   1ee3a:	a80a      	add	r0, sp, #40	; 0x28
   1ee3c:	f018 ff9d 	bl	37d7a <base64_append_bytes>
	base64_flush(builder);
   1ee40:	4628      	mov	r0, r5
   1ee42:	f018 ff5e 	bl	37d02 <base64_flush>

	return 0;
   1ee46:	2000      	movs	r0, #0
}
   1ee48:	b037      	add	sp, #220	; 0xdc
   1ee4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ee4c:	20027fb8 	.word	0x20027fb8
   1ee50:	0001ed69 	.word	0x0001ed69
   1ee54:	0003a564 	.word	0x0003a564
   1ee58:	0003de5b 	.word	0x0003de5b
   1ee5c:	20020920 	.word	0x20020920

0001ee60 <jwt_init_builder>:
		     size_t buffer_size)
{
	builder->base = buffer;
	builder->buf = buffer;
	builder->len = buffer_size;
	builder->overflowed = false;
   1ee60:	2300      	movs	r3, #0
{
   1ee62:	b513      	push	{r0, r1, r4, lr}
	builder->buf = buffer;
   1ee64:	e9c0 1100 	strd	r1, r1, [r0]
	builder->len = buffer_size;
   1ee68:	6082      	str	r2, [r0, #8]
	builder->overflowed = false;
   1ee6a:	7303      	strb	r3, [r0, #12]
	builder->pending = 0;
   1ee6c:	6103      	str	r3, [r0, #16]
{
   1ee6e:	4604      	mov	r4, r0
	int res = json_obj_encode(jwt_header_desc, ARRAY_SIZE(jwt_header_desc),
   1ee70:	9000      	str	r0, [sp, #0]
   1ee72:	4b06      	ldr	r3, [pc, #24]	; (1ee8c <jwt_init_builder+0x2c>)
   1ee74:	4a06      	ldr	r2, [pc, #24]	; (1ee90 <jwt_init_builder+0x30>)
   1ee76:	2102      	movs	r1, #2
   1ee78:	4806      	ldr	r0, [pc, #24]	; (1ee94 <jwt_init_builder+0x34>)
   1ee7a:	f7f9 fe81 	bl	18b80 <json_obj_encode>
	if (res != 0) {
   1ee7e:	b910      	cbnz	r0, 1ee86 <jwt_init_builder+0x26>
	base64_flush(builder);
   1ee80:	4620      	mov	r0, r4
   1ee82:	f018 ff3e 	bl	37d02 <base64_flush>

	jwt_add_header(builder);

	return 0;
}
   1ee86:	2000      	movs	r0, #0
   1ee88:	b002      	add	sp, #8
   1ee8a:	bd10      	pop	{r4, pc}
   1ee8c:	00037d7b 	.word	0x00037d7b
   1ee90:	0003a614 	.word	0x0003a614
   1ee94:	200200c4 	.word	0x200200c4

0001ee98 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   1ee98:	b570      	push	{r4, r5, r6, lr}
   1ee9a:	4616      	mov	r6, r2
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1ee9c:	68c4      	ldr	r4, [r0, #12]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   1ee9e:	460d      	mov	r5, r1
   1eea0:	b961      	cbnz	r1, 1eebc <gpio_nrfx_manage_callback+0x24>
   1eea2:	4922      	ldr	r1, [pc, #136]	; (1ef2c <gpio_nrfx_manage_callback+0x94>)
   1eea4:	2324      	movs	r3, #36	; 0x24
   1eea6:	4a22      	ldr	r2, [pc, #136]	; (1ef30 <gpio_nrfx_manage_callback+0x98>)
   1eea8:	4822      	ldr	r0, [pc, #136]	; (1ef34 <gpio_nrfx_manage_callback+0x9c>)
   1eeaa:	f014 fb82 	bl	335b2 <printk>
   1eeae:	4822      	ldr	r0, [pc, #136]	; (1ef38 <gpio_nrfx_manage_callback+0xa0>)
   1eeb0:	f014 fb7f 	bl	335b2 <printk>
   1eeb4:	2124      	movs	r1, #36	; 0x24
   1eeb6:	481e      	ldr	r0, [pc, #120]	; (1ef30 <gpio_nrfx_manage_callback+0x98>)
   1eeb8:	f014 fe7c 	bl	33bb4 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   1eebc:	686b      	ldr	r3, [r5, #4]
   1eebe:	b963      	cbnz	r3, 1eeda <gpio_nrfx_manage_callback+0x42>
   1eec0:	491e      	ldr	r1, [pc, #120]	; (1ef3c <gpio_nrfx_manage_callback+0xa4>)
   1eec2:	2325      	movs	r3, #37	; 0x25
   1eec4:	4a1a      	ldr	r2, [pc, #104]	; (1ef30 <gpio_nrfx_manage_callback+0x98>)
   1eec6:	481b      	ldr	r0, [pc, #108]	; (1ef34 <gpio_nrfx_manage_callback+0x9c>)
   1eec8:	f014 fb73 	bl	335b2 <printk>
   1eecc:	481c      	ldr	r0, [pc, #112]	; (1ef40 <gpio_nrfx_manage_callback+0xa8>)
   1eece:	f014 fb70 	bl	335b2 <printk>
   1eed2:	2125      	movs	r1, #37	; 0x25
   1eed4:	4816      	ldr	r0, [pc, #88]	; (1ef30 <gpio_nrfx_manage_callback+0x98>)
   1eed6:	f014 fe6d 	bl	33bb4 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
   1eeda:	6863      	ldr	r3, [r4, #4]

	if (!sys_slist_is_empty(callbacks)) {
   1eedc:	b15b      	cbz	r3, 1eef6 <gpio_nrfx_manage_callback+0x5e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1eede:	2200      	movs	r2, #0
   1eee0:	429d      	cmp	r5, r3
   1eee2:	d113      	bne.n	1ef0c <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
   1eee4:	682b      	ldr	r3, [r5, #0]
   1eee6:	b95a      	cbnz	r2, 1ef00 <gpio_nrfx_manage_callback+0x68>
   1eee8:	68a2      	ldr	r2, [r4, #8]
	list->head = node;
   1eeea:	6063      	str	r3, [r4, #4]
Z_GENLIST_REMOVE(slist, snode)
   1eeec:	4295      	cmp	r5, r2
   1eeee:	d100      	bne.n	1eef2 <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
   1eef0:	60a3      	str	r3, [r4, #8]
	parent->next = child;
   1eef2:	2300      	movs	r3, #0
   1eef4:	602b      	str	r3, [r5, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   1eef6:	b976      	cbnz	r6, 1ef16 <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1eef8:	2000      	movs	r0, #0
				     callback, set);
}
   1eefa:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1eefc:	460b      	mov	r3, r1
   1eefe:	e7ef      	b.n	1eee0 <gpio_nrfx_manage_callback+0x48>
	parent->next = child;
   1ef00:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1ef02:	68a3      	ldr	r3, [r4, #8]
   1ef04:	429d      	cmp	r5, r3
	list->tail = node;
   1ef06:	bf08      	it	eq
   1ef08:	60a2      	streq	r2, [r4, #8]
   1ef0a:	e7f2      	b.n	1eef2 <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ef0c:	6819      	ldr	r1, [r3, #0]
	return node->next;
   1ef0e:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ef10:	2900      	cmp	r1, #0
   1ef12:	d1f3      	bne.n	1eefc <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   1ef14:	b13e      	cbz	r6, 1ef26 <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
   1ef16:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   1ef18:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   1ef1a:	68a0      	ldr	r0, [r4, #8]
	list->head = node;
   1ef1c:	6065      	str	r5, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   1ef1e:	2800      	cmp	r0, #0
   1ef20:	d1ea      	bne.n	1eef8 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   1ef22:	60a5      	str	r5, [r4, #8]
   1ef24:	e7e9      	b.n	1eefa <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
   1ef26:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1ef2a:	e7e6      	b.n	1eefa <gpio_nrfx_manage_callback+0x62>
   1ef2c:	0003debb 	.word	0x0003debb
   1ef30:	0003de8e 	.word	0x0003de8e
   1ef34:	0003b773 	.word	0x0003b773
   1ef38:	0003dec4 	.word	0x0003dec4
   1ef3c:	0003ded3 	.word	0x0003ded3
   1ef40:	0003dee5 	.word	0x0003dee5

0001ef44 <nrf_gpio_pin_port_decode.isra.9.part.10>:
 *
 * @param[in,out] p_pin Pointer to the absolute pin number overriden by the pin number that is relative to the port.
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
   1ef44:	b510      	push	{r4, lr}
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1ef46:	4c07      	ldr	r4, [pc, #28]	; (1ef64 <nrf_gpio_pin_port_decode.isra.9.part.10+0x20>)
   1ef48:	4907      	ldr	r1, [pc, #28]	; (1ef68 <nrf_gpio_pin_port_decode.isra.9.part.10+0x24>)
   1ef4a:	4622      	mov	r2, r4
   1ef4c:	4807      	ldr	r0, [pc, #28]	; (1ef6c <nrf_gpio_pin_port_decode.isra.9.part.10+0x28>)
   1ef4e:	f240 230d 	movw	r3, #525	; 0x20d
   1ef52:	f014 fb2e 	bl	335b2 <printk>
   1ef56:	4620      	mov	r0, r4
    {
        *p_pin = *p_pin & 0x1F;
        return NRF_P1;
    }
#endif
}
   1ef58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1ef5c:	f240 210d 	movw	r1, #525	; 0x20d
   1ef60:	f014 be28 	b.w	33bb4 <assert_post_action>
   1ef64:	0003df28 	.word	0x0003df28
   1ef68:	0003df5b 	.word	0x0003df5b
   1ef6c:	0003b773 	.word	0x0003b773

0001ef70 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(struct device *port)
{
   1ef70:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   1ef72:	4b09      	ldr	r3, [pc, #36]	; (1ef98 <gpio_nrfx_init+0x28>)
   1ef74:	781a      	ldrb	r2, [r3, #0]
   1ef76:	b96a      	cbnz	r2, 1ef94 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   1ef78:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1ef7a:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   1ef7c:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1ef7e:	2105      	movs	r1, #5
   1ef80:	f7fb fe3c 	bl	1abfc <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   1ef84:	2031      	movs	r0, #49	; 0x31
   1ef86:	f7fb fe29 	bl	1abdc <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1ef8a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1ef8e:	4b03      	ldr	r3, [pc, #12]	; (1ef9c <gpio_nrfx_init+0x2c>)
   1ef90:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   1ef94:	2000      	movs	r0, #0
   1ef96:	bd08      	pop	{r3, pc}
   1ef98:	20027fb9 	.word	0x20027fb9
   1ef9c:	40031000 	.word	0x40031000

0001efa0 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1efa0:	4b2e      	ldr	r3, [pc, #184]	; (1f05c <gpio_nrfx_config+0xbc>)
{
   1efa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1efa6:	4013      	ands	r3, r2
   1efa8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1efac:	6840      	ldr	r0, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1efae:	d044      	beq.n	1f03a <gpio_nrfx_config+0x9a>
   1efb0:	d808      	bhi.n	1efc4 <gpio_nrfx_config+0x24>
   1efb2:	2b02      	cmp	r3, #2
   1efb4:	d043      	beq.n	1f03e <gpio_nrfx_config+0x9e>
   1efb6:	2b06      	cmp	r3, #6
   1efb8:	d043      	beq.n	1f042 <gpio_nrfx_config+0xa2>
   1efba:	2b00      	cmp	r3, #0
   1efbc:	d041      	beq.n	1f042 <gpio_nrfx_config+0xa2>
		return -EINVAL;
   1efbe:	f06f 0015 	mvn.w	r0, #21
   1efc2:	e038      	b.n	1f036 <gpio_nrfx_config+0x96>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1efc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1efc8:	d03d      	beq.n	1f046 <gpio_nrfx_config+0xa6>
   1efca:	d804      	bhi.n	1efd6 <gpio_nrfx_config+0x36>
   1efcc:	4c24      	ldr	r4, [pc, #144]	; (1f060 <gpio_nrfx_config+0xc0>)
   1efce:	42a3      	cmp	r3, r4
   1efd0:	d1f5      	bne.n	1efbe <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_H0D1;
   1efd2:	2407      	movs	r4, #7
   1efd4:	e006      	b.n	1efe4 <gpio_nrfx_config+0x44>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1efd6:	4c23      	ldr	r4, [pc, #140]	; (1f064 <gpio_nrfx_config+0xc4>)
   1efd8:	42a3      	cmp	r3, r4
   1efda:	d036      	beq.n	1f04a <gpio_nrfx_config+0xaa>
   1efdc:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1efe0:	d1ed      	bne.n	1efbe <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_H0H1;
   1efe2:	2403      	movs	r4, #3
	if ((flags & GPIO_PULL_UP) != 0) {
   1efe4:	06d6      	lsls	r6, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
   1efe6:	bf54      	ite	pl
   1efe8:	f3c2 1740 	ubfxpl	r7, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   1efec:	2703      	movmi	r7, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1efee:	f482 7380 	eor.w	r3, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   1eff2:	0595      	lsls	r5, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   1eff4:	f3c2 2640 	ubfx	r6, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1eff8:	f3c3 2800 	ubfx	r8, r3, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   1effc:	d505      	bpl.n	1f00a <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1effe:	0513      	lsls	r3, r2, #20
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f000:	6845      	ldr	r5, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1f002:	d524      	bpl.n	1f04e <gpio_nrfx_config+0xae>
			nrf_gpio_port_out_set(reg, BIT(pin));
   1f004:	2301      	movs	r3, #1
   1f006:	408b      	lsls	r3, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   1f008:	60ab      	str	r3, [r5, #8]
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   1f00a:	7a05      	ldrb	r5, [r0, #8]
   1f00c:	f001 011f 	and.w	r1, r1, #31
   1f010:	ea41 1545 	orr.w	r5, r1, r5, lsl #5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f014:	4628      	mov	r0, r5
   1f016:	f018 fec5 	bl	37da4 <nrf_gpio_pin_present_check>
   1f01a:	b908      	cbnz	r0, 1f020 <gpio_nrfx_config+0x80>
   1f01c:	f7ff ff92 	bl	1ef44 <nrf_gpio_pin_port_decode.isra.9.part.10>
	return 0;
   1f020:	2000      	movs	r0, #0
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1f022:	ea46 0348 	orr.w	r3, r6, r8, lsl #1
   1f026:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1f02a:	4a0f      	ldr	r2, [pc, #60]	; (1f068 <gpio_nrfx_config+0xc8>)
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1f02c:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1f030:	3580      	adds	r5, #128	; 0x80
   1f032:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
}
   1f036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		drive = NRF_GPIO_PIN_H0S1;
   1f03a:	2401      	movs	r4, #1
   1f03c:	e7d2      	b.n	1efe4 <gpio_nrfx_config+0x44>
		drive = NRF_GPIO_PIN_D0S1;
   1f03e:	2404      	movs	r4, #4
   1f040:	e7d0      	b.n	1efe4 <gpio_nrfx_config+0x44>
		drive = NRF_GPIO_PIN_S0S1;
   1f042:	461c      	mov	r4, r3
   1f044:	e7ce      	b.n	1efe4 <gpio_nrfx_config+0x44>
		drive = NRF_GPIO_PIN_S0H1;
   1f046:	2402      	movs	r4, #2
   1f048:	e7cc      	b.n	1efe4 <gpio_nrfx_config+0x44>
		drive = NRF_GPIO_PIN_D0H1;
   1f04a:	2405      	movs	r4, #5
   1f04c:	e7ca      	b.n	1efe4 <gpio_nrfx_config+0x44>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   1f04e:	0553      	lsls	r3, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   1f050:	bf42      	ittt	mi
   1f052:	2301      	movmi	r3, #1
   1f054:	408b      	lslmi	r3, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   1f056:	60eb      	strmi	r3, [r5, #12]
   1f058:	e7d7      	b.n	1f00a <gpio_nrfx_config+0x6a>
   1f05a:	bf00      	nop
   1f05c:	00f00006 	.word	0x00f00006
   1f060:	00100006 	.word	0x00100006
   1f064:	00400002 	.word	0x00400002
   1f068:	40842500 	.word	0x40842500

0001f06c <nrf_gpio_cfg_sense_set>:
{
   1f06c:	b538      	push	{r3, r4, r5, lr}
   1f06e:	4605      	mov	r5, r0
   1f070:	460c      	mov	r4, r1
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f072:	f018 fe97 	bl	37da4 <nrf_gpio_pin_present_check>
   1f076:	b908      	cbnz	r0, 1f07c <nrf_gpio_cfg_sense_set+0x10>
   1f078:	f7ff ff64 	bl	1ef44 <nrf_gpio_pin_port_decode.isra.9.part.10>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1f07c:	4805      	ldr	r0, [pc, #20]	; (1f094 <nrf_gpio_cfg_sense_set+0x28>)
   1f07e:	eb00 0085 	add.w	r0, r0, r5, lsl #2
   1f082:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
   1f086:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1f08a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
   1f08e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
   1f092:	bd38      	pop	{r3, r4, r5, pc}
   1f094:	40842500 	.word	0x40842500

0001f098 <gpiote_pin_int_cfg>:
{
   1f098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1f09c:	6843      	ldr	r3, [r0, #4]
   1f09e:	f001 041f 	and.w	r4, r1, #31
   1f0a2:	7a1b      	ldrb	r3, [r3, #8]
{
   1f0a4:	460d      	mov	r5, r1
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1f0a6:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1f0aa:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   1f0ac:	4e46      	ldr	r6, [pc, #280]	; (1f1c8 <gpiote_pin_int_cfg+0x130>)
	struct gpio_nrfx_data *data = get_port_data(port);
   1f0ae:	68c7      	ldr	r7, [r0, #12]
   1f0b0:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
   1f0b4:	b2d2      	uxtb	r2, r2
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1f0b6:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   1f0ba:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   1f0be:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   1f0c2:	428c      	cmp	r4, r1
   1f0c4:	d167      	bne.n	1f196 <gpiote_pin_int_cfg+0xfe>
		    && (intenset & BIT(i))) {
   1f0c6:	fa22 f103 	lsr.w	r1, r2, r3
   1f0ca:	07c9      	lsls	r1, r1, #31
   1f0cc:	d563      	bpl.n	1f196 <gpiote_pin_int_cfg+0xfe>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   1f0ce:	009a      	lsls	r2, r3, #2
   1f0d0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1f0d4:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   1f0d8:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
   1f0dc:	f021 0101 	bic.w	r1, r1, #1
   1f0e0:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   1f0e4:	2201      	movs	r2, #1
   1f0e6:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENCLR = mask;
   1f0ea:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1f0ee:	4620      	mov	r0, r4
   1f0f0:	2100      	movs	r1, #0
   1f0f2:	f7ff ffbb 	bl	1f06c <nrf_gpio_cfg_sense_set>
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
   1f0f6:	68f8      	ldr	r0, [r7, #12]
   1f0f8:	40e8      	lsrs	r0, r5
   1f0fa:	f010 0001 	ands.w	r0, r0, #1
   1f0fe:	d048      	beq.n	1f192 <gpiote_pin_int_cfg+0xfa>
   1f100:	6938      	ldr	r0, [r7, #16]
   1f102:	40e8      	lsrs	r0, r5
   1f104:	f010 0001 	ands.w	r0, r0, #1
   1f108:	d043      	beq.n	1f192 <gpiote_pin_int_cfg+0xfa>
		if (data->trig_edge & BIT(pin)) {
   1f10a:	69b8      	ldr	r0, [r7, #24]
   1f10c:	40e8      	lsrs	r0, r5
   1f10e:	f010 0801 	ands.w	r8, r0, #1
   1f112:	d04c      	beq.n	1f1ae <gpiote_pin_int_cfg+0x116>
			if (data->double_edge & BIT(pin)) {
   1f114:	69fb      	ldr	r3, [r7, #28]
   1f116:	40eb      	lsrs	r3, r5
   1f118:	07db      	lsls	r3, r3, #31
   1f11a:	d440      	bmi.n	1f19e <gpiote_pin_int_cfg+0x106>
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1f11c:	697b      	ldr	r3, [r7, #20]
   1f11e:	fa23 f505 	lsr.w	r5, r3, r5
				pol = NRF_GPIOTE_POLARITY_HITOLO;
   1f122:	f015 0f01 	tst.w	r5, #1
   1f126:	bf14      	ite	ne
   1f128:	2501      	movne	r5, #1
   1f12a:	2502      	moveq	r5, #2
   1f12c:	2100      	movs	r1, #0
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
   1f12e:	f501 73a2 	add.w	r3, r1, #324	; 0x144
   1f132:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
   1f136:	f010 0003 	ands.w	r0, r0, #3
   1f13a:	d132      	bne.n	1f1a2 <gpiote_pin_int_cfg+0x10a>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1f13c:	008b      	lsls	r3, r1, #2
   1f13e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f142:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   1f146:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f14a:	0224      	lsls	r4, r4, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1f14c:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
   1f150:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   1f154:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f158:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1f15c:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
   1f160:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   1f164:	4314      	orrs	r4, r2
			nrf_gpiote_event_t evt =
   1f166:	f101 0240 	add.w	r2, r1, #64	; 0x40
   1f16a:	0092      	lsls	r2, r2, #2
    return ((uint32_t)p_reg + event);
   1f16c:	b292      	uxth	r2, r2
   1f16e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1f172:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f176:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f17a:	6010      	str	r0, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1f17c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1f180:	f042 0201 	orr.w	r2, r2, #1
   1f184:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   1f188:	2301      	movs	r3, #1
   1f18a:	fa03 f101 	lsl.w	r1, r3, r1
    p_reg->INTENSET = mask;
   1f18e:	f8c6 1304 	str.w	r1, [r6, #772]	; 0x304
}
   1f192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1f196:	3301      	adds	r3, #1
   1f198:	2b08      	cmp	r3, #8
   1f19a:	d18c      	bne.n	1f0b6 <gpiote_pin_int_cfg+0x1e>
   1f19c:	e7a7      	b.n	1f0ee <gpiote_pin_int_cfg+0x56>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   1f19e:	2503      	movs	r5, #3
   1f1a0:	e7c4      	b.n	1f12c <gpiote_pin_int_cfg+0x94>
   1f1a2:	3101      	adds	r1, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   1f1a4:	2908      	cmp	r1, #8
   1f1a6:	d1c2      	bne.n	1f12e <gpiote_pin_int_cfg+0x96>
	return -ENODEV;
   1f1a8:	f06f 0012 	mvn.w	r0, #18
   1f1ac:	e7f1      	b.n	1f192 <gpiote_pin_int_cfg+0xfa>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1f1ae:	697b      	ldr	r3, [r7, #20]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1f1b0:	4620      	mov	r0, r4
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1f1b2:	fa23 f505 	lsr.w	r5, r3, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
   1f1b6:	f015 0f01 	tst.w	r5, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1f1ba:	bf0c      	ite	eq
   1f1bc:	2103      	moveq	r1, #3
   1f1be:	2102      	movne	r1, #2
   1f1c0:	f7ff ff54 	bl	1f06c <nrf_gpio_cfg_sense_set>
	int res = 0;
   1f1c4:	4640      	mov	r0, r8
   1f1c6:	e7e4      	b.n	1f192 <gpiote_pin_int_cfg+0xfa>
   1f1c8:	40031000 	.word	0x40031000

0001f1cc <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1f1cc:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   1f1d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f1d4:	4605      	mov	r5, r0
   1f1d6:	460f      	mov	r7, r1
   1f1d8:	4690      	mov	r8, r2
   1f1da:	461e      	mov	r6, r3
	struct gpio_nrfx_data *data = get_port_data(port);
   1f1dc:	68c4      	ldr	r4, [r0, #12]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1f1de:	d13c      	bne.n	1f25a <gpio_nrfx_pin_interrupt_configure+0x8e>
	u32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1f1e0:	6843      	ldr	r3, [r0, #4]
   1f1e2:	f001 091f 	and.w	r9, r1, #31
   1f1e6:	7a1b      	ldrb	r3, [r3, #8]
   1f1e8:	ea49 1943 	orr.w	r9, r9, r3, lsl #5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f1ec:	4648      	mov	r0, r9
   1f1ee:	f018 fdd9 	bl	37da4 <nrf_gpio_pin_present_check>
   1f1f2:	b908      	cbnz	r0, 1f1f8 <gpio_nrfx_pin_interrupt_configure+0x2c>
   1f1f4:	f7ff fea6 	bl	1ef44 <nrf_gpio_pin_port_decode.isra.9.part.10>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1f1f8:	4b1f      	ldr	r3, [pc, #124]	; (1f278 <gpio_nrfx_pin_interrupt_configure+0xac>)
   1f1fa:	f109 0980 	add.w	r9, r9, #128	; 0x80
   1f1fe:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1f202:	07db      	lsls	r3, r3, #31
   1f204:	d433      	bmi.n	1f26e <gpio_nrfx_pin_interrupt_configure+0xa2>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1f206:	2301      	movs	r3, #1
   1f208:	68e2      	ldr	r2, [r4, #12]
   1f20a:	40bb      	lsls	r3, r7
   1f20c:	4313      	orrs	r3, r2
   1f20e:	60e3      	str	r3, [r4, #12]
	WRITE_BIT(data->int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1f210:	2301      	movs	r3, #1
   1f212:	6922      	ldr	r2, [r4, #16]
   1f214:	40bb      	lsls	r3, r7
   1f216:	f5b8 5f00 	cmp.w	r8, #8192	; 0x2000
   1f21a:	bf14      	ite	ne
   1f21c:	431a      	orrne	r2, r3
   1f21e:	439a      	biceq	r2, r3
   1f220:	6122      	str	r2, [r4, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1f222:	69a2      	ldr	r2, [r4, #24]
   1f224:	f5b8 3fa0 	cmp.w	r8, #81920	; 0x14000
   1f228:	bf0c      	ite	eq
   1f22a:	431a      	orreq	r2, r3
   1f22c:	439a      	bicne	r2, r3
   1f22e:	61a2      	str	r2, [r4, #24]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   1f230:	69e2      	ldr	r2, [r4, #28]
   1f232:	f5b6 2fc0 	cmp.w	r6, #393216	; 0x60000
   1f236:	bf0c      	ite	eq
   1f238:	431a      	orreq	r2, r3
   1f23a:	439a      	bicne	r2, r3
   1f23c:	61e2      	str	r2, [r4, #28]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1f23e:	6962      	ldr	r2, [r4, #20]
   1f240:	f5b6 2f80 	cmp.w	r6, #262144	; 0x40000
   1f244:	bf0c      	ite	eq
   1f246:	4313      	orreq	r3, r2
   1f248:	ea22 0303 	bicne.w	r3, r2, r3
   1f24c:	6163      	str	r3, [r4, #20]
	return gpiote_pin_int_cfg(port, pin);
   1f24e:	4639      	mov	r1, r7
   1f250:	4628      	mov	r0, r5
}
   1f252:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return gpiote_pin_int_cfg(port, pin);
   1f256:	f7ff bf1f 	b.w	1f098 <gpiote_pin_int_cfg>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1f25a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1f25e:	d1d2      	bne.n	1f206 <gpio_nrfx_pin_interrupt_configure+0x3a>
   1f260:	2301      	movs	r3, #1
   1f262:	fa03 f201 	lsl.w	r2, r3, r1
   1f266:	68e3      	ldr	r3, [r4, #12]
   1f268:	ea23 0302 	bic.w	r3, r3, r2
   1f26c:	e7cf      	b.n	1f20e <gpio_nrfx_pin_interrupt_configure+0x42>
}
   1f26e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1f272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1f276:	bf00      	nop
   1f278:	40842500 	.word	0x40842500

0001f27c <gpiote_event_handler>:
{
   1f27c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f280:	4f53      	ldr	r7, [pc, #332]	; (1f3d0 <gpiote_event_handler+0x154>)
   1f282:	683e      	ldr	r6, [r7, #0]
	if (port_event) {
   1f284:	2e00      	cmp	r6, #0
   1f286:	d05c      	beq.n	1f342 <gpiote_event_handler+0xc6>
	u32_t bit = 1U << pin;
   1f288:	f04f 0801 	mov.w	r8, #1
	u32_t pin = 0U;
   1f28c:	f04f 0900 	mov.w	r9, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   1f290:	4a50      	ldr	r2, [pc, #320]	; (1f3d4 <gpiote_event_handler+0x158>)
   1f292:	68d3      	ldr	r3, [r2, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   1f294:	f8d2 a004 	ldr.w	sl, [r2, #4]
	u32_t out = data->int_en & data->pin_int_en;
   1f298:	e9d3 2503 	ldrd	r2, r5, [r3, #12]
   1f29c:	4015      	ands	r5, r2
	out &= ~data->trig_edge & ~data->double_edge;
   1f29e:	e9d3 2106 	ldrd	r2, r1, [r3, #24]
   1f2a2:	430a      	orrs	r2, r1
   1f2a4:	ea25 0502 	bic.w	r5, r5, r2
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
   1f2a8:	f8da 2004 	ldr.w	r2, [sl, #4]
	u32_t pin_states = ~(port_in ^ data->int_active_level);
   1f2ac:	695b      	ldr	r3, [r3, #20]
    return p_reg->IN;
   1f2ae:	6914      	ldr	r4, [r2, #16]
   1f2b0:	405c      	eors	r4, r3
	u32_t out = pin_states & level_pins;
   1f2b2:	ea25 0404 	bic.w	r4, r5, r4
	while (level_pins) {
   1f2b6:	bb8d      	cbnz	r5, 1f31c <gpiote_event_handler+0xa0>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f2b8:	603d      	str	r5, [r7, #0]
	u32_t fired_triggers[GPIO_COUNT] = {0};
   1f2ba:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   1f2bc:	2001      	movs	r0, #1
   1f2be:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   1f2c0:	4945      	ldr	r1, [pc, #276]	; (1f3d8 <gpiote_event_handler+0x15c>)
   1f2c2:	4d46      	ldr	r5, [pc, #280]	; (1f3dc <gpiote_event_handler+0x160>)
   1f2c4:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
   1f2c8:	fa00 fc03 	lsl.w	ip, r0, r3
   1f2cc:	ea1c 0f02 	tst.w	ip, r2
   1f2d0:	d00d      	beq.n	1f2ee <gpiote_event_handler+0x72>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f2d2:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   1f2d6:	b152      	cbz	r2, 1f2ee <gpiote_event_handler+0x72>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1f2d8:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   1f2dc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f2e0:	f845 7023 	str.w	r7, [r5, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1f2e4:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   1f2e8:	fa00 f202 	lsl.w	r2, r0, r2
   1f2ec:	4314      	orrs	r4, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1f2ee:	3301      	adds	r3, #1
   1f2f0:	2b08      	cmp	r3, #8
   1f2f2:	d1e7      	bne.n	1f2c4 <gpiote_event_handler+0x48>
	if (fired_triggers[0]) {
   1f2f4:	bb3c      	cbnz	r4, 1f346 <gpiote_event_handler+0xca>
	if (port_event) {
   1f2f6:	b17e      	cbz	r6, 1f318 <gpiote_event_handler+0x9c>
	u32_t bit = 1U << pin;
   1f2f8:	2601      	movs	r6, #1
	u32_t pin = 0U;
   1f2fa:	2700      	movs	r7, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
   1f2fc:	4b35      	ldr	r3, [pc, #212]	; (1f3d4 <gpiote_event_handler+0x158>)
   1f2fe:	68dd      	ldr	r5, [r3, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   1f300:	f8d3 8004 	ldr.w	r8, [r3, #4]
	u32_t out = data->int_en & data->pin_int_en;
   1f304:	e9d5 3403 	ldrd	r3, r4, [r5, #12]
   1f308:	401c      	ands	r4, r3
	out &= ~data->trig_edge & ~data->double_edge;
   1f30a:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
   1f30e:	4313      	orrs	r3, r2
   1f310:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
   1f314:	2c00      	cmp	r4, #0
   1f316:	d145      	bne.n	1f3a4 <gpiote_event_handler+0x128>
}
   1f318:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (level_pins & bit) {
   1f31c:	ea15 0f08 	tst.w	r5, r8
   1f320:	d00a      	beq.n	1f338 <gpiote_event_handler+0xbc>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1f322:	f89a 3008 	ldrb.w	r3, [sl, #8]
   1f326:	f009 001f 	and.w	r0, r9, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1f32a:	2100      	movs	r1, #0
   1f32c:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   1f330:	f7ff fe9c 	bl	1f06c <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1f334:	ea25 0508 	bic.w	r5, r5, r8
		++pin;
   1f338:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
   1f33c:	ea4f 0848 	mov.w	r8, r8, lsl #1
   1f340:	e7b9      	b.n	1f2b6 <gpiote_event_handler+0x3a>
	u32_t fired_triggers[GPIO_COUNT] = {0};
   1f342:	4634      	mov	r4, r6
   1f344:	e7b9      	b.n	1f2ba <gpiote_event_handler+0x3e>
	struct gpio_nrfx_data *data = get_port_data(port);
   1f346:	4b23      	ldr	r3, [pc, #140]	; (1f3d4 <gpiote_event_handler+0x158>)
   1f348:	f8d3 900c 	ldr.w	r9, [r3, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1f34c:	f8d9 5004 	ldr.w	r5, [r9, #4]
   1f350:	2d00      	cmp	r5, #0
   1f352:	d0d0      	beq.n	1f2f6 <gpiote_event_handler+0x7a>
			cb->handler(port, cb, cb->pin_mask & pins);
   1f354:	4698      	mov	r8, r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f356:	682f      	ldr	r7, [r5, #0]
			__ASSERT(cb->handler, "No callback handler!");
   1f358:	f8df a08c 	ldr.w	sl, [pc, #140]	; 1f3e8 <gpiote_event_handler+0x16c>
   1f35c:	f8df b08c 	ldr.w	fp, [pc, #140]	; 1f3ec <gpiote_event_handler+0x170>
		if ((cb->pin_mask & pins) & data->int_en) {
   1f360:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1f364:	68aa      	ldr	r2, [r5, #8]
   1f366:	4023      	ands	r3, r4
   1f368:	4213      	tst	r3, r2
   1f36a:	d016      	beq.n	1f39a <gpiote_event_handler+0x11e>
			__ASSERT(cb->handler, "No callback handler!");
   1f36c:	686b      	ldr	r3, [r5, #4]
   1f36e:	b973      	cbnz	r3, 1f38e <gpiote_event_handler+0x112>
   1f370:	4659      	mov	r1, fp
   1f372:	f240 13a7 	movw	r3, #423	; 0x1a7
   1f376:	4652      	mov	r2, sl
   1f378:	4819      	ldr	r0, [pc, #100]	; (1f3e0 <gpiote_event_handler+0x164>)
   1f37a:	f014 f91a 	bl	335b2 <printk>
   1f37e:	4819      	ldr	r0, [pc, #100]	; (1f3e4 <gpiote_event_handler+0x168>)
   1f380:	f014 f917 	bl	335b2 <printk>
   1f384:	f240 11a7 	movw	r1, #423	; 0x1a7
   1f388:	4650      	mov	r0, sl
   1f38a:	f014 fc13 	bl	33bb4 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   1f38e:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   1f392:	4629      	mov	r1, r5
   1f394:	4022      	ands	r2, r4
   1f396:	4640      	mov	r0, r8
   1f398:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1f39a:	2f00      	cmp	r7, #0
   1f39c:	d0ab      	beq.n	1f2f6 <gpiote_event_handler+0x7a>
   1f39e:	463d      	mov	r5, r7
   1f3a0:	683f      	ldr	r7, [r7, #0]
   1f3a2:	e7dd      	b.n	1f360 <gpiote_event_handler+0xe4>
		if (level_pins & bit) {
   1f3a4:	4226      	tst	r6, r4
   1f3a6:	d010      	beq.n	1f3ca <gpiote_event_handler+0x14e>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1f3a8:	696b      	ldr	r3, [r5, #20]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1f3aa:	f898 2008 	ldrb.w	r2, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1f3ae:	40fb      	lsrs	r3, r7
		return NRF_GPIO_PIN_SENSE_HIGH;
   1f3b0:	f013 0f01 	tst.w	r3, #1
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1f3b4:	f007 001f 	and.w	r0, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1f3b8:	bf0c      	ite	eq
   1f3ba:	2103      	moveq	r1, #3
   1f3bc:	2102      	movne	r1, #2
   1f3be:	ea40 1042 	orr.w	r0, r0, r2, lsl #5
   1f3c2:	f7ff fe53 	bl	1f06c <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1f3c6:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   1f3ca:	3701      	adds	r7, #1
		bit <<= 1;
   1f3cc:	0076      	lsls	r6, r6, #1
   1f3ce:	e7a1      	b.n	1f314 <gpiote_event_handler+0x98>
   1f3d0:	4003117c 	.word	0x4003117c
   1f3d4:	20020564 	.word	0x20020564
   1f3d8:	40031000 	.word	0x40031000
   1f3dc:	40031100 	.word	0x40031100
   1f3e0:	0003b773 	.word	0x0003b773
   1f3e4:	0003dee5 	.word	0x0003dee5
   1f3e8:	0003defc 	.word	0x0003defc
   1f3ec:	0003f56b 	.word	0x0003f56b

0001f3f0 <twim_2_init>:
#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
#endif

#ifdef CONFIG_I2C_2_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(2);
   1f3f0:	b510      	push	{r4, lr}
   1f3f2:	4604      	mov	r4, r0
   1f3f4:	2200      	movs	r2, #0
   1f3f6:	2101      	movs	r1, #1
   1f3f8:	200a      	movs	r0, #10
   1f3fa:	f7fb fbff 	bl	1abfc <z_arm_irq_priority_set>
	nrfx_err_t result = nrfx_twim_init(&get_dev_config(dev)->twim,
   1f3fe:	6860      	ldr	r0, [r4, #4]
   1f400:	4623      	mov	r3, r4
   1f402:	4a0e      	ldr	r2, [pc, #56]	; (1f43c <twim_2_init+0x4c>)
   1f404:	f100 0108 	add.w	r1, r0, #8
   1f408:	f00b fd5e 	bl	2aec8 <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
   1f40c:	4b0c      	ldr	r3, [pc, #48]	; (1f440 <twim_2_init+0x50>)
   1f40e:	4298      	cmp	r0, r3
   1f410:	d011      	beq.n	1f436 <twim_2_init+0x46>
		LOG_ERR("Failed to initialize device: %s",
   1f412:	2301      	movs	r3, #1
   1f414:	f04f 0000 	mov.w	r0, #0
   1f418:	4a0a      	ldr	r2, [pc, #40]	; (1f444 <twim_2_init+0x54>)
   1f41a:	f363 0007 	bfi	r0, r3, #0, #8
   1f41e:	4b0a      	ldr	r3, [pc, #40]	; (1f448 <twim_2_init+0x58>)
   1f420:	490a      	ldr	r1, [pc, #40]	; (1f44c <twim_2_init+0x5c>)
   1f422:	1a9b      	subs	r3, r3, r2
   1f424:	08db      	lsrs	r3, r3, #3
   1f426:	f363 108f 	bfi	r0, r3, #6, #10
   1f42a:	6822      	ldr	r2, [r4, #0]
   1f42c:	f014 fbd9 	bl	33be2 <log_string_sync>
		return -EBUSY;
   1f430:	f06f 000f 	mvn.w	r0, #15
I2C_NRFX_TWIM_DEVICE(2);
   1f434:	bd10      	pop	{r4, pc}
	return 0;
   1f436:	2000      	movs	r0, #0
I2C_NRFX_TWIM_DEVICE(2);
   1f438:	e7fc      	b.n	1f434 <twim_2_init+0x44>
   1f43a:	bf00      	nop
   1f43c:	0001f595 	.word	0x0001f595
   1f440:	0bad0000 	.word	0x0bad0000
   1f444:	00039f48 	.word	0x00039f48
   1f448:	00039f98 	.word	0x00039f98
   1f44c:	0003dfc6 	.word	0x0003dfc6

0001f450 <i2c_nrfx_twim_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
   1f450:	07ca      	lsls	r2, r1, #31
{
   1f452:	b508      	push	{r3, lr}
	nrfx_twim_t const *inst = &(get_dev_config(dev)->twim);
   1f454:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & dev_config) {
   1f456:	d413      	bmi.n	1f480 <i2c_nrfx_twim_configure+0x30>
	switch (I2C_SPEED_GET(dev_config)) {
   1f458:	f3c1 0242 	ubfx	r2, r1, #1, #3
   1f45c:	2a01      	cmp	r2, #1
   1f45e:	d012      	beq.n	1f486 <i2c_nrfx_twim_configure+0x36>
   1f460:	2a02      	cmp	r2, #2
   1f462:	d019      	beq.n	1f498 <i2c_nrfx_twim_configure+0x48>
		LOG_ERR("unsupported speed");
   1f464:	2301      	movs	r3, #1
   1f466:	f04f 0000 	mov.w	r0, #0
   1f46a:	4a0d      	ldr	r2, [pc, #52]	; (1f4a0 <i2c_nrfx_twim_configure+0x50>)
   1f46c:	f363 0007 	bfi	r0, r3, #0, #8
   1f470:	4b0c      	ldr	r3, [pc, #48]	; (1f4a4 <i2c_nrfx_twim_configure+0x54>)
   1f472:	490d      	ldr	r1, [pc, #52]	; (1f4a8 <i2c_nrfx_twim_configure+0x58>)
   1f474:	1a9b      	subs	r3, r3, r2
   1f476:	08db      	lsrs	r3, r3, #3
   1f478:	f363 108f 	bfi	r0, r3, #6, #10
   1f47c:	f014 fbb1 	bl	33be2 <log_string_sync>
		return -EINVAL;
   1f480:	f06f 0015 	mvn.w	r0, #21
   1f484:	e007      	b.n	1f496 <i2c_nrfx_twim_configure+0x46>
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   1f486:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_100K);
   1f48a:	681b      	ldr	r3, [r3, #0]
   1f48c:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	get_dev_data(dev)->dev_config = dev_config;
   1f490:	68c3      	ldr	r3, [r0, #12]
	return 0;
   1f492:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
   1f494:	6359      	str	r1, [r3, #52]	; 0x34
}
   1f496:	bd08      	pop	{r3, pc}
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_400K);
   1f498:	681b      	ldr	r3, [r3, #0]
   1f49a:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
   1f49e:	e7f5      	b.n	1f48c <i2c_nrfx_twim_configure+0x3c>
   1f4a0:	00039f48 	.word	0x00039f48
   1f4a4:	00039f98 	.word	0x00039f98
   1f4a8:	0003df85 	.word	0x0003df85

0001f4ac <i2c_nrfx_twim_transfer>:
{
   1f4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f4b0:	4604      	mov	r4, r0
   1f4b2:	b087      	sub	sp, #28
   1f4b4:	460d      	mov	r5, r1
   1f4b6:	4691      	mov	r9, r2
   1f4b8:	469a      	mov	sl, r3
	k_sem_take(&(get_dev_data(dev)->transfer_sync), K_FOREVER);
   1f4ba:	68c0      	ldr	r0, [r0, #12]
	return z_impl_k_sem_take(sem, timeout);
   1f4bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f4c0:	f00e fdce 	bl	2e060 <z_impl_k_sem_take>
	nrfx_twim_enable(&get_dev_config(dev)->twim);
   1f4c4:	6860      	ldr	r0, [r4, #4]
   1f4c6:	f00b fd71 	bl	2afac <nrfx_twim_enable>
	for (size_t i = 0; i < num_msgs; i++) {
   1f4ca:	2600      	movs	r6, #0
		if (res != NRFX_SUCCESS) {
   1f4cc:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 1f590 <i2c_nrfx_twim_transfer+0xe4>
	for (size_t i = 0; i < num_msgs; i++) {
   1f4d0:	454e      	cmp	r6, r9
   1f4d2:	f8d4 b004 	ldr.w	fp, [r4, #4]
   1f4d6:	d301      	bcc.n	1f4dc <i2c_nrfx_twim_transfer+0x30>
	int ret = 0;
   1f4d8:	2500      	movs	r5, #0
   1f4da:	e024      	b.n	1f526 <i2c_nrfx_twim_transfer+0x7a>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   1f4dc:	7a2f      	ldrb	r7, [r5, #8]
   1f4de:	f017 0108 	ands.w	r1, r7, #8
   1f4e2:	d149      	bne.n	1f578 <i2c_nrfx_twim_transfer+0xcc>
		nrfx_twim_xfer_desc_t cur_xfer = {
   1f4e4:	2212      	movs	r2, #18
   1f4e6:	f10d 0006 	add.w	r0, sp, #6
   1f4ea:	f019 fda4 	bl	39036 <memset>
					  NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX
   1f4ee:	f007 0301 	and.w	r3, r7, #1
		nrfx_twim_xfer_desc_t cur_xfer = {
   1f4f2:	f88d 3004 	strb.w	r3, [sp, #4]
   1f4f6:	686b      	ldr	r3, [r5, #4]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
   1f4f8:	f017 0f02 	tst.w	r7, #2
		nrfx_twim_xfer_desc_t cur_xfer = {
   1f4fc:	9302      	str	r3, [sp, #8]
   1f4fe:	682b      	ldr	r3, [r5, #0]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
   1f500:	bf0c      	ite	eq
   1f502:	2220      	moveq	r2, #32
   1f504:	2200      	movne	r2, #0
   1f506:	a901      	add	r1, sp, #4
   1f508:	4658      	mov	r0, fp
		nrfx_twim_xfer_desc_t cur_xfer = {
   1f50a:	f88d a005 	strb.w	sl, [sp, #5]
   1f50e:	9304      	str	r3, [sp, #16]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
   1f510:	f00b fdac 	bl	2b06c <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
   1f514:	4540      	cmp	r0, r8
   1f516:	d010      	beq.n	1f53a <i2c_nrfx_twim_transfer+0x8e>
			if (res == NRFX_ERROR_BUSY) {
   1f518:	4b19      	ldr	r3, [pc, #100]	; (1f580 <i2c_nrfx_twim_transfer+0xd4>)
				ret = -EIO;
   1f51a:	4298      	cmp	r0, r3
   1f51c:	bf0c      	ite	eq
   1f51e:	f06f 050f 	mvneq.w	r5, #15
   1f522:	f06f 0504 	mvnne.w	r5, #4
	nrfx_twim_disable(&get_dev_config(dev)->twim);
   1f526:	6860      	ldr	r0, [r4, #4]
   1f528:	f00b fd6a 	bl	2b000 <nrfx_twim_disable>
	k_sem_give(&(get_dev_data(dev)->transfer_sync));
   1f52c:	68e0      	ldr	r0, [r4, #12]
	z_impl_k_sem_give(sem);
   1f52e:	f00e fd53 	bl	2dfd8 <z_impl_k_sem_give>
}
   1f532:	4628      	mov	r0, r5
   1f534:	b007      	add	sp, #28
   1f536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		k_sem_take(&(get_dev_data(dev)->completion_sync), K_FOREVER);
   1f53a:	68e0      	ldr	r0, [r4, #12]
   1f53c:	3018      	adds	r0, #24
	return z_impl_k_sem_take(sem, timeout);
   1f53e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f542:	f00e fd8d 	bl	2e060 <z_impl_k_sem_take>
		res = get_dev_data(dev)->res;
   1f546:	68e3      	ldr	r3, [r4, #12]
	return dev->driver_data;
   1f548:	350c      	adds	r5, #12
		res = get_dev_data(dev)->res;
   1f54a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   1f54c:	4542      	cmp	r2, r8
   1f54e:	d011      	beq.n	1f574 <i2c_nrfx_twim_transfer+0xc8>
			LOG_ERR("Error %d occurred for message %d", res, i);
   1f550:	2301      	movs	r3, #1
   1f552:	f04f 0000 	mov.w	r0, #0
   1f556:	490b      	ldr	r1, [pc, #44]	; (1f584 <i2c_nrfx_twim_transfer+0xd8>)
   1f558:	f363 0007 	bfi	r0, r3, #0, #8
   1f55c:	4b0a      	ldr	r3, [pc, #40]	; (1f588 <i2c_nrfx_twim_transfer+0xdc>)
			ret = -EIO;
   1f55e:	f06f 0504 	mvn.w	r5, #4
   1f562:	1ac9      	subs	r1, r1, r3
   1f564:	08c9      	lsrs	r1, r1, #3
			LOG_ERR("Error %d occurred for message %d", res, i);
   1f566:	f361 108f 	bfi	r0, r1, #6, #10
   1f56a:	4633      	mov	r3, r6
   1f56c:	4907      	ldr	r1, [pc, #28]	; (1f58c <i2c_nrfx_twim_transfer+0xe0>)
   1f56e:	f014 fb38 	bl	33be2 <log_string_sync>
			break;
   1f572:	e7d8      	b.n	1f526 <i2c_nrfx_twim_transfer+0x7a>
	for (size_t i = 0; i < num_msgs; i++) {
   1f574:	3601      	adds	r6, #1
   1f576:	e7ab      	b.n	1f4d0 <i2c_nrfx_twim_transfer+0x24>
			ret = -ENOTSUP;
   1f578:	f06f 0585 	mvn.w	r5, #133	; 0x85
   1f57c:	e7d3      	b.n	1f526 <i2c_nrfx_twim_transfer+0x7a>
   1f57e:	bf00      	nop
   1f580:	0bad000b 	.word	0x0bad000b
   1f584:	00039f98 	.word	0x00039f98
   1f588:	00039f48 	.word	0x00039f48
   1f58c:	0003df97 	.word	0x0003df97
   1f590:	0bad0000 	.word	0x0bad0000

0001f594 <event_handler>:
	switch (p_event->type) {
   1f594:	7802      	ldrb	r2, [r0, #0]
	struct i2c_nrfx_twim_data *dev_data = get_dev_data(dev);
   1f596:	68cb      	ldr	r3, [r1, #12]
	switch (p_event->type) {
   1f598:	2a01      	cmp	r2, #1
   1f59a:	d00a      	beq.n	1f5b2 <event_handler+0x1e>
   1f59c:	b11a      	cbz	r2, 1f5a6 <event_handler+0x12>
   1f59e:	2a02      	cmp	r2, #2
   1f5a0:	d009      	beq.n	1f5b6 <event_handler+0x22>
		dev_data->res = NRFX_ERROR_INTERNAL;
   1f5a2:	4a06      	ldr	r2, [pc, #24]	; (1f5bc <event_handler+0x28>)
   1f5a4:	e000      	b.n	1f5a8 <event_handler+0x14>
		dev_data->res = NRFX_SUCCESS;
   1f5a6:	4a06      	ldr	r2, [pc, #24]	; (1f5c0 <event_handler+0x2c>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   1f5a8:	631a      	str	r2, [r3, #48]	; 0x30
	z_impl_k_sem_give(sem);
   1f5aa:	f103 0018 	add.w	r0, r3, #24
   1f5ae:	f00e bd13 	b.w	2dfd8 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1f5b2:	4a04      	ldr	r2, [pc, #16]	; (1f5c4 <event_handler+0x30>)
   1f5b4:	e7f8      	b.n	1f5a8 <event_handler+0x14>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1f5b6:	4a04      	ldr	r2, [pc, #16]	; (1f5c8 <event_handler+0x34>)
   1f5b8:	e7f6      	b.n	1f5a8 <event_handler+0x14>
   1f5ba:	bf00      	nop
   1f5bc:	0bad0001 	.word	0x0bad0001
   1f5c0:	0bad0000 	.word	0x0bad0000
   1f5c4:	0bae0001 	.word	0x0bae0001
   1f5c8:	0bae0002 	.word	0x0bae0002

0001f5cc <gpio_pin_set>:
 * @retval 0 If successful.
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set(struct device *port, gpio_pin_t pin, int value)
{
   1f5cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		(const struct gpio_driver_config *)port->config_info;
	const struct gpio_driver_data *const data =
			(const struct gpio_driver_data *)port->driver_data;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1f5d0:	2501      	movs	r5, #1
   1f5d2:	6843      	ldr	r3, [r0, #4]
   1f5d4:	408d      	lsls	r5, r1
   1f5d6:	681b      	ldr	r3, [r3, #0]
{
   1f5d8:	4604      	mov	r4, r0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1f5da:	421d      	tst	r5, r3
{
   1f5dc:	4616      	mov	r6, r2
	const struct gpio_driver_data *const data =
   1f5de:	68c7      	ldr	r7, [r0, #12]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1f5e0:	d10e      	bne.n	1f600 <gpio_pin_set+0x34>
   1f5e2:	491a      	ldr	r1, [pc, #104]	; (1f64c <gpio_pin_set+0x80>)
   1f5e4:	f240 438b 	movw	r3, #1163	; 0x48b
   1f5e8:	4a19      	ldr	r2, [pc, #100]	; (1f650 <gpio_pin_set+0x84>)
   1f5ea:	481a      	ldr	r0, [pc, #104]	; (1f654 <gpio_pin_set+0x88>)
   1f5ec:	f013 ffe1 	bl	335b2 <printk>
   1f5f0:	4819      	ldr	r0, [pc, #100]	; (1f658 <gpio_pin_set+0x8c>)
   1f5f2:	f013 ffde 	bl	335b2 <printk>
   1f5f6:	f240 418b 	movw	r1, #1163	; 0x48b
   1f5fa:	4815      	ldr	r0, [pc, #84]	; (1f650 <gpio_pin_set+0x84>)
   1f5fc:	f014 fada 	bl	33bb4 <assert_post_action>
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1f600:	683b      	ldr	r3, [r7, #0]
   1f602:	421d      	tst	r5, r3
		value = (value != 0) ? 0 : 1;
   1f604:	bf18      	it	ne
   1f606:	fab6 f686 	clzne	r6, r6
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1f60a:	6863      	ldr	r3, [r4, #4]
		value = (value != 0) ? 0 : 1;
   1f60c:	bf18      	it	ne
   1f60e:	0976      	lsrne	r6, r6, #5
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1f610:	681b      	ldr	r3, [r3, #0]
   1f612:	421d      	tst	r5, r3
   1f614:	d10e      	bne.n	1f634 <gpio_pin_set+0x68>
   1f616:	490d      	ldr	r1, [pc, #52]	; (1f64c <gpio_pin_set+0x80>)
   1f618:	f240 4362 	movw	r3, #1122	; 0x462
   1f61c:	4a0c      	ldr	r2, [pc, #48]	; (1f650 <gpio_pin_set+0x84>)
   1f61e:	480d      	ldr	r0, [pc, #52]	; (1f654 <gpio_pin_set+0x88>)
   1f620:	f013 ffc7 	bl	335b2 <printk>
   1f624:	480c      	ldr	r0, [pc, #48]	; (1f658 <gpio_pin_set+0x8c>)
   1f626:	f013 ffc4 	bl	335b2 <printk>
   1f62a:	f240 4162 	movw	r1, #1122	; 0x462
   1f62e:	4808      	ldr	r0, [pc, #32]	; (1f650 <gpio_pin_set+0x84>)
   1f630:	f014 fac0 	bl	33bb4 <assert_post_action>
	if (value != 0)	{
   1f634:	b136      	cbz	r6, 1f644 <gpio_pin_set+0x78>
	return api->port_set_bits_raw(port, pins);
   1f636:	68a3      	ldr	r3, [r4, #8]
   1f638:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1f63a:	4629      	mov	r1, r5
   1f63c:	4620      	mov	r0, r4
	}

	return gpio_pin_set_raw(port, pin, value);
}
   1f63e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->port_clear_bits_raw(port, pins);
   1f642:	4718      	bx	r3
   1f644:	68a3      	ldr	r3, [r4, #8]
   1f646:	691b      	ldr	r3, [r3, #16]
   1f648:	e7f7      	b.n	1f63a <gpio_pin_set+0x6e>
   1f64a:	bf00      	nop
   1f64c:	0003e02e 	.word	0x0003e02e
   1f650:	0003e004 	.word	0x0003e004
   1f654:	0003b773 	.word	0x0003b773
   1f658:	0003e06c 	.word	0x0003e06c

0001f65c <spi_3_init>:
#ifdef CONFIG_SPI_2_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(2);
#endif

#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(3);
   1f65c:	b510      	push	{r4, lr}
   1f65e:	4604      	mov	r4, r0
   1f660:	2200      	movs	r2, #0
   1f662:	2101      	movs	r1, #1
   1f664:	200b      	movs	r0, #11
   1f666:	f7fb fac9 	bl	1abfc <z_arm_irq_priority_set>
	nrfx_err_t result = nrfx_spim_init(&get_dev_config(dev)->spim,
   1f66a:	6860      	ldr	r0, [r4, #4]
   1f66c:	4623      	mov	r3, r4
   1f66e:	4a0f      	ldr	r2, [pc, #60]	; (1f6ac <spi_3_init+0x50>)
   1f670:	f100 010c 	add.w	r1, r0, #12
   1f674:	f00b fa1c 	bl	2aab0 <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
   1f678:	4b0d      	ldr	r3, [pc, #52]	; (1f6b0 <spi_3_init+0x54>)
   1f67a:	4298      	cmp	r0, r3
   1f67c:	d011      	beq.n	1f6a2 <spi_3_init+0x46>
		LOG_ERR("Failed to initialize device: %s",
   1f67e:	2301      	movs	r3, #1
   1f680:	f04f 0000 	mov.w	r0, #0
   1f684:	4a0b      	ldr	r2, [pc, #44]	; (1f6b4 <spi_3_init+0x58>)
   1f686:	f363 0007 	bfi	r0, r3, #0, #8
   1f68a:	4b0b      	ldr	r3, [pc, #44]	; (1f6b8 <spi_3_init+0x5c>)
   1f68c:	490b      	ldr	r1, [pc, #44]	; (1f6bc <spi_3_init+0x60>)
   1f68e:	1a9b      	subs	r3, r3, r2
   1f690:	08db      	lsrs	r3, r3, #3
   1f692:	f363 108f 	bfi	r0, r3, #6, #10
   1f696:	6822      	ldr	r2, [r4, #0]
   1f698:	f014 faa3 	bl	33be2 <log_string_sync>
		return -EBUSY;
   1f69c:	f06f 000f 	mvn.w	r0, #15
SPI_NRFX_SPIM_DEVICE(3);
   1f6a0:	bd10      	pop	{r4, pc}
	spi_context_unlock_unconditionally(&get_dev_data(dev)->ctx);
   1f6a2:	68e0      	ldr	r0, [r4, #12]
   1f6a4:	f018 fbed 	bl	37e82 <spi_context_unlock_unconditionally>
	return 0;
   1f6a8:	2000      	movs	r0, #0
SPI_NRFX_SPIM_DEVICE(3);
   1f6aa:	e7f9      	b.n	1f6a0 <spi_3_init+0x44>
   1f6ac:	0001fa25 	.word	0x0001fa25
   1f6b0:	0bad0000 	.word	0x0bad0000
   1f6b4:	00039f48 	.word	0x00039f48
   1f6b8:	00039ff8 	.word	0x00039ff8
   1f6bc:	0003dfc6 	.word	0x0003dfc6

0001f6c0 <transfer_next_chunk>:
{
   1f6c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   1f6c2:	68c5      	ldr	r5, [r0, #12]
	return !!(ctx->rx_buf && ctx->rx_len);
}

static inline size_t spi_context_longest_current_buf(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   1f6c4:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   1f6c6:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   1f6c8:	b982      	cbnz	r2, 1f6ec <transfer_next_chunk+0x2c>
	if (chunk_len > 0) {
   1f6ca:	bb93      	cbnz	r3, 1f732 <__kernel_ram_size+0x32>
	int error = 0;
   1f6cc:	461c      	mov	r4, r3
	_spi_context_cs_control(ctx, on, false);
   1f6ce:	2200      	movs	r2, #0
   1f6d0:	4628      	mov	r0, r5
   1f6d2:	4611      	mov	r1, r2
   1f6d4:	f018 fbab 	bl	37e2e <_spi_context_cs_control.isra.6>
	ctx->sync_status = status;
   1f6d8:	636c      	str	r4, [r5, #52]	; 0x34
   1f6da:	f105 001c 	add.w	r0, r5, #28
   1f6de:	f00e fc7b 	bl	2dfd8 <z_impl_k_sem_give>
	dev_data->busy = false;
   1f6e2:	2300      	movs	r3, #0
   1f6e4:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
}
   1f6e8:	b004      	add	sp, #16
   1f6ea:	bd70      	pop	{r4, r5, r6, pc}
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
   1f6ec:	b31b      	cbz	r3, 1f736 <__kernel_ram_size+0x36>
		return ctx->tx_len;
	} else if (ctx->tx_len < ctx->rx_len) {
   1f6ee:	4293      	cmp	r3, r2
   1f6f0:	4619      	mov	r1, r3
   1f6f2:	bf28      	it	cs
   1f6f4:	4611      	movcs	r1, r2
	const struct spi_nrfx_config *dev_config = get_dev_config(dev);
   1f6f6:	6840      	ldr	r0, [r0, #4]
		const u8_t *tx_buf = ctx->tx_buf;
   1f6f8:	6cac      	ldr	r4, [r5, #72]	; 0x48
		if (chunk_len > dev_config->max_chunk_len) {
   1f6fa:	6886      	ldr	r6, [r0, #8]
		xfer.p_tx_buffer = tx_buf;
   1f6fc:	9400      	str	r4, [sp, #0]
   1f6fe:	42b1      	cmp	r1, r6
   1f700:	bf28      	it	cs
   1f702:	4631      	movcs	r1, r6
		dev_data->chunk_len = chunk_len;
   1f704:	65a9      	str	r1, [r5, #88]	; 0x58
	return !!(ctx->tx_buf && ctx->tx_len);
   1f706:	b1c4      	cbz	r4, 1f73a <__kernel_ram_size+0x3a>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1f708:	2a00      	cmp	r2, #0
   1f70a:	bf18      	it	ne
   1f70c:	460a      	movne	r2, r1
   1f70e:	9201      	str	r2, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   1f710:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   1f712:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   1f714:	b19a      	cbz	r2, 1f73e <__kernel_ram_size+0x3e>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1f716:	2b00      	cmp	r3, #0
   1f718:	bf18      	it	ne
   1f71a:	460b      	movne	r3, r1
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   1f71c:	2200      	movs	r2, #0
   1f71e:	4669      	mov	r1, sp
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1f720:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   1f722:	f00b fa7f 	bl	2ac24 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
   1f726:	4b07      	ldr	r3, [pc, #28]	; (1f744 <__kernel_ram_size+0x44>)
   1f728:	4298      	cmp	r0, r3
   1f72a:	d0dd      	beq.n	1f6e8 <transfer_next_chunk+0x28>
			error = -EIO;
   1f72c:	f06f 0404 	mvn.w	r4, #4
   1f730:	e7cd      	b.n	1f6ce <transfer_next_chunk+0xe>
   1f732:	4619      	mov	r1, r3
   1f734:	e7df      	b.n	1f6f6 <transfer_next_chunk+0x36>
	} else if (!ctx->rx_len) {
   1f736:	4611      	mov	r1, r2
   1f738:	e7dd      	b.n	1f6f6 <transfer_next_chunk+0x36>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1f73a:	4622      	mov	r2, r4
   1f73c:	e7e7      	b.n	1f70e <__kernel_ram_size+0xe>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1f73e:	4613      	mov	r3, r2
   1f740:	e7ec      	b.n	1f71c <__kernel_ram_size+0x1c>
   1f742:	bf00      	nop
   1f744:	0bad0000 	.word	0x0bad0000

0001f748 <spi_nrfx_transceive>:
{
   1f748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   1f74c:	68c4      	ldr	r4, [r0, #12]
{
   1f74e:	b085      	sub	sp, #20
   1f750:	461d      	mov	r5, r3
	k_sem_take(&ctx->lock, K_FOREVER);
   1f752:	1d23      	adds	r3, r4, #4
   1f754:	4680      	mov	r8, r0
   1f756:	460f      	mov	r7, r1
   1f758:	4616      	mov	r6, r2
   1f75a:	9303      	str	r3, [sp, #12]
	return z_impl_k_sem_take(sem, timeout);
   1f75c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f760:	4618      	mov	r0, r3
   1f762:	f00e fc7d 	bl	2e060 <z_impl_k_sem_take>
	struct spi_context *ctx = &get_dev_data(dev)->ctx;
   1f766:	f8d8 a00c 	ldr.w	sl, [r8, #12]
	if (spi_context_configured(ctx, spi_cfg)) {
   1f76a:	f8da 3000 	ldr.w	r3, [sl]
   1f76e:	429f      	cmp	r7, r3
   1f770:	f000 80d9 	beq.w	1f926 <spi_nrfx_transceive+0x1de>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   1f774:	88bb      	ldrh	r3, [r7, #4]
   1f776:	07d9      	lsls	r1, r3, #31
   1f778:	d518      	bpl.n	1f7ac <spi_nrfx_transceive+0x64>
		LOG_ERR("Slave mode is not supported on %s",
   1f77a:	2301      	movs	r3, #1
   1f77c:	f04f 0000 	mov.w	r0, #0
   1f780:	4a96      	ldr	r2, [pc, #600]	; (1f9dc <spi_nrfx_transceive+0x294>)
   1f782:	f363 0007 	bfi	r0, r3, #0, #8
   1f786:	4b96      	ldr	r3, [pc, #600]	; (1f9e0 <spi_nrfx_transceive+0x298>)
   1f788:	4996      	ldr	r1, [pc, #600]	; (1f9e4 <spi_nrfx_transceive+0x29c>)
   1f78a:	1a9b      	subs	r3, r3, r2
   1f78c:	08db      	lsrs	r3, r3, #3
   1f78e:	f363 108f 	bfi	r0, r3, #6, #10
   1f792:	f8d8 2000 	ldr.w	r2, [r8]
   1f796:	f014 fa24 	bl	33be2 <log_string_sync>
		return -EINVAL;
   1f79a:	f06f 0415 	mvn.w	r4, #21
	z_impl_k_sem_give(sem);
   1f79e:	9803      	ldr	r0, [sp, #12]
   1f7a0:	f00e fc1a 	bl	2dfd8 <z_impl_k_sem_give>
}
   1f7a4:	4620      	mov	r0, r4
   1f7a6:	b005      	add	sp, #20
   1f7a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   1f7ac:	071a      	lsls	r2, r3, #28
   1f7ae:	d50e      	bpl.n	1f7ce <spi_nrfx_transceive+0x86>
		LOG_ERR("Loopback mode is not supported");
   1f7b0:	2301      	movs	r3, #1
   1f7b2:	f04f 0000 	mov.w	r0, #0
   1f7b6:	4a89      	ldr	r2, [pc, #548]	; (1f9dc <spi_nrfx_transceive+0x294>)
   1f7b8:	f363 0007 	bfi	r0, r3, #0, #8
   1f7bc:	4b88      	ldr	r3, [pc, #544]	; (1f9e0 <spi_nrfx_transceive+0x298>)
   1f7be:	498a      	ldr	r1, [pc, #552]	; (1f9e8 <spi_nrfx_transceive+0x2a0>)
   1f7c0:	1a9b      	subs	r3, r3, r2
   1f7c2:	08db      	lsrs	r3, r3, #3
   1f7c4:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("Word sizes other than 8 bits"
   1f7c8:	f014 fa0b 	bl	33be2 <log_string_sync>
   1f7cc:	e7e5      	b.n	1f79a <spi_nrfx_transceive+0x52>
	if ((spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
   1f7ce:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
   1f7d2:	d00c      	beq.n	1f7ee <spi_nrfx_transceive+0xa6>
		LOG_ERR("Only single line mode is supported");
   1f7d4:	2301      	movs	r3, #1
   1f7d6:	f04f 0000 	mov.w	r0, #0
   1f7da:	4a80      	ldr	r2, [pc, #512]	; (1f9dc <spi_nrfx_transceive+0x294>)
   1f7dc:	f363 0007 	bfi	r0, r3, #0, #8
   1f7e0:	4b7f      	ldr	r3, [pc, #508]	; (1f9e0 <spi_nrfx_transceive+0x298>)
   1f7e2:	4982      	ldr	r1, [pc, #520]	; (1f9ec <spi_nrfx_transceive+0x2a4>)
   1f7e4:	1a9b      	subs	r3, r3, r2
   1f7e6:	08db      	lsrs	r3, r3, #3
   1f7e8:	f363 108f 	bfi	r0, r3, #6, #10
   1f7ec:	e7ec      	b.n	1f7c8 <spi_nrfx_transceive+0x80>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   1f7ee:	f3c3 1345 	ubfx	r3, r3, #5, #6
   1f7f2:	2b08      	cmp	r3, #8
   1f7f4:	d00c      	beq.n	1f810 <spi_nrfx_transceive+0xc8>
		LOG_ERR("Word sizes other than 8 bits"
   1f7f6:	2301      	movs	r3, #1
   1f7f8:	f04f 0000 	mov.w	r0, #0
   1f7fc:	4a77      	ldr	r2, [pc, #476]	; (1f9dc <spi_nrfx_transceive+0x294>)
   1f7fe:	f363 0007 	bfi	r0, r3, #0, #8
   1f802:	4b77      	ldr	r3, [pc, #476]	; (1f9e0 <spi_nrfx_transceive+0x298>)
   1f804:	497a      	ldr	r1, [pc, #488]	; (1f9f0 <spi_nrfx_transceive+0x2a8>)
   1f806:	1a9b      	subs	r3, r3, r2
   1f808:	08db      	lsrs	r3, r3, #3
   1f80a:	f363 108f 	bfi	r0, r3, #6, #10
   1f80e:	e7db      	b.n	1f7c8 <spi_nrfx_transceive+0x80>
	if (spi_cfg->frequency < 125000) {
   1f810:	683a      	ldr	r2, [r7, #0]
   1f812:	4b78      	ldr	r3, [pc, #480]	; (1f9f4 <spi_nrfx_transceive+0x2ac>)
   1f814:	429a      	cmp	r2, r3
   1f816:	d80c      	bhi.n	1f832 <spi_nrfx_transceive+0xea>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   1f818:	2301      	movs	r3, #1
   1f81a:	f04f 0000 	mov.w	r0, #0
   1f81e:	4a6f      	ldr	r2, [pc, #444]	; (1f9dc <spi_nrfx_transceive+0x294>)
   1f820:	f363 0007 	bfi	r0, r3, #0, #8
   1f824:	4b6e      	ldr	r3, [pc, #440]	; (1f9e0 <spi_nrfx_transceive+0x298>)
   1f826:	4974      	ldr	r1, [pc, #464]	; (1f9f8 <spi_nrfx_transceive+0x2b0>)
   1f828:	1a9b      	subs	r3, r3, r2
   1f82a:	08db      	lsrs	r3, r3, #3
   1f82c:	f363 108f 	bfi	r0, r3, #6, #10
   1f830:	e7ca      	b.n	1f7c8 <spi_nrfx_transceive+0x80>
	const nrfx_spim_t *spim = &get_dev_config(dev)->spim;
   1f832:	f8d8 3004 	ldr.w	r3, [r8, #4]
	ctx->config = spi_cfg;
   1f836:	f8ca 7000 	str.w	r7, [sl]
	const nrfx_spim_t *spim = &get_dev_config(dev)->spim;
   1f83a:	9302      	str	r3, [sp, #8]
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
   1f83c:	68bb      	ldr	r3, [r7, #8]
   1f83e:	2b00      	cmp	r3, #0
   1f840:	f000 8099 	beq.w	1f976 <spi_nrfx_transceive+0x22e>
   1f844:	f8d3 9000 	ldr.w	r9, [r3]
   1f848:	f1b9 0f00 	cmp.w	r9, #0
   1f84c:	f000 8093 	beq.w	1f976 <spi_nrfx_transceive+0x22e>
		gpio_pin_configure(ctx->config->cs->gpio_dev,
   1f850:	791b      	ldrb	r3, [r3, #4]
	struct gpio_driver_data *data =
   1f852:	f8d9 b00c 	ldr.w	fp, [r9, #12]
   1f856:	9300      	str	r3, [sp, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1f858:	2301      	movs	r3, #1
   1f85a:	9a00      	ldr	r2, [sp, #0]
   1f85c:	4093      	lsls	r3, r2
   1f85e:	9301      	str	r3, [sp, #4]
   1f860:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1f864:	9a01      	ldr	r2, [sp, #4]
   1f866:	681b      	ldr	r3, [r3, #0]
   1f868:	421a      	tst	r2, r3
   1f86a:	d10e      	bne.n	1f88a <spi_nrfx_transceive+0x142>
   1f86c:	4963      	ldr	r1, [pc, #396]	; (1f9fc <spi_nrfx_transceive+0x2b4>)
   1f86e:	f240 23ef 	movw	r3, #751	; 0x2ef
   1f872:	4a63      	ldr	r2, [pc, #396]	; (1fa00 <spi_nrfx_transceive+0x2b8>)
   1f874:	4863      	ldr	r0, [pc, #396]	; (1fa04 <spi_nrfx_transceive+0x2bc>)
   1f876:	f013 fe9c 	bl	335b2 <printk>
   1f87a:	4863      	ldr	r0, [pc, #396]	; (1fa08 <spi_nrfx_transceive+0x2c0>)
   1f87c:	f013 fe99 	bl	335b2 <printk>
   1f880:	f240 21ef 	movw	r1, #751	; 0x2ef
   1f884:	485e      	ldr	r0, [pc, #376]	; (1fa00 <spi_nrfx_transceive+0x2b8>)
   1f886:	f014 f995 	bl	33bb4 <assert_post_action>
	return api->pin_configure(port, pin, flags);
   1f88a:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1f88e:	f44f 7200 	mov.w	r2, #512	; 0x200
   1f892:	681b      	ldr	r3, [r3, #0]
   1f894:	9900      	ldr	r1, [sp, #0]
   1f896:	4648      	mov	r0, r9
   1f898:	4798      	blx	r3
	if (ret != 0) {
   1f89a:	b930      	cbnz	r0, 1f8aa <spi_nrfx_transceive+0x162>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1f89c:	f8db 3000 	ldr.w	r3, [fp]
   1f8a0:	9a01      	ldr	r2, [sp, #4]
   1f8a2:	ea23 0302 	bic.w	r3, r3, r2
   1f8a6:	f8cb 3000 	str.w	r3, [fp]
		gpio_pin_set(ctx->config->cs->gpio_dev,
   1f8aa:	f8da 2000 	ldr.w	r2, [sl]
   1f8ae:	6893      	ldr	r3, [r2, #8]
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
   1f8b0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
		gpio_pin_set(ctx->config->cs->gpio_dev,
   1f8b4:	7919      	ldrb	r1, [r3, #4]
   1f8b6:	43d2      	mvns	r2, r2
   1f8b8:	6818      	ldr	r0, [r3, #0]
   1f8ba:	0fd2      	lsrs	r2, r2, #31
   1f8bc:	f7ff fe86 	bl	1f5cc <gpio_pin_set>
	nrf_spim_configure(spim->p_reg,
   1f8c0:	9b02      	ldr	r3, [sp, #8]
   1f8c2:	6819      	ldr	r1, [r3, #0]
   1f8c4:	88bb      	ldrh	r3, [r7, #4]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1f8c6:	0798      	lsls	r0, r3, #30
   1f8c8:	f003 0204 	and.w	r2, r3, #4
   1f8cc:	d562      	bpl.n	1f994 <spi_nrfx_transceive+0x24c>
			return NRF_SPIM_MODE_2;
   1f8ce:	2a00      	cmp	r2, #0
   1f8d0:	bf14      	ite	ne
   1f8d2:	2203      	movne	r2, #3
   1f8d4:	2202      	moveq	r2, #2
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
    switch (spi_mode)
   1f8d6:	2a02      	cmp	r2, #2
	if (operation & SPI_TRANSFER_LSB) {
   1f8d8:	f3c3 1300 	ubfx	r3, r3, #4, #1
   1f8dc:	d05e      	beq.n	1f99c <spi_nrfx_transceive+0x254>
   1f8de:	2a03      	cmp	r2, #3
   1f8e0:	d05f      	beq.n	1f9a2 <spi_nrfx_transceive+0x25a>
   1f8e2:	2a01      	cmp	r2, #1
   1f8e4:	d101      	bne.n	1f8ea <spi_nrfx_transceive+0x1a2>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   1f8e6:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   1f8ea:	f8c1 3554 	str.w	r3, [r1, #1364]	; 0x554
	if (frequency < 250000) {
   1f8ee:	4a47      	ldr	r2, [pc, #284]	; (1fa0c <spi_nrfx_transceive+0x2c4>)
	nrf_spim_frequency_set(spim->p_reg,
   1f8f0:	683b      	ldr	r3, [r7, #0]
	if (frequency < 250000) {
   1f8f2:	4293      	cmp	r3, r2
   1f8f4:	d958      	bls.n	1f9a8 <spi_nrfx_transceive+0x260>
	} else if (frequency < 500000) {
   1f8f6:	4a46      	ldr	r2, [pc, #280]	; (1fa10 <spi_nrfx_transceive+0x2c8>)
   1f8f8:	4293      	cmp	r3, r2
   1f8fa:	d958      	bls.n	1f9ae <spi_nrfx_transceive+0x266>
	} else if (frequency < 1000000) {
   1f8fc:	4a45      	ldr	r2, [pc, #276]	; (1fa14 <spi_nrfx_transceive+0x2cc>)
   1f8fe:	4293      	cmp	r3, r2
   1f900:	d958      	bls.n	1f9b4 <spi_nrfx_transceive+0x26c>
	} else if (frequency < 2000000) {
   1f902:	4a45      	ldr	r2, [pc, #276]	; (1fa18 <spi_nrfx_transceive+0x2d0>)
   1f904:	4293      	cmp	r3, r2
   1f906:	d958      	bls.n	1f9ba <spi_nrfx_transceive+0x272>
	} else if (frequency < 4000000) {
   1f908:	4a44      	ldr	r2, [pc, #272]	; (1fa1c <spi_nrfx_transceive+0x2d4>)
   1f90a:	4293      	cmp	r3, r2
   1f90c:	d958      	bls.n	1f9c0 <spi_nrfx_transceive+0x278>
		return NRF_SPIM_FREQ_8M;
   1f90e:	f502 1274 	add.w	r2, r2, #3997696	; 0x3d0000
   1f912:	f502 6210 	add.w	r2, r2, #2304	; 0x900
   1f916:	4293      	cmp	r3, r2
   1f918:	bf94      	ite	ls
   1f91a:	f04f 4380 	movls.w	r3, #1073741824	; 0x40000000
   1f91e:	f04f 4300 	movhi.w	r3, #2147483648	; 0x80000000
    p_reg->FREQUENCY = (uint32_t)frequency;
   1f922:	f8c1 3524 	str.w	r3, [r1, #1316]	; 0x524
		dev_data->busy = true;
   1f926:	2301      	movs	r3, #1
   1f928:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
	if (tx_bufs) {
   1f92c:	2e00      	cmp	r6, #0
   1f92e:	d04a      	beq.n	1f9c6 <spi_nrfx_transceive+0x27e>
		ctx->current_tx = tx_bufs->buffers;
   1f930:	6833      	ldr	r3, [r6, #0]
		ctx->tx_count = tx_bufs->count;
   1f932:	6872      	ldr	r2, [r6, #4]
		ctx->current_tx = tx_bufs->buffers;
   1f934:	63a3      	str	r3, [r4, #56]	; 0x38
		ctx->tx_count = tx_bufs->count;
   1f936:	63e2      	str	r2, [r4, #60]	; 0x3c
		ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
   1f938:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
   1f93a:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
   1f93c:	64a2      	str	r2, [r4, #72]	; 0x48
		ctx->tx_len = ctx->current_tx->len / dfs;
   1f93e:	64e3      	str	r3, [r4, #76]	; 0x4c
	if (rx_bufs) {
   1f940:	2d00      	cmp	r5, #0
   1f942:	d045      	beq.n	1f9d0 <spi_nrfx_transceive+0x288>
		ctx->current_rx = rx_bufs->buffers;
   1f944:	682b      	ldr	r3, [r5, #0]
		ctx->rx_count = rx_bufs->count;
   1f946:	686a      	ldr	r2, [r5, #4]
		ctx->current_rx = rx_bufs->buffers;
   1f948:	6423      	str	r3, [r4, #64]	; 0x40
		ctx->rx_count = rx_bufs->count;
   1f94a:	6462      	str	r2, [r4, #68]	; 0x44
		ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
   1f94c:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
   1f94e:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
   1f950:	6522      	str	r2, [r4, #80]	; 0x50
		ctx->rx_len = ctx->current_rx->len / dfs;
   1f952:	6563      	str	r3, [r4, #84]	; 0x54
	ctx->sync_status = 0;
   1f954:	2200      	movs	r2, #0
	_spi_context_cs_control(ctx, on, false);
   1f956:	2101      	movs	r1, #1
	ctx->sync_status = 0;
   1f958:	6362      	str	r2, [r4, #52]	; 0x34
	_spi_context_cs_control(ctx, on, false);
   1f95a:	4620      	mov	r0, r4
   1f95c:	f018 fa67 	bl	37e2e <_spi_context_cs_control.isra.6>
		transfer_next_chunk(dev);
   1f960:	4640      	mov	r0, r8
   1f962:	f7ff fead 	bl	1f6c0 <transfer_next_chunk>
	return z_impl_k_sem_take(sem, timeout);
   1f966:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f96a:	f104 001c 	add.w	r0, r4, #28
   1f96e:	f00e fb77 	bl	2e060 <z_impl_k_sem_take>
	status = ctx->sync_status;
   1f972:	6b64      	ldr	r4, [r4, #52]	; 0x34
	return status;
   1f974:	e713      	b.n	1f79e <spi_nrfx_transceive+0x56>
		LOG_INF("CS control inhibited (no GPIO device)");
   1f976:	2303      	movs	r3, #3
   1f978:	f04f 0000 	mov.w	r0, #0
   1f97c:	4a17      	ldr	r2, [pc, #92]	; (1f9dc <spi_nrfx_transceive+0x294>)
   1f97e:	f363 0007 	bfi	r0, r3, #0, #8
   1f982:	4b17      	ldr	r3, [pc, #92]	; (1f9e0 <spi_nrfx_transceive+0x298>)
   1f984:	4926      	ldr	r1, [pc, #152]	; (1fa20 <spi_nrfx_transceive+0x2d8>)
   1f986:	1a9b      	subs	r3, r3, r2
   1f988:	08db      	lsrs	r3, r3, #3
   1f98a:	f363 108f 	bfi	r0, r3, #6, #10
   1f98e:	f014 f928 	bl	33be2 <log_string_sync>
   1f992:	e795      	b.n	1f8c0 <spi_nrfx_transceive+0x178>
			return NRF_SPIM_MODE_0;
   1f994:	3200      	adds	r2, #0
   1f996:	bf18      	it	ne
   1f998:	2201      	movne	r2, #1
   1f99a:	e79c      	b.n	1f8d6 <spi_nrfx_transceive+0x18e>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   1f99c:	f043 0304 	orr.w	r3, r3, #4
        break;
   1f9a0:	e7a3      	b.n	1f8ea <spi_nrfx_transceive+0x1a2>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   1f9a2:	f043 0306 	orr.w	r3, r3, #6
        break;
   1f9a6:	e7a0      	b.n	1f8ea <spi_nrfx_transceive+0x1a2>
		return NRF_SPIM_FREQ_125K;
   1f9a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   1f9ac:	e7b9      	b.n	1f922 <spi_nrfx_transceive+0x1da>
		return NRF_SPIM_FREQ_250K;
   1f9ae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1f9b2:	e7b6      	b.n	1f922 <spi_nrfx_transceive+0x1da>
		return NRF_SPIM_FREQ_500K;
   1f9b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   1f9b8:	e7b3      	b.n	1f922 <spi_nrfx_transceive+0x1da>
		return NRF_SPIM_FREQ_1M;
   1f9ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f9be:	e7b0      	b.n	1f922 <spi_nrfx_transceive+0x1da>
		return NRF_SPIM_FREQ_2M;
   1f9c0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   1f9c4:	e7ad      	b.n	1f922 <spi_nrfx_transceive+0x1da>
		ctx->tx_count = 0;
   1f9c6:	e9c4 660e 	strd	r6, r6, [r4, #56]	; 0x38
		ctx->tx_len = 0;
   1f9ca:	e9c4 6612 	strd	r6, r6, [r4, #72]	; 0x48
   1f9ce:	e7b7      	b.n	1f940 <spi_nrfx_transceive+0x1f8>
		ctx->rx_count = 0;
   1f9d0:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
		ctx->rx_len = 0;
   1f9d4:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
   1f9d8:	e7bc      	b.n	1f954 <spi_nrfx_transceive+0x20c>
   1f9da:	bf00      	nop
   1f9dc:	00039f48 	.word	0x00039f48
   1f9e0:	00039ff8 	.word	0x00039ff8
   1f9e4:	0003e07e 	.word	0x0003e07e
   1f9e8:	0003e0a0 	.word	0x0003e0a0
   1f9ec:	0003e0bf 	.word	0x0003e0bf
   1f9f0:	0003e0e2 	.word	0x0003e0e2
   1f9f4:	0001e847 	.word	0x0001e847
   1f9f8:	0003e111 	.word	0x0003e111
   1f9fc:	0003e02e 	.word	0x0003e02e
   1fa00:	0003e004 	.word	0x0003e004
   1fa04:	0003b773 	.word	0x0003b773
   1fa08:	0003e06c 	.word	0x0003e06c
   1fa0c:	0003d08f 	.word	0x0003d08f
   1fa10:	0007a11f 	.word	0x0007a11f
   1fa14:	000f423f 	.word	0x000f423f
   1fa18:	001e847f 	.word	0x001e847f
   1fa1c:	003d08ff 	.word	0x003d08ff
   1fa20:	0003e142 	.word	0x0003e142

0001fa24 <event_handler>:
{
   1fa24:	b538      	push	{r3, r4, r5, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   1fa26:	7803      	ldrb	r3, [r0, #0]
{
   1fa28:	460d      	mov	r5, r1
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   1fa2a:	2b00      	cmp	r3, #0
   1fa2c:	d157      	bne.n	1fade <event_handler+0xba>
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   1fa2e:	68cc      	ldr	r4, [r1, #12]
	if (!ctx->tx_len) {
   1fa30:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1fa32:	b183      	cbz	r3, 1fa56 <event_handler+0x32>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   1fa34:	6da2      	ldr	r2, [r4, #88]	; 0x58
	if (len > ctx->tx_len) {
   1fa36:	429a      	cmp	r2, r3
   1fa38:	d925      	bls.n	1fa86 <event_handler+0x62>
		LOG_ERR("Update exceeds current buffer");
   1fa3a:	2301      	movs	r3, #1
   1fa3c:	f04f 0000 	mov.w	r0, #0
   1fa40:	4a27      	ldr	r2, [pc, #156]	; (1fae0 <event_handler+0xbc>)
   1fa42:	f363 0007 	bfi	r0, r3, #0, #8
   1fa46:	4b27      	ldr	r3, [pc, #156]	; (1fae4 <event_handler+0xc0>)
   1fa48:	4927      	ldr	r1, [pc, #156]	; (1fae8 <event_handler+0xc4>)
   1fa4a:	1a9b      	subs	r3, r3, r2
   1fa4c:	08db      	lsrs	r3, r3, #3
   1fa4e:	f363 108f 	bfi	r0, r3, #6, #10
   1fa52:	f014 f8c6 	bl	33be2 <log_string_sync>
	if (!ctx->rx_len) {
   1fa56:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1fa58:	b183      	cbz	r3, 1fa7c <event_handler+0x58>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   1fa5a:	6da2      	ldr	r2, [r4, #88]	; 0x58
	if (len > ctx->rx_len) {
   1fa5c:	429a      	cmp	r2, r3
   1fa5e:	d928      	bls.n	1fab2 <event_handler+0x8e>
		LOG_ERR("Update exceeds current buffer");
   1fa60:	2301      	movs	r3, #1
   1fa62:	f04f 0000 	mov.w	r0, #0
   1fa66:	4a1e      	ldr	r2, [pc, #120]	; (1fae0 <event_handler+0xbc>)
   1fa68:	f363 0007 	bfi	r0, r3, #0, #8
   1fa6c:	4b1d      	ldr	r3, [pc, #116]	; (1fae4 <event_handler+0xc0>)
   1fa6e:	491e      	ldr	r1, [pc, #120]	; (1fae8 <event_handler+0xc4>)
   1fa70:	1a9b      	subs	r3, r3, r2
   1fa72:	08db      	lsrs	r3, r3, #3
   1fa74:	f363 108f 	bfi	r0, r3, #6, #10
   1fa78:	f014 f8b3 	bl	33be2 <log_string_sync>
		transfer_next_chunk(dev);
   1fa7c:	4628      	mov	r0, r5
}
   1fa7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		transfer_next_chunk(dev);
   1fa82:	f7ff be1d 	b.w	1f6c0 <transfer_next_chunk>
	ctx->tx_len -= len;
   1fa86:	1a9b      	subs	r3, r3, r2
   1fa88:	64e3      	str	r3, [r4, #76]	; 0x4c
	if (!ctx->tx_len) {
   1fa8a:	b963      	cbnz	r3, 1faa6 <event_handler+0x82>
		ctx->tx_count--;
   1fa8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1fa8e:	3b01      	subs	r3, #1
   1fa90:	63e3      	str	r3, [r4, #60]	; 0x3c
		if (ctx->tx_count) {
   1fa92:	b163      	cbz	r3, 1faae <event_handler+0x8a>
			ctx->current_tx++;
   1fa94:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1fa96:	f103 0208 	add.w	r2, r3, #8
   1fa9a:	63a2      	str	r2, [r4, #56]	; 0x38
			ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
   1fa9c:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
   1fa9e:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
   1faa0:	64a2      	str	r2, [r4, #72]	; 0x48
			ctx->tx_len = ctx->current_tx->len / dfs;
   1faa2:	64e3      	str	r3, [r4, #76]	; 0x4c
   1faa4:	e7d7      	b.n	1fa56 <event_handler+0x32>
	} else if (ctx->tx_buf) {
   1faa6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1faa8:	2b00      	cmp	r3, #0
   1faaa:	d0d4      	beq.n	1fa56 <event_handler+0x32>
		ctx->tx_buf += dfs * len;
   1faac:	4413      	add	r3, r2
   1faae:	64a3      	str	r3, [r4, #72]	; 0x48
   1fab0:	e7d1      	b.n	1fa56 <event_handler+0x32>
	ctx->rx_len -= len;
   1fab2:	1a9b      	subs	r3, r3, r2
   1fab4:	6563      	str	r3, [r4, #84]	; 0x54
	if (!ctx->rx_len) {
   1fab6:	b963      	cbnz	r3, 1fad2 <event_handler+0xae>
		ctx->rx_count--;
   1fab8:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1faba:	3b01      	subs	r3, #1
   1fabc:	6463      	str	r3, [r4, #68]	; 0x44
		if (ctx->rx_count) {
   1fabe:	b163      	cbz	r3, 1fada <event_handler+0xb6>
			ctx->current_rx++;
   1fac0:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1fac2:	f103 0208 	add.w	r2, r3, #8
   1fac6:	6422      	str	r2, [r4, #64]	; 0x40
			ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
   1fac8:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
   1faca:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
   1facc:	6522      	str	r2, [r4, #80]	; 0x50
			ctx->rx_len = ctx->current_rx->len / dfs;
   1face:	6563      	str	r3, [r4, #84]	; 0x54
   1fad0:	e7d4      	b.n	1fa7c <event_handler+0x58>
	} else if (ctx->rx_buf) {
   1fad2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1fad4:	2b00      	cmp	r3, #0
   1fad6:	d0d1      	beq.n	1fa7c <event_handler+0x58>
		ctx->rx_buf += dfs * len;
   1fad8:	4413      	add	r3, r2
   1fada:	6523      	str	r3, [r4, #80]	; 0x50
   1fadc:	e7ce      	b.n	1fa7c <event_handler+0x58>
}
   1fade:	bd38      	pop	{r3, r4, r5, pc}
   1fae0:	00039f48 	.word	0x00039f48
   1fae4:	00039ff8 	.word	0x00039ff8
   1fae8:	0003dfe6 	.word	0x0003dfe6

0001faec <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
   1faec:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1faee:	794b      	ldrb	r3, [r1, #5]
   1faf0:	2b01      	cmp	r3, #1
   1faf2:	d027      	beq.n	1fb44 <uarte_nrfx_configure+0x58>
   1faf4:	2b03      	cmp	r3, #3
   1faf6:	d122      	bne.n	1fb3e <uarte_nrfx_configure+0x52>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1faf8:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1fafa:	798b      	ldrb	r3, [r1, #6]
   1fafc:	2b03      	cmp	r3, #3
   1fafe:	d11e      	bne.n	1fb3e <uarte_nrfx_configure+0x52>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1fb00:	79cc      	ldrb	r4, [r1, #7]
   1fb02:	b124      	cbz	r4, 1fb0e <uarte_nrfx_configure+0x22>
   1fb04:	2c01      	cmp	r4, #1
   1fb06:	d11a      	bne.n	1fb3e <uarte_nrfx_configure+0x52>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   1fb08:	6843      	ldr	r3, [r0, #4]
   1fb0a:	791b      	ldrb	r3, [r3, #4]
   1fb0c:	b1bb      	cbz	r3, 1fb3e <uarte_nrfx_configure+0x52>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1fb0e:	790a      	ldrb	r2, [r1, #4]
   1fb10:	b112      	cbz	r2, 1fb18 <uarte_nrfx_configure+0x2c>
   1fb12:	2a02      	cmp	r2, #2
   1fb14:	d113      	bne.n	1fb3e <uarte_nrfx_configure+0x52>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1fb16:	220e      	movs	r2, #14
	switch (baudrate) {
   1fb18:	f647 2712 	movw	r7, #31250	; 0x7a12
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1fb1c:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1fb1e:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   1fb20:	42bb      	cmp	r3, r7
	return config->uarte_regs;
   1fb22:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   1fb24:	d062      	beq.n	1fbec <uarte_nrfx_configure+0x100>
   1fb26:	d829      	bhi.n	1fb7c <uarte_nrfx_configure+0x90>
   1fb28:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1fb2c:	d061      	beq.n	1fbf2 <uarte_nrfx_configure+0x106>
   1fb2e:	d814      	bhi.n	1fb5a <uarte_nrfx_configure+0x6e>
   1fb30:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1fb34:	d05f      	beq.n	1fbf6 <uarte_nrfx_configure+0x10a>
   1fb36:	d807      	bhi.n	1fb48 <uarte_nrfx_configure+0x5c>
   1fb38:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1fb3c:	d05e      	beq.n	1fbfc <uarte_nrfx_configure+0x110>
		return -ENOTSUP;
   1fb3e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1fb42:	e052      	b.n	1fbea <uarte_nrfx_configure+0xfe>
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   1fb44:	2600      	movs	r6, #0
   1fb46:	e7d8      	b.n	1fafa <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   1fb48:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1fb4c:	d059      	beq.n	1fc02 <uarte_nrfx_configure+0x116>
   1fb4e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1fb52:	d1f4      	bne.n	1fb3e <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1fb54:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1fb58:	e03c      	b.n	1fbd4 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
   1fb5a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1fb5e:	d053      	beq.n	1fc08 <uarte_nrfx_configure+0x11c>
   1fb60:	d804      	bhi.n	1fb6c <uarte_nrfx_configure+0x80>
   1fb62:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1fb66:	d1ea      	bne.n	1fb3e <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1fb68:	4b32      	ldr	r3, [pc, #200]	; (1fc34 <uarte_nrfx_configure+0x148>)
   1fb6a:	e033      	b.n	1fbd4 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
   1fb6c:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1fb70:	d04c      	beq.n	1fc0c <uarte_nrfx_configure+0x120>
   1fb72:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1fb76:	d1e2      	bne.n	1fb3e <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1fb78:	4b2f      	ldr	r3, [pc, #188]	; (1fc38 <uarte_nrfx_configure+0x14c>)
   1fb7a:	e02b      	b.n	1fbd4 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
   1fb7c:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1fb80:	d046      	beq.n	1fc10 <uarte_nrfx_configure+0x124>
   1fb82:	d812      	bhi.n	1fbaa <uarte_nrfx_configure+0xbe>
   1fb84:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   1fb88:	42bb      	cmp	r3, r7
   1fb8a:	d044      	beq.n	1fc16 <uarte_nrfx_configure+0x12a>
   1fb8c:	d805      	bhi.n	1fb9a <uarte_nrfx_configure+0xae>
   1fb8e:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   1fb92:	d1d4      	bne.n	1fb3e <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1fb94:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1fb98:	e01c      	b.n	1fbd4 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
   1fb9a:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1fb9e:	d03d      	beq.n	1fc1c <uarte_nrfx_configure+0x130>
   1fba0:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1fba4:	d1cb      	bne.n	1fb3e <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1fba6:	4b25      	ldr	r3, [pc, #148]	; (1fc3c <uarte_nrfx_configure+0x150>)
   1fba8:	e014      	b.n	1fbd4 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
   1fbaa:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1fbae:	d038      	beq.n	1fc22 <uarte_nrfx_configure+0x136>
   1fbb0:	d808      	bhi.n	1fbc4 <uarte_nrfx_configure+0xd8>
   1fbb2:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1fbb6:	d037      	beq.n	1fc28 <uarte_nrfx_configure+0x13c>
   1fbb8:	4f21      	ldr	r7, [pc, #132]	; (1fc40 <uarte_nrfx_configure+0x154>)
   1fbba:	42bb      	cmp	r3, r7
   1fbbc:	d1bf      	bne.n	1fb3e <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1fbbe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1fbc2:	e007      	b.n	1fbd4 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
   1fbc4:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1fbc8:	d031      	beq.n	1fc2e <uarte_nrfx_configure+0x142>
   1fbca:	4f1e      	ldr	r7, [pc, #120]	; (1fc44 <uarte_nrfx_configure+0x158>)
   1fbcc:	42bb      	cmp	r3, r7
   1fbce:	d1b6      	bne.n	1fb3e <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1fbd0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1fbd4:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
   1fbd8:	4334      	orrs	r4, r6
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   1fbda:	68c3      	ldr	r3, [r0, #12]
   1fbdc:	4322      	orrs	r2, r4
   1fbde:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1fbe0:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   1fbe4:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1fbe8:	2000      	movs	r0, #0
}
   1fbea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1fbec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1fbf0:	e7f0      	b.n	1fbd4 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1fbf2:	4b15      	ldr	r3, [pc, #84]	; (1fc48 <uarte_nrfx_configure+0x15c>)
   1fbf4:	e7ee      	b.n	1fbd4 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = 0x00027000;
   1fbf6:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1fbfa:	e7eb      	b.n	1fbd4 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = 0x00014000;
   1fbfc:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1fc00:	e7e8      	b.n	1fbd4 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1fc02:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1fc06:	e7e5      	b.n	1fbd4 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1fc08:	4b10      	ldr	r3, [pc, #64]	; (1fc4c <uarte_nrfx_configure+0x160>)
   1fc0a:	e7e3      	b.n	1fbd4 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1fc0c:	4b10      	ldr	r3, [pc, #64]	; (1fc50 <uarte_nrfx_configure+0x164>)
   1fc0e:	e7e1      	b.n	1fbd4 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1fc10:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1fc14:	e7de      	b.n	1fbd4 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1fc16:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1fc1a:	e7db      	b.n	1fbd4 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1fc1c:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1fc20:	e7d8      	b.n	1fbd4 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1fc22:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1fc26:	e7d5      	b.n	1fbd4 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1fc28:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1fc2c:	e7d2      	b.n	1fbd4 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1fc2e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1fc32:	e7cf      	b.n	1fbd4 <uarte_nrfx_configure+0xe8>
   1fc34:	00275000 	.word	0x00275000
   1fc38:	0075c000 	.word	0x0075c000
   1fc3c:	013a9000 	.word	0x013a9000
   1fc40:	0003d090 	.word	0x0003d090
   1fc44:	000f4240 	.word	0x000f4240
   1fc48:	0013b000 	.word	0x0013b000
   1fc4c:	003af000 	.word	0x003af000
   1fc50:	004ea000 	.word	0x004ea000

0001fc54 <nrf_gpio_pin_port_decode.isra.3.part.4>:
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
   1fc54:	b510      	push	{r4, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1fc56:	4c07      	ldr	r4, [pc, #28]	; (1fc74 <nrf_gpio_pin_port_decode.isra.3.part.4+0x20>)
   1fc58:	4907      	ldr	r1, [pc, #28]	; (1fc78 <nrf_gpio_pin_port_decode.isra.3.part.4+0x24>)
   1fc5a:	4622      	mov	r2, r4
   1fc5c:	4807      	ldr	r0, [pc, #28]	; (1fc7c <nrf_gpio_pin_port_decode.isra.3.part.4+0x28>)
   1fc5e:	f240 230d 	movw	r3, #525	; 0x20d
   1fc62:	f013 fca6 	bl	335b2 <printk>
   1fc66:	4620      	mov	r0, r4
}
   1fc68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1fc6c:	f240 210d 	movw	r1, #525	; 0x20d
   1fc70:	f013 bfa0 	b.w	33bb4 <assert_post_action>
   1fc74:	0003df28 	.word	0x0003df28
   1fc78:	0003df5b 	.word	0x0003df5b
   1fc7c:	0003b773 	.word	0x0003b773

0001fc80 <nrf_gpio_pin_set>:
{
   1fc80:	b510      	push	{r4, lr}
   1fc82:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1fc84:	f018 f91d 	bl	37ec2 <nrf_gpio_pin_present_check>
   1fc88:	b908      	cbnz	r0, 1fc8e <nrf_gpio_pin_set+0xe>
   1fc8a:	f7ff ffe3 	bl	1fc54 <nrf_gpio_pin_port_decode.isra.3.part.4>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1fc8e:	2001      	movs	r0, #1
    p_reg->OUTSET = set_mask;
   1fc90:	4b01      	ldr	r3, [pc, #4]	; (1fc98 <nrf_gpio_pin_set+0x18>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1fc92:	40a0      	lsls	r0, r4
    p_reg->OUTSET = set_mask;
   1fc94:	6098      	str	r0, [r3, #8]
}
   1fc96:	bd10      	pop	{r4, pc}
   1fc98:	40842500 	.word	0x40842500

0001fc9c <uarte_instance_init.constprop.5>:
	.irq_update		= uarte_nrfx_irq_update,
	.irq_callback_set	= uarte_nrfx_irq_callback_set,
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int uarte_instance_init(struct device *dev,
   1fc9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1fca0:	460d      	mov	r5, r1
	return config->uarte_regs;
   1fca2:	6843      	ldr	r3, [r0, #4]
			       const struct uarte_init_config *config,
			       u8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1fca4:	f8d0 900c 	ldr.w	r9, [r0, #12]
static int uarte_instance_init(struct device *dev,
   1fca8:	4680      	mov	r8, r0
        nrf_gpio_pin_set(pin_number);
   1fcaa:	6808      	ldr	r0, [r1, #0]
	return config->uarte_regs;
   1fcac:	681c      	ldr	r4, [r3, #0]
   1fcae:	f7ff ffe7 	bl	1fc80 <nrf_gpio_pin_set>

	nrf_gpio_pin_write(config->pseltxd, 1);
	nrf_gpio_cfg_output(config->pseltxd);
   1fcb2:	682f      	ldr	r7, [r5, #0]
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1fcb4:	4638      	mov	r0, r7
   1fcb6:	f018 f904 	bl	37ec2 <nrf_gpio_pin_present_check>
   1fcba:	b908      	cbnz	r0, 1fcc0 <uarte_instance_init.constprop.5+0x24>
   1fcbc:	f7ff ffca 	bl	1fc54 <nrf_gpio_pin_port_decode.isra.3.part.4>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1fcc0:	2303      	movs	r3, #3
   1fcc2:	4e2f      	ldr	r6, [pc, #188]	; (1fd80 <uarte_instance_init.constprop.5+0xe4>)
   1fcc4:	3780      	adds	r7, #128	; 0x80
   1fcc6:	f846 3027 	str.w	r3, [r6, r7, lsl #2]

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   1fcca:	686f      	ldr	r7, [r5, #4]
   1fccc:	1c7a      	adds	r2, r7, #1
   1fcce:	d009      	beq.n	1fce4 <uarte_instance_init.constprop.5+0x48>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1fcd0:	4638      	mov	r0, r7
   1fcd2:	f018 f8f6 	bl	37ec2 <nrf_gpio_pin_present_check>
   1fcd6:	b908      	cbnz	r0, 1fcdc <uarte_instance_init.constprop.5+0x40>
   1fcd8:	f7ff ffbc 	bl	1fc54 <nrf_gpio_pin_port_decode.isra.3.part.4>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1fcdc:	2300      	movs	r3, #0
   1fcde:	3780      	adds	r7, #128	; 0x80
   1fce0:	f846 3027 	str.w	r3, [r6, r7, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);
   1fce4:	e9d5 2300 	ldrd	r2, r3, [r5]
    p_reg->PSEL.TXD = pseltxd;
   1fce8:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1fcec:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
   1fcf0:	68ab      	ldr	r3, [r5, #8]
   1fcf2:	3301      	adds	r3, #1
   1fcf4:	d020      	beq.n	1fd38 <uarte_instance_init.constprop.5+0x9c>
	    config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   1fcf6:	68e8      	ldr	r0, [r5, #12]
	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
   1fcf8:	1c43      	adds	r3, r0, #1
   1fcfa:	d01d      	beq.n	1fd38 <uarte_instance_init.constprop.5+0x9c>
        nrf_gpio_pin_set(pin_number);
   1fcfc:	f7ff ffc0 	bl	1fc80 <nrf_gpio_pin_set>
		nrf_gpio_pin_write(config->pselrts, 1);
		nrf_gpio_cfg_output(config->pselrts);
   1fd00:	68ef      	ldr	r7, [r5, #12]
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1fd02:	4638      	mov	r0, r7
   1fd04:	f018 f8dd 	bl	37ec2 <nrf_gpio_pin_present_check>
   1fd08:	b908      	cbnz	r0, 1fd0e <uarte_instance_init.constprop.5+0x72>
   1fd0a:	f7ff ffa3 	bl	1fc54 <nrf_gpio_pin_port_decode.isra.3.part.4>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1fd0e:	2303      	movs	r3, #3
   1fd10:	3780      	adds	r7, #128	; 0x80
   1fd12:	f846 3027 	str.w	r3, [r6, r7, lsl #2]

		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_NOPULL);
   1fd16:	68af      	ldr	r7, [r5, #8]
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1fd18:	4638      	mov	r0, r7
   1fd1a:	f018 f8d2 	bl	37ec2 <nrf_gpio_pin_present_check>
   1fd1e:	b908      	cbnz	r0, 1fd24 <uarte_instance_init.constprop.5+0x88>
   1fd20:	f7ff ff98 	bl	1fc54 <nrf_gpio_pin_port_decode.isra.3.part.4>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1fd24:	2300      	movs	r3, #0
   1fd26:	3780      	adds	r7, #128	; 0x80
   1fd28:	f846 3027 	str.w	r3, [r6, r7, lsl #2]

		nrf_uarte_hwfc_pins_set(uarte,
   1fd2c:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    p_reg->PSEL.RTS = pselrts;
   1fd30:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   1fd34:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
					config->pselrts,
					config->pselcts);
	}

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1fd38:	f8d8 100c 	ldr.w	r1, [r8, #12]
   1fd3c:	4640      	mov	r0, r8
   1fd3e:	f7ff fed5 	bl	1faec <uarte_nrfx_configure>
	if (err) {
   1fd42:	b9d0      	cbnz	r0, 1fd7a <uarte_instance_init.constprop.5+0xde>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1fd44:	2308      	movs	r3, #8
   1fd46:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	}
#endif
	/* Enable receiver and transmitter */
	nrf_uarte_enable(uarte);

	if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   1fd4a:	686b      	ldr	r3, [r5, #4]
   1fd4c:	3301      	adds	r3, #1
   1fd4e:	d009      	beq.n	1fd64 <uarte_instance_init.constprop.5+0xc8>
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   1fd50:	f109 0310 	add.w	r3, r9, #16
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1fd54:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1fd58:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1fd5c:	2301      	movs	r3, #1
   1fd5e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fd62:	6023      	str	r3, [r4, #0]
		/* Set ENDTX event by requesting fake (zero-length) transfer.
		 * Pointer to RAM variable (data->tx_buffer) is set because
		 * otherwise such operation may result in HardFault or RAM
		 * corruption.
		 */
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
   1fd64:	f8d9 3008 	ldr.w	r3, [r9, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1fd68:	689b      	ldr	r3, [r3, #8]
   1fd6a:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1fd6e:	2300      	movs	r3, #0
   1fd70:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fd74:	2301      	movs	r3, #1
   1fd76:	60a3      	str	r3, [r4, #8]
   1fd78:	60e3      	str	r3, [r4, #12]
		/* switch off transmitter to save an energy */
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);
	}
#endif
	return 0;
}
   1fd7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1fd7e:	bf00      	nop
   1fd80:	40842500 	.word	0x40842500

0001fd84 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   1fd84:	b530      	push	{r4, r5, lr}
   1fd86:	b085      	sub	sp, #20
   1fd88:	466c      	mov	r4, sp
   1fd8a:	4605      	mov	r5, r0
   1fd8c:	4b08      	ldr	r3, [pc, #32]	; (1fdb0 <uarte_1_init+0x2c>)
   1fd8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1fd90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1fd94:	2200      	movs	r2, #0
   1fd96:	2101      	movs	r1, #1
   1fd98:	2009      	movs	r0, #9
   1fd9a:	f7fa ff2f 	bl	1abfc <z_arm_irq_priority_set>
   1fd9e:	2009      	movs	r0, #9
   1fda0:	f7fa ff1c 	bl	1abdc <arch_irq_enable>
   1fda4:	4621      	mov	r1, r4
   1fda6:	4628      	mov	r0, r5
   1fda8:	f7ff ff78 	bl	1fc9c <uarte_instance_init.constprop.5>
   1fdac:	b005      	add	sp, #20
   1fdae:	bd30      	pop	{r4, r5, pc}
   1fdb0:	0003a0dc 	.word	0x0003a0dc

0001fdb4 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   1fdb4:	b530      	push	{r4, r5, lr}
   1fdb6:	b085      	sub	sp, #20
   1fdb8:	466c      	mov	r4, sp
   1fdba:	4605      	mov	r5, r0
   1fdbc:	4b08      	ldr	r3, [pc, #32]	; (1fde0 <uarte_0_init+0x2c>)
   1fdbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1fdc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1fdc4:	2200      	movs	r2, #0
   1fdc6:	2101      	movs	r1, #1
   1fdc8:	2008      	movs	r0, #8
   1fdca:	f7fa ff17 	bl	1abfc <z_arm_irq_priority_set>
   1fdce:	2008      	movs	r0, #8
   1fdd0:	f7fa ff04 	bl	1abdc <arch_irq_enable>
   1fdd4:	4621      	mov	r1, r4
   1fdd6:	4628      	mov	r0, r5
   1fdd8:	f7ff ff60 	bl	1fc9c <uarte_instance_init.constprop.5>
   1fddc:	b005      	add	sp, #20
   1fdde:	bd30      	pop	{r4, r5, pc}
   1fde0:	0003a0ec 	.word	0x0003a0ec

0001fde4 <entropy_cc310_rng_get_entropy>:
#include "nrf_cc310_platform_entropy.h"
#endif

static int entropy_cc310_rng_get_entropy(struct device *dev, u8_t *buffer,
					 u16_t length)
{
   1fde4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1fde6:	460d      	mov	r5, r1
   1fde8:	4614      	mov	r4, r2
	int res = -EINVAL;
	size_t olen;

	__ASSERT_NO_MSG(dev != NULL);
   1fdea:	b948      	cbnz	r0, 1fe00 <entropy_cc310_rng_get_entropy+0x1c>
   1fdec:	4910      	ldr	r1, [pc, #64]	; (1fe30 <entropy_cc310_rng_get_entropy+0x4c>)
   1fdee:	4811      	ldr	r0, [pc, #68]	; (1fe34 <entropy_cc310_rng_get_entropy+0x50>)
   1fdf0:	231c      	movs	r3, #28
   1fdf2:	4a11      	ldr	r2, [pc, #68]	; (1fe38 <entropy_cc310_rng_get_entropy+0x54>)
   1fdf4:	f013 fbdd 	bl	335b2 <printk>
   1fdf8:	211c      	movs	r1, #28
   1fdfa:	480f      	ldr	r0, [pc, #60]	; (1fe38 <entropy_cc310_rng_get_entropy+0x54>)
   1fdfc:	f013 feda 	bl	33bb4 <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   1fe00:	b94d      	cbnz	r5, 1fe16 <entropy_cc310_rng_get_entropy+0x32>
   1fe02:	490e      	ldr	r1, [pc, #56]	; (1fe3c <entropy_cc310_rng_get_entropy+0x58>)
   1fe04:	480b      	ldr	r0, [pc, #44]	; (1fe34 <entropy_cc310_rng_get_entropy+0x50>)
   1fe06:	231d      	movs	r3, #29
   1fe08:	4a0b      	ldr	r2, [pc, #44]	; (1fe38 <entropy_cc310_rng_get_entropy+0x54>)
   1fe0a:	f013 fbd2 	bl	335b2 <printk>
   1fe0e:	211d      	movs	r1, #29
   1fe10:	4809      	ldr	r0, [pc, #36]	; (1fe38 <entropy_cc310_rng_get_entropy+0x54>)
   1fe12:	f013 fecf 	bl	33bb4 <assert_post_action>

#if defined(CONFIG_SPM)
	/** This is a call from a non-secure app that enables secure services,
	 *  in which case entropy is gathered by calling through SPM
	 */
	res = spm_request_random_number(buffer, length, &olen);
   1fe16:	aa01      	add	r2, sp, #4
   1fe18:	4621      	mov	r1, r4
   1fe1a:	4628      	mov	r0, r5
   1fe1c:	f7e8 f8e8 	bl	7ff0 <spm_request_random_number>
	if (olen != length) {
   1fe20:	9b01      	ldr	r3, [sp, #4]
		return -EINVAL;
   1fe22:	429c      	cmp	r4, r3
		return -EINVAL;
	}
#endif

	return res;
}
   1fe24:	bf18      	it	ne
   1fe26:	f06f 0015 	mvnne.w	r0, #21
   1fe2a:	b003      	add	sp, #12
   1fe2c:	bd30      	pop	{r4, r5, pc}
   1fe2e:	bf00      	nop
   1fe30:	0003e1c3 	.word	0x0003e1c3
   1fe34:	0003b773 	.word	0x0003b773
   1fe38:	0003e193 	.word	0x0003e193
   1fe3c:	0003e1d6 	.word	0x0003e1d6

0001fe40 <_bsdlib_init>:
extern void ipc_proxy_irq_handler(void);

static int init_ret;

static int _bsdlib_init(struct device *unused)
{
   1fe40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable() here, that is done through bsd_init().
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   1fe42:	2200      	movs	r2, #0
   1fe44:	202a      	movs	r0, #42	; 0x2a
   1fe46:	4611      	mov	r1, r2
   1fe48:	f7fa fed8 	bl	1abfc <z_arm_irq_priority_set>
			   ipc_proxy_irq_handler, 0);

	const bsd_init_params_t init_params = {
   1fe4c:	4a06      	ldr	r2, [pc, #24]	; (1fe68 <_bsdlib_init+0x28>)
   1fe4e:	ab01      	add	r3, sp, #4
   1fe50:	ca07      	ldmia	r2, {r0, r1, r2}
   1fe52:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.trace_on = true,
		.bsd_memory_address = BSD_RESERVED_MEMORY_ADDRESS,
		.bsd_memory_size = BSD_RESERVED_MEMORY_SIZE
	};

	init_ret = bsd_init(&init_params);
   1fe56:	4618      	mov	r0, r3
   1fe58:	f008 fe10 	bl	28a7c <bsd_init>
   1fe5c:	4b03      	ldr	r3, [pc, #12]	; (1fe6c <_bsdlib_init+0x2c>)
   1fe5e:	6018      	str	r0, [r3, #0]
		 */
		return 0;
	}

	return init_ret;
}
   1fe60:	2000      	movs	r0, #0
   1fe62:	b005      	add	sp, #20
   1fe64:	f85d fb04 	ldr.w	pc, [sp], #4
   1fe68:	0003a0fc 	.word	0x0003a0fc
   1fe6c:	2002223c 	.word	0x2002223c

0001fe70 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which bsdlib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   1fe70:	b570      	push	{r4, r5, r6, lr}
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   1fe72:	4b0d      	ldr	r3, [pc, #52]	; (1fea8 <thread_monitor_entry_get+0x38>)
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   1fe74:	4c0d      	ldr	r4, [pc, #52]	; (1feac <thread_monitor_entry_get+0x3c>)
		entry_age = rpc_event_cnt - entry->cnt;
   1fe76:	681a      	ldr	r2, [r3, #0]
   1fe78:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   1fe7a:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   1fe7c:	4623      	mov	r3, r4
		if (entry->id == id) {
   1fe7e:	6819      	ldr	r1, [r3, #0]
   1fe80:	4281      	cmp	r1, r0
   1fe82:	d00e      	beq.n	1fea2 <thread_monitor_entry_get+0x32>
		} else if (entry->id == 0) {
   1fe84:	b151      	cbz	r1, 1fe9c <thread_monitor_entry_get+0x2c>
		entry_age = rpc_event_cnt - entry->cnt;
   1fe86:	6859      	ldr	r1, [r3, #4]
   1fe88:	1a51      	subs	r1, r2, r1
		if (entry_age > oldest_entry_age) {
   1fe8a:	42b1      	cmp	r1, r6
   1fe8c:	bfc4      	itt	gt
   1fe8e:	461c      	movgt	r4, r3
   1fe90:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   1fe92:	3d01      	subs	r5, #1
   1fe94:	f103 0308 	add.w	r3, r3, #8
   1fe98:	d1f1      	bne.n	1fe7e <thread_monitor_entry_get+0xe>
   1fe9a:	4623      	mov	r3, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
   1fe9c:	3a01      	subs	r2, #1
	new_entry->id = id;
   1fe9e:	6018      	str	r0, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   1fea0:	605a      	str	r2, [r3, #4]

	return new_entry;
}
   1fea2:	4618      	mov	r0, r3
   1fea4:	bd70      	pop	{r4, r5, r6, pc}
   1fea6:	bf00      	nop
   1fea8:	20022240 	.word	0x20022240
   1feac:	2002224c 	.word	0x2002224c

0001feb0 <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   1feb0:	4668      	mov	r0, sp
   1feb2:	f020 0107 	bic.w	r1, r0, #7
   1feb6:	468d      	mov	sp, r1
   1feb8:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1feba:	4b0d      	ldr	r3, [pc, #52]	; (1fef0 <rpc_proxy_irq_handler+0x40>)
   1febc:	e8d3 2fef 	ldaex	r2, [r3]
   1fec0:	3201      	adds	r2, #1
   1fec2:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1fec6:	2900      	cmp	r1, #0
   1fec8:	d1f8      	bne.n	1febc <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
   1feca:	f003 f97d 	bl	231c8 <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   1fece:	4b09      	ldr	r3, [pc, #36]	; (1fef4 <rpc_proxy_irq_handler+0x44>)
   1fed0:	681c      	ldr	r4, [r3, #0]
   1fed2:	b93c      	cbnz	r4, 1fee4 <rpc_proxy_irq_handler+0x34>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   1fed4:	f7fa fec4 	bl	1ac60 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   1fed8:	f7fb fb10 	bl	1b4fc <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   1fedc:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   1fee0:	4685      	mov	sp, r0
   1fee2:	4770      	bx	lr
	z_impl_k_sem_give(sem);
   1fee4:	1d20      	adds	r0, r4, #4
   1fee6:	f00e f877 	bl	2dfd8 <z_impl_k_sem_give>
   1feea:	6824      	ldr	r4, [r4, #0]
	return node->next;
   1feec:	e7f1      	b.n	1fed2 <rpc_proxy_irq_handler+0x22>
   1feee:	bf00      	nop
   1fef0:	20022240 	.word	0x20022240
   1fef4:	20022244 	.word	0x20022244

0001fef8 <bsd_os_timedwait>:
{
   1fef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fefc:	460e      	mov	r6, r1
   1fefe:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_ticks();
   1ff00:	f018 ff91 	bl	38e26 <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
   1ff04:	6833      	ldr	r3, [r6, #0]
   1ff06:	4680      	mov	r8, r0
   1ff08:	2b00      	cmp	r3, #0
   1ff0a:	460f      	mov	r7, r1
   1ff0c:	d103      	bne.n	1ff16 <bsd_os_timedwait+0x1e>
	z_impl_k_yield();
   1ff0e:	f00d fedf 	bl	2dcd0 <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   1ff12:	203c      	movs	r0, #60	; 0x3c
   1ff14:	e084      	b.n	20020 <bsd_os_timedwait+0x128>
		*timeout = SYS_FOREVER_MS;
   1ff16:	bfbc      	itt	lt
   1ff18:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   1ff1c:	6033      	strlt	r3, [r6, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1ff1e:	2201      	movs	r2, #1
   1ff20:	2100      	movs	r1, #0
   1ff22:	a802      	add	r0, sp, #8
   1ff24:	f018 fef2 	bl	38d0c <z_impl_k_sem_init>
   1ff28:	f10d 0a04 	add.w	sl, sp, #4
	__asm__ volatile(
   1ff2c:	f04f 0320 	mov.w	r3, #32
   1ff30:	f3ef 8b11 	mrs	fp, BASEPRI
   1ff34:	f383 8811 	msr	BASEPRI, r3
   1ff38:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1ff3c:	f00e f846 	bl	2dfcc <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   1ff40:	f7ff ff96 	bl	1fe70 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   1ff44:	493f      	ldr	r1, [pc, #252]	; (20044 <bsd_os_timedwait+0x14c>)
   1ff46:	6843      	ldr	r3, [r0, #4]
   1ff48:	680a      	ldr	r2, [r1, #0]
   1ff4a:	4689      	mov	r9, r1
   1ff4c:	4293      	cmp	r3, r2
   1ff4e:	f04f 0300 	mov.w	r3, #0
   1ff52:	d108      	bne.n	1ff66 <bsd_os_timedwait+0x6e>
	parent->next = child;
   1ff54:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   1ff56:	4b3c      	ldr	r3, [pc, #240]	; (20048 <bsd_os_timedwait+0x150>)
   1ff58:	685a      	ldr	r2, [r3, #4]
   1ff5a:	2a00      	cmp	r2, #0
   1ff5c:	d163      	bne.n	20026 <bsd_os_timedwait+0x12e>
	list->head = node;
   1ff5e:	e9c3 aa00 	strd	sl, sl, [r3]
		allow_to_sleep = true;
   1ff62:	2301      	movs	r3, #1
   1ff64:	e000      	b.n	1ff68 <bsd_os_timedwait+0x70>
	entry->cnt = rpc_event_cnt;
   1ff66:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   1ff68:	f38b 8811 	msr	BASEPRI, fp
   1ff6c:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   1ff70:	2b00      	cmp	r3, #0
   1ff72:	d054      	beq.n	2001e <bsd_os_timedwait+0x126>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   1ff74:	6831      	ldr	r1, [r6, #0]
	return z_impl_k_sem_take(sem, timeout);
   1ff76:	a802      	add	r0, sp, #8
   1ff78:	f00e f872 	bl	2e060 <z_impl_k_sem_take>
	__asm__ volatile(
   1ff7c:	f04f 0320 	mov.w	r3, #32
   1ff80:	f3ef 8b11 	mrs	fp, BASEPRI
   1ff84:	f383 8811 	msr	BASEPRI, r3
   1ff88:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ff8c:	2000      	movs	r0, #0
   1ff8e:	4b2e      	ldr	r3, [pc, #184]	; (20048 <bsd_os_timedwait+0x150>)
   1ff90:	681a      	ldr	r2, [r3, #0]
   1ff92:	b15a      	cbz	r2, 1ffac <bsd_os_timedwait+0xb4>
   1ff94:	4552      	cmp	r2, sl
   1ff96:	d151      	bne.n	2003c <bsd_os_timedwait+0x144>
Z_GENLIST_REMOVE(slist, snode)
   1ff98:	9901      	ldr	r1, [sp, #4]
   1ff9a:	2800      	cmp	r0, #0
   1ff9c:	d148      	bne.n	20030 <bsd_os_timedwait+0x138>
   1ff9e:	6858      	ldr	r0, [r3, #4]
	list->head = node;
   1ffa0:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1ffa2:	4290      	cmp	r0, r2
   1ffa4:	d100      	bne.n	1ffa8 <bsd_os_timedwait+0xb0>
	list->tail = node;
   1ffa6:	6059      	str	r1, [r3, #4]
	parent->next = child;
   1ffa8:	2300      	movs	r3, #0
   1ffaa:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
   1ffac:	f00e f80e 	bl	2dfcc <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   1ffb0:	f7ff ff5e 	bl	1fe70 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   1ffb4:	f8d9 3000 	ldr.w	r3, [r9]
   1ffb8:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   1ffba:	f38b 8811 	msr	BASEPRI, fp
   1ffbe:	f3bf 8f6f 	isb	sy
	if (*timeout == SYS_FOREVER_MS) {
   1ffc2:	f8d6 a000 	ldr.w	sl, [r6]
   1ffc6:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   1ffca:	d028      	beq.n	2001e <bsd_os_timedwait+0x126>
	return z_impl_k_uptime_ticks();
   1ffcc:	f018 ff2b 	bl	38e26 <z_impl_k_uptime_ticks>
			return (t * to_hz + off) / from_hz;
   1ffd0:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   1ffd4:	fba8 890c 	umull	r8, r9, r8, ip
   1ffd8:	fb0c 9907 	mla	r9, ip, r7, r9
   1ffdc:	ea4f 32d8 	mov.w	r2, r8, lsr #15
   1ffe0:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
	remaining = *timeout - k_uptime_delta(&start);
   1ffe4:	eb12 080a 	adds.w	r8, r2, sl
   1ffe8:	ea4f 33d9 	mov.w	r3, r9, lsr #15
   1ffec:	eb43 79ea 	adc.w	r9, r3, sl, asr #31
   1fff0:	fba0 ab0c 	umull	sl, fp, r0, ip
   1fff4:	fb0c bb01 	mla	fp, ip, r1, fp
   1fff8:	ea4f 33da 	mov.w	r3, sl, lsr #15
   1fffc:	ea43 434b 	orr.w	r3, r3, fp, lsl #17
   20000:	ebb8 0403 	subs.w	r4, r8, r3
   20004:	ea4f 32db 	mov.w	r2, fp, lsr #15
   20008:	eb69 0502 	sbc.w	r5, r9, r2
	*timeout = remaining > 0 ? remaining : 0;
   2000c:	2c00      	cmp	r4, #0
   2000e:	f175 0300 	sbcs.w	r3, r5, #0
   20012:	bfb8      	it	lt
   20014:	2400      	movlt	r4, #0
   20016:	6034      	str	r4, [r6, #0]
	if (*timeout == 0) {
   20018:	2c00      	cmp	r4, #0
   2001a:	f43f af7a 	beq.w	1ff12 <bsd_os_timedwait+0x1a>
	return 0;
   2001e:	2000      	movs	r0, #0
}
   20020:	b009      	add	sp, #36	; 0x24
   20022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20026:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   2002a:	f8c3 a004 	str.w	sl, [r3, #4]
   2002e:	e798      	b.n	1ff62 <bsd_os_timedwait+0x6a>
	parent->next = child;
   20030:	6001      	str	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   20032:	6859      	ldr	r1, [r3, #4]
   20034:	4291      	cmp	r1, r2
	list->tail = node;
   20036:	bf08      	it	eq
   20038:	6058      	streq	r0, [r3, #4]
   2003a:	e7b5      	b.n	1ffa8 <bsd_os_timedwait+0xb0>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2003c:	4610      	mov	r0, r2
   2003e:	6812      	ldr	r2, [r2, #0]
   20040:	e7a7      	b.n	1ff92 <bsd_os_timedwait+0x9a>
   20042:	bf00      	nop
   20044:	20022240 	.word	0x20022240
   20048:	20022244 	.word	0x20022244

0002004c <bsd_os_errno_set>:
	switch (err_code) {
   2004c:	282d      	cmp	r0, #45	; 0x2d
{
   2004e:	b510      	push	{r4, lr}
   20050:	4604      	mov	r4, r0
	switch (err_code) {
   20052:	f000 80a8 	beq.w	201a6 <bsd_os_errno_set+0x15a>
   20056:	dc50      	bgt.n	200fa <bsd_os_errno_set+0xae>
   20058:	2816      	cmp	r0, #22
   2005a:	d009      	beq.n	20070 <bsd_os_errno_set+0x24>
   2005c:	dc38      	bgt.n	200d0 <bsd_os_errno_set+0x84>
   2005e:	2808      	cmp	r0, #8
   20060:	d006      	beq.n	20070 <bsd_os_errno_set+0x24>
   20062:	dc09      	bgt.n	20078 <bsd_os_errno_set+0x2c>
   20064:	2802      	cmp	r0, #2
   20066:	d003      	beq.n	20070 <bsd_os_errno_set+0x24>
   20068:	2805      	cmp	r0, #5
   2006a:	d001      	beq.n	20070 <bsd_os_errno_set+0x24>
   2006c:	2801      	cmp	r0, #1
   2006e:	d10c      	bne.n	2008a <bsd_os_errno_set+0x3e>
		errno = ENOBUFS;
   20070:	f015 fa2f 	bl	354d2 <__errno>
   20074:	6004      	str	r4, [r0, #0]
}
   20076:	bd10      	pop	{r4, pc}
	switch (err_code) {
   20078:	280c      	cmp	r0, #12
   2007a:	d0f9      	beq.n	20070 <bsd_os_errno_set+0x24>
   2007c:	dc01      	bgt.n	20082 <bsd_os_errno_set+0x36>
   2007e:	2809      	cmp	r0, #9
   20080:	e7f5      	b.n	2006e <bsd_os_errno_set+0x22>
   20082:	280d      	cmp	r0, #13
   20084:	d0f4      	beq.n	20070 <bsd_os_errno_set+0x24>
   20086:	280e      	cmp	r0, #14
   20088:	d074      	beq.n	20174 <bsd_os_errno_set+0x128>
		__ASSERT(false, "Untranslated errno %d set by bsdlib!", err_code);
   2008a:	f44f 73a5 	mov.w	r3, #330	; 0x14a
   2008e:	4a63      	ldr	r2, [pc, #396]	; (2021c <bsd_os_errno_set+0x1d0>)
   20090:	4963      	ldr	r1, [pc, #396]	; (20220 <bsd_os_errno_set+0x1d4>)
   20092:	4864      	ldr	r0, [pc, #400]	; (20224 <bsd_os_errno_set+0x1d8>)
   20094:	f013 fa8d 	bl	335b2 <printk>
   20098:	4621      	mov	r1, r4
   2009a:	4863      	ldr	r0, [pc, #396]	; (20228 <bsd_os_errno_set+0x1dc>)
   2009c:	f013 fa89 	bl	335b2 <printk>
   200a0:	f44f 71a5 	mov.w	r1, #330	; 0x14a
   200a4:	485d      	ldr	r0, [pc, #372]	; (2021c <bsd_os_errno_set+0x1d0>)
   200a6:	f013 fd85 	bl	33bb4 <assert_post_action>
		LOG_ERR("Untranslated errno %d set by bsdlib!", err_code);
   200aa:	2301      	movs	r3, #1
   200ac:	f04f 0000 	mov.w	r0, #0
   200b0:	4a5e      	ldr	r2, [pc, #376]	; (2022c <bsd_os_errno_set+0x1e0>)
   200b2:	f363 0007 	bfi	r0, r3, #0, #8
   200b6:	4b5e      	ldr	r3, [pc, #376]	; (20230 <bsd_os_errno_set+0x1e4>)
   200b8:	495e      	ldr	r1, [pc, #376]	; (20234 <bsd_os_errno_set+0x1e8>)
   200ba:	1a9b      	subs	r3, r3, r2
   200bc:	08db      	lsrs	r3, r3, #3
   200be:	f363 108f 	bfi	r0, r3, #6, #10
   200c2:	4622      	mov	r2, r4
   200c4:	f013 fd8d 	bl	33be2 <log_string_sync>
		errno = 0xBAADBAAD;
   200c8:	f015 fa03 	bl	354d2 <__errno>
   200cc:	4b5a      	ldr	r3, [pc, #360]	; (20238 <bsd_os_errno_set+0x1ec>)
   200ce:	e054      	b.n	2017a <bsd_os_errno_set+0x12e>
	switch (err_code) {
   200d0:	2828      	cmp	r0, #40	; 0x28
   200d2:	f000 809f 	beq.w	20214 <bsd_os_errno_set+0x1c8>
   200d6:	dc05      	bgt.n	200e4 <bsd_os_errno_set+0x98>
   200d8:	2823      	cmp	r0, #35	; 0x23
   200da:	d050      	beq.n	2017e <bsd_os_errno_set+0x132>
   200dc:	2825      	cmp	r0, #37	; 0x25
   200de:	d052      	beq.n	20186 <bsd_os_errno_set+0x13a>
   200e0:	2818      	cmp	r0, #24
   200e2:	e7c4      	b.n	2006e <bsd_os_errno_set+0x22>
   200e4:	282a      	cmp	r0, #42	; 0x2a
   200e6:	d056      	beq.n	20196 <bsd_os_errno_set+0x14a>
   200e8:	db51      	blt.n	2018e <bsd_os_errno_set+0x142>
   200ea:	282b      	cmp	r0, #43	; 0x2b
   200ec:	d057      	beq.n	2019e <bsd_os_errno_set+0x152>
   200ee:	282c      	cmp	r0, #44	; 0x2c
   200f0:	d1cb      	bne.n	2008a <bsd_os_errno_set+0x3e>
		errno = ESOCKTNOSUPPORT;
   200f2:	f015 f9ee 	bl	354d2 <__errno>
   200f6:	237c      	movs	r3, #124	; 0x7c
   200f8:	e03f      	b.n	2017a <bsd_os_errno_set+0x12e>
	switch (err_code) {
   200fa:	283c      	cmp	r0, #60	; 0x3c
   200fc:	d06b      	beq.n	201d6 <bsd_os_errno_set+0x18a>
   200fe:	dc1d      	bgt.n	2013c <bsd_os_errno_set+0xf0>
   20100:	2833      	cmp	r0, #51	; 0x33
   20102:	d05c      	beq.n	201be <bsd_os_errno_set+0x172>
   20104:	dc09      	bgt.n	2011a <bsd_os_errno_set+0xce>
   20106:	2830      	cmp	r0, #48	; 0x30
   20108:	d051      	beq.n	201ae <bsd_os_errno_set+0x162>
   2010a:	2832      	cmp	r0, #50	; 0x32
   2010c:	d053      	beq.n	201b6 <bsd_os_errno_set+0x16a>
   2010e:	282f      	cmp	r0, #47	; 0x2f
   20110:	d1bb      	bne.n	2008a <bsd_os_errno_set+0x3e>
		errno = EAFNOSUPPORT;
   20112:	f015 f9de 	bl	354d2 <__errno>
   20116:	236a      	movs	r3, #106	; 0x6a
   20118:	e02f      	b.n	2017a <bsd_os_errno_set+0x12e>
	switch (err_code) {
   2011a:	2836      	cmp	r0, #54	; 0x36
   2011c:	d053      	beq.n	201c6 <bsd_os_errno_set+0x17a>
   2011e:	dc05      	bgt.n	2012c <bsd_os_errno_set+0xe0>
   20120:	2834      	cmp	r0, #52	; 0x34
   20122:	d1b2      	bne.n	2008a <bsd_os_errno_set+0x3e>
		errno = ENETRESET;
   20124:	f015 f9d5 	bl	354d2 <__errno>
   20128:	237e      	movs	r3, #126	; 0x7e
   2012a:	e026      	b.n	2017a <bsd_os_errno_set+0x12e>
	switch (err_code) {
   2012c:	2838      	cmp	r0, #56	; 0x38
   2012e:	d04e      	beq.n	201ce <bsd_os_errno_set+0x182>
   20130:	2839      	cmp	r0, #57	; 0x39
   20132:	d1aa      	bne.n	2008a <bsd_os_errno_set+0x3e>
		errno = ENOTCONN;
   20134:	f015 f9cd 	bl	354d2 <__errno>
   20138:	2380      	movs	r3, #128	; 0x80
   2013a:	e01e      	b.n	2017a <bsd_os_errno_set+0x12e>
	switch (err_code) {
   2013c:	287d      	cmp	r0, #125	; 0x7d
   2013e:	d056      	beq.n	201ee <bsd_os_errno_set+0x1a2>
   20140:	dc0c      	bgt.n	2015c <bsd_os_errno_set+0x110>
   20142:	2870      	cmp	r0, #112	; 0x70
   20144:	d04b      	beq.n	201de <bsd_os_errno_set+0x192>
   20146:	dc01      	bgt.n	2014c <bsd_os_errno_set+0x100>
   20148:	2869      	cmp	r0, #105	; 0x69
   2014a:	e790      	b.n	2006e <bsd_os_errno_set+0x22>
   2014c:	2872      	cmp	r0, #114	; 0x72
   2014e:	d04a      	beq.n	201e6 <bsd_os_errno_set+0x19a>
   20150:	2873      	cmp	r0, #115	; 0x73
   20152:	d19a      	bne.n	2008a <bsd_os_errno_set+0x3e>
		errno = EINPROGRESS;
   20154:	f015 f9bd 	bl	354d2 <__errno>
   20158:	2377      	movs	r3, #119	; 0x77
   2015a:	e00e      	b.n	2017a <bsd_os_errno_set+0x12e>
	switch (err_code) {
   2015c:	287f      	cmp	r0, #127	; 0x7f
   2015e:	d04f      	beq.n	20200 <bsd_os_errno_set+0x1b4>
   20160:	db49      	blt.n	201f6 <bsd_os_errno_set+0x1aa>
   20162:	2880      	cmp	r0, #128	; 0x80
   20164:	d051      	beq.n	2020a <bsd_os_errno_set+0x1be>
   20166:	2881      	cmp	r0, #129	; 0x81
   20168:	d18f      	bne.n	2008a <bsd_os_errno_set+0x3e>
		errno = EKEYREJECTED;
   2016a:	f015 f9b2 	bl	354d2 <__errno>
   2016e:	f240 73d4 	movw	r3, #2004	; 0x7d4
   20172:	e002      	b.n	2017a <bsd_os_errno_set+0x12e>
		errno = EFAULT;
   20174:	f015 f9ad 	bl	354d2 <__errno>
   20178:	230e      	movs	r3, #14
		errno = 0xBAADBAAD;
   2017a:	6003      	str	r3, [r0, #0]
}
   2017c:	e77b      	b.n	20076 <bsd_os_errno_set+0x2a>
		errno = EAGAIN;
   2017e:	f015 f9a8 	bl	354d2 <__errno>
   20182:	230b      	movs	r3, #11
   20184:	e7f9      	b.n	2017a <bsd_os_errno_set+0x12e>
		errno = EDOM;
   20186:	f015 f9a4 	bl	354d2 <__errno>
   2018a:	2321      	movs	r3, #33	; 0x21
   2018c:	e7f5      	b.n	2017a <bsd_os_errno_set+0x12e>
		errno = EPROTOTYPE;
   2018e:	f015 f9a0 	bl	354d2 <__errno>
   20192:	236b      	movs	r3, #107	; 0x6b
   20194:	e7f1      	b.n	2017a <bsd_os_errno_set+0x12e>
		errno = ENOPROTOOPT;
   20196:	f015 f99c 	bl	354d2 <__errno>
   2019a:	236d      	movs	r3, #109	; 0x6d
   2019c:	e7ed      	b.n	2017a <bsd_os_errno_set+0x12e>
		errno = EPROTONOSUPPORT;
   2019e:	f015 f998 	bl	354d2 <__errno>
   201a2:	237b      	movs	r3, #123	; 0x7b
   201a4:	e7e9      	b.n	2017a <bsd_os_errno_set+0x12e>
		errno = EOPNOTSUPP;
   201a6:	f015 f994 	bl	354d2 <__errno>
   201aa:	235f      	movs	r3, #95	; 0x5f
   201ac:	e7e5      	b.n	2017a <bsd_os_errno_set+0x12e>
		errno = EADDRINUSE;
   201ae:	f015 f990 	bl	354d2 <__errno>
   201b2:	2370      	movs	r3, #112	; 0x70
   201b4:	e7e1      	b.n	2017a <bsd_os_errno_set+0x12e>
		errno = ENETDOWN;
   201b6:	f015 f98c 	bl	354d2 <__errno>
   201ba:	2373      	movs	r3, #115	; 0x73
   201bc:	e7dd      	b.n	2017a <bsd_os_errno_set+0x12e>
		errno = ENETUNREACH;
   201be:	f015 f988 	bl	354d2 <__errno>
   201c2:	2372      	movs	r3, #114	; 0x72
   201c4:	e7d9      	b.n	2017a <bsd_os_errno_set+0x12e>
		errno = ECONNRESET;
   201c6:	f015 f984 	bl	354d2 <__errno>
   201ca:	2368      	movs	r3, #104	; 0x68
   201cc:	e7d5      	b.n	2017a <bsd_os_errno_set+0x12e>
		errno = EISCONN;
   201ce:	f015 f980 	bl	354d2 <__errno>
   201d2:	237f      	movs	r3, #127	; 0x7f
   201d4:	e7d1      	b.n	2017a <bsd_os_errno_set+0x12e>
		errno = ETIMEDOUT;
   201d6:	f015 f97c 	bl	354d2 <__errno>
   201da:	2374      	movs	r3, #116	; 0x74
   201dc:	e7cd      	b.n	2017a <bsd_os_errno_set+0x12e>
		errno = EHOSTDOWN;
   201de:	f015 f978 	bl	354d2 <__errno>
   201e2:	2375      	movs	r3, #117	; 0x75
   201e4:	e7c9      	b.n	2017a <bsd_os_errno_set+0x12e>
		errno = EALREADY;
   201e6:	f015 f974 	bl	354d2 <__errno>
   201ea:	2378      	movs	r3, #120	; 0x78
   201ec:	e7c5      	b.n	2017a <bsd_os_errno_set+0x12e>
		errno = ECANCELED;
   201ee:	f015 f970 	bl	354d2 <__errno>
   201f2:	238c      	movs	r3, #140	; 0x8c
   201f4:	e7c1      	b.n	2017a <bsd_os_errno_set+0x12e>
		errno = ENOKEY;
   201f6:	f015 f96c 	bl	354d2 <__errno>
   201fa:	f240 73d1 	movw	r3, #2001	; 0x7d1
   201fe:	e7bc      	b.n	2017a <bsd_os_errno_set+0x12e>
		errno = EKEYEXPIRED;
   20200:	f015 f967 	bl	354d2 <__errno>
   20204:	f240 73d2 	movw	r3, #2002	; 0x7d2
   20208:	e7b7      	b.n	2017a <bsd_os_errno_set+0x12e>
		errno = EKEYREVOKED;
   2020a:	f015 f962 	bl	354d2 <__errno>
   2020e:	f240 73d3 	movw	r3, #2003	; 0x7d3
   20212:	e7b2      	b.n	2017a <bsd_os_errno_set+0x12e>
		errno = EMSGSIZE;
   20214:	f015 f95d 	bl	354d2 <__errno>
   20218:	237a      	movs	r3, #122	; 0x7a
   2021a:	e7ae      	b.n	2017a <bsd_os_errno_set+0x12e>
   2021c:	0003e1ec 	.word	0x0003e1ec
   20220:	0003fd2f 	.word	0x0003fd2f
   20224:	0003b773 	.word	0x0003b773
   20228:	0003e210 	.word	0x0003e210
   2022c:	00039f48 	.word	0x00039f48
   20230:	00039f60 	.word	0x00039f60
   20234:	0003e237 	.word	0x0003e237
   20238:	baadbaad 	.word	0xbaadbaad

0002023c <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2023c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   20240:	4b01      	ldr	r3, [pc, #4]	; (20248 <bsd_os_application_irq_set+0xc>)
   20242:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   20246:	4770      	bx	lr
   20248:	e000e100 	.word	0xe000e100

0002024c <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2024c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   20250:	4b01      	ldr	r3, [pc, #4]	; (20258 <bsd_os_application_irq_clear+0xc>)
   20252:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   20256:	4770      	bx	lr
   20258:	e000e100 	.word	0xe000e100

0002025c <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2025c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   20260:	4b01      	ldr	r3, [pc, #4]	; (20268 <bsd_os_trace_irq_set+0xc>)
   20262:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   20266:	4770      	bx	lr
   20268:	e000e100 	.word	0xe000e100

0002026c <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2026c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   20270:	4b01      	ldr	r3, [pc, #4]	; (20278 <bsd_os_trace_irq_clear+0xc>)
   20272:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   20276:	4770      	bx	lr
   20278:	e000e100 	.word	0xe000e100

0002027c <bsd_os_init>:
#endif
}

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
   2027c:	b508      	push	{r3, lr}
	list->head = NULL;
   2027e:	2300      	movs	r3, #0
   20280:	4a07      	ldr	r2, [pc, #28]	; (202a0 <bsd_os_init+0x24>)
	list->tail = NULL;
   20282:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   20286:	4a07      	ldr	r2, [pc, #28]	; (202a4 <bsd_os_init+0x28>)
   20288:	e8d2 1fef 	ldaex	r1, [r2]
   2028c:	e8c2 3fe0 	stlex	r0, r3, [r2]
   20290:	2800      	cmp	r0, #0
   20292:	d1f9      	bne.n	20288 <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   20294:	f017 ff5b 	bl	3814e <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
	trace_task_create();
}
   20298:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
   2029c:	f017 bf4c 	b.w	38138 <trace_task_create>
   202a0:	20022244 	.word	0x20022244
   202a4:	20022240 	.word	0x20022240

000202a8 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   202a8:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   202ac:	d03c      	beq.n	20328 <z_to_nrf_optname+0x80>
   202ae:	dc04      	bgt.n	202ba <z_to_nrf_optname+0x12>
   202b0:	2801      	cmp	r0, #1
   202b2:	d042      	beq.n	2033a <z_to_nrf_optname+0x92>
			break;
		}
		break;

	default:
		retval = -1;
   202b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		break;
	}

	return retval;
}
   202b8:	4770      	bx	lr
	switch (z_in_level) {
   202ba:	f240 2302 	movw	r3, #514	; 0x202
   202be:	4298      	cmp	r0, r3
   202c0:	d060      	beq.n	20384 <z_to_nrf_optname+0xdc>
   202c2:	f240 2303 	movw	r3, #515	; 0x203
   202c6:	4298      	cmp	r0, r3
   202c8:	d1f4      	bne.n	202b4 <z_to_nrf_optname+0xc>
		switch (z_in_optname) {
   202ca:	3901      	subs	r1, #1
   202cc:	2913      	cmp	r1, #19
   202ce:	d8f1      	bhi.n	202b4 <z_to_nrf_optname+0xc>
   202d0:	a301      	add	r3, pc, #4	; (adr r3, 202d8 <z_to_nrf_optname+0x30>)
   202d2:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   202d6:	bf00      	nop
   202d8:	00020391 	.word	0x00020391
   202dc:	00020369 	.word	0x00020369
   202e0:	0002036d 	.word	0x0002036d
   202e4:	00020371 	.word	0x00020371
   202e8:	00020375 	.word	0x00020375
   202ec:	00020379 	.word	0x00020379
   202f0:	0002037d 	.word	0x0002037d
   202f4:	000202b5 	.word	0x000202b5
   202f8:	000202b5 	.word	0x000202b5
   202fc:	000202b5 	.word	0x000202b5
   20300:	000202b5 	.word	0x000202b5
   20304:	000202b5 	.word	0x000202b5
   20308:	000202b5 	.word	0x000202b5
   2030c:	000202b5 	.word	0x000202b5
   20310:	000202b5 	.word	0x000202b5
   20314:	000202b5 	.word	0x000202b5
   20318:	000202b5 	.word	0x000202b5
   2031c:	000202b5 	.word	0x000202b5
   20320:	000202b5 	.word	0x000202b5
   20324:	00020381 	.word	0x00020381
		switch (z_in_optname) {
   20328:	3901      	subs	r1, #1
   2032a:	2906      	cmp	r1, #6
   2032c:	d8c2      	bhi.n	202b4 <z_to_nrf_optname+0xc>
   2032e:	e8df f001 	tbb	[pc, r1]
   20332:	211b      	.short	0x211b
   20334:	2f1f2523 	.word	0x2f1f2523
   20338:	1d          	.byte	0x1d
   20339:	00          	.byte	0x00
		switch (z_in_optname) {
   2033a:	2915      	cmp	r1, #21
   2033c:	d00d      	beq.n	2035a <z_to_nrf_optname+0xb2>
   2033e:	dc07      	bgt.n	20350 <z_to_nrf_optname+0xa8>
   20340:	2904      	cmp	r1, #4
   20342:	d015      	beq.n	20370 <z_to_nrf_optname+0xc8>
   20344:	2914      	cmp	r1, #20
   20346:	d008      	beq.n	2035a <z_to_nrf_optname+0xb2>
   20348:	2902      	cmp	r1, #2
   2034a:	d1b3      	bne.n	202b4 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_REUSEADDR;
   2034c:	2328      	movs	r3, #40	; 0x28
   2034e:	e020      	b.n	20392 <z_to_nrf_optname+0xea>
   20350:	291e      	cmp	r1, #30
   20352:	d002      	beq.n	2035a <z_to_nrf_optname+0xb2>
   20354:	dc04      	bgt.n	20360 <z_to_nrf_optname+0xb8>
   20356:	2919      	cmp	r1, #25
   20358:	d1ac      	bne.n	202b4 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SILENCE_IPV6_ECHO_REPLY;
   2035a:	6011      	str	r1, [r2, #0]
	int retval = 0;
   2035c:	2000      	movs	r0, #0
			break;
   2035e:	4770      	bx	lr
   20360:	291f      	cmp	r1, #31
   20362:	d0fa      	beq.n	2035a <z_to_nrf_optname+0xb2>
   20364:	2920      	cmp	r1, #32
   20366:	e7f7      	b.n	20358 <z_to_nrf_optname+0xb0>
			*nrf_out_optname = NRF_SO_DFU_RESOURCES;
   20368:	2302      	movs	r3, #2
   2036a:	e012      	b.n	20392 <z_to_nrf_optname+0xea>
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
   2036c:	2303      	movs	r3, #3
   2036e:	e010      	b.n	20392 <z_to_nrf_optname+0xea>
			*nrf_out_optname = NRF_SO_DFU_APPLY;
   20370:	2304      	movs	r3, #4
   20372:	e00e      	b.n	20392 <z_to_nrf_optname+0xea>
			*nrf_out_optname = NRF_SO_DFU_REVERT;
   20374:	2305      	movs	r3, #5
   20376:	e00c      	b.n	20392 <z_to_nrf_optname+0xea>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   20378:	2306      	movs	r3, #6
   2037a:	e00a      	b.n	20392 <z_to_nrf_optname+0xea>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   2037c:	2307      	movs	r3, #7
   2037e:	e008      	b.n	20392 <z_to_nrf_optname+0xea>
			*nrf_out_optname = NRF_SO_DFU_ERROR;
   20380:	2314      	movs	r3, #20
   20382:	e006      	b.n	20392 <z_to_nrf_optname+0xea>
		switch (z_in_optname) {
   20384:	2902      	cmp	r1, #2
   20386:	d0ef      	beq.n	20368 <z_to_nrf_optname+0xc0>
   20388:	2903      	cmp	r1, #3
   2038a:	d0ef      	beq.n	2036c <z_to_nrf_optname+0xc4>
   2038c:	2901      	cmp	r1, #1
   2038e:	d191      	bne.n	202b4 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   20390:	2301      	movs	r3, #1
			*nrf_out_optname = NRF_SO_DFU_ERROR;
   20392:	6013      	str	r3, [r2, #0]
   20394:	e7e2      	b.n	2035c <z_to_nrf_optname+0xb4>
   20396:	bf00      	nop

00020398 <nrf91_socket_offload_ioctl>:
	return retval;
}

static int nrf91_socket_offload_ioctl(void *obj, unsigned int request,
				      va_list args)
{
   20398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int sd = OBJ_TO_SD(obj);

	switch (request) {
   2039c:	f5a1 7380 	sub.w	r3, r1, #256	; 0x100
{
   203a0:	b093      	sub	sp, #76	; 0x4c
	int sd = OBJ_TO_SD(obj);
   203a2:	3801      	subs	r0, #1
	switch (request) {
   203a4:	2b05      	cmp	r3, #5
   203a6:	d87a      	bhi.n	2049e <nrf91_socket_offload_ioctl+0x106>
   203a8:	e8df f003 	tbb	[pc, r3]
   203ac:	95797909 	.word	0x95797909
   203b0:	0d03      	.short	0x0d03

	case ZFD_IOCTL_POLL_PREPARE:
		return -EXDEV;

	case ZFD_IOCTL_POLL_UPDATE:
		return -EOPNOTSUPP;
   203b2:	f06f 045e 	mvn.w	r4, #94	; 0x5e
	 * In Zephyr, fcntl() is just an alias of ioctl().
	 */
	default:
		return nrf91_socket_offload_fcntl(sd, request, args);
	}
}
   203b6:	4620      	mov	r0, r4
   203b8:	b013      	add	sp, #76	; 0x4c
   203ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return nrf_close(sd);
   203be:	f008 fd85 	bl	28ecc <nrf_close>
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   203c2:	4604      	mov	r4, r0
		break;
   203c4:	e7f7      	b.n	203b6 <nrf91_socket_offload_ioctl+0x1e>
	for (int i = 0; i < nfds; i++) {
   203c6:	f04f 0800 	mov.w	r8, #0
		nfds = va_arg(args, int);
   203ca:	e9d2 a900 	ldrd	sl, r9, [r2]
		timeout = va_arg(args, int);
   203ce:	6893      	ldr	r3, [r2, #8]
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = { 0 };
   203d0:	2100      	movs	r1, #0
   203d2:	2240      	movs	r2, #64	; 0x40
   203d4:	a802      	add	r0, sp, #8
		timeout = va_arg(args, int);
   203d6:	9301      	str	r3, [sp, #4]
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = { 0 };
   203d8:	4655      	mov	r5, sl
   203da:	f018 fe2c 	bl	39036 <memset>
   203de:	4657      	mov	r7, sl
	int retval = 0;
   203e0:	4644      	mov	r4, r8
		tmp[i].events = 0;
   203e2:	46c3      	mov	fp, r8
   203e4:	ae02      	add	r6, sp, #8
	for (int i = 0; i < nfds; i++) {
   203e6:	45c1      	cmp	r9, r8
   203e8:	dc33      	bgt.n	20452 <nrf91_socket_offload_ioctl+0xba>
	if (retval > 0) {
   203ea:	2c00      	cmp	r4, #0
   203ec:	dce3      	bgt.n	203b6 <nrf91_socket_offload_ioctl+0x1e>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   203ee:	9a01      	ldr	r2, [sp, #4]
   203f0:	4649      	mov	r1, r9
   203f2:	a802      	add	r0, sp, #8
   203f4:	f008 fe36 	bl	29064 <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   203f8:	2300      	movs	r3, #0
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   203fa:	4604      	mov	r4, r0
	for (int i = 0; i < nfds; i++) {
   203fc:	4599      	cmp	r9, r3
   203fe:	ddda      	ble.n	203b6 <nrf91_socket_offload_ioctl+0x1e>
		if (fds[i].fd < 0) {
   20400:	f85a 2033 	ldr.w	r2, [sl, r3, lsl #3]
   20404:	2a00      	cmp	r2, #0
   20406:	db21      	blt.n	2044c <nrf91_socket_offload_ioctl+0xb4>
		if (tmp[i].revents & NRF_POLLIN) {
   20408:	aa02      	add	r2, sp, #8
   2040a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   2040e:	88d2      	ldrh	r2, [r2, #6]
   20410:	07d7      	lsls	r7, r2, #31
			fds[i].revents |= POLLIN;
   20412:	bf42      	ittt	mi
   20414:	88e9      	ldrhmi	r1, [r5, #6]
   20416:	f041 0101 	orrmi.w	r1, r1, #1
   2041a:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLOUT) {
   2041c:	0796      	lsls	r6, r2, #30
			fds[i].revents |= POLLOUT;
   2041e:	bf42      	ittt	mi
   20420:	88e9      	ldrhmi	r1, [r5, #6]
   20422:	f041 0104 	orrmi.w	r1, r1, #4
   20426:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLERR) {
   20428:	0750      	lsls	r0, r2, #29
			fds[i].revents |= POLLERR;
   2042a:	bf42      	ittt	mi
   2042c:	88e9      	ldrhmi	r1, [r5, #6]
   2042e:	f041 0108 	orrmi.w	r1, r1, #8
   20432:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLNVAL) {
   20434:	06d1      	lsls	r1, r2, #27
			fds[i].revents |= POLLNVAL;
   20436:	bf42      	ittt	mi
   20438:	88e9      	ldrhmi	r1, [r5, #6]
   2043a:	f041 0120 	orrmi.w	r1, r1, #32
   2043e:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLHUP) {
   20440:	0712      	lsls	r2, r2, #28
			fds[i].revents |= POLLHUP;
   20442:	bf42      	ittt	mi
   20444:	88ea      	ldrhmi	r2, [r5, #6]
   20446:	f042 0210 	orrmi.w	r2, r2, #16
   2044a:	80ea      	strhmi	r2, [r5, #6]
	for (int i = 0; i < nfds; i++) {
   2044c:	3301      	adds	r3, #1
   2044e:	3508      	adds	r5, #8
   20450:	e7d4      	b.n	203fc <nrf91_socket_offload_ioctl+0x64>
		if (fds[i].fd < 0) {
   20452:	6838      	ldr	r0, [r7, #0]
		tmp[i].events = 0;
   20454:	f8a6 b004 	strh.w	fp, [r6, #4]
		if (fds[i].fd < 0) {
   20458:	2800      	cmp	r0, #0
		fds[i].revents = 0;
   2045a:	f8a7 b006 	strh.w	fp, [r7, #6]
		if (fds[i].fd < 0) {
   2045e:	da05      	bge.n	2046c <nrf91_socket_offload_ioctl+0xd4>
			tmp[i].fd = fds[i].fd;
   20460:	6030      	str	r0, [r6, #0]
	for (int i = 0; i < nfds; i++) {
   20462:	f108 0801 	add.w	r8, r8, #1
   20466:	3608      	adds	r6, #8
   20468:	3708      	adds	r7, #8
   2046a:	e7bc      	b.n	203e6 <nrf91_socket_offload_ioctl+0x4e>
			obj = z_get_fd_obj(fds[i].fd,
   2046c:	2286      	movs	r2, #134	; 0x86
   2046e:	491b      	ldr	r1, [pc, #108]	; (204dc <nrf91_socket_offload_ioctl+0x144>)
   20470:	f7f8 fa0c 	bl	1888c <z_get_fd_obj>
			if (obj != NULL) {
   20474:	b178      	cbz	r0, 20496 <nrf91_socket_offload_ioctl+0xfe>
				tmp[i].fd = OBJ_TO_SD(obj);
   20476:	3801      	subs	r0, #1
   20478:	6030      	str	r0, [r6, #0]
		if (fds[i].events & POLLIN) {
   2047a:	88b9      	ldrh	r1, [r7, #4]
   2047c:	07ca      	lsls	r2, r1, #31
			tmp[i].events |= NRF_POLLIN;
   2047e:	bf42      	ittt	mi
   20480:	88b2      	ldrhmi	r2, [r6, #4]
   20482:	f042 0201 	orrmi.w	r2, r2, #1
   20486:	80b2      	strhmi	r2, [r6, #4]
		if (fds[i].events & POLLOUT) {
   20488:	074b      	lsls	r3, r1, #29
			tmp[i].events |= NRF_POLLOUT;
   2048a:	bf42      	ittt	mi
   2048c:	88b2      	ldrhmi	r2, [r6, #4]
   2048e:	f042 0202 	orrmi.w	r2, r2, #2
   20492:	80b2      	strhmi	r2, [r6, #4]
   20494:	e7e5      	b.n	20462 <nrf91_socket_offload_ioctl+0xca>
				fds[i].revents = POLLNVAL;
   20496:	2220      	movs	r2, #32
				retval++;
   20498:	3401      	adds	r4, #1
				fds[i].revents = POLLNVAL;
   2049a:	80fa      	strh	r2, [r7, #6]
				retval++;
   2049c:	e7ed      	b.n	2047a <nrf91_socket_offload_ioctl+0xe2>
	switch (cmd) {
   2049e:	2903      	cmp	r1, #3
   204a0:	d00a      	beq.n	204b8 <nrf91_socket_offload_ioctl+0x120>
   204a2:	2904      	cmp	r1, #4
   204a4:	d110      	bne.n	204c8 <nrf91_socket_offload_ioctl+0x130>
		flags = va_arg(args, int);
   204a6:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   204a8:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   204ac:	d10c      	bne.n	204c8 <nrf91_socket_offload_ioctl+0x130>
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   204ae:	1392      	asrs	r2, r2, #14
   204b0:	2101      	movs	r1, #1
   204b2:	f008 fdd9 	bl	29068 <nrf_fcntl>
   204b6:	e784      	b.n	203c2 <nrf91_socket_offload_ioctl+0x2a>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   204b8:	2200      	movs	r2, #0
   204ba:	2102      	movs	r1, #2
   204bc:	f008 fdd4 	bl	29068 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   204c0:	0380      	lsls	r0, r0, #14
   204c2:	f400 4480 	and.w	r4, r0, #16384	; 0x4000
		break;
   204c6:	e776      	b.n	203b6 <nrf91_socket_offload_ioctl+0x1e>
	errno = EINVAL;
   204c8:	f015 f803 	bl	354d2 <__errno>
   204cc:	2316      	movs	r3, #22
	return retval;
   204ce:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	errno = EINVAL;
   204d2:	6003      	str	r3, [r0, #0]
		return nrf91_socket_offload_fcntl(sd, request, args);
   204d4:	e76f      	b.n	203b6 <nrf91_socket_offload_ioctl+0x1e>
		return -EXDEV;
   204d6:	f06f 0411 	mvn.w	r4, #17
   204da:	e76c      	b.n	203b6 <nrf91_socket_offload_ioctl+0x1e>
   204dc:	0003a710 	.word	0x0003a710

000204e0 <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   204e0:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   204e2:	4b03      	ldr	r3, [pc, #12]	; (204f0 <nrf91_socket_iface_init+0x10>)
   204e4:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   204e6:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   204e8:	4802      	ldr	r0, [pc, #8]	; (204f4 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   204ea:	769a      	strb	r2, [r3, #26]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   204ec:	f7f9 bb32 	b.w	19b54 <socket_offload_dns_register>
   204f0:	2002229c 	.word	0x2002229c
   204f4:	0003a708 	.word	0x0003a708

000204f8 <nrf91_socket_offload_accept>:
{
   204f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   204fc:	b08a      	sub	sp, #40	; 0x28
   204fe:	4605      	mov	r5, r0
   20500:	460c      	mov	r4, r1
   20502:	4616      	mov	r6, r2
	int fd = z_reserve_fd();
   20504:	f7f8 f9f0 	bl	188e8 <z_reserve_fd>
	if (fd < 0) {
   20508:	1e07      	subs	r7, r0, #0
	int sd = OBJ_TO_SD(obj);
   2050a:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
	if (fd < 0) {
   2050e:	da05      	bge.n	2051c <nrf91_socket_offload_accept+0x24>
	return -1;
   20510:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
}
   20514:	4638      	mov	r0, r7
   20516:	b00a      	add	sp, #40	; 0x28
   20518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((addr != NULL) && (addrlen != NULL)) {
   2051c:	b324      	cbz	r4, 20568 <nrf91_socket_offload_accept+0x70>
   2051e:	b336      	cbz	r6, 2056e <nrf91_socket_offload_accept+0x76>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   20520:	6832      	ldr	r2, [r6, #0]
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   20522:	ad01      	add	r5, sp, #4
		if (*addrlen == sizeof(struct sockaddr_in)) {
   20524:	2a08      	cmp	r2, #8
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   20526:	bf0c      	ite	eq
   20528:	2210      	moveq	r2, #16
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   2052a:	2224      	movne	r2, #36	; 0x24
   2052c:	9200      	str	r2, [sp, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   2052e:	466a      	mov	r2, sp
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   20530:	4629      	mov	r1, r5
   20532:	4618      	mov	r0, r3
   20534:	f008 fd32 	bl	28f9c <nrf_accept>
	if (new_sd < 0) {
   20538:	f1b0 0800 	subs.w	r8, r0, #0
   2053c:	dbe8      	blt.n	20510 <nrf91_socket_offload_accept+0x18>
	if ((addr != NULL) && (addrlen != NULL)) {
   2053e:	b164      	cbz	r4, 2055a <nrf91_socket_offload_accept+0x62>
   20540:	b15e      	cbz	r6, 2055a <nrf91_socket_offload_accept+0x62>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   20542:	686b      	ldr	r3, [r5, #4]
   20544:	2b02      	cmp	r3, #2
   20546:	d115      	bne.n	20574 <nrf91_socket_offload_accept+0x7c>
			*addrlen = sizeof(struct sockaddr_in);
   20548:	2308      	movs	r3, #8
   2054a:	6033      	str	r3, [r6, #0]
	ptr->sin_port = nrf_in->sin_port;
   2054c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   20550:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   20552:	2301      	movs	r3, #1
   20554:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   20556:	9b04      	ldr	r3, [sp, #16]
   20558:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, SD_TO_OBJ(new_sd),
   2055a:	4a0d      	ldr	r2, [pc, #52]	; (20590 <nrf91_socket_offload_accept+0x98>)
   2055c:	f108 0101 	add.w	r1, r8, #1
   20560:	4638      	mov	r0, r7
   20562:	f7f8 f9e3 	bl	1892c <z_finalize_fd>
	return fd;
   20566:	e7d5      	b.n	20514 <nrf91_socket_offload_accept+0x1c>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   20568:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   2056a:	4625      	mov	r5, r4
   2056c:	e7e0      	b.n	20530 <nrf91_socket_offload_accept+0x38>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   2056e:	4632      	mov	r2, r6
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   20570:	4635      	mov	r5, r6
   20572:	e7dd      	b.n	20530 <nrf91_socket_offload_accept+0x38>
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   20574:	2b0a      	cmp	r3, #10
   20576:	d106      	bne.n	20586 <nrf91_socket_offload_accept+0x8e>
			*addrlen = sizeof(struct sockaddr_in6);
   20578:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   2057a:	a901      	add	r1, sp, #4
			*addrlen = sizeof(struct sockaddr_in6);
   2057c:	6033      	str	r3, [r6, #0]
			nrf_to_z_ipv6(
   2057e:	4620      	mov	r0, r4
   20580:	f017 fed7 	bl	38332 <nrf_to_z_ipv6>
   20584:	e7e9      	b.n	2055a <nrf91_socket_offload_accept+0x62>
	z_free_fd(fd);
   20586:	4638      	mov	r0, r7
   20588:	f7f8 f9da 	bl	18940 <z_free_fd>
   2058c:	e7c0      	b.n	20510 <nrf91_socket_offload_accept+0x18>
   2058e:	bf00      	nop
   20590:	0003a710 	.word	0x0003a710

00020594 <nrf91_socket_offload_sendmsg>:
{
   20594:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   20598:	4607      	mov	r7, r0
   2059a:	4690      	mov	r8, r2
	if (msg == NULL) {
   2059c:	460c      	mov	r4, r1
   2059e:	b309      	cbz	r1, 205e4 <nrf91_socket_offload_sendmsg+0x50>
	for (i = 0; i < msg->msg_iovlen; i++) {
   205a0:	2300      	movs	r3, #0
	ssize_t len = 0;
   205a2:	461a      	mov	r2, r3
   205a4:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
   205a6:	4298      	cmp	r0, r3
   205a8:	d126      	bne.n	205f8 <nrf91_socket_offload_sendmsg+0x64>
	if (len <= sizeof(buf)) {
   205aa:	2a80      	cmp	r2, #128	; 0x80
   205ac:	d855      	bhi.n	2065a <nrf91_socket_offload_sendmsg+0xc6>
		for (i = 0; i < msg->msg_iovlen; i++) {
   205ae:	2500      	movs	r5, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   205b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   205b4:	482a      	ldr	r0, [pc, #168]	; (20660 <nrf91_socket_offload_sendmsg+0xcc>)
   205b6:	f00c f81f 	bl	2c5f8 <z_impl_k_mutex_lock>
		len = 0;
   205ba:	462e      	mov	r6, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   205bc:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 20664 <nrf91_socket_offload_sendmsg+0xd0>
		for (i = 0; i < msg->msg_iovlen; i++) {
   205c0:	68e3      	ldr	r3, [r4, #12]
   205c2:	42ab      	cmp	r3, r5
   205c4:	d81f      	bhi.n	20606 <nrf91_socket_offload_sendmsg+0x72>
		ret = nrf91_socket_offload_sendto(obj, buf, len,
   205c6:	6863      	ldr	r3, [r4, #4]
   205c8:	4632      	mov	r2, r6
   205ca:	9301      	str	r3, [sp, #4]
   205cc:	6823      	ldr	r3, [r4, #0]
   205ce:	4925      	ldr	r1, [pc, #148]	; (20664 <nrf91_socket_offload_sendmsg+0xd0>)
   205d0:	9300      	str	r3, [sp, #0]
   205d2:	4638      	mov	r0, r7
   205d4:	4643      	mov	r3, r8
   205d6:	f017 ffff 	bl	385d8 <nrf91_socket_offload_sendto>
   205da:	4606      	mov	r6, r0
	return z_impl_k_mutex_unlock(mutex);
   205dc:	4820      	ldr	r0, [pc, #128]	; (20660 <nrf91_socket_offload_sendmsg+0xcc>)
   205de:	f00c f8e9 	bl	2c7b4 <z_impl_k_mutex_unlock>
		return ret;
   205e2:	e005      	b.n	205f0 <nrf91_socket_offload_sendmsg+0x5c>
		errno = EINVAL;
   205e4:	f014 ff75 	bl	354d2 <__errno>
   205e8:	2316      	movs	r3, #22
		return -1;
   205ea:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
		errno = EINVAL;
   205ee:	6003      	str	r3, [r0, #0]
}
   205f0:	4630      	mov	r0, r6
   205f2:	b002      	add	sp, #8
   205f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
   205f8:	68a1      	ldr	r1, [r4, #8]
   205fa:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   205fe:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
   20600:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
   20602:	440a      	add	r2, r1
   20604:	e7cf      	b.n	205a6 <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   20606:	68a3      	ldr	r3, [r4, #8]
   20608:	ea4f 09c5 	mov.w	r9, r5, lsl #3
   2060c:	eb03 0209 	add.w	r2, r3, r9
   20610:	f853 1035 	ldr.w	r1, [r3, r5, lsl #3]
   20614:	eb0a 0006 	add.w	r0, sl, r6
   20618:	6852      	ldr	r2, [r2, #4]
   2061a:	f018 fcd2 	bl	38fc2 <memcpy>
			len += msg->msg_iov[i].iov_len;
   2061e:	68a3      	ldr	r3, [r4, #8]
		for (i = 0; i < msg->msg_iovlen; i++) {
   20620:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
   20622:	444b      	add	r3, r9
   20624:	685b      	ldr	r3, [r3, #4]
   20626:	441e      	add	r6, r3
   20628:	e7ca      	b.n	205c0 <nrf91_socket_offload_sendmsg+0x2c>
		if (msg->msg_iov[i].iov_len == 0) {
   2062a:	68a1      	ldr	r1, [r4, #8]
   2062c:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
   20630:	685a      	ldr	r2, [r3, #4]
   20632:	b162      	cbz	r2, 2064e <nrf91_socket_offload_sendmsg+0xba>
		ret = nrf91_socket_offload_sendto(obj, msg->msg_iov[i].iov_base,
   20634:	6863      	ldr	r3, [r4, #4]
   20636:	4638      	mov	r0, r7
   20638:	9301      	str	r3, [sp, #4]
   2063a:	6823      	ldr	r3, [r4, #0]
   2063c:	9300      	str	r3, [sp, #0]
   2063e:	f851 1035 	ldr.w	r1, [r1, r5, lsl #3]
   20642:	4643      	mov	r3, r8
   20644:	f017 ffc8 	bl	385d8 <nrf91_socket_offload_sendto>
		if (ret < 0) {
   20648:	1e06      	subs	r6, r0, #0
   2064a:	dbd1      	blt.n	205f0 <nrf91_socket_offload_sendmsg+0x5c>
		len += ret;
   2064c:	44b1      	add	r9, r6
	for (i = 0; i < msg->msg_iovlen; i++) {
   2064e:	3501      	adds	r5, #1
   20650:	68e3      	ldr	r3, [r4, #12]
   20652:	429d      	cmp	r5, r3
   20654:	d3e9      	bcc.n	2062a <nrf91_socket_offload_sendmsg+0x96>
   20656:	464e      	mov	r6, r9
   20658:	e7ca      	b.n	205f0 <nrf91_socket_offload_sendmsg+0x5c>
   2065a:	2500      	movs	r5, #0
	len = 0;
   2065c:	46a9      	mov	r9, r5
   2065e:	e7f7      	b.n	20650 <nrf91_socket_offload_sendmsg+0xbc>
   20660:	2002075c 	.word	0x2002075c
   20664:	20027ffa 	.word	0x20027ffa

00020668 <nrf91_socket_create>:
{
   20668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2066a:	4606      	mov	r6, r0
   2066c:	460d      	mov	r5, r1
   2066e:	4617      	mov	r7, r2
	int fd = z_reserve_fd();
   20670:	f7f8 f93a 	bl	188e8 <z_reserve_fd>
	if (fd < 0) {
   20674:	1e04      	subs	r4, r0, #0
   20676:	db0d      	blt.n	20694 <nrf91_socket_create+0x2c>
	family = z_to_nrf_family(family);
   20678:	b2b0      	uxth	r0, r6
   2067a:	f017 fd83 	bl	38184 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   2067e:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
	family = z_to_nrf_family(family);
   20682:	4606      	mov	r6, r0
	if (family == -EAFNOSUPPORT) {
   20684:	d109      	bne.n	2069a <nrf91_socket_create+0x32>
		errno = EAFNOSUPPORT;
   20686:	f014 ff24 	bl	354d2 <__errno>
   2068a:	236a      	movs	r3, #106	; 0x6a
		errno = EPROTONOSUPPORT;
   2068c:	6003      	str	r3, [r0, #0]
		z_free_fd(fd);
   2068e:	4620      	mov	r0, r4
   20690:	f7f8 f956 	bl	18940 <z_free_fd>
		return -1;
   20694:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   20698:	e01b      	b.n	206d2 <nrf91_socket_create+0x6a>
	switch (socktype) {
   2069a:	2d03      	cmp	r5, #3
   2069c:	d003      	beq.n	206a6 <nrf91_socket_create+0x3e>
		return NRF_SOCK_MGMT;
   2069e:	2d04      	cmp	r5, #4
   206a0:	bf08      	it	eq
   206a2:	f44f 7500 	moveq.w	r5, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   206a6:	4638      	mov	r0, r7
   206a8:	f017 fd84 	bl	381b4 <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   206ac:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	proto = z_to_nrf_protocol(proto);
   206b0:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   206b2:	d103      	bne.n	206bc <nrf91_socket_create+0x54>
		errno = EPROTONOSUPPORT;
   206b4:	f014 ff0d 	bl	354d2 <__errno>
   206b8:	237b      	movs	r3, #123	; 0x7b
   206ba:	e7e7      	b.n	2068c <nrf91_socket_create+0x24>
	retval = nrf_socket(family, type, proto);
   206bc:	4629      	mov	r1, r5
   206be:	4630      	mov	r0, r6
   206c0:	f008 fbf2 	bl	28ea8 <nrf_socket>
	if (sd < 0) {
   206c4:	1e01      	subs	r1, r0, #0
   206c6:	dbe2      	blt.n	2068e <nrf91_socket_create+0x26>
	z_finalize_fd(fd, SD_TO_OBJ(sd),
   206c8:	4a03      	ldr	r2, [pc, #12]	; (206d8 <nrf91_socket_create+0x70>)
   206ca:	3101      	adds	r1, #1
   206cc:	4620      	mov	r0, r4
   206ce:	f7f8 f92d 	bl	1892c <z_finalize_fd>
}
   206d2:	4620      	mov	r0, r4
   206d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   206d6:	bf00      	nop
   206d8:	0003a710 	.word	0x0003a710

000206dc <callback_worker>:

	return new_len;
}

static void callback_worker(struct k_work *item)
{
   206dc:	b507      	push	{r0, r1, r2, lr}
	struct callback_work_item *data =
   206de:	9001      	str	r0, [sp, #4]
		CONTAINER_OF(item, struct callback_work_item, work);

	if (data != NULL) {
   206e0:	b118      	cbz	r0, 206ea <callback_worker+0xe>
		data->callback(data->data);
   206e2:	f8d0 3a98 	ldr.w	r3, [r0, #2712]	; 0xa98
   206e6:	300c      	adds	r0, #12
   206e8:	4798      	blx	r3
	}

	k_mem_slab_free(&rsp_work_items, (void **)&data);
   206ea:	a901      	add	r1, sp, #4
   206ec:	4802      	ldr	r0, [pc, #8]	; (206f8 <callback_worker+0x1c>)
   206ee:	f00b fd8b 	bl	2c208 <k_mem_slab_free>
}
   206f2:	b003      	add	sp, #12
   206f4:	f85d fb04 	ldr.w	pc, [sp], #4
   206f8:	200206a0 	.word	0x200206a0

000206fc <open_socket>:
{
   206fc:	b508      	push	{r3, lr}
	return z_impl_zsock_socket(family, type, proto);
   206fe:	f240 2201 	movw	r2, #513	; 0x201
   20702:	2102      	movs	r1, #2
   20704:	2066      	movs	r0, #102	; 0x66
   20706:	f7f8 fe73 	bl	193f0 <z_impl_zsock_socket>
	common_socket_fd = socket(AF_LTE, SOCK_DGRAM, NPROTO_AT);
   2070a:	4b05      	ldr	r3, [pc, #20]	; (20720 <open_socket+0x24>)
   2070c:	6018      	str	r0, [r3, #0]
	if (common_socket_fd == -1) {
   2070e:	3001      	adds	r0, #1
   20710:	d104      	bne.n	2071c <open_socket+0x20>
		return -errno;
   20712:	f014 fede 	bl	354d2 <__errno>
   20716:	6800      	ldr	r0, [r0, #0]
   20718:	4240      	negs	r0, r0
}
   2071a:	bd08      	pop	{r3, pc}
	return 0;
   2071c:	2000      	movs	r0, #0
   2071e:	e7fc      	b.n	2071a <open_socket+0x1e>
   20720:	200222a0 	.word	0x200222a0

00020724 <at_write>:
		}
	}
}

static inline int at_write(const char *const cmd, enum at_cmd_state *state)
{
   20724:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   20726:	4605      	mov	r5, r0
   20728:	460c      	mov	r4, r1
	int bytes_sent;
	int bytes_to_send = strlen(cmd);
   2072a:	f7f1 fca9 	bl	12080 <strlen>
	struct return_state_object ret;

	LOG_DBG("Sending command %s", log_strdup(cmd));

	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   2072e:	4b23      	ldr	r3, [pc, #140]	; (207bc <at_write+0x98>)
	int bytes_to_send = strlen(cmd);
   20730:	4606      	mov	r6, r0
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   20732:	6818      	ldr	r0, [r3, #0]
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   20734:	2300      	movs	r3, #0
   20736:	4629      	mov	r1, r5
   20738:	e9cd 3300 	strd	r3, r3, [sp]
   2073c:	4632      	mov	r2, r6
   2073e:	f013 fb9c 	bl	33e7a <z_impl_zsock_sendto>

	if (bytes_sent == -1) {
   20742:	1c43      	adds	r3, r0, #1
   20744:	4605      	mov	r5, r0
   20746:	d120      	bne.n	2078a <at_write+0x66>
		LOG_ERR("Failed to send AT command (err:%d)", errno);
   20748:	2301      	movs	r3, #1
   2074a:	f04f 0500 	mov.w	r5, #0
   2074e:	4a1c      	ldr	r2, [pc, #112]	; (207c0 <at_write+0x9c>)
   20750:	f363 0507 	bfi	r5, r3, #0, #8
   20754:	4b1b      	ldr	r3, [pc, #108]	; (207c4 <at_write+0xa0>)
   20756:	1a9b      	subs	r3, r3, r2
   20758:	08db      	lsrs	r3, r3, #3
   2075a:	f363 158f 	bfi	r5, r3, #6, #10
   2075e:	f014 feb8 	bl	354d2 <__errno>
   20762:	4919      	ldr	r1, [pc, #100]	; (207c8 <at_write+0xa4>)
   20764:	6802      	ldr	r2, [r0, #0]
   20766:	4628      	mov	r0, r5
   20768:	f013 fa3b 	bl	33be2 <log_string_sync>
		ret.code  = -errno;
   2076c:	f014 feb1 	bl	354d2 <__errno>
   20770:	6803      	ldr	r3, [r0, #0]
   20772:	425b      	negs	r3, r3
   20774:	9302      	str	r3, [sp, #8]
		ret.state = AT_CMD_ERROR;
   20776:	2301      	movs	r3, #1
   20778:	f88d 300c 	strb.w	r3, [sp, #12]
				"same as expected (%d)",
				bytes_sent, bytes_to_send);
		}
	}

	if (state) {
   2077c:	b114      	cbz	r4, 20784 <at_write+0x60>
		*state = ret.state;
   2077e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   20782:	7023      	strb	r3, [r4, #0]
	}

	return ret.code;
}
   20784:	9802      	ldr	r0, [sp, #8]
   20786:	b004      	add	sp, #16
   20788:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_msgq_get(msgq, data, timeout);
   2078a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2078e:	a902      	add	r1, sp, #8
   20790:	480e      	ldr	r0, [pc, #56]	; (207cc <at_write+0xa8>)
   20792:	f00b fe4d 	bl	2c430 <z_impl_k_msgq_get>
		if (bytes_sent != bytes_to_send) {
   20796:	42ae      	cmp	r6, r5
   20798:	d0f0      	beq.n	2077c <at_write+0x58>
			LOG_ERR("Bytes sent (%d) was not the "
   2079a:	2301      	movs	r3, #1
   2079c:	f04f 0000 	mov.w	r0, #0
   207a0:	4a07      	ldr	r2, [pc, #28]	; (207c0 <at_write+0x9c>)
   207a2:	f363 0007 	bfi	r0, r3, #0, #8
   207a6:	4b07      	ldr	r3, [pc, #28]	; (207c4 <at_write+0xa0>)
   207a8:	4909      	ldr	r1, [pc, #36]	; (207d0 <at_write+0xac>)
   207aa:	1a9b      	subs	r3, r3, r2
   207ac:	08db      	lsrs	r3, r3, #3
   207ae:	f363 108f 	bfi	r0, r3, #6, #10
   207b2:	462a      	mov	r2, r5
   207b4:	4633      	mov	r3, r6
   207b6:	f013 fa14 	bl	33be2 <log_string_sync>
   207ba:	e7df      	b.n	2077c <at_write+0x58>
   207bc:	200222a0 	.word	0x200222a0
   207c0:	00039f48 	.word	0x00039f48
   207c4:	00039f48 	.word	0x00039f48
   207c8:	0003e2bb 	.word	0x0003e2bb
   207cc:	200207cc 	.word	0x200207cc
   207d0:	0003e2de 	.word	0x0003e2de

000207d4 <at_cmd_driver_init>:

	k_sem_give(&cmd_pending);
}

static int at_cmd_driver_init(struct device *dev)
{
   207d4:	b530      	push	{r4, r5, lr}
	static bool initialized;

	if (initialized) {
   207d6:	4d16      	ldr	r5, [pc, #88]	; (20830 <at_cmd_driver_init+0x5c>)
{
   207d8:	b087      	sub	sp, #28
	if (initialized) {
   207da:	782b      	ldrb	r3, [r5, #0]
   207dc:	bb33      	cbnz	r3, 2082c <at_cmd_driver_init+0x58>

	int err;

	ARG_UNUSED(dev);

	err = open_socket();
   207de:	f7ff ff8d 	bl	206fc <open_socket>
	if (err) {
   207e2:	4604      	mov	r4, r0
   207e4:	b188      	cbz	r0, 2080a <at_cmd_driver_init+0x36>
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   207e6:	2301      	movs	r3, #1
   207e8:	f04f 0000 	mov.w	r0, #0
   207ec:	4a11      	ldr	r2, [pc, #68]	; (20834 <at_cmd_driver_init+0x60>)
   207ee:	f363 0007 	bfi	r0, r3, #0, #8
   207f2:	4b11      	ldr	r3, [pc, #68]	; (20838 <at_cmd_driver_init+0x64>)
   207f4:	4911      	ldr	r1, [pc, #68]	; (2083c <at_cmd_driver_init+0x68>)
   207f6:	1a9b      	subs	r3, r3, r2
   207f8:	08db      	lsrs	r3, r3, #3
   207fa:	f363 108f 	bfi	r0, r3, #6, #10
   207fe:	4622      	mov	r2, r4
   20800:	f013 f9ef 	bl	33be2 <log_string_sync>

	initialized = true;
	LOG_DBG("Common AT socket processing thread created");

	return 0;
}
   20804:	4620      	mov	r0, r4
   20806:	b007      	add	sp, #28
   20808:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2080a:	230a      	movs	r3, #10
   2080c:	e9cd 0004 	strd	r0, r0, [sp, #16]
   20810:	e9cd 0302 	strd	r0, r3, [sp, #8]
   20814:	e9cd 0000 	strd	r0, r0, [sp]
   20818:	4b09      	ldr	r3, [pc, #36]	; (20840 <at_cmd_driver_init+0x6c>)
   2081a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2081e:	4909      	ldr	r1, [pc, #36]	; (20844 <at_cmd_driver_init+0x70>)
   20820:	4809      	ldr	r0, [pc, #36]	; (20848 <at_cmd_driver_init+0x74>)
   20822:	f00d fd75 	bl	2e310 <z_impl_k_thread_create>
	initialized = true;
   20826:	2301      	movs	r3, #1
   20828:	702b      	strb	r3, [r5, #0]
	return 0;
   2082a:	e7eb      	b.n	20804 <at_cmd_driver_init+0x30>
		return 0;
   2082c:	2400      	movs	r4, #0
   2082e:	e7e9      	b.n	20804 <at_cmd_driver_init+0x30>
   20830:	2002807a 	.word	0x2002807a
   20834:	00039f48 	.word	0x00039f48
   20838:	00039f48 	.word	0x00039f48
   2083c:	0003e270 	.word	0x0003e270
   20840:	0002084d 	.word	0x0002084d
   20844:	20032098 	.word	0x20032098
   20848:	200222b4 	.word	0x200222b4

0002084c <socket_thread_fn>:
{
   2084c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
					LOG_ERR("Response buffer not large "
   20850:	4b89      	ldr	r3, [pc, #548]	; (20a78 <socket_thread_fn+0x22c>)
   20852:	4d8a      	ldr	r5, [pc, #552]	; (20a7c <socket_thread_fn+0x230>)
		bytes_read = recv(common_socket_fd, item->data,
   20854:	f8df b244 	ldr.w	fp, [pc, #580]	; 20a9c <socket_thread_fn+0x250>
					LOG_ERR("Response buffer not large "
   20858:	1aed      	subs	r5, r5, r3
{
   2085a:	b089      	sub	sp, #36	; 0x24
					LOG_ERR("Response buffer not large "
   2085c:	f3c5 05c9 	ubfx	r5, r5, #3, #10
		k_mem_slab_alloc(&rsp_work_items, (void **)&item, K_FOREVER);
   20860:	a905      	add	r1, sp, #20
   20862:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   20866:	4886      	ldr	r0, [pc, #536]	; (20a80 <socket_thread_fn+0x234>)
   20868:	f00b fc6a 	bl	2c140 <k_mem_slab_alloc>
		ret.code  = 0;
   2086c:	2300      	movs	r3, #0
		item->callback = NULL;
   2086e:	9905      	ldr	r1, [sp, #20]
		ret.code  = 0;
   20870:	9306      	str	r3, [sp, #24]
		ret.state = AT_CMD_OK;
   20872:	f88d 301c 	strb.w	r3, [sp, #28]
		item->callback = NULL;
   20876:	f8c1 3a98 	str.w	r3, [r1, #2712]	; 0xa98
		bytes_read = recv(common_socket_fd, item->data,
   2087a:	f8db 0000 	ldr.w	r0, [fp]
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   2087e:	f640 228c 	movw	r2, #2700	; 0xa8c
   20882:	e9cd 3300 	strd	r3, r3, [sp]
   20886:	310c      	adds	r1, #12
   20888:	f013 fb49 	bl	33f1e <z_impl_zsock_recvfrom>
		if (bytes_read < 0) {
   2088c:	1e02      	subs	r2, r0, #0
   2088e:	da58      	bge.n	20942 <socket_thread_fn+0xf6>
			LOG_ERR("AT socket recv failed with err %d",
   20890:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   20894:	f043 0301 	orr.w	r3, r3, #1
   20898:	f363 0707 	bfi	r7, r3, #0, #8
   2089c:	f365 178f 	bfi	r7, r5, #6, #10
   208a0:	4638      	mov	r0, r7
   208a2:	4978      	ldr	r1, [pc, #480]	; (20a84 <socket_thread_fn+0x238>)
   208a4:	f013 f99d 	bl	33be2 <log_string_sync>
			if ((close(common_socket_fd) == 0) &&
   208a8:	f8db 0000 	ldr.w	r0, [fp]
	return z_impl_zsock_close(sock);
   208ac:	f013 faab 	bl	33e06 <z_impl_zsock_close>
   208b0:	2800      	cmp	r0, #0
   208b2:	d131      	bne.n	20918 <socket_thread_fn+0xcc>
			    (open_socket() == 0)) {
   208b4:	f7ff ff22 	bl	206fc <open_socket>
			if ((close(common_socket_fd) == 0) &&
   208b8:	bb70      	cbnz	r0, 20918 <socket_thread_fn+0xcc>
				LOG_INF("AT socket recovered");
   208ba:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   208be:	f043 0303 	orr.w	r3, r3, #3
   208c2:	f363 0807 	bfi	r8, r3, #0, #8
   208c6:	f365 188f 	bfi	r8, r5, #6, #10
   208ca:	496f      	ldr	r1, [pc, #444]	; (20a88 <socket_thread_fn+0x23c>)
   208cc:	4640      	mov	r0, r8
   208ce:	f013 f988 	bl	33be2 <log_string_sync>
				ret.state = AT_CMD_ERROR;
   208d2:	2301      	movs	r3, #1
   208d4:	f88d 301c 	strb.w	r3, [sp, #28]
				ret.code  = -errno;
   208d8:	f014 fdfb 	bl	354d2 <__errno>
   208dc:	6803      	ldr	r3, [r0, #0]
   208de:	425b      	negs	r3, r3
			ret.code  = -ENOBUFS;
   208e0:	9306      	str	r3, [sp, #24]
		if (item->callback == NULL) {
   208e2:	9905      	ldr	r1, [sp, #20]
   208e4:	f8d1 3a98 	ldr.w	r3, [r1, #2712]	; 0xa98
   208e8:	2b00      	cmp	r3, #0
   208ea:	f040 8087 	bne.w	209fc <socket_thread_fn+0x1b0>
			k_mem_slab_free(&rsp_work_items, (void **)&item);
   208ee:	a905      	add	r1, sp, #20
   208f0:	4863      	ldr	r0, [pc, #396]	; (20a80 <socket_thread_fn+0x234>)
   208f2:	f00b fc89 	bl	2c208 <k_mem_slab_free>
	return z_impl_k_sem_count_get(sem);
   208f6:	4b65      	ldr	r3, [pc, #404]	; (20a8c <socket_thread_fn+0x240>)
		if ((k_sem_count_get(&cmd_pending) == 0) &&
   208f8:	689b      	ldr	r3, [r3, #8]
   208fa:	2b00      	cmp	r3, #0
   208fc:	d1b0      	bne.n	20860 <socket_thread_fn+0x14>
   208fe:	f89d 201c 	ldrb.w	r2, [sp, #28]
   20902:	2a04      	cmp	r2, #4
   20904:	d0ac      	beq.n	20860 <socket_thread_fn+0x14>
			current_cmd_handler = NULL;
   20906:	4a62      	ldr	r2, [pc, #392]	; (20a90 <socket_thread_fn+0x244>)
   20908:	6013      	str	r3, [r2, #0]
	return z_impl_k_msgq_put(msgq, data, timeout);
   2090a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2090e:	a906      	add	r1, sp, #24
   20910:	4860      	ldr	r0, [pc, #384]	; (20a94 <socket_thread_fn+0x248>)
   20912:	f00b fcf3 	bl	2c2fc <z_impl_k_msgq_put>
   20916:	e7a3      	b.n	20860 <socket_thread_fn+0x14>
			LOG_ERR("Unrecoverable reception error (err: %d), "
   20918:	2301      	movs	r3, #1
   2091a:	f04f 0400 	mov.w	r4, #0
   2091e:	f363 0407 	bfi	r4, r3, #0, #8
   20922:	f014 fdd6 	bl	354d2 <__errno>
   20926:	f365 148f 	bfi	r4, r5, #6, #10
   2092a:	6802      	ldr	r2, [r0, #0]
   2092c:	495a      	ldr	r1, [pc, #360]	; (20a98 <socket_thread_fn+0x24c>)
   2092e:	4620      	mov	r0, r4
   20930:	f013 f957 	bl	33be2 <log_string_sync>
			close(common_socket_fd);
   20934:	4b59      	ldr	r3, [pc, #356]	; (20a9c <socket_thread_fn+0x250>)
   20936:	6818      	ldr	r0, [r3, #0]
   20938:	f013 fa65 	bl	33e06 <z_impl_zsock_close>
}
   2093c:	b009      	add	sp, #36	; 0x24
   2093e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (item->data[bytes_read - 1] != '\0') {
   20942:	9e05      	ldr	r6, [sp, #20]
   20944:	4432      	add	r2, r6
   20946:	7ad2      	ldrb	r2, [r2, #11]
   20948:	b172      	cbz	r2, 20968 <socket_thread_fn+0x11c>
			LOG_ERR("AT message too large for reception buffer or "
   2094a:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
   2094e:	f043 0301 	orr.w	r3, r3, #1
   20952:	f363 0907 	bfi	r9, r3, #0, #8
   20956:	f365 198f 	bfi	r9, r5, #6, #10
   2095a:	4951      	ldr	r1, [pc, #324]	; (20aa0 <socket_thread_fn+0x254>)
   2095c:	4648      	mov	r0, r9
   2095e:	f013 f940 	bl	33be2 <log_string_sync>
			ret.code  = -ENOBUFS;
   20962:	f06f 0368 	mvn.w	r3, #104	; 0x68
   20966:	e7bb      	b.n	208e0 <socket_thread_fn+0x94>
	ret->state = AT_CMD_NOTIFICATION;
   20968:	2304      	movs	r3, #4
		payload_len = get_return_code(item->data, &ret);
   2096a:	f106 040c 	add.w	r4, r6, #12
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   2096e:	494d      	ldr	r1, [pc, #308]	; (20aa4 <socket_thread_fn+0x258>)
   20970:	4620      	mov	r0, r4
	ret->state = AT_CMD_NOTIFICATION;
   20972:	f88d 301c 	strb.w	r3, [sp, #28]
   20976:	9203      	str	r2, [sp, #12]
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   20978:	f018 fccb 	bl	39312 <strstr>
		if (tmpstr) {
   2097c:	4603      	mov	r3, r0
   2097e:	b120      	cbz	r0, 2098a <socket_thread_fn+0x13e>
			ret->state = AT_CMD_OK;
   20980:	9a03      	ldr	r2, [sp, #12]
   20982:	f88d 201c 	strb.w	r2, [sp, #28]
			ret->code  = -ENOEXEC;
   20986:	9206      	str	r2, [sp, #24]
			break;
   20988:	e00e      	b.n	209a8 <socket_thread_fn+0x15c>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   2098a:	4947      	ldr	r1, [pc, #284]	; (20aa8 <socket_thread_fn+0x25c>)
   2098c:	4620      	mov	r0, r4
   2098e:	f018 fcc0 	bl	39312 <strstr>
		if (tmpstr) {
   20992:	9003      	str	r0, [sp, #12]
   20994:	b168      	cbz	r0, 209b2 <socket_thread_fn+0x166>
			ret->state = AT_CMD_ERROR_CMS;
   20996:	2202      	movs	r2, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   20998:	f106 0017 	add.w	r0, r6, #23
			ret->state = AT_CMD_ERROR_CME;
   2099c:	f88d 201c 	strb.w	r2, [sp, #28]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   209a0:	f018 faef 	bl	38f82 <atoi>
   209a4:	9b03      	ldr	r3, [sp, #12]
   209a6:	9006      	str	r0, [sp, #24]
		buf[new_len++] = '\0';
   209a8:	2100      	movs	r1, #0
		new_len = tmpstr - buf;
   209aa:	1b1a      	subs	r2, r3, r4
		buf[new_len++] = '\0';
   209ac:	3201      	adds	r2, #1
   209ae:	7019      	strb	r1, [r3, #0]
   209b0:	e04c      	b.n	20a4c <socket_thread_fn+0x200>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   209b2:	493e      	ldr	r1, [pc, #248]	; (20aac <socket_thread_fn+0x260>)
   209b4:	4620      	mov	r0, r4
   209b6:	f018 fcac 	bl	39312 <strstr>
		if (tmpstr) {
   209ba:	9003      	str	r0, [sp, #12]
   209bc:	b108      	cbz	r0, 209c2 <socket_thread_fn+0x176>
			ret->state = AT_CMD_ERROR_CME;
   209be:	2203      	movs	r2, #3
   209c0:	e7ea      	b.n	20998 <socket_thread_fn+0x14c>
		tmpstr = strstr(buf, AT_CMD_ERROR_STR);
   209c2:	493b      	ldr	r1, [pc, #236]	; (20ab0 <socket_thread_fn+0x264>)
   209c4:	4620      	mov	r0, r4
   209c6:	f018 fca4 	bl	39312 <strstr>
		if (tmpstr) {
   209ca:	4603      	mov	r3, r0
   209cc:	2800      	cmp	r0, #0
   209ce:	d039      	beq.n	20a44 <socket_thread_fn+0x1f8>
			ret->state = AT_CMD_ERROR;
   209d0:	2201      	movs	r2, #1
   209d2:	f88d 201c 	strb.w	r2, [sp, #28]
			ret->code  = -ENOEXEC;
   209d6:	f06f 0207 	mvn.w	r2, #7
   209da:	e7d4      	b.n	20986 <socket_thread_fn+0x13a>
					LOG_ERR("Response buffer not large "
   209dc:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
   209e0:	f043 0301 	orr.w	r3, r3, #1
   209e4:	f363 0a07 	bfi	sl, r3, #0, #8
   209e8:	f365 1a8f 	bfi	sl, r5, #6, #10
   209ec:	4931      	ldr	r1, [pc, #196]	; (20ab4 <socket_thread_fn+0x268>)
   209ee:	4650      	mov	r0, sl
   209f0:	f013 f8f7 	bl	33be2 <log_string_sync>
					ret.code  = -EMSGSIZE;
   209f4:	f06f 0379 	mvn.w	r3, #121	; 0x79
   209f8:	9306      	str	r3, [sp, #24]
   209fa:	e039      	b.n	20a70 <socket_thread_fn+0x224>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   209fc:	4b2e      	ldr	r3, [pc, #184]	; (20ab8 <socket_thread_fn+0x26c>)
   209fe:	2200      	movs	r2, #0
   20a00:	604b      	str	r3, [r1, #4]
   20a02:	460b      	mov	r3, r1
   20a04:	600a      	str	r2, [r1, #0]
   20a06:	f843 2f08 	str.w	r2, [r3, #8]!
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   20a0a:	e8d3 2fef 	ldaex	r2, [r3]
   20a0e:	f042 0001 	orr.w	r0, r2, #1
   20a12:	e8c3 0fe4 	stlex	r4, r0, [r3]
   20a16:	2c00      	cmp	r4, #0
   20a18:	d1f7      	bne.n	20a0a <socket_thread_fn+0x1be>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   20a1a:	07d3      	lsls	r3, r2, #31
   20a1c:	f53f af6b 	bmi.w	208f6 <socket_thread_fn+0xaa>
		k_queue_append(&work_q->queue, work);
   20a20:	4826      	ldr	r0, [pc, #152]	; (20abc <socket_thread_fn+0x270>)
   20a22:	f018 f934 	bl	38c8e <k_queue_append>
   20a26:	e766      	b.n	208f6 <socket_thread_fn+0xaa>
		if (payload_len == 0) {
   20a28:	2a00      	cmp	r2, #0
   20a2a:	f43f af5a 	beq.w	208e2 <socket_thread_fn+0x96>
			item->callback = notification_handler;
   20a2e:	4b24      	ldr	r3, [pc, #144]	; (20ac0 <socket_thread_fn+0x274>)
			item->callback = current_cmd_handler;
   20a30:	681a      	ldr	r2, [r3, #0]
   20a32:	9b05      	ldr	r3, [sp, #20]
   20a34:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
   20a38:	e753      	b.n	208e2 <socket_thread_fn+0x96>
		if (payload_len == 0) {
   20a3a:	2a00      	cmp	r2, #0
   20a3c:	f43f af51 	beq.w	208e2 <socket_thread_fn+0x96>
			item->callback = current_cmd_handler;
   20a40:	4b13      	ldr	r3, [pc, #76]	; (20a90 <socket_thread_fn+0x244>)
   20a42:	e7f5      	b.n	20a30 <socket_thread_fn+0x1e4>
		new_len = strlen(buf) + 1;
   20a44:	4620      	mov	r0, r4
   20a46:	f7f1 fb1b 	bl	12080 <strlen>
   20a4a:	1c42      	adds	r2, r0, #1
		if (ret.state != AT_CMD_NOTIFICATION) {
   20a4c:	f89d 301c 	ldrb.w	r3, [sp, #28]
   20a50:	2b04      	cmp	r3, #4
   20a52:	d0e9      	beq.n	20a28 <socket_thread_fn+0x1dc>
			if ((response_buf_len > 0) &&
   20a54:	4c1b      	ldr	r4, [pc, #108]	; (20ac4 <socket_thread_fn+0x278>)
   20a56:	6823      	ldr	r3, [r4, #0]
   20a58:	2b00      	cmp	r3, #0
   20a5a:	d0ee      	beq.n	20a3a <socket_thread_fn+0x1ee>
			    (response_buf != NULL)) {
   20a5c:	4e1a      	ldr	r6, [pc, #104]	; (20ac8 <socket_thread_fn+0x27c>)
   20a5e:	6830      	ldr	r0, [r6, #0]
			if ((response_buf_len > 0) &&
   20a60:	2800      	cmp	r0, #0
   20a62:	d0ea      	beq.n	20a3a <socket_thread_fn+0x1ee>
				if (response_buf_len >= payload_len) {
   20a64:	4293      	cmp	r3, r2
   20a66:	d3b9      	bcc.n	209dc <socket_thread_fn+0x190>
   20a68:	9905      	ldr	r1, [sp, #20]
   20a6a:	310c      	adds	r1, #12
   20a6c:	f018 faa9 	bl	38fc2 <memcpy>
				response_buf_len = 0;
   20a70:	2300      	movs	r3, #0
   20a72:	6023      	str	r3, [r4, #0]
				response_buf     = NULL;
   20a74:	6033      	str	r3, [r6, #0]
				goto next;
   20a76:	e734      	b.n	208e2 <socket_thread_fn+0x96>
   20a78:	00039f48 	.word	0x00039f48
   20a7c:	00039f48 	.word	0x00039f48
   20a80:	200206a0 	.word	0x200206a0
   20a84:	0003e310 	.word	0x0003e310
   20a88:	0003e332 	.word	0x0003e332
   20a8c:	200206ec 	.word	0x200206ec
   20a90:	200222a4 	.word	0x200222a4
   20a94:	200207cc 	.word	0x200207cc
   20a98:	0003e346 	.word	0x0003e346
   20a9c:	200222a0 	.word	0x200222a0
   20aa0:	0003e37d 	.word	0x0003e37d
   20aa4:	0003d805 	.word	0x0003d805
   20aa8:	0003e3c8 	.word	0x0003e3c8
   20aac:	0003e3d4 	.word	0x0003e3d4
   20ab0:	0003e3e0 	.word	0x0003e3e0
   20ab4:	0003e3e6 	.word	0x0003e3e6
   20ab8:	000206dd 	.word	0x000206dd
   20abc:	20027524 	.word	0x20027524
   20ac0:	200222a8 	.word	0x200222a8
   20ac4:	200222b0 	.word	0x200222b0
   20ac8:	200222ac 	.word	0x200222ac

00020acc <at_cmd_write>:
{
   20acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20ad0:	4605      	mov	r5, r0
   20ad2:	4688      	mov	r8, r1
   20ad4:	4617      	mov	r7, r2
   20ad6:	461e      	mov	r6, r3
	return z_impl_k_sem_take(sem, timeout);
   20ad8:	4c0a      	ldr	r4, [pc, #40]	; (20b04 <at_cmd_write+0x38>)
   20ada:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20ade:	4620      	mov	r0, r4
   20ae0:	f00d fabe 	bl	2e060 <z_impl_k_sem_take>
	response_buf     = buf;
   20ae4:	4b08      	ldr	r3, [pc, #32]	; (20b08 <at_cmd_write+0x3c>)
	int return_code = at_write(cmd, state);
   20ae6:	4631      	mov	r1, r6
	response_buf     = buf;
   20ae8:	f8c3 8000 	str.w	r8, [r3]
	response_buf_len = buf_len;
   20aec:	4b07      	ldr	r3, [pc, #28]	; (20b0c <at_cmd_write+0x40>)
	int return_code = at_write(cmd, state);
   20aee:	4628      	mov	r0, r5
	response_buf_len = buf_len;
   20af0:	601f      	str	r7, [r3, #0]
	int return_code = at_write(cmd, state);
   20af2:	f7ff fe17 	bl	20724 <at_write>
   20af6:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   20af8:	4620      	mov	r0, r4
   20afa:	f00d fa6d 	bl	2dfd8 <z_impl_k_sem_give>
}
   20afe:	4628      	mov	r0, r5
   20b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20b04:	200206ec 	.word	0x200206ec
   20b08:	200222ac 	.word	0x200222ac
   20b0c:	200222b0 	.word	0x200222b0

00020b10 <at_cmd_set_notification_handler>:
{
   20b10:	b538      	push	{r3, r4, r5, lr}
	if (notification_handler != NULL && handler != notification_handler) {
   20b12:	4c0f      	ldr	r4, [pc, #60]	; (20b50 <at_cmd_set_notification_handler+0x40>)
{
   20b14:	4605      	mov	r5, r0
	if (notification_handler != NULL && handler != notification_handler) {
   20b16:	6822      	ldr	r2, [r4, #0]
   20b18:	b17a      	cbz	r2, 20b3a <at_cmd_set_notification_handler+0x2a>
   20b1a:	4282      	cmp	r2, r0
   20b1c:	d00d      	beq.n	20b3a <at_cmd_set_notification_handler+0x2a>
		LOG_WRN("Forgetting prior notification handler %p",
   20b1e:	2302      	movs	r3, #2
   20b20:	f04f 0000 	mov.w	r0, #0
   20b24:	490b      	ldr	r1, [pc, #44]	; (20b54 <at_cmd_set_notification_handler+0x44>)
   20b26:	f363 0007 	bfi	r0, r3, #0, #8
   20b2a:	4b0b      	ldr	r3, [pc, #44]	; (20b58 <at_cmd_set_notification_handler+0x48>)
   20b2c:	1a5b      	subs	r3, r3, r1
   20b2e:	08db      	lsrs	r3, r3, #3
   20b30:	f363 108f 	bfi	r0, r3, #6, #10
   20b34:	4909      	ldr	r1, [pc, #36]	; (20b5c <at_cmd_set_notification_handler+0x4c>)
   20b36:	f013 f854 	bl	33be2 <log_string_sync>
	return z_impl_k_sem_take(sem, timeout);
   20b3a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20b3e:	4808      	ldr	r0, [pc, #32]	; (20b60 <at_cmd_set_notification_handler+0x50>)
   20b40:	f00d fa8e 	bl	2e060 <z_impl_k_sem_take>
	notification_handler = handler;
   20b44:	6025      	str	r5, [r4, #0]
	z_impl_k_sem_give(sem);
   20b46:	4806      	ldr	r0, [pc, #24]	; (20b60 <at_cmd_set_notification_handler+0x50>)
}
   20b48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   20b4c:	f00d ba44 	b.w	2dfd8 <z_impl_k_sem_give>
   20b50:	200222a8 	.word	0x200222a8
   20b54:	00039f48 	.word	0x00039f48
   20b58:	00039f48 	.word	0x00039f48
   20b5c:	0003e292 	.word	0x0003e292
   20b60:	200206ec 	.word	0x200206ec

00020b64 <find_node>:
static struct notif_handler *find_node(struct notif_handler **prev_out,
	void *ctx, at_notif_handler_t handler)
{
	struct notif_handler *prev = NULL, *curr, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   20b64:	4b0b      	ldr	r3, [pc, #44]	; (20b94 <find_node+0x30>)
{
   20b66:	b570      	push	{r4, r5, r6, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   20b68:	681b      	ldr	r3, [r3, #0]
   20b6a:	b153      	cbz	r3, 20b82 <find_node+0x1e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   20b6c:	2500      	movs	r5, #0
   20b6e:	461c      	mov	r4, r3
   20b70:	681b      	ldr	r3, [r3, #0]
		if (curr->ctx == ctx && curr->handler == handler) {
   20b72:	6866      	ldr	r6, [r4, #4]
   20b74:	428e      	cmp	r6, r1
   20b76:	d106      	bne.n	20b86 <find_node+0x22>
   20b78:	68a6      	ldr	r6, [r4, #8]
   20b7a:	4296      	cmp	r6, r2
   20b7c:	d103      	bne.n	20b86 <find_node+0x22>
			*prev_out = prev;
			return curr;
   20b7e:	4623      	mov	r3, r4
			*prev_out = prev;
   20b80:	6005      	str	r5, [r0, #0]
		}
		prev = curr;
	}
	return NULL;
}
   20b82:	4618      	mov	r0, r3
   20b84:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   20b86:	2b00      	cmp	r3, #0
   20b88:	d0fb      	beq.n	20b82 <find_node+0x1e>
   20b8a:	4625      	mov	r5, r4
   20b8c:	461c      	mov	r4, r3
   20b8e:	681b      	ldr	r3, [r3, #0]
   20b90:	e7ef      	b.n	20b72 <find_node+0xe>
   20b92:	bf00      	nop
   20b94:	2002236c 	.word	0x2002236c

00020b98 <module_init>:
{
	ARG_UNUSED(dev);

	static bool initialized;

	if (initialized) {
   20b98:	4a0e      	ldr	r2, [pc, #56]	; (20bd4 <module_init+0x3c>)
{
   20b9a:	b508      	push	{r3, lr}
	if (initialized) {
   20b9c:	7813      	ldrb	r3, [r2, #0]
   20b9e:	b17b      	cbz	r3, 20bc0 <module_init+0x28>
		LOG_WRN("Already initialized. Nothing to do");
   20ba0:	2302      	movs	r3, #2
   20ba2:	f04f 0000 	mov.w	r0, #0
   20ba6:	4a0c      	ldr	r2, [pc, #48]	; (20bd8 <module_init+0x40>)
   20ba8:	f363 0007 	bfi	r0, r3, #0, #8
   20bac:	4b0b      	ldr	r3, [pc, #44]	; (20bdc <module_init+0x44>)
   20bae:	490c      	ldr	r1, [pc, #48]	; (20be0 <module_init+0x48>)
   20bb0:	1a9b      	subs	r3, r3, r2
   20bb2:	08db      	lsrs	r3, r3, #3
   20bb4:	f363 108f 	bfi	r0, r3, #6, #10
   20bb8:	f013 f813 	bl	33be2 <log_string_sync>

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
	return 0;
}
   20bbc:	2000      	movs	r0, #0
   20bbe:	bd08      	pop	{r3, pc}
	initialized = true;
   20bc0:	2101      	movs	r1, #1
   20bc2:	7011      	strb	r1, [r2, #0]
	list->head = NULL;
   20bc4:	4a07      	ldr	r2, [pc, #28]	; (20be4 <module_init+0x4c>)
	at_cmd_set_notification_handler(notif_dispatch);
   20bc6:	4808      	ldr	r0, [pc, #32]	; (20be8 <module_init+0x50>)
	list->tail = NULL;
   20bc8:	e9c2 3300 	strd	r3, r3, [r2]
   20bcc:	f7ff ffa0 	bl	20b10 <at_cmd_set_notification_handler>
	return 0;
   20bd0:	e7f4      	b.n	20bbc <module_init+0x24>
   20bd2:	bf00      	nop
   20bd4:	2002807b 	.word	0x2002807b
   20bd8:	00039f48 	.word	0x00039f48
   20bdc:	00039f50 	.word	0x00039f50
   20be0:	0003e43f 	.word	0x0003e43f
   20be4:	2002236c 	.word	0x2002236c
   20be8:	00020bf9 	.word	0x00020bf9

00020bec <k_mutex_unlock.constprop.7>:
	return z_impl_k_mutex_unlock(mutex);
   20bec:	4801      	ldr	r0, [pc, #4]	; (20bf4 <k_mutex_unlock.constprop.7+0x8>)
   20bee:	f00b bde1 	b.w	2c7b4 <z_impl_k_mutex_unlock>
   20bf2:	bf00      	nop
   20bf4:	20020770 	.word	0x20020770

00020bf8 <notif_dispatch>:
{
   20bf8:	b538      	push	{r3, r4, r5, lr}
   20bfa:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   20bfc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20c00:	4809      	ldr	r0, [pc, #36]	; (20c28 <notif_dispatch+0x30>)
   20c02:	f00b fcf9 	bl	2c5f8 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   20c06:	4b09      	ldr	r3, [pc, #36]	; (20c2c <notif_dispatch+0x34>)
   20c08:	681b      	ldr	r3, [r3, #0]
   20c0a:	b91b      	cbnz	r3, 20c14 <notif_dispatch+0x1c>
}
   20c0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   20c10:	f7ff bfec 	b.w	20bec <k_mutex_unlock.constprop.7>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   20c14:	681c      	ldr	r4, [r3, #0]
		curr->handler(curr->ctx, response);
   20c16:	689a      	ldr	r2, [r3, #8]
   20c18:	4629      	mov	r1, r5
   20c1a:	6858      	ldr	r0, [r3, #4]
   20c1c:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   20c1e:	2c00      	cmp	r4, #0
   20c20:	d0f4      	beq.n	20c0c <notif_dispatch+0x14>
   20c22:	4623      	mov	r3, r4
   20c24:	6824      	ldr	r4, [r4, #0]
   20c26:	e7f6      	b.n	20c16 <notif_dispatch+0x1e>
   20c28:	20020770 	.word	0x20020770
   20c2c:	2002236c 	.word	0x2002236c

00020c30 <at_notif_register_handler>:
{
	return module_init(NULL);
}

int at_notif_register_handler(void *context, at_notif_handler_t handler)
{
   20c30:	b573      	push	{r0, r1, r4, r5, r6, lr}
   20c32:	4606      	mov	r6, r0
	if (handler == NULL) {
   20c34:	460d      	mov	r5, r1
   20c36:	b999      	cbnz	r1, 20c60 <at_notif_register_handler+0x30>
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   20c38:	2301      	movs	r3, #1
   20c3a:	f04f 0000 	mov.w	r0, #0
   20c3e:	4a1d      	ldr	r2, [pc, #116]	; (20cb4 <at_notif_register_handler+0x84>)
   20c40:	f363 0007 	bfi	r0, r3, #0, #8
   20c44:	4b1c      	ldr	r3, [pc, #112]	; (20cb8 <at_notif_register_handler+0x88>)
   20c46:	1a9b      	subs	r3, r3, r2
   20c48:	08db      	lsrs	r3, r3, #3
   20c4a:	f363 108f 	bfi	r0, r3, #6, #10
   20c4e:	4632      	mov	r2, r6
   20c50:	460b      	mov	r3, r1
   20c52:	491a      	ldr	r1, [pc, #104]	; (20cbc <at_notif_register_handler+0x8c>)
   20c54:	f012 ffc5 	bl	33be2 <log_string_sync>
			(u32_t)context, (u32_t)handler);
		return -EINVAL;
   20c58:	f06f 0015 	mvn.w	r0, #21
	}
	return append_notif_handler(context, handler);
}
   20c5c:	b002      	add	sp, #8
   20c5e:	bd70      	pop	{r4, r5, r6, pc}
   20c60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20c64:	4816      	ldr	r0, [pc, #88]	; (20cc0 <at_notif_register_handler+0x90>)
   20c66:	f00b fcc7 	bl	2c5f8 <z_impl_k_mutex_lock>
	if (find_node(&to_ins, ctx, handler) != NULL) {
   20c6a:	462a      	mov	r2, r5
   20c6c:	4631      	mov	r1, r6
   20c6e:	a801      	add	r0, sp, #4
   20c70:	f7ff ff78 	bl	20b64 <find_node>
   20c74:	4604      	mov	r4, r0
   20c76:	b118      	cbz	r0, 20c80 <at_notif_register_handler+0x50>
		k_mutex_unlock(&list_mtx);
   20c78:	f7ff ffb8 	bl	20bec <k_mutex_unlock.constprop.7>
		return 0;
   20c7c:	2000      	movs	r0, #0
   20c7e:	e7ed      	b.n	20c5c <at_notif_register_handler+0x2c>
	to_ins = (struct notif_handler *)k_malloc(sizeof(struct notif_handler));
   20c80:	200c      	movs	r0, #12
   20c82:	f00b fb1f 	bl	2c2c4 <k_malloc>
   20c86:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   20c88:	b920      	cbnz	r0, 20c94 <at_notif_register_handler+0x64>
		k_mutex_unlock(&list_mtx);
   20c8a:	f7ff ffaf 	bl	20bec <k_mutex_unlock.constprop.7>
		return -ENOBUFS;
   20c8e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   20c92:	e7e3      	b.n	20c5c <at_notif_register_handler+0x2c>
__ssp_bos_icheck3(memset, void *, int)
   20c94:	6004      	str	r4, [r0, #0]
	to_ins->ctx     = ctx;
   20c96:	9b01      	ldr	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   20c98:	4a0a      	ldr	r2, [pc, #40]	; (20cc4 <at_notif_register_handler+0x94>)
   20c9a:	6044      	str	r4, [r0, #4]
   20c9c:	6084      	str	r4, [r0, #8]
	parent->next = child;
   20c9e:	601c      	str	r4, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
   20ca0:	6851      	ldr	r1, [r2, #4]
	to_ins->handler = handler;
   20ca2:	e9c3 6501 	strd	r6, r5, [r3, #4]
   20ca6:	b911      	cbnz	r1, 20cae <at_notif_register_handler+0x7e>
	list->head = node;
   20ca8:	e9c2 3300 	strd	r3, r3, [r2]
   20cac:	e7e4      	b.n	20c78 <at_notif_register_handler+0x48>
	parent->next = child;
   20cae:	600b      	str	r3, [r1, #0]
	list->tail = node;
   20cb0:	6053      	str	r3, [r2, #4]
   20cb2:	e7e1      	b.n	20c78 <at_notif_register_handler+0x48>
   20cb4:	00039f48 	.word	0x00039f48
   20cb8:	00039f50 	.word	0x00039f50
   20cbc:	0003e40e 	.word	0x0003e40e
   20cc0:	20020770 	.word	0x20020770
   20cc4:	2002236c 	.word	0x2002236c

00020cc8 <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper((int)chr);
   20cc8:	4b06      	ldr	r3, [pc, #24]	; (20ce4 <is_valid_notification_char+0x1c>)
   20cca:	5cc3      	ldrb	r3, [r0, r3]
   20ccc:	f003 0303 	and.w	r3, r3, #3
   20cd0:	2b02      	cmp	r3, #2
   20cd2:	bf08      	it	eq
   20cd4:	3820      	subeq	r0, #32

	if ((chr >= 'A') && (chr <= 'Z')) {
   20cd6:	3841      	subs	r0, #65	; 0x41
   20cd8:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
   20cda:	2819      	cmp	r0, #25
   20cdc:	bf8c      	ite	hi
   20cde:	2000      	movhi	r0, #0
   20ce0:	2001      	movls	r0, #1
   20ce2:	4770      	bx	lr
   20ce4:	0004017c 	.word	0x0004017c

00020ce8 <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   20ce8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   20cec:	6805      	ldr	r5, [r0, #0]
{
   20cee:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   20cf0:	9500      	str	r5, [sp, #0]
 * @retval true  If character is 0
 * @retval false If character is not 0
 */
static inline bool is_terminated(char chr)
{
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   20cf2:	782b      	ldrb	r3, [r5, #0]
{
   20cf4:	4680      	mov	r8, r0
   20cf6:	460f      	mov	r7, r1
   20cf8:	4616      	mov	r6, r2
   20cfa:	2b00      	cmp	r3, #0
   20cfc:	f000 80c8 	beq.w	20e90 <at_parse_process_element+0x1a8>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   20d00:	4b65      	ldr	r3, [pc, #404]	; (20e98 <at_parse_process_element+0x1b0>)
   20d02:	781c      	ldrb	r4, [r3, #0]
   20d04:	2c06      	cmp	r4, #6
   20d06:	d110      	bne.n	20d2a <at_parse_process_element+0x42>
		const char *start_ptr = tmpstr++;
   20d08:	1c6b      	adds	r3, r5, #1
   20d0a:	9300      	str	r3, [sp, #0]

		while (is_valid_notification_char(*tmpstr)) {
   20d0c:	9a00      	ldr	r2, [sp, #0]
   20d0e:	7810      	ldrb	r0, [r2, #0]
   20d10:	f7ff ffda 	bl	20cc8 <is_valid_notification_char>
   20d14:	b930      	cbnz	r0, 20d24 <at_parse_process_element+0x3c>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   20d16:	1b53      	subs	r3, r2, r5

		while (isxdigit((int)*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   20d18:	462a      	mov	r2, r5
   20d1a:	4639      	mov	r1, r7
   20d1c:	4630      	mov	r0, r6
   20d1e:	f017 fdb3 	bl	38888 <at_params_string_put>
   20d22:	e01b      	b.n	20d5c <at_parse_process_element+0x74>
			tmpstr++;
   20d24:	3201      	adds	r2, #1
   20d26:	9200      	str	r2, [sp, #0]
   20d28:	e7f0      	b.n	20d0c <at_parse_process_element+0x24>
	} else if (state == COMMAND) {
   20d2a:	2c07      	cmp	r4, #7
   20d2c:	d124      	bne.n	20d78 <at_parse_process_element+0x90>
		skip_command_prefix(&tmpstr);
   20d2e:	4668      	mov	r0, sp
   20d30:	f017 fd3a 	bl	387a8 <skip_command_prefix>
		while (is_valid_notification_char(*tmpstr)) {
   20d34:	9a00      	ldr	r2, [sp, #0]
   20d36:	7810      	ldrb	r0, [r2, #0]
   20d38:	f7ff ffc6 	bl	20cc8 <is_valid_notification_char>
   20d3c:	b9a8      	cbnz	r0, 20d6a <at_parse_process_element+0x82>
		at_params_string_put(list, index, start_ptr,
   20d3e:	1b53      	subs	r3, r2, r5
   20d40:	4639      	mov	r1, r7
   20d42:	462a      	mov	r2, r5
   20d44:	4630      	mov	r0, r6
   20d46:	f017 fd9f 	bl	38888 <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   20d4a:	9b00      	ldr	r3, [sp, #0]
   20d4c:	781a      	ldrb	r2, [r3, #0]
   20d4e:	2a3d      	cmp	r2, #61	; 0x3d
   20d50:	d10e      	bne.n	20d70 <at_parse_process_element+0x88>
   20d52:	785a      	ldrb	r2, [r3, #1]
   20d54:	2a3f      	cmp	r2, #63	; 0x3f
   20d56:	d101      	bne.n	20d5c <at_parse_process_element+0x74>
			tmpstr += 2;
   20d58:	3302      	adds	r3, #2
			tmpstr++;
   20d5a:	9300      	str	r3, [sp, #0]
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   20d5c:	2000      	movs	r0, #0
	*str = tmpstr;
   20d5e:	9b00      	ldr	r3, [sp, #0]
   20d60:	f8c8 3000 	str.w	r3, [r8]
}
   20d64:	b023      	add	sp, #140	; 0x8c
   20d66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			tmpstr++;
   20d6a:	3201      	adds	r2, #1
   20d6c:	9200      	str	r2, [sp, #0]
   20d6e:	e7e1      	b.n	20d34 <at_parse_process_element+0x4c>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   20d70:	2a3f      	cmp	r2, #63	; 0x3f
   20d72:	d1f3      	bne.n	20d5c <at_parse_process_element+0x74>
			tmpstr++;
   20d74:	3301      	adds	r3, #1
   20d76:	e7f0      	b.n	20d5a <at_parse_process_element+0x72>
	} else if (state == OPTIONAL) {
   20d78:	2c08      	cmp	r4, #8
   20d7a:	d103      	bne.n	20d84 <at_parse_process_element+0x9c>
		at_params_empty_put(list, index);
   20d7c:	4610      	mov	r0, r2
   20d7e:	f017 fd5a 	bl	38836 <at_params_empty_put>
   20d82:	e7eb      	b.n	20d5c <at_parse_process_element+0x74>
	} else if (state == STRING) {
   20d84:	2c02      	cmp	r4, #2
   20d86:	d111      	bne.n	20dac <at_parse_process_element+0xc4>
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   20d88:	9a00      	ldr	r2, [sp, #0]
   20d8a:	7811      	ldrb	r1, [r2, #0]
   20d8c:	4608      	mov	r0, r1
   20d8e:	f017 fd02 	bl	38796 <is_lfcr>
   20d92:	b918      	cbnz	r0, 20d9c <at_parse_process_element+0xb4>
   20d94:	b111      	cbz	r1, 20d9c <at_parse_process_element+0xb4>
			tmpstr++;
   20d96:	3201      	adds	r2, #1
   20d98:	9200      	str	r2, [sp, #0]
   20d9a:	e7f5      	b.n	20d88 <at_parse_process_element+0xa0>
		at_params_string_put(list, index, start_ptr,
   20d9c:	1b53      	subs	r3, r2, r5
		at_params_string_put(list, index, start_ptr,
   20d9e:	462a      	mov	r2, r5
   20da0:	4639      	mov	r1, r7
   20da2:	4630      	mov	r0, r6
   20da4:	f017 fd70 	bl	38888 <at_params_string_put>
		tmpstr++;
   20da8:	9b00      	ldr	r3, [sp, #0]
   20daa:	e7e3      	b.n	20d74 <at_parse_process_element+0x8c>
	} else if (state == QUOTED_STRING) {
   20dac:	2c03      	cmp	r4, #3
   20dae:	d109      	bne.n	20dc4 <at_parse_process_element+0xdc>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
   20db0:	9b00      	ldr	r3, [sp, #0]
   20db2:	781a      	ldrb	r2, [r3, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   20db4:	2a22      	cmp	r2, #34	; 0x22
   20db6:	d003      	beq.n	20dc0 <at_parse_process_element+0xd8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   20db8:	b112      	cbz	r2, 20dc0 <at_parse_process_element+0xd8>
			tmpstr++;
   20dba:	3301      	adds	r3, #1
   20dbc:	9300      	str	r3, [sp, #0]
   20dbe:	e7f7      	b.n	20db0 <at_parse_process_element+0xc8>
		at_params_string_put(list, index, start_ptr,
   20dc0:	1b5b      	subs	r3, r3, r5
   20dc2:	e7ec      	b.n	20d9e <at_parse_process_element+0xb6>
	} else if (state == ARRAY) {
   20dc4:	2c01      	cmp	r4, #1
   20dc6:	d13c      	bne.n	20e42 <at_parse_process_element+0x15a>
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   20dc8:	4628      	mov	r0, r5
   20dca:	220a      	movs	r2, #10
   20dcc:	a901      	add	r1, sp, #4
   20dce:	f011 fa87 	bl	322e0 <strtoul>
		tmpstr = next;
   20dd2:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   20dd4:	4d31      	ldr	r5, [pc, #196]	; (20e9c <at_parse_process_element+0x1b4>)
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   20dd6:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   20dd8:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   20dda:	9800      	ldr	r0, [sp, #0]
   20ddc:	7803      	ldrb	r3, [r0, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   20dde:	2b29      	cmp	r3, #41	; 0x29
   20de0:	d028      	beq.n	20e34 <at_parse_process_element+0x14c>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   20de2:	b33b      	cbz	r3, 20e34 <at_parse_process_element+0x14c>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   20de4:	3b2c      	subs	r3, #44	; 0x2c
   20de6:	b2db      	uxtb	r3, r3
   20de8:	3001      	adds	r0, #1
   20dea:	2b11      	cmp	r3, #17
				tmparray[i++] =
   20dec:	9000      	str	r0, [sp, #0]
   20dee:	d803      	bhi.n	20df8 <at_parse_process_element+0x110>
   20df0:	fa25 f303 	lsr.w	r3, r5, r3
   20df4:	07db      	lsls	r3, r3, #31
   20df6:	d408      	bmi.n	20e0a <at_parse_process_element+0x122>
				tmpstr++;
   20df8:	46a1      	mov	r9, r4
   20dfa:	e004      	b.n	20e06 <at_parse_process_element+0x11e>
					tmpstr = next;
   20dfc:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   20dfe:	f1b9 0f20 	cmp.w	r9, #32
					tmpstr = next;
   20e02:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   20e04:	d015      	beq.n	20e32 <at_parse_process_element+0x14a>
				tmpstr++;
   20e06:	464c      	mov	r4, r9
   20e08:	e7e7      	b.n	20dda <at_parse_process_element+0xf2>
					(u32_t)strtoul(++tmpstr, &next, 10);
   20e0a:	220a      	movs	r2, #10
   20e0c:	a901      	add	r1, sp, #4
   20e0e:	f011 fa67 	bl	322e0 <strtoul>
				tmparray[i++] =
   20e12:	ab22      	add	r3, sp, #136	; 0x88
   20e14:	f104 0901 	add.w	r9, r4, #1
   20e18:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   20e1c:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   20e20:	9800      	ldr	r0, [sp, #0]
   20e22:	f7f1 f92d 	bl	12080 <strlen>
   20e26:	4604      	mov	r4, r0
   20e28:	9801      	ldr	r0, [sp, #4]
   20e2a:	f7f1 f929 	bl	12080 <strlen>
   20e2e:	4284      	cmp	r4, r0
   20e30:	d1e4      	bne.n	20dfc <at_parse_process_element+0x114>
   20e32:	464c      	mov	r4, r9
		at_params_array_put(list, index, tmparray, i * sizeof(u32_t));
   20e34:	00a3      	lsls	r3, r4, #2
   20e36:	aa02      	add	r2, sp, #8
   20e38:	4639      	mov	r1, r7
   20e3a:	4630      	mov	r0, r6
   20e3c:	f017 fd4a 	bl	388d4 <at_params_array_put>
   20e40:	e7b2      	b.n	20da8 <at_parse_process_element+0xc0>
	} else if (state == NUMBER) {
   20e42:	2c04      	cmp	r4, #4
   20e44:	d115      	bne.n	20e72 <at_parse_process_element+0x18a>
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   20e46:	220a      	movs	r2, #10
   20e48:	a902      	add	r1, sp, #8
   20e4a:	4628      	mov	r0, r5
   20e4c:	f011 fa48 	bl	322e0 <strtoul>
		tmpstr = next;
   20e50:	9b02      	ldr	r3, [sp, #8]
		if (value <= USHRT_MAX) {
   20e52:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   20e56:	4602      	mov	r2, r0
		tmpstr = next;
   20e58:	9300      	str	r3, [sp, #0]
		if (value <= USHRT_MAX) {
   20e5a:	da05      	bge.n	20e68 <at_parse_process_element+0x180>
			at_params_short_put(list, index, (u16_t)value);
   20e5c:	b282      	uxth	r2, r0
   20e5e:	4639      	mov	r1, r7
   20e60:	4630      	mov	r0, r6
   20e62:	f017 fcd3 	bl	3880c <at_params_short_put>
   20e66:	e779      	b.n	20d5c <at_parse_process_element+0x74>
			at_params_int_put(list, index, value);
   20e68:	4639      	mov	r1, r7
   20e6a:	4630      	mov	r0, r6
   20e6c:	f017 fcf7 	bl	3885e <at_params_int_put>
   20e70:	e774      	b.n	20d5c <at_parse_process_element+0x74>
	} else if (state == SMS_PDU) {
   20e72:	2c05      	cmp	r4, #5
   20e74:	f47f af72 	bne.w	20d5c <at_parse_process_element+0x74>
		while (isxdigit((int)*tmpstr)) {
   20e78:	4909      	ldr	r1, [pc, #36]	; (20ea0 <at_parse_process_element+0x1b8>)
   20e7a:	9b00      	ldr	r3, [sp, #0]
   20e7c:	781a      	ldrb	r2, [r3, #0]
   20e7e:	5c52      	ldrb	r2, [r2, r1]
   20e80:	f012 0f44 	tst.w	r2, #68	; 0x44
   20e84:	d101      	bne.n	20e8a <at_parse_process_element+0x1a2>
		at_params_string_put(list, index, start_ptr,
   20e86:	1b5b      	subs	r3, r3, r5
   20e88:	e746      	b.n	20d18 <at_parse_process_element+0x30>
			tmpstr++;
   20e8a:	3301      	adds	r3, #1
   20e8c:	9300      	str	r3, [sp, #0]
   20e8e:	e7f4      	b.n	20e7a <at_parse_process_element+0x192>
		return -1;
   20e90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20e94:	e766      	b.n	20d64 <at_parse_process_element+0x7c>
   20e96:	bf00      	nop
   20e98:	2002807c 	.word	0x2002807c
   20e9c:	00024001 	.word	0x00024001
   20ea0:	0004017c 	.word	0x0004017c

00020ea4 <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   20ea4:	b510      	push	{r4, lr}
   20ea6:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   20ea8:	f7f1 f8ea 	bl	12080 <strlen>
   20eac:	2801      	cmp	r0, #1
   20eae:	d922      	bls.n	20ef6 <is_command+0x52>
		return false;
	}

	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   20eb0:	7821      	ldrb	r1, [r4, #0]
   20eb2:	4b13      	ldr	r3, [pc, #76]	; (20f00 <is_command+0x5c>)
   20eb4:	5cca      	ldrb	r2, [r1, r3]
   20eb6:	f002 0203 	and.w	r2, r2, #3
   20eba:	2a02      	cmp	r2, #2
   20ebc:	bf08      	it	eq
   20ebe:	3920      	subeq	r1, #32
   20ec0:	2941      	cmp	r1, #65	; 0x41
   20ec2:	461a      	mov	r2, r3
   20ec4:	d117      	bne.n	20ef6 <is_command+0x52>
   20ec6:	7863      	ldrb	r3, [r4, #1]
   20ec8:	5cd2      	ldrb	r2, [r2, r3]
   20eca:	f002 0203 	and.w	r2, r2, #3
   20ece:	2a02      	cmp	r2, #2
   20ed0:	bf08      	it	eq
   20ed2:	3b20      	subeq	r3, #32
   20ed4:	2b54      	cmp	r3, #84	; 0x54
   20ed6:	d10e      	bne.n	20ef6 <is_command+0x52>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   20ed8:	78a2      	ldrb	r2, [r4, #2]
   20eda:	2a25      	cmp	r2, #37	; 0x25
   20edc:	d00d      	beq.n	20efa <is_command+0x56>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   20ede:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   20ee2:	2b23      	cmp	r3, #35	; 0x23
   20ee4:	d009      	beq.n	20efa <is_command+0x56>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   20ee6:	4610      	mov	r0, r2
   20ee8:	f017 fc55 	bl	38796 <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   20eec:	b910      	cbnz	r0, 20ef4 <is_command+0x50>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   20eee:	fab2 f082 	clz	r0, r2
   20ef2:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   20ef4:	bd10      	pop	{r4, pc}
		return false;
   20ef6:	2000      	movs	r0, #0
   20ef8:	e7fc      	b.n	20ef4 <is_command+0x50>
		return true;
   20efa:	2001      	movs	r0, #1
   20efc:	e7fa      	b.n	20ef4 <is_command+0x50>
   20efe:	bf00      	nop
   20f00:	0004017c 	.word	0x0004017c

00020f04 <at_parse_detect_type>:
{
   20f04:	b570      	push	{r4, r5, r6, lr}
	const char *tmpstr = *str;
   20f06:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   20f08:	2900      	cmp	r1, #0
{
   20f0a:	4606      	mov	r6, r0
   20f0c:	7822      	ldrb	r2, [r4, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   20f0e:	d141      	bne.n	20f94 <at_parse_detect_type+0x90>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   20f10:	2a2b      	cmp	r2, #43	; 0x2b
   20f12:	4d29      	ldr	r5, [pc, #164]	; (20fb8 <at_parse_detect_type+0xb4>)
   20f14:	d001      	beq.n	20f1a <at_parse_detect_type+0x16>
   20f16:	2a25      	cmp	r2, #37	; 0x25
   20f18:	d104      	bne.n	20f24 <at_parse_detect_type+0x20>
	state = new_state;
   20f1a:	2306      	movs	r3, #6
   20f1c:	702b      	strb	r3, [r5, #0]
	return 0;
   20f1e:	2000      	movs	r0, #0
	*str = tmpstr;
   20f20:	6034      	str	r4, [r6, #0]
}
   20f22:	bd70      	pop	{r4, r5, r6, pc}
	} else if ((index == 0) && is_command(tmpstr)) {
   20f24:	4620      	mov	r0, r4
   20f26:	f7ff ffbd 	bl	20ea4 <is_command>
   20f2a:	b388      	cbz	r0, 20f90 <at_parse_detect_type+0x8c>
	state = new_state;
   20f2c:	2307      	movs	r3, #7
   20f2e:	e7f5      	b.n	20f1c <at_parse_detect_type+0x18>
	if (chr == '"') {
   20f30:	2a22      	cmp	r2, #34	; 0x22
   20f32:	d006      	beq.n	20f42 <at_parse_detect_type+0x3e>
	if (chr == '(') {
   20f34:	2a28      	cmp	r2, #40	; 0x28
   20f36:	d109      	bne.n	20f4c <at_parse_detect_type+0x48>
   20f38:	2201      	movs	r2, #1
   20f3a:	4b1f      	ldr	r3, [pc, #124]	; (20fb8 <at_parse_detect_type+0xb4>)
		tmpstr++;
   20f3c:	4414      	add	r4, r2
	state = new_state;
   20f3e:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   20f40:	e7ed      	b.n	20f1e <at_parse_detect_type+0x1a>
	state = new_state;
   20f42:	2203      	movs	r2, #3
   20f44:	4b1c      	ldr	r3, [pc, #112]	; (20fb8 <at_parse_detect_type+0xb4>)
		tmpstr++;
   20f46:	3401      	adds	r4, #1
	state = new_state;
   20f48:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   20f4a:	e7e8      	b.n	20f1e <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   20f4c:	4610      	mov	r0, r2
   20f4e:	f017 fc22 	bl	38796 <is_lfcr>
   20f52:	b170      	cbz	r0, 20f72 <at_parse_detect_type+0x6e>
   20f54:	4918      	ldr	r1, [pc, #96]	; (20fb8 <at_parse_detect_type+0xb4>)
   20f56:	7808      	ldrb	r0, [r1, #0]
   20f58:	2804      	cmp	r0, #4
   20f5a:	d108      	bne.n	20f6e <at_parse_detect_type+0x6a>
		while (is_lfcr(*tmpstr)) {
   20f5c:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   20f60:	f017 fc19 	bl	38796 <is_lfcr>
   20f64:	2800      	cmp	r0, #0
   20f66:	d1f9      	bne.n	20f5c <at_parse_detect_type+0x58>
	state = new_state;
   20f68:	2305      	movs	r3, #5
   20f6a:	700b      	strb	r3, [r1, #0]
   20f6c:	e7d7      	b.n	20f1e <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   20f6e:	2808      	cmp	r0, #8
   20f70:	d0d5      	beq.n	20f1e <at_parse_detect_type+0x1a>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   20f72:	3a2c      	subs	r2, #44	; 0x2c
   20f74:	b2d2      	uxtb	r2, r2
   20f76:	2a11      	cmp	r2, #17
   20f78:	d807      	bhi.n	20f8a <at_parse_detect_type+0x86>
   20f7a:	4b10      	ldr	r3, [pc, #64]	; (20fbc <at_parse_detect_type+0xb8>)
   20f7c:	fa23 f202 	lsr.w	r2, r3, r2
   20f80:	07d3      	lsls	r3, r2, #31
   20f82:	d502      	bpl.n	20f8a <at_parse_detect_type+0x86>
	state = new_state;
   20f84:	4b0c      	ldr	r3, [pc, #48]	; (20fb8 <at_parse_detect_type+0xb4>)
   20f86:	2208      	movs	r2, #8
   20f88:	e013      	b.n	20fb2 <at_parse_detect_type+0xae>
		return -1;
   20f8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20f8e:	e7c8      	b.n	20f22 <at_parse_detect_type+0x1e>
	state = new_state;
   20f90:	2302      	movs	r3, #2
   20f92:	e7c3      	b.n	20f1c <at_parse_detect_type+0x18>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   20f94:	dd03      	ble.n	20f9e <at_parse_detect_type+0x9a>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   20f96:	2a2b      	cmp	r2, #43	; 0x2b
   20f98:	d0f7      	beq.n	20f8a <at_parse_detect_type+0x86>
   20f9a:	2a25      	cmp	r2, #37	; 0x25
   20f9c:	d0f5      	beq.n	20f8a <at_parse_detect_type+0x86>
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   20f9e:	4b08      	ldr	r3, [pc, #32]	; (20fc0 <at_parse_detect_type+0xbc>)
   20fa0:	5cd3      	ldrb	r3, [r2, r3]
   20fa2:	0759      	lsls	r1, r3, #29
   20fa4:	d403      	bmi.n	20fae <at_parse_detect_type+0xaa>
   20fa6:	2a2d      	cmp	r2, #45	; 0x2d
   20fa8:	d001      	beq.n	20fae <at_parse_detect_type+0xaa>
   20faa:	2a2b      	cmp	r2, #43	; 0x2b
   20fac:	d1c0      	bne.n	20f30 <at_parse_detect_type+0x2c>
	state = new_state;
   20fae:	2204      	movs	r2, #4
   20fb0:	4b01      	ldr	r3, [pc, #4]	; (20fb8 <at_parse_detect_type+0xb4>)
   20fb2:	701a      	strb	r2, [r3, #0]
   20fb4:	e7b3      	b.n	20f1e <at_parse_detect_type+0x1a>
   20fb6:	bf00      	nop
   20fb8:	2002807c 	.word	0x2002807c
   20fbc:	00024001 	.word	0x00024001
   20fc0:	0004017c 	.word	0x0004017c

00020fc4 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   20fc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20fc8:	4688      	mov	r8, r1
   20fca:	4616      	mov	r6, r2
   20fcc:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   20fce:	4604      	mov	r4, r0
   20fd0:	2800      	cmp	r0, #0
   20fd2:	d07e      	beq.n	210d2 <at_parser_max_params_from_str+0x10e>
   20fd4:	2a00      	cmp	r2, #0
   20fd6:	d07c      	beq.n	210d2 <at_parser_max_params_from_str+0x10e>
   20fd8:	6853      	ldr	r3, [r2, #4]
   20fda:	2b00      	cmp	r3, #0
   20fdc:	d079      	beq.n	210d2 <at_parser_max_params_from_str+0x10e>
	state = IDLE;
   20fde:	2500      	movs	r5, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   20fe0:	4610      	mov	r0, r2
   20fe2:	f000 f8eb 	bl	211bc <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   20fe6:	6832      	ldr	r2, [r6, #0]
	const char *str = *at_params_str;
   20fe8:	9401      	str	r4, [sp, #4]
	max_params_count = MIN(max_params_count, list->param_count);
   20fea:	4297      	cmp	r7, r2
   20fec:	bf28      	it	cs
   20fee:	4617      	movcs	r7, r2
	int index = 0;
   20ff0:	462c      	mov	r4, r5
	state = IDLE;
   20ff2:	4b39      	ldr	r3, [pc, #228]	; (210d8 <at_parser_max_params_from_str+0x114>)
		if (isspace((int)*str)) {
   20ff4:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 210dc <at_parser_max_params_from_str+0x118>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   20ff8:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 210e0 <at_parser_max_params_from_str+0x11c>
	state = IDLE;
   20ffc:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   20ffe:	9b01      	ldr	r3, [sp, #4]
   21000:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   21002:	2a00      	cmp	r2, #0
   21004:	d04b      	beq.n	2109e <at_parser_max_params_from_str+0xda>
   21006:	42a7      	cmp	r7, r4
   21008:	d949      	bls.n	2109e <at_parser_max_params_from_str+0xda>
		if (isspace((int)*str)) {
   2100a:	f812 2009 	ldrb.w	r2, [r2, r9]
		if (at_parse_detect_type(&str, index) == -1) {
   2100e:	a801      	add	r0, sp, #4
		if (isspace((int)*str)) {
   21010:	0711      	lsls	r1, r2, #28
			str++;
   21012:	bf48      	it	mi
   21014:	3301      	addmi	r3, #1
		if (at_parse_detect_type(&str, index) == -1) {
   21016:	4621      	mov	r1, r4
			str++;
   21018:	bf48      	it	mi
   2101a:	9301      	strmi	r3, [sp, #4]
		if (at_parse_detect_type(&str, index) == -1) {
   2101c:	f7ff ff72 	bl	20f04 <at_parse_detect_type>
   21020:	1c42      	adds	r2, r0, #1
   21022:	d03c      	beq.n	2109e <at_parser_max_params_from_str+0xda>
		if (at_parse_process_element(&str, index, list) == -1) {
   21024:	4632      	mov	r2, r6
   21026:	4621      	mov	r1, r4
   21028:	a801      	add	r0, sp, #4
   2102a:	f7ff fe5d 	bl	20ce8 <at_parse_process_element>
   2102e:	1c43      	adds	r3, r0, #1
   21030:	d035      	beq.n	2109e <at_parser_max_params_from_str+0xda>
		if (is_separator(*str)) {
   21032:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   21034:	781a      	ldrb	r2, [r3, #0]
   21036:	3a2c      	subs	r2, #44	; 0x2c
   21038:	b2d2      	uxtb	r2, r2
   2103a:	2a11      	cmp	r2, #17
   2103c:	d81a      	bhi.n	21074 <at_parser_max_params_from_str+0xb0>
   2103e:	fa2a f202 	lsr.w	r2, sl, r2
   21042:	07d1      	lsls	r1, r2, #31
   21044:	d516      	bpl.n	21074 <at_parser_max_params_from_str+0xb0>
			if (is_lfcr(*(str + 1))) {
   21046:	7858      	ldrb	r0, [r3, #1]
   21048:	f017 fba5 	bl	38796 <is_lfcr>
   2104c:	b178      	cbz	r0, 2106e <at_parser_max_params_from_str+0xaa>
				index++;
   2104e:	3401      	adds	r4, #1
				if (index == max_params) {
   21050:	42bc      	cmp	r4, r7
   21052:	d039      	beq.n	210c8 <at_parser_max_params_from_str+0x104>
				if (at_parse_detect_type(&str, index) == -1) {
   21054:	4621      	mov	r1, r4
   21056:	a801      	add	r0, sp, #4
   21058:	f7ff ff54 	bl	20f04 <at_parse_detect_type>
   2105c:	1c42      	adds	r2, r0, #1
   2105e:	d01e      	beq.n	2109e <at_parser_max_params_from_str+0xda>
				if (at_parse_process_element(&str, index,
   21060:	4632      	mov	r2, r6
   21062:	4621      	mov	r1, r4
   21064:	a801      	add	r0, sp, #4
   21066:	f7ff fe3f 	bl	20ce8 <at_parse_process_element>
   2106a:	1c43      	adds	r3, r0, #1
   2106c:	d017      	beq.n	2109e <at_parser_max_params_from_str+0xda>
			str++;
   2106e:	9b01      	ldr	r3, [sp, #4]
   21070:	3301      	adds	r3, #1
   21072:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   21074:	9a01      	ldr	r2, [sp, #4]
   21076:	7810      	ldrb	r0, [r2, #0]
   21078:	f017 fb8d 	bl	38796 <is_lfcr>
   2107c:	b1f8      	cbz	r0, 210be <at_parser_max_params_from_str+0xfa>
   2107e:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   21080:	7811      	ldrb	r1, [r2, #0]
   21082:	4693      	mov	fp, r2
   21084:	4608      	mov	r0, r1
   21086:	3201      	adds	r2, #1
   21088:	f017 fb85 	bl	38796 <is_lfcr>
   2108c:	2800      	cmp	r0, #0
   2108e:	d1f7      	bne.n	21080 <at_parser_max_params_from_str+0xbc>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   21090:	b119      	cbz	r1, 2109a <at_parser_max_params_from_str+0xd6>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   21092:	292b      	cmp	r1, #43	; 0x2b
   21094:	d001      	beq.n	2109a <at_parser_max_params_from_str+0xd6>
   21096:	2925      	cmp	r1, #37	; 0x25
   21098:	d111      	bne.n	210be <at_parser_max_params_from_str+0xfa>
				str += i;
   2109a:	f8cd b004 	str.w	fp, [sp, #4]
	*at_params_str = str;
   2109e:	9b01      	ldr	r3, [sp, #4]
	if (oversized) {
   210a0:	b9a5      	cbnz	r5, 210cc <at_parser_max_params_from_str+0x108>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   210a2:	781a      	ldrb	r2, [r3, #0]
		return -EAGAIN;
   210a4:	2a00      	cmp	r2, #0
   210a6:	bf0c      	ite	eq
   210a8:	2000      	moveq	r0, #0
   210aa:	f06f 000a 	mvnne.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   210ae:	f1b8 0f00 	cmp.w	r8, #0
   210b2:	d001      	beq.n	210b8 <at_parser_max_params_from_str+0xf4>
		*next_param_str = (char *)at_params_str;
   210b4:	f8c8 3000 	str.w	r3, [r8]
	}

	return err;
}
   210b8:	b003      	add	sp, #12
   210ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		index++;
   210be:	3401      	adds	r4, #1
			oversized = true;
   210c0:	42bc      	cmp	r4, r7
   210c2:	bf08      	it	eq
   210c4:	2501      	moveq	r5, #1
   210c6:	e79a      	b.n	20ffe <at_parser_max_params_from_str+0x3a>
					oversized = true;
   210c8:	4605      	mov	r5, r0
   210ca:	e7e8      	b.n	2109e <at_parser_max_params_from_str+0xda>
		return -E2BIG;
   210cc:	f06f 0006 	mvn.w	r0, #6
   210d0:	e7ed      	b.n	210ae <at_parser_max_params_from_str+0xea>
		return -EINVAL;
   210d2:	f06f 0015 	mvn.w	r0, #21
   210d6:	e7ef      	b.n	210b8 <at_parser_max_params_from_str+0xf4>
   210d8:	2002807c 	.word	0x2002807c
   210dc:	0004017c 	.word	0x0004017c
   210e0:	00024001 	.word	0x00024001

000210e4 <at_params_get>:
}

/* Internal function. Parameter cannot be null. */
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
   210e4:	b538      	push	{r3, r4, r5, lr}
   210e6:	460c      	mov	r4, r1
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");
   210e8:	4605      	mov	r5, r0
   210ea:	b960      	cbnz	r0, 21106 <at_params_get+0x22>
   210ec:	490a      	ldr	r1, [pc, #40]	; (21118 <at_params_get+0x34>)
   210ee:	232b      	movs	r3, #43	; 0x2b
   210f0:	4a0a      	ldr	r2, [pc, #40]	; (2111c <at_params_get+0x38>)
   210f2:	480b      	ldr	r0, [pc, #44]	; (21120 <at_params_get+0x3c>)
   210f4:	f012 fa5d 	bl	335b2 <printk>
   210f8:	480a      	ldr	r0, [pc, #40]	; (21124 <at_params_get+0x40>)
   210fa:	f012 fa5a 	bl	335b2 <printk>
   210fe:	212b      	movs	r1, #43	; 0x2b
   21100:	4806      	ldr	r0, [pc, #24]	; (2111c <at_params_get+0x38>)
   21102:	f012 fd57 	bl	33bb4 <assert_post_action>

	if (index >= list->param_count) {
   21106:	682b      	ldr	r3, [r5, #0]
   21108:	42a3      	cmp	r3, r4
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   2110a:	bf85      	ittet	hi
   2110c:	230c      	movhi	r3, #12
   2110e:	6868      	ldrhi	r0, [r5, #4]
		return NULL;
   21110:	2000      	movls	r0, #0
	return &param[index];
   21112:	fb03 0004 	mlahi	r0, r3, r4, r0
}
   21116:	bd38      	pop	{r3, r4, r5, pc}
   21118:	0003e4ca 	.word	0x0003e4ca
   2111c:	0003e49c 	.word	0x0003e49c
   21120:	0003b773 	.word	0x0003b773
   21124:	0003e4de 	.word	0x0003e4de

00021128 <at_param_size>:

/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
   21128:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   2112a:	4604      	mov	r4, r0
   2112c:	b960      	cbnz	r0, 21148 <at_param_size+0x20>
   2112e:	490e      	ldr	r1, [pc, #56]	; (21168 <at_param_size+0x40>)
   21130:	2339      	movs	r3, #57	; 0x39
   21132:	4a0e      	ldr	r2, [pc, #56]	; (2116c <at_param_size+0x44>)
   21134:	480e      	ldr	r0, [pc, #56]	; (21170 <at_param_size+0x48>)
   21136:	f012 fa3c 	bl	335b2 <printk>
   2113a:	480e      	ldr	r0, [pc, #56]	; (21174 <at_param_size+0x4c>)
   2113c:	f012 fa39 	bl	335b2 <printk>
   21140:	2139      	movs	r1, #57	; 0x39
   21142:	480a      	ldr	r0, [pc, #40]	; (2116c <at_param_size+0x44>)
   21144:	f012 fd36 	bl	33bb4 <assert_post_action>

	if (param->type == AT_PARAM_TYPE_NUM_SHORT) {
   21148:	7823      	ldrb	r3, [r4, #0]
   2114a:	2b01      	cmp	r3, #1
   2114c:	d006      	beq.n	2115c <at_param_size+0x34>
		return sizeof(u16_t);
	} else if (param->type == AT_PARAM_TYPE_NUM_INT) {
   2114e:	2b02      	cmp	r3, #2
   21150:	d006      	beq.n	21160 <at_param_size+0x38>
		return sizeof(u32_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   21152:	3b03      	subs	r3, #3
   21154:	2b01      	cmp	r3, #1
   21156:	d805      	bhi.n	21164 <at_param_size+0x3c>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   21158:	6860      	ldr	r0, [r4, #4]
	}

	return 0;
}
   2115a:	bd10      	pop	{r4, pc}
		return sizeof(u16_t);
   2115c:	2002      	movs	r0, #2
   2115e:	e7fc      	b.n	2115a <at_param_size+0x32>
		return sizeof(u32_t);
   21160:	2004      	movs	r0, #4
   21162:	e7fa      	b.n	2115a <at_param_size+0x32>
	return 0;
   21164:	2000      	movs	r0, #0
   21166:	e7f8      	b.n	2115a <at_param_size+0x32>
   21168:	0003e46b 	.word	0x0003e46b
   2116c:	0003e49c 	.word	0x0003e49c
   21170:	0003b773 	.word	0x0003b773
   21174:	0003e480 	.word	0x0003e480

00021178 <at_param_clear>:
{
   21178:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   2117a:	4604      	mov	r4, r0
   2117c:	b960      	cbnz	r0, 21198 <at_param_clear+0x20>
   2117e:	490b      	ldr	r1, [pc, #44]	; (211ac <at_param_clear+0x34>)
   21180:	231d      	movs	r3, #29
   21182:	4a0b      	ldr	r2, [pc, #44]	; (211b0 <at_param_clear+0x38>)
   21184:	480b      	ldr	r0, [pc, #44]	; (211b4 <at_param_clear+0x3c>)
   21186:	f012 fa14 	bl	335b2 <printk>
   2118a:	480b      	ldr	r0, [pc, #44]	; (211b8 <at_param_clear+0x40>)
   2118c:	f012 fa11 	bl	335b2 <printk>
   21190:	211d      	movs	r1, #29
   21192:	4807      	ldr	r0, [pc, #28]	; (211b0 <at_param_clear+0x38>)
   21194:	f012 fd0e 	bl	33bb4 <assert_post_action>
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   21198:	7823      	ldrb	r3, [r4, #0]
   2119a:	3b03      	subs	r3, #3
   2119c:	2b01      	cmp	r3, #1
   2119e:	d802      	bhi.n	211a6 <at_param_clear+0x2e>
		k_free(param->value.str_val);
   211a0:	68a0      	ldr	r0, [r4, #8]
   211a2:	f017 fd2a 	bl	38bfa <k_free>
	param->value.int_val = 0;
   211a6:	2300      	movs	r3, #0
   211a8:	60a3      	str	r3, [r4, #8]
}
   211aa:	bd10      	pop	{r4, pc}
   211ac:	0003e46b 	.word	0x0003e46b
   211b0:	0003e49c 	.word	0x0003e49c
   211b4:	0003b773 	.word	0x0003b773
   211b8:	0003e480 	.word	0x0003e480

000211bc <at_params_list_clear>:
	list->param_count = max_params_count;
	return 0;
}

void at_params_list_clear(struct at_param_list *list)
{
   211bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (list == NULL || list->params == NULL) {
   211c0:	4605      	mov	r5, r0
   211c2:	b158      	cbz	r0, 211dc <at_params_list_clear+0x20>
   211c4:	6843      	ldr	r3, [r0, #4]
   211c6:	b14b      	cbz	r3, 211dc <at_params_list_clear+0x20>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   211c8:	2400      	movs	r4, #0
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   211ca:	f8df 8054 	ldr.w	r8, [pc, #84]	; 21220 <at_params_list_clear+0x64>
   211ce:	f8df a054 	ldr.w	sl, [pc, #84]	; 21224 <at_params_list_clear+0x68>
   211d2:	f8df b054 	ldr.w	fp, [pc, #84]	; 21228 <at_params_list_clear+0x6c>
	for (size_t i = 0; i < list->param_count; ++i) {
   211d6:	682b      	ldr	r3, [r5, #0]
   211d8:	429c      	cmp	r4, r3
   211da:	d301      	bcc.n	211e0 <at_params_list_clear+0x24>
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
		at_param_init(&params[i]);
	}
}
   211dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		at_param_clear(&params[i]);
   211e0:	270c      	movs	r7, #12
   211e2:	4367      	muls	r7, r4
   211e4:	f8d5 9004 	ldr.w	r9, [r5, #4]
   211e8:	eb09 0607 	add.w	r6, r9, r7
   211ec:	4630      	mov	r0, r6
   211ee:	f7ff ffc3 	bl	21178 <at_param_clear>
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   211f2:	b966      	cbnz	r6, 2120e <at_params_list_clear+0x52>
   211f4:	4651      	mov	r1, sl
   211f6:	2314      	movs	r3, #20
   211f8:	4642      	mov	r2, r8
   211fa:	4658      	mov	r0, fp
   211fc:	f012 f9d9 	bl	335b2 <printk>
   21200:	4806      	ldr	r0, [pc, #24]	; (2121c <at_params_list_clear+0x60>)
   21202:	f012 f9d6 	bl	335b2 <printk>
   21206:	2114      	movs	r1, #20
   21208:	4640      	mov	r0, r8
   2120a:	f012 fcd3 	bl	33bb4 <assert_post_action>
   2120e:	2300      	movs	r3, #0
	for (size_t i = 0; i < list->param_count; ++i) {
   21210:	3401      	adds	r4, #1
   21212:	f849 3007 	str.w	r3, [r9, r7]
   21216:	6073      	str	r3, [r6, #4]
   21218:	60b3      	str	r3, [r6, #8]
   2121a:	e7dc      	b.n	211d6 <at_params_list_clear+0x1a>
   2121c:	0003e480 	.word	0x0003e480
   21220:	0003e49c 	.word	0x0003e49c
   21224:	0003e46b 	.word	0x0003e46b
   21228:	0003b773 	.word	0x0003b773

0002122c <parse_psm_cfg>:
	char timer_str[9] = {0};
   2122c:	2300      	movs	r3, #0
{
   2122e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21232:	b089      	sub	sp, #36	; 0x24
	char timer_str[9] = {0};
   21234:	e9cd 3305 	strd	r3, r3, [sp, #20]
   21238:	f88d 301c 	strb.w	r3, [sp, #28]
	char unit_str[4] = {0};
   2123c:	9303      	str	r3, [sp, #12]
	size_t timer_str_len = sizeof(timer_str) - 1;
   2123e:	2308      	movs	r3, #8
	size_t tau_idx = is_notif ? AT_CEREG_TAU_INDEX :
   21240:	2900      	cmp	r1, #0
	size_t timer_str_len = sizeof(timer_str) - 1;
   21242:	9304      	str	r3, [sp, #16]
{
   21244:	4616      	mov	r6, r2
	err = at_params_string_get(at_params,
   21246:	ab04      	add	r3, sp, #16
   21248:	aa05      	add	r2, sp, #20
   2124a:	bf14      	ite	ne
   2124c:	2108      	movne	r1, #8
   2124e:	2109      	moveq	r1, #9
{
   21250:	4607      	mov	r7, r0
	size_t tau_idx = is_notif ? AT_CEREG_TAU_INDEX :
   21252:	bf14      	ite	ne
   21254:	f04f 0807 	movne.w	r8, #7
   21258:	f04f 0808 	moveq.w	r8, #8
	err = at_params_string_get(at_params,
   2125c:	f017 fb8d 	bl	3897a <at_params_string_get>
	if (err) {
   21260:	4d3e      	ldr	r5, [pc, #248]	; (2135c <parse_psm_cfg+0x130>)
   21262:	4b3f      	ldr	r3, [pc, #252]	; (21360 <parse_psm_cfg+0x134>)
   21264:	4604      	mov	r4, r0
   21266:	1aed      	subs	r5, r5, r3
   21268:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   2126c:	b170      	cbz	r0, 2128c <parse_psm_cfg+0x60>
		LOG_ERR("Could not get TAU, error: %d", err);
   2126e:	f04f 0000 	mov.w	r0, #0
   21272:	2301      	movs	r3, #1
   21274:	f363 0007 	bfi	r0, r3, #0, #8
   21278:	f365 108f 	bfi	r0, r5, #6, #10
   2127c:	4622      	mov	r2, r4
   2127e:	4939      	ldr	r1, [pc, #228]	; (21364 <parse_psm_cfg+0x138>)
   21280:	f012 fcaf 	bl	33be2 <log_string_sync>
}
   21284:	4620      	mov	r0, r4
   21286:	b009      	add	sp, #36	; 0x24
   21288:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	memcpy(unit_str, timer_str, unit_str_len);
   2128c:	9b05      	ldr	r3, [sp, #20]
	lut_idx = strtoul(unit_str, NULL, 2);
   2128e:	4601      	mov	r1, r0
	memcpy(unit_str, timer_str, unit_str_len);
   21290:	f8ad 300c 	strh.w	r3, [sp, #12]
	lut_idx = strtoul(unit_str, NULL, 2);
   21294:	2202      	movs	r2, #2
	memcpy(unit_str, timer_str, unit_str_len);
   21296:	0c1b      	lsrs	r3, r3, #16
	lut_idx = strtoul(unit_str, NULL, 2);
   21298:	a803      	add	r0, sp, #12
	memcpy(unit_str, timer_str, unit_str_len);
   2129a:	f88d 300e 	strb.w	r3, [sp, #14]
	lut_idx = strtoul(unit_str, NULL, 2);
   2129e:	f011 f81f 	bl	322e0 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3412_lookup) - 1)) {
   212a2:	2807      	cmp	r0, #7
   212a4:	d90c      	bls.n	212c0 <parse_psm_cfg+0x94>
		LOG_ERR("Unable to parse periodic TAU string");
   212a6:	f04f 0000 	mov.w	r0, #0
   212aa:	2301      	movs	r3, #1
   212ac:	492e      	ldr	r1, [pc, #184]	; (21368 <parse_psm_cfg+0x13c>)
   212ae:	f363 0007 	bfi	r0, r3, #0, #8
   212b2:	f365 108f 	bfi	r0, r5, #6, #10
		LOG_ERR("Unable to parse active time string");
   212b6:	f012 fc94 	bl	33be2 <log_string_sync>
		return err;
   212ba:	f06f 0415 	mvn.w	r4, #21
   212be:	e7e1      	b.n	21284 <parse_psm_cfg+0x58>
	timer_unit = t3412_lookup[lut_idx];
   212c0:	4b2a      	ldr	r3, [pc, #168]	; (2136c <parse_psm_cfg+0x140>)
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   212c2:	2202      	movs	r2, #2
	timer_unit = t3412_lookup[lut_idx];
   212c4:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   212c8:	4621      	mov	r1, r4
   212ca:	f10d 0017 	add.w	r0, sp, #23
   212ce:	f011 f807 	bl	322e0 <strtoul>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   212d2:	f1b9 0f00 	cmp.w	r9, #0
   212d6:	d021      	beq.n	2131c <parse_psm_cfg+0xf0>
   212d8:	fb00 f009 	mul.w	r0, r0, r9
   212dc:	6030      	str	r0, [r6, #0]
	err = at_params_string_get(at_params,
   212de:	ab04      	add	r3, sp, #16
   212e0:	aa05      	add	r2, sp, #20
   212e2:	4641      	mov	r1, r8
   212e4:	4638      	mov	r0, r7
   212e6:	f017 fb48 	bl	3897a <at_params_string_get>
	if (err) {
   212ea:	4604      	mov	r4, r0
   212ec:	2800      	cmp	r0, #0
   212ee:	d1be      	bne.n	2126e <parse_psm_cfg+0x42>
	memcpy(unit_str, timer_str, unit_str_len);
   212f0:	9b05      	ldr	r3, [sp, #20]
	lut_idx = strtoul(unit_str, NULL, 2);
   212f2:	4601      	mov	r1, r0
	memcpy(unit_str, timer_str, unit_str_len);
   212f4:	f8ad 300c 	strh.w	r3, [sp, #12]
	lut_idx = strtoul(unit_str, NULL, 2);
   212f8:	2202      	movs	r2, #2
	memcpy(unit_str, timer_str, unit_str_len);
   212fa:	0c1b      	lsrs	r3, r3, #16
	lut_idx = strtoul(unit_str, NULL, 2);
   212fc:	a803      	add	r0, sp, #12
	memcpy(unit_str, timer_str, unit_str_len);
   212fe:	f88d 300e 	strb.w	r3, [sp, #14]
	lut_idx = strtoul(unit_str, NULL, 2);
   21302:	f010 ffed 	bl	322e0 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
   21306:	2807      	cmp	r0, #7
   21308:	d90b      	bls.n	21322 <parse_psm_cfg+0xf6>
		LOG_ERR("Unable to parse active time string");
   2130a:	f04f 0000 	mov.w	r0, #0
   2130e:	2301      	movs	r3, #1
   21310:	f363 0007 	bfi	r0, r3, #0, #8
   21314:	f365 108f 	bfi	r0, r5, #6, #10
   21318:	4915      	ldr	r1, [pc, #84]	; (21370 <parse_psm_cfg+0x144>)
   2131a:	e7cc      	b.n	212b6 <parse_psm_cfg+0x8a>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   2131c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21320:	e7dc      	b.n	212dc <parse_psm_cfg+0xb0>
	timer_unit = t3324_lookup[lut_idx];
   21322:	4b14      	ldr	r3, [pc, #80]	; (21374 <parse_psm_cfg+0x148>)
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   21324:	2202      	movs	r2, #2
	timer_unit = t3324_lookup[lut_idx];
   21326:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   2132a:	4621      	mov	r1, r4
   2132c:	f10d 0017 	add.w	r0, sp, #23
   21330:	f010 ffd6 	bl	322e0 <strtoul>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   21334:	b17f      	cbz	r7, 21356 <parse_psm_cfg+0x12a>
   21336:	4347      	muls	r7, r0
	LOG_DBG("TAU: %d sec, active time: %d sec\n",
   21338:	2204      	movs	r2, #4
   2133a:	f04f 0000 	mov.w	r0, #0
   2133e:	f362 0007 	bfi	r0, r2, #0, #8
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   21342:	6077      	str	r7, [r6, #4]
	LOG_DBG("TAU: %d sec, active time: %d sec\n",
   21344:	f365 108f 	bfi	r0, r5, #6, #10
   21348:	9700      	str	r7, [sp, #0]
   2134a:	6833      	ldr	r3, [r6, #0]
   2134c:	4a0a      	ldr	r2, [pc, #40]	; (21378 <parse_psm_cfg+0x14c>)
   2134e:	490b      	ldr	r1, [pc, #44]	; (2137c <parse_psm_cfg+0x150>)
   21350:	f012 fc47 	bl	33be2 <log_string_sync>
	return 0;
   21354:	e796      	b.n	21284 <parse_psm_cfg+0x58>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   21356:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2135a:	e7ed      	b.n	21338 <parse_psm_cfg+0x10c>
   2135c:	00039fa8 	.word	0x00039fa8
   21360:	00039f48 	.word	0x00039f48
   21364:	0003ebff 	.word	0x0003ebff
   21368:	0003ec1c 	.word	0x0003ec1c
   2136c:	0003a784 	.word	0x0003a784
   21370:	0003ec40 	.word	0x0003ec40
   21374:	0003a764 	.word	0x0003a764
   21378:	0003e50a 	.word	0x0003e50a
   2137c:	0003ec63 	.word	0x0003ec63

00021380 <lte_lc_normal>:
{
   21380:	b508      	push	{r3, lr}
	if (at_cmd_write(normal, NULL, 0, NULL) != 0) {
   21382:	2300      	movs	r3, #0
   21384:	4804      	ldr	r0, [pc, #16]	; (21398 <lte_lc_normal+0x18>)
   21386:	461a      	mov	r2, r3
   21388:	4619      	mov	r1, r3
   2138a:	f7ff fb9f 	bl	20acc <at_cmd_write>
   2138e:	2800      	cmp	r0, #0
}
   21390:	bf18      	it	ne
   21392:	f06f 0004 	mvnne.w	r0, #4
   21396:	bd08      	pop	{r3, pc}
   21398:	0003ebf5 	.word	0x0003ebf5

0002139c <lte_lc_psm_req>:
{
   2139c:	b500      	push	{lr}
	if (enable) {
   2139e:	4603      	mov	r3, r0
{
   213a0:	b08d      	sub	sp, #52	; 0x34
	if (enable) {
   213a2:	b1a0      	cbz	r0, 213ce <lte_lc_psm_req+0x32>
		snprintf(psm_req, sizeof(psm_req),
   213a4:	4b0c      	ldr	r3, [pc, #48]	; (213d8 <lte_lc_psm_req+0x3c>)
   213a6:	4a0d      	ldr	r2, [pc, #52]	; (213dc <lte_lc_psm_req+0x40>)
   213a8:	9300      	str	r3, [sp, #0]
   213aa:	2128      	movs	r1, #40	; 0x28
   213ac:	4b0c      	ldr	r3, [pc, #48]	; (213e0 <lte_lc_psm_req+0x44>)
   213ae:	a802      	add	r0, sp, #8
   213b0:	f010 fc5c 	bl	31c6c <sniprintf>
		err = at_cmd_write(psm_req, NULL, 0, NULL);
   213b4:	2300      	movs	r3, #0
   213b6:	461a      	mov	r2, r3
   213b8:	4619      	mov	r1, r3
   213ba:	a802      	add	r0, sp, #8
		err = at_cmd_write(psm_disable, NULL, 0, NULL);
   213bc:	f7ff fb86 	bl	20acc <at_cmd_write>
		return -EIO;
   213c0:	2800      	cmp	r0, #0
}
   213c2:	bf18      	it	ne
   213c4:	f06f 0004 	mvnne.w	r0, #4
   213c8:	b00d      	add	sp, #52	; 0x34
   213ca:	f85d fb04 	ldr.w	pc, [sp], #4
		err = at_cmd_write(psm_disable, NULL, 0, NULL);
   213ce:	4602      	mov	r2, r0
   213d0:	4601      	mov	r1, r0
   213d2:	4804      	ldr	r0, [pc, #16]	; (213e4 <lte_lc_psm_req+0x48>)
   213d4:	e7f2      	b.n	213bc <lte_lc_psm_req+0x20>
   213d6:	bf00      	nop
   213d8:	200204f0 	.word	0x200204f0
   213dc:	0003ea27 	.word	0x0003ea27
   213e0:	200204f9 	.word	0x200204f9
   213e4:	0003ec89 	.word	0x0003ec89

000213e8 <lte_lc_system_mode_set>:

	return err;
}

int lte_lc_system_mode_set(enum lte_lc_system_mode mode)
{
   213e8:	b530      	push	{r4, r5, lr}
   213ea:	4b30      	ldr	r3, [pc, #192]	; (214ac <lte_lc_system_mode_set+0xc4>)
   213ec:	4d30      	ldr	r5, [pc, #192]	; (214b0 <lte_lc_system_mode_set+0xc8>)
   213ee:	b08f      	sub	sp, #60	; 0x3c
   213f0:	1aed      	subs	r5, r5, r3
   213f2:	f3c5 05c9 	ubfx	r5, r5, #3, #10
	int err, len;
	char cmd[50];

	switch (mode) {
   213f6:	4604      	mov	r4, r0
   213f8:	b1c0      	cbz	r0, 2142c <lte_lc_system_mode_set+0x44>
   213fa:	2805      	cmp	r0, #5
   213fc:	d822      	bhi.n	21444 <lte_lc_system_mode_set+0x5c>
	default:
		LOG_ERR("Invalid system mode requested");
		return -EINVAL;
	}

	len = snprintk(cmd, sizeof(cmd), "AT%%XSYSTEMMODE=%s",
   213fe:	4b2d      	ldr	r3, [pc, #180]	; (214b4 <lte_lc_system_mode_set+0xcc>)
   21400:	4a2d      	ldr	r2, [pc, #180]	; (214b8 <lte_lc_system_mode_set+0xd0>)
   21402:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   21406:	2132      	movs	r1, #50	; 0x32
   21408:	a801      	add	r0, sp, #4
   2140a:	f012 f8df 	bl	335cc <snprintk>
		       system_mode_params[mode]);
	if (len < 0) {
   2140e:	2800      	cmp	r0, #0
   21410:	da27      	bge.n	21462 <lte_lc_system_mode_set+0x7a>
		LOG_ERR("Could not construct system mode command");
   21412:	2301      	movs	r3, #1
   21414:	f04f 0000 	mov.w	r0, #0
   21418:	f363 0007 	bfi	r0, r3, #0, #8
   2141c:	f365 108f 	bfi	r0, r5, #6, #10
   21420:	4926      	ldr	r1, [pc, #152]	; (214bc <lte_lc_system_mode_set+0xd4>)
   21422:	f012 fbde 	bl	33be2 <log_string_sync>
		return -EFAULT;
   21426:	f06f 040d 	mvn.w	r4, #13
   2142a:	e017      	b.n	2145c <lte_lc_system_mode_set+0x74>
		LOG_DBG("No system mode set");
   2142c:	f04f 0000 	mov.w	r0, #0
   21430:	2304      	movs	r3, #4
   21432:	4a23      	ldr	r2, [pc, #140]	; (214c0 <lte_lc_system_mode_set+0xd8>)
   21434:	f363 0007 	bfi	r0, r3, #0, #8
   21438:	4922      	ldr	r1, [pc, #136]	; (214c4 <lte_lc_system_mode_set+0xdc>)
   2143a:	f365 108f 	bfi	r0, r5, #6, #10

	LOG_DBG("Sending AT command to set system mode: %s", log_strdup(cmd));

	err = at_cmd_write(cmd, NULL, 0, NULL);
	if (err) {
		LOG_ERR("Could not send AT command, error: %d", err);
   2143e:	f012 fbd0 	bl	33be2 <log_string_sync>
   21442:	e00b      	b.n	2145c <lte_lc_system_mode_set+0x74>
		LOG_ERR("Invalid system mode requested");
   21444:	2301      	movs	r3, #1
   21446:	f04f 0000 	mov.w	r0, #0
   2144a:	f363 0007 	bfi	r0, r3, #0, #8
   2144e:	f365 108f 	bfi	r0, r5, #6, #10
   21452:	491d      	ldr	r1, [pc, #116]	; (214c8 <lte_lc_system_mode_set+0xe0>)
   21454:	f012 fbc5 	bl	33be2 <log_string_sync>
		return -EINVAL;
   21458:	f06f 0415 	mvn.w	r4, #21
	}

	return err;
}
   2145c:	4620      	mov	r0, r4
   2145e:	b00f      	add	sp, #60	; 0x3c
   21460:	bd30      	pop	{r4, r5, pc}
	LOG_DBG("Sending AT command to set system mode: %s", log_strdup(cmd));
   21462:	2304      	movs	r3, #4
   21464:	f04f 0400 	mov.w	r4, #0
   21468:	eb0d 0003 	add.w	r0, sp, r3
   2146c:	f363 0407 	bfi	r4, r3, #0, #8
   21470:	f012 fbc9 	bl	33c06 <log_strdup>
   21474:	f365 148f 	bfi	r4, r5, #6, #10
   21478:	4603      	mov	r3, r0
   2147a:	4a11      	ldr	r2, [pc, #68]	; (214c0 <lte_lc_system_mode_set+0xd8>)
   2147c:	4620      	mov	r0, r4
   2147e:	4913      	ldr	r1, [pc, #76]	; (214cc <lte_lc_system_mode_set+0xe4>)
   21480:	f012 fbaf 	bl	33be2 <log_string_sync>
	err = at_cmd_write(cmd, NULL, 0, NULL);
   21484:	2300      	movs	r3, #0
   21486:	a801      	add	r0, sp, #4
   21488:	461a      	mov	r2, r3
   2148a:	4619      	mov	r1, r3
   2148c:	f7ff fb1e 	bl	20acc <at_cmd_write>
	if (err) {
   21490:	4604      	mov	r4, r0
   21492:	2800      	cmp	r0, #0
   21494:	d0e2      	beq.n	2145c <lte_lc_system_mode_set+0x74>
		LOG_ERR("Could not send AT command, error: %d", err);
   21496:	f04f 0000 	mov.w	r0, #0
   2149a:	2301      	movs	r3, #1
   2149c:	f363 0007 	bfi	r0, r3, #0, #8
   214a0:	f365 108f 	bfi	r0, r5, #6, #10
   214a4:	4622      	mov	r2, r4
   214a6:	490a      	ldr	r1, [pc, #40]	; (214d0 <lte_lc_system_mode_set+0xe8>)
   214a8:	e7c9      	b.n	2143e <lte_lc_system_mode_set+0x56>
   214aa:	bf00      	nop
   214ac:	00039f48 	.word	0x00039f48
   214b0:	00039fa8 	.word	0x00039fa8
   214b4:	0003a74c 	.word	0x0003a74c
   214b8:	0003eb67 	.word	0x0003eb67
   214bc:	0003eb7a 	.word	0x0003eb7a
   214c0:	0003e523 	.word	0x0003e523
   214c4:	0003eb32 	.word	0x0003eb32
   214c8:	0003eb49 	.word	0x0003eb49
   214cc:	0003eba2 	.word	0x0003eba2
   214d0:	0003ebd0 	.word	0x0003ebd0

000214d4 <w_lte_lc_init>:
{
   214d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (is_initialized) {
   214d6:	4e54      	ldr	r6, [pc, #336]	; (21628 <w_lte_lc_init+0x154>)
{
   214d8:	b08f      	sub	sp, #60	; 0x3c
	if (is_initialized) {
   214da:	7830      	ldrb	r0, [r6, #0]
   214dc:	2800      	cmp	r0, #0
   214de:	f040 809f 	bne.w	21620 <w_lte_lc_init+0x14c>
	err = at_notif_register_handler(NULL, at_handler);
   214e2:	4952      	ldr	r1, [pc, #328]	; (2162c <w_lte_lc_init+0x158>)
   214e4:	f7ff fba4 	bl	20c30 <at_notif_register_handler>
	if (err) {
   214e8:	4604      	mov	r4, r0
   214ea:	b188      	cbz	r0, 21510 <w_lte_lc_init+0x3c>
		LOG_ERR("Can't register AT handler, error: %d", err);
   214ec:	2301      	movs	r3, #1
   214ee:	f04f 0000 	mov.w	r0, #0
   214f2:	4a4f      	ldr	r2, [pc, #316]	; (21630 <w_lte_lc_init+0x15c>)
   214f4:	f363 0007 	bfi	r0, r3, #0, #8
   214f8:	4b4e      	ldr	r3, [pc, #312]	; (21634 <w_lte_lc_init+0x160>)
   214fa:	494f      	ldr	r1, [pc, #316]	; (21638 <w_lte_lc_init+0x164>)
   214fc:	1a9b      	subs	r3, r3, r2
   214fe:	4622      	mov	r2, r4
   21500:	08db      	lsrs	r3, r3, #3
   21502:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("Could not set system mode, error: %d", err);
   21506:	f012 fb6c 	bl	33be2 <log_string_sync>
}
   2150a:	4620      	mov	r0, r4
   2150c:	b00f      	add	sp, #60	; 0x3c
   2150e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = lte_lc_system_mode_set(sys_mode_preferred);
   21510:	2002      	movs	r0, #2
   21512:	f7ff ff69 	bl	213e8 <lte_lc_system_mode_set>
	if (err) {
   21516:	4604      	mov	r4, r0
   21518:	b168      	cbz	r0, 21536 <w_lte_lc_init+0x62>
		LOG_ERR("Could not set system mode, error: %d", err);
   2151a:	2301      	movs	r3, #1
   2151c:	f04f 0000 	mov.w	r0, #0
   21520:	4a43      	ldr	r2, [pc, #268]	; (21630 <w_lte_lc_init+0x15c>)
   21522:	f363 0007 	bfi	r0, r3, #0, #8
   21526:	4b43      	ldr	r3, [pc, #268]	; (21634 <w_lte_lc_init+0x160>)
   21528:	4944      	ldr	r1, [pc, #272]	; (2163c <w_lte_lc_init+0x168>)
   2152a:	1a9b      	subs	r3, r3, r2
   2152c:	08db      	lsrs	r3, r3, #3
   2152e:	f363 108f 	bfi	r0, r3, #6, #10
   21532:	4622      	mov	r2, r4
   21534:	e7e7      	b.n	21506 <w_lte_lc_init+0x32>
	if (at_cmd_write(cereg_5_subscribe, NULL, 0, NULL) != 0) {
   21536:	4603      	mov	r3, r0
   21538:	4602      	mov	r2, r0
   2153a:	4601      	mov	r1, r0
   2153c:	4840      	ldr	r0, [pc, #256]	; (21640 <w_lte_lc_init+0x16c>)
   2153e:	f7ff fac5 	bl	20acc <at_cmd_write>
   21542:	b110      	cbz	r0, 2154a <w_lte_lc_init+0x76>
		return -EIO;
   21544:	f06f 0404 	mvn.w	r4, #4
   21548:	e7df      	b.n	2150a <w_lte_lc_init+0x36>
	if (at_cmd_write(cgdcont, NULL, 0, NULL) != 0) {
   2154a:	4623      	mov	r3, r4
   2154c:	4622      	mov	r2, r4
   2154e:	4621      	mov	r1, r4
   21550:	483c      	ldr	r0, [pc, #240]	; (21644 <w_lte_lc_init+0x170>)
   21552:	f7ff fabb 	bl	20acc <at_cmd_write>
   21556:	2800      	cmp	r0, #0
   21558:	d1f4      	bne.n	21544 <w_lte_lc_init+0x70>
	LOG_INF("PDP Context: %s", log_strdup(cgdcont));
   2155a:	2303      	movs	r3, #3
   2155c:	f04f 0700 	mov.w	r7, #0
   21560:	4d34      	ldr	r5, [pc, #208]	; (21634 <w_lte_lc_init+0x160>)
   21562:	f363 0707 	bfi	r7, r3, #0, #8
   21566:	4b32      	ldr	r3, [pc, #200]	; (21630 <w_lte_lc_init+0x15c>)
   21568:	4836      	ldr	r0, [pc, #216]	; (21644 <w_lte_lc_init+0x170>)
   2156a:	1aed      	subs	r5, r5, r3
   2156c:	f012 fb4b 	bl	33c06 <log_strdup>
   21570:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   21574:	f365 178f 	bfi	r7, r5, #6, #10
   21578:	4602      	mov	r2, r0
   2157a:	4933      	ldr	r1, [pc, #204]	; (21648 <w_lte_lc_init+0x174>)
   2157c:	4638      	mov	r0, r7
   2157e:	f012 fb30 	bl	33be2 <log_string_sync>
	if (at_cmd_write(cgauth, NULL, 0, NULL) != 0) {
   21582:	4623      	mov	r3, r4
   21584:	4622      	mov	r2, r4
   21586:	4621      	mov	r1, r4
   21588:	4830      	ldr	r0, [pc, #192]	; (2164c <w_lte_lc_init+0x178>)
   2158a:	f7ff fa9f 	bl	20acc <at_cmd_write>
   2158e:	4604      	mov	r4, r0
   21590:	2800      	cmp	r0, #0
   21592:	d1d7      	bne.n	21544 <w_lte_lc_init+0x70>
	LOG_INF("PDN Auth: %s", log_strdup(cgauth));
   21594:	2303      	movs	r3, #3
   21596:	f04f 0700 	mov.w	r7, #0
   2159a:	482c      	ldr	r0, [pc, #176]	; (2164c <w_lte_lc_init+0x178>)
   2159c:	f363 0707 	bfi	r7, r3, #0, #8
   215a0:	f012 fb31 	bl	33c06 <log_strdup>
   215a4:	f365 178f 	bfi	r7, r5, #6, #10
   215a8:	4602      	mov	r2, r0
   215aa:	4929      	ldr	r1, [pc, #164]	; (21650 <w_lte_lc_init+0x17c>)
   215ac:	4638      	mov	r0, r7
   215ae:	f012 fb18 	bl	33be2 <log_string_sync>
	err = at_cmd_write(cscon, NULL, 0, NULL);
   215b2:	4623      	mov	r3, r4
   215b4:	4622      	mov	r2, r4
   215b6:	4621      	mov	r1, r4
   215b8:	4826      	ldr	r0, [pc, #152]	; (21654 <w_lte_lc_init+0x180>)
   215ba:	f7ff fa87 	bl	20acc <at_cmd_write>
	if (err) {
   215be:	4603      	mov	r3, r0
   215c0:	b358      	cbz	r0, 2161a <w_lte_lc_init+0x146>
		LOG_WRN("%s failed (%d), RRC notifications are not enabled",
   215c2:	2202      	movs	r2, #2
   215c4:	f04f 0000 	mov.w	r0, #0
   215c8:	f362 0007 	bfi	r0, r2, #0, #8
   215cc:	f365 108f 	bfi	r0, r5, #6, #10
   215d0:	4a20      	ldr	r2, [pc, #128]	; (21654 <w_lte_lc_init+0x180>)
   215d2:	4921      	ldr	r1, [pc, #132]	; (21658 <w_lte_lc_init+0x184>)
   215d4:	f012 fb05 	bl	33be2 <log_string_sync>
		LOG_WRN("%s is supported in nRF9160 modem >= v1.1.0", cscon);
   215d8:	2302      	movs	r3, #2
   215da:	f04f 0000 	mov.w	r0, #0
   215de:	f363 0007 	bfi	r0, r3, #0, #8
   215e2:	f365 108f 	bfi	r0, r5, #6, #10
   215e6:	4a1b      	ldr	r2, [pc, #108]	; (21654 <w_lte_lc_init+0x180>)
   215e8:	491c      	ldr	r1, [pc, #112]	; (2165c <w_lte_lc_init+0x188>)
   215ea:	f012 fafa 	bl	33be2 <log_string_sync>
		err = at_cmd_write("AT+CGMR", buf, sizeof(buf), NULL);
   215ee:	4623      	mov	r3, r4
   215f0:	2232      	movs	r2, #50	; 0x32
   215f2:	a901      	add	r1, sp, #4
   215f4:	481a      	ldr	r0, [pc, #104]	; (21660 <w_lte_lc_init+0x18c>)
   215f6:	f7ff fa69 	bl	20acc <at_cmd_write>
		if (err == 0) {
   215fa:	b970      	cbnz	r0, 2161a <w_lte_lc_init+0x146>
			LOG_WRN("Current modem firmware version: %s",
   215fc:	2302      	movs	r3, #2
   215fe:	f04f 0700 	mov.w	r7, #0
   21602:	a801      	add	r0, sp, #4
   21604:	f363 0707 	bfi	r7, r3, #0, #8
   21608:	f012 fafd 	bl	33c06 <log_strdup>
   2160c:	f365 178f 	bfi	r7, r5, #6, #10
   21610:	4602      	mov	r2, r0
   21612:	4914      	ldr	r1, [pc, #80]	; (21664 <w_lte_lc_init+0x190>)
   21614:	4638      	mov	r0, r7
   21616:	f012 fae4 	bl	33be2 <log_string_sync>
	is_initialized = true;
   2161a:	2301      	movs	r3, #1
   2161c:	7033      	strb	r3, [r6, #0]
	return 0;
   2161e:	e774      	b.n	2150a <w_lte_lc_init+0x36>
		return -EALREADY;
   21620:	f06f 0477 	mvn.w	r4, #119	; 0x77
   21624:	e771      	b.n	2150a <w_lte_lc_init+0x36>
   21626:	bf00      	nop
   21628:	2002807d 	.word	0x2002807d
   2162c:	000128d1 	.word	0x000128d1
   21630:	00039f48 	.word	0x00039f48
   21634:	00039fa8 	.word	0x00039fa8
   21638:	0003ed30 	.word	0x0003ed30
   2163c:	0003ed55 	.word	0x0003ed55
   21640:	0003e83f 	.word	0x0003e83f
   21644:	20020460 	.word	0x20020460
   21648:	0003ed7a 	.word	0x0003ed7a
   2164c:	20020425 	.word	0x20020425
   21650:	0003ed8a 	.word	0x0003ed8a
   21654:	0003e84a 	.word	0x0003e84a
   21658:	0003ed97 	.word	0x0003ed97
   2165c:	0003edc9 	.word	0x0003edc9
   21660:	0003edf4 	.word	0x0003edf4
   21664:	0003edfc 	.word	0x0003edfc

00021668 <w_lte_lc_connect>:
	if (!is_initialized) {
   21668:	4b1e      	ldr	r3, [pc, #120]	; (216e4 <w_lte_lc_connect+0x7c>)
{
   2166a:	b510      	push	{r4, lr}
	if (!is_initialized) {
   2166c:	781b      	ldrb	r3, [r3, #0]
{
   2166e:	4604      	mov	r4, r0
	if (!is_initialized) {
   21670:	b983      	cbnz	r3, 21694 <w_lte_lc_connect+0x2c>
		LOG_ERR("The LTE link controller is not initialized");
   21672:	2301      	movs	r3, #1
   21674:	f04f 0000 	mov.w	r0, #0
   21678:	4a1b      	ldr	r2, [pc, #108]	; (216e8 <w_lte_lc_connect+0x80>)
   2167a:	f363 0007 	bfi	r0, r3, #0, #8
   2167e:	4b1b      	ldr	r3, [pc, #108]	; (216ec <w_lte_lc_connect+0x84>)
   21680:	491b      	ldr	r1, [pc, #108]	; (216f0 <w_lte_lc_connect+0x88>)
   21682:	1a9b      	subs	r3, r3, r2
   21684:	08db      	lsrs	r3, r3, #3
   21686:	f363 108f 	bfi	r0, r3, #6, #10
   2168a:	f012 faaa 	bl	33be2 <log_string_sync>
		return -EPERM;
   2168e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   21692:	bd10      	pop	{r4, pc}
	return z_impl_k_sem_init(sem, initial_count, limit);
   21694:	2201      	movs	r2, #1
   21696:	2100      	movs	r1, #0
   21698:	4816      	ldr	r0, [pc, #88]	; (216f4 <w_lte_lc_connect+0x8c>)
   2169a:	f017 fb37 	bl	38d0c <z_impl_k_sem_init>
		err = lte_lc_system_mode_set(current_network_mode);
   2169e:	2002      	movs	r0, #2
   216a0:	f7ff fea2 	bl	213e8 <lte_lc_system_mode_set>
		if (err) {
   216a4:	2800      	cmp	r0, #0
   216a6:	d1f4      	bne.n	21692 <w_lte_lc_connect+0x2a>
		err = lte_lc_normal();
   216a8:	f7ff fe6a 	bl	21380 <lte_lc_normal>
		if (err || !blocking) {
   216ac:	2800      	cmp	r0, #0
   216ae:	d1f0      	bne.n	21692 <w_lte_lc_connect+0x2a>
   216b0:	2c00      	cmp	r4, #0
   216b2:	d0ee      	beq.n	21692 <w_lte_lc_connect+0x2a>
	return z_impl_k_sem_take(sem, timeout);
   216b4:	4910      	ldr	r1, [pc, #64]	; (216f8 <w_lte_lc_connect+0x90>)
   216b6:	480f      	ldr	r0, [pc, #60]	; (216f4 <w_lte_lc_connect+0x8c>)
   216b8:	f00c fcd2 	bl	2e060 <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   216bc:	f110 0f0b 	cmn.w	r0, #11
   216c0:	d1e7      	bne.n	21692 <w_lte_lc_connect+0x2a>
			LOG_INF("Network connection attempt timed out");
   216c2:	2303      	movs	r3, #3
   216c4:	f04f 0000 	mov.w	r0, #0
   216c8:	4a07      	ldr	r2, [pc, #28]	; (216e8 <w_lte_lc_connect+0x80>)
   216ca:	f363 0007 	bfi	r0, r3, #0, #8
   216ce:	4b07      	ldr	r3, [pc, #28]	; (216ec <w_lte_lc_connect+0x84>)
   216d0:	490a      	ldr	r1, [pc, #40]	; (216fc <w_lte_lc_connect+0x94>)
   216d2:	1a9b      	subs	r3, r3, r2
   216d4:	08db      	lsrs	r3, r3, #3
   216d6:	f363 108f 	bfi	r0, r3, #6, #10
   216da:	f012 fa82 	bl	33be2 <log_string_sync>
				err = -ETIMEDOUT;
   216de:	f06f 0073 	mvn.w	r0, #115	; 0x73
   216e2:	e7d6      	b.n	21692 <w_lte_lc_connect+0x2a>
   216e4:	2002807d 	.word	0x2002807d
   216e8:	00039f48 	.word	0x00039f48
   216ec:	00039fa8 	.word	0x00039fa8
   216f0:	0003ece0 	.word	0x0003ece0
   216f4:	20022378 	.word	0x20022378
   216f8:	000927c0 	.word	0x000927c0
   216fc:	0003ed0b 	.word	0x0003ed0b

00021700 <lte_lc_system_mode_get>:

int lte_lc_system_mode_get(enum lte_lc_system_mode *mode)
{
   21700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err, bitmask = 0;
	struct at_param_list resp_list = {0};
   21704:	2400      	movs	r4, #0
	char response[AT_XSYSTEMMODE_RESPONSE_MAX_LEN] = {0};
	char response_prefix[sizeof(AT_XSYSTEMMODE_RESPONSE_PREFIX)] = {0};
   21706:	250d      	movs	r5, #13
{
   21708:	4606      	mov	r6, r0
   2170a:	b090      	sub	sp, #64	; 0x40
	char response[AT_XSYSTEMMODE_RESPONSE_MAX_LEN] = {0};
   2170c:	221e      	movs	r2, #30
   2170e:	4621      	mov	r1, r4
   21710:	a808      	add	r0, sp, #32
	struct at_param_list resp_list = {0};
   21712:	e9cd 4402 	strd	r4, r4, [sp, #8]
	char response[AT_XSYSTEMMODE_RESPONSE_MAX_LEN] = {0};
   21716:	f017 fc8e 	bl	39036 <memset>
	char response_prefix[sizeof(AT_XSYSTEMMODE_RESPONSE_PREFIX)] = {0};
   2171a:	462a      	mov	r2, r5
   2171c:	4621      	mov	r1, r4
   2171e:	a804      	add	r0, sp, #16
   21720:	f017 fc89 	bl	39036 <memset>
	size_t response_prefix_len = sizeof(response_prefix);
   21724:	9500      	str	r5, [sp, #0]

	if (mode == NULL) {
   21726:	2e00      	cmp	r6, #0
   21728:	f000 80c2 	beq.w	218b0 <lte_lc_system_mode_get+0x1b0>
		return -EINVAL;
	}

	err = at_cmd_write(AT_XSYSTEMMODE_READ, response, sizeof(response),
   2172c:	4623      	mov	r3, r4
   2172e:	221e      	movs	r2, #30
   21730:	a908      	add	r1, sp, #32
   21732:	4861      	ldr	r0, [pc, #388]	; (218b8 <lte_lc_system_mode_get+0x1b8>)
   21734:	f7ff f9ca 	bl	20acc <at_cmd_write>
			   NULL);
	if (err) {
   21738:	4604      	mov	r4, r0
   2173a:	b188      	cbz	r0, 21760 <lte_lc_system_mode_get+0x60>
		LOG_ERR("Could not send AT command");
   2173c:	2301      	movs	r3, #1
   2173e:	f04f 0000 	mov.w	r0, #0
   21742:	4a5e      	ldr	r2, [pc, #376]	; (218bc <lte_lc_system_mode_get+0x1bc>)
   21744:	f363 0007 	bfi	r0, r3, #0, #8
   21748:	4b5d      	ldr	r3, [pc, #372]	; (218c0 <lte_lc_system_mode_get+0x1c0>)
   2174a:	495e      	ldr	r1, [pc, #376]	; (218c4 <lte_lc_system_mode_get+0x1c4>)
   2174c:	1a9b      	subs	r3, r3, r2
   2174e:	08db      	lsrs	r3, r3, #3
   21750:	f363 108f 	bfi	r0, r3, #6, #10
   21754:	f012 fa45 	bl	33be2 <log_string_sync>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   21758:	4620      	mov	r0, r4
   2175a:	b010      	add	sp, #64	; 0x40
   2175c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = at_params_list_init(&resp_list, AT_XSYSTEMMODE_PARAMS_COUNT);
   21760:	2105      	movs	r1, #5
   21762:	a802      	add	r0, sp, #8
   21764:	f017 f831 	bl	387ca <at_params_list_init>
	if (err) {
   21768:	4604      	mov	r4, r0
   2176a:	b178      	cbz	r0, 2178c <lte_lc_system_mode_get+0x8c>
		LOG_ERR("Could init AT params list, error: %d", err);
   2176c:	2301      	movs	r3, #1
   2176e:	f04f 0000 	mov.w	r0, #0
   21772:	4a52      	ldr	r2, [pc, #328]	; (218bc <lte_lc_system_mode_get+0x1bc>)
   21774:	f363 0007 	bfi	r0, r3, #0, #8
   21778:	4b51      	ldr	r3, [pc, #324]	; (218c0 <lte_lc_system_mode_get+0x1c0>)
   2177a:	4953      	ldr	r1, [pc, #332]	; (218c8 <lte_lc_system_mode_get+0x1c8>)
   2177c:	1a9b      	subs	r3, r3, r2
   2177e:	08db      	lsrs	r3, r3, #3
   21780:	f363 108f 	bfi	r0, r3, #6, #10
   21784:	4622      	mov	r2, r4
   21786:	f012 fa2c 	bl	33be2 <log_string_sync>
		return err;
   2178a:	e7e5      	b.n	21758 <lte_lc_system_mode_get+0x58>
	err = at_parser_max_params_from_str(response, NULL, &resp_list,
   2178c:	4601      	mov	r1, r0
   2178e:	2305      	movs	r3, #5
   21790:	aa02      	add	r2, sp, #8
   21792:	a808      	add	r0, sp, #32
   21794:	f7ff fc16 	bl	20fc4 <at_parser_max_params_from_str>
	if (err) {
   21798:	4604      	mov	r4, r0
   2179a:	b178      	cbz	r0, 217bc <lte_lc_system_mode_get+0xbc>
		LOG_ERR("Could not parse AT response, error: %d", err);
   2179c:	2301      	movs	r3, #1
   2179e:	f04f 0000 	mov.w	r0, #0
   217a2:	4a46      	ldr	r2, [pc, #280]	; (218bc <lte_lc_system_mode_get+0x1bc>)
   217a4:	f363 0007 	bfi	r0, r3, #0, #8
   217a8:	4b45      	ldr	r3, [pc, #276]	; (218c0 <lte_lc_system_mode_get+0x1c0>)
   217aa:	4948      	ldr	r1, [pc, #288]	; (218cc <lte_lc_system_mode_get+0x1cc>)
   217ac:	1a9b      	subs	r3, r3, r2
   217ae:	4622      	mov	r2, r4
   217b0:	08db      	lsrs	r3, r3, #3
   217b2:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_ERR("Could not parse mode parameter, err: %d", err);
   217b6:	f012 fa14 	bl	33be2 <log_string_sync>
			goto clean_exit;
   217ba:	e02c      	b.n	21816 <lte_lc_system_mode_get+0x116>
	err = at_params_string_get(&resp_list,
   217bc:	4601      	mov	r1, r0
   217be:	466b      	mov	r3, sp
   217c0:	aa04      	add	r2, sp, #16
   217c2:	a802      	add	r0, sp, #8
   217c4:	f017 f8d9 	bl	3897a <at_params_string_get>
	if (err) {
   217c8:	4605      	mov	r5, r0
   217ca:	b180      	cbz	r0, 217ee <lte_lc_system_mode_get+0xee>
		LOG_ERR("Could not get response prefix, error: %d", err);
   217cc:	2301      	movs	r3, #1
   217ce:	f04f 0000 	mov.w	r0, #0
   217d2:	4a3a      	ldr	r2, [pc, #232]	; (218bc <lte_lc_system_mode_get+0x1bc>)
   217d4:	f363 0007 	bfi	r0, r3, #0, #8
   217d8:	4b39      	ldr	r3, [pc, #228]	; (218c0 <lte_lc_system_mode_get+0x1c0>)
   217da:	493d      	ldr	r1, [pc, #244]	; (218d0 <lte_lc_system_mode_get+0x1d0>)
   217dc:	1a9b      	subs	r3, r3, r2
   217de:	08db      	lsrs	r3, r3, #3
   217e0:	f363 108f 	bfi	r0, r3, #6, #10
   217e4:	462a      	mov	r2, r5
   217e6:	f012 f9fc 	bl	33be2 <log_string_sync>
		break;
   217ea:	462c      	mov	r4, r5
   217ec:	e013      	b.n	21816 <lte_lc_system_mode_get+0x116>
	if (!response_is_valid(response_prefix, response_prefix_len,
   217ee:	4a39      	ldr	r2, [pc, #228]	; (218d4 <lte_lc_system_mode_get+0x1d4>)
   217f0:	9900      	ldr	r1, [sp, #0]
   217f2:	a804      	add	r0, sp, #16
   217f4:	f017 f8ff 	bl	389f6 <response_is_valid>
   217f8:	b988      	cbnz	r0, 2181e <lte_lc_system_mode_get+0x11e>
		LOG_ERR("Invalid XSYSTEMMODE response");
   217fa:	2301      	movs	r3, #1
   217fc:	4a2f      	ldr	r2, [pc, #188]	; (218bc <lte_lc_system_mode_get+0x1bc>)
   217fe:	f363 0007 	bfi	r0, r3, #0, #8
   21802:	4b2f      	ldr	r3, [pc, #188]	; (218c0 <lte_lc_system_mode_get+0x1c0>)
   21804:	4934      	ldr	r1, [pc, #208]	; (218d8 <lte_lc_system_mode_get+0x1d8>)
   21806:	1a9b      	subs	r3, r3, r2
   21808:	08db      	lsrs	r3, r3, #3
   2180a:	f363 108f 	bfi	r0, r3, #6, #10
   2180e:	f012 f9e8 	bl	33be2 <log_string_sync>
		err = -EIO;
   21812:	f06f 0404 	mvn.w	r4, #4
	at_params_list_free(&resp_list);
   21816:	a802      	add	r0, sp, #8
   21818:	f016 ffea 	bl	387f0 <at_params_list_free>
	return err;
   2181c:	e79c      	b.n	21758 <lte_lc_system_mode_get+0x58>
	for (size_t i = 1; i < AT_XSYSTEMMODE_PARAMS_COUNT; i++) {
   2181e:	2701      	movs	r7, #1
		bitmask = param ? bitmask | BIT(i) : bitmask;
   21820:	46b8      	mov	r8, r7
		err = at_params_int_get(&resp_list, i, &param);
   21822:	aa01      	add	r2, sp, #4
   21824:	4639      	mov	r1, r7
   21826:	a802      	add	r0, sp, #8
   21828:	f017 f890 	bl	3894c <at_params_int_get>
		if (err) {
   2182c:	4604      	mov	r4, r0
   2182e:	b168      	cbz	r0, 2184c <lte_lc_system_mode_get+0x14c>
			LOG_ERR("Could not parse mode parameter, err: %d", err);
   21830:	2301      	movs	r3, #1
   21832:	f04f 0000 	mov.w	r0, #0
   21836:	4a21      	ldr	r2, [pc, #132]	; (218bc <lte_lc_system_mode_get+0x1bc>)
   21838:	f363 0007 	bfi	r0, r3, #0, #8
   2183c:	4b20      	ldr	r3, [pc, #128]	; (218c0 <lte_lc_system_mode_get+0x1c0>)
   2183e:	4927      	ldr	r1, [pc, #156]	; (218dc <lte_lc_system_mode_get+0x1dc>)
   21840:	1a9b      	subs	r3, r3, r2
   21842:	08db      	lsrs	r3, r3, #3
   21844:	f363 108f 	bfi	r0, r3, #6, #10
   21848:	4622      	mov	r2, r4
   2184a:	e7b4      	b.n	217b6 <lte_lc_system_mode_get+0xb6>
		bitmask = param ? bitmask | BIT(i) : bitmask;
   2184c:	9b01      	ldr	r3, [sp, #4]
   2184e:	b113      	cbz	r3, 21856 <lte_lc_system_mode_get+0x156>
   21850:	fa08 f307 	lsl.w	r3, r8, r7
   21854:	431d      	orrs	r5, r3
	for (size_t i = 1; i < AT_XSYSTEMMODE_PARAMS_COUNT; i++) {
   21856:	3701      	adds	r7, #1
   21858:	2f05      	cmp	r7, #5
   2185a:	d1e2      	bne.n	21822 <lte_lc_system_mode_get+0x122>
	switch (bitmask) {
   2185c:	2d0c      	cmp	r5, #12
   2185e:	d816      	bhi.n	2188e <lte_lc_system_mode_get+0x18e>
   21860:	e8df f005 	tbb	[pc, r5]
   21864:	150a1507 	.word	0x150a1507
   21868:	1515150d 	.word	0x1515150d
   2186c:	1511150f 	.word	0x1511150f
   21870:	13          	.byte	0x13
   21871:	00          	.byte	0x00
		*mode = LTE_LC_SYSTEM_MODE_NONE;
   21872:	2300      	movs	r3, #0
   21874:	7033      	strb	r3, [r6, #0]
   21876:	e7b8      	b.n	217ea <lte_lc_system_mode_get+0xea>
		*mode = LTE_LC_SYSTEM_MODE_LTEM;
   21878:	2301      	movs	r3, #1
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   2187a:	7033      	strb	r3, [r6, #0]
		break;
   2187c:	e7cb      	b.n	21816 <lte_lc_system_mode_get+0x116>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT;
   2187e:	2302      	movs	r3, #2
   21880:	e7fb      	b.n	2187a <lte_lc_system_mode_get+0x17a>
		*mode = LTE_LC_SYSTEM_MODE_GPS;
   21882:	2303      	movs	r3, #3
   21884:	e7f9      	b.n	2187a <lte_lc_system_mode_get+0x17a>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_GPS;
   21886:	2304      	movs	r3, #4
   21888:	e7f7      	b.n	2187a <lte_lc_system_mode_get+0x17a>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   2188a:	2305      	movs	r3, #5
   2188c:	e7f5      	b.n	2187a <lte_lc_system_mode_get+0x17a>
		LOG_ERR("Invalid system mode, assuming parsing error");
   2188e:	2301      	movs	r3, #1
   21890:	f04f 0000 	mov.w	r0, #0
   21894:	4a09      	ldr	r2, [pc, #36]	; (218bc <lte_lc_system_mode_get+0x1bc>)
   21896:	f363 0007 	bfi	r0, r3, #0, #8
   2189a:	4b09      	ldr	r3, [pc, #36]	; (218c0 <lte_lc_system_mode_get+0x1c0>)
   2189c:	4910      	ldr	r1, [pc, #64]	; (218e0 <lte_lc_system_mode_get+0x1e0>)
   2189e:	1a9b      	subs	r3, r3, r2
   218a0:	08db      	lsrs	r3, r3, #3
   218a2:	f363 108f 	bfi	r0, r3, #6, #10
   218a6:	f012 f99c 	bl	33be2 <log_string_sync>
		err = -EFAULT;
   218aa:	f06f 040d 	mvn.w	r4, #13
		break;
   218ae:	e7b2      	b.n	21816 <lte_lc_system_mode_get+0x116>
		return -EINVAL;
   218b0:	f06f 0415 	mvn.w	r4, #21
   218b4:	e750      	b.n	21758 <lte_lc_system_mode_get+0x58>
   218b6:	bf00      	nop
   218b8:	0003ea3e 	.word	0x0003ea3e
   218bc:	00039f48 	.word	0x00039f48
   218c0:	00039fa8 	.word	0x00039fa8
   218c4:	0003ea4e 	.word	0x0003ea4e
   218c8:	0003ea68 	.word	0x0003ea68
   218cc:	0003ea8d 	.word	0x0003ea8d
   218d0:	0003e87c 	.word	0x0003e87c
   218d4:	0003eab4 	.word	0x0003eab4
   218d8:	0003eac1 	.word	0x0003eac1
   218dc:	0003eade 	.word	0x0003eade
   218e0:	0003eb06 	.word	0x0003eb06

000218e4 <modem_info_parse>:
	}
}

static int modem_info_parse(const struct modem_info_data *modem_data,
			    const char *buf)
{
   218e4:	b510      	push	{r4, lr}
   218e6:	4604      	mov	r4, r0
	int err;
	u32_t param_index;

	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   218e8:	4a12      	ldr	r2, [pc, #72]	; (21934 <modem_info_parse+0x50>)
{
   218ea:	4608      	mov	r0, r1
	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   218ec:	7a63      	ldrb	r3, [r4, #9]
   218ee:	2100      	movs	r1, #0
   218f0:	f7ff fb68 	bl	20fc4 <at_parser_max_params_from_str>
					    modem_data->param_count);

	if (err == -EAGAIN) {
   218f4:	f110 0f0b 	cmn.w	r0, #11
   218f8:	d119      	bne.n	2192e <modem_info_parse+0x4a>
		LOG_DBG("More items exist to parse for: %s",
   218fa:	2304      	movs	r3, #4
   218fc:	f04f 0000 	mov.w	r0, #0
   21900:	4a0d      	ldr	r2, [pc, #52]	; (21938 <modem_info_parse+0x54>)
   21902:	f363 0007 	bfi	r0, r3, #0, #8
   21906:	4b0d      	ldr	r3, [pc, #52]	; (2193c <modem_info_parse+0x58>)
   21908:	490d      	ldr	r1, [pc, #52]	; (21940 <modem_info_parse+0x5c>)
   2190a:	1a9b      	subs	r3, r3, r2
   2190c:	08db      	lsrs	r3, r3, #3
   2190e:	f363 108f 	bfi	r0, r3, #6, #10
   21912:	4a0c      	ldr	r2, [pc, #48]	; (21944 <modem_info_parse+0x60>)
   21914:	6863      	ldr	r3, [r4, #4]
   21916:	f012 f964 	bl	33be2 <log_string_sync>
		err = 0;
	} else if (err != 0) {
		return err;
	}

	param_index = at_params_valid_count_get(&m_param_list);
   2191a:	4806      	ldr	r0, [pc, #24]	; (21934 <modem_info_parse+0x50>)
   2191c:	f017 f854 	bl	389c8 <at_params_valid_count_get>
	if (param_index > modem_data->param_count) {
   21920:	7a63      	ldrb	r3, [r4, #9]
		return -EAGAIN;
   21922:	4283      	cmp	r3, r0
   21924:	bf2c      	ite	cs
   21926:	2000      	movcs	r0, #0
   21928:	f06f 000a 	mvncc.w	r0, #10
   2192c:	e001      	b.n	21932 <modem_info_parse+0x4e>
	} else if (err != 0) {
   2192e:	2800      	cmp	r0, #0
   21930:	d0f3      	beq.n	2191a <modem_info_parse+0x36>
	}

	return err;
}
   21932:	bd10      	pop	{r4, pc}
   21934:	200223a0 	.word	0x200223a0
   21938:	00039f48 	.word	0x00039f48
   2193c:	00039fb0 	.word	0x00039fb0
   21940:	0003ee46 	.word	0x0003ee46
   21944:	0003ee1f 	.word	0x0003ee1f

00021948 <modem_info_short_get>:

	return len;
}

int modem_info_short_get(enum modem_info info, u16_t *buf)
{
   21948:	b530      	push	{r4, r5, lr}
   2194a:	460d      	mov	r5, r1
   2194c:	b0a1      	sub	sp, #132	; 0x84
   2194e:	4604      	mov	r4, r0
	int err;
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   21950:	2280      	movs	r2, #128	; 0x80
   21952:	2100      	movs	r1, #0
   21954:	4668      	mov	r0, sp
   21956:	f017 fb6e 	bl	39036 <memset>
	int cmd_length = 0;

	if (buf == NULL) {
   2195a:	b1dd      	cbz	r5, 21994 <modem_info_short_get+0x4c>
		return -EINVAL;
	}

	if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   2195c:	4b10      	ldr	r3, [pc, #64]	; (219a0 <modem_info_short_get+0x58>)
   2195e:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
   21962:	7aa3      	ldrb	r3, [r4, #10]
   21964:	2b03      	cmp	r3, #3
   21966:	d015      	beq.n	21994 <modem_info_short_get+0x4c>
		return -EINVAL;
	}

	err = at_cmd_write(modem_data[info]->cmd,
   21968:	2300      	movs	r3, #0
   2196a:	2280      	movs	r2, #128	; 0x80
   2196c:	4669      	mov	r1, sp
   2196e:	6820      	ldr	r0, [r4, #0]
   21970:	f7ff f8ac 	bl	20acc <at_cmd_write>
			   recv_buf,
			   CONFIG_MODEM_INFO_BUFFER_SIZE,
			   NULL);

	if (err != 0) {
   21974:	b988      	cbnz	r0, 2199a <modem_info_short_get+0x52>
		return -EIO;
	}

	err = modem_info_parse(modem_data[info], &recv_buf[cmd_length]);
   21976:	4669      	mov	r1, sp
   21978:	4620      	mov	r0, r4
   2197a:	f7ff ffb3 	bl	218e4 <modem_info_parse>

	if (err) {
   2197e:	b938      	cbnz	r0, 21990 <modem_info_short_get+0x48>
		return err;
	}

	err = at_params_short_get(&m_param_list,
   21980:	462a      	mov	r2, r5
   21982:	7a21      	ldrb	r1, [r4, #8]
   21984:	4807      	ldr	r0, [pc, #28]	; (219a4 <modem_info_short_get+0x5c>)
   21986:	f016 ffcb 	bl	38920 <at_params_short_get>

	if (err) {
		return err;
	}

	return sizeof(u16_t);
   2198a:	2800      	cmp	r0, #0
   2198c:	bf08      	it	eq
   2198e:	2002      	moveq	r0, #2
}
   21990:	b021      	add	sp, #132	; 0x84
   21992:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   21994:	f06f 0015 	mvn.w	r0, #21
   21998:	e7fa      	b.n	21990 <modem_info_short_get+0x48>
		return -EIO;
   2199a:	f06f 0004 	mvn.w	r0, #4
   2199e:	e7f7      	b.n	21990 <modem_info_short_get+0x48>
   219a0:	0003a870 	.word	0x0003a870
   219a4:	200223a0 	.word	0x200223a0

000219a8 <modem_info_string_get>:

int modem_info_string_get(enum modem_info info, char *buf,
				  const size_t buf_size)
{
   219a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   219ac:	460e      	mov	r6, r1
	/* length of each parsed IP address line */
	size_t ip_str_len = 0;
	/* tracks length of buf when parsing multiple IP addresses */
	size_t out_buf_len = 0;
	/* return value indicating length of the string written to buf */
	size_t len = 0;
   219ae:	2500      	movs	r5, #0
{
   219b0:	b0a5      	sub	sp, #148	; 0x94
   219b2:	4680      	mov	r8, r0
   219b4:	4691      	mov	r9, r2
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   219b6:	2100      	movs	r1, #0
   219b8:	2280      	movs	r2, #128	; 0x80
   219ba:	a804      	add	r0, sp, #16
   219bc:	f017 fb3b 	bl	39036 <memset>
	size_t len = 0;
   219c0:	9503      	str	r5, [sp, #12]

	if ((buf == NULL) || (buf_size == 0)) {
   219c2:	2e00      	cmp	r6, #0
   219c4:	f000 80f5 	beq.w	21bb2 <modem_info_string_get+0x20a>
   219c8:	f1b9 0f00 	cmp.w	r9, #0
   219cc:	f000 80f1 	beq.w	21bb2 <modem_info_string_get+0x20a>
		return -EINVAL;
	}

	err = at_cmd_write(modem_data[info]->cmd,
   219d0:	4b7c      	ldr	r3, [pc, #496]	; (21bc4 <modem_info_string_get+0x21c>)
   219d2:	2280      	movs	r2, #128	; 0x80
   219d4:	f853 a028 	ldr.w	sl, [r3, r8, lsl #2]
   219d8:	a904      	add	r1, sp, #16
   219da:	462b      	mov	r3, r5
   219dc:	f8da 0000 	ldr.w	r0, [sl]
   219e0:	f7ff f874 	bl	20acc <at_cmd_write>
			  NULL);

	/* modem_info does not yet support array objects, so here we handle
	 * the supported bands independently as a string
	 */
	if (info == MODEM_INFO_SUP_BAND) {
   219e4:	f1b8 0f02 	cmp.w	r8, #2
	err = at_cmd_write(modem_data[info]->cmd,
   219e8:	4604      	mov	r4, r0
	if (info == MODEM_INFO_SUP_BAND) {
   219ea:	d10c      	bne.n	21a06 <modem_info_string_get+0x5e>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   219ec:	f10d 0119 	add.w	r1, sp, #25
   219f0:	4630      	mov	r0, r6
   219f2:	f017 fc74 	bl	392de <strcpy>
		strcpy(buf, recv_buf + sizeof("%XCBAND: ") - 1);
		return strlen(buf);
   219f6:	4630      	mov	r0, r6
   219f8:	f7f0 fb42 	bl	12080 <strlen>
   219fc:	4683      	mov	fp, r0
			len = out_buf_len;
		}
	}

	return len <= 0 ? -ENOTSUP : len;
}
   219fe:	4658      	mov	r0, fp
   21a00:	b025      	add	sp, #148	; 0x94
   21a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (info == MODEM_INFO_IP_ADDRESS) {
   21a06:	f1b8 0f09 	cmp.w	r8, #9
   21a0a:	d046      	beq.n	21a9a <modem_info_string_get+0xf2>
	if (err != 0) {
   21a0c:	2c00      	cmp	r4, #0
   21a0e:	f040 80d3 	bne.w	21bb8 <modem_info_string_get+0x210>
	size_t ip_str_len = 0;
   21a12:	4627      	mov	r7, r4
	size_t cmd_rsp_idx = 0;
   21a14:	9401      	str	r4, [sp, #4]
	if (info == MODEM_INFO_IP_ADDRESS) {
   21a16:	9b01      	ldr	r3, [sp, #4]
   21a18:	aa04      	add	r2, sp, #16
   21a1a:	f1b8 0f09 	cmp.w	r8, #9
   21a1e:	eb02 0b03 	add.w	fp, r2, r3
   21a22:	d10e      	bne.n	21a42 <modem_info_string_get+0x9a>
		ip_str_end = strstr(&recv_buf[cmd_rsp_idx], AT_CMD_RSP_DELIM);
   21a24:	4968      	ldr	r1, [pc, #416]	; (21bc8 <modem_info_string_get+0x220>)
   21a26:	4658      	mov	r0, fp
   21a28:	f017 fc73 	bl	39312 <strstr>
		if (ip_str_end == NULL) {
   21a2c:	2800      	cmp	r0, #0
   21a2e:	f000 80c6 	beq.w	21bbe <modem_info_string_get+0x216>
		recv_buf[++ip_str_len] = 0;
   21a32:	2100      	movs	r1, #0
		ip_str_len = ip_str_end - &recv_buf[cmd_rsp_idx];
   21a34:	eba0 000b 	sub.w	r0, r0, fp
		recv_buf[++ip_str_len] = 0;
   21a38:	1c47      	adds	r7, r0, #1
   21a3a:	ab24      	add	r3, sp, #144	; 0x90
   21a3c:	19da      	adds	r2, r3, r7
   21a3e:	f802 1c80 	strb.w	r1, [r2, #-128]
	err = modem_info_parse(modem_data[info], &recv_buf[cmd_rsp_idx]);
   21a42:	4659      	mov	r1, fp
   21a44:	4650      	mov	r0, sl
   21a46:	f7ff ff4d 	bl	218e4 <modem_info_parse>
	if (err) {
   21a4a:	4683      	mov	fp, r0
   21a4c:	b340      	cbz	r0, 21aa0 <modem_info_string_get+0xf8>
		LOG_ERR("Unable to parse data: %d", err);
   21a4e:	2201      	movs	r2, #1
   21a50:	f04f 0000 	mov.w	r0, #0
   21a54:	495d      	ldr	r1, [pc, #372]	; (21bcc <modem_info_string_get+0x224>)
   21a56:	f362 0007 	bfi	r0, r2, #0, #8
   21a5a:	4a5d      	ldr	r2, [pc, #372]	; (21bd0 <modem_info_string_get+0x228>)
   21a5c:	1a52      	subs	r2, r2, r1
   21a5e:	08d2      	lsrs	r2, r2, #3
   21a60:	f362 108f 	bfi	r0, r2, #6, #10
   21a64:	465a      	mov	r2, fp
   21a66:	495b      	ldr	r1, [pc, #364]	; (21bd4 <modem_info_string_get+0x22c>)
			LOG_ERR("Unable to obtain short: %d", err);
   21a68:	f012 f8bb 	bl	33be2 <log_string_sync>
			return err;
   21a6c:	e7c7      	b.n	219fe <modem_info_string_get+0x56>
			++ip_str_end;
   21a6e:	3001      	adds	r0, #1
			++ip_cnt;
   21a70:	3501      	adds	r5, #1
		while ((ip_str_end = strstr(ip_str_end, AT_CMD_RSP_DELIM))
   21a72:	4639      	mov	r1, r7
   21a74:	f017 fc4d 	bl	39312 <strstr>
   21a78:	2800      	cmp	r0, #0
   21a7a:	d1f8      	bne.n	21a6e <modem_info_string_get+0xc6>
		LOG_DBG("Device contains %d IP addresses", ip_cnt);
   21a7c:	2304      	movs	r3, #4
   21a7e:	4a53      	ldr	r2, [pc, #332]	; (21bcc <modem_info_string_get+0x224>)
   21a80:	f363 0007 	bfi	r0, r3, #0, #8
   21a84:	4b52      	ldr	r3, [pc, #328]	; (21bd0 <modem_info_string_get+0x228>)
   21a86:	4954      	ldr	r1, [pc, #336]	; (21bd8 <modem_info_string_get+0x230>)
   21a88:	1a9b      	subs	r3, r3, r2
   21a8a:	08db      	lsrs	r3, r3, #3
   21a8c:	f363 108f 	bfi	r0, r3, #6, #10
   21a90:	4a52      	ldr	r2, [pc, #328]	; (21bdc <modem_info_string_get+0x234>)
   21a92:	462b      	mov	r3, r5
   21a94:	f012 f8a5 	bl	33be2 <log_string_sync>
   21a98:	e7b8      	b.n	21a0c <modem_info_string_get+0x64>
	char *ip_str_end = recv_buf;
   21a9a:	a804      	add	r0, sp, #16
		while ((ip_str_end = strstr(ip_str_end, AT_CMD_RSP_DELIM))
   21a9c:	4f4a      	ldr	r7, [pc, #296]	; (21bc8 <modem_info_string_get+0x220>)
   21a9e:	e7e8      	b.n	21a72 <modem_info_string_get+0xca>
	if (modem_data[info]->data_type == AT_PARAM_TYPE_NUM_SHORT) {
   21aa0:	f89a 300a 	ldrb.w	r3, [sl, #10]
   21aa4:	2b01      	cmp	r3, #1
   21aa6:	d122      	bne.n	21aee <modem_info_string_get+0x146>
		err = at_params_short_get(&m_param_list,
   21aa8:	f10d 020a 	add.w	r2, sp, #10
   21aac:	f89a 1008 	ldrb.w	r1, [sl, #8]
   21ab0:	484b      	ldr	r0, [pc, #300]	; (21be0 <modem_info_string_get+0x238>)
   21ab2:	f016 ff35 	bl	38920 <at_params_short_get>
		if (err) {
   21ab6:	4683      	mov	fp, r0
   21ab8:	b168      	cbz	r0, 21ad6 <modem_info_string_get+0x12e>
			LOG_ERR("Unable to obtain short: %d", err);
   21aba:	2201      	movs	r2, #1
   21abc:	f04f 0000 	mov.w	r0, #0
   21ac0:	4942      	ldr	r1, [pc, #264]	; (21bcc <modem_info_string_get+0x224>)
   21ac2:	f362 0007 	bfi	r0, r2, #0, #8
   21ac6:	4a42      	ldr	r2, [pc, #264]	; (21bd0 <modem_info_string_get+0x228>)
   21ac8:	1a52      	subs	r2, r2, r1
   21aca:	08d2      	lsrs	r2, r2, #3
   21acc:	f362 108f 	bfi	r0, r2, #6, #10
   21ad0:	4944      	ldr	r1, [pc, #272]	; (21be4 <modem_info_string_get+0x23c>)
   21ad2:	465a      	mov	r2, fp
   21ad4:	e7c8      	b.n	21a68 <modem_info_string_get+0xc0>
		err = snprintf(buf, buf_size, "%d", param_value);
   21ad6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   21ada:	4a43      	ldr	r2, [pc, #268]	; (21be8 <modem_info_string_get+0x240>)
   21adc:	4649      	mov	r1, r9
   21ade:	4630      	mov	r0, r6
   21ae0:	f010 f8c4 	bl	31c6c <sniprintf>
		if ((err <= 0) || (err > buf_size)) {
   21ae4:	4548      	cmp	r0, r9
   21ae6:	d916      	bls.n	21b16 <modem_info_string_get+0x16e>
			return -EMSGSIZE;
   21ae8:	f06f 0b79 	mvn.w	fp, #121	; 0x79
   21aec:	e787      	b.n	219fe <modem_info_string_get+0x56>
	} else if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   21aee:	2b03      	cmp	r3, #3
   21af0:	d111      	bne.n	21b16 <modem_info_string_get+0x16e>
		len = buf_size - out_buf_len;
   21af2:	eba9 0304 	sub.w	r3, r9, r4
   21af6:	9303      	str	r3, [sp, #12]
		err = at_params_string_get(&m_param_list,
   21af8:	1932      	adds	r2, r6, r4
   21afa:	ab03      	add	r3, sp, #12
   21afc:	f89a 1008 	ldrb.w	r1, [sl, #8]
   21b00:	4837      	ldr	r0, [pc, #220]	; (21be0 <modem_info_string_get+0x238>)
   21b02:	f016 ff3a 	bl	3897a <at_params_string_get>
		if (err != 0) {
   21b06:	4683      	mov	fp, r0
   21b08:	2800      	cmp	r0, #0
   21b0a:	f47f af78 	bne.w	219fe <modem_info_string_get+0x56>
		} else if (len >= buf_size) {
   21b0e:	9a03      	ldr	r2, [sp, #12]
   21b10:	454a      	cmp	r2, r9
   21b12:	d2e9      	bcs.n	21ae8 <modem_info_string_get+0x140>
		buf[len] = 0;
   21b14:	54b0      	strb	r0, [r6, r2]
	if (info == MODEM_INFO_ICCID) {
   21b16:	f1b8 0f0e 	cmp.w	r8, #14
   21b1a:	d122      	bne.n	21b62 <modem_info_string_get+0x1ba>
   21b1c:	4634      	mov	r4, r6
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   21b1e:	4630      	mov	r0, r6
   21b20:	f7f0 faae 	bl	12080 <strlen>
   21b24:	1ca3      	adds	r3, r4, #2
   21b26:	1ba4      	subs	r4, r4, r6
   21b28:	42a0      	cmp	r0, r4
   21b2a:	d810      	bhi.n	21b4e <modem_info_string_get+0x1a6>
		if ((len == ICCID_LEN) &&
   21b2c:	9b03      	ldr	r3, [sp, #12]
   21b2e:	2b14      	cmp	r3, #20
   21b30:	d106      	bne.n	21b40 <modem_info_string_get+0x198>
   21b32:	7cf3      	ldrb	r3, [r6, #19]
   21b34:	2b46      	cmp	r3, #70	; 0x46
   21b36:	d103      	bne.n	21b40 <modem_info_string_get+0x198>
			buf[len - 1] = '\0';
   21b38:	2300      	movs	r3, #0
   21b3a:	74f3      	strb	r3, [r6, #19]
			--len;
   21b3c:	2313      	movs	r3, #19
   21b3e:	9303      	str	r3, [sp, #12]
	return len <= 0 ? -ENOTSUP : len;
   21b40:	9b03      	ldr	r3, [sp, #12]
   21b42:	2b00      	cmp	r3, #0
   21b44:	bf14      	ite	ne
   21b46:	469b      	movne	fp, r3
   21b48:	f06f 0b85 	mvneq.w	fp, #133	; 0x85
   21b4c:	e757      	b.n	219fe <modem_info_string_get+0x56>
		current_char = buf[i];
   21b4e:	f813 2c02 	ldrb.w	r2, [r3, #-2]
		buf[i] = next_char;
   21b52:	f813 1c01 	ldrb.w	r1, [r3, #-1]
		buf[i + 1] = current_char;
   21b56:	461c      	mov	r4, r3
		buf[i] = next_char;
   21b58:	f803 1c02 	strb.w	r1, [r3, #-2]
		buf[i + 1] = current_char;
   21b5c:	f803 2c01 	strb.w	r2, [r3, #-1]
   21b60:	e7dd      	b.n	21b1e <modem_info_string_get+0x176>
	if ((info == MODEM_INFO_IP_ADDRESS) && (ip_cnt > 0)) {
   21b62:	f1b8 0f09 	cmp.w	r8, #9
   21b66:	d1eb      	bne.n	21b40 <modem_info_string_get+0x198>
   21b68:	2d00      	cmp	r5, #0
   21b6a:	dde9      	ble.n	21b40 <modem_info_string_get+0x198>
		char *ip_v6_str = strstr(&buf[out_buf_len], " ");
   21b6c:	eb06 0b04 	add.w	fp, r6, r4
   21b70:	491e      	ldr	r1, [pc, #120]	; (21bec <modem_info_string_get+0x244>)
   21b72:	4658      	mov	r0, fp
   21b74:	f017 fbcd 	bl	39312 <strstr>
		if (ip_v6_str) {
   21b78:	b128      	cbz	r0, 21b86 <modem_info_string_get+0x1de>
			*ip_v6_str = 0;
   21b7a:	2200      	movs	r2, #0
   21b7c:	7002      	strb	r2, [r0, #0]
			len = strlen(&buf[out_buf_len]);
   21b7e:	4658      	mov	r0, fp
   21b80:	f7f0 fa7e 	bl	12080 <strlen>
   21b84:	9003      	str	r0, [sp, #12]
		out_buf_len += len;
   21b86:	9b03      	ldr	r3, [sp, #12]
		if (ip_cnt > 1) {
   21b88:	2d01      	cmp	r5, #1
		out_buf_len += len;
   21b8a:	441c      	add	r4, r3
		if (ip_cnt > 1) {
   21b8c:	d00c      	beq.n	21ba8 <modem_info_string_get+0x200>
			err = snprintf(&buf[out_buf_len],
   21b8e:	eba9 0b04 	sub.w	fp, r9, r4
   21b92:	4a17      	ldr	r2, [pc, #92]	; (21bf0 <modem_info_string_get+0x248>)
   21b94:	4659      	mov	r1, fp
   21b96:	1930      	adds	r0, r6, r4
   21b98:	f010 f868 	bl	31c6c <sniprintf>
			if ((err <= 0) || (err > (buf_size - out_buf_len))) {
   21b9c:	f1bb 0f01 	cmp.w	fp, #1
   21ba0:	d9a2      	bls.n	21ae8 <modem_info_string_get+0x140>
			cmd_rsp_idx = ip_str_len + 1;
   21ba2:	1c7b      	adds	r3, r7, #1
			out_buf_len += IP_ADDR_SEPARATOR_LEN;
   21ba4:	3402      	adds	r4, #2
			cmd_rsp_idx = ip_str_len + 1;
   21ba6:	9301      	str	r3, [sp, #4]
		if (--ip_cnt) {
   21ba8:	3d01      	subs	r5, #1
   21baa:	f47f af34 	bne.w	21a16 <modem_info_string_get+0x6e>
			len = out_buf_len;
   21bae:	9403      	str	r4, [sp, #12]
   21bb0:	e7c6      	b.n	21b40 <modem_info_string_get+0x198>
		return -EINVAL;
   21bb2:	f06f 0b15 	mvn.w	fp, #21
   21bb6:	e722      	b.n	219fe <modem_info_string_get+0x56>
		return -EIO;
   21bb8:	f06f 0b04 	mvn.w	fp, #4
   21bbc:	e71f      	b.n	219fe <modem_info_string_get+0x56>
			return -EFAULT;
   21bbe:	f06f 0b0d 	mvn.w	fp, #13
   21bc2:	e71c      	b.n	219fe <modem_info_string_get+0x56>
   21bc4:	0003a870 	.word	0x0003a870
   21bc8:	0003f566 	.word	0x0003f566
   21bcc:	00039f48 	.word	0x00039f48
   21bd0:	00039fb0 	.word	0x00039fb0
   21bd4:	0003ee90 	.word	0x0003ee90
   21bd8:	0003ee6c 	.word	0x0003ee6c
   21bdc:	0003ee30 	.word	0x0003ee30
   21be0:	200223a0 	.word	0x200223a0
   21be4:	0003eea9 	.word	0x0003eea9
   21be8:	0003c655 	.word	0x0003c655
   21bec:	0003ca45 	.word	0x0003ca45
   21bf0:	0003eec4 	.word	0x0003eec4

00021bf4 <modem_info_init>:
}

int modem_info_init(void)
{
	/* Init at_cmd_parser storage module */
	int err = at_params_list_init(&m_param_list,
   21bf4:	210a      	movs	r1, #10
   21bf6:	4801      	ldr	r0, [pc, #4]	; (21bfc <modem_info_init+0x8>)
   21bf8:	f016 bde7 	b.w	387ca <at_params_list_init>
   21bfc:	200223a0 	.word	0x200223a0

00021c00 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   21c00:	b508      	push	{r3, lr}
		arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
   21c02:	f7f7 f94f 	bl	18ea4 <z_impl_log_panic>
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   21c06:	2301      	movs	r3, #1
   21c08:	f04f 0000 	mov.w	r0, #0
   21c0c:	4a06      	ldr	r2, [pc, #24]	; (21c28 <k_sys_fatal_error_handler+0x28>)
   21c0e:	f363 0007 	bfi	r0, r3, #0, #8
   21c12:	4b06      	ldr	r3, [pc, #24]	; (21c2c <k_sys_fatal_error_handler+0x2c>)
   21c14:	4906      	ldr	r1, [pc, #24]	; (21c30 <k_sys_fatal_error_handler+0x30>)
   21c16:	1a9b      	subs	r3, r3, r2
   21c18:	08db      	lsrs	r3, r3, #3
   21c1a:	f363 108f 	bfi	r0, r3, #6, #10
   21c1e:	f011 ffe0 	bl	33be2 <log_string_sync>
	sys_arch_reboot(0);
   21c22:	2000      	movs	r0, #0
   21c24:	f7f9 fc78 	bl	1b518 <sys_arch_reboot>

	CODE_UNREACHABLE;
   21c28:	00039f48 	.word	0x00039f48
   21c2c:	00039f80 	.word	0x00039f80
   21c30:	0003f021 	.word	0x0003f021

00021c34 <write_at_cmd_with_cme_enabled>:
	return err;
}

static int write_at_cmd_with_cme_enabled(char *cmd, char *buf, size_t buf_len,
					 enum at_cmd_state *state)
{
   21c34:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   21c38:	4605      	mov	r5, r0
   21c3a:	460e      	mov	r6, r1
   21c3c:	4617      	mov	r7, r2
   21c3e:	4698      	mov	r8, r3
	err = at_cmd_write("AT+CMEE?", response, sizeof(response), NULL);
   21c40:	220b      	movs	r2, #11
   21c42:	2300      	movs	r3, #0
   21c44:	a901      	add	r1, sp, #4
   21c46:	4814      	ldr	r0, [pc, #80]	; (21c98 <write_at_cmd_with_cme_enabled+0x64>)
   21c48:	f7fe ff40 	bl	20acc <at_cmd_write>
	if (err) {
   21c4c:	1e04      	subs	r4, r0, #0
   21c4e:	d11f      	bne.n	21c90 <write_at_cmd_with_cme_enabled+0x5c>
	return (response[CMEE_STATUS] == '1');
   21c50:	f89d 300b 	ldrb.w	r3, [sp, #11]

	if (cmee_was_active < 0) {
		return -EFAULT;
	}

	if (!cmee_was_active) {
   21c54:	2b31      	cmp	r3, #49	; 0x31
   21c56:	d00b      	beq.n	21c70 <write_at_cmd_with_cme_enabled+0x3c>
	return at_cmd_write("AT+CMEE=1", NULL, 0, NULL);
   21c58:	4623      	mov	r3, r4
   21c5a:	4622      	mov	r2, r4
   21c5c:	4621      	mov	r1, r4
   21c5e:	480f      	ldr	r0, [pc, #60]	; (21c9c <write_at_cmd_with_cme_enabled+0x68>)
   21c60:	f7fe ff34 	bl	20acc <at_cmd_write>
		err = cmee_enable();
		if (err) {
   21c64:	4604      	mov	r4, r0
   21c66:	b120      	cbz	r0, 21c72 <write_at_cmd_with_cme_enabled+0x3e>
			return err;
		}
	}

	return err;
}
   21c68:	4620      	mov	r0, r4
   21c6a:	b004      	add	sp, #16
   21c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (response[CMEE_STATUS] == '1');
   21c70:	2401      	movs	r4, #1
	err = at_cmd_write(cmd, buf, buf_len, state);
   21c72:	4643      	mov	r3, r8
   21c74:	463a      	mov	r2, r7
   21c76:	4631      	mov	r1, r6
   21c78:	4628      	mov	r0, r5
   21c7a:	f7fe ff27 	bl	20acc <at_cmd_write>
	if (!cmee_was_active) {
   21c7e:	b92c      	cbnz	r4, 21c8c <write_at_cmd_with_cme_enabled+0x58>
	return at_cmd_write("AT+CMEE=0", NULL, 0, NULL);
   21c80:	4623      	mov	r3, r4
   21c82:	4622      	mov	r2, r4
   21c84:	4621      	mov	r1, r4
   21c86:	4806      	ldr	r0, [pc, #24]	; (21ca0 <write_at_cmd_with_cme_enabled+0x6c>)
   21c88:	f7fe ff20 	bl	20acc <at_cmd_write>
	err = at_cmd_write(cmd, buf, buf_len, state);
   21c8c:	4604      	mov	r4, r0
   21c8e:	e7eb      	b.n	21c68 <write_at_cmd_with_cme_enabled+0x34>
	if (cmee_was_active < 0) {
   21c90:	daef      	bge.n	21c72 <write_at_cmd_with_cme_enabled+0x3e>
		return -EFAULT;
   21c92:	f06f 040d 	mvn.w	r4, #13
   21c96:	e7e7      	b.n	21c68 <write_at_cmd_with_cme_enabled+0x34>
   21c98:	0003f0d0 	.word	0x0003f0d0
   21c9c:	0003f0d9 	.word	0x0003f0d9
   21ca0:	0003f0e3 	.word	0x0003f0e3

00021ca4 <translate_error>:
{
   21ca4:	b510      	push	{r4, lr}
	if ((err > 0) && (state == AT_CMD_ERROR_CME)) {
   21ca6:	1e04      	subs	r4, r0, #0
   21ca8:	dd0d      	ble.n	21cc6 <translate_error+0x22>
   21caa:	2903      	cmp	r1, #3
   21cac:	d10b      	bne.n	21cc6 <translate_error+0x22>
		switch (err) {
   21cae:	f46f 7300 	mvn.w	r3, #512	; 0x200
   21cb2:	18e3      	adds	r3, r4, r3
   21cb4:	2b05      	cmp	r3, #5
   21cb6:	d80e      	bhi.n	21cd6 <translate_error+0x32>
   21cb8:	e8df f003 	tbb	[pc, r3]
   21cbc:	0d07031d 	.word	0x0d07031d
   21cc0:	0a0d      	.short	0x0a0d
			return -EPERM;
   21cc2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   21cc6:	4620      	mov	r0, r4
   21cc8:	bd10      	pop	{r4, pc}
			return -ENOMEM;
   21cca:	f06f 040b 	mvn.w	r4, #11
   21cce:	e7fa      	b.n	21cc6 <translate_error+0x22>
			return -EACCES;
   21cd0:	f06f 040c 	mvn.w	r4, #12
   21cd4:	e7f7      	b.n	21cc6 <translate_error+0x22>
			__ASSERT(false, "Untranslated CME error %d!", err);
   21cd6:	234a      	movs	r3, #74	; 0x4a
   21cd8:	4a08      	ldr	r2, [pc, #32]	; (21cfc <translate_error+0x58>)
   21cda:	4909      	ldr	r1, [pc, #36]	; (21d00 <translate_error+0x5c>)
   21cdc:	4809      	ldr	r0, [pc, #36]	; (21d04 <translate_error+0x60>)
   21cde:	f011 fc68 	bl	335b2 <printk>
   21ce2:	4621      	mov	r1, r4
   21ce4:	4808      	ldr	r0, [pc, #32]	; (21d08 <translate_error+0x64>)
   21ce6:	f011 fc64 	bl	335b2 <printk>
   21cea:	214a      	movs	r1, #74	; 0x4a
   21cec:	4803      	ldr	r0, [pc, #12]	; (21cfc <translate_error+0x58>)
   21cee:	f011 ff61 	bl	33bb4 <assert_post_action>
   21cf2:	4c06      	ldr	r4, [pc, #24]	; (21d0c <translate_error+0x68>)
   21cf4:	e7e7      	b.n	21cc6 <translate_error+0x22>
			return -ENOENT;
   21cf6:	f06f 0401 	mvn.w	r4, #1
   21cfa:	e7e4      	b.n	21cc6 <translate_error+0x22>
   21cfc:	0003f07f 	.word	0x0003f07f
   21d00:	0003fd2f 	.word	0x0003fd2f
   21d04:	0003b773 	.word	0x0003b773
   21d08:	0003f0b3 	.word	0x0003f0b3
   21d0c:	baadbaad 	.word	0xbaadbaad

00021d10 <modem_key_mgmt_write>:
}

int modem_key_mgmt_write(nrf_sec_tag_t sec_tag,
			 enum modem_key_mgnt_cred_type cred_type,
			 const void *buf, size_t len)
{
   21d10:	b5f0      	push	{r4, r5, r6, r7, lr}
   21d12:	461d      	mov	r5, r3
   21d14:	b085      	sub	sp, #20
	int err;
	int written;
	enum at_cmd_state state;

	if (buf == NULL || len == 0) {
   21d16:	4617      	mov	r7, r2
   21d18:	b322      	cbz	r2, 21d64 <modem_key_mgmt_write+0x54>
   21d1a:	b31b      	cbz	r3, 21d64 <modem_key_mgmt_write+0x54>
		return -EINVAL;
	}

	written = snprintf(scratch_buf, sizeof(scratch_buf), "%s,%d,%d,\"",
   21d1c:	4c14      	ldr	r4, [pc, #80]	; (21d70 <modem_key_mgmt_write+0x60>)
   21d1e:	e9cd 0100 	strd	r0, r1, [sp]
   21d22:	4b14      	ldr	r3, [pc, #80]	; (21d74 <modem_key_mgmt_write+0x64>)
   21d24:	4a14      	ldr	r2, [pc, #80]	; (21d78 <modem_key_mgmt_write+0x68>)
   21d26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   21d2a:	4620      	mov	r0, r4
   21d2c:	f00f ff9e 	bl	31c6c <sniprintf>

	if (written < 0 || written >= sizeof(scratch_buf)) {
		return -ENOBUFS;
	}

	if (written + len + sizeof("\"") > sizeof(scratch_buf)) {
   21d30:	1946      	adds	r6, r0, r5
   21d32:	1cb3      	adds	r3, r6, #2
   21d34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   21d38:	d817      	bhi.n	21d6a <modem_key_mgmt_write+0x5a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   21d3a:	462a      	mov	r2, r5
   21d3c:	4639      	mov	r1, r7
   21d3e:	4420      	add	r0, r4
   21d40:	f017 f93f 	bl	38fc2 <memcpy>
	memcpy(&scratch_buf[written], buf, len);
	written += len;

	memcpy(&scratch_buf[written], "\"", sizeof("\""));

	err = write_at_cmd_with_cme_enabled(scratch_buf, NULL, 0, &state);
   21d44:	2200      	movs	r2, #0
   21d46:	4b0d      	ldr	r3, [pc, #52]	; (21d7c <modem_key_mgmt_write+0x6c>)
   21d48:	4611      	mov	r1, r2
   21d4a:	881b      	ldrh	r3, [r3, #0]
   21d4c:	4620      	mov	r0, r4
   21d4e:	5333      	strh	r3, [r6, r4]
   21d50:	f10d 030f 	add.w	r3, sp, #15
   21d54:	f7ff ff6e 	bl	21c34 <write_at_cmd_with_cme_enabled>

	return translate_error(err, state);
   21d58:	f89d 100f 	ldrb.w	r1, [sp, #15]
   21d5c:	f7ff ffa2 	bl	21ca4 <translate_error>
}
   21d60:	b005      	add	sp, #20
   21d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
   21d64:	f06f 0015 	mvn.w	r0, #21
   21d68:	e7fa      	b.n	21d60 <modem_key_mgmt_write+0x50>
		return -ENOBUFS;
   21d6a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   21d6e:	e7f7      	b.n	21d60 <modem_key_mgmt_write+0x50>
   21d70:	2002807f 	.word	0x2002807f
   21d74:	0003f05b 	.word	0x0003f05b
   21d78:	0003f065 	.word	0x0003f065
   21d7c:	0003c50b 	.word	0x0003c50b

00021d80 <modem_key_mgmt_delete>:
	return 0;
}

int modem_key_mgmt_delete(nrf_sec_tag_t sec_tag,
			  enum modem_key_mgnt_cred_type cred_type)
{
   21d80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int err;
	int written;
	enum at_cmd_state state;

	written = snprintf(scratch_buf, sizeof(scratch_buf), "%s,%d,%d",
   21d82:	4c0b      	ldr	r4, [pc, #44]	; (21db0 <modem_key_mgmt_delete+0x30>)
   21d84:	e9cd 0100 	strd	r0, r1, [sp]
   21d88:	4b0a      	ldr	r3, [pc, #40]	; (21db4 <modem_key_mgmt_delete+0x34>)
   21d8a:	4a0b      	ldr	r2, [pc, #44]	; (21db8 <modem_key_mgmt_delete+0x38>)
   21d8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   21d90:	4620      	mov	r0, r4
   21d92:	f00f ff6b 	bl	31c6c <sniprintf>

	if (written < 0 || written >= sizeof(scratch_buf)) {
		return -ENOBUFS;
	}

	err = write_at_cmd_with_cme_enabled(scratch_buf, NULL, 0, &state);
   21d96:	2200      	movs	r2, #0
   21d98:	f10d 030f 	add.w	r3, sp, #15
   21d9c:	4611      	mov	r1, r2
   21d9e:	4620      	mov	r0, r4
   21da0:	f7ff ff48 	bl	21c34 <write_at_cmd_with_cme_enabled>

	return translate_error(err, state);
   21da4:	f89d 100f 	ldrb.w	r1, [sp, #15]
   21da8:	f7ff ff7c 	bl	21ca4 <translate_error>
}
   21dac:	b004      	add	sp, #16
   21dae:	bd10      	pop	{r4, pc}
   21db0:	2002807f 	.word	0x2002807f
   21db4:	0003f051 	.word	0x0003f051
   21db8:	0003f048 	.word	0x0003f048

00021dbc <new_date_time_get>:

	return 0;
}

static void new_date_time_get(void)
{
   21dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int err;

	while (true) {
		k_sem_take(&time_fetch_sem, K_FOREVER);

		LOG_DBG("Updating date time UTC...");
   21dc0:	4ba9      	ldr	r3, [pc, #676]	; (22068 <new_date_time_get+0x2ac>)
   21dc2:	4caa      	ldr	r4, [pc, #680]	; (2206c <new_date_time_get+0x2b0>)
   21dc4:	4daa      	ldr	r5, [pc, #680]	; (22070 <new_date_time_get+0x2b4>)
   21dc6:	1ae4      	subs	r4, r4, r3
{
   21dc8:	b0ab      	sub	sp, #172	; 0xac
		LOG_DBG("Updating date time UTC...");
   21dca:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   21dce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   21dd2:	48a8      	ldr	r0, [pc, #672]	; (22074 <new_date_time_get+0x2b8>)
   21dd4:	f00c f944 	bl	2e060 <z_impl_k_sem_take>
   21dd8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   21ddc:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
   21de0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   21de4:	f043 0304 	orr.w	r3, r3, #4
   21de8:	f363 0207 	bfi	r2, r3, #0, #8
   21dec:	b293      	uxth	r3, r2
   21dee:	f364 138f 	bfi	r3, r4, #6, #10
	if (time_aux.last_date_time_update == 0 ||
   21df2:	4ea1      	ldr	r6, [pc, #644]	; (22078 <new_date_time_get+0x2bc>)
		LOG_DBG("Updating date time UTC...");
   21df4:	b298      	uxth	r0, r3
   21df6:	462a      	mov	r2, r5
   21df8:	49a0      	ldr	r1, [pc, #640]	; (2207c <new_date_time_get+0x2c0>)
   21dfa:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
   21dfe:	f011 fef0 	bl	33be2 <log_string_sync>
	if (time_aux.last_date_time_update == 0 ||
   21e02:	68b3      	ldr	r3, [r6, #8]
   21e04:	b123      	cbz	r3, 21e10 <new_date_time_get+0x54>
   21e06:	e9d6 2300 	ldrd	r2, r3, [r6]
   21e0a:	4313      	orrs	r3, r2
   21e0c:	f040 80f6 	bne.w	21ffc <new_date_time_get+0x240>
		LOG_DBG("Date time never set");
   21e10:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   21e14:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
   21e18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   21e1c:	f043 0304 	orr.w	r3, r3, #4
   21e20:	f363 0207 	bfi	r2, r3, #0, #8
   21e24:	b293      	uxth	r3, r2
   21e26:	f364 138f 	bfi	r3, r4, #6, #10
   21e2a:	4a95      	ldr	r2, [pc, #596]	; (22080 <new_date_time_get+0x2c4>)
   21e2c:	4995      	ldr	r1, [pc, #596]	; (22084 <new_date_time_get+0x2c8>)
   21e2e:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		LOG_DBG("Current date time too old");
   21e32:	b298      	uxth	r0, r3
   21e34:	f011 fed5 	bl	33be2 <log_string_sync>
			LOG_DBG("Time successfully obtained");
			initial_valid_time = true;
			continue;
		}

		LOG_DBG("Current time not valid");
   21e38:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   21e3c:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
   21e40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   21e44:	f043 0304 	orr.w	r3, r3, #4
   21e48:	f363 0207 	bfi	r2, r3, #0, #8
   21e4c:	b293      	uxth	r3, r2
   21e4e:	f364 138f 	bfi	r3, r4, #6, #10
   21e52:	b298      	uxth	r0, r3
   21e54:	462a      	mov	r2, r5
   21e56:	498c      	ldr	r1, [pc, #560]	; (22088 <new_date_time_get+0x2cc>)
   21e58:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   21e5c:	f011 fec1 	bl	33be2 <log_string_sync>

#if defined(CONFIG_DATE_TIME_MODEM)
		LOG_DBG("Fallback on cellular network time");
   21e60:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
   21e64:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
   21e68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   21e6c:	f043 0304 	orr.w	r3, r3, #4
   21e70:	f363 0207 	bfi	r2, r3, #0, #8
   21e74:	b293      	uxth	r3, r2
   21e76:	f364 138f 	bfi	r3, r4, #6, #10
   21e7a:	b298      	uxth	r0, r3
   21e7c:	462a      	mov	r2, r5
   21e7e:	4983      	ldr	r1, [pc, #524]	; (2208c <new_date_time_get+0x2d0>)
   21e80:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
   21e84:	f011 fead 	bl	33be2 <log_string_sync>
	err = at_cmd_write(AT_CMD_MODEM_DATE_TIME, buf, sizeof(buf), NULL);
   21e88:	2300      	movs	r3, #0
   21e8a:	2221      	movs	r2, #33	; 0x21
   21e8c:	a918      	add	r1, sp, #96	; 0x60
   21e8e:	4880      	ldr	r0, [pc, #512]	; (22090 <new_date_time_get+0x2d4>)
   21e90:	f7fe fe1c 	bl	20acc <at_cmd_write>
	if (err) {
   21e94:	4606      	mov	r6, r0
   21e96:	2800      	cmp	r0, #0
   21e98:	f000 811e 	beq.w	220d8 <new_date_time_get+0x31c>
		LOG_DBG("Could not get cellular network time, error: %d", err);
   21e9c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   21ea0:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   21ea4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   21ea8:	f043 0304 	orr.w	r3, r3, #4
   21eac:	f363 0207 	bfi	r2, r3, #0, #8
   21eb0:	b293      	uxth	r3, r2
   21eb2:	f364 138f 	bfi	r3, r4, #6, #10
   21eb6:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
   21eba:	4a76      	ldr	r2, [pc, #472]	; (22094 <new_date_time_get+0x2d8>)
   21ebc:	4603      	mov	r3, r0
   21ebe:	4976      	ldr	r1, [pc, #472]	; (22098 <new_date_time_get+0x2dc>)
   21ec0:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
   21ec4:	f011 fe8d 	bl	33be2 <log_string_sync>
			LOG_DBG("Time from cellular network obtained");
			initial_valid_time = true;
			continue;
		}

		LOG_DBG("Not getting cellular network time");
   21ec8:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
   21ecc:	f043 0304 	orr.w	r3, r3, #4
   21ed0:	f363 0907 	bfi	r9, r3, #0, #8
   21ed4:	f364 198f 	bfi	r9, r4, #6, #10
   21ed8:	462a      	mov	r2, r5
   21eda:	4970      	ldr	r1, [pc, #448]	; (2209c <new_date_time_get+0x2e0>)
   21edc:	4648      	mov	r0, r9
   21ede:	f011 fe80 	bl	33be2 <log_string_sync>
#endif
		LOG_DBG("Fallback on NTP server");
   21ee2:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
   21ee6:	f043 0304 	orr.w	r3, r3, #4
   21eea:	f363 0a07 	bfi	sl, r3, #0, #8
   21eee:	f364 1a8f 	bfi	sl, r4, #6, #10
   21ef2:	462a      	mov	r2, r5
   21ef4:	496a      	ldr	r1, [pc, #424]	; (220a0 <new_date_time_get+0x2e4>)
   21ef6:	4650      	mov	r0, sl
   21ef8:	f011 fe73 	bl	33be2 <log_string_sync>
	for (int i = 0; i < ARRAY_SIZE(servers); i++) {
   21efc:	4b69      	ldr	r3, [pc, #420]	; (220a4 <new_date_time_get+0x2e8>)
   21efe:	461f      	mov	r7, r3
   21f00:	2300      	movs	r3, #0
   21f02:	9315      	str	r3, [sp, #84]	; 0x54
	hints.ai_socktype = SOCK_DGRAM;
   21f04:	2302      	movs	r3, #2
   21f06:	2101      	movs	r1, #1
	hints.ai_family = AF_INET;
   21f08:	4a67      	ldr	r2, [pc, #412]	; (220a8 <new_date_time_get+0x2ec>)
	hints.ai_socktype = SOCK_DGRAM;
   21f0a:	e9c2 1302 	strd	r1, r3, [r2, #8]
	hints.ai_protocol = 0;
   21f0e:	2300      	movs	r3, #0
   21f10:	6113      	str	r3, [r2, #16]
	if (server->addr == NULL) {
   21f12:	687b      	ldr	r3, [r7, #4]
   21f14:	2b00      	cmp	r3, #0
   21f16:	f040 816d 	bne.w	221f4 <new_date_time_get+0x438>
	return zsock_getaddrinfo(host, service, hints, res);
   21f1a:	463b      	mov	r3, r7
   21f1c:	4963      	ldr	r1, [pc, #396]	; (220ac <new_date_time_get+0x2f0>)
   21f1e:	3304      	adds	r3, #4
   21f20:	6838      	ldr	r0, [r7, #0]
   21f22:	f011 fedb 	bl	33cdc <zsock_getaddrinfo>
		if (err) {
   21f26:	4606      	mov	r6, r0
   21f28:	2800      	cmp	r0, #0
   21f2a:	f000 8177 	beq.w	2221c <new_date_time_get+0x460>
			LOG_ERR("getaddrinfo, error: %d", err);
   21f2e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   21f32:	495f      	ldr	r1, [pc, #380]	; (220b0 <new_date_time_get+0x2f4>)
   21f34:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
   21f38:	f042 0201 	orr.w	r2, r2, #1
   21f3c:	f362 0307 	bfi	r3, r2, #0, #8
   21f40:	b29b      	uxth	r3, r3
   21f42:	f364 138f 	bfi	r3, r4, #6, #10
   21f46:	4602      	mov	r2, r0
   21f48:	b298      	uxth	r0, r3
   21f4a:	f8ad 300c 	strh.w	r3, [sp, #12]
   21f4e:	f011 fe48 	bl	33be2 <log_string_sync>
			LOG_DBG("Not getting time from NTP server %s, error %d",
   21f52:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   21f56:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
   21f5a:	f042 0204 	orr.w	r2, r2, #4
   21f5e:	f362 0307 	bfi	r3, r2, #0, #8
   21f62:	b29b      	uxth	r3, r3
   21f64:	f364 138f 	bfi	r3, r4, #6, #10
   21f68:	f8ad 301c 	strh.w	r3, [sp, #28]
   21f6c:	463b      	mov	r3, r7
   21f6e:	f853 0b08 	ldr.w	r0, [r3], #8
   21f72:	461f      	mov	r7, r3
   21f74:	f011 fe47 	bl	33c06 <log_strdup>
   21f78:	4a4e      	ldr	r2, [pc, #312]	; (220b4 <new_date_time_get+0x2f8>)
   21f7a:	4603      	mov	r3, r0
   21f7c:	494e      	ldr	r1, [pc, #312]	; (220b8 <new_date_time_get+0x2fc>)
   21f7e:	f8bd 001c 	ldrh.w	r0, [sp, #28]
   21f82:	9600      	str	r6, [sp, #0]
   21f84:	f011 fe2d 	bl	33be2 <log_string_sync>
			LOG_DBG("Trying another address...");
   21f88:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   21f8c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   21f90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   21f94:	f043 0304 	orr.w	r3, r3, #4
   21f98:	f363 0207 	bfi	r2, r3, #0, #8
   21f9c:	b293      	uxth	r3, r2
   21f9e:	f364 138f 	bfi	r3, r4, #6, #10
   21fa2:	b298      	uxth	r0, r3
   21fa4:	4a43      	ldr	r2, [pc, #268]	; (220b4 <new_date_time_get+0x2f8>)
   21fa6:	4945      	ldr	r1, [pc, #276]	; (220bc <new_date_time_get+0x300>)
   21fa8:	f8ad 3020 	strh.w	r3, [sp, #32]
   21fac:	f011 fe19 	bl	33be2 <log_string_sync>
	for (int i = 0; i < ARRAY_SIZE(servers); i++) {
   21fb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   21fb2:	3301      	adds	r3, #1
   21fb4:	2b05      	cmp	r3, #5
   21fb6:	9315      	str	r3, [sp, #84]	; 0x54
   21fb8:	d1a4      	bne.n	21f04 <new_date_time_get+0x148>
	LOG_ERR("Not getting time from any NTP server");
   21fba:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   21fbe:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   21fc2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   21fc6:	f043 0301 	orr.w	r3, r3, #1
   21fca:	f363 0207 	bfi	r2, r3, #0, #8
   21fce:	b293      	uxth	r3, r2
   21fd0:	f364 138f 	bfi	r3, r4, #6, #10
   21fd4:	b298      	uxth	r0, r3
   21fd6:	493a      	ldr	r1, [pc, #232]	; (220c0 <new_date_time_get+0x304>)
   21fd8:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
   21fdc:	f011 fe01 	bl	33be2 <log_string_sync>
			LOG_DBG("Time from NTP server obtained");
			initial_valid_time = true;
			continue;
		}

		LOG_DBG("Not getting time from NTP server");
   21fe0:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   21fe4:	f043 0304 	orr.w	r3, r3, #4
   21fe8:	f363 0807 	bfi	r8, r3, #0, #8
   21fec:	f364 188f 	bfi	r8, r4, #6, #10
   21ff0:	462a      	mov	r2, r5
   21ff2:	4934      	ldr	r1, [pc, #208]	; (220c4 <new_date_time_get+0x308>)
   21ff4:	4640      	mov	r0, r8
   21ff6:	f011 fdf4 	bl	33be2 <log_string_sync>
   21ffa:	e6e8      	b.n	21dce <new_date_time_get+0x12>
	if ((k_uptime_get() - time_aux.last_date_time_update) >
   21ffc:	f016 fd19 	bl	38a32 <k_uptime_get>
   22000:	68b3      	ldr	r3, [r6, #8]
   22002:	4a31      	ldr	r2, [pc, #196]	; (220c8 <new_date_time_get+0x30c>)
   22004:	1ac6      	subs	r6, r0, r3
   22006:	eb61 77e3 	sbc.w	r7, r1, r3, asr #31
   2200a:	2300      	movs	r3, #0
   2200c:	42b2      	cmp	r2, r6
   2200e:	41bb      	sbcs	r3, r7
   22010:	da11      	bge.n	22036 <new_date_time_get+0x27a>
		LOG_DBG("Current date time too old");
   22012:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
   22016:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
   2201a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   2201e:	f043 0304 	orr.w	r3, r3, #4
   22022:	f363 0207 	bfi	r2, r3, #0, #8
   22026:	b293      	uxth	r3, r2
   22028:	f364 138f 	bfi	r3, r4, #6, #10
   2202c:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
   22030:	4a13      	ldr	r2, [pc, #76]	; (22080 <new_date_time_get+0x2c4>)
   22032:	4926      	ldr	r1, [pc, #152]	; (220cc <new_date_time_get+0x310>)
   22034:	e6fd      	b.n	21e32 <new_date_time_get+0x76>
			LOG_DBG("Time successfully obtained");
   22036:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   2203a:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
   2203e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   22042:	f043 0304 	orr.w	r3, r3, #4
   22046:	f363 0207 	bfi	r2, r3, #0, #8
   2204a:	b293      	uxth	r3, r2
   2204c:	462a      	mov	r2, r5
   2204e:	f364 138f 	bfi	r3, r4, #6, #10
   22052:	491f      	ldr	r1, [pc, #124]	; (220d0 <new_date_time_get+0x314>)
   22054:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
			LOG_DBG("Time from cellular network obtained");
   22058:	b298      	uxth	r0, r3
			LOG_DBG("Time from NTP server obtained");
   2205a:	f011 fdc2 	bl	33be2 <log_string_sync>
			initial_valid_time = true;
   2205e:	2201      	movs	r2, #1
   22060:	4b1c      	ldr	r3, [pc, #112]	; (220d4 <new_date_time_get+0x318>)
   22062:	701a      	strb	r2, [r3, #0]
			continue;
   22064:	e6b3      	b.n	21dce <new_date_time_get+0x12>
   22066:	bf00      	nop
   22068:	00039f48 	.word	0x00039f48
   2206c:	00039f78 	.word	0x00039f78
   22070:	0003f135 	.word	0x0003f135
   22074:	20020704 	.word	0x20020704
   22078:	200209f8 	.word	0x200209f8
   2207c:	0003f1b5 	.word	0x0003f1b5
   22080:	0003f122 	.word	0x0003f122
   22084:	0003f1d3 	.word	0x0003f1d3
   22088:	0003f228 	.word	0x0003f228
   2208c:	0003f243 	.word	0x0003f243
   22090:	0003eee0 	.word	0x0003eee0
   22094:	0003f0ed 	.word	0x0003f0ed
   22098:	0003f269 	.word	0x0003f269
   2209c:	0003f2f9 	.word	0x0003f2f9
   220a0:	0003f31f 	.word	0x0003f31f
   220a4:	200201f8 	.word	0x200201f8
   220a8:	20022460 	.word	0x20022460
   220ac:	0003f33a 	.word	0x0003f33a
   220b0:	0003f33e 	.word	0x0003f33e
   220b4:	0003f10e 	.word	0x0003f10e
   220b8:	0003f3b9 	.word	0x0003f3b9
   220bc:	0003f3eb 	.word	0x0003f3eb
   220c0:	0003f454 	.word	0x0003f454
   220c4:	0003f479 	.word	0x0003f479
   220c8:	0036ee80 	.word	0x0036ee80
   220cc:	0003f1eb 	.word	0x0003f1eb
   220d0:	0003f209 	.word	0x0003f209
   220d4:	2002907f 	.word	0x2002907f
	LOG_DBG("Response from modem: %s", log_strdup(buf));
   220d8:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   220dc:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   220e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   220e4:	f043 0304 	orr.w	r3, r3, #4
   220e8:	f363 0207 	bfi	r2, r3, #0, #8
   220ec:	b293      	uxth	r3, r2
   220ee:	f364 138f 	bfi	r3, r4, #6, #10
	buf[AT_CMD_MODEM_DATE_TIME_RESPONSE_LEN - 4] = '\0';
   220f2:	f88d 007c 	strb.w	r0, [sp, #124]	; 0x7c
	LOG_DBG("Response from modem: %s", log_strdup(buf));
   220f6:	a818      	add	r0, sp, #96	; 0x60
   220f8:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
   220fc:	f011 fd83 	bl	33c06 <log_strdup>
   22100:	4a7f      	ldr	r2, [pc, #508]	; (22300 <new_date_time_get+0x544>)
   22102:	4603      	mov	r3, r0
   22104:	497f      	ldr	r1, [pc, #508]	; (22304 <new_date_time_get+0x548>)
   22106:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
   2210a:	f011 fd6a 	bl	33be2 <log_string_sync>
		if (buf[i] == '/' || buf[i] == ',' || buf[i] == ':') {
   2210e:	f244 0109 	movw	r1, #16393	; 0x4009
			buf[i] = ' ';
   22112:	2020      	movs	r0, #32
   22114:	aa18      	add	r2, sp, #96	; 0x60
		if (buf[i] == '/' || buf[i] == ',' || buf[i] == ':') {
   22116:	f812 3b01 	ldrb.w	r3, [r2], #1
   2211a:	3b2c      	subs	r3, #44	; 0x2c
   2211c:	b2db      	uxtb	r3, r3
   2211e:	2b0e      	cmp	r3, #14
   22120:	d805      	bhi.n	2212e <new_date_time_get+0x372>
   22122:	fa21 f303 	lsr.w	r3, r1, r3
   22126:	07df      	lsls	r7, r3, #31
			buf[i] = ' ';
   22128:	bf48      	it	mi
   2212a:	f802 0c01 	strbmi.w	r0, [r2, #-1]
	for (int i = 0; i < AT_CMD_MODEM_DATE_TIME_RESPONSE_LEN; i++) {
   2212e:	3601      	adds	r6, #1
   22130:	2e20      	cmp	r6, #32
   22132:	d1f0      	bne.n	22116 <new_date_time_get+0x35a>
	char *ptr_index = &buf[8];
   22134:	a81a      	add	r0, sp, #104	; 0x68
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   22136:	220a      	movs	r2, #10
   22138:	a917      	add	r1, sp, #92	; 0x5c
	char *ptr_index = &buf[8];
   2213a:	9017      	str	r0, [sp, #92]	; 0x5c
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   2213c:	f010 f852 	bl	321e4 <strtol>
   22140:	3064      	adds	r0, #100	; 0x64
   22142:	9026      	str	r0, [sp, #152]	; 0x98
	date_time.tm_mon = strtol(ptr_index, &ptr_index, base) - 1;
   22144:	220a      	movs	r2, #10
   22146:	a917      	add	r1, sp, #92	; 0x5c
   22148:	9817      	ldr	r0, [sp, #92]	; 0x5c
   2214a:	f010 f84b 	bl	321e4 <strtol>
   2214e:	3801      	subs	r0, #1
   22150:	9025      	str	r0, [sp, #148]	; 0x94
	date_time.tm_mday = strtol(ptr_index, &ptr_index, base);
   22152:	220a      	movs	r2, #10
   22154:	a917      	add	r1, sp, #92	; 0x5c
   22156:	9817      	ldr	r0, [sp, #92]	; 0x5c
   22158:	f010 f844 	bl	321e4 <strtol>
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   2215c:	220a      	movs	r2, #10
	date_time.tm_mday = strtol(ptr_index, &ptr_index, base);
   2215e:	9024      	str	r0, [sp, #144]	; 0x90
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   22160:	a917      	add	r1, sp, #92	; 0x5c
   22162:	9817      	ldr	r0, [sp, #92]	; 0x5c
   22164:	f010 f83e 	bl	321e4 <strtol>
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   22168:	220a      	movs	r2, #10
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   2216a:	9023      	str	r0, [sp, #140]	; 0x8c
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   2216c:	a917      	add	r1, sp, #92	; 0x5c
   2216e:	9817      	ldr	r0, [sp, #92]	; 0x5c
   22170:	f010 f838 	bl	321e4 <strtol>
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   22174:	220a      	movs	r2, #10
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   22176:	9022      	str	r0, [sp, #136]	; 0x88
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   22178:	a917      	add	r1, sp, #92	; 0x5c
   2217a:	9817      	ldr	r0, [sp, #92]	; 0x5c
   2217c:	f010 f832 	bl	321e4 <strtol>
	if (date_time.tm_year == MODEM_TIME_DEFAULT) {
   22180:	9b26      	ldr	r3, [sp, #152]	; 0x98
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   22182:	9021      	str	r0, [sp, #132]	; 0x84
	if (date_time.tm_year == MODEM_TIME_DEFAULT) {
   22184:	2b73      	cmp	r3, #115	; 0x73
   22186:	d114      	bne.n	221b2 <new_date_time_get+0x3f6>
		LOG_DBG("Modem time never set");
   22188:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   2218c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   22190:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   22194:	f043 0304 	orr.w	r3, r3, #4
   22198:	f363 0207 	bfi	r2, r3, #0, #8
   2219c:	b293      	uxth	r3, r2
   2219e:	f364 138f 	bfi	r3, r4, #6, #10
   221a2:	4a57      	ldr	r2, [pc, #348]	; (22300 <new_date_time_get+0x544>)
   221a4:	4958      	ldr	r1, [pc, #352]	; (22308 <new_date_time_get+0x54c>)
   221a6:	b298      	uxth	r0, r3
   221a8:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
   221ac:	f011 fd19 	bl	33be2 <log_string_sync>
		if (err == 0) {
   221b0:	e68a      	b.n	21ec8 <new_date_time_get+0x10c>
	time_aux.date_time_utc = (s64_t)timeutil_timegm64(&date_time) * 1000;
   221b2:	a821      	add	r0, sp, #132	; 0x84
   221b4:	f7f6 fc32 	bl	18a1c <timeutil_timegm64>
   221b8:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   221bc:	fba0 230c 	umull	r2, r3, r0, ip
   221c0:	fb0c 3301 	mla	r3, ip, r1, r3
   221c4:	4e51      	ldr	r6, [pc, #324]	; (2230c <new_date_time_get+0x550>)
   221c6:	e9c6 2300 	strd	r2, r3, [r6]
	time_aux.last_date_time_update = k_uptime_get();
   221ca:	f016 fc32 	bl	38a32 <k_uptime_get>
			LOG_DBG("Time from cellular network obtained");
   221ce:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
   221d2:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
   221d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   221da:	f043 0304 	orr.w	r3, r3, #4
   221de:	f363 0207 	bfi	r2, r3, #0, #8
   221e2:	b293      	uxth	r3, r2
   221e4:	f364 138f 	bfi	r3, r4, #6, #10
	time_aux.last_date_time_update = k_uptime_get();
   221e8:	60b0      	str	r0, [r6, #8]
			LOG_DBG("Time from cellular network obtained");
   221ea:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
   221ee:	462a      	mov	r2, r5
   221f0:	4947      	ldr	r1, [pc, #284]	; (22310 <new_date_time_get+0x554>)
   221f2:	e731      	b.n	22058 <new_date_time_get+0x29c>
		LOG_DBG("Server address already obtained, skipping DNS lookup");
   221f4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   221f8:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   221fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   22200:	f043 0304 	orr.w	r3, r3, #4
   22204:	f363 0207 	bfi	r2, r3, #0, #8
   22208:	b293      	uxth	r3, r2
   2220a:	f364 138f 	bfi	r3, r4, #6, #10
   2220e:	4a41      	ldr	r2, [pc, #260]	; (22314 <new_date_time_get+0x558>)
   22210:	4941      	ldr	r1, [pc, #260]	; (22318 <new_date_time_get+0x55c>)
   22212:	b298      	uxth	r0, r3
   22214:	f8ad 3010 	strh.w	r3, [sp, #16]
   22218:	f011 fce3 	bl	33be2 <log_string_sync>
	err = sntp_init(&sntp_ctx, server->addr->ai_addr,
   2221c:	687b      	ldr	r3, [r7, #4]
   2221e:	a821      	add	r0, sp, #132	; 0x84
   22220:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   22224:	f011 fd26 	bl	33c74 <sntp_init>
	if (err) {
   22228:	4606      	mov	r6, r0
   2222a:	2800      	cmp	r0, #0
   2222c:	d04e      	beq.n	222cc <new_date_time_get+0x510>
		LOG_ERR("sntp_init, error: %d", err);
   2222e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   22232:	493a      	ldr	r1, [pc, #232]	; (2231c <new_date_time_get+0x560>)
   22234:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
   22238:	f042 0201 	orr.w	r2, r2, #1
   2223c:	f362 0307 	bfi	r3, r2, #0, #8
   22240:	4602      	mov	r2, r0
   22242:	b29b      	uxth	r3, r3
   22244:	f364 138f 	bfi	r3, r4, #6, #10
   22248:	f8ad 3014 	strh.w	r3, [sp, #20]
		LOG_ERR("sntp_query, error: %d", err);
   2224c:	b298      	uxth	r0, r3
   2224e:	f011 fcc8 	bl	33be2 <log_string_sync>
	sntp_close(&sntp_ctx);
   22252:	a821      	add	r0, sp, #132	; 0x84
   22254:	f011 fd3d 	bl	33cd2 <sntp_close>
		if (err) {
   22258:	2e00      	cmp	r6, #0
   2225a:	f47f ae7a 	bne.w	21f52 <new_date_time_get+0x196>
		LOG_DBG("Got time response from NTP server %s",
   2225e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   22262:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   22266:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   2226a:	f043 0304 	orr.w	r3, r3, #4
   2226e:	f363 0207 	bfi	r2, r3, #0, #8
   22272:	b293      	uxth	r3, r2
   22274:	f364 138f 	bfi	r3, r4, #6, #10
   22278:	9a15      	ldr	r2, [sp, #84]	; 0x54
   2227a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
   2227e:	4b28      	ldr	r3, [pc, #160]	; (22320 <new_date_time_get+0x564>)
		time_aux.date_time_utc = (s64_t)sntp_time.seconds * 1000;
   22280:	4e22      	ldr	r6, [pc, #136]	; (2230c <new_date_time_get+0x550>)
		LOG_DBG("Got time response from NTP server %s",
   22282:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
   22286:	f011 fcbe 	bl	33c06 <log_strdup>
   2228a:	4a26      	ldr	r2, [pc, #152]	; (22324 <new_date_time_get+0x568>)
   2228c:	4603      	mov	r3, r0
   2228e:	4926      	ldr	r1, [pc, #152]	; (22328 <new_date_time_get+0x56c>)
   22290:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
   22294:	f011 fca5 	bl	33be2 <log_string_sync>
		time_aux.date_time_utc = (s64_t)sntp_time.seconds * 1000;
   22298:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   2229c:	4b23      	ldr	r3, [pc, #140]	; (2232c <new_date_time_get+0x570>)
   2229e:	681a      	ldr	r2, [r3, #0]
   222a0:	6858      	ldr	r0, [r3, #4]
   222a2:	fba2 2301 	umull	r2, r3, r2, r1
   222a6:	fb01 3300 	mla	r3, r1, r0, r3
   222aa:	e9c6 2300 	strd	r2, r3, [r6]
		time_aux.last_date_time_update = k_uptime_get();
   222ae:	f016 fbc0 	bl	38a32 <k_uptime_get>
			LOG_DBG("Time from NTP server obtained");
   222b2:	f02b 033f 	bic.w	r3, fp, #63	; 0x3f
   222b6:	f043 0304 	orr.w	r3, r3, #4
   222ba:	f363 0b07 	bfi	fp, r3, #0, #8
   222be:	f364 1b8f 	bfi	fp, r4, #6, #10
		time_aux.last_date_time_update = k_uptime_get();
   222c2:	60b0      	str	r0, [r6, #8]
			LOG_DBG("Time from NTP server obtained");
   222c4:	462a      	mov	r2, r5
   222c6:	491a      	ldr	r1, [pc, #104]	; (22330 <new_date_time_get+0x574>)
   222c8:	4658      	mov	r0, fp
   222ca:	e6c6      	b.n	2205a <new_date_time_get+0x29e>
	err = sntp_query(&sntp_ctx, timeout, time);
   222cc:	4a17      	ldr	r2, [pc, #92]	; (2232c <new_date_time_get+0x570>)
   222ce:	f241 3188 	movw	r1, #5000	; 0x1388
   222d2:	a821      	add	r0, sp, #132	; 0x84
   222d4:	f7f0 fa58 	bl	12788 <sntp_query>
	if (err) {
   222d8:	4606      	mov	r6, r0
   222da:	2800      	cmp	r0, #0
   222dc:	d0b9      	beq.n	22252 <new_date_time_get+0x496>
		LOG_ERR("sntp_query, error: %d", err);
   222de:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   222e2:	4914      	ldr	r1, [pc, #80]	; (22334 <new_date_time_get+0x578>)
   222e4:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
   222e8:	f042 0201 	orr.w	r2, r2, #1
   222ec:	f362 0307 	bfi	r3, r2, #0, #8
   222f0:	b29b      	uxth	r3, r3
   222f2:	f364 138f 	bfi	r3, r4, #6, #10
   222f6:	f8ad 3018 	strh.w	r3, [sp, #24]
   222fa:	4602      	mov	r2, r0
   222fc:	e7a6      	b.n	2224c <new_date_time_get+0x490>
   222fe:	bf00      	nop
   22300:	0003f0ed 	.word	0x0003f0ed
   22304:	0003f29c 	.word	0x0003f29c
   22308:	0003f2b8 	.word	0x0003f2b8
   2230c:	200209f8 	.word	0x200209f8
   22310:	0003f2d1 	.word	0x0003f2d1
   22314:	0003f0fc 	.word	0x0003f0fc
   22318:	0003f355 	.word	0x0003f355
   2231c:	0003f38e 	.word	0x0003f38e
   22320:	200201f8 	.word	0x200201f8
   22324:	0003f10e 	.word	0x0003f10e
   22328:	0003f409 	.word	0x0003f409
   2232c:	200209e8 	.word	0x200209e8
   22330:	0003f432 	.word	0x0003f432
   22334:	0003f3a3 	.word	0x0003f3a3

00022338 <date_time_handler>:
K_THREAD_DEFINE(time_thread, CONFIG_DATE_TIME_THREAD_SIZE,
		new_date_time_get, NULL, NULL, NULL,
		K_HIGHEST_APPLICATION_THREAD_PRIO, 0, 0);

static void date_time_handler(struct k_work *work)
{
   22338:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   2233a:	480d      	ldr	r0, [pc, #52]	; (22370 <date_time_handler+0x38>)
   2233c:	f00b fe4c 	bl	2dfd8 <z_impl_k_sem_give>
	k_sem_give(&time_fetch_sem);

	LOG_DBG("New date time update in: %d seconds",
   22340:	2304      	movs	r3, #4
   22342:	f04f 0000 	mov.w	r0, #0
   22346:	4a0b      	ldr	r2, [pc, #44]	; (22374 <date_time_handler+0x3c>)
   22348:	f363 0007 	bfi	r0, r3, #0, #8
   2234c:	4b0a      	ldr	r3, [pc, #40]	; (22378 <date_time_handler+0x40>)
   2234e:	490b      	ldr	r1, [pc, #44]	; (2237c <date_time_handler+0x44>)
   22350:	1a9b      	subs	r3, r3, r2
   22352:	08db      	lsrs	r3, r3, #3
   22354:	f363 108f 	bfi	r0, r3, #6, #10
   22358:	4a09      	ldr	r2, [pc, #36]	; (22380 <date_time_handler+0x48>)
   2235a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   2235e:	f011 fc40 	bl	33be2 <log_string_sync>
		CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS);

	k_delayed_work_submit(&time_work,
			K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));
}
   22362:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   22366:	4a07      	ldr	r2, [pc, #28]	; (22384 <date_time_handler+0x4c>)
   22368:	4907      	ldr	r1, [pc, #28]	; (22388 <date_time_handler+0x50>)
   2236a:	4808      	ldr	r0, [pc, #32]	; (2238c <date_time_handler+0x54>)
   2236c:	f00c b8f8 	b.w	2e560 <k_delayed_work_submit_to_queue>
   22370:	20020704 	.word	0x20020704
   22374:	00039f48 	.word	0x00039f48
   22378:	00039f78 	.word	0x00039f78
   2237c:	0003f159 	.word	0x0003f159
   22380:	0003f147 	.word	0x0003f147
   22384:	0036ee80 	.word	0x0036ee80
   22388:	200224a0 	.word	0x200224a0
   2238c:	20027524 	.word	0x20027524

00022390 <date_time_init>:

static int date_time_init(struct device *unused)
{
   22390:	b510      	push	{r4, lr}
	k_delayed_work_init(&time_work, date_time_handler);
   22392:	4c06      	ldr	r4, [pc, #24]	; (223ac <date_time_init+0x1c>)
   22394:	4906      	ldr	r1, [pc, #24]	; (223b0 <date_time_init+0x20>)
   22396:	4620      	mov	r0, r4
   22398:	f016 fd39 	bl	38e0e <k_delayed_work_init>
   2239c:	4a05      	ldr	r2, [pc, #20]	; (223b4 <date_time_init+0x24>)
   2239e:	4621      	mov	r1, r4
   223a0:	4805      	ldr	r0, [pc, #20]	; (223b8 <date_time_init+0x28>)
   223a2:	f00c f8dd 	bl	2e560 <k_delayed_work_submit_to_queue>
	k_delayed_work_submit(&time_work,
			K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));

	return 0;
}
   223a6:	2000      	movs	r0, #0
   223a8:	bd10      	pop	{r4, pc}
   223aa:	bf00      	nop
   223ac:	200224a0 	.word	0x200224a0
   223b0:	00022339 	.word	0x00022339
   223b4:	0036ee80 	.word	0x0036ee80
   223b8:	20027524 	.word	0x20027524

000223bc <date_time_uptime_to_unix_time_ms>:
	time_aux.date_time_utc = (s64_t)timeutil_timegm64(new_date_time) * 1000;
}

int date_time_uptime_to_unix_time_ms(s64_t *uptime)
{
	if (!initial_valid_time) {
   223bc:	4b15      	ldr	r3, [pc, #84]	; (22414 <date_time_uptime_to_unix_time_ms+0x58>)
{
   223be:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
	if (!initial_valid_time) {
   223c2:	781b      	ldrb	r3, [r3, #0]
   223c4:	b9a3      	cbnz	r3, 223f0 <date_time_uptime_to_unix_time_ms+0x34>
		LOG_ERR("Valid time not currently available, requesting time");
   223c6:	2301      	movs	r3, #1
   223c8:	f04f 0000 	mov.w	r0, #0
   223cc:	4a12      	ldr	r2, [pc, #72]	; (22418 <date_time_uptime_to_unix_time_ms+0x5c>)
   223ce:	f363 0007 	bfi	r0, r3, #0, #8
   223d2:	4b12      	ldr	r3, [pc, #72]	; (2241c <date_time_uptime_to_unix_time_ms+0x60>)
   223d4:	4912      	ldr	r1, [pc, #72]	; (22420 <date_time_uptime_to_unix_time_ms+0x64>)
   223d6:	1a9b      	subs	r3, r3, r2
   223d8:	08db      	lsrs	r3, r3, #3
   223da:	f363 108f 	bfi	r0, r3, #6, #10
   223de:	f011 fc00 	bl	33be2 <log_string_sync>
   223e2:	4810      	ldr	r0, [pc, #64]	; (22424 <date_time_uptime_to_unix_time_ms+0x68>)
   223e4:	f00b fdf8 	bl	2dfd8 <z_impl_k_sem_give>
   223e8:	f06f 003c 	mvn.w	r0, #60	; 0x3c
	}

	*uptime += time_aux.date_time_utc - time_aux.last_date_time_update;

	return 0;
}
   223ec:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
	*uptime += time_aux.date_time_utc - time_aux.last_date_time_update;
   223f0:	4b0d      	ldr	r3, [pc, #52]	; (22428 <date_time_uptime_to_unix_time_ms+0x6c>)
   223f2:	689a      	ldr	r2, [r3, #8]
   223f4:	e9d3 4500 	ldrd	r4, r5, [r3]
   223f8:	ebb4 0b02 	subs.w	fp, r4, r2
   223fc:	eb65 7ce2 	sbc.w	ip, r5, r2, asr #31
   22400:	e9d0 3200 	ldrd	r3, r2, [r0]
   22404:	eb13 030b 	adds.w	r3, r3, fp
   22408:	eb4c 0202 	adc.w	r2, ip, r2
   2240c:	e9c0 3200 	strd	r3, r2, [r0]
	return 0;
   22410:	2000      	movs	r0, #0
   22412:	e7eb      	b.n	223ec <date_time_uptime_to_unix_time_ms+0x30>
   22414:	2002907f 	.word	0x2002907f
   22418:	00039f48 	.word	0x00039f48
   2241c:	00039f78 	.word	0x00039f78
   22420:	0003f181 	.word	0x0003f181
   22424:	20020704 	.word	0x20020704
   22428:	200209f8 	.word	0x200209f8

0002242c <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(struct device *dev)
{
   2242c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   22430:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   22432:	4c21      	ldr	r4, [pc, #132]	; (224b8 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							u32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const u32_t ext_api_magic[] = {EXT_API_MAGIC};
   22434:	4e21      	ldr	r6, [pc, #132]	; (224bc <check_ext_api_requests+0x90>)
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   22436:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   2243a:	f8df 9088 	ldr.w	r9, [pc, #136]	; 224c4 <check_ext_api_requests+0x98>
{
   2243e:	b085      	sub	sp, #20
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   22440:	45a8      	cmp	r8, r5
   22442:	d803      	bhi.n	2244c <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   22444:	2000      	movs	r0, #0
   22446:	b005      	add	sp, #20
   22448:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((u32_t)*(ext_api_req->ext_api))
   2244c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2244e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   22452:	681f      	ldr	r7, [r3, #0]
   22454:	ab01      	add	r3, sp, #4
   22456:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   2245a:	220c      	movs	r2, #12
   2245c:	4619      	mov	r1, r3
   2245e:	4638      	mov	r0, r7
   22460:	f016 fda1 	bl	38fa6 <memcmp>
   22464:	b990      	cbnz	r0, 2248c <check_ext_api_requests+0x60>
   22466:	b18f      	cbz	r7, 2248c <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   22468:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const u32_t req_id = ext_api_req->request.ext_api_id;
   2246a:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   2246c:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   2246e:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   22470:	4291      	cmp	r1, r2
   22472:	d10b      	bne.n	2248c <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   22474:	699a      	ldr	r2, [r3, #24]
	const u32_t req_min_version = ext_api_req->request.ext_api_version;
   22476:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   22478:	4291      	cmp	r1, r2
   2247a:	d807      	bhi.n	2248c <check_ext_api_requests+0x60>
	const u32_t req_max_version = ext_api_req->ext_api_max_version;
   2247c:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   2247e:	4291      	cmp	r1, r2
   22480:	d904      	bls.n	2248c <check_ext_api_requests+0x60>
	const u32_t req_flags = ext_api_req->request.ext_api_flags;
   22482:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   22484:	695b      	ldr	r3, [r3, #20]
   22486:	ea32 0303 	bics.w	r3, r2, r3
   2248a:	d00a      	beq.n	224a2 <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   2248c:	6a27      	ldr	r7, [r4, #32]
   2248e:	b167      	cbz	r7, 224aa <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   22490:	480b      	ldr	r0, [pc, #44]	; (224c0 <check_ext_api_requests+0x94>)
   22492:	f011 f88e 	bl	335b2 <printk>
			k_panic();
   22496:	4040      	eors	r0, r0
   22498:	f380 8811 	msr	BASEPRI, r0
   2249c:	f04f 0004 	mov.w	r0, #4
   224a0:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   224a2:	68e3      	ldr	r3, [r4, #12]
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   224a4:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   224a6:	441c      	add	r4, r3
   224a8:	e7ca      	b.n	22440 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   224aa:	4648      	mov	r0, r9
   224ac:	f011 f881 	bl	335b2 <printk>
			*ext_api_req->ext_api = NULL;
   224b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   224b2:	601f      	str	r7, [r3, #0]
   224b4:	e7f5      	b.n	224a2 <check_ext_api_requests+0x76>
   224b6:	bf00      	nop
   224b8:	0000c23c 	.word	0x0000c23c
   224bc:	0003a108 	.word	0x0003a108
   224c0:	0003f50d 	.word	0x0003f50d
   224c4:	0003f536 	.word	0x0003f536

000224c8 <packet_free_cb>:
   224c8:	b510      	push	{r4, lr}
   224ca:	4604      	mov	r4, r0
   224cc:	6800      	ldr	r0, [r0, #0]
   224ce:	f004 ff7d 	bl	273cc <rpc_logobj_client_data_free>
   224d2:	68a0      	ldr	r0, [r4, #8]
   224d4:	b118      	cbz	r0, 224de <packet_free_cb+0x16>
   224d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   224da:	f007 bd2d 	b.w	29f38 <nrf_free>
   224de:	bd10      	pop	{r4, pc}

000224e0 <logobj_event_handler>:
   224e0:	b530      	push	{r4, r5, lr}
   224e2:	4b3b      	ldr	r3, [pc, #236]	; (225d0 <logobj_event_handler+0xf0>)
   224e4:	b085      	sub	sp, #20
   224e6:	681d      	ldr	r5, [r3, #0]
   224e8:	2d00      	cmp	r5, #0
   224ea:	d04c      	beq.n	22586 <logobj_event_handler+0xa6>
   224ec:	f248 0302 	movw	r3, #32770	; 0x8002
   224f0:	4299      	cmp	r1, r3
   224f2:	d053      	beq.n	2259c <logobj_event_handler+0xbc>
   224f4:	d91c      	bls.n	22530 <logobj_event_handler+0x50>
   224f6:	f248 0303 	movw	r3, #32771	; 0x8003
   224fa:	4299      	cmp	r1, r3
   224fc:	d05a      	beq.n	225b4 <logobj_event_handler+0xd4>
   224fe:	f249 0301 	movw	r3, #36865	; 0x9001
   22502:	4299      	cmp	r1, r3
   22504:	d147      	bne.n	22596 <logobj_event_handler+0xb6>
   22506:	2400      	movs	r4, #0
   22508:	6843      	ldr	r3, [r0, #4]
   2250a:	6802      	ldr	r2, [r0, #0]
   2250c:	e9cd 4402 	strd	r4, r4, [sp, #8]
   22510:	e9cd 2300 	strd	r2, r3, [sp]
   22514:	69e8      	ldr	r0, [r5, #28]
   22516:	4669      	mov	r1, sp
   22518:	6803      	ldr	r3, [r0, #0]
   2251a:	685b      	ldr	r3, [r3, #4]
   2251c:	4798      	blx	r3
   2251e:	3001      	adds	r0, #1
   22520:	d04e      	beq.n	225c0 <logobj_event_handler+0xe0>
   22522:	4620      	mov	r0, r4
   22524:	682b      	ldr	r3, [r5, #0]
   22526:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2252a:	602b      	str	r3, [r5, #0]
   2252c:	b005      	add	sp, #20
   2252e:	bd30      	pop	{r4, r5, pc}
   22530:	f248 0301 	movw	r3, #32769	; 0x8001
   22534:	4299      	cmp	r1, r3
   22536:	d12e      	bne.n	22596 <logobj_event_handler+0xb6>
   22538:	68c3      	ldr	r3, [r0, #12]
   2253a:	2b00      	cmp	r3, #0
   2253c:	d135      	bne.n	225aa <logobj_event_handler+0xca>
   2253e:	6828      	ldr	r0, [r5, #0]
   22540:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   22544:	d03e      	beq.n	225c4 <logobj_event_handler+0xe4>
   22546:	682b      	ldr	r3, [r5, #0]
   22548:	b29b      	uxth	r3, r3
   2254a:	2b01      	cmp	r3, #1
   2254c:	d105      	bne.n	2255a <logobj_event_handler+0x7a>
   2254e:	682b      	ldr	r3, [r5, #0]
   22550:	0c1b      	lsrs	r3, r3, #16
   22552:	041b      	lsls	r3, r3, #16
   22554:	f043 0302 	orr.w	r3, r3, #2
   22558:	602b      	str	r3, [r5, #0]
   2255a:	4b1e      	ldr	r3, [pc, #120]	; (225d4 <logobj_event_handler+0xf4>)
   2255c:	781a      	ldrb	r2, [r3, #0]
   2255e:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   22562:	2a00      	cmp	r2, #0
   22564:	d031      	beq.n	225ca <logobj_event_handler+0xea>
   22566:	4a1c      	ldr	r2, [pc, #112]	; (225d8 <logobj_event_handler+0xf8>)
   22568:	7811      	ldrb	r1, [r2, #0]
   2256a:	b909      	cbnz	r1, 22570 <logobj_event_handler+0x90>
   2256c:	2101      	movs	r1, #1
   2256e:	7011      	strb	r1, [r2, #0]
   22570:	2000      	movs	r0, #0
   22572:	7018      	strb	r0, [r3, #0]
   22574:	682b      	ldr	r3, [r5, #0]
   22576:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   2257a:	602b      	str	r3, [r5, #0]
   2257c:	682b      	ldr	r3, [r5, #0]
   2257e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   22582:	602b      	str	r3, [r5, #0]
   22584:	e7d2      	b.n	2252c <logobj_event_handler+0x4c>
   22586:	6800      	ldr	r0, [r0, #0]
   22588:	2800      	cmp	r0, #0
   2258a:	d0cf      	beq.n	2252c <logobj_event_handler+0x4c>
   2258c:	f004 ff1e 	bl	273cc <rpc_logobj_client_data_free>
   22590:	4628      	mov	r0, r5
   22592:	b005      	add	sp, #20
   22594:	bd30      	pop	{r4, r5, pc}
   22596:	2000      	movs	r0, #0
   22598:	b005      	add	sp, #20
   2259a:	bd30      	pop	{r4, r5, pc}
   2259c:	682b      	ldr	r3, [r5, #0]
   2259e:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
   225a2:	d00b      	beq.n	225bc <logobj_event_handler+0xdc>
   225a4:	68c0      	ldr	r0, [r0, #12]
   225a6:	2800      	cmp	r0, #0
   225a8:	d0e4      	beq.n	22574 <logobj_event_handler+0x94>
   225aa:	230e      	movs	r3, #14
   225ac:	2000      	movs	r0, #0
   225ae:	606b      	str	r3, [r5, #4]
   225b0:	b005      	add	sp, #20
   225b2:	bd30      	pop	{r4, r5, pc}
   225b4:	68c3      	ldr	r3, [r0, #12]
   225b6:	2b01      	cmp	r3, #1
   225b8:	d1a5      	bne.n	22506 <logobj_event_handler+0x26>
   225ba:	e7f6      	b.n	225aa <logobj_event_handler+0xca>
   225bc:	4618      	mov	r0, r3
   225be:	e7b5      	b.n	2252c <logobj_event_handler+0x4c>
   225c0:	2002      	movs	r0, #2
   225c2:	e7b3      	b.n	2252c <logobj_event_handler+0x4c>
   225c4:	230e      	movs	r3, #14
   225c6:	606b      	str	r3, [r5, #4]
   225c8:	e7b0      	b.n	2252c <logobj_event_handler+0x4c>
   225ca:	4a03      	ldr	r2, [pc, #12]	; (225d8 <logobj_event_handler+0xf8>)
   225cc:	7011      	strb	r1, [r2, #0]
   225ce:	e7cf      	b.n	22570 <logobj_event_handler+0x90>
   225d0:	200224c4 	.word	0x200224c4
   225d4:	20029080 	.word	0x20029080
   225d8:	20029081 	.word	0x20029081

000225dc <logobj_interface_init>:
   225dc:	2300      	movs	r3, #0
   225de:	b510      	push	{r4, lr}
   225e0:	4808      	ldr	r0, [pc, #32]	; (22604 <logobj_interface_init+0x28>)
   225e2:	4c09      	ldr	r4, [pc, #36]	; (22608 <logobj_interface_init+0x2c>)
   225e4:	4909      	ldr	r1, [pc, #36]	; (2260c <logobj_interface_init+0x30>)
   225e6:	4a0a      	ldr	r2, [pc, #40]	; (22610 <logobj_interface_init+0x34>)
   225e8:	7023      	strb	r3, [r4, #0]
   225ea:	6003      	str	r3, [r0, #0]
   225ec:	700b      	strb	r3, [r1, #0]
   225ee:	6013      	str	r3, [r2, #0]
   225f0:	f004 feb0 	bl	27354 <rpc_logobj_client_init>
   225f4:	b918      	cbnz	r0, 225fe <logobj_interface_init+0x22>
   225f6:	2201      	movs	r2, #1
   225f8:	4b06      	ldr	r3, [pc, #24]	; (22614 <logobj_interface_init+0x38>)
   225fa:	701a      	strb	r2, [r3, #0]
   225fc:	bd10      	pop	{r4, pc}
   225fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22602:	bd10      	pop	{r4, pc}
   22604:	200224c4 	.word	0x200224c4
   22608:	20029081 	.word	0x20029081
   2260c:	20029080 	.word	0x20029080
   22610:	200224c0 	.word	0x200224c0
   22614:	20029082 	.word	0x20029082

00022618 <logobj_interface_open>:
   22618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2261c:	2400      	movs	r4, #0
   2261e:	4b5b      	ldr	r3, [pc, #364]	; (2278c <logobj_interface_open+0x174>)
   22620:	b084      	sub	sp, #16
   22622:	781b      	ldrb	r3, [r3, #0]
   22624:	9401      	str	r4, [sp, #4]
   22626:	2b00      	cmp	r3, #0
   22628:	f000 809f 	beq.w	2276a <logobj_interface_open+0x152>
   2262c:	2866      	cmp	r0, #102	; 0x66
   2262e:	4680      	mov	r8, r0
   22630:	f040 808f 	bne.w	22752 <logobj_interface_open+0x13a>
   22634:	2902      	cmp	r1, #2
   22636:	4689      	mov	r9, r1
   22638:	f040 808b 	bne.w	22752 <logobj_interface_open+0x13a>
   2263c:	f240 2305 	movw	r3, #517	; 0x205
   22640:	429a      	cmp	r2, r3
   22642:	4692      	mov	sl, r2
   22644:	f040 8085 	bne.w	22752 <logobj_interface_open+0x13a>
   22648:	4f51      	ldr	r7, [pc, #324]	; (22790 <logobj_interface_open+0x178>)
   2264a:	683d      	ldr	r5, [r7, #0]
   2264c:	2d00      	cmp	r5, #0
   2264e:	f040 8086 	bne.w	2275e <logobj_interface_open+0x146>
   22652:	4a50      	ldr	r2, [pc, #320]	; (22794 <logobj_interface_open+0x17c>)
   22654:	a801      	add	r0, sp, #4
   22656:	f007 ff97 	bl	2a588 <interface_socket_allocate>
   2265a:	9b01      	ldr	r3, [sp, #4]
   2265c:	4606      	mov	r6, r0
   2265e:	2b00      	cmp	r3, #0
   22660:	f000 808d 	beq.w	2277e <logobj_interface_open+0x166>
   22664:	4629      	mov	r1, r5
   22666:	2204      	movs	r2, #4
   22668:	484b      	ldr	r0, [pc, #300]	; (22798 <logobj_interface_open+0x180>)
   2266a:	603b      	str	r3, [r7, #0]
   2266c:	f016 fce3 	bl	39036 <memset>
   22670:	9c01      	ldr	r4, [sp, #4]
   22672:	4629      	mov	r1, r5
   22674:	e9c4 8903 	strd	r8, r9, [r4, #12]
   22678:	f8c4 a014 	str.w	sl, [r4, #20]
   2267c:	a802      	add	r0, sp, #8
   2267e:	f004 fe6f 	bl	27360 <rpc_logobj_client_request_alloc>
   22682:	2800      	cmp	r0, #0
   22684:	d142      	bne.n	2270c <logobj_interface_open+0xf4>
   22686:	2201      	movs	r2, #1
   22688:	2104      	movs	r1, #4
   2268a:	9b02      	ldr	r3, [sp, #8]
   2268c:	4d43      	ldr	r5, [pc, #268]	; (2279c <logobj_interface_open+0x184>)
   2268e:	7358      	strb	r0, [r3, #13]
   22690:	7398      	strb	r0, [r3, #14]
   22692:	73d8      	strb	r0, [r3, #15]
   22694:	7258      	strb	r0, [r3, #9]
   22696:	7298      	strb	r0, [r3, #10]
   22698:	72d8      	strb	r0, [r3, #11]
   2269a:	7219      	strb	r1, [r3, #8]
   2269c:	702a      	strb	r2, [r5, #0]
   2269e:	731a      	strb	r2, [r3, #12]
   226a0:	6822      	ldr	r2, [r4, #0]
   226a2:	4618      	mov	r0, r3
   226a4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   226a8:	6022      	str	r2, [r4, #0]
   226aa:	f247 0101 	movw	r1, #28673	; 0x7001
   226ae:	f004 fe6f 	bl	27390 <rpc_logobj_client_request_send>
   226b2:	bb68      	cbnz	r0, 22710 <logobj_interface_open+0xf8>
   226b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
   226b6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   226ba:	2900      	cmp	r1, #0
   226bc:	bf08      	it	eq
   226be:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   226c2:	ab04      	add	r3, sp, #16
   226c4:	f843 1d04 	str.w	r1, [r3, #-4]!
   226c8:	4630      	mov	r0, r6
   226ca:	4611      	mov	r1, r2
   226cc:	f008 f80e 	bl	2a6ec <interface_socket_wait>
   226d0:	4604      	mov	r4, r0
   226d2:	b310      	cbz	r0, 2271a <logobj_interface_open+0x102>
   226d4:	9a01      	ldr	r2, [sp, #4]
   226d6:	2e00      	cmp	r6, #0
   226d8:	6813      	ldr	r3, [r2, #0]
   226da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   226de:	6013      	str	r3, [r2, #0]
   226e0:	9a01      	ldr	r2, [sp, #4]
   226e2:	6813      	ldr	r3, [r2, #0]
   226e4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   226e8:	6013      	str	r3, [r2, #0]
   226ea:	9a01      	ldr	r2, [sp, #4]
   226ec:	6813      	ldr	r3, [r2, #0]
   226ee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   226f2:	6013      	str	r3, [r2, #0]
   226f4:	da3f      	bge.n	22776 <logobj_interface_open+0x15e>
   226f6:	2300      	movs	r3, #0
   226f8:	4620      	mov	r0, r4
   226fa:	603b      	str	r3, [r7, #0]
   226fc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   22700:	f7fd fca4 	bl	2004c <bsd_os_errno_set>
   22704:	4630      	mov	r0, r6
   22706:	b004      	add	sp, #16
   22708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2270c:	240c      	movs	r4, #12
   2270e:	e7e1      	b.n	226d4 <logobj_interface_open+0xbc>
   22710:	9802      	ldr	r0, [sp, #8]
   22712:	f004 fe53 	bl	273bc <rpc_logobj_client_message_free>
   22716:	2405      	movs	r4, #5
   22718:	e7dc      	b.n	226d4 <logobj_interface_open+0xbc>
   2271a:	4630      	mov	r0, r6
   2271c:	f008 f85a 	bl	2a7d4 <interface_socket_from_handle_get>
   22720:	b120      	cbz	r0, 2272c <logobj_interface_open+0x114>
   22722:	6844      	ldr	r4, [r0, #4]
   22724:	b114      	cbz	r4, 2272c <logobj_interface_open+0x114>
   22726:	2300      	movs	r3, #0
   22728:	6043      	str	r3, [r0, #4]
   2272a:	e7d3      	b.n	226d4 <logobj_interface_open+0xbc>
   2272c:	4630      	mov	r0, r6
   2272e:	9a01      	ldr	r2, [sp, #4]
   22730:	6813      	ldr	r3, [r2, #0]
   22732:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   22736:	6013      	str	r3, [r2, #0]
   22738:	9a01      	ldr	r2, [sp, #4]
   2273a:	6813      	ldr	r3, [r2, #0]
   2273c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   22740:	6013      	str	r3, [r2, #0]
   22742:	9a01      	ldr	r2, [sp, #4]
   22744:	6813      	ldr	r3, [r2, #0]
   22746:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   2274a:	6013      	str	r3, [r2, #0]
   2274c:	b004      	add	sp, #16
   2274e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   22752:	2016      	movs	r0, #22
   22754:	f7fd fc7a 	bl	2004c <bsd_os_errno_set>
   22758:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2275c:	e7d2      	b.n	22704 <logobj_interface_open+0xec>
   2275e:	2001      	movs	r0, #1
   22760:	f7fd fc74 	bl	2004c <bsd_os_errno_set>
   22764:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   22768:	e7cc      	b.n	22704 <logobj_interface_open+0xec>
   2276a:	2070      	movs	r0, #112	; 0x70
   2276c:	f7fd fc6e 	bl	2004c <bsd_os_errno_set>
   22770:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   22774:	e7c6      	b.n	22704 <logobj_interface_open+0xec>
   22776:	4630      	mov	r0, r6
   22778:	f007 ff6a 	bl	2a650 <interface_socket_free>
   2277c:	e7bb      	b.n	226f6 <logobj_interface_open+0xde>
   2277e:	2018      	movs	r0, #24
   22780:	f7fd fc64 	bl	2004c <bsd_os_errno_set>
   22784:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   22788:	e7bc      	b.n	22704 <logobj_interface_open+0xec>
   2278a:	bf00      	nop
   2278c:	20029082 	.word	0x20029082
   22790:	200224c4 	.word	0x200224c4
   22794:	000224c9 	.word	0x000224c9
   22798:	200224c0 	.word	0x200224c0
   2279c:	20029080 	.word	0x20029080

000227a0 <logobj_interface_read>:
   227a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   227a4:	b087      	sub	sp, #28
   227a6:	2900      	cmp	r1, #0
   227a8:	d06b      	beq.n	22882 <logobj_interface_read+0xe2>
   227aa:	2a00      	cmp	r2, #0
   227ac:	4617      	mov	r7, r2
   227ae:	dd68      	ble.n	22882 <logobj_interface_read+0xe2>
   227b0:	461d      	mov	r5, r3
   227b2:	4680      	mov	r8, r0
   227b4:	460e      	mov	r6, r1
   227b6:	f008 f80d 	bl	2a7d4 <interface_socket_from_handle_get>
   227ba:	4604      	mov	r4, r0
   227bc:	2800      	cmp	r0, #0
   227be:	d066      	beq.n	2288e <logobj_interface_read+0xee>
   227c0:	bb4d      	cbnz	r5, 22816 <logobj_interface_read+0x76>
   227c2:	69e0      	ldr	r0, [r4, #28]
   227c4:	07aa      	lsls	r2, r5, #30
   227c6:	6803      	ldr	r3, [r0, #0]
   227c8:	68db      	ldr	r3, [r3, #12]
   227ca:	d52d      	bpl.n	22828 <logobj_interface_read+0x88>
   227cc:	4798      	blx	r3
   227ce:	3001      	adds	r0, #1
   227d0:	d047      	beq.n	22862 <logobj_interface_read+0xc2>
   227d2:	6823      	ldr	r3, [r4, #0]
   227d4:	69e0      	ldr	r0, [r4, #28]
   227d6:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
   227da:	d044      	beq.n	22866 <logobj_interface_read+0xc6>
   227dc:	2100      	movs	r1, #0
   227de:	6823      	ldr	r3, [r4, #0]
   227e0:	462a      	mov	r2, r5
   227e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   227e6:	6023      	str	r3, [r4, #0]
   227e8:	e9cd 1104 	strd	r1, r1, [sp, #16]
   227ec:	e9cd 6702 	strd	r6, r7, [sp, #8]
   227f0:	6803      	ldr	r3, [r0, #0]
   227f2:	a902      	add	r1, sp, #8
   227f4:	689b      	ldr	r3, [r3, #8]
   227f6:	4798      	blx	r3
   227f8:	4605      	mov	r5, r0
   227fa:	69e0      	ldr	r0, [r4, #28]
   227fc:	6803      	ldr	r3, [r0, #0]
   227fe:	68db      	ldr	r3, [r3, #12]
   22800:	4798      	blx	r3
   22802:	3001      	adds	r0, #1
   22804:	d003      	beq.n	2280e <logobj_interface_read+0x6e>
   22806:	6823      	ldr	r3, [r4, #0]
   22808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2280c:	6023      	str	r3, [r4, #0]
   2280e:	4628      	mov	r0, r5
   22810:	b007      	add	sp, #28
   22812:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   22816:	f015 0f2a 	tst.w	r5, #42	; 0x2a
   2281a:	d1d2      	bne.n	227c2 <logobj_interface_read+0x22>
   2281c:	202d      	movs	r0, #45	; 0x2d
   2281e:	f7fd fc15 	bl	2004c <bsd_os_errno_set>
   22822:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   22826:	e7f2      	b.n	2280e <logobj_interface_read+0x6e>
   22828:	6822      	ldr	r2, [r4, #0]
   2282a:	f012 5980 	ands.w	r9, r2, #268435456	; 0x10000000
   2282e:	d1cd      	bne.n	227cc <logobj_interface_read+0x2c>
   22830:	4798      	blx	r3
   22832:	1c43      	adds	r3, r0, #1
   22834:	d1cd      	bne.n	227d2 <logobj_interface_read+0x32>
   22836:	6a22      	ldr	r2, [r4, #32]
   22838:	ab06      	add	r3, sp, #24
   2283a:	2a00      	cmp	r2, #0
   2283c:	bf18      	it	ne
   2283e:	4610      	movne	r0, r2
   22840:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   22844:	f843 0d14 	str.w	r0, [r3, #-20]!
   22848:	4611      	mov	r1, r2
   2284a:	4640      	mov	r0, r8
   2284c:	f007 ff4e 	bl	2a6ec <interface_socket_wait>
   22850:	b158      	cbz	r0, 2286a <logobj_interface_read+0xca>
   22852:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   22856:	f7fd fbf9 	bl	2004c <bsd_os_errno_set>
   2285a:	4628      	mov	r0, r5
   2285c:	b007      	add	sp, #28
   2285e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   22862:	2023      	movs	r0, #35	; 0x23
   22864:	e7f5      	b.n	22852 <logobj_interface_read+0xb2>
   22866:	461d      	mov	r5, r3
   22868:	e7c8      	b.n	227fc <logobj_interface_read+0x5c>
   2286a:	4640      	mov	r0, r8
   2286c:	f007 ffb2 	bl	2a7d4 <interface_socket_from_handle_get>
   22870:	4603      	mov	r3, r0
   22872:	2800      	cmp	r0, #0
   22874:	d0ad      	beq.n	227d2 <logobj_interface_read+0x32>
   22876:	6840      	ldr	r0, [r0, #4]
   22878:	2800      	cmp	r0, #0
   2287a:	d0aa      	beq.n	227d2 <logobj_interface_read+0x32>
   2287c:	f8c3 9004 	str.w	r9, [r3, #4]
   22880:	e7e7      	b.n	22852 <logobj_interface_read+0xb2>
   22882:	2016      	movs	r0, #22
   22884:	f7fd fbe2 	bl	2004c <bsd_os_errno_set>
   22888:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2288c:	e7bf      	b.n	2280e <logobj_interface_read+0x6e>
   2288e:	2009      	movs	r0, #9
   22890:	f7fd fbdc 	bl	2004c <bsd_os_errno_set>
   22894:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   22898:	e7b9      	b.n	2280e <logobj_interface_read+0x6e>
   2289a:	bf00      	nop

0002289c <logobj_interface_write>:
   2289c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   228a0:	b082      	sub	sp, #8
   228a2:	2900      	cmp	r1, #0
   228a4:	d06b      	beq.n	2297e <logobj_interface_write+0xe2>
   228a6:	2a04      	cmp	r2, #4
   228a8:	d169      	bne.n	2297e <logobj_interface_write+0xe2>
   228aa:	461f      	mov	r7, r3
   228ac:	4606      	mov	r6, r0
   228ae:	460d      	mov	r5, r1
   228b0:	f007 ff90 	bl	2a7d4 <interface_socket_from_handle_get>
   228b4:	4604      	mov	r4, r0
   228b6:	2800      	cmp	r0, #0
   228b8:	d074      	beq.n	229a4 <logobj_interface_write+0x108>
   228ba:	b1e7      	cbz	r7, 228f6 <logobj_interface_write+0x5a>
   228bc:	07b8      	lsls	r0, r7, #30
   228be:	d56b      	bpl.n	22998 <logobj_interface_write+0xfc>
   228c0:	6823      	ldr	r3, [r4, #0]
   228c2:	039b      	lsls	r3, r3, #14
   228c4:	d564      	bpl.n	22990 <logobj_interface_write+0xf4>
   228c6:	2700      	movs	r7, #0
   228c8:	6823      	ldr	r3, [r4, #0]
   228ca:	2100      	movs	r1, #0
   228cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   228d0:	6023      	str	r3, [r4, #0]
   228d2:	4668      	mov	r0, sp
   228d4:	f8d5 8000 	ldr.w	r8, [r5]
   228d8:	f004 fd42 	bl	27360 <rpc_logobj_client_request_alloc>
   228dc:	b198      	cbz	r0, 22906 <logobj_interface_write+0x6a>
   228de:	200c      	movs	r0, #12
   228e0:	6823      	ldr	r3, [r4, #0]
   228e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   228e6:	6023      	str	r3, [r4, #0]
   228e8:	f7fd fbb0 	bl	2004c <bsd_os_errno_set>
   228ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   228f0:	b002      	add	sp, #8
   228f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   228f6:	6803      	ldr	r3, [r0, #0]
   228f8:	00d9      	lsls	r1, r3, #3
   228fa:	d4e1      	bmi.n	228c0 <logobj_interface_write+0x24>
   228fc:	6803      	ldr	r3, [r0, #0]
   228fe:	039a      	lsls	r2, r3, #14
   22900:	d548      	bpl.n	22994 <logobj_interface_write+0xf8>
   22902:	2701      	movs	r7, #1
   22904:	e7e0      	b.n	228c8 <logobj_interface_write+0x2c>
   22906:	2504      	movs	r5, #4
   22908:	9b00      	ldr	r3, [sp, #0]
   2290a:	f247 0103 	movw	r1, #28675	; 0x7003
   2290e:	f8c3 800c 	str.w	r8, [r3, #12]
   22912:	7258      	strb	r0, [r3, #9]
   22914:	7298      	strb	r0, [r3, #10]
   22916:	72d8      	strb	r0, [r3, #11]
   22918:	721d      	strb	r5, [r3, #8]
   2291a:	4618      	mov	r0, r3
   2291c:	f004 fd38 	bl	27390 <rpc_logobj_client_request_send>
   22920:	4680      	mov	r8, r0
   22922:	bb18      	cbnz	r0, 2296c <logobj_interface_write+0xd0>
   22924:	b1d7      	cbz	r7, 2295c <logobj_interface_write+0xc0>
   22926:	6a61      	ldr	r1, [r4, #36]	; 0x24
   22928:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2292c:	2900      	cmp	r1, #0
   2292e:	bf08      	it	eq
   22930:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   22934:	ab02      	add	r3, sp, #8
   22936:	f843 1d04 	str.w	r1, [r3, #-4]!
   2293a:	4630      	mov	r0, r6
   2293c:	4611      	mov	r1, r2
   2293e:	f007 fed5 	bl	2a6ec <interface_socket_wait>
   22942:	b120      	cbz	r0, 2294e <logobj_interface_write+0xb2>
   22944:	6823      	ldr	r3, [r4, #0]
   22946:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2294a:	6023      	str	r3, [r4, #0]
   2294c:	e7cc      	b.n	228e8 <logobj_interface_write+0x4c>
   2294e:	4630      	mov	r0, r6
   22950:	f007 ff40 	bl	2a7d4 <interface_socket_from_handle_get>
   22954:	4603      	mov	r3, r0
   22956:	b108      	cbz	r0, 2295c <logobj_interface_write+0xc0>
   22958:	6840      	ldr	r0, [r0, #4]
   2295a:	b9b0      	cbnz	r0, 2298a <logobj_interface_write+0xee>
   2295c:	4628      	mov	r0, r5
   2295e:	6823      	ldr	r3, [r4, #0]
   22960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   22964:	6023      	str	r3, [r4, #0]
   22966:	b002      	add	sp, #8
   22968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2296c:	9800      	ldr	r0, [sp, #0]
   2296e:	f004 fd25 	bl	273bc <rpc_logobj_client_message_free>
   22972:	6823      	ldr	r3, [r4, #0]
   22974:	2005      	movs	r0, #5
   22976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2297a:	6023      	str	r3, [r4, #0]
   2297c:	e7b4      	b.n	228e8 <logobj_interface_write+0x4c>
   2297e:	2016      	movs	r0, #22
   22980:	f7fd fb64 	bl	2004c <bsd_os_errno_set>
   22984:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22988:	e7b2      	b.n	228f0 <logobj_interface_write+0x54>
   2298a:	f8c3 8004 	str.w	r8, [r3, #4]
   2298e:	e7d9      	b.n	22944 <logobj_interface_write+0xa8>
   22990:	2073      	movs	r0, #115	; 0x73
   22992:	e7a9      	b.n	228e8 <logobj_interface_write+0x4c>
   22994:	2009      	movs	r0, #9
   22996:	e7a7      	b.n	228e8 <logobj_interface_write+0x4c>
   22998:	202d      	movs	r0, #45	; 0x2d
   2299a:	f7fd fb57 	bl	2004c <bsd_os_errno_set>
   2299e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   229a2:	e7a5      	b.n	228f0 <logobj_interface_write+0x54>
   229a4:	2009      	movs	r0, #9
   229a6:	f7fd fb51 	bl	2004c <bsd_os_errno_set>
   229aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   229ae:	e79f      	b.n	228f0 <logobj_interface_write+0x54>

000229b0 <logobj_interface_setopt>:
   229b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   229b2:	2901      	cmp	r1, #1
   229b4:	b085      	sub	sp, #20
   229b6:	d06d      	beq.n	22a94 <logobj_interface_setopt+0xe4>
   229b8:	461e      	mov	r6, r3
   229ba:	f240 2305 	movw	r3, #517	; 0x205
   229be:	4299      	cmp	r1, r3
   229c0:	f040 80a0 	bne.w	22b04 <logobj_interface_setopt+0x154>
   229c4:	4607      	mov	r7, r0
   229c6:	4615      	mov	r5, r2
   229c8:	f007 ff04 	bl	2a7d4 <interface_socket_from_handle_get>
   229cc:	4604      	mov	r4, r0
   229ce:	2800      	cmp	r0, #0
   229d0:	f000 80c3 	beq.w	22b5a <logobj_interface_setopt+0x1aa>
   229d4:	2d01      	cmp	r5, #1
   229d6:	d019      	beq.n	22a0c <logobj_interface_setopt+0x5c>
   229d8:	2d02      	cmp	r5, #2
   229da:	d010      	beq.n	229fe <logobj_interface_setopt+0x4e>
   229dc:	252a      	movs	r5, #42	; 0x2a
   229de:	6803      	ldr	r3, [r0, #0]
   229e0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   229e4:	6023      	str	r3, [r4, #0]
   229e6:	6823      	ldr	r3, [r4, #0]
   229e8:	4628      	mov	r0, r5
   229ea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   229ee:	6023      	str	r3, [r4, #0]
   229f0:	f7fd fb2c 	bl	2004c <bsd_os_errno_set>
   229f4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   229f8:	4628      	mov	r0, r5
   229fa:	b005      	add	sp, #20
   229fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   229fe:	b116      	cbz	r6, 22a06 <logobj_interface_setopt+0x56>
   22a00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   22a02:	2b01      	cmp	r3, #1
   22a04:	d04e      	beq.n	22aa4 <logobj_interface_setopt+0xf4>
   22a06:	6823      	ldr	r3, [r4, #0]
   22a08:	2516      	movs	r5, #22
   22a0a:	e7e9      	b.n	229e0 <logobj_interface_setopt+0x30>
   22a0c:	2e00      	cmp	r6, #0
   22a0e:	d0fa      	beq.n	22a06 <logobj_interface_setopt+0x56>
   22a10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   22a12:	2b04      	cmp	r3, #4
   22a14:	d1f7      	bne.n	22a06 <logobj_interface_setopt+0x56>
   22a16:	2100      	movs	r1, #0
   22a18:	a803      	add	r0, sp, #12
   22a1a:	f004 fca1 	bl	27360 <rpc_logobj_client_request_alloc>
   22a1e:	4605      	mov	r5, r0
   22a20:	2800      	cmp	r0, #0
   22a22:	d175      	bne.n	22b10 <logobj_interface_setopt+0x160>
   22a24:	9803      	ldr	r0, [sp, #12]
   22a26:	2208      	movs	r2, #8
   22a28:	4629      	mov	r1, r5
   22a2a:	300c      	adds	r0, #12
   22a2c:	f016 fb03 	bl	39036 <memset>
   22a30:	9803      	ldr	r0, [sp, #12]
   22a32:	4631      	mov	r1, r6
   22a34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   22a36:	300c      	adds	r0, #12
   22a38:	f016 fac3 	bl	38fc2 <memcpy>
   22a3c:	2308      	movs	r3, #8
   22a3e:	9803      	ldr	r0, [sp, #12]
   22a40:	f247 0102 	movw	r1, #28674	; 0x7002
   22a44:	7203      	strb	r3, [r0, #8]
   22a46:	7245      	strb	r5, [r0, #9]
   22a48:	7285      	strb	r5, [r0, #10]
   22a4a:	72c5      	strb	r5, [r0, #11]
   22a4c:	6823      	ldr	r3, [r4, #0]
   22a4e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   22a52:	6023      	str	r3, [r4, #0]
   22a54:	f004 fc9c 	bl	27390 <rpc_logobj_client_request_send>
   22a58:	2800      	cmp	r0, #0
   22a5a:	d178      	bne.n	22b4e <logobj_interface_setopt+0x19e>
   22a5c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   22a5e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   22a62:	2900      	cmp	r1, #0
   22a64:	bf08      	it	eq
   22a66:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   22a6a:	ab04      	add	r3, sp, #16
   22a6c:	f843 1d08 	str.w	r1, [r3, #-8]!
   22a70:	4638      	mov	r0, r7
   22a72:	4611      	mov	r1, r2
   22a74:	f007 fe3a 	bl	2a6ec <interface_socket_wait>
   22a78:	4605      	mov	r5, r0
   22a7a:	2800      	cmp	r0, #0
   22a7c:	d140      	bne.n	22b00 <logobj_interface_setopt+0x150>
   22a7e:	4638      	mov	r0, r7
   22a80:	f007 fea8 	bl	2a7d4 <interface_socket_from_handle_get>
   22a84:	2800      	cmp	r0, #0
   22a86:	d04e      	beq.n	22b26 <logobj_interface_setopt+0x176>
   22a88:	6843      	ldr	r3, [r0, #4]
   22a8a:	2b00      	cmp	r3, #0
   22a8c:	d04b      	beq.n	22b26 <logobj_interface_setopt+0x176>
   22a8e:	6045      	str	r5, [r0, #4]
   22a90:	461d      	mov	r5, r3
   22a92:	e035      	b.n	22b00 <logobj_interface_setopt+0x150>
   22a94:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   22a96:	9400      	str	r4, [sp, #0]
   22a98:	f007 fec4 	bl	2a824 <interface_socket_setopt>
   22a9c:	4605      	mov	r5, r0
   22a9e:	4628      	mov	r0, r5
   22aa0:	b005      	add	sp, #20
   22aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22aa4:	2100      	movs	r1, #0
   22aa6:	a802      	add	r0, sp, #8
   22aa8:	7835      	ldrb	r5, [r6, #0]
   22aaa:	f004 fc59 	bl	27360 <rpc_logobj_client_request_alloc>
   22aae:	bb78      	cbnz	r0, 22b10 <logobj_interface_setopt+0x160>
   22ab0:	2d01      	cmp	r5, #1
   22ab2:	bf08      	it	eq
   22ab4:	4b2c      	ldreq	r3, [pc, #176]	; (22b68 <logobj_interface_setopt+0x1b8>)
   22ab6:	f04f 0204 	mov.w	r2, #4
   22aba:	bf08      	it	eq
   22abc:	701d      	strbeq	r5, [r3, #0]
   22abe:	2300      	movs	r3, #0
   22ac0:	9802      	ldr	r0, [sp, #8]
   22ac2:	f247 0101 	movw	r1, #28673	; 0x7001
   22ac6:	7243      	strb	r3, [r0, #9]
   22ac8:	60c5      	str	r5, [r0, #12]
   22aca:	7283      	strb	r3, [r0, #10]
   22acc:	72c3      	strb	r3, [r0, #11]
   22ace:	7202      	strb	r2, [r0, #8]
   22ad0:	6823      	ldr	r3, [r4, #0]
   22ad2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   22ad6:	6023      	str	r3, [r4, #0]
   22ad8:	f004 fc5a 	bl	27390 <rpc_logobj_client_request_send>
   22adc:	4606      	mov	r6, r0
   22ade:	bb80      	cbnz	r0, 22b42 <logobj_interface_setopt+0x192>
   22ae0:	6a61      	ldr	r1, [r4, #36]	; 0x24
   22ae2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   22ae6:	2900      	cmp	r1, #0
   22ae8:	bf08      	it	eq
   22aea:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   22aee:	ab04      	add	r3, sp, #16
   22af0:	f843 1d04 	str.w	r1, [r3, #-4]!
   22af4:	4638      	mov	r0, r7
   22af6:	4611      	mov	r1, r2
   22af8:	f007 fdf8 	bl	2a6ec <interface_socket_wait>
   22afc:	4605      	mov	r5, r0
   22afe:	b150      	cbz	r0, 22b16 <logobj_interface_setopt+0x166>
   22b00:	6823      	ldr	r3, [r4, #0]
   22b02:	e76d      	b.n	229e0 <logobj_interface_setopt+0x30>
   22b04:	202a      	movs	r0, #42	; 0x2a
   22b06:	f7fd faa1 	bl	2004c <bsd_os_errno_set>
   22b0a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   22b0e:	e773      	b.n	229f8 <logobj_interface_setopt+0x48>
   22b10:	6823      	ldr	r3, [r4, #0]
   22b12:	250c      	movs	r5, #12
   22b14:	e764      	b.n	229e0 <logobj_interface_setopt+0x30>
   22b16:	4638      	mov	r0, r7
   22b18:	f007 fe5c 	bl	2a7d4 <interface_socket_from_handle_get>
   22b1c:	b140      	cbz	r0, 22b30 <logobj_interface_setopt+0x180>
   22b1e:	6845      	ldr	r5, [r0, #4]
   22b20:	b135      	cbz	r5, 22b30 <logobj_interface_setopt+0x180>
   22b22:	6046      	str	r6, [r0, #4]
   22b24:	e7ec      	b.n	22b00 <logobj_interface_setopt+0x150>
   22b26:	4631      	mov	r1, r6
   22b28:	2204      	movs	r2, #4
   22b2a:	4810      	ldr	r0, [pc, #64]	; (22b6c <logobj_interface_setopt+0x1bc>)
   22b2c:	f016 fa49 	bl	38fc2 <memcpy>
   22b30:	6823      	ldr	r3, [r4, #0]
   22b32:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   22b36:	6023      	str	r3, [r4, #0]
   22b38:	6823      	ldr	r3, [r4, #0]
   22b3a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   22b3e:	6023      	str	r3, [r4, #0]
   22b40:	e75a      	b.n	229f8 <logobj_interface_setopt+0x48>
   22b42:	9802      	ldr	r0, [sp, #8]
   22b44:	f004 fc3a 	bl	273bc <rpc_logobj_client_message_free>
   22b48:	2505      	movs	r5, #5
   22b4a:	6823      	ldr	r3, [r4, #0]
   22b4c:	e748      	b.n	229e0 <logobj_interface_setopt+0x30>
   22b4e:	9803      	ldr	r0, [sp, #12]
   22b50:	f004 fc34 	bl	273bc <rpc_logobj_client_message_free>
   22b54:	2505      	movs	r5, #5
   22b56:	6823      	ldr	r3, [r4, #0]
   22b58:	e742      	b.n	229e0 <logobj_interface_setopt+0x30>
   22b5a:	2009      	movs	r0, #9
   22b5c:	f7fd fa76 	bl	2004c <bsd_os_errno_set>
   22b60:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   22b64:	e748      	b.n	229f8 <logobj_interface_setopt+0x48>
   22b66:	bf00      	nop
   22b68:	20029080 	.word	0x20029080
   22b6c:	200224c0 	.word	0x200224c0

00022b70 <logobj_interface_getopt>:
   22b70:	b5f0      	push	{r4, r5, r6, r7, lr}
   22b72:	2901      	cmp	r1, #1
   22b74:	b083      	sub	sp, #12
   22b76:	9e08      	ldr	r6, [sp, #32]
   22b78:	d030      	beq.n	22bdc <logobj_interface_getopt+0x6c>
   22b7a:	461f      	mov	r7, r3
   22b7c:	f240 2305 	movw	r3, #517	; 0x205
   22b80:	4299      	cmp	r1, r3
   22b82:	d134      	bne.n	22bee <logobj_interface_getopt+0x7e>
   22b84:	4615      	mov	r5, r2
   22b86:	f007 fe25 	bl	2a7d4 <interface_socket_from_handle_get>
   22b8a:	2800      	cmp	r0, #0
   22b8c:	d037      	beq.n	22bfe <logobj_interface_getopt+0x8e>
   22b8e:	2d01      	cmp	r5, #1
   22b90:	d015      	beq.n	22bbe <logobj_interface_getopt+0x4e>
   22b92:	2d02      	cmp	r5, #2
   22b94:	d10b      	bne.n	22bae <logobj_interface_getopt+0x3e>
   22b96:	b387      	cbz	r7, 22bfa <logobj_interface_getopt+0x8a>
   22b98:	6833      	ldr	r3, [r6, #0]
   22b9a:	b373      	cbz	r3, 22bfa <logobj_interface_getopt+0x8a>
   22b9c:	2300      	movs	r3, #0
   22b9e:	2201      	movs	r2, #1
   22ba0:	4618      	mov	r0, r3
   22ba2:	491a      	ldr	r1, [pc, #104]	; (22c0c <logobj_interface_getopt+0x9c>)
   22ba4:	7809      	ldrb	r1, [r1, #0]
   22ba6:	7039      	strb	r1, [r7, #0]
   22ba8:	6032      	str	r2, [r6, #0]
   22baa:	b003      	add	sp, #12
   22bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22bae:	2009      	movs	r0, #9
   22bb0:	f7fd fa4c 	bl	2004c <bsd_os_errno_set>
   22bb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22bb8:	4618      	mov	r0, r3
   22bba:	b003      	add	sp, #12
   22bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22bbe:	b1e7      	cbz	r7, 22bfa <logobj_interface_getopt+0x8a>
   22bc0:	6833      	ldr	r3, [r6, #0]
   22bc2:	2b03      	cmp	r3, #3
   22bc4:	d919      	bls.n	22bfa <logobj_interface_getopt+0x8a>
   22bc6:	4638      	mov	r0, r7
   22bc8:	2204      	movs	r2, #4
   22bca:	4911      	ldr	r1, [pc, #68]	; (22c10 <logobj_interface_getopt+0xa0>)
   22bcc:	f016 f9f9 	bl	38fc2 <memcpy>
   22bd0:	2300      	movs	r3, #0
   22bd2:	2204      	movs	r2, #4
   22bd4:	4618      	mov	r0, r3
   22bd6:	6032      	str	r2, [r6, #0]
   22bd8:	b003      	add	sp, #12
   22bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22bdc:	9600      	str	r6, [sp, #0]
   22bde:	f007 fe67 	bl	2a8b0 <interface_socket_getopt>
   22be2:	4603      	mov	r3, r0
   22be4:	2800      	cmp	r0, #0
   22be6:	d1e3      	bne.n	22bb0 <logobj_interface_getopt+0x40>
   22be8:	4618      	mov	r0, r3
   22bea:	b003      	add	sp, #12
   22bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22bee:	202a      	movs	r0, #42	; 0x2a
   22bf0:	f7fd fa2c 	bl	2004c <bsd_os_errno_set>
   22bf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22bf8:	e7de      	b.n	22bb8 <logobj_interface_getopt+0x48>
   22bfa:	2016      	movs	r0, #22
   22bfc:	e7d8      	b.n	22bb0 <logobj_interface_getopt+0x40>
   22bfe:	2009      	movs	r0, #9
   22c00:	f7fd fa24 	bl	2004c <bsd_os_errno_set>
   22c04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22c08:	e7d6      	b.n	22bb8 <logobj_interface_getopt+0x48>
   22c0a:	bf00      	nop
   22c0c:	20029081 	.word	0x20029081
   22c10:	200224c0 	.word	0x200224c0

00022c14 <logobj_interface_close>:
   22c14:	b510      	push	{r4, lr}
   22c16:	4604      	mov	r4, r0
   22c18:	f007 fddc 	bl	2a7d4 <interface_socket_from_handle_get>
   22c1c:	b138      	cbz	r0, 22c2e <logobj_interface_close+0x1a>
   22c1e:	4620      	mov	r0, r4
   22c20:	f007 fd16 	bl	2a650 <interface_socket_free>
   22c24:	2300      	movs	r3, #0
   22c26:	4a05      	ldr	r2, [pc, #20]	; (22c3c <logobj_interface_close+0x28>)
   22c28:	4618      	mov	r0, r3
   22c2a:	6013      	str	r3, [r2, #0]
   22c2c:	bd10      	pop	{r4, pc}
   22c2e:	2009      	movs	r0, #9
   22c30:	f7fd fa0c 	bl	2004c <bsd_os_errno_set>
   22c34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22c38:	bd10      	pop	{r4, pc}
   22c3a:	bf00      	nop
   22c3c:	200224c4 	.word	0x200224c4

00022c40 <rpc_transport_send>:
   22c40:	f000 bece 	b.w	239e0 <rpc_transport_ipc_send>

00022c44 <rpc_transport_rpc_alloc>:
   22c44:	f000 bf4e 	b.w	23ae4 <rpc_transport_ipc_tx_rpc_data_alloc>

00022c48 <rpc_transport_data_alloc>:
   22c48:	f000 bfb4 	b.w	23bb4 <rpc_transport_ipc_tx_data_alloc>

00022c4c <rpc_transport_rpc_free>:
   22c4c:	f000 bdac 	b.w	237a8 <rpc_transport_ipc_msg_free>

00022c50 <rpc_transport_data_free>:
   22c50:	f000 ba64 	b.w	2311c <rpc_transport_ipc_data_free>

00022c54 <ipc_trace_init>:
   22c54:	4b01      	ldr	r3, [pc, #4]	; (22c5c <ipc_trace_init+0x8>)
   22c56:	6018      	str	r0, [r3, #0]
   22c58:	4770      	bx	lr
   22c5a:	bf00      	nop
   22c5c:	200224d4 	.word	0x200224d4

00022c60 <bsd_os_trace_irq_handler>:
   22c60:	b5f0      	push	{r4, r5, r6, r7, lr}
   22c62:	4b6e      	ldr	r3, [pc, #440]	; (22e1c <bsd_os_trace_irq_handler+0x1bc>)
   22c64:	b083      	sub	sp, #12
   22c66:	781b      	ldrb	r3, [r3, #0]
   22c68:	2b00      	cmp	r3, #0
   22c6a:	f000 80d3 	beq.w	22e14 <bsd_os_trace_irq_handler+0x1b4>
   22c6e:	4b6c      	ldr	r3, [pc, #432]	; (22e20 <bsd_os_trace_irq_handler+0x1c0>)
   22c70:	681c      	ldr	r4, [r3, #0]
   22c72:	b124      	cbz	r4, 22c7e <bsd_os_trace_irq_handler+0x1e>
   22c74:	68a3      	ldr	r3, [r4, #8]
   22c76:	6862      	ldr	r2, [r4, #4]
   22c78:	4293      	cmp	r3, r2
   22c7a:	f040 808c 	bne.w	22d96 <bsd_os_trace_irq_handler+0x136>
   22c7e:	4b69      	ldr	r3, [pc, #420]	; (22e24 <bsd_os_trace_irq_handler+0x1c4>)
   22c80:	681c      	ldr	r4, [r3, #0]
   22c82:	b11c      	cbz	r4, 22c8c <bsd_os_trace_irq_handler+0x2c>
   22c84:	68a3      	ldr	r3, [r4, #8]
   22c86:	6862      	ldr	r2, [r4, #4]
   22c88:	4293      	cmp	r3, r2
   22c8a:	d146      	bne.n	22d1a <bsd_os_trace_irq_handler+0xba>
   22c8c:	4b66      	ldr	r3, [pc, #408]	; (22e28 <bsd_os_trace_irq_handler+0x1c8>)
   22c8e:	681c      	ldr	r4, [r3, #0]
   22c90:	b11c      	cbz	r4, 22c9a <bsd_os_trace_irq_handler+0x3a>
   22c92:	68a3      	ldr	r3, [r4, #8]
   22c94:	6862      	ldr	r2, [r4, #4]
   22c96:	4293      	cmp	r3, r2
   22c98:	d101      	bne.n	22c9e <bsd_os_trace_irq_handler+0x3e>
   22c9a:	b003      	add	sp, #12
   22c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22c9e:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   22ca2:	f8ad 2000 	strh.w	r2, [sp]
   22ca6:	7822      	ldrb	r2, [r4, #0]
   22ca8:	466e      	mov	r6, sp
   22caa:	f88d 2004 	strb.w	r2, [sp, #4]
   22cae:	6862      	ldr	r2, [r4, #4]
   22cb0:	2105      	movs	r1, #5
   22cb2:	4293      	cmp	r3, r2
   22cb4:	bf2a      	itet	cs
   22cb6:	6927      	ldrcs	r7, [r4, #16]
   22cb8:	1ad7      	subcc	r7, r2, r3
   22cba:	1aff      	subcs	r7, r7, r3
   22cbc:	4293      	cmp	r3, r2
   22cbe:	bf94      	ite	ls
   22cc0:	2500      	movls	r5, #0
   22cc2:	68e5      	ldrhi	r5, [r4, #12]
   22cc4:	b2bf      	uxth	r7, r7
   22cc6:	bf88      	it	hi
   22cc8:	1b52      	subhi	r2, r2, r5
   22cca:	4630      	mov	r0, r6
   22ccc:	bf88      	it	hi
   22cce:	b295      	uxthhi	r5, r2
   22cd0:	f8ad 7002 	strh.w	r7, [sp, #2]
   22cd4:	f015 fa46 	bl	38164 <bsd_os_trace_put>
   22cd8:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   22cdc:	68a0      	ldr	r0, [r4, #8]
   22cde:	f015 fa41 	bl	38164 <bsd_os_trace_put>
   22ce2:	68a3      	ldr	r3, [r4, #8]
   22ce4:	6922      	ldr	r2, [r4, #16]
   22ce6:	441f      	add	r7, r3
   22ce8:	4297      	cmp	r7, r2
   22cea:	bf08      	it	eq
   22cec:	68e3      	ldreq	r3, [r4, #12]
   22cee:	60a7      	str	r7, [r4, #8]
   22cf0:	bf08      	it	eq
   22cf2:	60a3      	streq	r3, [r4, #8]
   22cf4:	2d00      	cmp	r5, #0
   22cf6:	d0d0      	beq.n	22c9a <bsd_os_trace_irq_handler+0x3a>
   22cf8:	2105      	movs	r1, #5
   22cfa:	4630      	mov	r0, r6
   22cfc:	f8ad 5002 	strh.w	r5, [sp, #2]
   22d00:	f015 fa30 	bl	38164 <bsd_os_trace_put>
   22d04:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   22d08:	68e0      	ldr	r0, [r4, #12]
   22d0a:	f015 fa2b 	bl	38164 <bsd_os_trace_put>
   22d0e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   22d12:	68e3      	ldr	r3, [r4, #12]
   22d14:	4413      	add	r3, r2
   22d16:	60a3      	str	r3, [r4, #8]
   22d18:	e7bf      	b.n	22c9a <bsd_os_trace_irq_handler+0x3a>
   22d1a:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   22d1e:	f8ad 2000 	strh.w	r2, [sp]
   22d22:	7822      	ldrb	r2, [r4, #0]
   22d24:	466e      	mov	r6, sp
   22d26:	f88d 2004 	strb.w	r2, [sp, #4]
   22d2a:	6862      	ldr	r2, [r4, #4]
   22d2c:	2105      	movs	r1, #5
   22d2e:	4293      	cmp	r3, r2
   22d30:	bf2a      	itet	cs
   22d32:	6927      	ldrcs	r7, [r4, #16]
   22d34:	1ad7      	subcc	r7, r2, r3
   22d36:	1aff      	subcs	r7, r7, r3
   22d38:	4293      	cmp	r3, r2
   22d3a:	bf94      	ite	ls
   22d3c:	2500      	movls	r5, #0
   22d3e:	68e5      	ldrhi	r5, [r4, #12]
   22d40:	b2bf      	uxth	r7, r7
   22d42:	bf88      	it	hi
   22d44:	1b52      	subhi	r2, r2, r5
   22d46:	4630      	mov	r0, r6
   22d48:	bf88      	it	hi
   22d4a:	b295      	uxthhi	r5, r2
   22d4c:	f8ad 7002 	strh.w	r7, [sp, #2]
   22d50:	f015 fa08 	bl	38164 <bsd_os_trace_put>
   22d54:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   22d58:	68a0      	ldr	r0, [r4, #8]
   22d5a:	f015 fa03 	bl	38164 <bsd_os_trace_put>
   22d5e:	68a3      	ldr	r3, [r4, #8]
   22d60:	6922      	ldr	r2, [r4, #16]
   22d62:	441f      	add	r7, r3
   22d64:	4297      	cmp	r7, r2
   22d66:	bf08      	it	eq
   22d68:	68e3      	ldreq	r3, [r4, #12]
   22d6a:	60a7      	str	r7, [r4, #8]
   22d6c:	bf08      	it	eq
   22d6e:	60a3      	streq	r3, [r4, #8]
   22d70:	2d00      	cmp	r5, #0
   22d72:	d08b      	beq.n	22c8c <bsd_os_trace_irq_handler+0x2c>
   22d74:	2105      	movs	r1, #5
   22d76:	4630      	mov	r0, r6
   22d78:	f8ad 5002 	strh.w	r5, [sp, #2]
   22d7c:	f015 f9f2 	bl	38164 <bsd_os_trace_put>
   22d80:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   22d84:	68e0      	ldr	r0, [r4, #12]
   22d86:	f015 f9ed 	bl	38164 <bsd_os_trace_put>
   22d8a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   22d8e:	68e3      	ldr	r3, [r4, #12]
   22d90:	4413      	add	r3, r2
   22d92:	60a3      	str	r3, [r4, #8]
   22d94:	e77a      	b.n	22c8c <bsd_os_trace_irq_handler+0x2c>
   22d96:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   22d9a:	f8ad 2000 	strh.w	r2, [sp]
   22d9e:	7822      	ldrb	r2, [r4, #0]
   22da0:	466e      	mov	r6, sp
   22da2:	f88d 2004 	strb.w	r2, [sp, #4]
   22da6:	6862      	ldr	r2, [r4, #4]
   22da8:	2105      	movs	r1, #5
   22daa:	4293      	cmp	r3, r2
   22dac:	bf2a      	itet	cs
   22dae:	6927      	ldrcs	r7, [r4, #16]
   22db0:	1ad7      	subcc	r7, r2, r3
   22db2:	1aff      	subcs	r7, r7, r3
   22db4:	4293      	cmp	r3, r2
   22db6:	bf94      	ite	ls
   22db8:	2500      	movls	r5, #0
   22dba:	68e5      	ldrhi	r5, [r4, #12]
   22dbc:	b2bf      	uxth	r7, r7
   22dbe:	bf88      	it	hi
   22dc0:	1b52      	subhi	r2, r2, r5
   22dc2:	4630      	mov	r0, r6
   22dc4:	bf88      	it	hi
   22dc6:	b295      	uxthhi	r5, r2
   22dc8:	f8ad 7002 	strh.w	r7, [sp, #2]
   22dcc:	f015 f9ca 	bl	38164 <bsd_os_trace_put>
   22dd0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   22dd4:	68a0      	ldr	r0, [r4, #8]
   22dd6:	f015 f9c5 	bl	38164 <bsd_os_trace_put>
   22dda:	68a3      	ldr	r3, [r4, #8]
   22ddc:	6922      	ldr	r2, [r4, #16]
   22dde:	441f      	add	r7, r3
   22de0:	4297      	cmp	r7, r2
   22de2:	bf08      	it	eq
   22de4:	68e3      	ldreq	r3, [r4, #12]
   22de6:	60a7      	str	r7, [r4, #8]
   22de8:	bf08      	it	eq
   22dea:	60a3      	streq	r3, [r4, #8]
   22dec:	2d00      	cmp	r5, #0
   22dee:	f43f af46 	beq.w	22c7e <bsd_os_trace_irq_handler+0x1e>
   22df2:	2105      	movs	r1, #5
   22df4:	4630      	mov	r0, r6
   22df6:	f8ad 5002 	strh.w	r5, [sp, #2]
   22dfa:	f015 f9b3 	bl	38164 <bsd_os_trace_put>
   22dfe:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   22e02:	68e0      	ldr	r0, [r4, #12]
   22e04:	f015 f9ae 	bl	38164 <bsd_os_trace_put>
   22e08:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   22e0c:	68e3      	ldr	r3, [r4, #12]
   22e0e:	4413      	add	r3, r2
   22e10:	60a3      	str	r3, [r4, #8]
   22e12:	e734      	b.n	22c7e <bsd_os_trace_irq_handler+0x1e>
   22e14:	f7fd fa2a 	bl	2026c <bsd_os_trace_irq_clear>
   22e18:	e729      	b.n	22c6e <bsd_os_trace_irq_handler+0xe>
   22e1a:	bf00      	nop
   22e1c:	20029083 	.word	0x20029083
   22e20:	200224d0 	.word	0x200224d0
   22e24:	200224c8 	.word	0x200224c8
   22e28:	200224cc 	.word	0x200224cc

00022e2c <ipc_trace_handle>:
   22e2c:	2200      	movs	r2, #0
   22e2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22e32:	4bb2      	ldr	r3, [pc, #712]	; (230fc <ipc_trace_handle+0x2d0>)
   22e34:	b083      	sub	sp, #12
   22e36:	681b      	ldr	r3, [r3, #0]
   22e38:	6919      	ldr	r1, [r3, #16]
   22e3a:	695c      	ldr	r4, [r3, #20]
   22e3c:	7c18      	ldrb	r0, [r3, #16]
   22e3e:	741a      	strb	r2, [r3, #16]
   22e40:	7c58      	ldrb	r0, [r3, #17]
   22e42:	745a      	strb	r2, [r3, #17]
   22e44:	7c98      	ldrb	r0, [r3, #18]
   22e46:	749a      	strb	r2, [r3, #18]
   22e48:	7cd8      	ldrb	r0, [r3, #19]
   22e4a:	74da      	strb	r2, [r3, #19]
   22e4c:	7d18      	ldrb	r0, [r3, #20]
   22e4e:	751a      	strb	r2, [r3, #20]
   22e50:	7d58      	ldrb	r0, [r3, #21]
   22e52:	755a      	strb	r2, [r3, #21]
   22e54:	7d98      	ldrb	r0, [r3, #22]
   22e56:	759a      	strb	r2, [r3, #22]
   22e58:	7dd8      	ldrb	r0, [r3, #23]
   22e5a:	75da      	strb	r2, [r3, #23]
   22e5c:	b1a9      	cbz	r1, 22e8a <ipc_trace_handle+0x5e>
   22e5e:	3901      	subs	r1, #1
   22e60:	2903      	cmp	r1, #3
   22e62:	d812      	bhi.n	22e8a <ipc_trace_handle+0x5e>
   22e64:	e8df f001 	tbb	[pc, r1]
   22e68:	1402a97c 	.word	0x1402a97c
   22e6c:	2501      	movs	r5, #1
   22e6e:	2003      	movs	r0, #3
   22e70:	2200      	movs	r2, #0
   22e72:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   22e76:	4ca2      	ldr	r4, [pc, #648]	; (23100 <ipc_trace_handle+0x2d4>)
   22e78:	7025      	strb	r5, [r4, #0]
   22e7a:	7a1c      	ldrb	r4, [r3, #8]
   22e7c:	7218      	strb	r0, [r3, #8]
   22e7e:	7a58      	ldrb	r0, [r3, #9]
   22e80:	725a      	strb	r2, [r3, #9]
   22e82:	7a98      	ldrb	r0, [r3, #10]
   22e84:	729a      	strb	r2, [r3, #10]
   22e86:	7ada      	ldrb	r2, [r3, #11]
   22e88:	72d9      	strb	r1, [r3, #11]
   22e8a:	b003      	add	sp, #12
   22e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22e90:	2104      	movs	r1, #4
   22e92:	2200      	movs	r2, #0
   22e94:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   22e98:	7a1c      	ldrb	r4, [r3, #8]
   22e9a:	7219      	strb	r1, [r3, #8]
   22e9c:	7a59      	ldrb	r1, [r3, #9]
   22e9e:	725a      	strb	r2, [r3, #9]
   22ea0:	4997      	ldr	r1, [pc, #604]	; (23100 <ipc_trace_handle+0x2d4>)
   22ea2:	7a9c      	ldrb	r4, [r3, #10]
   22ea4:	729a      	strb	r2, [r3, #10]
   22ea6:	7adc      	ldrb	r4, [r3, #11]
   22ea8:	72d8      	strb	r0, [r3, #11]
   22eaa:	700a      	strb	r2, [r1, #0]
   22eac:	780b      	ldrb	r3, [r1, #0]
   22eae:	2b00      	cmp	r3, #0
   22eb0:	f000 809f 	beq.w	22ff2 <ipc_trace_handle+0x1c6>
   22eb4:	4b93      	ldr	r3, [pc, #588]	; (23104 <ipc_trace_handle+0x2d8>)
   22eb6:	681c      	ldr	r4, [r3, #0]
   22eb8:	b124      	cbz	r4, 22ec4 <ipc_trace_handle+0x98>
   22eba:	68a3      	ldr	r3, [r4, #8]
   22ebc:	6862      	ldr	r2, [r4, #4]
   22ebe:	4293      	cmp	r3, r2
   22ec0:	f040 80d9 	bne.w	23076 <ipc_trace_handle+0x24a>
   22ec4:	4b90      	ldr	r3, [pc, #576]	; (23108 <ipc_trace_handle+0x2dc>)
   22ec6:	681c      	ldr	r4, [r3, #0]
   22ec8:	b124      	cbz	r4, 22ed4 <ipc_trace_handle+0xa8>
   22eca:	68a3      	ldr	r3, [r4, #8]
   22ecc:	6862      	ldr	r2, [r4, #4]
   22ece:	4293      	cmp	r3, r2
   22ed0:	f040 8092 	bne.w	22ff8 <ipc_trace_handle+0x1cc>
   22ed4:	4b8d      	ldr	r3, [pc, #564]	; (2310c <ipc_trace_handle+0x2e0>)
   22ed6:	681c      	ldr	r4, [r3, #0]
   22ed8:	2c00      	cmp	r4, #0
   22eda:	d0d6      	beq.n	22e8a <ipc_trace_handle+0x5e>
   22edc:	68a3      	ldr	r3, [r4, #8]
   22ede:	6862      	ldr	r2, [r4, #4]
   22ee0:	4293      	cmp	r3, r2
   22ee2:	d0d2      	beq.n	22e8a <ipc_trace_handle+0x5e>
   22ee4:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   22ee8:	f8ad 2000 	strh.w	r2, [sp]
   22eec:	7822      	ldrb	r2, [r4, #0]
   22eee:	466e      	mov	r6, sp
   22ef0:	f88d 2004 	strb.w	r2, [sp, #4]
   22ef4:	6862      	ldr	r2, [r4, #4]
   22ef6:	2105      	movs	r1, #5
   22ef8:	4293      	cmp	r3, r2
   22efa:	bf2a      	itet	cs
   22efc:	6927      	ldrcs	r7, [r4, #16]
   22efe:	1ad7      	subcc	r7, r2, r3
   22f00:	1aff      	subcs	r7, r7, r3
   22f02:	4293      	cmp	r3, r2
   22f04:	bf94      	ite	ls
   22f06:	2500      	movls	r5, #0
   22f08:	68e5      	ldrhi	r5, [r4, #12]
   22f0a:	b2bf      	uxth	r7, r7
   22f0c:	bf88      	it	hi
   22f0e:	1b52      	subhi	r2, r2, r5
   22f10:	4630      	mov	r0, r6
   22f12:	bf88      	it	hi
   22f14:	b295      	uxthhi	r5, r2
   22f16:	f8ad 7002 	strh.w	r7, [sp, #2]
   22f1a:	f015 f923 	bl	38164 <bsd_os_trace_put>
   22f1e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   22f22:	68a0      	ldr	r0, [r4, #8]
   22f24:	f015 f91e 	bl	38164 <bsd_os_trace_put>
   22f28:	68a3      	ldr	r3, [r4, #8]
   22f2a:	6922      	ldr	r2, [r4, #16]
   22f2c:	441f      	add	r7, r3
   22f2e:	4297      	cmp	r7, r2
   22f30:	bf08      	it	eq
   22f32:	68e3      	ldreq	r3, [r4, #12]
   22f34:	60a7      	str	r7, [r4, #8]
   22f36:	bf08      	it	eq
   22f38:	60a3      	streq	r3, [r4, #8]
   22f3a:	2d00      	cmp	r5, #0
   22f3c:	d0a5      	beq.n	22e8a <ipc_trace_handle+0x5e>
   22f3e:	2105      	movs	r1, #5
   22f40:	4630      	mov	r0, r6
   22f42:	f8ad 5002 	strh.w	r5, [sp, #2]
   22f46:	f015 f90d 	bl	38164 <bsd_os_trace_put>
   22f4a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   22f4e:	68e0      	ldr	r0, [r4, #12]
   22f50:	f015 f908 	bl	38164 <bsd_os_trace_put>
   22f54:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   22f58:	68e3      	ldr	r3, [r4, #12]
   22f5a:	4413      	add	r3, r2
   22f5c:	60a3      	str	r3, [r4, #8]
   22f5e:	e794      	b.n	22e8a <ipc_trace_handle+0x5e>
   22f60:	4a67      	ldr	r2, [pc, #412]	; (23100 <ipc_trace_handle+0x2d4>)
   22f62:	7811      	ldrb	r1, [r2, #0]
   22f64:	b109      	cbz	r1, 22f6a <ipc_trace_handle+0x13e>
   22f66:	2100      	movs	r1, #0
   22f68:	7011      	strb	r1, [r2, #0]
   22f6a:	68a5      	ldr	r5, [r4, #8]
   22f6c:	2d00      	cmp	r5, #0
   22f6e:	d03b      	beq.n	22fe8 <ipc_trace_handle+0x1bc>
   22f70:	f04f 0c00 	mov.w	ip, #0
   22f74:	f8df a190 	ldr.w	sl, [pc, #400]	; 23108 <ipc_trace_handle+0x2dc>
   22f78:	f8df b188 	ldr.w	fp, [pc, #392]	; 23104 <ipc_trace_handle+0x2d8>
   22f7c:	4963      	ldr	r1, [pc, #396]	; (2310c <ipc_trace_handle+0x2e0>)
   22f7e:	46e1      	mov	r9, ip
   22f80:	4666      	mov	r6, ip
   22f82:	4662      	mov	r2, ip
   22f84:	f8d1 e000 	ldr.w	lr, [r1]
   22f88:	f8da 8000 	ldr.w	r8, [sl]
   22f8c:	f8db 7000 	ldr.w	r7, [fp]
   22f90:	e008      	b.n	22fa4 <ipc_trace_handle+0x178>
   22f92:	2963      	cmp	r1, #99	; 0x63
   22f94:	d016      	beq.n	22fc4 <ipc_trace_handle+0x198>
   22f96:	2961      	cmp	r1, #97	; 0x61
   22f98:	bf04      	itt	eq
   22f9a:	4607      	moveq	r7, r0
   22f9c:	2601      	moveq	r6, #1
   22f9e:	3201      	adds	r2, #1
   22fa0:	42aa      	cmp	r2, r5
   22fa2:	d013      	beq.n	22fcc <ipc_trace_handle+0x1a0>
   22fa4:	1c91      	adds	r1, r2, #2
   22fa6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   22faa:	6848      	ldr	r0, [r1, #4]
   22fac:	7801      	ldrb	r1, [r0, #0]
   22fae:	2962      	cmp	r1, #98	; 0x62
   22fb0:	d1ef      	bne.n	22f92 <ipc_trace_handle+0x166>
   22fb2:	4680      	mov	r8, r0
   22fb4:	f04f 0901 	mov.w	r9, #1
   22fb8:	e7f1      	b.n	22f9e <ipc_trace_handle+0x172>
   22fba:	f7fd f94f 	bl	2025c <bsd_os_trace_irq_set>
   22fbe:	b003      	add	sp, #12
   22fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22fc4:	4686      	mov	lr, r0
   22fc6:	f04f 0c01 	mov.w	ip, #1
   22fca:	e7e8      	b.n	22f9e <ipc_trace_handle+0x172>
   22fcc:	2e00      	cmp	r6, #0
   22fce:	f040 8091 	bne.w	230f4 <ipc_trace_handle+0x2c8>
   22fd2:	f1b9 0f00 	cmp.w	r9, #0
   22fd6:	d001      	beq.n	22fdc <ipc_trace_handle+0x1b0>
   22fd8:	f8ca 8000 	str.w	r8, [sl]
   22fdc:	f1bc 0f00 	cmp.w	ip, #0
   22fe0:	d002      	beq.n	22fe8 <ipc_trace_handle+0x1bc>
   22fe2:	4a4a      	ldr	r2, [pc, #296]	; (2310c <ipc_trace_handle+0x2e0>)
   22fe4:	f8c2 e000 	str.w	lr, [r2]
   22fe8:	2001      	movs	r0, #1
   22fea:	2200      	movs	r2, #0
   22fec:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   22ff0:	e743      	b.n	22e7a <ipc_trace_handle+0x4e>
   22ff2:	f7fd f93b 	bl	2026c <bsd_os_trace_irq_clear>
   22ff6:	e75d      	b.n	22eb4 <ipc_trace_handle+0x88>
   22ff8:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   22ffc:	f8ad 2000 	strh.w	r2, [sp]
   23000:	7822      	ldrb	r2, [r4, #0]
   23002:	466e      	mov	r6, sp
   23004:	f88d 2004 	strb.w	r2, [sp, #4]
   23008:	6862      	ldr	r2, [r4, #4]
   2300a:	2105      	movs	r1, #5
   2300c:	4293      	cmp	r3, r2
   2300e:	bf2a      	itet	cs
   23010:	6927      	ldrcs	r7, [r4, #16]
   23012:	1ad7      	subcc	r7, r2, r3
   23014:	1aff      	subcs	r7, r7, r3
   23016:	4293      	cmp	r3, r2
   23018:	bf94      	ite	ls
   2301a:	2500      	movls	r5, #0
   2301c:	68e5      	ldrhi	r5, [r4, #12]
   2301e:	b2bf      	uxth	r7, r7
   23020:	bf88      	it	hi
   23022:	1b52      	subhi	r2, r2, r5
   23024:	4630      	mov	r0, r6
   23026:	bf88      	it	hi
   23028:	b295      	uxthhi	r5, r2
   2302a:	f8ad 7002 	strh.w	r7, [sp, #2]
   2302e:	f015 f899 	bl	38164 <bsd_os_trace_put>
   23032:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   23036:	68a0      	ldr	r0, [r4, #8]
   23038:	f015 f894 	bl	38164 <bsd_os_trace_put>
   2303c:	68a3      	ldr	r3, [r4, #8]
   2303e:	6922      	ldr	r2, [r4, #16]
   23040:	441f      	add	r7, r3
   23042:	4297      	cmp	r7, r2
   23044:	bf08      	it	eq
   23046:	68e3      	ldreq	r3, [r4, #12]
   23048:	60a7      	str	r7, [r4, #8]
   2304a:	bf08      	it	eq
   2304c:	60a3      	streq	r3, [r4, #8]
   2304e:	2d00      	cmp	r5, #0
   23050:	f43f af40 	beq.w	22ed4 <ipc_trace_handle+0xa8>
   23054:	2105      	movs	r1, #5
   23056:	4630      	mov	r0, r6
   23058:	f8ad 5002 	strh.w	r5, [sp, #2]
   2305c:	f015 f882 	bl	38164 <bsd_os_trace_put>
   23060:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   23064:	68e0      	ldr	r0, [r4, #12]
   23066:	f015 f87d 	bl	38164 <bsd_os_trace_put>
   2306a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   2306e:	68e3      	ldr	r3, [r4, #12]
   23070:	4413      	add	r3, r2
   23072:	60a3      	str	r3, [r4, #8]
   23074:	e72e      	b.n	22ed4 <ipc_trace_handle+0xa8>
   23076:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   2307a:	f8ad 2000 	strh.w	r2, [sp]
   2307e:	7822      	ldrb	r2, [r4, #0]
   23080:	466e      	mov	r6, sp
   23082:	f88d 2004 	strb.w	r2, [sp, #4]
   23086:	6862      	ldr	r2, [r4, #4]
   23088:	2105      	movs	r1, #5
   2308a:	4293      	cmp	r3, r2
   2308c:	bf2a      	itet	cs
   2308e:	6927      	ldrcs	r7, [r4, #16]
   23090:	1ad7      	subcc	r7, r2, r3
   23092:	1aff      	subcs	r7, r7, r3
   23094:	4293      	cmp	r3, r2
   23096:	bf94      	ite	ls
   23098:	2500      	movls	r5, #0
   2309a:	68e5      	ldrhi	r5, [r4, #12]
   2309c:	b2bf      	uxth	r7, r7
   2309e:	bf88      	it	hi
   230a0:	1b52      	subhi	r2, r2, r5
   230a2:	4630      	mov	r0, r6
   230a4:	bf88      	it	hi
   230a6:	b295      	uxthhi	r5, r2
   230a8:	f8ad 7002 	strh.w	r7, [sp, #2]
   230ac:	f015 f85a 	bl	38164 <bsd_os_trace_put>
   230b0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   230b4:	68a0      	ldr	r0, [r4, #8]
   230b6:	f015 f855 	bl	38164 <bsd_os_trace_put>
   230ba:	68a3      	ldr	r3, [r4, #8]
   230bc:	6922      	ldr	r2, [r4, #16]
   230be:	441f      	add	r7, r3
   230c0:	4297      	cmp	r7, r2
   230c2:	bf08      	it	eq
   230c4:	68e3      	ldreq	r3, [r4, #12]
   230c6:	60a7      	str	r7, [r4, #8]
   230c8:	bf08      	it	eq
   230ca:	60a3      	streq	r3, [r4, #8]
   230cc:	2d00      	cmp	r5, #0
   230ce:	f43f aef9 	beq.w	22ec4 <ipc_trace_handle+0x98>
   230d2:	2105      	movs	r1, #5
   230d4:	4630      	mov	r0, r6
   230d6:	f8ad 5002 	strh.w	r5, [sp, #2]
   230da:	f015 f843 	bl	38164 <bsd_os_trace_put>
   230de:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   230e2:	68e0      	ldr	r0, [r4, #12]
   230e4:	f015 f83e 	bl	38164 <bsd_os_trace_put>
   230e8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   230ec:	68e3      	ldr	r3, [r4, #12]
   230ee:	4413      	add	r3, r2
   230f0:	60a3      	str	r3, [r4, #8]
   230f2:	e6e7      	b.n	22ec4 <ipc_trace_handle+0x98>
   230f4:	f8cb 7000 	str.w	r7, [fp]
   230f8:	e76b      	b.n	22fd2 <ipc_trace_handle+0x1a6>
   230fa:	bf00      	nop
   230fc:	200224d4 	.word	0x200224d4
   23100:	20029083 	.word	0x20029083
   23104:	200224d0 	.word	0x200224d0
   23108:	200224c8 	.word	0x200224c8
   2310c:	200224cc 	.word	0x200224cc

00023110 <rpc_trace_coredump_in_progress>:
   23110:	4b01      	ldr	r3, [pc, #4]	; (23118 <rpc_trace_coredump_in_progress+0x8>)
   23112:	7818      	ldrb	r0, [r3, #0]
   23114:	4770      	bx	lr
   23116:	bf00      	nop
   23118:	20029083 	.word	0x20029083

0002311c <rpc_transport_ipc_data_free>:
   2311c:	b510      	push	{r4, lr}
   2311e:	4b0e      	ldr	r3, [pc, #56]	; (23158 <rpc_transport_ipc_data_free+0x3c>)
   23120:	4604      	mov	r4, r0
   23122:	e9d3 2300 	ldrd	r2, r3, [r3]
   23126:	4413      	add	r3, r2
   23128:	4298      	cmp	r0, r3
   2312a:	d20d      	bcs.n	23148 <rpc_transport_ipc_data_free+0x2c>
   2312c:	4282      	cmp	r2, r0
   2312e:	d80b      	bhi.n	23148 <rpc_transport_ipc_data_free+0x2c>
   23130:	f000 fd10 	bl	23b54 <rpc_transport_ipc_tx_rpc_ctrl_alloc>
   23134:	b158      	cbz	r0, 2314e <rpc_transport_ipc_data_free+0x32>
   23136:	4a09      	ldr	r2, [pc, #36]	; (2315c <rpc_transport_ipc_data_free+0x40>)
   23138:	6084      	str	r4, [r0, #8]
   2313a:	6002      	str	r2, [r0, #0]
   2313c:	f7ff fd80 	bl	22c40 <rpc_transport_send>
   23140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   23144:	f7fd b87a 	b.w	2023c <bsd_os_application_irq_set>
   23148:	4620      	mov	r0, r4
   2314a:	f006 ff0b 	bl	29f64 <nrf_shared_free>
   2314e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   23152:	f7fd b873 	b.w	2023c <bsd_os_application_irq_set>
   23156:	bf00      	nop
   23158:	200224d8 	.word	0x200224d8
   2315c:	00020001 	.word	0x00020001

00023160 <rpc_transport_ipc_init>:
   23160:	b188      	cbz	r0, 23186 <rpc_transport_ipc_init+0x26>
   23162:	b510      	push	{r4, lr}
   23164:	b082      	sub	sp, #8
   23166:	aa01      	add	r2, sp, #4
   23168:	4669      	mov	r1, sp
   2316a:	4604      	mov	r4, r0
   2316c:	f000 fb4e 	bl	2380c <rpc_transport_ipc_tx_init>
   23170:	4602      	mov	r2, r0
   23172:	b148      	cbz	r0, 23188 <rpc_transport_ipc_init+0x28>
   23174:	4b12      	ldr	r3, [pc, #72]	; (231c0 <rpc_transport_ipc_init+0x60>)
   23176:	3428      	adds	r4, #40	; 0x28
   23178:	e894 0003 	ldmia.w	r4, {r0, r1}
   2317c:	e883 0003 	stmia.w	r3, {r0, r1}
   23180:	4610      	mov	r0, r2
   23182:	b002      	add	sp, #8
   23184:	bd10      	pop	{r4, pc}
   23186:	e7fe      	b.n	23186 <rpc_transport_ipc_init+0x26>
   23188:	e9dd 1200 	ldrd	r1, r2, [sp]
   2318c:	4620      	mov	r0, r4
   2318e:	f000 f9e9 	bl	23564 <rpc_transport_ipc_rx_init>
   23192:	4602      	mov	r2, r0
   23194:	4b0a      	ldr	r3, [pc, #40]	; (231c0 <rpc_transport_ipc_init+0x60>)
   23196:	f104 0128 	add.w	r1, r4, #40	; 0x28
   2319a:	c903      	ldmia	r1, {r0, r1}
   2319c:	e883 0003 	stmia.w	r3, {r0, r1}
   231a0:	2a00      	cmp	r2, #0
   231a2:	d1ed      	bne.n	23180 <rpc_transport_ipc_init+0x20>
   231a4:	f44f 6080 	mov.w	r0, #1024	; 0x400
   231a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   231aa:	4906      	ldr	r1, [pc, #24]	; (231c4 <rpc_transport_ipc_init+0x64>)
   231ac:	015b      	lsls	r3, r3, #5
   231ae:	b2db      	uxtb	r3, r3
   231b0:	f881 332a 	strb.w	r3, [r1, #810]	; 0x32a
   231b4:	f8c1 0184 	str.w	r0, [r1, #388]	; 0x184
   231b8:	6048      	str	r0, [r1, #4]
   231ba:	4610      	mov	r0, r2
   231bc:	b002      	add	sp, #8
   231be:	bd10      	pop	{r4, pc}
   231c0:	200224d8 	.word	0x200224d8
   231c4:	e000e100 	.word	0xe000e100

000231c8 <bsd_os_application_irq_handler>:
   231c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   231cc:	f7fd f83e 	bl	2024c <bsd_os_application_irq_clear>
   231d0:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 232a8 <bsd_os_application_irq_handler+0xe0>
   231d4:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 232ac <bsd_os_application_irq_handler+0xe4>
   231d8:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 232b0 <bsd_os_application_irq_handler+0xe8>
   231dc:	f108 0908 	add.w	r9, r8, #8
   231e0:	f858 7b04 	ldr.w	r7, [r8], #4
   231e4:	6839      	ldr	r1, [r7, #0]
   231e6:	b361      	cbz	r1, 23242 <bsd_os_application_irq_handler+0x7a>
   231e8:	2400      	movs	r4, #0
   231ea:	e002      	b.n	231f2 <bsd_os_application_irq_handler+0x2a>
   231ec:	3401      	adds	r4, #1
   231ee:	428c      	cmp	r4, r1
   231f0:	d227      	bcs.n	23242 <bsd_os_application_irq_handler+0x7a>
   231f2:	00e6      	lsls	r6, r4, #3
   231f4:	19bd      	adds	r5, r7, r6
   231f6:	68aa      	ldr	r2, [r5, #8]
   231f8:	2a00      	cmp	r2, #0
   231fa:	d0f7      	beq.n	231ec <bsd_os_application_irq_handler+0x24>
   231fc:	686a      	ldr	r2, [r5, #4]
   231fe:	b2d2      	uxtb	r2, r2
   23200:	2a01      	cmp	r2, #1
   23202:	d1f3      	bne.n	231ec <bsd_os_application_irq_handler+0x24>
   23204:	6868      	ldr	r0, [r5, #4]
   23206:	f8bb 2000 	ldrh.w	r2, [fp]
   2320a:	ebb2 4f10 	cmp.w	r2, r0, lsr #16
   2320e:	d1ed      	bne.n	231ec <bsd_os_application_irq_handler+0x24>
   23210:	68a8      	ldr	r0, [r5, #8]
   23212:	6841      	ldr	r1, [r0, #4]
   23214:	b2c9      	uxtb	r1, r1
   23216:	2902      	cmp	r1, #2
   23218:	d02c      	beq.n	23274 <bsd_os_application_irq_handler+0xac>
   2321a:	2901      	cmp	r1, #1
   2321c:	d015      	beq.n	2324a <bsd_os_application_irq_handler+0x82>
   2321e:	3604      	adds	r6, #4
   23220:	59b9      	ldr	r1, [r7, r6]
   23222:	3201      	adds	r2, #1
   23224:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   23228:	f041 0103 	orr.w	r1, r1, #3
   2322c:	51b9      	str	r1, [r7, r6]
   2322e:	f8ab 2000 	strh.w	r2, [fp]
   23232:	f7fd f803 	bl	2023c <bsd_os_application_irq_set>
   23236:	f858 7c04 	ldr.w	r7, [r8, #-4]
   2323a:	3401      	adds	r4, #1
   2323c:	6839      	ldr	r1, [r7, #0]
   2323e:	428c      	cmp	r4, r1
   23240:	d3d7      	bcc.n	231f2 <bsd_os_application_irq_handler+0x2a>
   23242:	45c1      	cmp	r9, r8
   23244:	d1cc      	bne.n	231e0 <bsd_os_application_irq_handler+0x18>
   23246:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2324a:	6801      	ldr	r1, [r0, #0]
   2324c:	0c09      	lsrs	r1, r1, #16
   2324e:	f003 f855 	bl	262fc <rpc_handle_ctrl_message>
   23252:	2801      	cmp	r0, #1
   23254:	d014      	beq.n	23280 <bsd_os_application_irq_handler+0xb8>
   23256:	d310      	bcc.n	2327a <bsd_os_application_irq_handler+0xb2>
   23258:	2802      	cmp	r0, #2
   2325a:	d007      	beq.n	2326c <bsd_os_application_irq_handler+0xa4>
   2325c:	2203      	movs	r2, #3
   2325e:	4b11      	ldr	r3, [pc, #68]	; (232a4 <bsd_os_application_irq_handler+0xdc>)
   23260:	4610      	mov	r0, r2
   23262:	f8ca 2000 	str.w	r2, [sl]
   23266:	601a      	str	r2, [r3, #0]
   23268:	f005 fc28 	bl	28abc <rpc_transport_ipc_fault_handler>
   2326c:	f858 7c04 	ldr.w	r7, [r8, #-4]
   23270:	6839      	ldr	r1, [r7, #0]
   23272:	e7bb      	b.n	231ec <bsd_os_application_irq_handler+0x24>
   23274:	f003 f85a 	bl	2632c <rpc_handle_data_message>
   23278:	e7eb      	b.n	23252 <bsd_os_application_irq_handler+0x8a>
   2327a:	f8bb 2000 	ldrh.w	r2, [fp]
   2327e:	e7ce      	b.n	2321e <bsd_os_application_irq_handler+0x56>
   23280:	686a      	ldr	r2, [r5, #4]
   23282:	f8bb 1000 	ldrh.w	r1, [fp]
   23286:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   2328a:	f042 0202 	orr.w	r2, r2, #2
   2328e:	606a      	str	r2, [r5, #4]
   23290:	1c4a      	adds	r2, r1, #1
   23292:	f8ab 2000 	strh.w	r2, [fp]
   23296:	f7fc ffd1 	bl	2023c <bsd_os_application_irq_set>
   2329a:	f858 7c04 	ldr.w	r7, [r8, #-4]
   2329e:	6839      	ldr	r1, [r7, #0]
   232a0:	e7a4      	b.n	231ec <bsd_os_application_irq_handler+0x24>
   232a2:	bf00      	nop
   232a4:	200224e0 	.word	0x200224e0
   232a8:	200224e8 	.word	0x200224e8
   232ac:	20027618 	.word	0x20027618
   232b0:	200224f0 	.word	0x200224f0

000232b4 <IPC_IRQHandler>:
   232b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   232b8:	f44f 6680 	mov.w	r6, #1024	; 0x400
   232bc:	4d95      	ldr	r5, [pc, #596]	; (23514 <IPC_IRQHandler+0x260>)
   232be:	4c96      	ldr	r4, [pc, #600]	; (23518 <IPC_IRQHandler+0x264>)
   232c0:	f8c5 6184 	str.w	r6, [r5, #388]	; 0x184
   232c4:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   232c8:	b092      	sub	sp, #72	; 0x48
   232ca:	0618      	lsls	r0, r3, #24
   232cc:	d50b      	bpl.n	232e6 <IPC_IRQHandler+0x32>
   232ce:	f7ff fdad 	bl	22e2c <ipc_trace_handle>
   232d2:	f7ff ff1d 	bl	23110 <rpc_trace_coredump_in_progress>
   232d6:	2800      	cmp	r0, #0
   232d8:	d159      	bne.n	2338e <IPC_IRQHandler+0xda>
   232da:	4b90      	ldr	r3, [pc, #576]	; (2351c <IPC_IRQHandler+0x268>)
   232dc:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
   232e0:	681b      	ldr	r3, [r3, #0]
   232e2:	9301      	str	r3, [sp, #4]
   232e4:	9b01      	ldr	r3, [sp, #4]
   232e6:	4c8c      	ldr	r4, [pc, #560]	; (23518 <IPC_IRQHandler+0x264>)
   232e8:	f8d4 530c 	ldr.w	r5, [r4, #780]	; 0x30c
   232ec:	f015 0501 	ands.w	r5, r5, #1
   232f0:	d11f      	bne.n	23332 <IPC_IRQHandler+0x7e>
   232f2:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   232f6:	f013 0340 	ands.w	r3, r3, #64	; 0x40
   232fa:	d14d      	bne.n	23398 <IPC_IRQHandler+0xe4>
   232fc:	f8d4 230c 	ldr.w	r2, [r4, #780]	; 0x30c
   23300:	0751      	lsls	r1, r2, #29
   23302:	d50e      	bpl.n	23322 <IPC_IRQHandler+0x6e>
   23304:	4a86      	ldr	r2, [pc, #536]	; (23520 <IPC_IRQHandler+0x26c>)
   23306:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   2330a:	6812      	ldr	r2, [r2, #0]
   2330c:	4b85      	ldr	r3, [pc, #532]	; (23524 <IPC_IRQHandler+0x270>)
   2330e:	9206      	str	r2, [sp, #24]
   23310:	9a06      	ldr	r2, [sp, #24]
   23312:	681a      	ldr	r2, [r3, #0]
   23314:	2a02      	cmp	r2, #2
   23316:	f000 80e0 	beq.w	234da <IPC_IRQHandler+0x226>
   2331a:	681a      	ldr	r2, [r3, #0]
   2331c:	2a01      	cmp	r2, #1
   2331e:	f000 80c1 	beq.w	234a4 <IPC_IRQHandler+0x1f0>
   23322:	4b7d      	ldr	r3, [pc, #500]	; (23518 <IPC_IRQHandler+0x264>)
   23324:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   23328:	06d2      	lsls	r2, r2, #27
   2332a:	d424      	bmi.n	23376 <IPC_IRQHandler+0xc2>
   2332c:	b012      	add	sp, #72	; 0x48
   2332e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23332:	2100      	movs	r1, #0
   23334:	f248 0202 	movw	r2, #32770	; 0x8002
   23338:	4b7b      	ldr	r3, [pc, #492]	; (23528 <IPC_IRQHandler+0x274>)
   2333a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   2333e:	681b      	ldr	r3, [r3, #0]
   23340:	9302      	str	r3, [sp, #8]
   23342:	9b02      	ldr	r3, [sp, #8]
   23344:	f8d4 3614 	ldr.w	r3, [r4, #1556]	; 0x614
   23348:	4293      	cmp	r3, r2
   2334a:	f000 80cf 	beq.w	234ec <IPC_IRQHandler+0x238>
   2334e:	f200 808d 	bhi.w	2346c <IPC_IRQHandler+0x1b8>
   23352:	2b00      	cmp	r3, #0
   23354:	f000 80c4 	beq.w	234e0 <IPC_IRQHandler+0x22c>
   23358:	2b02      	cmp	r3, #2
   2335a:	f240 8098 	bls.w	2348e <IPC_IRQHandler+0x1da>
   2335e:	f248 0201 	movw	r2, #32769	; 0x8001
   23362:	4293      	cmp	r3, r2
   23364:	f040 80bc 	bne.w	234e0 <IPC_IRQHandler+0x22c>
   23368:	2003      	movs	r0, #3
   2336a:	2207      	movs	r2, #7
   2336c:	496d      	ldr	r1, [pc, #436]	; (23524 <IPC_IRQHandler+0x270>)
   2336e:	4b6f      	ldr	r3, [pc, #444]	; (2352c <IPC_IRQHandler+0x278>)
   23370:	6008      	str	r0, [r1, #0]
   23372:	601a      	str	r2, [r3, #0]
   23374:	e7da      	b.n	2332c <IPC_IRQHandler+0x78>
   23376:	2100      	movs	r1, #0
   23378:	4a6d      	ldr	r2, [pc, #436]	; (23530 <IPC_IRQHandler+0x27c>)
   2337a:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
   2337e:	6813      	ldr	r3, [r2, #0]
   23380:	9307      	str	r3, [sp, #28]
   23382:	9b07      	ldr	r3, [sp, #28]
   23384:	b012      	add	sp, #72	; 0x48
   23386:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2338a:	f7fc bf57 	b.w	2023c <bsd_os_application_irq_set>
   2338e:	23e0      	movs	r3, #224	; 0xe0
   23390:	f885 332a 	strb.w	r3, [r5, #810]	; 0x32a
   23394:	606e      	str	r6, [r5, #4]
   23396:	e7c9      	b.n	2332c <IPC_IRQHandler+0x78>
   23398:	4b66      	ldr	r3, [pc, #408]	; (23534 <IPC_IRQHandler+0x280>)
   2339a:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
   2339e:	681b      	ldr	r3, [r3, #0]
   233a0:	2704      	movs	r7, #4
   233a2:	9305      	str	r3, [sp, #20]
   233a4:	9b05      	ldr	r3, [sp, #20]
   233a6:	f000 fc0f 	bl	23bc8 <rpc_transport_ipc_tx_suspend>
   233aa:	2210      	movs	r2, #16
   233ac:	f04f 0c01 	mov.w	ip, #1
   233b0:	4961      	ldr	r1, [pc, #388]	; (23538 <IPC_IRQHandler+0x284>)
   233b2:	f8c4 55a0 	str.w	r5, [r4, #1440]	; 0x5a0
   233b6:	680b      	ldr	r3, [r1, #0]
   233b8:	9303      	str	r3, [sp, #12]
   233ba:	4b60      	ldr	r3, [pc, #384]	; (2353c <IPC_IRQHandler+0x288>)
   233bc:	9803      	ldr	r0, [sp, #12]
   233be:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
   233c2:	6818      	ldr	r0, [r3, #0]
   233c4:	9004      	str	r0, [sp, #16]
   233c6:	485e      	ldr	r0, [pc, #376]	; (23540 <IPC_IRQHandler+0x28c>)
   233c8:	9e04      	ldr	r6, [sp, #16]
   233ca:	f8c4 5590 	str.w	r5, [r4, #1424]	; 0x590
   233ce:	6800      	ldr	r0, [r0, #0]
   233d0:	2640      	movs	r6, #64	; 0x40
   233d2:	9008      	str	r0, [sp, #32]
   233d4:	485b      	ldr	r0, [pc, #364]	; (23544 <IPC_IRQHandler+0x290>)
   233d6:	f8dd e020 	ldr.w	lr, [sp, #32]
   233da:	f8c4 5598 	str.w	r5, [r4, #1432]	; 0x598
   233de:	f8d0 e000 	ldr.w	lr, [r0]
   233e2:	2080      	movs	r0, #128	; 0x80
   233e4:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
   233e8:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
   233ec:	f8c4 55a0 	str.w	r5, [r4, #1440]	; 0x5a0
   233f0:	f8d1 e000 	ldr.w	lr, [r1]
   233f4:	2105      	movs	r1, #5
   233f6:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
   233fa:	f8df e160 	ldr.w	lr, [pc, #352]	; 2355c <IPC_IRQHandler+0x2a8>
   233fe:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   23402:	f8c4 55a8 	str.w	r5, [r4, #1448]	; 0x5a8
   23406:	f8de e000 	ldr.w	lr, [lr]
   2340a:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
   2340e:	f8df e150 	ldr.w	lr, [pc, #336]	; 23560 <IPC_IRQHandler+0x2ac>
   23412:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   23416:	f8c4 55ac 	str.w	r5, [r4, #1452]	; 0x5ac
   2341a:	f8de e000 	ldr.w	lr, [lr]
   2341e:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
   23422:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
   23426:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
   2342a:	f8d3 c000 	ldr.w	ip, [r3]
   2342e:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
   23432:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
   23436:	f8c4 7308 	str.w	r7, [r4, #776]	; 0x308
   2343a:	681f      	ldr	r7, [r3, #0]
   2343c:	970e      	str	r7, [sp, #56]	; 0x38
   2343e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   23440:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
   23444:	681a      	ldr	r2, [r3, #0]
   23446:	920f      	str	r2, [sp, #60]	; 0x3c
   23448:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2344a:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
   2344e:	681e      	ldr	r6, [r3, #0]
   23450:	4a34      	ldr	r2, [pc, #208]	; (23524 <IPC_IRQHandler+0x270>)
   23452:	9610      	str	r6, [sp, #64]	; 0x40
   23454:	9e10      	ldr	r6, [sp, #64]	; 0x40
   23456:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
   2345a:	6818      	ldr	r0, [r3, #0]
   2345c:	4b3a      	ldr	r3, [pc, #232]	; (23548 <IPC_IRQHandler+0x294>)
   2345e:	9011      	str	r0, [sp, #68]	; 0x44
   23460:	9811      	ldr	r0, [sp, #68]	; 0x44
   23462:	801d      	strh	r5, [r3, #0]
   23464:	6011      	str	r1, [r2, #0]
   23466:	b012      	add	sp, #72	; 0x48
   23468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2346c:	4a37      	ldr	r2, [pc, #220]	; (2354c <IPC_IRQHandler+0x298>)
   2346e:	4293      	cmp	r3, r2
   23470:	d82a      	bhi.n	234c8 <IPC_IRQHandler+0x214>
   23472:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   23476:	d82a      	bhi.n	234ce <IPC_IRQHandler+0x21a>
   23478:	f248 0203 	movw	r2, #32771	; 0x8003
   2347c:	4293      	cmp	r3, r2
   2347e:	d12f      	bne.n	234e0 <IPC_IRQHandler+0x22c>
   23480:	2003      	movs	r0, #3
   23482:	2204      	movs	r2, #4
   23484:	4927      	ldr	r1, [pc, #156]	; (23524 <IPC_IRQHandler+0x270>)
   23486:	4b29      	ldr	r3, [pc, #164]	; (2352c <IPC_IRQHandler+0x278>)
   23488:	6008      	str	r0, [r1, #0]
   2348a:	601a      	str	r2, [r3, #0]
   2348c:	e74e      	b.n	2332c <IPC_IRQHandler+0x78>
   2348e:	2303      	movs	r3, #3
   23490:	4618      	mov	r0, r3
   23492:	4924      	ldr	r1, [pc, #144]	; (23524 <IPC_IRQHandler+0x270>)
   23494:	4a25      	ldr	r2, [pc, #148]	; (2352c <IPC_IRQHandler+0x278>)
   23496:	600b      	str	r3, [r1, #0]
   23498:	6013      	str	r3, [r2, #0]
   2349a:	b012      	add	sp, #72	; 0x48
   2349c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   234a0:	f005 bb0c 	b.w	28abc <rpc_transport_ipc_fault_handler>
   234a4:	4a2a      	ldr	r2, [pc, #168]	; (23550 <IPC_IRQHandler+0x29c>)
   234a6:	482b      	ldr	r0, [pc, #172]	; (23554 <IPC_IRQHandler+0x2a0>)
   234a8:	6811      	ldr	r1, [r2, #0]
   234aa:	688a      	ldr	r2, [r1, #8]
   234ac:	6002      	str	r2, [r0, #0]
   234ae:	6849      	ldr	r1, [r1, #4]
   234b0:	6041      	str	r1, [r0, #4]
   234b2:	b312      	cbz	r2, 234fa <IPC_IRQHandler+0x246>
   234b4:	b309      	cbz	r1, 234fa <IPC_IRQHandler+0x246>
   234b6:	6812      	ldr	r2, [r2, #0]
   234b8:	2a10      	cmp	r2, #16
   234ba:	d824      	bhi.n	23506 <IPC_IRQHandler+0x252>
   234bc:	680a      	ldr	r2, [r1, #0]
   234be:	2a10      	cmp	r2, #16
   234c0:	d821      	bhi.n	23506 <IPC_IRQHandler+0x252>
   234c2:	2202      	movs	r2, #2
   234c4:	601a      	str	r2, [r3, #0]
   234c6:	e72c      	b.n	23322 <IPC_IRQHandler+0x6e>
   234c8:	4a23      	ldr	r2, [pc, #140]	; (23558 <IPC_IRQHandler+0x2a4>)
   234ca:	4293      	cmp	r3, r2
   234cc:	d108      	bne.n	234e0 <IPC_IRQHandler+0x22c>
   234ce:	2003      	movs	r0, #3
   234d0:	4914      	ldr	r1, [pc, #80]	; (23524 <IPC_IRQHandler+0x270>)
   234d2:	4a16      	ldr	r2, [pc, #88]	; (2352c <IPC_IRQHandler+0x278>)
   234d4:	6008      	str	r0, [r1, #0]
   234d6:	6013      	str	r3, [r2, #0]
   234d8:	e728      	b.n	2332c <IPC_IRQHandler+0x78>
   234da:	f7fc feaf 	bl	2023c <bsd_os_application_irq_set>
   234de:	e720      	b.n	23322 <IPC_IRQHandler+0x6e>
   234e0:	2303      	movs	r3, #3
   234e2:	4910      	ldr	r1, [pc, #64]	; (23524 <IPC_IRQHandler+0x270>)
   234e4:	4a11      	ldr	r2, [pc, #68]	; (2352c <IPC_IRQHandler+0x278>)
   234e6:	600b      	str	r3, [r1, #0]
   234e8:	6013      	str	r3, [r2, #0]
   234ea:	e71f      	b.n	2332c <IPC_IRQHandler+0x78>
   234ec:	2003      	movs	r0, #3
   234ee:	2206      	movs	r2, #6
   234f0:	490c      	ldr	r1, [pc, #48]	; (23524 <IPC_IRQHandler+0x270>)
   234f2:	4b0e      	ldr	r3, [pc, #56]	; (2352c <IPC_IRQHandler+0x278>)
   234f4:	6008      	str	r0, [r1, #0]
   234f6:	601a      	str	r2, [r3, #0]
   234f8:	e718      	b.n	2332c <IPC_IRQHandler+0x78>
   234fa:	2003      	movs	r0, #3
   234fc:	2110      	movs	r1, #16
   234fe:	4a0b      	ldr	r2, [pc, #44]	; (2352c <IPC_IRQHandler+0x278>)
   23500:	6018      	str	r0, [r3, #0]
   23502:	6011      	str	r1, [r2, #0]
   23504:	e70d      	b.n	23322 <IPC_IRQHandler+0x6e>
   23506:	2003      	movs	r0, #3
   23508:	f24c 0106 	movw	r1, #49158	; 0xc006
   2350c:	4a07      	ldr	r2, [pc, #28]	; (2352c <IPC_IRQHandler+0x278>)
   2350e:	6018      	str	r0, [r3, #0]
   23510:	6011      	str	r1, [r2, #0]
   23512:	e706      	b.n	23322 <IPC_IRQHandler+0x6e>
   23514:	e000e100 	.word	0xe000e100
   23518:	4002a000 	.word	0x4002a000
   2351c:	4002a11c 	.word	0x4002a11c
   23520:	4002a108 	.word	0x4002a108
   23524:	200224f0 	.word	0x200224f0
   23528:	4002a100 	.word	0x4002a100
   2352c:	200224e0 	.word	0x200224e0
   23530:	4002a110 	.word	0x4002a110
   23534:	4002a118 	.word	0x4002a118
   23538:	4002a5a0 	.word	0x4002a5a0
   2353c:	4002a308 	.word	0x4002a308
   23540:	4002a590 	.word	0x4002a590
   23544:	4002a598 	.word	0x4002a598
   23548:	20027618 	.word	0x20027618
   2354c:	04400004 	.word	0x04400004
   23550:	200224f4 	.word	0x200224f4
   23554:	200224e8 	.word	0x200224e8
   23558:	05500001 	.word	0x05500001
   2355c:	4002a5a8 	.word	0x4002a5a8
   23560:	4002a5ac 	.word	0x4002a5ac

00023564 <rpc_transport_ipc_rx_init>:
   23564:	2800      	cmp	r0, #0
   23566:	f000 8108 	beq.w	2377a <rpc_transport_ipc_rx_init+0x216>
   2356a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2356e:	6805      	ldr	r5, [r0, #0]
   23570:	b097      	sub	sp, #92	; 0x5c
   23572:	2d00      	cmp	r5, #0
   23574:	f000 80f7 	beq.w	23766 <rpc_transport_ipc_rx_init+0x202>
   23578:	6883      	ldr	r3, [r0, #8]
   2357a:	2b00      	cmp	r3, #0
   2357c:	f000 80f3 	beq.w	23766 <rpc_transport_ipc_rx_init+0x202>
   23580:	6906      	ldr	r6, [r0, #16]
   23582:	2e00      	cmp	r6, #0
   23584:	f000 80ef 	beq.w	23766 <rpc_transport_ipc_rx_init+0x202>
   23588:	6a84      	ldr	r4, [r0, #40]	; 0x28
   2358a:	2c00      	cmp	r4, #0
   2358c:	f000 80eb 	beq.w	23766 <rpc_transport_ipc_rx_init+0x202>
   23590:	6844      	ldr	r4, [r0, #4]
   23592:	2c1b      	cmp	r4, #27
   23594:	f240 80ec 	bls.w	23770 <rpc_transport_ipc_rx_init+0x20c>
   23598:	68c4      	ldr	r4, [r0, #12]
   2359a:	2c0b      	cmp	r4, #11
   2359c:	f240 80e8 	bls.w	23770 <rpc_transport_ipc_rx_init+0x20c>
   235a0:	f8d0 c014 	ldr.w	ip, [r0, #20]
   235a4:	f1bc 0f17 	cmp.w	ip, #23
   235a8:	f240 80e2 	bls.w	23770 <rpc_transport_ipc_rx_init+0x20c>
   235ac:	2700      	movs	r7, #0
   235ae:	4604      	mov	r4, r0
   235b0:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 23798 <rpc_transport_ipc_rx_init+0x234>
   235b4:	6b80      	ldr	r0, [r0, #56]	; 0x38
   235b6:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 2379c <rpc_transport_ipc_rx_init+0x238>
   235ba:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 237a0 <rpc_transport_ipc_rx_init+0x23c>
   235be:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 237a4 <rpc_transport_ipc_rx_init+0x240>
   235c2:	e9cd 1200 	strd	r1, r2, [sp]
   235c6:	f8ca 0000 	str.w	r0, [sl]
   235ca:	4662      	mov	r2, ip
   235cc:	4639      	mov	r1, r7
   235ce:	4630      	mov	r0, r6
   235d0:	f8cb 3000 	str.w	r3, [fp]
   235d4:	f8c8 7000 	str.w	r7, [r8]
   235d8:	f8c9 7000 	str.w	r7, [r9]
   235dc:	f015 fd2b 	bl	39036 <memset>
   235e0:	69e3      	ldr	r3, [r4, #28]
   235e2:	4630      	mov	r0, r6
   235e4:	6033      	str	r3, [r6, #0]
   235e6:	69a3      	ldr	r3, [r4, #24]
   235e8:	6073      	str	r3, [r6, #4]
   235ea:	f7ff fb33 	bl	22c54 <ipc_trace_init>
   235ee:	2201      	movs	r2, #1
   235f0:	f04f 0c04 	mov.w	ip, #4
   235f4:	4b62      	ldr	r3, [pc, #392]	; (23780 <rpc_transport_ipc_rx_init+0x21c>)
   235f6:	4963      	ldr	r1, [pc, #396]	; (23784 <rpc_transport_ipc_rx_init+0x220>)
   235f8:	f8c3 5610 	str.w	r5, [r3, #1552]	; 0x610
   235fc:	6809      	ldr	r1, [r1, #0]
   235fe:	2080      	movs	r0, #128	; 0x80
   23600:	9106      	str	r1, [sp, #24]
   23602:	4961      	ldr	r1, [pc, #388]	; (23788 <rpc_transport_ipc_rx_init+0x224>)
   23604:	f8dd e018 	ldr.w	lr, [sp, #24]
   23608:	f8c3 7614 	str.w	r7, [r3, #1556]	; 0x614
   2360c:	6809      	ldr	r1, [r1, #0]
   2360e:	702f      	strb	r7, [r5, #0]
   23610:	9105      	str	r1, [sp, #20]
   23612:	706f      	strb	r7, [r5, #1]
   23614:	70ef      	strb	r7, [r5, #3]
   23616:	70aa      	strb	r2, [r5, #2]
   23618:	9905      	ldr	r1, [sp, #20]
   2361a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   2361c:	f8db e000 	ldr.w	lr, [fp]
   23620:	6069      	str	r1, [r5, #4]
   23622:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   23624:	9c01      	ldr	r4, [sp, #4]
   23626:	60a9      	str	r1, [r5, #8]
   23628:	60ec      	str	r4, [r5, #12]
   2362a:	9c00      	ldr	r4, [sp, #0]
   2362c:	4957      	ldr	r1, [pc, #348]	; (2378c <rpc_transport_ipc_rx_init+0x228>)
   2362e:	61ae      	str	r6, [r5, #24]
   23630:	f8c5 e014 	str.w	lr, [r5, #20]
   23634:	612c      	str	r4, [r5, #16]
   23636:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   2363a:	680c      	ldr	r4, [r1, #0]
   2363c:	f5a1 6192 	sub.w	r1, r1, #1168	; 0x490
   23640:	9407      	str	r4, [sp, #28]
   23642:	9c07      	ldr	r4, [sp, #28]
   23644:	f8c3 c598 	str.w	ip, [r3, #1432]	; 0x598
   23648:	f8d1 4498 	ldr.w	r4, [r1, #1176]	; 0x498
   2364c:	f44f 6680 	mov.w	r6, #1024	; 0x400
   23650:	9408      	str	r4, [sp, #32]
   23652:	9c08      	ldr	r4, [sp, #32]
   23654:	2410      	movs	r4, #16
   23656:	f8c3 45a0 	str.w	r4, [r3, #1440]	; 0x5a0
   2365a:	f8d1 44a0 	ldr.w	r4, [r1, #1184]	; 0x4a0
   2365e:	4d4c      	ldr	r5, [pc, #304]	; (23790 <rpc_transport_ipc_rx_init+0x22c>)
   23660:	9409      	str	r4, [sp, #36]	; 0x24
   23662:	9c09      	ldr	r4, [sp, #36]	; 0x24
   23664:	2440      	movs	r4, #64	; 0x40
   23666:	f8c3 45a8 	str.w	r4, [r3, #1448]	; 0x5a8
   2366a:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	; 0x4a8
   2366e:	940a      	str	r4, [sp, #40]	; 0x28
   23670:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   23672:	f8c3 05ac 	str.w	r0, [r3, #1452]	; 0x5ac
   23676:	f8d1 04ac 	ldr.w	r0, [r1, #1196]	; 0x4ac
   2367a:	900b      	str	r0, [sp, #44]	; 0x2c
   2367c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   2367e:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
   23682:	6808      	ldr	r0, [r1, #0]
   23684:	900c      	str	r0, [sp, #48]	; 0x30
   23686:	980c      	ldr	r0, [sp, #48]	; 0x30
   23688:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
   2368c:	6888      	ldr	r0, [r1, #8]
   2368e:	900d      	str	r0, [sp, #52]	; 0x34
   23690:	980d      	ldr	r0, [sp, #52]	; 0x34
   23692:	f8c3 7110 	str.w	r7, [r3, #272]	; 0x110
   23696:	6908      	ldr	r0, [r1, #16]
   23698:	900e      	str	r0, [sp, #56]	; 0x38
   2369a:	980e      	ldr	r0, [sp, #56]	; 0x38
   2369c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
   236a0:	6988      	ldr	r0, [r1, #24]
   236a2:	900f      	str	r0, [sp, #60]	; 0x3c
   236a4:	980f      	ldr	r0, [sp, #60]	; 0x3c
   236a6:	f8c3 711c 	str.w	r7, [r3, #284]	; 0x11c
   236aa:	69c8      	ldr	r0, [r1, #28]
   236ac:	f501 7101 	add.w	r1, r1, #516	; 0x204
   236b0:	9010      	str	r0, [sp, #64]	; 0x40
   236b2:	9810      	ldr	r0, [sp, #64]	; 0x40
   236b4:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   236b8:	4310      	orrs	r0, r2
   236ba:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
   236be:	680c      	ldr	r4, [r1, #0]
   236c0:	4834      	ldr	r0, [pc, #208]	; (23794 <rpc_transport_ipc_rx_init+0x230>)
   236c2:	9411      	str	r4, [sp, #68]	; 0x44
   236c4:	9c11      	ldr	r4, [sp, #68]	; 0x44
   236c6:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   236ca:	ea44 040c 	orr.w	r4, r4, ip
   236ce:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   236d2:	680c      	ldr	r4, [r1, #0]
   236d4:	9412      	str	r4, [sp, #72]	; 0x48
   236d6:	9c12      	ldr	r4, [sp, #72]	; 0x48
   236d8:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   236dc:	f044 0410 	orr.w	r4, r4, #16
   236e0:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   236e4:	680c      	ldr	r4, [r1, #0]
   236e6:	9413      	str	r4, [sp, #76]	; 0x4c
   236e8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   236ea:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   236ee:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   236f2:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   236f6:	680c      	ldr	r4, [r1, #0]
   236f8:	9414      	str	r4, [sp, #80]	; 0x50
   236fa:	9c14      	ldr	r4, [sp, #80]	; 0x50
   236fc:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   23700:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   23704:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   23708:	f8da 3000 	ldr.w	r3, [sl]
   2370c:	6809      	ldr	r1, [r1, #0]
   2370e:	015b      	lsls	r3, r3, #5
   23710:	9115      	str	r1, [sp, #84]	; 0x54
   23712:	b2db      	uxtb	r3, r3
   23714:	9915      	ldr	r1, [sp, #84]	; 0x54
   23716:	f8c8 2000 	str.w	r2, [r8]
   2371a:	f880 332a 	strb.w	r3, [r0, #810]	; 0x32a
   2371e:	f8c0 6184 	str.w	r6, [r0, #388]	; 0x184
   23722:	6046      	str	r6, [r0, #4]
   23724:	9704      	str	r7, [sp, #16]
   23726:	f8c5 7610 	str.w	r7, [r5, #1552]	; 0x610
   2372a:	f8d5 3610 	ldr.w	r3, [r5, #1552]	; 0x610
   2372e:	9304      	str	r3, [sp, #16]
   23730:	9b04      	ldr	r3, [sp, #16]
   23732:	f8d8 3000 	ldr.w	r3, [r8]
   23736:	4293      	cmp	r3, r2
   23738:	d110      	bne.n	2375c <rpc_transport_ipc_rx_init+0x1f8>
   2373a:	f247 5430 	movw	r4, #30000	; 0x7530
   2373e:	2564      	movs	r5, #100	; 0x64
   23740:	e000      	b.n	23744 <rpc_transport_ipc_rx_init+0x1e0>
   23742:	b15c      	cbz	r4, 2375c <rpc_transport_ipc_rx_init+0x1f8>
   23744:	a903      	add	r1, sp, #12
   23746:	2000      	movs	r0, #0
   23748:	9503      	str	r5, [sp, #12]
   2374a:	f7fc fbd5 	bl	1fef8 <bsd_os_timedwait>
   2374e:	9b03      	ldr	r3, [sp, #12]
   23750:	f8d8 2000 	ldr.w	r2, [r8]
   23754:	3b64      	subs	r3, #100	; 0x64
   23756:	2a01      	cmp	r2, #1
   23758:	441c      	add	r4, r3
   2375a:	d0f2      	beq.n	23742 <rpc_transport_ipc_rx_init+0x1de>
   2375c:	f8d9 0000 	ldr.w	r0, [r9]
   23760:	b017      	add	sp, #92	; 0x5c
   23762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23766:	f24c 000e 	movw	r0, #49166	; 0xc00e
   2376a:	b017      	add	sp, #92	; 0x5c
   2376c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23770:	f24c 0009 	movw	r0, #49161	; 0xc009
   23774:	b017      	add	sp, #92	; 0x5c
   23776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2377a:	f24c 000e 	movw	r0, #49166	; 0xc00e
   2377e:	4770      	bx	lr
   23780:	4002a000 	.word	0x4002a000
   23784:	4002a610 	.word	0x4002a610
   23788:	4002a614 	.word	0x4002a614
   2378c:	4002a590 	.word	0x4002a590
   23790:	40005000 	.word	0x40005000
   23794:	e000e100 	.word	0xe000e100
   23798:	200224e4 	.word	0x200224e4
   2379c:	200224f0 	.word	0x200224f0
   237a0:	200224f4 	.word	0x200224f4
   237a4:	200224e0 	.word	0x200224e0

000237a8 <rpc_transport_ipc_msg_free>:
   237a8:	b470      	push	{r4, r5, r6}
   237aa:	4e17      	ldr	r6, [pc, #92]	; (23808 <rpc_transport_ipc_msg_free+0x60>)
   237ac:	6831      	ldr	r1, [r6, #0]
   237ae:	680d      	ldr	r5, [r1, #0]
   237b0:	b1ad      	cbz	r5, 237de <rpc_transport_ipc_msg_free+0x36>
   237b2:	688b      	ldr	r3, [r1, #8]
   237b4:	4283      	cmp	r3, r0
   237b6:	d024      	beq.n	23802 <rpc_transport_ipc_msg_free+0x5a>
   237b8:	2300      	movs	r3, #0
   237ba:	3301      	adds	r3, #1
   237bc:	00da      	lsls	r2, r3, #3
   237be:	429d      	cmp	r5, r3
   237c0:	eb01 0402 	add.w	r4, r1, r2
   237c4:	d00b      	beq.n	237de <rpc_transport_ipc_msg_free+0x36>
   237c6:	68a4      	ldr	r4, [r4, #8]
   237c8:	42a0      	cmp	r0, r4
   237ca:	d1f6      	bne.n	237ba <rpc_transport_ipc_msg_free+0x12>
   237cc:	3204      	adds	r2, #4
   237ce:	588b      	ldr	r3, [r1, r2]
   237d0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   237d4:	f043 0303 	orr.w	r3, r3, #3
   237d8:	508b      	str	r3, [r1, r2]
   237da:	bc70      	pop	{r4, r5, r6}
   237dc:	4770      	bx	lr
   237de:	6871      	ldr	r1, [r6, #4]
   237e0:	680d      	ldr	r5, [r1, #0]
   237e2:	2d00      	cmp	r5, #0
   237e4:	d0f9      	beq.n	237da <rpc_transport_ipc_msg_free+0x32>
   237e6:	688b      	ldr	r3, [r1, #8]
   237e8:	4283      	cmp	r3, r0
   237ea:	d00a      	beq.n	23802 <rpc_transport_ipc_msg_free+0x5a>
   237ec:	2300      	movs	r3, #0
   237ee:	3301      	adds	r3, #1
   237f0:	00da      	lsls	r2, r3, #3
   237f2:	429d      	cmp	r5, r3
   237f4:	eb01 0402 	add.w	r4, r1, r2
   237f8:	d0ef      	beq.n	237da <rpc_transport_ipc_msg_free+0x32>
   237fa:	68a4      	ldr	r4, [r4, #8]
   237fc:	42a0      	cmp	r0, r4
   237fe:	d1f6      	bne.n	237ee <rpc_transport_ipc_msg_free+0x46>
   23800:	e7e4      	b.n	237cc <rpc_transport_ipc_msg_free+0x24>
   23802:	2204      	movs	r2, #4
   23804:	e7e3      	b.n	237ce <rpc_transport_ipc_msg_free+0x26>
   23806:	bf00      	nop
   23808:	200224e8 	.word	0x200224e8

0002380c <rpc_transport_ipc_tx_init>:
   2380c:	2800      	cmp	r0, #0
   2380e:	f000 80b8 	beq.w	23982 <rpc_transport_ipc_tx_init+0x176>
   23812:	2900      	cmp	r1, #0
   23814:	f000 80b5 	beq.w	23982 <rpc_transport_ipc_tx_init+0x176>
   23818:	2a00      	cmp	r2, #0
   2381a:	f000 80b2 	beq.w	23982 <rpc_transport_ipc_tx_init+0x176>
   2381e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23822:	6a04      	ldr	r4, [r0, #32]
   23824:	b085      	sub	sp, #20
   23826:	2c00      	cmp	r4, #0
   23828:	f000 80a6 	beq.w	23978 <rpc_transport_ipc_tx_init+0x16c>
   2382c:	6a40      	ldr	r0, [r0, #36]	; 0x24
   2382e:	2800      	cmp	r0, #0
   23830:	f000 80a2 	beq.w	23978 <rpc_transport_ipc_tx_init+0x16c>
   23834:	f642 4587 	movw	r5, #11399	; 0x2c87
   23838:	f04f 0a00 	mov.w	sl, #0
   2383c:	4e55      	ldr	r6, [pc, #340]	; (23994 <rpc_transport_ipc_tx_init+0x188>)
   2383e:	42a8      	cmp	r0, r5
   23840:	f886 a000 	strb.w	sl, [r6]
   23844:	f240 80a0 	bls.w	23988 <rpc_transport_ipc_tx_init+0x17c>
   23848:	2708      	movs	r7, #8
   2384a:	f8df 9180 	ldr.w	r9, [pc, #384]	; 239cc <rpc_transport_ipc_tx_init+0x1c0>
   2384e:	4620      	mov	r0, r4
   23850:	4616      	mov	r6, r2
   23852:	460d      	mov	r5, r1
   23854:	2244      	movs	r2, #68	; 0x44
   23856:	4651      	mov	r1, sl
   23858:	f8c9 4000 	str.w	r4, [r9]
   2385c:	f015 fbeb 	bl	39036 <memset>
   23860:	f8d9 2000 	ldr.w	r2, [r9]
   23864:	f104 0344 	add.w	r3, r4, #68	; 0x44
   23868:	f8df 8164 	ldr.w	r8, [pc, #356]	; 239d0 <rpc_transport_ipc_tx_init+0x1c4>
   2386c:	f882 a001 	strb.w	sl, [r2, #1]
   23870:	f882 a002 	strb.w	sl, [r2, #2]
   23874:	f882 a003 	strb.w	sl, [r2, #3]
   23878:	7017      	strb	r7, [r2, #0]
   2387a:	4618      	mov	r0, r3
   2387c:	2244      	movs	r2, #68	; 0x44
   2387e:	4651      	mov	r1, sl
   23880:	f8c8 3000 	str.w	r3, [r8]
   23884:	f015 fbd7 	bl	39036 <memset>
   23888:	f8d8 2000 	ldr.w	r2, [r8]
   2388c:	f104 0388 	add.w	r3, r4, #136	; 0x88
   23890:	f8df b140 	ldr.w	fp, [pc, #320]	; 239d4 <rpc_transport_ipc_tx_init+0x1c8>
   23894:	7017      	strb	r7, [r2, #0]
   23896:	f882 a001 	strb.w	sl, [r2, #1]
   2389a:	f882 a002 	strb.w	sl, [r2, #2]
   2389e:	f882 a003 	strb.w	sl, [r2, #3]
   238a2:	4618      	mov	r0, r3
   238a4:	f44f 7200 	mov.w	r2, #512	; 0x200
   238a8:	4651      	mov	r1, sl
   238aa:	f8cb 3000 	str.w	r3, [fp]
   238ae:	f015 fbc2 	bl	39036 <memset>
   238b2:	4b39      	ldr	r3, [pc, #228]	; (23998 <rpc_transport_ipc_tx_init+0x18c>)
   238b4:	f504 7c22 	add.w	ip, r4, #648	; 0x288
   238b8:	f8c3 c000 	str.w	ip, [r3]
   238bc:	4651      	mov	r1, sl
   238be:	4660      	mov	r0, ip
   238c0:	f44f 7200 	mov.w	r2, #512	; 0x200
   238c4:	f015 fbb7 	bl	39036 <memset>
   238c8:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
   238cc:	2106      	movs	r1, #6
   238ce:	f04f 0e01 	mov.w	lr, #1
   238d2:	f44f 3001 	mov.w	r0, #132096	; 0x20400
   238d6:	f44f 3288 	mov.w	r2, #69632	; 0x11000
   238da:	4b30      	ldr	r3, [pc, #192]	; (2399c <rpc_transport_ipc_tx_init+0x190>)
   238dc:	f504 6491 	add.w	r4, r4, #1160	; 0x488
   238e0:	605c      	str	r4, [r3, #4]
   238e2:	4c2f      	ldr	r4, [pc, #188]	; (239a0 <rpc_transport_ipc_tx_init+0x194>)
   238e4:	f8c3 c008 	str.w	ip, [r3, #8]
   238e8:	8199      	strh	r1, [r3, #12]
   238ea:	f8a3 e000 	strh.w	lr, [r3]
   238ee:	4619      	mov	r1, r3
   238f0:	611c      	str	r4, [r3, #16]
   238f2:	4b2c      	ldr	r3, [pc, #176]	; (239a4 <rpc_transport_ipc_tx_init+0x198>)
   238f4:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 239d8 <rpc_transport_ipc_tx_init+0x1cc>
   238f8:	6120      	str	r0, [r4, #16]
   238fa:	482b      	ldr	r0, [pc, #172]	; (239a8 <rpc_transport_ipc_tx_init+0x19c>)
   238fc:	6063      	str	r3, [r4, #4]
   238fe:	f503 73c0 	add.w	r3, r3, #384	; 0x180
   23902:	60a0      	str	r0, [r4, #8]
   23904:	f8c4 c000 	str.w	ip, [r4]
   23908:	4828      	ldr	r0, [pc, #160]	; (239ac <rpc_transport_ipc_tx_init+0x1a0>)
   2390a:	60e3      	str	r3, [r4, #12]
   2390c:	6162      	str	r2, [r4, #20]
   2390e:	f006 f9ef 	bl	29cf0 <nrf_mem_register>
   23912:	2800      	cmp	r0, #0
   23914:	d132      	bne.n	2397c <rpc_transport_ipc_tx_init+0x170>
   23916:	f04f 0c02 	mov.w	ip, #2
   2391a:	2420      	movs	r4, #32
   2391c:	f8d9 1000 	ldr.w	r1, [r9]
   23920:	f8db 2000 	ldr.w	r2, [fp]
   23924:	6029      	str	r1, [r5, #0]
   23926:	4b1c      	ldr	r3, [pc, #112]	; (23998 <rpc_transport_ipc_tx_init+0x18c>)
   23928:	f8d8 1000 	ldr.w	r1, [r8]
   2392c:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 239dc <rpc_transport_ipc_tx_init+0x1d0>
   23930:	4d1f      	ldr	r5, [pc, #124]	; (239b0 <rpc_transport_ipc_tx_init+0x1a4>)
   23932:	6031      	str	r1, [r6, #0]
   23934:	f8ce 2000 	str.w	r2, [lr]
   23938:	681b      	ldr	r3, [r3, #0]
   2393a:	491e      	ldr	r1, [pc, #120]	; (239b4 <rpc_transport_ipc_tx_init+0x1a8>)
   2393c:	f502 7200 	add.w	r2, r2, #512	; 0x200
   23940:	602a      	str	r2, [r5, #0]
   23942:	4e1d      	ldr	r6, [pc, #116]	; (239b8 <rpc_transport_ipc_tx_init+0x1ac>)
   23944:	4a1d      	ldr	r2, [pc, #116]	; (239bc <rpc_transport_ipc_tx_init+0x1b0>)
   23946:	4d1e      	ldr	r5, [pc, #120]	; (239c0 <rpc_transport_ipc_tx_init+0x1b4>)
   23948:	600b      	str	r3, [r1, #0]
   2394a:	f503 7300 	add.w	r3, r3, #512	; 0x200
   2394e:	491d      	ldr	r1, [pc, #116]	; (239c4 <rpc_transport_ipc_tx_init+0x1b8>)
   23950:	6033      	str	r3, [r6, #0]
   23952:	8028      	strh	r0, [r5, #0]
   23954:	f8c2 c514 	str.w	ip, [r2, #1300]	; 0x514
   23958:	6809      	ldr	r1, [r1, #0]
   2395a:	4b1b      	ldr	r3, [pc, #108]	; (239c8 <rpc_transport_ipc_tx_init+0x1bc>)
   2395c:	9103      	str	r1, [sp, #12]
   2395e:	9903      	ldr	r1, [sp, #12]
   23960:	f8c2 751c 	str.w	r7, [r2, #1308]	; 0x51c
   23964:	6819      	ldr	r1, [r3, #0]
   23966:	443b      	add	r3, r7
   23968:	9102      	str	r1, [sp, #8]
   2396a:	9902      	ldr	r1, [sp, #8]
   2396c:	f8c2 4524 	str.w	r4, [r2, #1316]	; 0x524
   23970:	681b      	ldr	r3, [r3, #0]
   23972:	9301      	str	r3, [sp, #4]
   23974:	9b01      	ldr	r3, [sp, #4]
   23976:	e001      	b.n	2397c <rpc_transport_ipc_tx_init+0x170>
   23978:	f24c 0007 	movw	r0, #49159	; 0xc007
   2397c:	b005      	add	sp, #20
   2397e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23982:	f24c 000e 	movw	r0, #49166	; 0xc00e
   23986:	4770      	bx	lr
   23988:	f24c 0004 	movw	r0, #49156	; 0xc004
   2398c:	b005      	add	sp, #20
   2398e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23992:	bf00      	nop
   23994:	20029084 	.word	0x20029084
   23998:	20022520 	.word	0x20022520
   2399c:	2002250c 	.word	0x2002250c
   239a0:	20022530 	.word	0x20022530
   239a4:	00040080 	.word	0x00040080
   239a8:	00040100 	.word	0x00040100
   239ac:	200224f8 	.word	0x200224f8
   239b0:	20022504 	.word	0x20022504
   239b4:	20022500 	.word	0x20022500
   239b8:	200224fc 	.word	0x200224fc
   239bc:	4002a000 	.word	0x4002a000
   239c0:	2002761a 	.word	0x2002761a
   239c4:	4002a514 	.word	0x4002a514
   239c8:	4002a51c 	.word	0x4002a51c
   239cc:	2002252c 	.word	0x2002252c
   239d0:	20022524 	.word	0x20022524
   239d4:	20022528 	.word	0x20022528
   239d8:	00080040 	.word	0x00080040
   239dc:	20022508 	.word	0x20022508

000239e0 <rpc_transport_ipc_send>:
   239e0:	2800      	cmp	r0, #0
   239e2:	d061      	beq.n	23aa8 <rpc_transport_ipc_send+0xc8>
   239e4:	b4f0      	push	{r4, r5, r6, r7}
   239e6:	4b34      	ldr	r3, [pc, #208]	; (23ab8 <rpc_transport_ipc_send+0xd8>)
   239e8:	b082      	sub	sp, #8
   239ea:	681a      	ldr	r2, [r3, #0]
   239ec:	4b33      	ldr	r3, [pc, #204]	; (23abc <rpc_transport_ipc_send+0xdc>)
   239ee:	4282      	cmp	r2, r0
   239f0:	d81e      	bhi.n	23a30 <rpc_transport_ipc_send+0x50>
   239f2:	681b      	ldr	r3, [r3, #0]
   239f4:	4932      	ldr	r1, [pc, #200]	; (23ac0 <rpc_transport_ipc_send+0xe0>)
   239f6:	4283      	cmp	r3, r0
   239f8:	6809      	ldr	r1, [r1, #0]
   239fa:	d803      	bhi.n	23a04 <rpc_transport_ipc_send+0x24>
   239fc:	4c31      	ldr	r4, [pc, #196]	; (23ac4 <rpc_transport_ipc_send+0xe4>)
   239fe:	6824      	ldr	r4, [r4, #0]
   23a00:	4284      	cmp	r4, r0
   23a02:	d849      	bhi.n	23a98 <rpc_transport_ipc_send+0xb8>
   23a04:	4281      	cmp	r1, r0
   23a06:	d90e      	bls.n	23a26 <rpc_transport_ipc_send+0x46>
   23a08:	4b2f      	ldr	r3, [pc, #188]	; (23ac8 <rpc_transport_ipc_send+0xe8>)
   23a0a:	781b      	ldrb	r3, [r3, #0]
   23a0c:	2b00      	cmp	r3, #0
   23a0e:	d14e      	bne.n	23aae <rpc_transport_ipc_send+0xce>
   23a10:	1a83      	subs	r3, r0, r2
   23a12:	492e      	ldr	r1, [pc, #184]	; (23acc <rpc_transport_ipc_send+0xec>)
   23a14:	099f      	lsrs	r7, r3, #6
   23a16:	069b      	lsls	r3, r3, #26
   23a18:	680a      	ldr	r2, [r1, #0]
   23a1a:	4d2d      	ldr	r5, [pc, #180]	; (23ad0 <rpc_transport_ipc_send+0xf0>)
   23a1c:	f04f 0403 	mov.w	r4, #3
   23a20:	f04f 0602 	mov.w	r6, #2
   23a24:	d014      	beq.n	23a50 <rpc_transport_ipc_send+0x70>
   23a26:	f24c 0010 	movw	r0, #49168	; 0xc010
   23a2a:	b002      	add	sp, #8
   23a2c:	bcf0      	pop	{r4, r5, r6, r7}
   23a2e:	4770      	bx	lr
   23a30:	681b      	ldr	r3, [r3, #0]
   23a32:	4298      	cmp	r0, r3
   23a34:	d3f7      	bcc.n	23a26 <rpc_transport_ipc_send+0x46>
   23a36:	4a23      	ldr	r2, [pc, #140]	; (23ac4 <rpc_transport_ipc_send+0xe4>)
   23a38:	6812      	ldr	r2, [r2, #0]
   23a3a:	4290      	cmp	r0, r2
   23a3c:	d2f3      	bcs.n	23a26 <rpc_transport_ipc_send+0x46>
   23a3e:	2401      	movs	r4, #1
   23a40:	1ac3      	subs	r3, r0, r3
   23a42:	4a24      	ldr	r2, [pc, #144]	; (23ad4 <rpc_transport_ipc_send+0xf4>)
   23a44:	099f      	lsrs	r7, r3, #6
   23a46:	069b      	lsls	r3, r3, #26
   23a48:	4626      	mov	r6, r4
   23a4a:	6812      	ldr	r2, [r2, #0]
   23a4c:	4d22      	ldr	r5, [pc, #136]	; (23ad8 <rpc_transport_ipc_send+0xf8>)
   23a4e:	d1ea      	bne.n	23a26 <rpc_transport_ipc_send+0x46>
   23a50:	6841      	ldr	r1, [r0, #4]
   23a52:	b2c9      	uxtb	r1, r1
   23a54:	428e      	cmp	r6, r1
   23a56:	d122      	bne.n	23a9e <rpc_transport_ipc_send+0xbe>
   23a58:	2020      	movs	r0, #32
   23a5a:	eb02 03c7 	add.w	r3, r2, r7, lsl #3
   23a5e:	491f      	ldr	r1, [pc, #124]	; (23adc <rpc_transport_ipc_send+0xfc>)
   23a60:	685a      	ldr	r2, [r3, #4]
   23a62:	880e      	ldrh	r6, [r1, #0]
   23a64:	b292      	uxth	r2, r2
   23a66:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
   23a6a:	605a      	str	r2, [r3, #4]
   23a6c:	685a      	ldr	r2, [r3, #4]
   23a6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   23a72:	f042 0201 	orr.w	r2, r2, #1
   23a76:	605a      	str	r2, [r3, #4]
   23a78:	bf00      	nop
   23a7a:	3801      	subs	r0, #1
   23a7c:	d1fc      	bne.n	23a78 <rpc_transport_ipc_send+0x98>
   23a7e:	2201      	movs	r2, #1
   23a80:	4b17      	ldr	r3, [pc, #92]	; (23ae0 <rpc_transport_ipc_send+0x100>)
   23a82:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   23a86:	682a      	ldr	r2, [r5, #0]
   23a88:	880b      	ldrh	r3, [r1, #0]
   23a8a:	9201      	str	r2, [sp, #4]
   23a8c:	9a01      	ldr	r2, [sp, #4]
   23a8e:	3301      	adds	r3, #1
   23a90:	800b      	strh	r3, [r1, #0]
   23a92:	b002      	add	sp, #8
   23a94:	bcf0      	pop	{r4, r5, r6, r7}
   23a96:	4770      	bx	lr
   23a98:	4281      	cmp	r1, r0
   23a9a:	d9d0      	bls.n	23a3e <rpc_transport_ipc_send+0x5e>
   23a9c:	e7b4      	b.n	23a08 <rpc_transport_ipc_send+0x28>
   23a9e:	f24c 0007 	movw	r0, #49159	; 0xc007
   23aa2:	b002      	add	sp, #8
   23aa4:	bcf0      	pop	{r4, r5, r6, r7}
   23aa6:	4770      	bx	lr
   23aa8:	f24c 000e 	movw	r0, #49166	; 0xc00e
   23aac:	4770      	bx	lr
   23aae:	f24c 000f 	movw	r0, #49167	; 0xc00f
   23ab2:	b002      	add	sp, #8
   23ab4:	bcf0      	pop	{r4, r5, r6, r7}
   23ab6:	4770      	bx	lr
   23ab8:	20022508 	.word	0x20022508
   23abc:	20022500 	.word	0x20022500
   23ac0:	20022504 	.word	0x20022504
   23ac4:	200224fc 	.word	0x200224fc
   23ac8:	20029084 	.word	0x20029084
   23acc:	2002252c 	.word	0x2002252c
   23ad0:	4002a00c 	.word	0x4002a00c
   23ad4:	20022524 	.word	0x20022524
   23ad8:	4002a004 	.word	0x4002a004
   23adc:	2002761a 	.word	0x2002761a
   23ae0:	4002a000 	.word	0x4002a000

00023ae4 <rpc_transport_ipc_tx_rpc_data_alloc>:
   23ae4:	4b18      	ldr	r3, [pc, #96]	; (23b48 <rpc_transport_ipc_tx_rpc_data_alloc+0x64>)
   23ae6:	781b      	ldrb	r3, [r3, #0]
   23ae8:	bb63      	cbnz	r3, 23b44 <rpc_transport_ipc_tx_rpc_data_alloc+0x60>
   23aea:	b4f0      	push	{r4, r5, r6, r7}
   23aec:	4a17      	ldr	r2, [pc, #92]	; (23b4c <rpc_transport_ipc_tx_rpc_data_alloc+0x68>)
   23aee:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   23af2:	6814      	ldr	r4, [r2, #0]
   23af4:	4b16      	ldr	r3, [pc, #88]	; (23b50 <rpc_transport_ipc_tx_rpc_data_alloc+0x6c>)
   23af6:	6825      	ldr	r5, [r4, #0]
   23af8:	681e      	ldr	r6, [r3, #0]
   23afa:	b1a5      	cbz	r5, 23b26 <rpc_transport_ipc_tx_rpc_data_alloc+0x42>
   23afc:	4607      	mov	r7, r0
   23afe:	00c1      	lsls	r1, r0, #3
   23b00:	1863      	adds	r3, r4, r1
   23b02:	685a      	ldr	r2, [r3, #4]
   23b04:	b2d2      	uxtb	r2, r2
   23b06:	2a03      	cmp	r2, #3
   23b08:	d104      	bne.n	23b14 <rpc_transport_ipc_tx_rpc_data_alloc+0x30>
   23b0a:	609f      	str	r7, [r3, #8]
   23b0c:	685a      	ldr	r2, [r3, #4]
   23b0e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   23b12:	605a      	str	r2, [r3, #4]
   23b14:	685a      	ldr	r2, [r3, #4]
   23b16:	f012 0fff 	tst.w	r2, #255	; 0xff
   23b1a:	d101      	bne.n	23b20 <rpc_transport_ipc_tx_rpc_data_alloc+0x3c>
   23b1c:	689b      	ldr	r3, [r3, #8]
   23b1e:	b12b      	cbz	r3, 23b2c <rpc_transport_ipc_tx_rpc_data_alloc+0x48>
   23b20:	3001      	adds	r0, #1
   23b22:	42a8      	cmp	r0, r5
   23b24:	d1eb      	bne.n	23afe <rpc_transport_ipc_tx_rpc_data_alloc+0x1a>
   23b26:	2000      	movs	r0, #0
   23b28:	bcf0      	pop	{r4, r5, r6, r7}
   23b2a:	4770      	bx	lr
   23b2c:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   23b30:	4421      	add	r1, r4
   23b32:	6088      	str	r0, [r1, #8]
   23b34:	6843      	ldr	r3, [r0, #4]
   23b36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   23b3a:	f043 0302 	orr.w	r3, r3, #2
   23b3e:	6043      	str	r3, [r0, #4]
   23b40:	bcf0      	pop	{r4, r5, r6, r7}
   23b42:	4770      	bx	lr
   23b44:	2000      	movs	r0, #0
   23b46:	4770      	bx	lr
   23b48:	20029084 	.word	0x20029084
   23b4c:	2002252c 	.word	0x2002252c
   23b50:	20022528 	.word	0x20022528

00023b54 <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   23b54:	b4f0      	push	{r4, r5, r6, r7}
   23b56:	4a15      	ldr	r2, [pc, #84]	; (23bac <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x58>)
   23b58:	4b15      	ldr	r3, [pc, #84]	; (23bb0 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x5c>)
   23b5a:	6814      	ldr	r4, [r2, #0]
   23b5c:	681e      	ldr	r6, [r3, #0]
   23b5e:	6825      	ldr	r5, [r4, #0]
   23b60:	b1ad      	cbz	r5, 23b8e <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x3a>
   23b62:	2000      	movs	r0, #0
   23b64:	4607      	mov	r7, r0
   23b66:	00c1      	lsls	r1, r0, #3
   23b68:	1863      	adds	r3, r4, r1
   23b6a:	685a      	ldr	r2, [r3, #4]
   23b6c:	b2d2      	uxtb	r2, r2
   23b6e:	2a03      	cmp	r2, #3
   23b70:	d104      	bne.n	23b7c <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x28>
   23b72:	609f      	str	r7, [r3, #8]
   23b74:	685a      	ldr	r2, [r3, #4]
   23b76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   23b7a:	605a      	str	r2, [r3, #4]
   23b7c:	685a      	ldr	r2, [r3, #4]
   23b7e:	f012 0fff 	tst.w	r2, #255	; 0xff
   23b82:	d101      	bne.n	23b88 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x34>
   23b84:	689b      	ldr	r3, [r3, #8]
   23b86:	b12b      	cbz	r3, 23b94 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x40>
   23b88:	3001      	adds	r0, #1
   23b8a:	4285      	cmp	r5, r0
   23b8c:	d1eb      	bne.n	23b66 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x12>
   23b8e:	2000      	movs	r0, #0
   23b90:	bcf0      	pop	{r4, r5, r6, r7}
   23b92:	4770      	bx	lr
   23b94:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   23b98:	4421      	add	r1, r4
   23b9a:	6088      	str	r0, [r1, #8]
   23b9c:	6843      	ldr	r3, [r0, #4]
   23b9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   23ba2:	f043 0301 	orr.w	r3, r3, #1
   23ba6:	6043      	str	r3, [r0, #4]
   23ba8:	bcf0      	pop	{r4, r5, r6, r7}
   23baa:	4770      	bx	lr
   23bac:	20022524 	.word	0x20022524
   23bb0:	20022520 	.word	0x20022520

00023bb4 <rpc_transport_ipc_tx_data_alloc>:
   23bb4:	4b03      	ldr	r3, [pc, #12]	; (23bc4 <rpc_transport_ipc_tx_data_alloc+0x10>)
   23bb6:	781b      	ldrb	r3, [r3, #0]
   23bb8:	b90b      	cbnz	r3, 23bbe <rpc_transport_ipc_tx_data_alloc+0xa>
   23bba:	f006 b9c9 	b.w	29f50 <nrf_shared_malloc>
   23bbe:	2000      	movs	r0, #0
   23bc0:	4770      	bx	lr
   23bc2:	bf00      	nop
   23bc4:	20029084 	.word	0x20029084

00023bc8 <rpc_transport_ipc_tx_suspend>:
   23bc8:	2201      	movs	r2, #1
   23bca:	4b01      	ldr	r3, [pc, #4]	; (23bd0 <rpc_transport_ipc_tx_suspend+0x8>)
   23bcc:	701a      	strb	r2, [r3, #0]
   23bce:	4770      	bx	lr
   23bd0:	20029084 	.word	0x20029084

00023bd4 <secure_client_socket>:
   23bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23bd8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   23bdc:	460c      	mov	r4, r1
   23bde:	680b      	ldr	r3, [r1, #0]
   23be0:	4f46      	ldr	r7, [pc, #280]	; (23cfc <secure_client_socket+0x128>)
   23be2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   23be6:	600b      	str	r3, [r1, #0]
   23be8:	680b      	ldr	r3, [r1, #0]
   23bea:	00c6      	lsls	r6, r0, #3
   23bec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   23bf0:	600b      	str	r3, [r1, #0]
   23bf2:	eb07 0a06 	add.w	sl, r7, r6
   23bf6:	b084      	sub	sp, #16
   23bf8:	f8da 3004 	ldr.w	r3, [sl, #4]
   23bfc:	6989      	ldr	r1, [r1, #24]
   23bfe:	f247 0281 	movw	r2, #28801	; 0x7081
   23c02:	4605      	mov	r5, r0
   23c04:	f8d4 8000 	ldr.w	r8, [r4]
   23c08:	e9cd cc02 	strd	ip, ip, [sp, #8]
   23c0c:	f000 fd92 	bl	24734 <ip_interface_request_create>
   23c10:	2800      	cmp	r0, #0
   23c12:	d06d      	beq.n	23cf0 <secure_client_socket+0x11c>
   23c14:	f8da 2004 	ldr.w	r2, [sl, #4]
   23c18:	4681      	mov	r9, r0
   23c1a:	2a00      	cmp	r2, #0
   23c1c:	d15d      	bne.n	23cda <secure_client_socket+0x106>
   23c1e:	4b38      	ldr	r3, [pc, #224]	; (23d00 <secure_client_socket+0x12c>)
   23c20:	1971      	adds	r1, r6, r5
   23c22:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   23c26:	2224      	movs	r2, #36	; 0x24
   23c28:	f109 0014 	add.w	r0, r9, #20
   23c2c:	f015 f9c9 	bl	38fc2 <memcpy>
   23c30:	f8d9 3008 	ldr.w	r3, [r9, #8]
   23c34:	4649      	mov	r1, r9
   23c36:	3324      	adds	r3, #36	; 0x24
   23c38:	f8c9 3008 	str.w	r3, [r9, #8]
   23c3c:	6822      	ldr	r2, [r4, #0]
   23c3e:	4643      	mov	r3, r8
   23c40:	0c12      	lsrs	r2, r2, #16
   23c42:	0412      	lsls	r2, r2, #16
   23c44:	f042 020a 	orr.w	r2, r2, #10
   23c48:	6022      	str	r2, [r4, #0]
   23c4a:	4620      	mov	r0, r4
   23c4c:	f247 0281 	movw	r2, #28801	; 0x7081
   23c50:	f000 fd90 	bl	24774 <ip_interface_request_send>
   23c54:	4603      	mov	r3, r0
   23c56:	b968      	cbnz	r0, 23c74 <secure_client_socket+0xa0>
   23c58:	6823      	ldr	r3, [r4, #0]
   23c5a:	00db      	lsls	r3, r3, #3
   23c5c:	d40e      	bmi.n	23c7c <secure_client_socket+0xa8>
   23c5e:	ab03      	add	r3, sp, #12
   23c60:	f64f 72ff 	movw	r2, #65535	; 0xffff
   23c64:	210b      	movs	r1, #11
   23c66:	4628      	mov	r0, r5
   23c68:	f000 fd98 	bl	2479c <ip_interface_wait>
   23c6c:	4603      	mov	r3, r0
   23c6e:	b150      	cbz	r0, 23c86 <secure_client_socket+0xb2>
   23c70:	f8c4 8000 	str.w	r8, [r4]
   23c74:	4618      	mov	r0, r3
   23c76:	b004      	add	sp, #16
   23c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23c7c:	2373      	movs	r3, #115	; 0x73
   23c7e:	4618      	mov	r0, r3
   23c80:	b004      	add	sp, #16
   23c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23c86:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   23c8a:	ab02      	add	r3, sp, #8
   23c8c:	4611      	mov	r1, r2
   23c8e:	4628      	mov	r0, r5
   23c90:	f000 fd84 	bl	2479c <ip_interface_wait>
   23c94:	4603      	mov	r3, r0
   23c96:	bb30      	cbnz	r0, 23ce6 <secure_client_socket+0x112>
   23c98:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   23c9c:	b138      	cbz	r0, 23cae <secure_client_socket+0xda>
   23c9e:	9301      	str	r3, [sp, #4]
   23ca0:	f006 f94a 	bl	29f38 <nrf_free>
   23ca4:	9b01      	ldr	r3, [sp, #4]
   23ca6:	443e      	add	r6, r7
   23ca8:	6073      	str	r3, [r6, #4]
   23caa:	f847 3035 	str.w	r3, [r7, r5, lsl #3]
   23cae:	4618      	mov	r0, r3
   23cb0:	6822      	ldr	r2, [r4, #0]
   23cb2:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   23cb6:	6022      	str	r2, [r4, #0]
   23cb8:	6822      	ldr	r2, [r4, #0]
   23cba:	0c12      	lsrs	r2, r2, #16
   23cbc:	0412      	lsls	r2, r2, #16
   23cbe:	f042 020c 	orr.w	r2, r2, #12
   23cc2:	6022      	str	r2, [r4, #0]
   23cc4:	6822      	ldr	r2, [r4, #0]
   23cc6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   23cca:	6022      	str	r2, [r4, #0]
   23ccc:	6822      	ldr	r2, [r4, #0]
   23cce:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   23cd2:	6022      	str	r2, [r4, #0]
   23cd4:	b004      	add	sp, #16
   23cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23cda:	f857 1035 	ldr.w	r1, [r7, r5, lsl #3]
   23cde:	6800      	ldr	r0, [r0, #0]
   23ce0:	f015 f96f 	bl	38fc2 <memcpy>
   23ce4:	e79b      	b.n	23c1e <secure_client_socket+0x4a>
   23ce6:	2b73      	cmp	r3, #115	; 0x73
   23ce8:	d0c4      	beq.n	23c74 <secure_client_socket+0xa0>
   23cea:	f8c4 8000 	str.w	r8, [r4]
   23cee:	e7c1      	b.n	23c74 <secure_client_socket+0xa0>
   23cf0:	230c      	movs	r3, #12
   23cf2:	4618      	mov	r0, r3
   23cf4:	b004      	add	sp, #16
   23cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23cfa:	bf00      	nop
   23cfc:	2002268c 	.word	0x2002268c
   23d00:	20022548 	.word	0x20022548

00023d04 <tls_interface_init>:
   23d04:	2201      	movs	r2, #1
   23d06:	4b02      	ldr	r3, [pc, #8]	; (23d10 <tls_interface_init+0xc>)
   23d08:	2000      	movs	r0, #0
   23d0a:	701a      	strb	r2, [r3, #0]
   23d0c:	4770      	bx	lr
   23d0e:	bf00      	nop
   23d10:	20029085 	.word	0x20029085

00023d14 <tls_interface_open>:
   23d14:	b538      	push	{r3, r4, r5, lr}
   23d16:	4b23      	ldr	r3, [pc, #140]	; (23da4 <tls_interface_open+0x90>)
   23d18:	781b      	ldrb	r3, [r3, #0]
   23d1a:	2b00      	cmp	r3, #0
   23d1c:	d03c      	beq.n	23d98 <tls_interface_open+0x84>
   23d1e:	1e4b      	subs	r3, r1, #1
   23d20:	2b01      	cmp	r3, #1
   23d22:	d808      	bhi.n	23d36 <tls_interface_open+0x22>
   23d24:	4614      	mov	r4, r2
   23d26:	b162      	cbz	r2, 23d42 <tls_interface_open+0x2e>
   23d28:	2901      	cmp	r1, #1
   23d2a:	d02d      	beq.n	23d88 <tls_interface_open+0x74>
   23d2c:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   23d30:	bf08      	it	eq
   23d32:	2202      	moveq	r2, #2
   23d34:	d00d      	beq.n	23d52 <tls_interface_open+0x3e>
   23d36:	2029      	movs	r0, #41	; 0x29
   23d38:	f7fc f988 	bl	2004c <bsd_os_errno_set>
   23d3c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   23d40:	e020      	b.n	23d84 <tls_interface_open+0x70>
   23d42:	2901      	cmp	r1, #1
   23d44:	bf0b      	itete	eq
   23d46:	2201      	moveq	r2, #1
   23d48:	2202      	movne	r2, #2
   23d4a:	f44f 7482 	moveq.w	r4, #260	; 0x104
   23d4e:	f44f 7487 	movne.w	r4, #270	; 0x10e
   23d52:	f000 fd55 	bl	24800 <ip_interface_open>
   23d56:	1e05      	subs	r5, r0, #0
   23d58:	db1b      	blt.n	23d92 <tls_interface_open+0x7e>
   23d5a:	4b13      	ldr	r3, [pc, #76]	; (23da8 <tls_interface_open+0x94>)
   23d5c:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
   23d60:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   23d64:	2224      	movs	r2, #36	; 0x24
   23d66:	4911      	ldr	r1, [pc, #68]	; (23dac <tls_interface_open+0x98>)
   23d68:	f015 f92b 	bl	38fc2 <memcpy>
   23d6c:	4628      	mov	r0, r5
   23d6e:	f006 fd31 	bl	2a7d4 <interface_socket_from_handle_get>
   23d72:	6803      	ldr	r3, [r0, #0]
   23d74:	6144      	str	r4, [r0, #20]
   23d76:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   23d7a:	6003      	str	r3, [r0, #0]
   23d7c:	6803      	ldr	r3, [r0, #0]
   23d7e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   23d82:	6003      	str	r3, [r0, #0]
   23d84:	4628      	mov	r0, r5
   23d86:	bd38      	pop	{r3, r4, r5, pc}
   23d88:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   23d8c:	d1d3      	bne.n	23d36 <tls_interface_open+0x22>
   23d8e:	460a      	mov	r2, r1
   23d90:	e7df      	b.n	23d52 <tls_interface_open+0x3e>
   23d92:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   23d96:	e7f5      	b.n	23d84 <tls_interface_open+0x70>
   23d98:	2070      	movs	r0, #112	; 0x70
   23d9a:	f7fc f957 	bl	2004c <bsd_os_errno_set>
   23d9e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   23da2:	e7ef      	b.n	23d84 <tls_interface_open+0x70>
   23da4:	20029085 	.word	0x20029085
   23da8:	20022548 	.word	0x20022548
   23dac:	0003a904 	.word	0x0003a904

00023db0 <tls_interface_close>:
   23db0:	b538      	push	{r3, r4, r5, lr}
   23db2:	4604      	mov	r4, r0
   23db4:	f006 fd0e 	bl	2a7d4 <interface_socket_from_handle_get>
   23db8:	b180      	cbz	r0, 23ddc <tls_interface_close+0x2c>
   23dba:	4d0b      	ldr	r5, [pc, #44]	; (23de8 <tls_interface_close+0x38>)
   23dbc:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
   23dc0:	b138      	cbz	r0, 23dd2 <tls_interface_close+0x22>
   23dc2:	f006 f8b9 	bl	29f38 <nrf_free>
   23dc6:	2300      	movs	r3, #0
   23dc8:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
   23dcc:	f845 3034 	str.w	r3, [r5, r4, lsl #3]
   23dd0:	6053      	str	r3, [r2, #4]
   23dd2:	4620      	mov	r0, r4
   23dd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   23dd8:	f000 bdd8 	b.w	2498c <ip_interface_close>
   23ddc:	2009      	movs	r0, #9
   23dde:	f7fc f935 	bl	2004c <bsd_os_errno_set>
   23de2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23de6:	bd38      	pop	{r3, r4, r5, pc}
   23de8:	2002268c 	.word	0x2002268c

00023dec <tls_interface_sendto>:
   23dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23df0:	460d      	mov	r5, r1
   23df2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   23df6:	4616      	mov	r6, r2
   23df8:	461f      	mov	r7, r3
   23dfa:	4604      	mov	r4, r0
   23dfc:	f006 fcea 	bl	2a7d4 <interface_socket_from_handle_get>
   23e00:	2800      	cmp	r0, #0
   23e02:	d03b      	beq.n	23e7c <tls_interface_sendto+0x90>
   23e04:	6803      	ldr	r3, [r0, #0]
   23e06:	b29b      	uxth	r3, r3
   23e08:	2b0c      	cmp	r3, #12
   23e0a:	d039      	beq.n	23e80 <tls_interface_sendto+0x94>
   23e0c:	6803      	ldr	r3, [r0, #0]
   23e0e:	b29b      	uxth	r3, r3
   23e10:	2b0b      	cmp	r3, #11
   23e12:	d111      	bne.n	23e38 <tls_interface_sendto+0x4c>
   23e14:	4b20      	ldr	r3, [pc, #128]	; (23e98 <tls_interface_sendto+0xac>)
   23e16:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   23e1a:	f813 3024 	ldrb.w	r3, [r3, r4, lsl #2]
   23e1e:	2b02      	cmp	r3, #2
   23e20:	d038      	beq.n	23e94 <tls_interface_sendto+0xa8>
   23e22:	6903      	ldr	r3, [r0, #16]
   23e24:	2b01      	cmp	r3, #1
   23e26:	bf14      	ite	ne
   23e28:	2039      	movne	r0, #57	; 0x39
   23e2a:	202a      	moveq	r0, #42	; 0x2a
   23e2c:	f7fc f90e 	bl	2004c <bsd_os_errno_set>
   23e30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23e38:	6903      	ldr	r3, [r0, #16]
   23e3a:	2b01      	cmp	r3, #1
   23e3c:	d00b      	beq.n	23e56 <tls_interface_sendto+0x6a>
   23e3e:	2b02      	cmp	r3, #2
   23e40:	d001      	beq.n	23e46 <tls_interface_sendto+0x5a>
   23e42:	2039      	movs	r0, #57	; 0x39
   23e44:	e7f2      	b.n	23e2c <tls_interface_sendto+0x40>
   23e46:	6803      	ldr	r3, [r0, #0]
   23e48:	b29b      	uxth	r3, r3
   23e4a:	2b02      	cmp	r3, #2
   23e4c:	d007      	beq.n	23e5e <tls_interface_sendto+0x72>
   23e4e:	6803      	ldr	r3, [r0, #0]
   23e50:	b29b      	uxth	r3, r3
   23e52:	2b04      	cmp	r3, #4
   23e54:	d003      	beq.n	23e5e <tls_interface_sendto+0x72>
   23e56:	6803      	ldr	r3, [r0, #0]
   23e58:	b29b      	uxth	r3, r3
   23e5a:	2b05      	cmp	r3, #5
   23e5c:	d1f1      	bne.n	23e42 <tls_interface_sendto+0x56>
   23e5e:	4b0e      	ldr	r3, [pc, #56]	; (23e98 <tls_interface_sendto+0xac>)
   23e60:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   23e64:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   23e68:	2b02      	cmp	r3, #2
   23e6a:	d1ea      	bne.n	23e42 <tls_interface_sendto+0x56>
   23e6c:	4601      	mov	r1, r0
   23e6e:	4620      	mov	r0, r4
   23e70:	f7ff feb0 	bl	23bd4 <secure_client_socket>
   23e74:	2800      	cmp	r0, #0
   23e76:	d003      	beq.n	23e80 <tls_interface_sendto+0x94>
   23e78:	dcd8      	bgt.n	23e2c <tls_interface_sendto+0x40>
   23e7a:	e7d9      	b.n	23e30 <tls_interface_sendto+0x44>
   23e7c:	2009      	movs	r0, #9
   23e7e:	e7d5      	b.n	23e2c <tls_interface_sendto+0x40>
   23e80:	e9cd 8908 	strd	r8, r9, [sp, #32]
   23e84:	463b      	mov	r3, r7
   23e86:	4632      	mov	r2, r6
   23e88:	4629      	mov	r1, r5
   23e8a:	4620      	mov	r0, r4
   23e8c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23e90:	f000 bdee 	b.w	24a70 <ip_interface_sendto>
   23e94:	2023      	movs	r0, #35	; 0x23
   23e96:	e7c9      	b.n	23e2c <tls_interface_sendto+0x40>
   23e98:	20022548 	.word	0x20022548

00023e9c <tls_interface_recvfrom>:
   23e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23ea0:	460d      	mov	r5, r1
   23ea2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   23ea6:	4616      	mov	r6, r2
   23ea8:	461f      	mov	r7, r3
   23eaa:	4604      	mov	r4, r0
   23eac:	f006 fc92 	bl	2a7d4 <interface_socket_from_handle_get>
   23eb0:	2800      	cmp	r0, #0
   23eb2:	d038      	beq.n	23f26 <tls_interface_recvfrom+0x8a>
   23eb4:	6803      	ldr	r3, [r0, #0]
   23eb6:	b29b      	uxth	r3, r3
   23eb8:	2b0c      	cmp	r3, #12
   23eba:	d00f      	beq.n	23edc <tls_interface_recvfrom+0x40>
   23ebc:	6803      	ldr	r3, [r0, #0]
   23ebe:	b29b      	uxth	r3, r3
   23ec0:	2b0d      	cmp	r3, #13
   23ec2:	d00b      	beq.n	23edc <tls_interface_recvfrom+0x40>
   23ec4:	6903      	ldr	r3, [r0, #16]
   23ec6:	2b01      	cmp	r3, #1
   23ec8:	d01a      	beq.n	23f00 <tls_interface_recvfrom+0x64>
   23eca:	2b02      	cmp	r3, #2
   23ecc:	d010      	beq.n	23ef0 <tls_interface_recvfrom+0x54>
   23ece:	2023      	movs	r0, #35	; 0x23
   23ed0:	f7fc f8bc 	bl	2004c <bsd_os_errno_set>
   23ed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23edc:	e9cd 8908 	strd	r8, r9, [sp, #32]
   23ee0:	463b      	mov	r3, r7
   23ee2:	4632      	mov	r2, r6
   23ee4:	4629      	mov	r1, r5
   23ee6:	4620      	mov	r0, r4
   23ee8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23eec:	f000 bf26 	b.w	24d3c <ip_interface_recvfrom>
   23ef0:	6803      	ldr	r3, [r0, #0]
   23ef2:	b29b      	uxth	r3, r3
   23ef4:	2b02      	cmp	r3, #2
   23ef6:	d007      	beq.n	23f08 <tls_interface_recvfrom+0x6c>
   23ef8:	6803      	ldr	r3, [r0, #0]
   23efa:	b29b      	uxth	r3, r3
   23efc:	2b04      	cmp	r3, #4
   23efe:	d003      	beq.n	23f08 <tls_interface_recvfrom+0x6c>
   23f00:	6803      	ldr	r3, [r0, #0]
   23f02:	b29b      	uxth	r3, r3
   23f04:	2b05      	cmp	r3, #5
   23f06:	d1e2      	bne.n	23ece <tls_interface_recvfrom+0x32>
   23f08:	4b08      	ldr	r3, [pc, #32]	; (23f2c <tls_interface_recvfrom+0x90>)
   23f0a:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   23f0e:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   23f12:	2b02      	cmp	r3, #2
   23f14:	d1db      	bne.n	23ece <tls_interface_recvfrom+0x32>
   23f16:	4601      	mov	r1, r0
   23f18:	4620      	mov	r0, r4
   23f1a:	f7ff fe5b 	bl	23bd4 <secure_client_socket>
   23f1e:	2800      	cmp	r0, #0
   23f20:	d0dc      	beq.n	23edc <tls_interface_recvfrom+0x40>
   23f22:	dcd5      	bgt.n	23ed0 <tls_interface_recvfrom+0x34>
   23f24:	e7d6      	b.n	23ed4 <tls_interface_recvfrom+0x38>
   23f26:	2009      	movs	r0, #9
   23f28:	e7d2      	b.n	23ed0 <tls_interface_recvfrom+0x34>
   23f2a:	bf00      	nop
   23f2c:	20022548 	.word	0x20022548

00023f30 <tls_interface_bind>:
   23f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23f34:	b082      	sub	sp, #8
   23f36:	460e      	mov	r6, r1
   23f38:	4617      	mov	r7, r2
   23f3a:	4605      	mov	r5, r0
   23f3c:	f006 fc4a 	bl	2a7d4 <interface_socket_from_handle_get>
   23f40:	2800      	cmp	r0, #0
   23f42:	d069      	beq.n	24018 <tls_interface_bind+0xe8>
   23f44:	6803      	ldr	r3, [r0, #0]
   23f46:	4604      	mov	r4, r0
   23f48:	b29b      	uxth	r3, r3
   23f4a:	2b02      	cmp	r3, #2
   23f4c:	d158      	bne.n	24000 <tls_interface_bind+0xd0>
   23f4e:	463a      	mov	r2, r7
   23f50:	4631      	mov	r1, r6
   23f52:	4628      	mov	r0, r5
   23f54:	f001 f8dc 	bl	25110 <ip_interface_bind>
   23f58:	2800      	cmp	r0, #0
   23f5a:	d148      	bne.n	23fee <tls_interface_bind+0xbe>
   23f5c:	00ee      	lsls	r6, r5, #3
   23f5e:	4f2f      	ldr	r7, [pc, #188]	; (2401c <tls_interface_bind+0xec>)
   23f60:	1973      	adds	r3, r6, r5
   23f62:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   23f66:	2b01      	cmp	r3, #1
   23f68:	d002      	beq.n	23f70 <tls_interface_bind+0x40>
   23f6a:	b002      	add	sp, #8
   23f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23f70:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   23f74:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 24020 <tls_interface_bind+0xf0>
   23f78:	f247 0281 	movw	r2, #28801	; 0x7081
   23f7c:	eb0a 0906 	add.w	r9, sl, r6
   23f80:	f8d9 3004 	ldr.w	r3, [r9, #4]
   23f84:	69a1      	ldr	r1, [r4, #24]
   23f86:	4628      	mov	r0, r5
   23f88:	f8cd c004 	str.w	ip, [sp, #4]
   23f8c:	f000 fbd2 	bl	24734 <ip_interface_request_create>
   23f90:	4680      	mov	r8, r0
   23f92:	2800      	cmp	r0, #0
   23f94:	d03e      	beq.n	24014 <tls_interface_bind+0xe4>
   23f96:	f8d9 2004 	ldr.w	r2, [r9, #4]
   23f9a:	bbaa      	cbnz	r2, 24008 <tls_interface_bind+0xd8>
   23f9c:	1971      	adds	r1, r6, r5
   23f9e:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   23fa2:	2224      	movs	r2, #36	; 0x24
   23fa4:	f108 0014 	add.w	r0, r8, #20
   23fa8:	f015 f80b 	bl	38fc2 <memcpy>
   23fac:	f8d8 3008 	ldr.w	r3, [r8, #8]
   23fb0:	4641      	mov	r1, r8
   23fb2:	3324      	adds	r3, #36	; 0x24
   23fb4:	f8c8 3008 	str.w	r3, [r8, #8]
   23fb8:	6822      	ldr	r2, [r4, #0]
   23fba:	2304      	movs	r3, #4
   23fbc:	0c12      	lsrs	r2, r2, #16
   23fbe:	0412      	lsls	r2, r2, #16
   23fc0:	f042 020a 	orr.w	r2, r2, #10
   23fc4:	6022      	str	r2, [r4, #0]
   23fc6:	4620      	mov	r0, r4
   23fc8:	f247 0281 	movw	r2, #28801	; 0x7081
   23fcc:	f000 fbd2 	bl	24774 <ip_interface_request_send>
   23fd0:	b968      	cbnz	r0, 23fee <tls_interface_bind+0xbe>
   23fd2:	6823      	ldr	r3, [r4, #0]
   23fd4:	00db      	lsls	r3, r3, #3
   23fd6:	d415      	bmi.n	24004 <tls_interface_bind+0xd4>
   23fd8:	4628      	mov	r0, r5
   23fda:	ab01      	add	r3, sp, #4
   23fdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   23fe0:	210b      	movs	r1, #11
   23fe2:	f000 fbdb 	bl	2479c <ip_interface_wait>
   23fe6:	2800      	cmp	r0, #0
   23fe8:	d0bf      	beq.n	23f6a <tls_interface_bind+0x3a>
   23fea:	2304      	movs	r3, #4
   23fec:	6023      	str	r3, [r4, #0]
   23fee:	2800      	cmp	r0, #0
   23ff0:	ddbb      	ble.n	23f6a <tls_interface_bind+0x3a>
   23ff2:	f7fc f82b 	bl	2004c <bsd_os_errno_set>
   23ff6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23ffa:	b002      	add	sp, #8
   23ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24000:	202d      	movs	r0, #45	; 0x2d
   24002:	e7f6      	b.n	23ff2 <tls_interface_bind+0xc2>
   24004:	2073      	movs	r0, #115	; 0x73
   24006:	e7f4      	b.n	23ff2 <tls_interface_bind+0xc2>
   24008:	f85a 1035 	ldr.w	r1, [sl, r5, lsl #3]
   2400c:	6800      	ldr	r0, [r0, #0]
   2400e:	f014 ffd8 	bl	38fc2 <memcpy>
   24012:	e7c3      	b.n	23f9c <tls_interface_bind+0x6c>
   24014:	200c      	movs	r0, #12
   24016:	e7ec      	b.n	23ff2 <tls_interface_bind+0xc2>
   24018:	2009      	movs	r0, #9
   2401a:	e7ea      	b.n	23ff2 <tls_interface_bind+0xc2>
   2401c:	20022548 	.word	0x20022548
   24020:	2002268c 	.word	0x2002268c

00024024 <tls_interface_connect>:
   24024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24026:	460e      	mov	r6, r1
   24028:	4617      	mov	r7, r2
   2402a:	4604      	mov	r4, r0
   2402c:	f006 fbd2 	bl	2a7d4 <interface_socket_from_handle_get>
   24030:	b1e8      	cbz	r0, 2406e <tls_interface_connect+0x4a>
   24032:	4b13      	ldr	r3, [pc, #76]	; (24080 <tls_interface_connect+0x5c>)
   24034:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   24038:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   2403c:	2b02      	cmp	r3, #2
   2403e:	d11c      	bne.n	2407a <tls_interface_connect+0x56>
   24040:	6803      	ldr	r3, [r0, #0]
   24042:	4605      	mov	r5, r0
   24044:	b29b      	uxth	r3, r3
   24046:	2b02      	cmp	r3, #2
   24048:	d003      	beq.n	24052 <tls_interface_connect+0x2e>
   2404a:	6803      	ldr	r3, [r0, #0]
   2404c:	b29b      	uxth	r3, r3
   2404e:	2b04      	cmp	r3, #4
   24050:	d113      	bne.n	2407a <tls_interface_connect+0x56>
   24052:	463a      	mov	r2, r7
   24054:	4631      	mov	r1, r6
   24056:	4620      	mov	r0, r4
   24058:	f000 ff98 	bl	24f8c <ip_interface_connect>
   2405c:	b110      	cbz	r0, 24064 <tls_interface_connect+0x40>
   2405e:	2800      	cmp	r0, #0
   24060:	dc06      	bgt.n	24070 <tls_interface_connect+0x4c>
   24062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24064:	4629      	mov	r1, r5
   24066:	4620      	mov	r0, r4
   24068:	f7ff fdb4 	bl	23bd4 <secure_client_socket>
   2406c:	e7f7      	b.n	2405e <tls_interface_connect+0x3a>
   2406e:	2009      	movs	r0, #9
   24070:	f7fb ffec 	bl	2004c <bsd_os_errno_set>
   24074:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2407a:	202d      	movs	r0, #45	; 0x2d
   2407c:	e7f8      	b.n	24070 <tls_interface_connect+0x4c>
   2407e:	bf00      	nop
   24080:	20022548 	.word	0x20022548

00024084 <tls_interface_listen>:
   24084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24088:	b085      	sub	sp, #20
   2408a:	9101      	str	r1, [sp, #4]
   2408c:	4605      	mov	r5, r0
   2408e:	f006 fba1 	bl	2a7d4 <interface_socket_from_handle_get>
   24092:	2800      	cmp	r0, #0
   24094:	d07c      	beq.n	24190 <tls_interface_listen+0x10c>
   24096:	6903      	ldr	r3, [r0, #16]
   24098:	4604      	mov	r4, r0
   2409a:	2b01      	cmp	r3, #1
   2409c:	d176      	bne.n	2418c <tls_interface_listen+0x108>
   2409e:	6803      	ldr	r3, [r0, #0]
   240a0:	b29b      	uxth	r3, r3
   240a2:	2b04      	cmp	r3, #4
   240a4:	d062      	beq.n	2416c <tls_interface_listen+0xe8>
   240a6:	6823      	ldr	r3, [r4, #0]
   240a8:	b29b      	uxth	r3, r3
   240aa:	2b0b      	cmp	r3, #11
   240ac:	d16e      	bne.n	2418c <tls_interface_listen+0x108>
   240ae:	00ee      	lsls	r6, r5, #3
   240b0:	4f38      	ldr	r7, [pc, #224]	; (24194 <tls_interface_listen+0x110>)
   240b2:	1973      	adds	r3, r6, r5
   240b4:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   240b8:	2b01      	cmp	r3, #1
   240ba:	d167      	bne.n	2418c <tls_interface_listen+0x108>
   240bc:	2201      	movs	r2, #1
   240be:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   240c2:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 24198 <tls_interface_listen+0x114>
   240c6:	1973      	adds	r3, r6, r5
   240c8:	00ee      	lsls	r6, r5, #3
   240ca:	f807 2023 	strb.w	r2, [r7, r3, lsl #2]
   240ce:	eb09 0806 	add.w	r8, r9, r6
   240d2:	69a1      	ldr	r1, [r4, #24]
   240d4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   240d8:	f247 0281 	movw	r2, #28801	; 0x7081
   240dc:	4628      	mov	r0, r5
   240de:	f8d4 a000 	ldr.w	sl, [r4]
   240e2:	f8cd c00c 	str.w	ip, [sp, #12]
   240e6:	f000 fb25 	bl	24734 <ip_interface_request_create>
   240ea:	4683      	mov	fp, r0
   240ec:	2800      	cmp	r0, #0
   240ee:	d04b      	beq.n	24188 <tls_interface_listen+0x104>
   240f0:	f8d8 2004 	ldr.w	r2, [r8, #4]
   240f4:	2a00      	cmp	r2, #0
   240f6:	d141      	bne.n	2417c <tls_interface_listen+0xf8>
   240f8:	1971      	adds	r1, r6, r5
   240fa:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   240fe:	2224      	movs	r2, #36	; 0x24
   24100:	f10b 0014 	add.w	r0, fp, #20
   24104:	f014 ff5d 	bl	38fc2 <memcpy>
   24108:	f8db 2008 	ldr.w	r2, [fp, #8]
   2410c:	4659      	mov	r1, fp
   2410e:	3224      	adds	r2, #36	; 0x24
   24110:	f8cb 2008 	str.w	r2, [fp, #8]
   24114:	6822      	ldr	r2, [r4, #0]
   24116:	4653      	mov	r3, sl
   24118:	0c12      	lsrs	r2, r2, #16
   2411a:	0412      	lsls	r2, r2, #16
   2411c:	f042 020a 	orr.w	r2, r2, #10
   24120:	6022      	str	r2, [r4, #0]
   24122:	4620      	mov	r0, r4
   24124:	f247 0281 	movw	r2, #28801	; 0x7081
   24128:	f000 fb24 	bl	24774 <ip_interface_request_send>
   2412c:	b960      	cbnz	r0, 24148 <tls_interface_listen+0xc4>
   2412e:	6823      	ldr	r3, [r4, #0]
   24130:	00db      	lsls	r3, r3, #3
   24132:	d40e      	bmi.n	24152 <tls_interface_listen+0xce>
   24134:	ab03      	add	r3, sp, #12
   24136:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2413a:	210b      	movs	r1, #11
   2413c:	4628      	mov	r0, r5
   2413e:	f000 fb2d 	bl	2479c <ip_interface_wait>
   24142:	b170      	cbz	r0, 24162 <tls_interface_listen+0xde>
   24144:	f8c4 a000 	str.w	sl, [r4]
   24148:	2800      	cmp	r0, #0
   2414a:	dc03      	bgt.n	24154 <tls_interface_listen+0xd0>
   2414c:	b005      	add	sp, #20
   2414e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24152:	2073      	movs	r0, #115	; 0x73
   24154:	f7fb ff7a 	bl	2004c <bsd_os_errno_set>
   24158:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2415c:	b005      	add	sp, #20
   2415e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24162:	9901      	ldr	r1, [sp, #4]
   24164:	4628      	mov	r0, r5
   24166:	f001 f875 	bl	25254 <ip_interface_listen>
   2416a:	e7ed      	b.n	24148 <tls_interface_listen+0xc4>
   2416c:	00ee      	lsls	r6, r5, #3
   2416e:	4f09      	ldr	r7, [pc, #36]	; (24194 <tls_interface_listen+0x110>)
   24170:	1973      	adds	r3, r6, r5
   24172:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   24176:	2b02      	cmp	r3, #2
   24178:	d195      	bne.n	240a6 <tls_interface_listen+0x22>
   2417a:	e79f      	b.n	240bc <tls_interface_listen+0x38>
   2417c:	f859 1035 	ldr.w	r1, [r9, r5, lsl #3]
   24180:	6800      	ldr	r0, [r0, #0]
   24182:	f014 ff1e 	bl	38fc2 <memcpy>
   24186:	e7b7      	b.n	240f8 <tls_interface_listen+0x74>
   24188:	200c      	movs	r0, #12
   2418a:	e7e3      	b.n	24154 <tls_interface_listen+0xd0>
   2418c:	202d      	movs	r0, #45	; 0x2d
   2418e:	e7e1      	b.n	24154 <tls_interface_listen+0xd0>
   24190:	2009      	movs	r0, #9
   24192:	e7df      	b.n	24154 <tls_interface_listen+0xd0>
   24194:	20022548 	.word	0x20022548
   24198:	2002268c 	.word	0x2002268c

0002419c <tls_interface_accept>:
   2419c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   241a0:	b082      	sub	sp, #8
   241a2:	460e      	mov	r6, r1
   241a4:	4617      	mov	r7, r2
   241a6:	4698      	mov	r8, r3
   241a8:	4605      	mov	r5, r0
   241aa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   241ae:	f006 fb11 	bl	2a7d4 <interface_socket_from_handle_get>
   241b2:	9401      	str	r4, [sp, #4]
   241b4:	2800      	cmp	r0, #0
   241b6:	d03c      	beq.n	24232 <tls_interface_accept+0x96>
   241b8:	6800      	ldr	r0, [r0, #0]
   241ba:	b280      	uxth	r0, r0
   241bc:	2806      	cmp	r0, #6
   241be:	d138      	bne.n	24232 <tls_interface_accept+0x96>
   241c0:	4643      	mov	r3, r8
   241c2:	463a      	mov	r2, r7
   241c4:	4631      	mov	r1, r6
   241c6:	4628      	mov	r0, r5
   241c8:	f001 f8bc 	bl	25344 <ip_interface_accept>
   241cc:	4604      	mov	r4, r0
   241ce:	b128      	cbz	r0, 241dc <tls_interface_accept+0x40>
   241d0:	2c00      	cmp	r4, #0
   241d2:	dc2f      	bgt.n	24234 <tls_interface_accept+0x98>
   241d4:	4620      	mov	r0, r4
   241d6:	b002      	add	sp, #8
   241d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   241dc:	4628      	mov	r0, r5
   241de:	f006 faf9 	bl	2a7d4 <interface_socket_from_handle_get>
   241e2:	6803      	ldr	r3, [r0, #0]
   241e4:	4f18      	ldr	r7, [pc, #96]	; (24248 <tls_interface_accept+0xac>)
   241e6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   241ea:	6003      	str	r3, [r0, #0]
   241ec:	6803      	ldr	r3, [r0, #0]
   241ee:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   241f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   241f6:	4606      	mov	r6, r0
   241f8:	6003      	str	r3, [r0, #0]
   241fa:	eb07 0185 	add.w	r1, r7, r5, lsl #2
   241fe:	2224      	movs	r2, #36	; 0x24
   24200:	4638      	mov	r0, r7
   24202:	f014 fede 	bl	38fc2 <memcpy>
   24206:	2302      	movs	r3, #2
   24208:	703b      	strb	r3, [r7, #0]
   2420a:	6833      	ldr	r3, [r6, #0]
   2420c:	4620      	mov	r0, r4
   2420e:	0c1b      	lsrs	r3, r3, #16
   24210:	041b      	lsls	r3, r3, #16
   24212:	f043 030b 	orr.w	r3, r3, #11
   24216:	6033      	str	r3, [r6, #0]
   24218:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2421c:	ab01      	add	r3, sp, #4
   2421e:	210c      	movs	r1, #12
   24220:	f000 fabc 	bl	2479c <ip_interface_wait>
   24224:	4604      	mov	r4, r0
   24226:	2800      	cmp	r0, #0
   24228:	d0d4      	beq.n	241d4 <tls_interface_accept+0x38>
   2422a:	2000      	movs	r0, #0
   2422c:	f000 fbae 	bl	2498c <ip_interface_close>
   24230:	e7ce      	b.n	241d0 <tls_interface_accept+0x34>
   24232:	2409      	movs	r4, #9
   24234:	4620      	mov	r0, r4
   24236:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2423a:	f7fb ff07 	bl	2004c <bsd_os_errno_set>
   2423e:	4620      	mov	r0, r4
   24240:	b002      	add	sp, #8
   24242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24246:	bf00      	nop
   24248:	20022548 	.word	0x20022548

0002424c <tls_interface_setopt>:
   2424c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24250:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   24254:	9e06      	ldr	r6, [sp, #24]
   24256:	d11e      	bne.n	24296 <tls_interface_setopt+0x4a>
   24258:	461f      	mov	r7, r3
   2425a:	4605      	mov	r5, r0
   2425c:	2b00      	cmp	r3, #0
   2425e:	f000 808c 	beq.w	2437a <tls_interface_setopt+0x12e>
   24262:	4690      	mov	r8, r2
   24264:	f006 fab6 	bl	2a7d4 <interface_socket_from_handle_get>
   24268:	2800      	cmp	r0, #0
   2426a:	d07b      	beq.n	24364 <tls_interface_setopt+0x118>
   2426c:	6804      	ldr	r4, [r0, #0]
   2426e:	b2a4      	uxth	r4, r4
   24270:	2c02      	cmp	r4, #2
   24272:	d007      	beq.n	24284 <tls_interface_setopt+0x38>
   24274:	6803      	ldr	r3, [r0, #0]
   24276:	b29b      	uxth	r3, r3
   24278:	2b04      	cmp	r3, #4
   2427a:	d003      	beq.n	24284 <tls_interface_setopt+0x38>
   2427c:	6803      	ldr	r3, [r0, #0]
   2427e:	b29b      	uxth	r3, r3
   24280:	2b05      	cmp	r3, #5
   24282:	d16f      	bne.n	24364 <tls_interface_setopt+0x118>
   24284:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
   24288:	2a04      	cmp	r2, #4
   2428a:	d87c      	bhi.n	24386 <tls_interface_setopt+0x13a>
   2428c:	e8df f002 	tbb	[pc, r2]
   24290:	41324e24 	.word	0x41324e24
   24294:	07          	.byte	0x07
   24295:	00          	.byte	0x00
   24296:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2429a:	f001 b995 	b.w	255c8 <ip_interface_setopt>
   2429e:	4c3b      	ldr	r4, [pc, #236]	; (2438c <tls_interface_setopt+0x140>)
   242a0:	f854 0035 	ldr.w	r0, [r4, r5, lsl #3]
   242a4:	b138      	cbz	r0, 242b6 <tls_interface_setopt+0x6a>
   242a6:	f005 fe47 	bl	29f38 <nrf_free>
   242aa:	2200      	movs	r2, #0
   242ac:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   242b0:	f844 2035 	str.w	r2, [r4, r5, lsl #3]
   242b4:	605a      	str	r2, [r3, #4]
   242b6:	4630      	mov	r0, r6
   242b8:	b34e      	cbz	r6, 2430e <tls_interface_setopt+0xc2>
   242ba:	f005 fe33 	bl	29f24 <nrf_malloc>
   242be:	f844 0035 	str.w	r0, [r4, r5, lsl #3]
   242c2:	2800      	cmp	r0, #0
   242c4:	d057      	beq.n	24376 <tls_interface_setopt+0x12a>
   242c6:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   242ca:	4632      	mov	r2, r6
   242cc:	4639      	mov	r1, r7
   242ce:	6066      	str	r6, [r4, #4]
   242d0:	f014 fe77 	bl	38fc2 <memcpy>
   242d4:	2000      	movs	r0, #0
   242d6:	e01a      	b.n	2430e <tls_interface_setopt+0xc2>
   242d8:	2e04      	cmp	r6, #4
   242da:	d14a      	bne.n	24372 <tls_interface_setopt+0x126>
   242dc:	6838      	ldr	r0, [r7, #0]
   242de:	2800      	cmp	r0, #0
   242e0:	d039      	beq.n	24356 <tls_interface_setopt+0x10a>
   242e2:	2801      	cmp	r0, #1
   242e4:	d145      	bne.n	24372 <tls_interface_setopt+0x126>
   242e6:	4a2a      	ldr	r2, [pc, #168]	; (24390 <tls_interface_setopt+0x144>)
   242e8:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   242ec:	f802 0024 	strb.w	r0, [r2, r4, lsl #2]
   242f0:	2000      	movs	r0, #0
   242f2:	e00c      	b.n	2430e <tls_interface_setopt+0xc2>
   242f4:	2e01      	cmp	r6, #1
   242f6:	d13c      	bne.n	24372 <tls_interface_setopt+0x126>
   242f8:	783a      	ldrb	r2, [r7, #0]
   242fa:	2000      	movs	r0, #0
   242fc:	3200      	adds	r2, #0
   242fe:	bf18      	it	ne
   24300:	2201      	movne	r2, #1
   24302:	4b23      	ldr	r3, [pc, #140]	; (24390 <tls_interface_setopt+0x144>)
   24304:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   24308:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   2430c:	7062      	strb	r2, [r4, #1]
   2430e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24312:	2e04      	cmp	r6, #4
   24314:	d12d      	bne.n	24372 <tls_interface_setopt+0x126>
   24316:	683a      	ldr	r2, [r7, #0]
   24318:	2a02      	cmp	r2, #2
   2431a:	d82a      	bhi.n	24372 <tls_interface_setopt+0x126>
   2431c:	4b1c      	ldr	r3, [pc, #112]	; (24390 <tls_interface_setopt+0x144>)
   2431e:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   24322:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   24326:	70a2      	strb	r2, [r4, #2]
   24328:	2000      	movs	r0, #0
   2432a:	e7f0      	b.n	2430e <tls_interface_setopt+0xc2>
   2432c:	ea5f 0c96 	movs.w	ip, r6, lsr #2
   24330:	d01f      	beq.n	24372 <tls_interface_setopt+0x126>
   24332:	f016 0403 	ands.w	r4, r6, #3
   24336:	d11c      	bne.n	24372 <tls_interface_setopt+0x126>
   24338:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   2433c:	00ad      	lsls	r5, r5, #2
   2433e:	4b14      	ldr	r3, [pc, #80]	; (24390 <tls_interface_setopt+0x144>)
   24340:	1d28      	adds	r0, r5, #4
   24342:	4418      	add	r0, r3
   24344:	442b      	add	r3, r5
   24346:	4632      	mov	r2, r6
   24348:	4639      	mov	r1, r7
   2434a:	f883 c003 	strb.w	ip, [r3, #3]
   2434e:	f014 fe38 	bl	38fc2 <memcpy>
   24352:	4620      	mov	r0, r4
   24354:	e7db      	b.n	2430e <tls_interface_setopt+0xc2>
   24356:	2102      	movs	r1, #2
   24358:	4a0d      	ldr	r2, [pc, #52]	; (24390 <tls_interface_setopt+0x144>)
   2435a:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   2435e:	f802 1024 	strb.w	r1, [r2, r4, lsl #2]
   24362:	e7d4      	b.n	2430e <tls_interface_setopt+0xc2>
   24364:	2009      	movs	r0, #9
   24366:	f7fb fe71 	bl	2004c <bsd_os_errno_set>
   2436a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2436e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24372:	2016      	movs	r0, #22
   24374:	e7f7      	b.n	24366 <tls_interface_setopt+0x11a>
   24376:	200c      	movs	r0, #12
   24378:	e7f5      	b.n	24366 <tls_interface_setopt+0x11a>
   2437a:	200e      	movs	r0, #14
   2437c:	f7fb fe66 	bl	2004c <bsd_os_errno_set>
   24380:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24384:	e7c3      	b.n	2430e <tls_interface_setopt+0xc2>
   24386:	202a      	movs	r0, #42	; 0x2a
   24388:	e7ed      	b.n	24366 <tls_interface_setopt+0x11a>
   2438a:	bf00      	nop
   2438c:	2002268c 	.word	0x2002268c
   24390:	20022548 	.word	0x20022548

00024394 <tls_interface_getopt>:
   24394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24398:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   2439c:	9f06      	ldr	r7, [sp, #24]
   2439e:	d112      	bne.n	243c6 <tls_interface_getopt+0x32>
   243a0:	461d      	mov	r5, r3
   243a2:	b16b      	cbz	r3, 243c0 <tls_interface_getopt+0x2c>
   243a4:	b167      	cbz	r7, 243c0 <tls_interface_getopt+0x2c>
   243a6:	4606      	mov	r6, r0
   243a8:	4614      	mov	r4, r2
   243aa:	f006 fa13 	bl	2a7d4 <interface_socket_from_handle_get>
   243ae:	2800      	cmp	r0, #0
   243b0:	d04f      	beq.n	24452 <tls_interface_getopt+0xbe>
   243b2:	3c01      	subs	r4, #1
   243b4:	2c03      	cmp	r4, #3
   243b6:	d852      	bhi.n	2445e <tls_interface_getopt+0xca>
   243b8:	e8df f004 	tbb	[pc, r4]
   243bc:	09152139 	.word	0x09152139
   243c0:	200e      	movs	r0, #14
   243c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   243c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   243ca:	f001 ba0f 	b.w	257ec <ip_interface_getopt>
   243ce:	683b      	ldr	r3, [r7, #0]
   243d0:	2b04      	cmp	r3, #4
   243d2:	d13c      	bne.n	2444e <tls_interface_getopt+0xba>
   243d4:	4b23      	ldr	r3, [pc, #140]	; (24464 <tls_interface_getopt+0xd0>)
   243d6:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   243da:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   243de:	78b3      	ldrb	r3, [r6, #2]
   243e0:	2000      	movs	r0, #0
   243e2:	602b      	str	r3, [r5, #0]
   243e4:	e7ed      	b.n	243c2 <tls_interface_getopt+0x2e>
   243e6:	683b      	ldr	r3, [r7, #0]
   243e8:	2b01      	cmp	r3, #1
   243ea:	d130      	bne.n	2444e <tls_interface_getopt+0xba>
   243ec:	4b1d      	ldr	r3, [pc, #116]	; (24464 <tls_interface_getopt+0xd0>)
   243ee:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   243f2:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   243f6:	7873      	ldrb	r3, [r6, #1]
   243f8:	2000      	movs	r0, #0
   243fa:	702b      	strb	r3, [r5, #0]
   243fc:	e7e1      	b.n	243c2 <tls_interface_getopt+0x2e>
   243fe:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   24402:	4918      	ldr	r1, [pc, #96]	; (24464 <tls_interface_getopt+0xd0>)
   24404:	683b      	ldr	r3, [r7, #0]
   24406:	00b6      	lsls	r6, r6, #2
   24408:	198a      	adds	r2, r1, r6
   2440a:	f013 0403 	ands.w	r4, r3, #3
   2440e:	78d0      	ldrb	r0, [r2, #3]
   24410:	d121      	bne.n	24456 <tls_interface_getopt+0xc2>
   24412:	089b      	lsrs	r3, r3, #2
   24414:	4283      	cmp	r3, r0
   24416:	bf28      	it	cs
   24418:	4603      	movcs	r3, r0
   2441a:	009a      	lsls	r2, r3, #2
   2441c:	b1db      	cbz	r3, 24456 <tls_interface_getopt+0xc2>
   2441e:	3604      	adds	r6, #4
   24420:	4431      	add	r1, r6
   24422:	603a      	str	r2, [r7, #0]
   24424:	4628      	mov	r0, r5
   24426:	f014 fdcc 	bl	38fc2 <memcpy>
   2442a:	4620      	mov	r0, r4
   2442c:	e7c9      	b.n	243c2 <tls_interface_getopt+0x2e>
   2442e:	683b      	ldr	r3, [r7, #0]
   24430:	2b04      	cmp	r3, #4
   24432:	d10c      	bne.n	2444e <tls_interface_getopt+0xba>
   24434:	4b0b      	ldr	r3, [pc, #44]	; (24464 <tls_interface_getopt+0xd0>)
   24436:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   2443a:	f813 3026 	ldrb.w	r3, [r3, r6, lsl #2]
   2443e:	2000      	movs	r0, #0
   24440:	f1a3 0301 	sub.w	r3, r3, #1
   24444:	fab3 f383 	clz	r3, r3
   24448:	095b      	lsrs	r3, r3, #5
   2444a:	602b      	str	r3, [r5, #0]
   2444c:	e7b9      	b.n	243c2 <tls_interface_getopt+0x2e>
   2444e:	2016      	movs	r0, #22
   24450:	e7b7      	b.n	243c2 <tls_interface_getopt+0x2e>
   24452:	2009      	movs	r0, #9
   24454:	e7b5      	b.n	243c2 <tls_interface_getopt+0x2e>
   24456:	2800      	cmp	r0, #0
   24458:	d1f9      	bne.n	2444e <tls_interface_getopt+0xba>
   2445a:	6038      	str	r0, [r7, #0]
   2445c:	e7b1      	b.n	243c2 <tls_interface_getopt+0x2e>
   2445e:	202a      	movs	r0, #42	; 0x2a
   24460:	e7af      	b.n	243c2 <tls_interface_getopt+0x2e>
   24462:	bf00      	nop
   24464:	20022548 	.word	0x20022548

00024468 <tls_rpc_ip_event_handler>:
   24468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2446a:	f248 0581 	movw	r5, #32897	; 0x8081
   2446e:	42ab      	cmp	r3, r5
   24470:	460c      	mov	r4, r1
   24472:	d062      	beq.n	2453a <tls_rpc_ip_event_handler+0xd2>
   24474:	f249 0182 	movw	r1, #36994	; 0x9082
   24478:	428b      	cmp	r3, r1
   2447a:	4606      	mov	r6, r0
   2447c:	d02e      	beq.n	244dc <tls_rpc_ip_event_handler+0x74>
   2447e:	f248 0102 	movw	r1, #32770	; 0x8002
   24482:	428b      	cmp	r3, r1
   24484:	d001      	beq.n	2448a <tls_rpc_ip_event_handler+0x22>
   24486:	2001      	movs	r0, #1
   24488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2448a:	2c00      	cmp	r4, #0
   2448c:	d0fb      	beq.n	24486 <tls_rpc_ip_event_handler+0x1e>
   2448e:	6963      	ldr	r3, [r4, #20]
   24490:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   24494:	d002      	beq.n	2449c <tls_rpc_ip_event_handler+0x34>
   24496:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   2449a:	d1f4      	bne.n	24486 <tls_rpc_ip_event_handler+0x1e>
   2449c:	6823      	ldr	r3, [r4, #0]
   2449e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   244a2:	6023      	str	r3, [r4, #0]
   244a4:	6955      	ldr	r5, [r2, #20]
   244a6:	2d00      	cmp	r5, #0
   244a8:	d156      	bne.n	24558 <tls_rpc_ip_event_handler+0xf0>
   244aa:	6823      	ldr	r3, [r4, #0]
   244ac:	0c1b      	lsrs	r3, r3, #16
   244ae:	041b      	lsls	r3, r3, #16
   244b0:	f043 0305 	orr.w	r3, r3, #5
   244b4:	6023      	str	r3, [r4, #0]
   244b6:	6823      	ldr	r3, [r4, #0]
   244b8:	00da      	lsls	r2, r3, #3
   244ba:	d50d      	bpl.n	244d8 <tls_rpc_ip_event_handler+0x70>
   244bc:	4b2b      	ldr	r3, [pc, #172]	; (2456c <tls_rpc_ip_event_handler+0x104>)
   244be:	eb06 02c6 	add.w	r2, r6, r6, lsl #3
   244c2:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   244c6:	2b02      	cmp	r3, #2
   244c8:	d106      	bne.n	244d8 <tls_rpc_ip_event_handler+0x70>
   244ca:	4630      	mov	r0, r6
   244cc:	4621      	mov	r1, r4
   244ce:	f7ff fb81 	bl	23bd4 <secure_client_socket>
   244d2:	b108      	cbz	r0, 244d8 <tls_rpc_ip_event_handler+0x70>
   244d4:	2873      	cmp	r0, #115	; 0x73
   244d6:	d142      	bne.n	2455e <tls_rpc_ip_event_handler+0xf6>
   244d8:	2000      	movs	r0, #0
   244da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   244dc:	2c00      	cmp	r4, #0
   244de:	d0fb      	beq.n	244d8 <tls_rpc_ip_event_handler+0x70>
   244e0:	6823      	ldr	r3, [r4, #0]
   244e2:	b29b      	uxth	r3, r3
   244e4:	2b0b      	cmp	r3, #11
   244e6:	d1f7      	bne.n	244d8 <tls_rpc_ip_event_handler+0x70>
   244e8:	6915      	ldr	r5, [r2, #16]
   244ea:	2d00      	cmp	r5, #0
   244ec:	d134      	bne.n	24558 <tls_rpc_ip_event_handler+0xf0>
   244ee:	6823      	ldr	r3, [r4, #0]
   244f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   244f4:	6023      	str	r3, [r4, #0]
   244f6:	6823      	ldr	r3, [r4, #0]
   244f8:	00db      	lsls	r3, r3, #3
   244fa:	d5ed      	bpl.n	244d8 <tls_rpc_ip_event_handler+0x70>
   244fc:	4f1c      	ldr	r7, [pc, #112]	; (24570 <tls_rpc_ip_event_handler+0x108>)
   244fe:	f857 0030 	ldr.w	r0, [r7, r0, lsl #3]
   24502:	b130      	cbz	r0, 24512 <tls_rpc_ip_event_handler+0xaa>
   24504:	f005 fd18 	bl	29f38 <nrf_free>
   24508:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   2450c:	f847 5036 	str.w	r5, [r7, r6, lsl #3]
   24510:	605d      	str	r5, [r3, #4]
   24512:	6823      	ldr	r3, [r4, #0]
   24514:	2000      	movs	r0, #0
   24516:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   2451a:	6023      	str	r3, [r4, #0]
   2451c:	6823      	ldr	r3, [r4, #0]
   2451e:	0c1b      	lsrs	r3, r3, #16
   24520:	041b      	lsls	r3, r3, #16
   24522:	f043 030c 	orr.w	r3, r3, #12
   24526:	6023      	str	r3, [r4, #0]
   24528:	6823      	ldr	r3, [r4, #0]
   2452a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2452e:	6023      	str	r3, [r4, #0]
   24530:	6823      	ldr	r3, [r4, #0]
   24532:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   24536:	6023      	str	r3, [r4, #0]
   24538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2453a:	2900      	cmp	r1, #0
   2453c:	d0cc      	beq.n	244d8 <tls_rpc_ip_event_handler+0x70>
   2453e:	680b      	ldr	r3, [r1, #0]
   24540:	b29b      	uxth	r3, r3
   24542:	2b0a      	cmp	r3, #10
   24544:	d1c8      	bne.n	244d8 <tls_rpc_ip_event_handler+0x70>
   24546:	6950      	ldr	r0, [r2, #20]
   24548:	b938      	cbnz	r0, 2455a <tls_rpc_ip_event_handler+0xf2>
   2454a:	680b      	ldr	r3, [r1, #0]
   2454c:	0c1b      	lsrs	r3, r3, #16
   2454e:	041b      	lsls	r3, r3, #16
   24550:	f043 030b 	orr.w	r3, r3, #11
   24554:	600b      	str	r3, [r1, #0]
   24556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24558:	4628      	mov	r0, r5
   2455a:	f000 f8e1 	bl	24720 <rpc_error_to_nrf_bsd_error>
   2455e:	6060      	str	r0, [r4, #4]
   24560:	6823      	ldr	r3, [r4, #0]
   24562:	2000      	movs	r0, #0
   24564:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   24568:	6023      	str	r3, [r4, #0]
   2456a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2456c:	20022548 	.word	0x20022548
   24570:	2002268c 	.word	0x2002268c

00024574 <ip_client_event_handler>:
   24574:	f850 1b08 	ldr.w	r1, [r0], #8
   24578:	0c09      	lsrs	r1, r1, #16
   2457a:	f001 bc29 	b.w	25dd0 <rpc_ip_event_handler>
   2457e:	bf00      	nop

00024580 <rpc_ip_client_init>:
   24580:	4801      	ldr	r0, [pc, #4]	; (24588 <rpc_ip_client_init+0x8>)
   24582:	f001 bf27 	b.w	263d4 <rpc_client_register>
   24586:	bf00      	nop
   24588:	0003a928 	.word	0x0003a928

0002458c <rpc_ip_client_request_alloc>:
   2458c:	2300      	movs	r3, #0
   2458e:	b510      	push	{r4, lr}
   24590:	b082      	sub	sp, #8
   24592:	9301      	str	r3, [sp, #4]
   24594:	b158      	cbz	r0, 245ae <rpc_ip_client_request_alloc+0x22>
   24596:	4604      	mov	r4, r0
   24598:	aa01      	add	r2, sp, #4
   2459a:	2004      	movs	r0, #4
   2459c:	f001 ff94 	bl	264c8 <rpc_message_alloc>
   245a0:	b918      	cbnz	r0, 245aa <rpc_ip_client_request_alloc+0x1e>
   245a2:	9b01      	ldr	r3, [sp, #4]
   245a4:	b10b      	cbz	r3, 245aa <rpc_ip_client_request_alloc+0x1e>
   245a6:	3308      	adds	r3, #8
   245a8:	6023      	str	r3, [r4, #0]
   245aa:	b002      	add	sp, #8
   245ac:	bd10      	pop	{r4, pc}
   245ae:	2007      	movs	r0, #7
   245b0:	b002      	add	sp, #8
   245b2:	bd10      	pop	{r4, pc}

000245b4 <rpc_ip_client_request_send>:
   245b4:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   245b8:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   245bc:	d10b      	bne.n	245d6 <rpc_ip_client_request_send+0x22>
   245be:	b160      	cbz	r0, 245da <rpc_ip_client_request_send+0x26>
   245c0:	4603      	mov	r3, r0
   245c2:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   245c6:	2004      	movs	r0, #4
   245c8:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   245cc:	f843 1d08 	str.w	r1, [r3, #-8]!
   245d0:	4619      	mov	r1, r3
   245d2:	f001 bf69 	b.w	264a8 <rpc_message_send>
   245d6:	200f      	movs	r0, #15
   245d8:	4770      	bx	lr
   245da:	2007      	movs	r0, #7
   245dc:	4770      	bx	lr
   245de:	bf00      	nop

000245e0 <rpc_ip_client_message_free>:
   245e0:	b120      	cbz	r0, 245ec <rpc_ip_client_message_free+0xc>
   245e2:	f1a0 0108 	sub.w	r1, r0, #8
   245e6:	2004      	movs	r0, #4
   245e8:	f001 bf9a 	b.w	26520 <rpc_message_free>
   245ec:	2007      	movs	r0, #7
   245ee:	4770      	bx	lr

000245f0 <rpc_ip_client_data_free>:
   245f0:	b118      	cbz	r0, 245fa <rpc_ip_client_data_free+0xa>
   245f2:	4601      	mov	r1, r0
   245f4:	2004      	movs	r0, #4
   245f6:	f001 bf9f 	b.w	26538 <rpc_message_data_free>
   245fa:	2007      	movs	r0, #7
   245fc:	4770      	bx	lr
   245fe:	bf00      	nop

00024600 <ip_recvd_packet_free_cb>:
   24600:	b510      	push	{r4, lr}
   24602:	4604      	mov	r4, r0
   24604:	6800      	ldr	r0, [r0, #0]
   24606:	f7ff fff3 	bl	245f0 <rpc_ip_client_data_free>
   2460a:	68a0      	ldr	r0, [r4, #8]
   2460c:	b118      	cbz	r0, 24616 <ip_recvd_packet_free_cb+0x16>
   2460e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   24612:	f005 bc91 	b.w	29f38 <nrf_free>
   24616:	bd10      	pop	{r4, pc}

00024618 <setopt_check_and_send_int>:
   24618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2461c:	b082      	sub	sp, #8
   2461e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   24620:	2d04      	cmp	r5, #4
   24622:	d15e      	bne.n	246e2 <setopt_check_and_send_int+0xca>
   24624:	461e      	mov	r6, r3
   24626:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   24628:	2b00      	cmp	r3, #0
   2462a:	d05a      	beq.n	246e2 <setopt_check_and_send_int+0xca>
   2462c:	4614      	mov	r4, r2
   2462e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   24632:	6823      	ldr	r3, [r4, #0]
   24634:	9200      	str	r2, [sp, #0]
   24636:	025f      	lsls	r7, r3, #9
   24638:	d444      	bmi.n	246c4 <setopt_check_and_send_int+0xac>
   2463a:	6823      	ldr	r3, [r4, #0]
   2463c:	021a      	lsls	r2, r3, #8
   2463e:	d441      	bmi.n	246c4 <setopt_check_and_send_int+0xac>
   24640:	6823      	ldr	r3, [r4, #0]
   24642:	01db      	lsls	r3, r3, #7
   24644:	d43e      	bmi.n	246c4 <setopt_check_and_send_int+0xac>
   24646:	6823      	ldr	r3, [r4, #0]
   24648:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
   2464c:	d13a      	bne.n	246c4 <setopt_check_and_send_int+0xac>
   2464e:	f8d4 9000 	ldr.w	r9, [r4]
   24652:	6822      	ldr	r2, [r4, #0]
   24654:	4680      	mov	r8, r0
   24656:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   2465a:	a802      	add	r0, sp, #8
   2465c:	460f      	mov	r7, r1
   2465e:	f840 3d04 	str.w	r3, [r0, #-4]!
   24662:	4629      	mov	r1, r5
   24664:	6022      	str	r2, [r4, #0]
   24666:	f8d4 a018 	ldr.w	sl, [r4, #24]
   2466a:	f7ff ff8f 	bl	2458c <rpc_ip_client_request_alloc>
   2466e:	bb88      	cbnz	r0, 246d4 <setopt_check_and_send_int+0xbc>
   24670:	f247 0303 	movw	r3, #28675	; 0x7003
   24674:	2208      	movs	r2, #8
   24676:	9d01      	ldr	r5, [sp, #4]
   24678:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   2467c:	60eb      	str	r3, [r5, #12]
   2467e:	f8c5 a010 	str.w	sl, [r5, #16]
   24682:	7268      	strb	r0, [r5, #9]
   24684:	72a8      	strb	r0, [r5, #10]
   24686:	72e8      	strb	r0, [r5, #11]
   24688:	722a      	strb	r2, [r5, #8]
   2468a:	68ab      	ldr	r3, [r5, #8]
   2468c:	61af      	str	r7, [r5, #24]
   2468e:	3308      	adds	r3, #8
   24690:	60ab      	str	r3, [r5, #8]
   24692:	2204      	movs	r2, #4
   24694:	990a      	ldr	r1, [sp, #40]	; 0x28
   24696:	f8c5 8014 	str.w	r8, [r5, #20]
   2469a:	6828      	ldr	r0, [r5, #0]
   2469c:	f014 fc91 	bl	38fc2 <memcpy>
   246a0:	f247 0103 	movw	r1, #28675	; 0x7003
   246a4:	4628      	mov	r0, r5
   246a6:	f7ff ff85 	bl	245b4 <rpc_ip_client_request_send>
   246aa:	4607      	mov	r7, r0
   246ac:	b9d8      	cbnz	r0, 246e6 <setopt_check_and_send_int+0xce>
   246ae:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   246b2:	466b      	mov	r3, sp
   246b4:	4611      	mov	r1, r2
   246b6:	4630      	mov	r0, r6
   246b8:	f006 f818 	bl	2a6ec <interface_socket_wait>
   246bc:	b300      	cbz	r0, 24700 <setopt_check_and_send_int+0xe8>
   246be:	f8c4 9000 	str.w	r9, [r4]
   246c2:	e000      	b.n	246c6 <setopt_check_and_send_int+0xae>
   246c4:	2023      	movs	r0, #35	; 0x23
   246c6:	f7fb fcc1 	bl	2004c <bsd_os_errno_set>
   246ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   246ce:	b002      	add	sp, #8
   246d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   246d4:	9d01      	ldr	r5, [sp, #4]
   246d6:	2d00      	cmp	r5, #0
   246d8:	d1d7      	bne.n	2468a <setopt_check_and_send_int+0x72>
   246da:	f8c4 9000 	str.w	r9, [r4]
   246de:	200c      	movs	r0, #12
   246e0:	e7f1      	b.n	246c6 <setopt_check_and_send_int+0xae>
   246e2:	2016      	movs	r0, #22
   246e4:	e7ef      	b.n	246c6 <setopt_check_and_send_int+0xae>
   246e6:	6828      	ldr	r0, [r5, #0]
   246e8:	b108      	cbz	r0, 246ee <setopt_check_and_send_int+0xd6>
   246ea:	f7ff ff81 	bl	245f0 <rpc_ip_client_data_free>
   246ee:	4628      	mov	r0, r5
   246f0:	f7ff ff76 	bl	245e0 <rpc_ip_client_message_free>
   246f4:	f8c4 9000 	str.w	r9, [r4]
   246f8:	2023      	movs	r0, #35	; 0x23
   246fa:	f8c4 9000 	str.w	r9, [r4]
   246fe:	e7e2      	b.n	246c6 <setopt_check_and_send_int+0xae>
   24700:	4630      	mov	r0, r6
   24702:	f006 f867 	bl	2a7d4 <interface_socket_from_handle_get>
   24706:	4603      	mov	r3, r0
   24708:	b130      	cbz	r0, 24718 <setopt_check_and_send_int+0x100>
   2470a:	6840      	ldr	r0, [r0, #4]
   2470c:	b108      	cbz	r0, 24712 <setopt_check_and_send_int+0xfa>
   2470e:	605f      	str	r7, [r3, #4]
   24710:	e7d5      	b.n	246be <setopt_check_and_send_int+0xa6>
   24712:	f8c4 9000 	str.w	r9, [r4]
   24716:	e7da      	b.n	246ce <setopt_check_and_send_int+0xb6>
   24718:	f8c4 9000 	str.w	r9, [r4]
   2471c:	e7d7      	b.n	246ce <setopt_check_and_send_int+0xb6>
   2471e:	bf00      	nop

00024720 <rpc_error_to_nrf_bsd_error>:
   24720:	2810      	cmp	r0, #16
   24722:	bf9a      	itte	ls
   24724:	4b02      	ldrls	r3, [pc, #8]	; (24730 <rpc_error_to_nrf_bsd_error+0x10>)
   24726:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   2472a:	202d      	movhi	r0, #45	; 0x2d
   2472c:	4770      	bx	lr
   2472e:	bf00      	nop
   24730:	0003a938 	.word	0x0003a938

00024734 <ip_interface_request_create>:
   24734:	b570      	push	{r4, r5, r6, lr}
   24736:	2500      	movs	r5, #0
   24738:	b082      	sub	sp, #8
   2473a:	ac02      	add	r4, sp, #8
   2473c:	f844 5d04 	str.w	r5, [r4, #-4]!
   24740:	4606      	mov	r6, r0
   24742:	460d      	mov	r5, r1
   24744:	4620      	mov	r0, r4
   24746:	4619      	mov	r1, r3
   24748:	4614      	mov	r4, r2
   2474a:	f7ff ff1f 	bl	2458c <rpc_ip_client_request_alloc>
   2474e:	b960      	cbnz	r0, 2476a <ip_interface_request_create+0x36>
   24750:	9b01      	ldr	r3, [sp, #4]
   24752:	2208      	movs	r2, #8
   24754:	7258      	strb	r0, [r3, #9]
   24756:	7298      	strb	r0, [r3, #10]
   24758:	72d8      	strb	r0, [r3, #11]
   2475a:	4618      	mov	r0, r3
   2475c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   24760:	60dc      	str	r4, [r3, #12]
   24762:	611d      	str	r5, [r3, #16]
   24764:	721a      	strb	r2, [r3, #8]
   24766:	b002      	add	sp, #8
   24768:	bd70      	pop	{r4, r5, r6, pc}
   2476a:	9b01      	ldr	r3, [sp, #4]
   2476c:	4618      	mov	r0, r3
   2476e:	b002      	add	sp, #8
   24770:	bd70      	pop	{r4, r5, r6, pc}
   24772:	bf00      	nop

00024774 <ip_interface_request_send>:
   24774:	b570      	push	{r4, r5, r6, lr}
   24776:	460c      	mov	r4, r1
   24778:	4605      	mov	r5, r0
   2477a:	4611      	mov	r1, r2
   2477c:	4620      	mov	r0, r4
   2477e:	461e      	mov	r6, r3
   24780:	f7ff ff18 	bl	245b4 <rpc_ip_client_request_send>
   24784:	b900      	cbnz	r0, 24788 <ip_interface_request_send+0x14>
   24786:	bd70      	pop	{r4, r5, r6, pc}
   24788:	6820      	ldr	r0, [r4, #0]
   2478a:	b108      	cbz	r0, 24790 <ip_interface_request_send+0x1c>
   2478c:	f7ff ff30 	bl	245f0 <rpc_ip_client_data_free>
   24790:	4620      	mov	r0, r4
   24792:	f7ff ff25 	bl	245e0 <rpc_ip_client_message_free>
   24796:	602e      	str	r6, [r5, #0]
   24798:	2023      	movs	r0, #35	; 0x23
   2479a:	bd70      	pop	{r4, r5, r6, pc}

0002479c <ip_interface_wait>:
   2479c:	b538      	push	{r3, r4, r5, lr}
   2479e:	4605      	mov	r5, r0
   247a0:	f005 ffa4 	bl	2a6ec <interface_socket_wait>
   247a4:	4604      	mov	r4, r0
   247a6:	b108      	cbz	r0, 247ac <ip_interface_wait+0x10>
   247a8:	4620      	mov	r0, r4
   247aa:	bd38      	pop	{r3, r4, r5, pc}
   247ac:	4628      	mov	r0, r5
   247ae:	f006 f811 	bl	2a7d4 <interface_socket_from_handle_get>
   247b2:	2800      	cmp	r0, #0
   247b4:	d0f8      	beq.n	247a8 <ip_interface_wait+0xc>
   247b6:	6844      	ldr	r4, [r0, #4]
   247b8:	2c00      	cmp	r4, #0
   247ba:	d0f5      	beq.n	247a8 <ip_interface_wait+0xc>
   247bc:	2300      	movs	r3, #0
   247be:	6043      	str	r3, [r0, #4]
   247c0:	4620      	mov	r0, r4
   247c2:	bd38      	pop	{r3, r4, r5, pc}

000247c4 <ip_interface_init>:
   247c4:	b538      	push	{r3, r4, r5, lr}
   247c6:	2300      	movs	r3, #0
   247c8:	4d09      	ldr	r5, [pc, #36]	; (247f0 <ip_interface_init+0x2c>)
   247ca:	4c0a      	ldr	r4, [pc, #40]	; (247f4 <ip_interface_init+0x30>)
   247cc:	4619      	mov	r1, r3
   247ce:	2224      	movs	r2, #36	; 0x24
   247d0:	4809      	ldr	r0, [pc, #36]	; (247f8 <ip_interface_init+0x34>)
   247d2:	602b      	str	r3, [r5, #0]
   247d4:	6023      	str	r3, [r4, #0]
   247d6:	f014 fc2e 	bl	39036 <memset>
   247da:	f7ff fed1 	bl	24580 <rpc_ip_client_init>
   247de:	b918      	cbnz	r0, 247e8 <ip_interface_init+0x24>
   247e0:	2201      	movs	r2, #1
   247e2:	4b06      	ldr	r3, [pc, #24]	; (247fc <ip_interface_init+0x38>)
   247e4:	701a      	strb	r2, [r3, #0]
   247e6:	bd38      	pop	{r3, r4, r5, pc}
   247e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   247ec:	bd38      	pop	{r3, r4, r5, pc}
   247ee:	bf00      	nop
   247f0:	200226dc 	.word	0x200226dc
   247f4:	200226d8 	.word	0x200226d8
   247f8:	200226e0 	.word	0x200226e0
   247fc:	20029086 	.word	0x20029086

00024800 <ip_interface_open>:
   24800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24804:	2500      	movs	r5, #0
   24806:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2480a:	4c5e      	ldr	r4, [pc, #376]	; (24984 <ip_interface_open+0x184>)
   2480c:	4606      	mov	r6, r0
   2480e:	7820      	ldrb	r0, [r4, #0]
   24810:	b084      	sub	sp, #16
   24812:	e9cd 5701 	strd	r5, r7, [sp, #4]
   24816:	2800      	cmp	r0, #0
   24818:	f000 80b0 	beq.w	2497c <ip_interface_open+0x17c>
   2481c:	4690      	mov	r8, r2
   2481e:	f026 0208 	bic.w	r2, r6, #8
   24822:	2a02      	cmp	r2, #2
   24824:	460c      	mov	r4, r1
   24826:	d002      	beq.n	2482e <ip_interface_open+0x2e>
   24828:	2e05      	cmp	r6, #5
   2482a:	f040 808d 	bne.w	24948 <ip_interface_open+0x148>
   2482e:	1e63      	subs	r3, r4, #1
   24830:	2b02      	cmp	r3, #2
   24832:	f200 809d 	bhi.w	24970 <ip_interface_open+0x170>
   24836:	f1b8 0f00 	cmp.w	r8, #0
   2483a:	d159      	bne.n	248f0 <ip_interface_open+0xf0>
   2483c:	2c01      	cmp	r4, #1
   2483e:	d06f      	beq.n	24920 <ip_interface_open+0x120>
   24840:	2c03      	cmp	r4, #3
   24842:	bf18      	it	ne
   24844:	f04f 0802 	movne.w	r8, #2
   24848:	4a4f      	ldr	r2, [pc, #316]	; (24988 <ip_interface_open+0x188>)
   2484a:	4621      	mov	r1, r4
   2484c:	a801      	add	r0, sp, #4
   2484e:	f005 fe9b 	bl	2a588 <interface_socket_allocate>
   24852:	9b01      	ldr	r3, [sp, #4]
   24854:	4607      	mov	r7, r0
   24856:	2b00      	cmp	r3, #0
   24858:	d060      	beq.n	2491c <ip_interface_open+0x11c>
   2485a:	2100      	movs	r1, #0
   2485c:	a804      	add	r0, sp, #16
   2485e:	f840 1d04 	str.w	r1, [r0, #-4]!
   24862:	e9c3 6403 	strd	r6, r4, [r3, #12]
   24866:	f8c3 8014 	str.w	r8, [r3, #20]
   2486a:	f7ff fe8f 	bl	2458c <rpc_ip_client_request_alloc>
   2486e:	2800      	cmp	r0, #0
   24870:	d151      	bne.n	24916 <ip_interface_open+0x116>
   24872:	f247 0201 	movw	r2, #28673	; 0x7001
   24876:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2487a:	2108      	movs	r1, #8
   2487c:	9d03      	ldr	r5, [sp, #12]
   2487e:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   24882:	60ea      	str	r2, [r5, #12]
   24884:	7268      	strb	r0, [r5, #9]
   24886:	72a8      	strb	r0, [r5, #10]
   24888:	72e8      	strb	r0, [r5, #11]
   2488a:	7229      	strb	r1, [r5, #8]
   2488c:	742b      	strb	r3, [r5, #16]
   2488e:	746b      	strb	r3, [r5, #17]
   24890:	74ab      	strb	r3, [r5, #18]
   24892:	74eb      	strb	r3, [r5, #19]
   24894:	68ab      	ldr	r3, [r5, #8]
   24896:	2e05      	cmp	r6, #5
   24898:	f103 030c 	add.w	r3, r3, #12
   2489c:	60ab      	str	r3, [r5, #8]
   2489e:	d003      	beq.n	248a8 <ip_interface_open+0xa8>
   248a0:	2e0a      	cmp	r6, #10
   248a2:	bf14      	ite	ne
   248a4:	2601      	movne	r6, #1
   248a6:	2602      	moveq	r6, #2
   248a8:	616e      	str	r6, [r5, #20]
   248aa:	f8c5 801c 	str.w	r8, [r5, #28]
   248ae:	61ac      	str	r4, [r5, #24]
   248b0:	f247 0101 	movw	r1, #28673	; 0x7001
   248b4:	4628      	mov	r0, r5
   248b6:	f8dd 8004 	ldr.w	r8, [sp, #4]
   248ba:	f7ff fe7b 	bl	245b4 <rpc_ip_client_request_send>
   248be:	4606      	mov	r6, r0
   248c0:	b380      	cbz	r0, 24924 <ip_interface_open+0x124>
   248c2:	6828      	ldr	r0, [r5, #0]
   248c4:	b108      	cbz	r0, 248ca <ip_interface_open+0xca>
   248c6:	f7ff fe93 	bl	245f0 <rpc_ip_client_data_free>
   248ca:	4628      	mov	r0, r5
   248cc:	f7ff fe88 	bl	245e0 <rpc_ip_client_message_free>
   248d0:	2301      	movs	r3, #1
   248d2:	2523      	movs	r5, #35	; 0x23
   248d4:	f8c8 3000 	str.w	r3, [r8]
   248d8:	4638      	mov	r0, r7
   248da:	f005 feb9 	bl	2a650 <interface_socket_free>
   248de:	4628      	mov	r0, r5
   248e0:	f7fb fbb4 	bl	2004c <bsd_os_errno_set>
   248e4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   248e8:	4638      	mov	r0, r7
   248ea:	b004      	add	sp, #16
   248ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   248f0:	2c01      	cmp	r4, #1
   248f2:	d00a      	beq.n	2490a <ip_interface_open+0x10a>
   248f4:	2c02      	cmp	r4, #2
   248f6:	d10b      	bne.n	24910 <ip_interface_open+0x110>
   248f8:	f1b8 0f02 	cmp.w	r8, #2
   248fc:	d0a4      	beq.n	24848 <ip_interface_open+0x48>
   248fe:	2029      	movs	r0, #41	; 0x29
   24900:	f7fb fba4 	bl	2004c <bsd_os_errno_set>
   24904:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   24908:	e7ee      	b.n	248e8 <ip_interface_open+0xe8>
   2490a:	f1b8 0f01 	cmp.w	r8, #1
   2490e:	d1f6      	bne.n	248fe <ip_interface_open+0xfe>
   24910:	f04f 0802 	mov.w	r8, #2
   24914:	e798      	b.n	24848 <ip_interface_open+0x48>
   24916:	9d03      	ldr	r5, [sp, #12]
   24918:	2d00      	cmp	r5, #0
   2491a:	d1bb      	bne.n	24894 <ip_interface_open+0x94>
   2491c:	2569      	movs	r5, #105	; 0x69
   2491e:	e7db      	b.n	248d8 <ip_interface_open+0xd8>
   24920:	46a0      	mov	r8, r4
   24922:	e791      	b.n	24848 <ip_interface_open+0x48>
   24924:	ab02      	add	r3, sp, #8
   24926:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2492a:	2102      	movs	r1, #2
   2492c:	4638      	mov	r0, r7
   2492e:	f005 fedd 	bl	2a6ec <interface_socket_wait>
   24932:	4605      	mov	r5, r0
   24934:	2800      	cmp	r0, #0
   24936:	d1cf      	bne.n	248d8 <ip_interface_open+0xd8>
   24938:	4638      	mov	r0, r7
   2493a:	f005 ff4b 	bl	2a7d4 <interface_socket_from_handle_get>
   2493e:	b138      	cbz	r0, 24950 <ip_interface_open+0x150>
   24940:	6845      	ldr	r5, [r0, #4]
   24942:	b12d      	cbz	r5, 24950 <ip_interface_open+0x150>
   24944:	6046      	str	r6, [r0, #4]
   24946:	e7c7      	b.n	248d8 <ip_interface_open+0xd8>
   24948:	202f      	movs	r0, #47	; 0x2f
   2494a:	f7fb fb7f 	bl	2004c <bsd_os_errno_set>
   2494e:	e7cb      	b.n	248e8 <ip_interface_open+0xe8>
   24950:	3c02      	subs	r4, #2
   24952:	2c01      	cmp	r4, #1
   24954:	d8c8      	bhi.n	248e8 <ip_interface_open+0xe8>
   24956:	4638      	mov	r0, r7
   24958:	9b01      	ldr	r3, [sp, #4]
   2495a:	681a      	ldr	r2, [r3, #0]
   2495c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   24960:	601a      	str	r2, [r3, #0]
   24962:	681a      	ldr	r2, [r3, #0]
   24964:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   24968:	601a      	str	r2, [r3, #0]
   2496a:	b004      	add	sp, #16
   2496c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24970:	2016      	movs	r0, #22
   24972:	f7fb fb6b 	bl	2004c <bsd_os_errno_set>
   24976:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2497a:	e7b5      	b.n	248e8 <ip_interface_open+0xe8>
   2497c:	2070      	movs	r0, #112	; 0x70
   2497e:	f7fb fb65 	bl	2004c <bsd_os_errno_set>
   24982:	e7b1      	b.n	248e8 <ip_interface_open+0xe8>
   24984:	20029086 	.word	0x20029086
   24988:	00024601 	.word	0x00024601

0002498c <ip_interface_close>:
   2498c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   24990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24994:	b082      	sub	sp, #8
   24996:	4606      	mov	r6, r0
   24998:	9300      	str	r3, [sp, #0]
   2499a:	f005 ff1b 	bl	2a7d4 <interface_socket_from_handle_get>
   2499e:	2800      	cmp	r0, #0
   249a0:	d062      	beq.n	24a68 <ip_interface_close+0xdc>
   249a2:	4604      	mov	r4, r0
   249a4:	2100      	movs	r1, #0
   249a6:	a802      	add	r0, sp, #8
   249a8:	6827      	ldr	r7, [r4, #0]
   249aa:	f840 1d04 	str.w	r1, [r0, #-4]!
   249ae:	f8d4 8018 	ldr.w	r8, [r4, #24]
   249b2:	f7ff fdeb 	bl	2458c <rpc_ip_client_request_alloc>
   249b6:	2800      	cmp	r0, #0
   249b8:	d139      	bne.n	24a2e <ip_interface_close+0xa2>
   249ba:	f247 0309 	movw	r3, #28681	; 0x7009
   249be:	2208      	movs	r2, #8
   249c0:	9d01      	ldr	r5, [sp, #4]
   249c2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   249c6:	60eb      	str	r3, [r5, #12]
   249c8:	f8c5 8010 	str.w	r8, [r5, #16]
   249cc:	7268      	strb	r0, [r5, #9]
   249ce:	72a8      	strb	r0, [r5, #10]
   249d0:	72e8      	strb	r0, [r5, #11]
   249d2:	722a      	strb	r2, [r5, #8]
   249d4:	6823      	ldr	r3, [r4, #0]
   249d6:	f247 0109 	movw	r1, #28681	; 0x7009
   249da:	0c1b      	lsrs	r3, r3, #16
   249dc:	041b      	lsls	r3, r3, #16
   249de:	f043 030d 	orr.w	r3, r3, #13
   249e2:	6023      	str	r3, [r4, #0]
   249e4:	6823      	ldr	r3, [r4, #0]
   249e6:	4628      	mov	r0, r5
   249e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   249ec:	6023      	str	r3, [r4, #0]
   249ee:	6823      	ldr	r3, [r4, #0]
   249f0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   249f4:	6023      	str	r3, [r4, #0]
   249f6:	f7ff fddd 	bl	245b4 <rpc_ip_client_request_send>
   249fa:	bb38      	cbnz	r0, 24a4c <ip_interface_close+0xc0>
   249fc:	466b      	mov	r3, sp
   249fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
   24a02:	210e      	movs	r1, #14
   24a04:	4630      	mov	r0, r6
   24a06:	f005 fe71 	bl	2a6ec <interface_socket_wait>
   24a0a:	4604      	mov	r4, r0
   24a0c:	b1a0      	cbz	r0, 24a38 <ip_interface_close+0xac>
   24a0e:	4c17      	ldr	r4, [pc, #92]	; (24a6c <ip_interface_close+0xe0>)
   24a10:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
   24a14:	b120      	cbz	r0, 24a20 <ip_interface_close+0x94>
   24a16:	f7ff fde3 	bl	245e0 <rpc_ip_client_message_free>
   24a1a:	2300      	movs	r3, #0
   24a1c:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
   24a20:	4630      	mov	r0, r6
   24a22:	f005 fe15 	bl	2a650 <interface_socket_free>
   24a26:	2000      	movs	r0, #0
   24a28:	b002      	add	sp, #8
   24a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24a2e:	9d01      	ldr	r5, [sp, #4]
   24a30:	200c      	movs	r0, #12
   24a32:	2d00      	cmp	r5, #0
   24a34:	d1ce      	bne.n	249d4 <ip_interface_close+0x48>
   24a36:	e012      	b.n	24a5e <ip_interface_close+0xd2>
   24a38:	4630      	mov	r0, r6
   24a3a:	f005 fecb 	bl	2a7d4 <interface_socket_from_handle_get>
   24a3e:	2800      	cmp	r0, #0
   24a40:	d0e5      	beq.n	24a0e <ip_interface_close+0x82>
   24a42:	6843      	ldr	r3, [r0, #4]
   24a44:	2b00      	cmp	r3, #0
   24a46:	d0e2      	beq.n	24a0e <ip_interface_close+0x82>
   24a48:	6044      	str	r4, [r0, #4]
   24a4a:	e7e0      	b.n	24a0e <ip_interface_close+0x82>
   24a4c:	6828      	ldr	r0, [r5, #0]
   24a4e:	b108      	cbz	r0, 24a54 <ip_interface_close+0xc8>
   24a50:	f7ff fdce 	bl	245f0 <rpc_ip_client_data_free>
   24a54:	4628      	mov	r0, r5
   24a56:	f7ff fdc3 	bl	245e0 <rpc_ip_client_message_free>
   24a5a:	2023      	movs	r0, #35	; 0x23
   24a5c:	6027      	str	r7, [r4, #0]
   24a5e:	f7fb faf5 	bl	2004c <bsd_os_errno_set>
   24a62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24a66:	e7df      	b.n	24a28 <ip_interface_close+0x9c>
   24a68:	2009      	movs	r0, #9
   24a6a:	e7f8      	b.n	24a5e <ip_interface_close+0xd2>
   24a6c:	200226e0 	.word	0x200226e0

00024a70 <ip_interface_sendto>:
   24a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24a74:	2400      	movs	r4, #0
   24a76:	b089      	sub	sp, #36	; 0x24
   24a78:	9102      	str	r1, [sp, #8]
   24a7a:	4615      	mov	r5, r2
   24a7c:	4699      	mov	r9, r3
   24a7e:	9406      	str	r4, [sp, #24]
   24a80:	4607      	mov	r7, r0
   24a82:	9e12      	ldr	r6, [sp, #72]	; 0x48
   24a84:	f005 fea6 	bl	2a7d4 <interface_socket_from_handle_get>
   24a88:	2800      	cmp	r0, #0
   24a8a:	f000 814c 	beq.w	24d26 <ip_interface_sendto+0x2b6>
   24a8e:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   24a92:	f300 8139 	bgt.w	24d08 <ip_interface_sendto+0x298>
   24a96:	6903      	ldr	r3, [r0, #16]
   24a98:	4604      	mov	r4, r0
   24a9a:	2b01      	cmp	r3, #1
   24a9c:	f000 80ea 	beq.w	24c74 <ip_interface_sendto+0x204>
   24aa0:	6822      	ldr	r2, [r4, #0]
   24aa2:	0391      	lsls	r1, r2, #14
   24aa4:	d56a      	bpl.n	24b7c <ip_interface_sendto+0x10c>
   24aa6:	f1b9 0f00 	cmp.w	r9, #0
   24aaa:	f000 80f3 	beq.w	24c94 <ip_interface_sendto+0x224>
   24aae:	f019 0f02 	tst.w	r9, #2
   24ab2:	f000 8133 	beq.w	24d1c <ip_interface_sendto+0x2ac>
   24ab6:	2300      	movs	r3, #0
   24ab8:	9303      	str	r3, [sp, #12]
   24aba:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24abc:	f247 0806 	movw	r8, #28678	; 0x7006
   24ac0:	2b00      	cmp	r3, #0
   24ac2:	bf08      	it	eq
   24ac4:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   24ac8:	f04f 0b0c 	mov.w	fp, #12
   24acc:	4a9a      	ldr	r2, [pc, #616]	; (24d38 <ip_interface_sendto+0x2c8>)
   24ace:	9307      	str	r3, [sp, #28]
   24ad0:	043b      	lsls	r3, r7, #16
   24ad2:	9200      	str	r2, [sp, #0]
   24ad4:	9304      	str	r3, [sp, #16]
   24ad6:	4629      	mov	r1, r5
   24ad8:	a806      	add	r0, sp, #24
   24ada:	f7ff fd57 	bl	2458c <rpc_ip_client_request_alloc>
   24ade:	2804      	cmp	r0, #4
   24ae0:	f000 8098 	beq.w	24c14 <ip_interface_sendto+0x1a4>
   24ae4:	2800      	cmp	r0, #0
   24ae6:	f040 8123 	bne.w	24d30 <ip_interface_sendto+0x2c0>
   24aea:	9b06      	ldr	r3, [sp, #24]
   24aec:	f883 b008 	strb.w	fp, [r3, #8]
   24af0:	7258      	strb	r0, [r3, #9]
   24af2:	7298      	strb	r0, [r3, #10]
   24af4:	72d8      	strb	r0, [r3, #11]
   24af6:	2e00      	cmp	r6, #0
   24af8:	d053      	beq.n	24ba2 <ip_interface_sendto+0x132>
   24afa:	68e2      	ldr	r2, [r4, #12]
   24afc:	6871      	ldr	r1, [r6, #4]
   24afe:	428a      	cmp	r2, r1
   24b00:	f040 809a 	bne.w	24c38 <ip_interface_sendto+0x1c8>
   24b04:	7831      	ldrb	r1, [r6, #0]
   24b06:	9813      	ldr	r0, [sp, #76]	; 0x4c
   24b08:	4288      	cmp	r0, r1
   24b0a:	d10a      	bne.n	24b22 <ip_interface_sendto+0xb2>
   24b0c:	2a02      	cmp	r2, #2
   24b0e:	f103 001c 	add.w	r0, r3, #28
   24b12:	f000 80e7 	beq.w	24ce4 <ip_interface_sendto+0x274>
   24b16:	2a0a      	cmp	r2, #10
   24b18:	d103      	bne.n	24b22 <ip_interface_sendto+0xb2>
   24b1a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   24b1c:	2a24      	cmp	r2, #36	; 0x24
   24b1e:	f000 80ce 	beq.w	24cbe <ip_interface_sendto+0x24e>
   24b22:	f04f 0a16 	mov.w	sl, #22
   24b26:	6818      	ldr	r0, [r3, #0]
   24b28:	b110      	cbz	r0, 24b30 <ip_interface_sendto+0xc0>
   24b2a:	f7ff fd61 	bl	245f0 <rpc_ip_client_data_free>
   24b2e:	9b06      	ldr	r3, [sp, #24]
   24b30:	4618      	mov	r0, r3
   24b32:	f7ff fd55 	bl	245e0 <rpc_ip_client_message_free>
   24b36:	6823      	ldr	r3, [r4, #0]
   24b38:	0318      	lsls	r0, r3, #12
   24b3a:	d40b      	bmi.n	24b54 <ip_interface_sendto+0xe4>
   24b3c:	6823      	ldr	r3, [r4, #0]
   24b3e:	b29b      	uxth	r3, r3
   24b40:	2b0d      	cmp	r3, #13
   24b42:	d007      	beq.n	24b54 <ip_interface_sendto+0xe4>
   24b44:	6823      	ldr	r3, [r4, #0]
   24b46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   24b4a:	6023      	str	r3, [r4, #0]
   24b4c:	6823      	ldr	r3, [r4, #0]
   24b4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   24b52:	6023      	str	r3, [r4, #0]
   24b54:	f1ba 0f00 	cmp.w	sl, #0
   24b58:	f040 8093 	bne.w	24c82 <ip_interface_sendto+0x212>
   24b5c:	6823      	ldr	r3, [r4, #0]
   24b5e:	0119      	lsls	r1, r3, #4
   24b60:	d56d      	bpl.n	24c3e <ip_interface_sendto+0x1ce>
   24b62:	6823      	ldr	r3, [r4, #0]
   24b64:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
   24b68:	6023      	str	r3, [r4, #0]
   24b6a:	9b00      	ldr	r3, [sp, #0]
   24b6c:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   24b70:	2800      	cmp	r0, #0
   24b72:	d168      	bne.n	24c46 <ip_interface_sendto+0x1d6>
   24b74:	4628      	mov	r0, r5
   24b76:	b009      	add	sp, #36	; 0x24
   24b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24b7c:	6822      	ldr	r2, [r4, #0]
   24b7e:	0092      	lsls	r2, r2, #2
   24b80:	d406      	bmi.n	24b90 <ip_interface_sendto+0x120>
   24b82:	2b01      	cmp	r3, #1
   24b84:	f000 8095 	beq.w	24cb2 <ip_interface_sendto+0x242>
   24b88:	6823      	ldr	r3, [r4, #0]
   24b8a:	031b      	lsls	r3, r3, #12
   24b8c:	f140 80b7 	bpl.w	24cfe <ip_interface_sendto+0x28e>
   24b90:	6823      	ldr	r3, [r4, #0]
   24b92:	031e      	lsls	r6, r3, #12
   24b94:	f140 80bd 	bpl.w	24d12 <ip_interface_sendto+0x2a2>
   24b98:	4b67      	ldr	r3, [pc, #412]	; (24d38 <ip_interface_sendto+0x2c8>)
   24b9a:	f8d4 a008 	ldr.w	sl, [r4, #8]
   24b9e:	9300      	str	r3, [sp, #0]
   24ba0:	e7d8      	b.n	24b54 <ip_interface_sendto+0xe4>
   24ba2:	4642      	mov	r2, r8
   24ba4:	f8c3 9014 	str.w	r9, [r3, #20]
   24ba8:	69a1      	ldr	r1, [r4, #24]
   24baa:	9804      	ldr	r0, [sp, #16]
   24bac:	6119      	str	r1, [r3, #16]
   24bae:	9902      	ldr	r1, [sp, #8]
   24bb0:	4302      	orrs	r2, r0
   24bb2:	60da      	str	r2, [r3, #12]
   24bb4:	605d      	str	r5, [r3, #4]
   24bb6:	b119      	cbz	r1, 24bc0 <ip_interface_sendto+0x150>
   24bb8:	6818      	ldr	r0, [r3, #0]
   24bba:	462a      	mov	r2, r5
   24bbc:	f014 fa01 	bl	38fc2 <memcpy>
   24bc0:	6823      	ldr	r3, [r4, #0]
   24bc2:	4641      	mov	r1, r8
   24bc4:	9305      	str	r3, [sp, #20]
   24bc6:	6823      	ldr	r3, [r4, #0]
   24bc8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   24bcc:	6023      	str	r3, [r4, #0]
   24bce:	6823      	ldr	r3, [r4, #0]
   24bd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   24bd4:	6023      	str	r3, [r4, #0]
   24bd6:	9b06      	ldr	r3, [sp, #24]
   24bd8:	4618      	mov	r0, r3
   24bda:	9301      	str	r3, [sp, #4]
   24bdc:	f7ff fcea 	bl	245b4 <rpc_ip_client_request_send>
   24be0:	9b01      	ldr	r3, [sp, #4]
   24be2:	4682      	mov	sl, r0
   24be4:	2800      	cmp	r0, #0
   24be6:	d138      	bne.n	24c5a <ip_interface_sendto+0x1ea>
   24be8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   24bec:	ab07      	add	r3, sp, #28
   24bee:	4611      	mov	r1, r2
   24bf0:	4638      	mov	r0, r7
   24bf2:	f005 fd7b 	bl	2a6ec <interface_socket_wait>
   24bf6:	4603      	mov	r3, r0
   24bf8:	b198      	cbz	r0, 24c22 <ip_interface_sendto+0x1b2>
   24bfa:	6822      	ldr	r2, [r4, #0]
   24bfc:	0312      	lsls	r2, r2, #12
   24bfe:	d455      	bmi.n	24cac <ip_interface_sendto+0x23c>
   24c00:	2b3c      	cmp	r3, #60	; 0x3c
   24c02:	d017      	beq.n	24c34 <ip_interface_sendto+0x1c4>
   24c04:	2b0c      	cmp	r3, #12
   24c06:	d115      	bne.n	24c34 <ip_interface_sendto+0x1c4>
   24c08:	9b00      	ldr	r3, [sp, #0]
   24c0a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   24c0e:	b108      	cbz	r0, 24c14 <ip_interface_sendto+0x1a4>
   24c10:	f7ff fce6 	bl	245e0 <rpc_ip_client_message_free>
   24c14:	9b03      	ldr	r3, [sp, #12]
   24c16:	2b00      	cmp	r3, #0
   24c18:	f47f af5d 	bne.w	24ad6 <ip_interface_sendto+0x66>
   24c1c:	f04f 0a23 	mov.w	sl, #35	; 0x23
   24c20:	e789      	b.n	24b36 <ip_interface_sendto+0xc6>
   24c22:	9001      	str	r0, [sp, #4]
   24c24:	4638      	mov	r0, r7
   24c26:	f005 fdd5 	bl	2a7d4 <interface_socket_from_handle_get>
   24c2a:	9b01      	ldr	r3, [sp, #4]
   24c2c:	b110      	cbz	r0, 24c34 <ip_interface_sendto+0x1c4>
   24c2e:	6843      	ldr	r3, [r0, #4]
   24c30:	2b00      	cmp	r3, #0
   24c32:	d136      	bne.n	24ca2 <ip_interface_sendto+0x232>
   24c34:	469a      	mov	sl, r3
   24c36:	e77e      	b.n	24b36 <ip_interface_sendto+0xc6>
   24c38:	f04f 0a2f 	mov.w	sl, #47	; 0x2f
   24c3c:	e773      	b.n	24b26 <ip_interface_sendto+0xb6>
   24c3e:	9b00      	ldr	r3, [sp, #0]
   24c40:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   24c44:	6985      	ldr	r5, [r0, #24]
   24c46:	f7ff fccb 	bl	245e0 <rpc_ip_client_message_free>
   24c4a:	2300      	movs	r3, #0
   24c4c:	4628      	mov	r0, r5
   24c4e:	9a00      	ldr	r2, [sp, #0]
   24c50:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
   24c54:	b009      	add	sp, #36	; 0x24
   24c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24c5a:	6818      	ldr	r0, [r3, #0]
   24c5c:	469a      	mov	sl, r3
   24c5e:	b108      	cbz	r0, 24c64 <ip_interface_sendto+0x1f4>
   24c60:	f7ff fcc6 	bl	245f0 <rpc_ip_client_data_free>
   24c64:	4650      	mov	r0, sl
   24c66:	f7ff fcbb 	bl	245e0 <rpc_ip_client_message_free>
   24c6a:	9b05      	ldr	r3, [sp, #20]
   24c6c:	f04f 0a23 	mov.w	sl, #35	; 0x23
   24c70:	6023      	str	r3, [r4, #0]
   24c72:	e760      	b.n	24b36 <ip_interface_sendto+0xc6>
   24c74:	2e00      	cmp	r6, #0
   24c76:	f43f af13 	beq.w	24aa0 <ip_interface_sendto+0x30>
   24c7a:	f04f 0a38 	mov.w	sl, #56	; 0x38
   24c7e:	4b2e      	ldr	r3, [pc, #184]	; (24d38 <ip_interface_sendto+0x2c8>)
   24c80:	9300      	str	r3, [sp, #0]
   24c82:	4650      	mov	r0, sl
   24c84:	f7fb f9e2 	bl	2004c <bsd_os_errno_set>
   24c88:	9b00      	ldr	r3, [sp, #0]
   24c8a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   24c8e:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   24c92:	e76d      	b.n	24b70 <ip_interface_sendto+0x100>
   24c94:	6823      	ldr	r3, [r4, #0]
   24c96:	f083 5380 	eor.w	r3, r3, #268435456	; 0x10000000
   24c9a:	f3c3 7300 	ubfx	r3, r3, #28, #1
   24c9e:	9303      	str	r3, [sp, #12]
   24ca0:	e70b      	b.n	24aba <ip_interface_sendto+0x4a>
   24ca2:	f8c0 a004 	str.w	sl, [r0, #4]
   24ca6:	6822      	ldr	r2, [r4, #0]
   24ca8:	0312      	lsls	r2, r2, #12
   24caa:	d5a9      	bpl.n	24c00 <ip_interface_sendto+0x190>
   24cac:	f8d4 a008 	ldr.w	sl, [r4, #8]
   24cb0:	e741      	b.n	24b36 <ip_interface_sendto+0xc6>
   24cb2:	6823      	ldr	r3, [r4, #0]
   24cb4:	b29b      	uxth	r3, r3
   24cb6:	2b05      	cmp	r3, #5
   24cb8:	f47f af6a 	bne.w	24b90 <ip_interface_sendto+0x120>
   24cbc:	e764      	b.n	24b88 <ip_interface_sendto+0x118>
   24cbe:	2210      	movs	r2, #16
   24cc0:	8931      	ldrh	r1, [r6, #8]
   24cc2:	835a      	strh	r2, [r3, #26]
   24cc4:	8319      	strh	r1, [r3, #24]
   24cc6:	18b1      	adds	r1, r6, r2
   24cc8:	f014 f97b 	bl	38fc2 <memcpy>
   24ccc:	f247 0207 	movw	r2, #28679	; 0x7007
   24cd0:	9b06      	ldr	r3, [sp, #24]
   24cd2:	4690      	mov	r8, r2
   24cd4:	6899      	ldr	r1, [r3, #8]
   24cd6:	8b58      	ldrh	r0, [r3, #26]
   24cd8:	3104      	adds	r1, #4
   24cda:	4401      	add	r1, r0
   24cdc:	f8c3 9014 	str.w	r9, [r3, #20]
   24ce0:	6099      	str	r1, [r3, #8]
   24ce2:	e761      	b.n	24ba8 <ip_interface_sendto+0x138>
   24ce4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   24ce6:	2a10      	cmp	r2, #16
   24ce8:	f47f af1b 	bne.w	24b22 <ip_interface_sendto+0xb2>
   24cec:	2204      	movs	r2, #4
   24cee:	8931      	ldrh	r1, [r6, #8]
   24cf0:	835a      	strh	r2, [r3, #26]
   24cf2:	8319      	strh	r1, [r3, #24]
   24cf4:	f106 010c 	add.w	r1, r6, #12
   24cf8:	f014 f963 	bl	38fc2 <memcpy>
   24cfc:	e7e6      	b.n	24ccc <ip_interface_sendto+0x25c>
   24cfe:	4b0e      	ldr	r3, [pc, #56]	; (24d38 <ip_interface_sendto+0x2c8>)
   24d00:	f04f 0a23 	mov.w	sl, #35	; 0x23
   24d04:	9300      	str	r3, [sp, #0]
   24d06:	e7bc      	b.n	24c82 <ip_interface_sendto+0x212>
   24d08:	4b0b      	ldr	r3, [pc, #44]	; (24d38 <ip_interface_sendto+0x2c8>)
   24d0a:	f04f 0a28 	mov.w	sl, #40	; 0x28
   24d0e:	9300      	str	r3, [sp, #0]
   24d10:	e7b7      	b.n	24c82 <ip_interface_sendto+0x212>
   24d12:	4b09      	ldr	r3, [pc, #36]	; (24d38 <ip_interface_sendto+0x2c8>)
   24d14:	f04f 0a39 	mov.w	sl, #57	; 0x39
   24d18:	9300      	str	r3, [sp, #0]
   24d1a:	e7b2      	b.n	24c82 <ip_interface_sendto+0x212>
   24d1c:	4b06      	ldr	r3, [pc, #24]	; (24d38 <ip_interface_sendto+0x2c8>)
   24d1e:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   24d22:	9300      	str	r3, [sp, #0]
   24d24:	e7ad      	b.n	24c82 <ip_interface_sendto+0x212>
   24d26:	4b04      	ldr	r3, [pc, #16]	; (24d38 <ip_interface_sendto+0x2c8>)
   24d28:	f04f 0a09 	mov.w	sl, #9
   24d2c:	9300      	str	r3, [sp, #0]
   24d2e:	e7a8      	b.n	24c82 <ip_interface_sendto+0x212>
   24d30:	f04f 0a0c 	mov.w	sl, #12
   24d34:	e6ff      	b.n	24b36 <ip_interface_sendto+0xc6>
   24d36:	bf00      	nop
   24d38:	200226e0 	.word	0x200226e0

00024d3c <ip_interface_recvfrom>:
   24d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24d40:	b087      	sub	sp, #28
   24d42:	2a00      	cmp	r2, #0
   24d44:	f000 8112 	beq.w	24f6c <ip_interface_recvfrom+0x230>
   24d48:	4680      	mov	r8, r0
   24d4a:	468b      	mov	fp, r1
   24d4c:	469a      	mov	sl, r3
   24d4e:	4691      	mov	r9, r2
   24d50:	b11b      	cbz	r3, 24d5a <ip_interface_recvfrom+0x1e>
   24d52:	f013 0f3a 	tst.w	r3, #58	; 0x3a
   24d56:	f000 8107 	beq.w	24f68 <ip_interface_recvfrom+0x22c>
   24d5a:	4640      	mov	r0, r8
   24d5c:	f005 fd3a 	bl	2a7d4 <interface_socket_from_handle_get>
   24d60:	4604      	mov	r4, r0
   24d62:	2800      	cmp	r0, #0
   24d64:	f000 8104 	beq.w	24f70 <ip_interface_recvfrom+0x234>
   24d68:	6803      	ldr	r3, [r0, #0]
   24d6a:	02db      	lsls	r3, r3, #11
   24d6c:	d562      	bpl.n	24e34 <ip_interface_recvfrom+0xf8>
   24d6e:	f01a 0f02 	tst.w	sl, #2
   24d72:	bf18      	it	ne
   24d74:	2600      	movne	r6, #0
   24d76:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   24d7a:	bf08      	it	eq
   24d7c:	6806      	ldreq	r6, [r0, #0]
   24d7e:	f00a 0310 	and.w	r3, sl, #16
   24d82:	bf04      	itt	eq
   24d84:	f086 5680 	eoreq.w	r6, r6, #268435456	; 0x10000000
   24d88:	f3c6 7600 	ubfxeq	r6, r6, #28, #1
   24d8c:	9301      	str	r3, [sp, #4]
   24d8e:	6823      	ldr	r3, [r4, #0]
   24d90:	03df      	lsls	r7, r3, #15
   24d92:	d567      	bpl.n	24e64 <ip_interface_recvfrom+0x128>
   24d94:	6823      	ldr	r3, [r4, #0]
   24d96:	69e0      	ldr	r0, [r4, #28]
   24d98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   24d9c:	6023      	str	r3, [r4, #0]
   24d9e:	6803      	ldr	r3, [r0, #0]
   24da0:	68db      	ldr	r3, [r3, #12]
   24da2:	4798      	blx	r3
   24da4:	4605      	mov	r5, r0
   24da6:	3001      	adds	r0, #1
   24da8:	d07d      	beq.n	24ea6 <ip_interface_recvfrom+0x16a>
   24daa:	45a9      	cmp	r9, r5
   24dac:	dd03      	ble.n	24db6 <ip_interface_recvfrom+0x7a>
   24dae:	6923      	ldr	r3, [r4, #16]
   24db0:	2b01      	cmp	r3, #1
   24db2:	f000 80a3 	beq.w	24efc <ip_interface_recvfrom+0x1c0>
   24db6:	f04f 0800 	mov.w	r8, #0
   24dba:	af02      	add	r7, sp, #8
   24dbc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   24dbe:	b103      	cbz	r3, 24dc2 <ip_interface_recvfrom+0x86>
   24dc0:	681b      	ldr	r3, [r3, #0]
   24dc2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   24dc4:	e9cd b902 	strd	fp, r9, [sp, #8]
   24dc8:	e9cd 2304 	strd	r2, r3, [sp, #16]
   24dcc:	69e0      	ldr	r0, [r4, #28]
   24dce:	4639      	mov	r1, r7
   24dd0:	6803      	ldr	r3, [r0, #0]
   24dd2:	4652      	mov	r2, sl
   24dd4:	689b      	ldr	r3, [r3, #8]
   24dd6:	4798      	blx	r3
   24dd8:	4605      	mov	r5, r0
   24dda:	69e0      	ldr	r0, [r4, #28]
   24ddc:	1c6b      	adds	r3, r5, #1
   24dde:	6803      	ldr	r3, [r0, #0]
   24de0:	bf18      	it	ne
   24de2:	2701      	movne	r7, #1
   24de4:	68db      	ldr	r3, [r3, #12]
   24de6:	bf0a      	itet	eq
   24de8:	2700      	moveq	r7, #0
   24dea:	2600      	movne	r6, #0
   24dec:	2623      	moveq	r6, #35	; 0x23
   24dee:	4798      	blx	r3
   24df0:	3001      	adds	r0, #1
   24df2:	d132      	bne.n	24e5a <ip_interface_recvfrom+0x11e>
   24df4:	f1b8 0f00 	cmp.w	r8, #0
   24df8:	f000 80b0 	beq.w	24f5c <ip_interface_recvfrom+0x220>
   24dfc:	2f00      	cmp	r7, #0
   24dfe:	f000 80a1 	beq.w	24f44 <ip_interface_recvfrom+0x208>
   24e02:	6823      	ldr	r3, [r4, #0]
   24e04:	0318      	lsls	r0, r3, #12
   24e06:	d506      	bpl.n	24e16 <ip_interface_recvfrom+0xda>
   24e08:	6823      	ldr	r3, [r4, #0]
   24e0a:	b29b      	uxth	r3, r3
   24e0c:	2b0d      	cmp	r3, #13
   24e0e:	d002      	beq.n	24e16 <ip_interface_recvfrom+0xda>
   24e10:	6923      	ldr	r3, [r4, #16]
   24e12:	2b01      	cmp	r3, #1
   24e14:	d021      	beq.n	24e5a <ip_interface_recvfrom+0x11e>
   24e16:	6823      	ldr	r3, [r4, #0]
   24e18:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   24e1c:	6823      	ldr	r3, [r4, #0]
   24e1e:	f040 80a9 	bne.w	24f74 <ip_interface_recvfrom+0x238>
   24e22:	0319      	lsls	r1, r3, #12
   24e24:	d473      	bmi.n	24f0e <ip_interface_recvfrom+0x1d2>
   24e26:	2e00      	cmp	r6, #0
   24e28:	f040 8086 	bne.w	24f38 <ip_interface_recvfrom+0x1fc>
   24e2c:	4628      	mov	r0, r5
   24e2e:	b007      	add	sp, #28
   24e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24e34:	6803      	ldr	r3, [r0, #0]
   24e36:	b29b      	uxth	r3, r3
   24e38:	2b06      	cmp	r3, #6
   24e3a:	d071      	beq.n	24f20 <ip_interface_recvfrom+0x1e4>
   24e3c:	6803      	ldr	r3, [r0, #0]
   24e3e:	b29b      	uxth	r3, r3
   24e40:	2b07      	cmp	r3, #7
   24e42:	bf0c      	ite	eq
   24e44:	2609      	moveq	r6, #9
   24e46:	2639      	movne	r6, #57	; 0x39
   24e48:	69e0      	ldr	r0, [r4, #28]
   24e4a:	6803      	ldr	r3, [r0, #0]
   24e4c:	68db      	ldr	r3, [r3, #12]
   24e4e:	4798      	blx	r3
   24e50:	1c43      	adds	r3, r0, #1
   24e52:	4605      	mov	r5, r0
   24e54:	d0df      	beq.n	24e16 <ip_interface_recvfrom+0xda>
   24e56:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   24e5a:	6823      	ldr	r3, [r4, #0]
   24e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   24e60:	6023      	str	r3, [r4, #0]
   24e62:	e7e0      	b.n	24e26 <ip_interface_recvfrom+0xea>
   24e64:	2e00      	cmp	r6, #0
   24e66:	d07d      	beq.n	24f64 <ip_interface_recvfrom+0x228>
   24e68:	6a26      	ldr	r6, [r4, #32]
   24e6a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   24e6e:	2e00      	cmp	r6, #0
   24e70:	bf08      	it	eq
   24e72:	f04f 36ff 	moveq.w	r6, #4294967295	; 0xffffffff
   24e76:	af02      	add	r7, sp, #8
   24e78:	463b      	mov	r3, r7
   24e7a:	4611      	mov	r1, r2
   24e7c:	4640      	mov	r0, r8
   24e7e:	9602      	str	r6, [sp, #8]
   24e80:	f005 fc34 	bl	2a6ec <interface_socket_wait>
   24e84:	4606      	mov	r6, r0
   24e86:	b350      	cbz	r0, 24ede <ip_interface_recvfrom+0x1a2>
   24e88:	6823      	ldr	r3, [r4, #0]
   24e8a:	031a      	lsls	r2, r3, #12
   24e8c:	d532      	bpl.n	24ef4 <ip_interface_recvfrom+0x1b8>
   24e8e:	6823      	ldr	r3, [r4, #0]
   24e90:	b29b      	uxth	r3, r3
   24e92:	2b0d      	cmp	r3, #13
   24e94:	d02e      	beq.n	24ef4 <ip_interface_recvfrom+0x1b8>
   24e96:	6923      	ldr	r3, [r4, #16]
   24e98:	f1a3 0801 	sub.w	r8, r3, #1
   24e9c:	fab8 f888 	clz	r8, r8
   24ea0:	ea4f 1858 	mov.w	r8, r8, lsr #5
   24ea4:	e78a      	b.n	24dbc <ip_interface_recvfrom+0x80>
   24ea6:	6823      	ldr	r3, [r4, #0]
   24ea8:	031a      	lsls	r2, r3, #12
   24eaa:	d5db      	bpl.n	24e64 <ip_interface_recvfrom+0x128>
   24eac:	6823      	ldr	r3, [r4, #0]
   24eae:	b29b      	uxth	r3, r3
   24eb0:	2b0d      	cmp	r3, #13
   24eb2:	d0d7      	beq.n	24e64 <ip_interface_recvfrom+0x128>
   24eb4:	6923      	ldr	r3, [r4, #16]
   24eb6:	69e0      	ldr	r0, [r4, #28]
   24eb8:	2b01      	cmp	r3, #1
   24eba:	d033      	beq.n	24f24 <ip_interface_recvfrom+0x1e8>
   24ebc:	2639      	movs	r6, #57	; 0x39
   24ebe:	6823      	ldr	r3, [r4, #0]
   24ec0:	0c1b      	lsrs	r3, r3, #16
   24ec2:	041b      	lsls	r3, r3, #16
   24ec4:	f043 030d 	orr.w	r3, r3, #13
   24ec8:	6023      	str	r3, [r4, #0]
   24eca:	6823      	ldr	r3, [r4, #0]
   24ecc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   24ed0:	6023      	str	r3, [r4, #0]
   24ed2:	6803      	ldr	r3, [r0, #0]
   24ed4:	68db      	ldr	r3, [r3, #12]
   24ed6:	4798      	blx	r3
   24ed8:	3001      	adds	r0, #1
   24eda:	d1be      	bne.n	24e5a <ip_interface_recvfrom+0x11e>
   24edc:	e79b      	b.n	24e16 <ip_interface_recvfrom+0xda>
   24ede:	4640      	mov	r0, r8
   24ee0:	f005 fc78 	bl	2a7d4 <interface_socket_from_handle_get>
   24ee4:	b140      	cbz	r0, 24ef8 <ip_interface_recvfrom+0x1bc>
   24ee6:	6846      	ldr	r6, [r0, #4]
   24ee8:	b136      	cbz	r6, 24ef8 <ip_interface_recvfrom+0x1bc>
   24eea:	2300      	movs	r3, #0
   24eec:	6043      	str	r3, [r0, #4]
   24eee:	6823      	ldr	r3, [r4, #0]
   24ef0:	031a      	lsls	r2, r3, #12
   24ef2:	d4cc      	bmi.n	24e8e <ip_interface_recvfrom+0x152>
   24ef4:	69e0      	ldr	r0, [r4, #28]
   24ef6:	e7ec      	b.n	24ed2 <ip_interface_recvfrom+0x196>
   24ef8:	2601      	movs	r6, #1
   24efa:	e748      	b.n	24d8e <ip_interface_recvfrom+0x52>
   24efc:	9b01      	ldr	r3, [sp, #4]
   24efe:	b11b      	cbz	r3, 24f08 <ip_interface_recvfrom+0x1cc>
   24f00:	6823      	ldr	r3, [r4, #0]
   24f02:	00d9      	lsls	r1, r3, #3
   24f04:	d5b0      	bpl.n	24e68 <ip_interface_recvfrom+0x12c>
   24f06:	e756      	b.n	24db6 <ip_interface_recvfrom+0x7a>
   24f08:	4698      	mov	r8, r3
   24f0a:	af02      	add	r7, sp, #8
   24f0c:	e756      	b.n	24dbc <ip_interface_recvfrom+0x80>
   24f0e:	6823      	ldr	r3, [r4, #0]
   24f10:	b29b      	uxth	r3, r3
   24f12:	2b0d      	cmp	r3, #13
   24f14:	d187      	bne.n	24e26 <ip_interface_recvfrom+0xea>
   24f16:	68a3      	ldr	r3, [r4, #8]
   24f18:	2b00      	cmp	r3, #0
   24f1a:	d084      	beq.n	24e26 <ip_interface_recvfrom+0xea>
   24f1c:	68a6      	ldr	r6, [r4, #8]
   24f1e:	e782      	b.n	24e26 <ip_interface_recvfrom+0xea>
   24f20:	2609      	movs	r6, #9
   24f22:	e791      	b.n	24e48 <ip_interface_recvfrom+0x10c>
   24f24:	6803      	ldr	r3, [r0, #0]
   24f26:	68db      	ldr	r3, [r3, #12]
   24f28:	4798      	blx	r3
   24f2a:	3001      	adds	r0, #1
   24f2c:	d00a      	beq.n	24f44 <ip_interface_recvfrom+0x208>
   24f2e:	2623      	movs	r6, #35	; 0x23
   24f30:	6823      	ldr	r3, [r4, #0]
   24f32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   24f36:	6023      	str	r3, [r4, #0]
   24f38:	4630      	mov	r0, r6
   24f3a:	f7fb f887 	bl	2004c <bsd_os_errno_set>
   24f3e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   24f42:	e773      	b.n	24e2c <ip_interface_recvfrom+0xf0>
   24f44:	6823      	ldr	r3, [r4, #0]
   24f46:	2500      	movs	r5, #0
   24f48:	0c1b      	lsrs	r3, r3, #16
   24f4a:	041b      	lsls	r3, r3, #16
   24f4c:	f043 030d 	orr.w	r3, r3, #13
   24f50:	6023      	str	r3, [r4, #0]
   24f52:	6823      	ldr	r3, [r4, #0]
   24f54:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   24f58:	6023      	str	r3, [r4, #0]
   24f5a:	e767      	b.n	24e2c <ip_interface_recvfrom+0xf0>
   24f5c:	2f00      	cmp	r7, #0
   24f5e:	f47f af50 	bne.w	24e02 <ip_interface_recvfrom+0xc6>
   24f62:	e758      	b.n	24e16 <ip_interface_recvfrom+0xda>
   24f64:	2623      	movs	r6, #35	; 0x23
   24f66:	e7c5      	b.n	24ef4 <ip_interface_recvfrom+0x1b8>
   24f68:	262d      	movs	r6, #45	; 0x2d
   24f6a:	e7e5      	b.n	24f38 <ip_interface_recvfrom+0x1fc>
   24f6c:	2616      	movs	r6, #22
   24f6e:	e7e3      	b.n	24f38 <ip_interface_recvfrom+0x1fc>
   24f70:	2609      	movs	r6, #9
   24f72:	e7e1      	b.n	24f38 <ip_interface_recvfrom+0x1fc>
   24f74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   24f78:	6023      	str	r3, [r4, #0]
   24f7a:	6823      	ldr	r3, [r4, #0]
   24f7c:	2669      	movs	r6, #105	; 0x69
   24f7e:	0c1b      	lsrs	r3, r3, #16
   24f80:	041b      	lsls	r3, r3, #16
   24f82:	f043 030d 	orr.w	r3, r3, #13
   24f86:	6023      	str	r3, [r4, #0]
   24f88:	e7d6      	b.n	24f38 <ip_interface_recvfrom+0x1fc>
   24f8a:	bf00      	nop

00024f8c <ip_interface_connect>:
   24f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24f90:	b082      	sub	sp, #8
   24f92:	2900      	cmp	r1, #0
   24f94:	d04b      	beq.n	2502e <ip_interface_connect+0xa2>
   24f96:	4617      	mov	r7, r2
   24f98:	2a00      	cmp	r2, #0
   24f9a:	d048      	beq.n	2502e <ip_interface_connect+0xa2>
   24f9c:	4680      	mov	r8, r0
   24f9e:	4689      	mov	r9, r1
   24fa0:	f005 fc18 	bl	2a7d4 <interface_socket_from_handle_get>
   24fa4:	4605      	mov	r5, r0
   24fa6:	2800      	cmp	r0, #0
   24fa8:	f000 80af 	beq.w	2510a <ip_interface_connect+0x17e>
   24fac:	6803      	ldr	r3, [r0, #0]
   24fae:	b29b      	uxth	r3, r3
   24fb0:	2b02      	cmp	r3, #2
   24fb2:	d004      	beq.n	24fbe <ip_interface_connect+0x32>
   24fb4:	6803      	ldr	r3, [r0, #0]
   24fb6:	b29b      	uxth	r3, r3
   24fb8:	2b04      	cmp	r3, #4
   24fba:	f040 809d 	bne.w	250f8 <ip_interface_connect+0x16c>
   24fbe:	6829      	ldr	r1, [r5, #0]
   24fc0:	f011 5100 	ands.w	r1, r1, #536870912	; 0x20000000
   24fc4:	f040 8089 	bne.w	250da <ip_interface_connect+0x14e>
   24fc8:	ae02      	add	r6, sp, #8
   24fca:	f8d5 a018 	ldr.w	sl, [r5, #24]
   24fce:	f846 1d04 	str.w	r1, [r6, #-4]!
   24fd2:	4630      	mov	r0, r6
   24fd4:	f7ff fada 	bl	2458c <rpc_ip_client_request_alloc>
   24fd8:	bb98      	cbnz	r0, 25042 <ip_interface_connect+0xb6>
   24fda:	2108      	movs	r1, #8
   24fdc:	ea4f 4208 	mov.w	r2, r8, lsl #16
   24fe0:	9c01      	ldr	r4, [sp, #4]
   24fe2:	f442 43e0 	orr.w	r3, r2, #28672	; 0x7000
   24fe6:	f043 0302 	orr.w	r3, r3, #2
   24fea:	60e3      	str	r3, [r4, #12]
   24fec:	f8c4 a010 	str.w	sl, [r4, #16]
   24ff0:	7260      	strb	r0, [r4, #9]
   24ff2:	72a0      	strb	r0, [r4, #10]
   24ff4:	72e0      	strb	r0, [r4, #11]
   24ff6:	7221      	strb	r1, [r4, #8]
   24ff8:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
   24ffc:	f042 0202 	orr.w	r2, r2, #2
   25000:	60e2      	str	r2, [r4, #12]
   25002:	68a3      	ldr	r3, [r4, #8]
   25004:	69aa      	ldr	r2, [r5, #24]
   25006:	3304      	adds	r3, #4
   25008:	6122      	str	r2, [r4, #16]
   2500a:	60a3      	str	r3, [r4, #8]
   2500c:	68eb      	ldr	r3, [r5, #12]
   2500e:	f8d9 2004 	ldr.w	r2, [r9, #4]
   25012:	4293      	cmp	r3, r2
   25014:	d11b      	bne.n	2504e <ip_interface_connect+0xc2>
   25016:	f899 2000 	ldrb.w	r2, [r9]
   2501a:	4297      	cmp	r7, r2
   2501c:	d107      	bne.n	2502e <ip_interface_connect+0xa2>
   2501e:	2b02      	cmp	r3, #2
   25020:	f104 0018 	add.w	r0, r4, #24
   25024:	d015      	beq.n	25052 <ip_interface_connect+0xc6>
   25026:	2b0a      	cmp	r3, #10
   25028:	d101      	bne.n	2502e <ip_interface_connect+0xa2>
   2502a:	2f24      	cmp	r7, #36	; 0x24
   2502c:	d01d      	beq.n	2506a <ip_interface_connect+0xde>
   2502e:	2416      	movs	r4, #22
   25030:	4620      	mov	r0, r4
   25032:	f7fb f80b 	bl	2004c <bsd_os_errno_set>
   25036:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2503a:	4620      	mov	r0, r4
   2503c:	b002      	add	sp, #8
   2503e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25042:	9c01      	ldr	r4, [sp, #4]
   25044:	2c00      	cmp	r4, #0
   25046:	d05e      	beq.n	25106 <ip_interface_connect+0x17a>
   25048:	ea4f 4208 	mov.w	r2, r8, lsl #16
   2504c:	e7d4      	b.n	24ff8 <ip_interface_connect+0x6c>
   2504e:	242f      	movs	r4, #47	; 0x2f
   25050:	e7ee      	b.n	25030 <ip_interface_connect+0xa4>
   25052:	2f10      	cmp	r7, #16
   25054:	d1eb      	bne.n	2502e <ip_interface_connect+0xa2>
   25056:	2204      	movs	r2, #4
   25058:	f8b9 3008 	ldrh.w	r3, [r9, #8]
   2505c:	f109 010c 	add.w	r1, r9, #12
   25060:	82e2      	strh	r2, [r4, #22]
   25062:	82a3      	strh	r3, [r4, #20]
   25064:	f013 ffad 	bl	38fc2 <memcpy>
   25068:	e008      	b.n	2507c <ip_interface_connect+0xf0>
   2506a:	2210      	movs	r2, #16
   2506c:	f8b9 3008 	ldrh.w	r3, [r9, #8]
   25070:	eb09 0102 	add.w	r1, r9, r2
   25074:	82e2      	strh	r2, [r4, #22]
   25076:	82a3      	strh	r3, [r4, #20]
   25078:	f013 ffa3 	bl	38fc2 <memcpy>
   2507c:	68a3      	ldr	r3, [r4, #8]
   2507e:	8ae2      	ldrh	r2, [r4, #22]
   25080:	f247 0102 	movw	r1, #28674	; 0x7002
   25084:	4413      	add	r3, r2
   25086:	60a3      	str	r3, [r4, #8]
   25088:	682f      	ldr	r7, [r5, #0]
   2508a:	682b      	ldr	r3, [r5, #0]
   2508c:	4620      	mov	r0, r4
   2508e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   25092:	602b      	str	r3, [r5, #0]
   25094:	f7ff fa8e 	bl	245b4 <rpc_ip_client_request_send>
   25098:	b9a8      	cbnz	r0, 250c6 <ip_interface_connect+0x13a>
   2509a:	682b      	ldr	r3, [r5, #0]
   2509c:	00db      	lsls	r3, r3, #3
   2509e:	d429      	bmi.n	250f4 <ip_interface_connect+0x168>
   250a0:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   250a2:	4633      	mov	r3, r6
   250a4:	2c00      	cmp	r4, #0
   250a6:	bf08      	it	eq
   250a8:	f04f 34ff 	moveq.w	r4, #4294967295	; 0xffffffff
   250ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
   250b0:	2105      	movs	r1, #5
   250b2:	4640      	mov	r0, r8
   250b4:	9401      	str	r4, [sp, #4]
   250b6:	f005 fb19 	bl	2a6ec <interface_socket_wait>
   250ba:	4604      	mov	r4, r0
   250bc:	b178      	cbz	r0, 250de <ip_interface_connect+0x152>
   250be:	2c73      	cmp	r4, #115	; 0x73
   250c0:	d0b6      	beq.n	25030 <ip_interface_connect+0xa4>
   250c2:	602f      	str	r7, [r5, #0]
   250c4:	e7b4      	b.n	25030 <ip_interface_connect+0xa4>
   250c6:	6820      	ldr	r0, [r4, #0]
   250c8:	b108      	cbz	r0, 250ce <ip_interface_connect+0x142>
   250ca:	f7ff fa91 	bl	245f0 <rpc_ip_client_data_free>
   250ce:	4620      	mov	r0, r4
   250d0:	f7ff fa86 	bl	245e0 <rpc_ip_client_message_free>
   250d4:	2423      	movs	r4, #35	; 0x23
   250d6:	602f      	str	r7, [r5, #0]
   250d8:	e7aa      	b.n	25030 <ip_interface_connect+0xa4>
   250da:	2472      	movs	r4, #114	; 0x72
   250dc:	e7a8      	b.n	25030 <ip_interface_connect+0xa4>
   250de:	4640      	mov	r0, r8
   250e0:	f005 fb78 	bl	2a7d4 <interface_socket_from_handle_get>
   250e4:	2800      	cmp	r0, #0
   250e6:	d0a8      	beq.n	2503a <ip_interface_connect+0xae>
   250e8:	6843      	ldr	r3, [r0, #4]
   250ea:	2b00      	cmp	r3, #0
   250ec:	d0a5      	beq.n	2503a <ip_interface_connect+0xae>
   250ee:	6044      	str	r4, [r0, #4]
   250f0:	461c      	mov	r4, r3
   250f2:	e7e4      	b.n	250be <ip_interface_connect+0x132>
   250f4:	2473      	movs	r4, #115	; 0x73
   250f6:	e79b      	b.n	25030 <ip_interface_connect+0xa4>
   250f8:	6803      	ldr	r3, [r0, #0]
   250fa:	b29b      	uxth	r3, r3
   250fc:	2b05      	cmp	r3, #5
   250fe:	bf14      	ite	ne
   25100:	2409      	movne	r4, #9
   25102:	2438      	moveq	r4, #56	; 0x38
   25104:	e794      	b.n	25030 <ip_interface_connect+0xa4>
   25106:	240c      	movs	r4, #12
   25108:	e792      	b.n	25030 <ip_interface_connect+0xa4>
   2510a:	2409      	movs	r4, #9
   2510c:	e790      	b.n	25030 <ip_interface_connect+0xa4>
   2510e:	bf00      	nop

00025110 <ip_interface_bind>:
   25110:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25114:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25118:	b083      	sub	sp, #12
   2511a:	9300      	str	r3, [sp, #0]
   2511c:	b3b1      	cbz	r1, 2518c <ip_interface_bind+0x7c>
   2511e:	4616      	mov	r6, r2
   25120:	b3a2      	cbz	r2, 2518c <ip_interface_bind+0x7c>
   25122:	4607      	mov	r7, r0
   25124:	4688      	mov	r8, r1
   25126:	f005 fb55 	bl	2a7d4 <interface_socket_from_handle_get>
   2512a:	4605      	mov	r5, r0
   2512c:	2800      	cmp	r0, #0
   2512e:	d04a      	beq.n	251c6 <ip_interface_bind+0xb6>
   25130:	6803      	ldr	r3, [r0, #0]
   25132:	b29b      	uxth	r3, r3
   25134:	2b02      	cmp	r3, #2
   25136:	d146      	bne.n	251c6 <ip_interface_bind+0xb6>
   25138:	2100      	movs	r1, #0
   2513a:	a802      	add	r0, sp, #8
   2513c:	f840 1d04 	str.w	r1, [r0, #-4]!
   25140:	f8d5 9018 	ldr.w	r9, [r5, #24]
   25144:	f7ff fa22 	bl	2458c <rpc_ip_client_request_alloc>
   25148:	bb50      	cbnz	r0, 251a0 <ip_interface_bind+0x90>
   2514a:	f247 0305 	movw	r3, #28677	; 0x7005
   2514e:	2208      	movs	r2, #8
   25150:	9c01      	ldr	r4, [sp, #4]
   25152:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   25156:	60e3      	str	r3, [r4, #12]
   25158:	f8c4 9010 	str.w	r9, [r4, #16]
   2515c:	7260      	strb	r0, [r4, #9]
   2515e:	72a0      	strb	r0, [r4, #10]
   25160:	72e0      	strb	r0, [r4, #11]
   25162:	7222      	strb	r2, [r4, #8]
   25164:	68a3      	ldr	r3, [r4, #8]
   25166:	3304      	adds	r3, #4
   25168:	60a3      	str	r3, [r4, #8]
   2516a:	68eb      	ldr	r3, [r5, #12]
   2516c:	f8d8 2004 	ldr.w	r2, [r8, #4]
   25170:	4293      	cmp	r3, r2
   25172:	d11a      	bne.n	251aa <ip_interface_bind+0x9a>
   25174:	f898 2000 	ldrb.w	r2, [r8]
   25178:	4296      	cmp	r6, r2
   2517a:	d107      	bne.n	2518c <ip_interface_bind+0x7c>
   2517c:	2b02      	cmp	r3, #2
   2517e:	f104 0018 	add.w	r0, r4, #24
   25182:	d014      	beq.n	251ae <ip_interface_bind+0x9e>
   25184:	2b0a      	cmp	r3, #10
   25186:	d101      	bne.n	2518c <ip_interface_bind+0x7c>
   25188:	2e24      	cmp	r6, #36	; 0x24
   2518a:	d01e      	beq.n	251ca <ip_interface_bind+0xba>
   2518c:	2416      	movs	r4, #22
   2518e:	4620      	mov	r0, r4
   25190:	f7fa ff5c 	bl	2004c <bsd_os_errno_set>
   25194:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   25198:	4620      	mov	r0, r4
   2519a:	b003      	add	sp, #12
   2519c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   251a0:	9c01      	ldr	r4, [sp, #4]
   251a2:	2c00      	cmp	r4, #0
   251a4:	d1de      	bne.n	25164 <ip_interface_bind+0x54>
   251a6:	240c      	movs	r4, #12
   251a8:	e7f1      	b.n	2518e <ip_interface_bind+0x7e>
   251aa:	242f      	movs	r4, #47	; 0x2f
   251ac:	e7ef      	b.n	2518e <ip_interface_bind+0x7e>
   251ae:	2e10      	cmp	r6, #16
   251b0:	d1ec      	bne.n	2518c <ip_interface_bind+0x7c>
   251b2:	2204      	movs	r2, #4
   251b4:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   251b8:	f108 010c 	add.w	r1, r8, #12
   251bc:	82e2      	strh	r2, [r4, #22]
   251be:	82a3      	strh	r3, [r4, #20]
   251c0:	f013 feff 	bl	38fc2 <memcpy>
   251c4:	e00a      	b.n	251dc <ip_interface_bind+0xcc>
   251c6:	2409      	movs	r4, #9
   251c8:	e7e1      	b.n	2518e <ip_interface_bind+0x7e>
   251ca:	2210      	movs	r2, #16
   251cc:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   251d0:	eb08 0102 	add.w	r1, r8, r2
   251d4:	82e2      	strh	r2, [r4, #22]
   251d6:	82a3      	strh	r3, [r4, #20]
   251d8:	f013 fef3 	bl	38fc2 <memcpy>
   251dc:	68a3      	ldr	r3, [r4, #8]
   251de:	8ae2      	ldrh	r2, [r4, #22]
   251e0:	f247 0105 	movw	r1, #28677	; 0x7005
   251e4:	4413      	add	r3, r2
   251e6:	60a3      	str	r3, [r4, #8]
   251e8:	682b      	ldr	r3, [r5, #0]
   251ea:	4620      	mov	r0, r4
   251ec:	0c1b      	lsrs	r3, r3, #16
   251ee:	041b      	lsls	r3, r3, #16
   251f0:	f043 0303 	orr.w	r3, r3, #3
   251f4:	602b      	str	r3, [r5, #0]
   251f6:	682e      	ldr	r6, [r5, #0]
   251f8:	f7ff f9dc 	bl	245b4 <rpc_ip_client_request_send>
   251fc:	4680      	mov	r8, r0
   251fe:	b978      	cbnz	r0, 25220 <ip_interface_bind+0x110>
   25200:	466b      	mov	r3, sp
   25202:	f64f 72ff 	movw	r2, #65535	; 0xffff
   25206:	2104      	movs	r1, #4
   25208:	4638      	mov	r0, r7
   2520a:	f005 fa6f 	bl	2a6ec <interface_socket_wait>
   2520e:	4604      	mov	r4, r0
   25210:	b1a0      	cbz	r0, 2523c <ip_interface_bind+0x12c>
   25212:	682b      	ldr	r3, [r5, #0]
   25214:	0c1b      	lsrs	r3, r3, #16
   25216:	041b      	lsls	r3, r3, #16
   25218:	f043 0302 	orr.w	r3, r3, #2
   2521c:	602b      	str	r3, [r5, #0]
   2521e:	e7b6      	b.n	2518e <ip_interface_bind+0x7e>
   25220:	6820      	ldr	r0, [r4, #0]
   25222:	b108      	cbz	r0, 25228 <ip_interface_bind+0x118>
   25224:	f7ff f9e4 	bl	245f0 <rpc_ip_client_data_free>
   25228:	0c36      	lsrs	r6, r6, #16
   2522a:	0436      	lsls	r6, r6, #16
   2522c:	4620      	mov	r0, r4
   2522e:	f046 0602 	orr.w	r6, r6, #2
   25232:	f7ff f9d5 	bl	245e0 <rpc_ip_client_message_free>
   25236:	2423      	movs	r4, #35	; 0x23
   25238:	602e      	str	r6, [r5, #0]
   2523a:	e7a8      	b.n	2518e <ip_interface_bind+0x7e>
   2523c:	4638      	mov	r0, r7
   2523e:	f005 fac9 	bl	2a7d4 <interface_socket_from_handle_get>
   25242:	2800      	cmp	r0, #0
   25244:	d0a8      	beq.n	25198 <ip_interface_bind+0x88>
   25246:	6844      	ldr	r4, [r0, #4]
   25248:	2c00      	cmp	r4, #0
   2524a:	d0a5      	beq.n	25198 <ip_interface_bind+0x88>
   2524c:	f8c0 8004 	str.w	r8, [r0, #4]
   25250:	e7df      	b.n	25212 <ip_interface_bind+0x102>
   25252:	bf00      	nop

00025254 <ip_interface_listen>:
   25254:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2525c:	b082      	sub	sp, #8
   2525e:	4606      	mov	r6, r0
   25260:	9300      	str	r3, [sp, #0]
   25262:	f005 fab7 	bl	2a7d4 <interface_socket_from_handle_get>
   25266:	2800      	cmp	r0, #0
   25268:	d066      	beq.n	25338 <ip_interface_listen+0xe4>
   2526a:	6803      	ldr	r3, [r0, #0]
   2526c:	4605      	mov	r5, r0
   2526e:	b29b      	uxth	r3, r3
   25270:	2b04      	cmp	r3, #4
   25272:	d161      	bne.n	25338 <ip_interface_listen+0xe4>
   25274:	2100      	movs	r1, #0
   25276:	4a32      	ldr	r2, [pc, #200]	; (25340 <ip_interface_listen+0xec>)
   25278:	4630      	mov	r0, r6
   2527a:	f005 f9ff 	bl	2a67c <interface_socket_packet_handler_update>
   2527e:	4601      	mov	r1, r0
   25280:	2800      	cmp	r0, #0
   25282:	d15b      	bne.n	2533c <ip_interface_listen+0xe8>
   25284:	a802      	add	r0, sp, #8
   25286:	f840 1d04 	str.w	r1, [r0, #-4]!
   2528a:	69af      	ldr	r7, [r5, #24]
   2528c:	f7ff f97e 	bl	2458c <rpc_ip_client_request_alloc>
   25290:	bba0      	cbnz	r0, 252fc <ip_interface_listen+0xa8>
   25292:	f247 0308 	movw	r3, #28680	; 0x7008
   25296:	2208      	movs	r2, #8
   25298:	9c01      	ldr	r4, [sp, #4]
   2529a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   2529e:	60e3      	str	r3, [r4, #12]
   252a0:	6127      	str	r7, [r4, #16]
   252a2:	7260      	strb	r0, [r4, #9]
   252a4:	72a0      	strb	r0, [r4, #10]
   252a6:	72e0      	strb	r0, [r4, #11]
   252a8:	7222      	strb	r2, [r4, #8]
   252aa:	68a3      	ldr	r3, [r4, #8]
   252ac:	f247 0108 	movw	r1, #28680	; 0x7008
   252b0:	3304      	adds	r3, #4
   252b2:	60a3      	str	r3, [r4, #8]
   252b4:	682b      	ldr	r3, [r5, #0]
   252b6:	4620      	mov	r0, r4
   252b8:	0c1b      	lsrs	r3, r3, #16
   252ba:	041b      	lsls	r3, r3, #16
   252bc:	f043 0306 	orr.w	r3, r3, #6
   252c0:	602b      	str	r3, [r5, #0]
   252c2:	682f      	ldr	r7, [r5, #0]
   252c4:	f7ff f976 	bl	245b4 <rpc_ip_client_request_send>
   252c8:	4680      	mov	r8, r0
   252ca:	b9e0      	cbnz	r0, 25306 <ip_interface_listen+0xb2>
   252cc:	466b      	mov	r3, sp
   252ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
   252d2:	2107      	movs	r1, #7
   252d4:	4630      	mov	r0, r6
   252d6:	f005 fa09 	bl	2a6ec <interface_socket_wait>
   252da:	4604      	mov	r4, r0
   252dc:	b308      	cbz	r0, 25322 <ip_interface_listen+0xce>
   252de:	682b      	ldr	r3, [r5, #0]
   252e0:	0c1b      	lsrs	r3, r3, #16
   252e2:	041b      	lsls	r3, r3, #16
   252e4:	f043 0304 	orr.w	r3, r3, #4
   252e8:	602b      	str	r3, [r5, #0]
   252ea:	4620      	mov	r0, r4
   252ec:	f7fa feae 	bl	2004c <bsd_os_errno_set>
   252f0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   252f4:	4620      	mov	r0, r4
   252f6:	b002      	add	sp, #8
   252f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   252fc:	9c01      	ldr	r4, [sp, #4]
   252fe:	2c00      	cmp	r4, #0
   25300:	d1d3      	bne.n	252aa <ip_interface_listen+0x56>
   25302:	240c      	movs	r4, #12
   25304:	e7f1      	b.n	252ea <ip_interface_listen+0x96>
   25306:	6820      	ldr	r0, [r4, #0]
   25308:	b108      	cbz	r0, 2530e <ip_interface_listen+0xba>
   2530a:	f7ff f971 	bl	245f0 <rpc_ip_client_data_free>
   2530e:	0c3f      	lsrs	r7, r7, #16
   25310:	043f      	lsls	r7, r7, #16
   25312:	4620      	mov	r0, r4
   25314:	f047 0704 	orr.w	r7, r7, #4
   25318:	f7ff f962 	bl	245e0 <rpc_ip_client_message_free>
   2531c:	2423      	movs	r4, #35	; 0x23
   2531e:	602f      	str	r7, [r5, #0]
   25320:	e7e3      	b.n	252ea <ip_interface_listen+0x96>
   25322:	4630      	mov	r0, r6
   25324:	f005 fa56 	bl	2a7d4 <interface_socket_from_handle_get>
   25328:	2800      	cmp	r0, #0
   2532a:	d0e3      	beq.n	252f4 <ip_interface_listen+0xa0>
   2532c:	6844      	ldr	r4, [r0, #4]
   2532e:	2c00      	cmp	r4, #0
   25330:	d0e0      	beq.n	252f4 <ip_interface_listen+0xa0>
   25332:	f8c0 8004 	str.w	r8, [r0, #4]
   25336:	e7d2      	b.n	252de <ip_interface_listen+0x8a>
   25338:	2409      	movs	r4, #9
   2533a:	e7d6      	b.n	252ea <ip_interface_listen+0x96>
   2533c:	2423      	movs	r4, #35	; 0x23
   2533e:	e7d4      	b.n	252ea <ip_interface_listen+0x96>
   25340:	00024601 	.word	0x00024601

00025344 <ip_interface_accept>:
   25344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25348:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2534c:	2500      	movs	r5, #0
   2534e:	b087      	sub	sp, #28
   25350:	460f      	mov	r7, r1
   25352:	4690      	mov	r8, r2
   25354:	e9cd 5303 	strd	r5, r3, [sp, #12]
   25358:	4606      	mov	r6, r0
   2535a:	f005 fa3b 	bl	2a7d4 <interface_socket_from_handle_get>
   2535e:	4604      	mov	r4, r0
   25360:	2800      	cmp	r0, #0
   25362:	f000 8123 	beq.w	255ac <ip_interface_accept+0x268>
   25366:	6803      	ldr	r3, [r0, #0]
   25368:	b29b      	uxth	r3, r3
   2536a:	2b07      	cmp	r3, #7
   2536c:	d10a      	bne.n	25384 <ip_interface_accept+0x40>
   2536e:	6803      	ldr	r3, [r0, #0]
   25370:	6805      	ldr	r5, [r0, #0]
   25372:	00db      	lsls	r3, r3, #3
   25374:	d416      	bmi.n	253a4 <ip_interface_accept+0x60>
   25376:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   2537a:	d019      	beq.n	253b0 <ip_interface_accept+0x6c>
   2537c:	6805      	ldr	r5, [r0, #0]
   2537e:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   25382:	d124      	bne.n	253ce <ip_interface_accept+0x8a>
   25384:	f04f 0909 	mov.w	r9, #9
   25388:	9b03      	ldr	r3, [sp, #12]
   2538a:	b113      	cbz	r3, 25392 <ip_interface_accept+0x4e>
   2538c:	4628      	mov	r0, r5
   2538e:	f005 f95f 	bl	2a650 <interface_socket_free>
   25392:	4648      	mov	r0, r9
   25394:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   25398:	f7fa fe58 	bl	2004c <bsd_os_errno_set>
   2539c:	4648      	mov	r0, r9
   2539e:	b007      	add	sp, #28
   253a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   253a4:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   253a8:	d170      	bne.n	2548c <ip_interface_accept+0x148>
   253aa:	f04f 0923 	mov.w	r9, #35	; 0x23
   253ae:	e7eb      	b.n	25388 <ip_interface_accept+0x44>
   253b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   253b4:	ab04      	add	r3, sp, #16
   253b6:	4611      	mov	r1, r2
   253b8:	4630      	mov	r0, r6
   253ba:	f005 f997 	bl	2a6ec <interface_socket_wait>
   253be:	4681      	mov	r9, r0
   253c0:	2800      	cmp	r0, #0
   253c2:	f000 8082 	beq.w	254ca <ip_interface_accept+0x186>
   253c6:	6825      	ldr	r5, [r4, #0]
   253c8:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   253cc:	d0dc      	beq.n	25388 <ip_interface_accept+0x44>
   253ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   253d2:	2300      	movs	r3, #0
   253d4:	e9cd 0300 	strd	r0, r3, [sp]
   253d8:	4a78      	ldr	r2, [pc, #480]	; (255bc <ip_interface_accept+0x278>)
   253da:	6921      	ldr	r1, [r4, #16]
   253dc:	a803      	add	r0, sp, #12
   253de:	f005 f8d3 	bl	2a588 <interface_socket_allocate>
   253e2:	9b03      	ldr	r3, [sp, #12]
   253e4:	4605      	mov	r5, r0
   253e6:	2b00      	cmp	r3, #0
   253e8:	f000 80e4 	beq.w	255b4 <ip_interface_accept+0x270>
   253ec:	2100      	movs	r1, #0
   253ee:	6962      	ldr	r2, [r4, #20]
   253f0:	a806      	add	r0, sp, #24
   253f2:	615a      	str	r2, [r3, #20]
   253f4:	68e2      	ldr	r2, [r4, #12]
   253f6:	f840 1d04 	str.w	r1, [r0, #-4]!
   253fa:	60da      	str	r2, [r3, #12]
   253fc:	6922      	ldr	r2, [r4, #16]
   253fe:	611a      	str	r2, [r3, #16]
   25400:	f8d4 9018 	ldr.w	r9, [r4, #24]
   25404:	f7ff f8c2 	bl	2458c <rpc_ip_client_request_alloc>
   25408:	2800      	cmp	r0, #0
   2540a:	d146      	bne.n	2549a <ip_interface_accept+0x156>
   2540c:	f247 030c 	movw	r3, #28684	; 0x700c
   25410:	2108      	movs	r1, #8
   25412:	f8dd b014 	ldr.w	fp, [sp, #20]
   25416:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   2541a:	f8cb 300c 	str.w	r3, [fp, #12]
   2541e:	f8cb 9010 	str.w	r9, [fp, #16]
   25422:	f88b 0009 	strb.w	r0, [fp, #9]
   25426:	f88b 000a 	strb.w	r0, [fp, #10]
   2542a:	f88b 000b 	strb.w	r0, [fp, #11]
   2542e:	f88b 1008 	strb.w	r1, [fp, #8]
   25432:	6823      	ldr	r3, [r4, #0]
   25434:	f247 010c 	movw	r1, #28684	; 0x700c
   25438:	0c1b      	lsrs	r3, r3, #16
   2543a:	041b      	lsls	r3, r3, #16
   2543c:	f043 0308 	orr.w	r3, r3, #8
   25440:	6023      	str	r3, [r4, #0]
   25442:	4658      	mov	r0, fp
   25444:	f8d4 9000 	ldr.w	r9, [r4]
   25448:	f7ff f8b4 	bl	245b4 <rpc_ip_client_request_send>
   2544c:	4682      	mov	sl, r0
   2544e:	bb60      	cbnz	r0, 254aa <ip_interface_accept+0x166>
   25450:	6822      	ldr	r2, [r4, #0]
   25452:	9900      	ldr	r1, [sp, #0]
   25454:	ab04      	add	r3, sp, #16
   25456:	400a      	ands	r2, r1
   25458:	6022      	str	r2, [r4, #0]
   2545a:	2109      	movs	r1, #9
   2545c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   25460:	4630      	mov	r0, r6
   25462:	f005 f943 	bl	2a6ec <interface_socket_wait>
   25466:	4681      	mov	r9, r0
   25468:	2800      	cmp	r0, #0
   2546a:	f000 808d 	beq.w	25588 <ip_interface_accept+0x244>
   2546e:	6823      	ldr	r3, [r4, #0]
   25470:	9a01      	ldr	r2, [sp, #4]
   25472:	431a      	orrs	r2, r3
   25474:	6022      	str	r2, [r4, #0]
   25476:	6823      	ldr	r3, [r4, #0]
   25478:	0c1b      	lsrs	r3, r3, #16
   2547a:	041b      	lsls	r3, r3, #16
   2547c:	f043 0307 	orr.w	r3, r3, #7
   25480:	6023      	str	r3, [r4, #0]
   25482:	6823      	ldr	r3, [r4, #0]
   25484:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   25488:	6023      	str	r3, [r4, #0]
   2548a:	e77d      	b.n	25388 <ip_interface_accept+0x44>
   2548c:	f06f 5280 	mvn.w	r2, #268435456	; 0x10000000
   25490:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   25494:	e9cd 2300 	strd	r2, r3, [sp]
   25498:	e79e      	b.n	253d8 <ip_interface_accept+0x94>
   2549a:	f8dd b014 	ldr.w	fp, [sp, #20]
   2549e:	f04f 090c 	mov.w	r9, #12
   254a2:	f1bb 0f00 	cmp.w	fp, #0
   254a6:	d1c4      	bne.n	25432 <ip_interface_accept+0xee>
   254a8:	e76e      	b.n	25388 <ip_interface_accept+0x44>
   254aa:	f8db 0000 	ldr.w	r0, [fp]
   254ae:	b108      	cbz	r0, 254b4 <ip_interface_accept+0x170>
   254b0:	f7ff f89e 	bl	245f0 <rpc_ip_client_data_free>
   254b4:	ea4f 4919 	mov.w	r9, r9, lsr #16
   254b8:	4658      	mov	r0, fp
   254ba:	ea4f 4909 	mov.w	r9, r9, lsl #16
   254be:	f7ff f88f 	bl	245e0 <rpc_ip_client_message_free>
   254c2:	f049 0307 	orr.w	r3, r9, #7
   254c6:	6023      	str	r3, [r4, #0]
   254c8:	e76f      	b.n	253aa <ip_interface_accept+0x66>
   254ca:	4630      	mov	r0, r6
   254cc:	f005 f982 	bl	2a7d4 <interface_socket_from_handle_get>
   254d0:	b130      	cbz	r0, 254e0 <ip_interface_accept+0x19c>
   254d2:	f8d0 9004 	ldr.w	r9, [r0, #4]
   254d6:	f1b9 0f00 	cmp.w	r9, #0
   254da:	d001      	beq.n	254e0 <ip_interface_accept+0x19c>
   254dc:	6045      	str	r5, [r0, #4]
   254de:	e772      	b.n	253c6 <ip_interface_accept+0x82>
   254e0:	6823      	ldr	r3, [r4, #0]
   254e2:	03d9      	lsls	r1, r3, #15
   254e4:	f53f af73 	bmi.w	253ce <ip_interface_accept+0x8a>
   254e8:	4d35      	ldr	r5, [pc, #212]	; (255c0 <ip_interface_accept+0x27c>)
   254ea:	9903      	ldr	r1, [sp, #12]
   254ec:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   254f0:	699b      	ldr	r3, [r3, #24]
   254f2:	618b      	str	r3, [r1, #24]
   254f4:	b147      	cbz	r7, 25508 <ip_interface_accept+0x1c4>
   254f6:	68cb      	ldr	r3, [r1, #12]
   254f8:	2b0a      	cmp	r3, #10
   254fa:	d028      	beq.n	2554e <ip_interface_accept+0x20a>
   254fc:	2b02      	cmp	r3, #2
   254fe:	d103      	bne.n	25508 <ip_interface_accept+0x1c4>
   25500:	f8d8 2000 	ldr.w	r2, [r8]
   25504:	2a10      	cmp	r2, #16
   25506:	d036      	beq.n	25576 <ip_interface_accept+0x232>
   25508:	680a      	ldr	r2, [r1, #0]
   2550a:	482e      	ldr	r0, [pc, #184]	; (255c4 <ip_interface_accept+0x280>)
   2550c:	4002      	ands	r2, r0
   2550e:	f042 0205 	orr.w	r2, r2, #5
   25512:	600a      	str	r2, [r1, #0]
   25514:	9a03      	ldr	r2, [sp, #12]
   25516:	6811      	ldr	r1, [r2, #0]
   25518:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
   2551c:	6011      	str	r1, [r2, #0]
   2551e:	6811      	ldr	r1, [r2, #0]
   25520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   25524:	6011      	str	r1, [r2, #0]
   25526:	6823      	ldr	r3, [r4, #0]
   25528:	4003      	ands	r3, r0
   2552a:	f043 0307 	orr.w	r3, r3, #7
   2552e:	6023      	str	r3, [r4, #0]
   25530:	6823      	ldr	r3, [r4, #0]
   25532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   25536:	6023      	str	r3, [r4, #0]
   25538:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   2553c:	f7ff f850 	bl	245e0 <rpc_ip_client_message_free>
   25540:	2300      	movs	r3, #0
   25542:	4648      	mov	r0, r9
   25544:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
   25548:	b007      	add	sp, #28
   2554a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2554e:	f8d8 2000 	ldr.w	r2, [r8]
   25552:	2a24      	cmp	r2, #36	; 0x24
   25554:	d1d8      	bne.n	25508 <ip_interface_accept+0x1c4>
   25556:	703a      	strb	r2, [r7, #0]
   25558:	2210      	movs	r2, #16
   2555a:	607b      	str	r3, [r7, #4]
   2555c:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   25560:	f107 0010 	add.w	r0, r7, #16
   25564:	8b9b      	ldrh	r3, [r3, #28]
   25566:	813b      	strh	r3, [r7, #8]
   25568:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
   2556c:	3120      	adds	r1, #32
   2556e:	f013 fd28 	bl	38fc2 <memcpy>
   25572:	9903      	ldr	r1, [sp, #12]
   25574:	e7c8      	b.n	25508 <ip_interface_accept+0x1c4>
   25576:	703a      	strb	r2, [r7, #0]
   25578:	607b      	str	r3, [r7, #4]
   2557a:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   2557e:	f107 000c 	add.w	r0, r7, #12
   25582:	8b9b      	ldrh	r3, [r3, #28]
   25584:	2204      	movs	r2, #4
   25586:	e7ee      	b.n	25566 <ip_interface_accept+0x222>
   25588:	4630      	mov	r0, r6
   2558a:	f005 f923 	bl	2a7d4 <interface_socket_from_handle_get>
   2558e:	b138      	cbz	r0, 255a0 <ip_interface_accept+0x25c>
   25590:	f8d0 9004 	ldr.w	r9, [r0, #4]
   25594:	f1b9 0f00 	cmp.w	r9, #0
   25598:	d002      	beq.n	255a0 <ip_interface_accept+0x25c>
   2559a:	f8c0 a004 	str.w	sl, [r0, #4]
   2559e:	e766      	b.n	2546e <ip_interface_accept+0x12a>
   255a0:	6823      	ldr	r3, [r4, #0]
   255a2:	9a01      	ldr	r2, [sp, #4]
   255a4:	46a9      	mov	r9, r5
   255a6:	4313      	orrs	r3, r2
   255a8:	6023      	str	r3, [r4, #0]
   255aa:	e79d      	b.n	254e8 <ip_interface_accept+0x1a4>
   255ac:	4605      	mov	r5, r0
   255ae:	f04f 0909 	mov.w	r9, #9
   255b2:	e6e9      	b.n	25388 <ip_interface_accept+0x44>
   255b4:	f04f 090c 	mov.w	r9, #12
   255b8:	e6eb      	b.n	25392 <ip_interface_accept+0x4e>
   255ba:	bf00      	nop
   255bc:	00024601 	.word	0x00024601
   255c0:	200226e0 	.word	0x200226e0
   255c4:	ffff0000 	.word	0xffff0000

000255c8 <ip_interface_setopt>:
   255c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   255cc:	2901      	cmp	r1, #1
   255ce:	b086      	sub	sp, #24
   255d0:	f040 80df 	bne.w	25792 <ip_interface_setopt+0x1ca>
   255d4:	4616      	mov	r6, r2
   255d6:	461d      	mov	r5, r3
   255d8:	4607      	mov	r7, r0
   255da:	f005 f8fb 	bl	2a7d4 <interface_socket_from_handle_get>
   255de:	4604      	mov	r4, r0
   255e0:	2800      	cmp	r0, #0
   255e2:	f000 80f1 	beq.w	257c8 <ip_interface_setopt+0x200>
   255e6:	f1a6 0119 	sub.w	r1, r6, #25
   255ea:	290f      	cmp	r1, #15
   255ec:	f200 80bd 	bhi.w	2576a <ip_interface_setopt+0x1a2>
   255f0:	e8df f001 	tbb	[pc, r1]
   255f4:	bbbbbb17 	.word	0xbbbbbb17
   255f8:	ab9b8bbb 	.word	0xab9b8bbb
   255fc:	bbbbbbbb 	.word	0xbbbbbbbb
   25600:	08bbbbbb 	.word	0x08bbbbbb
   25604:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   25606:	4602      	mov	r2, r0
   25608:	e9cd 5300 	strd	r5, r3, [sp]
   2560c:	f241 0104 	movw	r1, #4100	; 0x1004
   25610:	463b      	mov	r3, r7
   25612:	2008      	movs	r0, #8
   25614:	f7ff f800 	bl	24618 <setopt_check_and_send_int>
   25618:	4605      	mov	r5, r0
   2561a:	4628      	mov	r0, r5
   2561c:	b006      	add	sp, #24
   2561e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25622:	2d00      	cmp	r5, #0
   25624:	f000 80c3 	beq.w	257ae <ip_interface_setopt+0x1e6>
   25628:	4628      	mov	r0, r5
   2562a:	f7ec fd29 	bl	12080 <strlen>
   2562e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   25630:	4298      	cmp	r0, r3
   25632:	f040 80bc 	bne.w	257ae <ip_interface_setopt+0x1e6>
   25636:	6823      	ldr	r3, [r4, #0]
   25638:	b29b      	uxth	r3, r3
   2563a:	2b02      	cmp	r3, #2
   2563c:	f040 80af 	bne.w	2579e <ip_interface_setopt+0x1d6>
   25640:	4629      	mov	r1, r5
   25642:	68e0      	ldr	r0, [r4, #12]
   25644:	f002 fe3a 	bl	282bc <pdn_interface_pdn_id_get>
   25648:	9003      	str	r0, [sp, #12]
   2564a:	3001      	adds	r0, #1
   2564c:	bf08      	it	eq
   2564e:	2516      	moveq	r5, #22
   25650:	f000 8099 	beq.w	25786 <ip_interface_setopt+0x1be>
   25654:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25658:	9304      	str	r3, [sp, #16]
   2565a:	6823      	ldr	r3, [r4, #0]
   2565c:	0259      	lsls	r1, r3, #9
   2565e:	f100 8091 	bmi.w	25784 <ip_interface_setopt+0x1bc>
   25662:	6823      	ldr	r3, [r4, #0]
   25664:	021a      	lsls	r2, r3, #8
   25666:	f100 808d 	bmi.w	25784 <ip_interface_setopt+0x1bc>
   2566a:	6823      	ldr	r3, [r4, #0]
   2566c:	01db      	lsls	r3, r3, #7
   2566e:	f100 8089 	bmi.w	25784 <ip_interface_setopt+0x1bc>
   25672:	6823      	ldr	r3, [r4, #0]
   25674:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
   25678:	f040 8084 	bne.w	25784 <ip_interface_setopt+0x1bc>
   2567c:	6826      	ldr	r6, [r4, #0]
   2567e:	6822      	ldr	r2, [r4, #0]
   25680:	a806      	add	r0, sp, #24
   25682:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   25686:	6022      	str	r2, [r4, #0]
   25688:	2104      	movs	r1, #4
   2568a:	f840 3d04 	str.w	r3, [r0, #-4]!
   2568e:	f8d4 8018 	ldr.w	r8, [r4, #24]
   25692:	f7fe ff7b 	bl	2458c <rpc_ip_client_request_alloc>
   25696:	2800      	cmp	r0, #0
   25698:	f040 8083 	bne.w	257a2 <ip_interface_setopt+0x1da>
   2569c:	f247 0303 	movw	r3, #28675	; 0x7003
   256a0:	2208      	movs	r2, #8
   256a2:	9d05      	ldr	r5, [sp, #20]
   256a4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   256a8:	60eb      	str	r3, [r5, #12]
   256aa:	f8c5 8010 	str.w	r8, [r5, #16]
   256ae:	7268      	strb	r0, [r5, #9]
   256b0:	72a8      	strb	r0, [r5, #10]
   256b2:	72e8      	strb	r0, [r5, #11]
   256b4:	722a      	strb	r2, [r5, #8]
   256b6:	f04f 0c08 	mov.w	ip, #8
   256ba:	2300      	movs	r3, #0
   256bc:	2010      	movs	r0, #16
   256be:	2130      	movs	r1, #48	; 0x30
   256c0:	68aa      	ldr	r2, [r5, #8]
   256c2:	756b      	strb	r3, [r5, #21]
   256c4:	4462      	add	r2, ip
   256c6:	60aa      	str	r2, [r5, #8]
   256c8:	75ab      	strb	r3, [r5, #22]
   256ca:	75eb      	strb	r3, [r5, #23]
   256cc:	76ab      	strb	r3, [r5, #26]
   256ce:	76eb      	strb	r3, [r5, #27]
   256d0:	f885 c014 	strb.w	ip, [r5, #20]
   256d4:	7628      	strb	r0, [r5, #24]
   256d6:	7669      	strb	r1, [r5, #25]
   256d8:	2204      	movs	r2, #4
   256da:	a903      	add	r1, sp, #12
   256dc:	6828      	ldr	r0, [r5, #0]
   256de:	f013 fc70 	bl	38fc2 <memcpy>
   256e2:	f247 0103 	movw	r1, #28675	; 0x7003
   256e6:	4628      	mov	r0, r5
   256e8:	f7fe ff64 	bl	245b4 <rpc_ip_client_request_send>
   256ec:	4680      	mov	r8, r0
   256ee:	2800      	cmp	r0, #0
   256f0:	d15f      	bne.n	257b2 <ip_interface_setopt+0x1ea>
   256f2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   256f6:	ab04      	add	r3, sp, #16
   256f8:	4611      	mov	r1, r2
   256fa:	4638      	mov	r0, r7
   256fc:	f004 fff6 	bl	2a6ec <interface_socket_wait>
   25700:	4605      	mov	r5, r0
   25702:	2800      	cmp	r0, #0
   25704:	d066      	beq.n	257d4 <ip_interface_setopt+0x20c>
   25706:	6026      	str	r6, [r4, #0]
   25708:	e03d      	b.n	25786 <ip_interface_setopt+0x1be>
   2570a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2570c:	4602      	mov	r2, r0
   2570e:	e9cd 5300 	strd	r5, r3, [sp]
   25712:	f248 0101 	movw	r1, #32769	; 0x8001
   25716:	463b      	mov	r3, r7
   25718:	f44f 7000 	mov.w	r0, #512	; 0x200
   2571c:	f7fe ff7c 	bl	24618 <setopt_check_and_send_int>
   25720:	4605      	mov	r5, r0
   25722:	4628      	mov	r0, r5
   25724:	b006      	add	sp, #24
   25726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2572a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2572c:	4602      	mov	r2, r0
   2572e:	e9cd 5300 	strd	r5, r3, [sp]
   25732:	f244 0110 	movw	r1, #16400	; 0x4010
   25736:	463b      	mov	r3, r7
   25738:	f44f 7000 	mov.w	r0, #512	; 0x200
   2573c:	f7fe ff6c 	bl	24618 <setopt_check_and_send_int>
   25740:	4605      	mov	r5, r0
   25742:	4628      	mov	r0, r5
   25744:	b006      	add	sp, #24
   25746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2574a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2574c:	4602      	mov	r2, r0
   2574e:	e9cd 5300 	strd	r5, r3, [sp]
   25752:	f246 0110 	movw	r1, #24592	; 0x6010
   25756:	463b      	mov	r3, r7
   25758:	f44f 7000 	mov.w	r0, #512	; 0x200
   2575c:	f7fe ff5c 	bl	24618 <setopt_check_and_send_int>
   25760:	4605      	mov	r5, r0
   25762:	4628      	mov	r0, r5
   25764:	b006      	add	sp, #24
   25766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2576a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2576c:	4632      	mov	r2, r6
   2576e:	9300      	str	r3, [sp, #0]
   25770:	4638      	mov	r0, r7
   25772:	462b      	mov	r3, r5
   25774:	2101      	movs	r1, #1
   25776:	f005 f855 	bl	2a824 <interface_socket_setopt>
   2577a:	4605      	mov	r5, r0
   2577c:	4628      	mov	r0, r5
   2577e:	b006      	add	sp, #24
   25780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25784:	2523      	movs	r5, #35	; 0x23
   25786:	4628      	mov	r0, r5
   25788:	f7fa fc60 	bl	2004c <bsd_os_errno_set>
   2578c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   25790:	e743      	b.n	2561a <ip_interface_setopt+0x52>
   25792:	202a      	movs	r0, #42	; 0x2a
   25794:	f7fa fc5a 	bl	2004c <bsd_os_errno_set>
   25798:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2579c:	e73d      	b.n	2561a <ip_interface_setopt+0x52>
   2579e:	2509      	movs	r5, #9
   257a0:	e7f1      	b.n	25786 <ip_interface_setopt+0x1be>
   257a2:	9d05      	ldr	r5, [sp, #20]
   257a4:	2d00      	cmp	r5, #0
   257a6:	d186      	bne.n	256b6 <ip_interface_setopt+0xee>
   257a8:	6026      	str	r6, [r4, #0]
   257aa:	250c      	movs	r5, #12
   257ac:	e7eb      	b.n	25786 <ip_interface_setopt+0x1be>
   257ae:	250e      	movs	r5, #14
   257b0:	e7e9      	b.n	25786 <ip_interface_setopt+0x1be>
   257b2:	6828      	ldr	r0, [r5, #0]
   257b4:	b108      	cbz	r0, 257ba <ip_interface_setopt+0x1f2>
   257b6:	f7fe ff1b 	bl	245f0 <rpc_ip_client_data_free>
   257ba:	4628      	mov	r0, r5
   257bc:	f7fe ff10 	bl	245e0 <rpc_ip_client_message_free>
   257c0:	2523      	movs	r5, #35	; 0x23
   257c2:	6026      	str	r6, [r4, #0]
   257c4:	6026      	str	r6, [r4, #0]
   257c6:	e7de      	b.n	25786 <ip_interface_setopt+0x1be>
   257c8:	2009      	movs	r0, #9
   257ca:	f7fa fc3f 	bl	2004c <bsd_os_errno_set>
   257ce:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   257d2:	e722      	b.n	2561a <ip_interface_setopt+0x52>
   257d4:	4638      	mov	r0, r7
   257d6:	f004 fffd 	bl	2a7d4 <interface_socket_from_handle_get>
   257da:	b120      	cbz	r0, 257e6 <ip_interface_setopt+0x21e>
   257dc:	6845      	ldr	r5, [r0, #4]
   257de:	b115      	cbz	r5, 257e6 <ip_interface_setopt+0x21e>
   257e0:	f8c0 8004 	str.w	r8, [r0, #4]
   257e4:	e78f      	b.n	25706 <ip_interface_setopt+0x13e>
   257e6:	6026      	str	r6, [r4, #0]
   257e8:	e717      	b.n	2561a <ip_interface_setopt+0x52>
   257ea:	bf00      	nop

000257ec <ip_interface_getopt>:
   257ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   257f0:	2901      	cmp	r1, #1
   257f2:	b085      	sub	sp, #20
   257f4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   257f6:	f040 8158 	bne.w	25aaa <ip_interface_getopt+0x2be>
   257fa:	4616      	mov	r6, r2
   257fc:	461f      	mov	r7, r3
   257fe:	4680      	mov	r8, r0
   25800:	f004 ffe8 	bl	2a7d4 <interface_socket_from_handle_get>
   25804:	4604      	mov	r4, r0
   25806:	2800      	cmp	r0, #0
   25808:	f000 819d 	beq.w	25b46 <ip_interface_getopt+0x35a>
   2580c:	f1a6 031e 	sub.w	r3, r6, #30
   25810:	2b0a      	cmp	r3, #10
   25812:	f200 8133 	bhi.w	25a7c <ip_interface_getopt+0x290>
   25816:	e8df f013 	tbh	[pc, r3, lsl #1]
   2581a:	0055      	.short	0x0055
   2581c:	00d60096 	.word	0x00d60096
   25820:	01310131 	.word	0x01310131
   25824:	01310131 	.word	0x01310131
   25828:	01310131 	.word	0x01310131
   2582c:	000b0131 	.word	0x000b0131
   25830:	2d00      	cmp	r5, #0
   25832:	f000 8134 	beq.w	25a9e <ip_interface_getopt+0x2b2>
   25836:	6829      	ldr	r1, [r5, #0]
   25838:	2904      	cmp	r1, #4
   2583a:	f040 8130 	bne.w	25a9e <ip_interface_getopt+0x2b2>
   2583e:	2f00      	cmp	r7, #0
   25840:	f000 812d 	beq.w	25a9e <ip_interface_getopt+0x2b2>
   25844:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25848:	9302      	str	r3, [sp, #8]
   2584a:	6803      	ldr	r3, [r0, #0]
   2584c:	0258      	lsls	r0, r3, #9
   2584e:	f100 811f 	bmi.w	25a90 <ip_interface_getopt+0x2a4>
   25852:	6823      	ldr	r3, [r4, #0]
   25854:	021a      	lsls	r2, r3, #8
   25856:	f100 811b 	bmi.w	25a90 <ip_interface_getopt+0x2a4>
   2585a:	6823      	ldr	r3, [r4, #0]
   2585c:	01db      	lsls	r3, r3, #7
   2585e:	f100 8117 	bmi.w	25a90 <ip_interface_getopt+0x2a4>
   25862:	6823      	ldr	r3, [r4, #0]
   25864:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
   25868:	f040 8112 	bne.w	25a90 <ip_interface_getopt+0x2a4>
   2586c:	6826      	ldr	r6, [r4, #0]
   2586e:	6822      	ldr	r2, [r4, #0]
   25870:	a804      	add	r0, sp, #16
   25872:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   25876:	6022      	str	r2, [r4, #0]
   25878:	f8d4 9018 	ldr.w	r9, [r4, #24]
   2587c:	f840 3d04 	str.w	r3, [r0, #-4]!
   25880:	f7fe fe84 	bl	2458c <rpc_ip_client_request_alloc>
   25884:	2800      	cmp	r0, #0
   25886:	f040 812b 	bne.w	25ae0 <ip_interface_getopt+0x2f4>
   2588a:	f247 0304 	movw	r3, #28676	; 0x7004
   2588e:	2208      	movs	r2, #8
   25890:	9d03      	ldr	r5, [sp, #12]
   25892:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   25896:	60eb      	str	r3, [r5, #12]
   25898:	f8c5 9010 	str.w	r9, [r5, #16]
   2589c:	7268      	strb	r0, [r5, #9]
   2589e:	72a8      	strb	r0, [r5, #10]
   258a0:	72e8      	strb	r0, [r5, #11]
   258a2:	722a      	strb	r2, [r5, #8]
   258a4:	f04f 0c08 	mov.w	ip, #8
   258a8:	2300      	movs	r3, #0
   258aa:	68aa      	ldr	r2, [r5, #8]
   258ac:	2004      	movs	r0, #4
   258ae:	4462      	add	r2, ip
   258b0:	2110      	movs	r1, #16
   258b2:	756b      	strb	r3, [r5, #21]
   258b4:	60aa      	str	r2, [r5, #8]
   258b6:	75ab      	strb	r3, [r5, #22]
   258b8:	75eb      	strb	r3, [r5, #23]
   258ba:	76ab      	strb	r3, [r5, #26]
   258bc:	76eb      	strb	r3, [r5, #27]
   258be:	f885 c014 	strb.w	ip, [r5, #20]
   258c2:	e0c1      	b.n	25a48 <ip_interface_getopt+0x25c>
   258c4:	2d00      	cmp	r5, #0
   258c6:	f000 80ea 	beq.w	25a9e <ip_interface_getopt+0x2b2>
   258ca:	6829      	ldr	r1, [r5, #0]
   258cc:	2904      	cmp	r1, #4
   258ce:	f040 80e6 	bne.w	25a9e <ip_interface_getopt+0x2b2>
   258d2:	2f00      	cmp	r7, #0
   258d4:	f000 80e3 	beq.w	25a9e <ip_interface_getopt+0x2b2>
   258d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   258dc:	9302      	str	r3, [sp, #8]
   258de:	6803      	ldr	r3, [r0, #0]
   258e0:	025a      	lsls	r2, r3, #9
   258e2:	f100 80d5 	bmi.w	25a90 <ip_interface_getopt+0x2a4>
   258e6:	6803      	ldr	r3, [r0, #0]
   258e8:	021b      	lsls	r3, r3, #8
   258ea:	f100 80d1 	bmi.w	25a90 <ip_interface_getopt+0x2a4>
   258ee:	6803      	ldr	r3, [r0, #0]
   258f0:	01de      	lsls	r6, r3, #7
   258f2:	f100 80cd 	bmi.w	25a90 <ip_interface_getopt+0x2a4>
   258f6:	6803      	ldr	r3, [r0, #0]
   258f8:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
   258fc:	f040 80c8 	bne.w	25a90 <ip_interface_getopt+0x2a4>
   25900:	6826      	ldr	r6, [r4, #0]
   25902:	6822      	ldr	r2, [r4, #0]
   25904:	a804      	add	r0, sp, #16
   25906:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   2590a:	6022      	str	r2, [r4, #0]
   2590c:	f8d4 9018 	ldr.w	r9, [r4, #24]
   25910:	f840 3d04 	str.w	r3, [r0, #-4]!
   25914:	f7fe fe3a 	bl	2458c <rpc_ip_client_request_alloc>
   25918:	2800      	cmp	r0, #0
   2591a:	f040 80da 	bne.w	25ad2 <ip_interface_getopt+0x2e6>
   2591e:	f247 0304 	movw	r3, #28676	; 0x7004
   25922:	2208      	movs	r2, #8
   25924:	9d03      	ldr	r5, [sp, #12]
   25926:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   2592a:	60eb      	str	r3, [r5, #12]
   2592c:	f8c5 9010 	str.w	r9, [r5, #16]
   25930:	7268      	strb	r0, [r5, #9]
   25932:	72a8      	strb	r0, [r5, #10]
   25934:	72e8      	strb	r0, [r5, #11]
   25936:	722a      	strb	r2, [r5, #8]
   25938:	2300      	movs	r3, #0
   2593a:	f04f 0c02 	mov.w	ip, #2
   2593e:	2001      	movs	r0, #1
   25940:	f06f 017f 	mvn.w	r1, #127	; 0x7f
   25944:	e076      	b.n	25a34 <ip_interface_getopt+0x248>
   25946:	2d00      	cmp	r5, #0
   25948:	f000 80a9 	beq.w	25a9e <ip_interface_getopt+0x2b2>
   2594c:	6829      	ldr	r1, [r5, #0]
   2594e:	2904      	cmp	r1, #4
   25950:	f040 80a5 	bne.w	25a9e <ip_interface_getopt+0x2b2>
   25954:	2f00      	cmp	r7, #0
   25956:	f000 80a2 	beq.w	25a9e <ip_interface_getopt+0x2b2>
   2595a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2595e:	9302      	str	r3, [sp, #8]
   25960:	6803      	ldr	r3, [r0, #0]
   25962:	025d      	lsls	r5, r3, #9
   25964:	f100 8094 	bmi.w	25a90 <ip_interface_getopt+0x2a4>
   25968:	6803      	ldr	r3, [r0, #0]
   2596a:	0218      	lsls	r0, r3, #8
   2596c:	f100 8090 	bmi.w	25a90 <ip_interface_getopt+0x2a4>
   25970:	6823      	ldr	r3, [r4, #0]
   25972:	01da      	lsls	r2, r3, #7
   25974:	f100 808c 	bmi.w	25a90 <ip_interface_getopt+0x2a4>
   25978:	6823      	ldr	r3, [r4, #0]
   2597a:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
   2597e:	f040 8087 	bne.w	25a90 <ip_interface_getopt+0x2a4>
   25982:	6826      	ldr	r6, [r4, #0]
   25984:	6822      	ldr	r2, [r4, #0]
   25986:	a804      	add	r0, sp, #16
   25988:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   2598c:	6022      	str	r2, [r4, #0]
   2598e:	f8d4 9018 	ldr.w	r9, [r4, #24]
   25992:	f840 3d04 	str.w	r3, [r0, #-4]!
   25996:	f7fe fdf9 	bl	2458c <rpc_ip_client_request_alloc>
   2599a:	2800      	cmp	r0, #0
   2599c:	f040 80a8 	bne.w	25af0 <ip_interface_getopt+0x304>
   259a0:	f247 0304 	movw	r3, #28676	; 0x7004
   259a4:	2208      	movs	r2, #8
   259a6:	9d03      	ldr	r5, [sp, #12]
   259a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   259ac:	60eb      	str	r3, [r5, #12]
   259ae:	f8c5 9010 	str.w	r9, [r5, #16]
   259b2:	7268      	strb	r0, [r5, #9]
   259b4:	72a8      	strb	r0, [r5, #10]
   259b6:	72e8      	strb	r0, [r5, #11]
   259b8:	722a      	strb	r2, [r5, #8]
   259ba:	2300      	movs	r3, #0
   259bc:	f04f 0c02 	mov.w	ip, #2
   259c0:	2010      	movs	r0, #16
   259c2:	2140      	movs	r1, #64	; 0x40
   259c4:	e036      	b.n	25a34 <ip_interface_getopt+0x248>
   259c6:	2d00      	cmp	r5, #0
   259c8:	d069      	beq.n	25a9e <ip_interface_getopt+0x2b2>
   259ca:	6829      	ldr	r1, [r5, #0]
   259cc:	2904      	cmp	r1, #4
   259ce:	d166      	bne.n	25a9e <ip_interface_getopt+0x2b2>
   259d0:	2f00      	cmp	r7, #0
   259d2:	d064      	beq.n	25a9e <ip_interface_getopt+0x2b2>
   259d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   259d8:	9302      	str	r3, [sp, #8]
   259da:	6803      	ldr	r3, [r0, #0]
   259dc:	025b      	lsls	r3, r3, #9
   259de:	d457      	bmi.n	25a90 <ip_interface_getopt+0x2a4>
   259e0:	6803      	ldr	r3, [r0, #0]
   259e2:	021e      	lsls	r6, r3, #8
   259e4:	d454      	bmi.n	25a90 <ip_interface_getopt+0x2a4>
   259e6:	6803      	ldr	r3, [r0, #0]
   259e8:	01dd      	lsls	r5, r3, #7
   259ea:	d451      	bmi.n	25a90 <ip_interface_getopt+0x2a4>
   259ec:	6803      	ldr	r3, [r0, #0]
   259ee:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
   259f2:	d14d      	bne.n	25a90 <ip_interface_getopt+0x2a4>
   259f4:	6826      	ldr	r6, [r4, #0]
   259f6:	6822      	ldr	r2, [r4, #0]
   259f8:	a804      	add	r0, sp, #16
   259fa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   259fe:	6022      	str	r2, [r4, #0]
   25a00:	f8d4 9018 	ldr.w	r9, [r4, #24]
   25a04:	f840 3d04 	str.w	r3, [r0, #-4]!
   25a08:	f7fe fdc0 	bl	2458c <rpc_ip_client_request_alloc>
   25a0c:	2800      	cmp	r0, #0
   25a0e:	d16b      	bne.n	25ae8 <ip_interface_getopt+0x2fc>
   25a10:	f247 0304 	movw	r3, #28676	; 0x7004
   25a14:	2208      	movs	r2, #8
   25a16:	9d03      	ldr	r5, [sp, #12]
   25a18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   25a1c:	60eb      	str	r3, [r5, #12]
   25a1e:	f8c5 9010 	str.w	r9, [r5, #16]
   25a22:	7268      	strb	r0, [r5, #9]
   25a24:	72a8      	strb	r0, [r5, #10]
   25a26:	72e8      	strb	r0, [r5, #11]
   25a28:	722a      	strb	r2, [r5, #8]
   25a2a:	2300      	movs	r3, #0
   25a2c:	f04f 0c02 	mov.w	ip, #2
   25a30:	2010      	movs	r0, #16
   25a32:	2160      	movs	r1, #96	; 0x60
   25a34:	68aa      	ldr	r2, [r5, #8]
   25a36:	752b      	strb	r3, [r5, #20]
   25a38:	3208      	adds	r2, #8
   25a3a:	60aa      	str	r2, [r5, #8]
   25a3c:	75ab      	strb	r3, [r5, #22]
   25a3e:	75eb      	strb	r3, [r5, #23]
   25a40:	76ab      	strb	r3, [r5, #26]
   25a42:	76eb      	strb	r3, [r5, #27]
   25a44:	f885 c015 	strb.w	ip, [r5, #21]
   25a48:	7628      	strb	r0, [r5, #24]
   25a4a:	7669      	strb	r1, [r5, #25]
   25a4c:	4628      	mov	r0, r5
   25a4e:	f247 0104 	movw	r1, #28676	; 0x7004
   25a52:	f8d5 9000 	ldr.w	r9, [r5]
   25a56:	f7fe fdad 	bl	245b4 <rpc_ip_client_request_send>
   25a5a:	4682      	mov	sl, r0
   25a5c:	bb58      	cbnz	r0, 25ab6 <ip_interface_getopt+0x2ca>
   25a5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   25a62:	ab02      	add	r3, sp, #8
   25a64:	4611      	mov	r1, r2
   25a66:	4640      	mov	r0, r8
   25a68:	f004 fe40 	bl	2a6ec <interface_socket_wait>
   25a6c:	4605      	mov	r5, r0
   25a6e:	2800      	cmp	r0, #0
   25a70:	d042      	beq.n	25af8 <ip_interface_getopt+0x30c>
   25a72:	4648      	mov	r0, r9
   25a74:	f7fe fdbc 	bl	245f0 <rpc_ip_client_data_free>
   25a78:	6026      	str	r6, [r4, #0]
   25a7a:	e00a      	b.n	25a92 <ip_interface_getopt+0x2a6>
   25a7c:	9500      	str	r5, [sp, #0]
   25a7e:	463b      	mov	r3, r7
   25a80:	4632      	mov	r2, r6
   25a82:	4640      	mov	r0, r8
   25a84:	2101      	movs	r1, #1
   25a86:	f004 ff13 	bl	2a8b0 <interface_socket_getopt>
   25a8a:	b005      	add	sp, #20
   25a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25a90:	2523      	movs	r5, #35	; 0x23
   25a92:	4628      	mov	r0, r5
   25a94:	f7fa fada 	bl	2004c <bsd_os_errno_set>
   25a98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25a9c:	e7f5      	b.n	25a8a <ip_interface_getopt+0x29e>
   25a9e:	2016      	movs	r0, #22
   25aa0:	f7fa fad4 	bl	2004c <bsd_os_errno_set>
   25aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25aa8:	e7ef      	b.n	25a8a <ip_interface_getopt+0x29e>
   25aaa:	202a      	movs	r0, #42	; 0x2a
   25aac:	f7fa face 	bl	2004c <bsd_os_errno_set>
   25ab0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25ab4:	e7e9      	b.n	25a8a <ip_interface_getopt+0x29e>
   25ab6:	6828      	ldr	r0, [r5, #0]
   25ab8:	b108      	cbz	r0, 25abe <ip_interface_getopt+0x2d2>
   25aba:	f7fe fd99 	bl	245f0 <rpc_ip_client_data_free>
   25abe:	4628      	mov	r0, r5
   25ac0:	f7fe fd8e 	bl	245e0 <rpc_ip_client_message_free>
   25ac4:	6026      	str	r6, [r4, #0]
   25ac6:	4648      	mov	r0, r9
   25ac8:	f7fe fd92 	bl	245f0 <rpc_ip_client_data_free>
   25acc:	2523      	movs	r5, #35	; 0x23
   25ace:	6026      	str	r6, [r4, #0]
   25ad0:	e7df      	b.n	25a92 <ip_interface_getopt+0x2a6>
   25ad2:	9d03      	ldr	r5, [sp, #12]
   25ad4:	2d00      	cmp	r5, #0
   25ad6:	f47f af2f 	bne.w	25938 <ip_interface_getopt+0x14c>
   25ada:	6026      	str	r6, [r4, #0]
   25adc:	250c      	movs	r5, #12
   25ade:	e7d8      	b.n	25a92 <ip_interface_getopt+0x2a6>
   25ae0:	9d03      	ldr	r5, [sp, #12]
   25ae2:	2d00      	cmp	r5, #0
   25ae4:	d0f9      	beq.n	25ada <ip_interface_getopt+0x2ee>
   25ae6:	e6dd      	b.n	258a4 <ip_interface_getopt+0xb8>
   25ae8:	9d03      	ldr	r5, [sp, #12]
   25aea:	2d00      	cmp	r5, #0
   25aec:	d0f5      	beq.n	25ada <ip_interface_getopt+0x2ee>
   25aee:	e79c      	b.n	25a2a <ip_interface_getopt+0x23e>
   25af0:	9d03      	ldr	r5, [sp, #12]
   25af2:	2d00      	cmp	r5, #0
   25af4:	d0f1      	beq.n	25ada <ip_interface_getopt+0x2ee>
   25af6:	e760      	b.n	259ba <ip_interface_getopt+0x1ce>
   25af8:	4640      	mov	r0, r8
   25afa:	f004 fe6b 	bl	2a7d4 <interface_socket_from_handle_get>
   25afe:	b120      	cbz	r0, 25b0a <ip_interface_getopt+0x31e>
   25b00:	6845      	ldr	r5, [r0, #4]
   25b02:	b115      	cbz	r5, 25b0a <ip_interface_getopt+0x31e>
   25b04:	f8c0 a004 	str.w	sl, [r0, #4]
   25b08:	e7b3      	b.n	25a72 <ip_interface_getopt+0x286>
   25b0a:	f8df a08c 	ldr.w	sl, [pc, #140]	; 25b98 <ip_interface_getopt+0x3ac>
   25b0e:	f85a 5028 	ldr.w	r5, [sl, r8, lsl #2]
   25b12:	b3ad      	cbz	r5, 25b80 <ip_interface_getopt+0x394>
   25b14:	686a      	ldr	r2, [r5, #4]
   25b16:	2a04      	cmp	r2, #4
   25b18:	d81b      	bhi.n	25b52 <ip_interface_getopt+0x366>
   25b1a:	f8d5 b000 	ldr.w	fp, [r5]
   25b1e:	f1bb 0f00 	cmp.w	fp, #0
   25b22:	d022      	beq.n	25b6a <ip_interface_getopt+0x37e>
   25b24:	2500      	movs	r5, #0
   25b26:	4659      	mov	r1, fp
   25b28:	4638      	mov	r0, r7
   25b2a:	f013 fa4a 	bl	38fc2 <memcpy>
   25b2e:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
   25b32:	f7fe fd55 	bl	245e0 <rpc_ip_client_message_free>
   25b36:	4648      	mov	r0, r9
   25b38:	f84a 5028 	str.w	r5, [sl, r8, lsl #2]
   25b3c:	f7fe fd58 	bl	245f0 <rpc_ip_client_data_free>
   25b40:	4628      	mov	r0, r5
   25b42:	6026      	str	r6, [r4, #0]
   25b44:	e7a1      	b.n	25a8a <ip_interface_getopt+0x29e>
   25b46:	2009      	movs	r0, #9
   25b48:	f7fa fa80 	bl	2004c <bsd_os_errno_set>
   25b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25b50:	e79b      	b.n	25a8a <ip_interface_getopt+0x29e>
   25b52:	4628      	mov	r0, r5
   25b54:	f7fe fd44 	bl	245e0 <rpc_ip_client_message_free>
   25b58:	2300      	movs	r3, #0
   25b5a:	4648      	mov	r0, r9
   25b5c:	f84a 3028 	str.w	r3, [sl, r8, lsl #2]
   25b60:	2516      	movs	r5, #22
   25b62:	f7fe fd45 	bl	245f0 <rpc_ip_client_data_free>
   25b66:	6026      	str	r6, [r4, #0]
   25b68:	e793      	b.n	25a92 <ip_interface_getopt+0x2a6>
   25b6a:	4628      	mov	r0, r5
   25b6c:	f7fe fd38 	bl	245e0 <rpc_ip_client_message_free>
   25b70:	4648      	mov	r0, r9
   25b72:	f84a b028 	str.w	fp, [sl, r8, lsl #2]
   25b76:	2516      	movs	r5, #22
   25b78:	f7fe fd3a 	bl	245f0 <rpc_ip_client_data_free>
   25b7c:	6026      	str	r6, [r4, #0]
   25b7e:	e788      	b.n	25a92 <ip_interface_getopt+0x2a6>
   25b80:	2204      	movs	r2, #4
   25b82:	4649      	mov	r1, r9
   25b84:	4638      	mov	r0, r7
   25b86:	f013 fa1c 	bl	38fc2 <memcpy>
   25b8a:	4648      	mov	r0, r9
   25b8c:	f7fe fd30 	bl	245f0 <rpc_ip_client_data_free>
   25b90:	6026      	str	r6, [r4, #0]
   25b92:	4628      	mov	r0, r5
   25b94:	e779      	b.n	25a8a <ip_interface_getopt+0x29e>
   25b96:	bf00      	nop
   25b98:	200226e0 	.word	0x200226e0

00025b9c <ip_interface_getaddrinfo>:
   25b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25ba0:	f04f 0c00 	mov.w	ip, #0
   25ba4:	2401      	movs	r4, #1
   25ba6:	4e75      	ldr	r6, [pc, #468]	; (25d7c <ip_interface_getaddrinfo+0x1e0>)
   25ba8:	4d75      	ldr	r5, [pc, #468]	; (25d80 <ip_interface_getaddrinfo+0x1e4>)
   25baa:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 25d90 <ip_interface_getaddrinfo+0x1f4>
   25bae:	4f75      	ldr	r7, [pc, #468]	; (25d84 <ip_interface_getaddrinfo+0x1e8>)
   25bb0:	7836      	ldrb	r6, [r6, #0]
   25bb2:	b085      	sub	sp, #20
   25bb4:	f8a5 c000 	strh.w	ip, [r5]
   25bb8:	f8c8 4000 	str.w	r4, [r8]
   25bbc:	603c      	str	r4, [r7, #0]
   25bbe:	2e00      	cmp	r6, #0
   25bc0:	d05b      	beq.n	25c7a <ip_interface_getaddrinfo+0xde>
   25bc2:	9301      	str	r3, [sp, #4]
   25bc4:	4614      	mov	r4, r2
   25bc6:	460b      	mov	r3, r1
   25bc8:	4606      	mov	r6, r0
   25bca:	b171      	cbz	r1, 25bea <ip_interface_getaddrinfo+0x4e>
   25bcc:	4618      	mov	r0, r3
   25bce:	220a      	movs	r2, #10
   25bd0:	4661      	mov	r1, ip
   25bd2:	f00c fb07 	bl	321e4 <strtol>
   25bd6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   25bda:	1e42      	subs	r2, r0, #1
   25bdc:	429a      	cmp	r2, r3
   25bde:	f200 8097 	bhi.w	25d10 <ip_interface_getaddrinfo+0x174>
   25be2:	0203      	lsls	r3, r0, #8
   25be4:	ea43 2020 	orr.w	r0, r3, r0, asr #8
   25be8:	8028      	strh	r0, [r5, #0]
   25bea:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 25d94 <ip_interface_getaddrinfo+0x1f8>
   25bee:	f8da 3000 	ldr.w	r3, [sl]
   25bf2:	2b00      	cmp	r3, #0
   25bf4:	d145      	bne.n	25c82 <ip_interface_getaddrinfo+0xe6>
   25bf6:	4a64      	ldr	r2, [pc, #400]	; (25d88 <ip_interface_getaddrinfo+0x1ec>)
   25bf8:	6013      	str	r3, [r2, #0]
   25bfa:	4a64      	ldr	r2, [pc, #400]	; (25d8c <ip_interface_getaddrinfo+0x1f0>)
   25bfc:	6013      	str	r3, [r2, #0]
   25bfe:	2e00      	cmp	r6, #0
   25c00:	d07a      	beq.n	25cf8 <ip_interface_getaddrinfo+0x15c>
   25c02:	4630      	mov	r0, r6
   25c04:	f7ec fa3c 	bl	12080 <strlen>
   25c08:	4683      	mov	fp, r0
   25c0a:	b144      	cbz	r4, 25c1e <ip_interface_getaddrinfo+0x82>
   25c0c:	69e2      	ldr	r2, [r4, #28]
   25c0e:	b132      	cbz	r2, 25c1e <ip_interface_getaddrinfo+0x82>
   25c10:	6851      	ldr	r1, [r2, #4]
   25c12:	2966      	cmp	r1, #102	; 0x66
   25c14:	d103      	bne.n	25c1e <ip_interface_getaddrinfo+0x82>
   25c16:	6891      	ldr	r1, [r2, #8]
   25c18:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   25c1c:	d07e      	beq.n	25d1c <ip_interface_getaddrinfo+0x180>
   25c1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   25c22:	2100      	movs	r1, #0
   25c24:	f10d 0910 	add.w	r9, sp, #16
   25c28:	f849 1d04 	str.w	r1, [r9, #-4]!
   25c2c:	4648      	mov	r0, r9
   25c2e:	4659      	mov	r1, fp
   25c30:	9200      	str	r2, [sp, #0]
   25c32:	f7fe fcab 	bl	2458c <rpc_ip_client_request_alloc>
   25c36:	9a00      	ldr	r2, [sp, #0]
   25c38:	2800      	cmp	r0, #0
   25c3a:	d15f      	bne.n	25cfc <ip_interface_getaddrinfo+0x160>
   25c3c:	f247 010d 	movw	r1, #28685	; 0x700d
   25c40:	f04f 0c08 	mov.w	ip, #8
   25c44:	9d03      	ldr	r5, [sp, #12]
   25c46:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   25c4a:	60e9      	str	r1, [r5, #12]
   25c4c:	612a      	str	r2, [r5, #16]
   25c4e:	7268      	strb	r0, [r5, #9]
   25c50:	72a8      	strb	r0, [r5, #10]
   25c52:	72e8      	strb	r0, [r5, #11]
   25c54:	f885 c008 	strb.w	ip, [r5, #8]
   25c58:	2c00      	cmp	r4, #0
   25c5a:	d076      	beq.n	25d4a <ip_interface_getaddrinfo+0x1ae>
   25c5c:	6862      	ldr	r2, [r4, #4]
   25c5e:	f022 0108 	bic.w	r1, r2, #8
   25c62:	2902      	cmp	r1, #2
   25c64:	d011      	beq.n	25c8a <ip_interface_getaddrinfo+0xee>
   25c66:	2a05      	cmp	r2, #5
   25c68:	d176      	bne.n	25d58 <ip_interface_getaddrinfo+0x1bc>
   25c6a:	68a1      	ldr	r1, [r4, #8]
   25c6c:	2902      	cmp	r1, #2
   25c6e:	6039      	str	r1, [r7, #0]
   25c70:	d115      	bne.n	25c9e <ip_interface_getaddrinfo+0x102>
   25c72:	2102      	movs	r1, #2
   25c74:	f8c8 1000 	str.w	r1, [r8]
   25c78:	e00b      	b.n	25c92 <ip_interface_getaddrinfo+0xf6>
   25c7a:	2070      	movs	r0, #112	; 0x70
   25c7c:	b005      	add	sp, #20
   25c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25c82:	2073      	movs	r0, #115	; 0x73
   25c84:	b005      	add	sp, #20
   25c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25c8a:	68a1      	ldr	r1, [r4, #8]
   25c8c:	2902      	cmp	r1, #2
   25c8e:	6039      	str	r1, [r7, #0]
   25c90:	d0ef      	beq.n	25c72 <ip_interface_getaddrinfo+0xd6>
   25c92:	2a05      	cmp	r2, #5
   25c94:	d003      	beq.n	25c9e <ip_interface_getaddrinfo+0x102>
   25c96:	2a0a      	cmp	r2, #10
   25c98:	bf14      	ite	ne
   25c9a:	2201      	movne	r2, #1
   25c9c:	2202      	moveq	r2, #2
   25c9e:	61aa      	str	r2, [r5, #24]
   25ca0:	68e2      	ldr	r2, [r4, #12]
   25ca2:	622a      	str	r2, [r5, #32]
   25ca4:	68a2      	ldr	r2, [r4, #8]
   25ca6:	61ea      	str	r2, [r5, #28]
   25ca8:	6822      	ldr	r2, [r4, #0]
   25caa:	616a      	str	r2, [r5, #20]
   25cac:	68aa      	ldr	r2, [r5, #8]
   25cae:	3210      	adds	r2, #16
   25cb0:	60aa      	str	r2, [r5, #8]
   25cb2:	b12e      	cbz	r6, 25cc0 <ip_interface_getaddrinfo+0x124>
   25cb4:	6828      	ldr	r0, [r5, #0]
   25cb6:	b118      	cbz	r0, 25cc0 <ip_interface_getaddrinfo+0x124>
   25cb8:	465a      	mov	r2, fp
   25cba:	4631      	mov	r1, r6
   25cbc:	f013 f981 	bl	38fc2 <memcpy>
   25cc0:	2301      	movs	r3, #1
   25cc2:	f247 010d 	movw	r1, #28685	; 0x700d
   25cc6:	4628      	mov	r0, r5
   25cc8:	f8ca 3000 	str.w	r3, [sl]
   25ccc:	f7fe fc72 	bl	245b4 <rpc_ip_client_request_send>
   25cd0:	bb10      	cbnz	r0, 25d18 <ip_interface_getaddrinfo+0x17c>
   25cd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25cd6:	9303      	str	r3, [sp, #12]
   25cd8:	4649      	mov	r1, r9
   25cda:	4628      	mov	r0, r5
   25cdc:	f7fa f90c 	bl	1fef8 <bsd_os_timedwait>
   25ce0:	f8da 3000 	ldr.w	r3, [sl]
   25ce4:	2b01      	cmp	r3, #1
   25ce6:	d0f7      	beq.n	25cd8 <ip_interface_getaddrinfo+0x13c>
   25ce8:	4b28      	ldr	r3, [pc, #160]	; (25d8c <ip_interface_getaddrinfo+0x1f0>)
   25cea:	6818      	ldr	r0, [r3, #0]
   25cec:	bb40      	cbnz	r0, 25d40 <ip_interface_getaddrinfo+0x1a4>
   25cee:	4b26      	ldr	r3, [pc, #152]	; (25d88 <ip_interface_getaddrinfo+0x1ec>)
   25cf0:	9a01      	ldr	r2, [sp, #4]
   25cf2:	681b      	ldr	r3, [r3, #0]
   25cf4:	6013      	str	r3, [r2, #0]
   25cf6:	e7c1      	b.n	25c7c <ip_interface_getaddrinfo+0xe0>
   25cf8:	46b3      	mov	fp, r6
   25cfa:	e786      	b.n	25c0a <ip_interface_getaddrinfo+0x6e>
   25cfc:	9d03      	ldr	r5, [sp, #12]
   25cfe:	2d00      	cmp	r5, #0
   25d00:	d1aa      	bne.n	25c58 <ip_interface_getaddrinfo+0xbc>
   25d02:	200c      	movs	r0, #12
   25d04:	2300      	movs	r3, #0
   25d06:	f8ca 3000 	str.w	r3, [sl]
   25d0a:	b005      	add	sp, #20
   25d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25d10:	2016      	movs	r0, #22
   25d12:	b005      	add	sp, #20
   25d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25d18:	2023      	movs	r0, #35	; 0x23
   25d1a:	e7f3      	b.n	25d04 <ip_interface_getaddrinfo+0x168>
   25d1c:	f240 2002 	movw	r0, #514	; 0x202
   25d20:	68d1      	ldr	r1, [r2, #12]
   25d22:	4281      	cmp	r1, r0
   25d24:	f47f af7b 	bne.w	25c1e <ip_interface_getaddrinfo+0x82>
   25d28:	6991      	ldr	r1, [r2, #24]
   25d2a:	2900      	cmp	r1, #0
   25d2c:	f43f af77 	beq.w	25c1e <ip_interface_getaddrinfo+0x82>
   25d30:	6860      	ldr	r0, [r4, #4]
   25d32:	f002 fac3 	bl	282bc <pdn_interface_pdn_id_get>
   25d36:	1c43      	adds	r3, r0, #1
   25d38:	f43f af71 	beq.w	25c1e <ip_interface_getaddrinfo+0x82>
   25d3c:	4602      	mov	r2, r0
   25d3e:	e770      	b.n	25c22 <ip_interface_getaddrinfo+0x86>
   25d40:	4b12      	ldr	r3, [pc, #72]	; (25d8c <ip_interface_getaddrinfo+0x1f0>)
   25d42:	6818      	ldr	r0, [r3, #0]
   25d44:	2800      	cmp	r0, #0
   25d46:	d099      	beq.n	25c7c <ip_interface_getaddrinfo+0xe0>
   25d48:	e7dc      	b.n	25d04 <ip_interface_getaddrinfo+0x168>
   25d4a:	4621      	mov	r1, r4
   25d4c:	2210      	movs	r2, #16
   25d4e:	f105 0014 	add.w	r0, r5, #20
   25d52:	f013 f970 	bl	39036 <memset>
   25d56:	e7a9      	b.n	25cac <ip_interface_getaddrinfo+0x110>
   25d58:	202f      	movs	r0, #47	; 0x2f
   25d5a:	f7fa f977 	bl	2004c <bsd_os_errno_set>
   25d5e:	68aa      	ldr	r2, [r5, #8]
   25d60:	3210      	adds	r2, #16
   25d62:	60aa      	str	r2, [r5, #8]
   25d64:	b916      	cbnz	r6, 25d6c <ip_interface_getaddrinfo+0x1d0>
   25d66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25d6a:	e7cb      	b.n	25d04 <ip_interface_getaddrinfo+0x168>
   25d6c:	6828      	ldr	r0, [r5, #0]
   25d6e:	2800      	cmp	r0, #0
   25d70:	d0f9      	beq.n	25d66 <ip_interface_getaddrinfo+0x1ca>
   25d72:	465a      	mov	r2, fp
   25d74:	4631      	mov	r1, r6
   25d76:	f013 f924 	bl	38fc2 <memcpy>
   25d7a:	e7f4      	b.n	25d66 <ip_interface_getaddrinfo+0x1ca>
   25d7c:	20029086 	.word	0x20029086
   25d80:	2002761c 	.word	0x2002761c
   25d84:	200226d0 	.word	0x200226d0
   25d88:	200226dc 	.word	0x200226dc
   25d8c:	200226d4 	.word	0x200226d4
   25d90:	200226cc 	.word	0x200226cc
   25d94:	200226d8 	.word	0x200226d8

00025d98 <ip_interface_freeaddrinfo>:
   25d98:	b538      	push	{r3, r4, r5, lr}
   25d9a:	4d0b      	ldr	r5, [pc, #44]	; (25dc8 <ip_interface_freeaddrinfo+0x30>)
   25d9c:	682b      	ldr	r3, [r5, #0]
   25d9e:	2b02      	cmp	r3, #2
   25da0:	d000      	beq.n	25da4 <ip_interface_freeaddrinfo+0xc>
   25da2:	bd38      	pop	{r3, r4, r5, pc}
   25da4:	b150      	cbz	r0, 25dbc <ip_interface_freeaddrinfo+0x24>
   25da6:	4604      	mov	r4, r0
   25da8:	6940      	ldr	r0, [r0, #20]
   25daa:	f004 f8c5 	bl	29f38 <nrf_free>
   25dae:	69a0      	ldr	r0, [r4, #24]
   25db0:	b108      	cbz	r0, 25db6 <ip_interface_freeaddrinfo+0x1e>
   25db2:	f004 f8c1 	bl	29f38 <nrf_free>
   25db6:	4620      	mov	r0, r4
   25db8:	f004 f8be 	bl	29f38 <nrf_free>
   25dbc:	2300      	movs	r3, #0
   25dbe:	4a03      	ldr	r2, [pc, #12]	; (25dcc <ip_interface_freeaddrinfo+0x34>)
   25dc0:	602b      	str	r3, [r5, #0]
   25dc2:	6013      	str	r3, [r2, #0]
   25dc4:	bd38      	pop	{r3, r4, r5, pc}
   25dc6:	bf00      	nop
   25dc8:	200226d8 	.word	0x200226d8
   25dcc:	200226d4 	.word	0x200226d4

00025dd0 <rpc_ip_event_handler>:
   25dd0:	f248 030d 	movw	r3, #32781	; 0x800d
   25dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25dd8:	4299      	cmp	r1, r3
   25dda:	b089      	sub	sp, #36	; 0x24
   25ddc:	4604      	mov	r4, r0
   25dde:	d05c      	beq.n	25e9a <rpc_ip_event_handler+0xca>
   25de0:	f248 030f 	movw	r3, #32783	; 0x800f
   25de4:	4299      	cmp	r1, r3
   25de6:	460d      	mov	r5, r1
   25de8:	d045      	beq.n	25e76 <rpc_ip_event_handler+0xa6>
   25dea:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   25dee:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   25df2:	68c0      	ldr	r0, [r0, #12]
   25df4:	d075      	beq.n	25ee2 <rpc_ip_event_handler+0x112>
   25df6:	0c06      	lsrs	r6, r0, #16
   25df8:	4630      	mov	r0, r6
   25dfa:	f004 fceb 	bl	2a7d4 <interface_socket_from_handle_get>
   25dfe:	4607      	mov	r7, r0
   25e00:	2800      	cmp	r0, #0
   25e02:	d059      	beq.n	25eb8 <rpc_ip_event_handler+0xe8>
   25e04:	4601      	mov	r1, r0
   25e06:	462b      	mov	r3, r5
   25e08:	4622      	mov	r2, r4
   25e0a:	4630      	mov	r0, r6
   25e0c:	f7fe fb2c 	bl	24468 <tls_rpc_ip_event_handler>
   25e10:	2800      	cmp	r0, #0
   25e12:	d04d      	beq.n	25eb0 <rpc_ip_event_handler+0xe0>
   25e14:	f248 0307 	movw	r3, #32775	; 0x8007
   25e18:	429d      	cmp	r5, r3
   25e1a:	d866      	bhi.n	25eea <rpc_ip_event_handler+0x11a>
   25e1c:	f248 0306 	movw	r3, #32774	; 0x8006
   25e20:	429d      	cmp	r5, r3
   25e22:	f080 81e7 	bcs.w	261f4 <rpc_ip_event_handler+0x424>
   25e26:	f248 0303 	movw	r3, #32771	; 0x8003
   25e2a:	429d      	cmp	r5, r3
   25e2c:	f000 81c5 	beq.w	261ba <rpc_ip_event_handler+0x3ea>
   25e30:	f200 811b 	bhi.w	2606a <rpc_ip_event_handler+0x29a>
   25e34:	f248 0301 	movw	r3, #32769	; 0x8001
   25e38:	429d      	cmp	r5, r3
   25e3a:	f000 8154 	beq.w	260e6 <rpc_ip_event_handler+0x316>
   25e3e:	f248 0302 	movw	r3, #32770	; 0x8002
   25e42:	429d      	cmp	r5, r3
   25e44:	d138      	bne.n	25eb8 <rpc_ip_event_handler+0xe8>
   25e46:	683b      	ldr	r3, [r7, #0]
   25e48:	0098      	lsls	r0, r3, #2
   25e4a:	d531      	bpl.n	25eb0 <rpc_ip_event_handler+0xe0>
   25e4c:	683b      	ldr	r3, [r7, #0]
   25e4e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   25e52:	603b      	str	r3, [r7, #0]
   25e54:	6963      	ldr	r3, [r4, #20]
   25e56:	2b00      	cmp	r3, #0
   25e58:	f000 81ea 	beq.w	26230 <rpc_ip_event_handler+0x460>
   25e5c:	2b10      	cmp	r3, #16
   25e5e:	bf8e      	itee	hi
   25e60:	232d      	movhi	r3, #45	; 0x2d
   25e62:	4ab9      	ldrls	r2, [pc, #740]	; (26148 <rpc_ip_event_handler+0x378>)
   25e64:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   25e68:	607b      	str	r3, [r7, #4]
   25e6a:	683b      	ldr	r3, [r7, #0]
   25e6c:	2000      	movs	r0, #0
   25e6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   25e72:	603b      	str	r3, [r7, #0]
   25e74:	e00e      	b.n	25e94 <rpc_ip_event_handler+0xc4>
   25e76:	6943      	ldr	r3, [r0, #20]
   25e78:	2001      	movs	r0, #1
   25e7a:	2b10      	cmp	r3, #16
   25e7c:	49b3      	ldr	r1, [pc, #716]	; (2614c <rpc_ip_event_handler+0x37c>)
   25e7e:	bf88      	it	hi
   25e80:	222d      	movhi	r2, #45	; 0x2d
   25e82:	7008      	strb	r0, [r1, #0]
   25e84:	f04f 0000 	mov.w	r0, #0
   25e88:	bf9c      	itt	ls
   25e8a:	4aaf      	ldrls	r2, [pc, #700]	; (26148 <rpc_ip_event_handler+0x378>)
   25e8c:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   25e90:	4baf      	ldr	r3, [pc, #700]	; (26150 <rpc_ip_event_handler+0x380>)
   25e92:	601a      	str	r2, [r3, #0]
   25e94:	b009      	add	sp, #36	; 0x24
   25e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25e9a:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 26164 <rpc_ip_event_handler+0x394>
   25e9e:	6807      	ldr	r7, [r0, #0]
   25ea0:	f8da 2000 	ldr.w	r2, [sl]
   25ea4:	2a01      	cmp	r2, #1
   25ea6:	d00b      	beq.n	25ec0 <rpc_ip_event_handler+0xf0>
   25ea8:	b117      	cbz	r7, 25eb0 <rpc_ip_event_handler+0xe0>
   25eaa:	4638      	mov	r0, r7
   25eac:	f7fe fba0 	bl	245f0 <rpc_ip_client_data_free>
   25eb0:	2000      	movs	r0, #0
   25eb2:	b009      	add	sp, #36	; 0x24
   25eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25eb8:	6820      	ldr	r0, [r4, #0]
   25eba:	2800      	cmp	r0, #0
   25ebc:	d1f6      	bne.n	25eac <rpc_ip_event_handler+0xdc>
   25ebe:	e7f7      	b.n	25eb0 <rpc_ip_event_handler+0xe0>
   25ec0:	6942      	ldr	r2, [r0, #20]
   25ec2:	2a00      	cmp	r2, #0
   25ec4:	d045      	beq.n	25f52 <rpc_ip_event_handler+0x182>
   25ec6:	2a10      	cmp	r2, #16
   25ec8:	bf8e      	itee	hi
   25eca:	222d      	movhi	r2, #45	; 0x2d
   25ecc:	499e      	ldrls	r1, [pc, #632]	; (26148 <rpc_ip_event_handler+0x378>)
   25ece:	f851 2022 	ldrls.w	r2, [r1, r2, lsl #2]
   25ed2:	49a0      	ldr	r1, [pc, #640]	; (26154 <rpc_ip_event_handler+0x384>)
   25ed4:	600a      	str	r2, [r1, #0]
   25ed6:	2202      	movs	r2, #2
   25ed8:	f8ca 2000 	str.w	r2, [sl]
   25edc:	2f00      	cmp	r7, #0
   25ede:	d1e4      	bne.n	25eaa <rpc_ip_event_handler+0xda>
   25ee0:	e7e6      	b.n	25eb0 <rpc_ip_event_handler+0xe0>
   25ee2:	f004 fc25 	bl	2a730 <interface_from_internal_id_search>
   25ee6:	4606      	mov	r6, r0
   25ee8:	e786      	b.n	25df8 <rpc_ip_event_handler+0x28>
   25eea:	f248 030c 	movw	r3, #32780	; 0x800c
   25eee:	429d      	cmp	r5, r3
   25ef0:	f000 813c 	beq.w	2616c <rpc_ip_event_handler+0x39c>
   25ef4:	f240 80d5 	bls.w	260a2 <rpc_ip_event_handler+0x2d2>
   25ef8:	f249 0302 	movw	r3, #36866	; 0x9002
   25efc:	429d      	cmp	r5, r3
   25efe:	f000 811d 	beq.w	2613c <rpc_ip_event_handler+0x36c>
   25f02:	f249 0303 	movw	r3, #36867	; 0x9003
   25f06:	429d      	cmp	r5, r3
   25f08:	f000 80f9 	beq.w	260fe <rpc_ip_event_handler+0x32e>
   25f0c:	f249 0301 	movw	r3, #36865	; 0x9001
   25f10:	429d      	cmp	r5, r3
   25f12:	d1d1      	bne.n	25eb8 <rpc_ip_event_handler+0xe8>
   25f14:	683d      	ldr	r5, [r7, #0]
   25f16:	f415 1580 	ands.w	r5, r5, #1048576	; 0x100000
   25f1a:	f000 8184 	beq.w	26226 <rpc_ip_event_handler+0x456>
   25f1e:	68a3      	ldr	r3, [r4, #8]
   25f20:	2b04      	cmp	r3, #4
   25f22:	f200 81af 	bhi.w	26284 <rpc_ip_event_handler+0x4b4>
   25f26:	2500      	movs	r5, #0
   25f28:	462e      	mov	r6, r5
   25f2a:	6821      	ldr	r1, [r4, #0]
   25f2c:	6862      	ldr	r2, [r4, #4]
   25f2e:	e9cd 6506 	strd	r6, r5, [sp, #24]
   25f32:	e9cd 1204 	strd	r1, r2, [sp, #16]
   25f36:	69f8      	ldr	r0, [r7, #28]
   25f38:	a904      	add	r1, sp, #16
   25f3a:	6803      	ldr	r3, [r0, #0]
   25f3c:	685b      	ldr	r3, [r3, #4]
   25f3e:	4798      	blx	r3
   25f40:	3001      	adds	r0, #1
   25f42:	f000 818e 	beq.w	26262 <rpc_ip_event_handler+0x492>
   25f46:	683b      	ldr	r3, [r7, #0]
   25f48:	2000      	movs	r0, #0
   25f4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   25f4e:	603b      	str	r3, [r7, #0]
   25f50:	e7a0      	b.n	25e94 <rpc_ip_event_handler+0xc4>
   25f52:	6985      	ldr	r5, [r0, #24]
   25f54:	016b      	lsls	r3, r5, #5
   25f56:	4618      	mov	r0, r3
   25f58:	9303      	str	r3, [sp, #12]
   25f5a:	f003 ffe3 	bl	29f24 <nrf_malloc>
   25f5e:	9002      	str	r0, [sp, #8]
   25f60:	2800      	cmp	r0, #0
   25f62:	d078      	beq.n	26056 <rpc_ip_event_handler+0x286>
   25f64:	00ee      	lsls	r6, r5, #3
   25f66:	1970      	adds	r0, r6, r5
   25f68:	0080      	lsls	r0, r0, #2
   25f6a:	f003 ffdb 	bl	29f24 <nrf_malloc>
   25f6e:	2800      	cmp	r0, #0
   25f70:	d073      	beq.n	2605a <rpc_ip_event_handler+0x28a>
   25f72:	2d00      	cmp	r5, #0
   25f74:	d074      	beq.n	26060 <rpc_ip_event_handler+0x290>
   25f76:	3610      	adds	r6, #16
   25f78:	1983      	adds	r3, r0, r6
   25f7a:	9301      	str	r3, [sp, #4]
   25f7c:	9b02      	ldr	r3, [sp, #8]
   25f7e:	2204      	movs	r2, #4
   25f80:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 26168 <rpc_ip_event_handler+0x398>
   25f84:	f100 0810 	add.w	r8, r0, #16
   25f88:	f103 0520 	add.w	r5, r3, #32
   25f8c:	e013      	b.n	25fb6 <rpc_ip_event_handler+0x1e6>
   25f8e:	464a      	mov	r2, r9
   25f90:	f013 f817 	bl	38fc2 <memcpy>
   25f94:	2100      	movs	r1, #0
   25f96:	f855 3c08 	ldr.w	r3, [r5, #-8]
   25f9a:	f108 0808 	add.w	r8, r8, #8
   25f9e:	eb09 0206 	add.w	r2, r9, r6
   25fa2:	f803 1009 	strb.w	r1, [r3, r9]
   25fa6:	9b01      	ldr	r3, [sp, #4]
   25fa8:	f845 5c04 	str.w	r5, [r5, #-4]
   25fac:	4598      	cmp	r8, r3
   25fae:	f105 0520 	add.w	r5, r5, #32
   25fb2:	f000 8090 	beq.w	260d6 <rpc_ip_event_handler+0x306>
   25fb6:	58bb      	ldr	r3, [r7, r2]
   25fb8:	18b9      	adds	r1, r7, r2
   25fba:	f845 3c20 	str.w	r3, [r5, #-32]
   25fbe:	684b      	ldr	r3, [r1, #4]
   25fc0:	f8db 0000 	ldr.w	r0, [fp]
   25fc4:	2b02      	cmp	r3, #2
   25fc6:	bf14      	ite	ne
   25fc8:	2602      	movne	r6, #2
   25fca:	260a      	moveq	r6, #10
   25fcc:	4b62      	ldr	r3, [pc, #392]	; (26158 <rpc_ip_event_handler+0x388>)
   25fce:	e945 6007 	strd	r6, r0, [r5, #-28]
   25fd2:	681b      	ldr	r3, [r3, #0]
   25fd4:	f102 0614 	add.w	r6, r2, #20
   25fd8:	f845 3c14 	str.w	r3, [r5, #-20]
   25fdc:	8a08      	ldrh	r0, [r1, #16]
   25fde:	f1a8 0310 	sub.w	r3, r8, #16
   25fe2:	f845 0c10 	str.w	r0, [r5, #-16]
   25fe6:	f8b1 9012 	ldrh.w	r9, [r1, #18]
   25fea:	f845 3c0c 	str.w	r3, [r5, #-12]
   25fee:	4b5b      	ldr	r3, [pc, #364]	; (2615c <rpc_ip_event_handler+0x38c>)
   25ff0:	2804      	cmp	r0, #4
   25ff2:	eb07 0106 	add.w	r1, r7, r6
   25ff6:	881b      	ldrh	r3, [r3, #0]
   25ff8:	d01e      	beq.n	26038 <rpc_ip_event_handler+0x268>
   25ffa:	220a      	movs	r2, #10
   25ffc:	f848 2c0c 	str.w	r2, [r8, #-12]
   26000:	f04f 0224 	mov.w	r2, #36	; 0x24
   26004:	f828 3c08 	strh.w	r3, [r8, #-8]
   26008:	f808 2c10 	strb.w	r2, [r8, #-16]
   2600c:	f855 2c10 	ldr.w	r2, [r5, #-16]
   26010:	4640      	mov	r0, r8
   26012:	f012 ffd6 	bl	38fc2 <memcpy>
   26016:	f855 3c10 	ldr.w	r3, [r5, #-16]
   2601a:	f109 0001 	add.w	r0, r9, #1
   2601e:	441e      	add	r6, r3
   26020:	f003 ff80 	bl	29f24 <nrf_malloc>
   26024:	19b9      	adds	r1, r7, r6
   26026:	eb09 0206 	add.w	r2, r9, r6
   2602a:	f845 0c08 	str.w	r0, [r5, #-8]
   2602e:	2800      	cmp	r0, #0
   26030:	d1ad      	bne.n	25f8e <rpc_ip_event_handler+0x1be>
   26032:	f108 0808 	add.w	r8, r8, #8
   26036:	e7b6      	b.n	25fa6 <rpc_ip_event_handler+0x1d6>
   26038:	2210      	movs	r2, #16
   2603a:	2002      	movs	r0, #2
   2603c:	f828 3c08 	strh.w	r3, [r8, #-8]
   26040:	f848 0c0c 	str.w	r0, [r8, #-12]
   26044:	f808 2c10 	strb.w	r2, [r8, #-16]
   26048:	f855 2c10 	ldr.w	r2, [r5, #-16]
   2604c:	f1a8 0004 	sub.w	r0, r8, #4
   26050:	f012 ffb7 	bl	38fc2 <memcpy>
   26054:	e7df      	b.n	26016 <rpc_ip_event_handler+0x246>
   26056:	f003 ff6f 	bl	29f38 <nrf_free>
   2605a:	210c      	movs	r1, #12
   2605c:	4a3d      	ldr	r2, [pc, #244]	; (26154 <rpc_ip_event_handler+0x384>)
   2605e:	6011      	str	r1, [r2, #0]
   26060:	9b02      	ldr	r3, [sp, #8]
   26062:	4a3f      	ldr	r2, [pc, #252]	; (26160 <rpc_ip_event_handler+0x390>)
   26064:	6827      	ldr	r7, [r4, #0]
   26066:	6013      	str	r3, [r2, #0]
   26068:	e735      	b.n	25ed6 <rpc_ip_event_handler+0x106>
   2606a:	f248 0304 	movw	r3, #32772	; 0x8004
   2606e:	429d      	cmp	r5, r3
   26070:	f000 808f 	beq.w	26192 <rpc_ip_event_handler+0x3c2>
   26074:	f248 0305 	movw	r3, #32773	; 0x8005
   26078:	429d      	cmp	r5, r3
   2607a:	f47f af1d 	bne.w	25eb8 <rpc_ip_event_handler+0xe8>
   2607e:	683b      	ldr	r3, [r7, #0]
   26080:	b29b      	uxth	r3, r3
   26082:	2b03      	cmp	r3, #3
   26084:	f47f af14 	bne.w	25eb0 <rpc_ip_event_handler+0xe0>
   26088:	6963      	ldr	r3, [r4, #20]
   2608a:	2b00      	cmp	r3, #0
   2608c:	f000 80eb 	beq.w	26266 <rpc_ip_event_handler+0x496>
   26090:	2b10      	cmp	r3, #16
   26092:	f200 80bd 	bhi.w	26210 <rpc_ip_event_handler+0x440>
   26096:	4a2c      	ldr	r2, [pc, #176]	; (26148 <rpc_ip_event_handler+0x378>)
   26098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   2609c:	607b      	str	r3, [r7, #4]
   2609e:	2000      	movs	r0, #0
   260a0:	e6f8      	b.n	25e94 <rpc_ip_event_handler+0xc4>
   260a2:	f248 0308 	movw	r3, #32776	; 0x8008
   260a6:	429d      	cmp	r5, r3
   260a8:	f000 8094 	beq.w	261d4 <rpc_ip_event_handler+0x404>
   260ac:	f248 0309 	movw	r3, #32777	; 0x8009
   260b0:	429d      	cmp	r5, r3
   260b2:	f47f af01 	bne.w	25eb8 <rpc_ip_event_handler+0xe8>
   260b6:	683b      	ldr	r3, [r7, #0]
   260b8:	b29b      	uxth	r3, r3
   260ba:	2b0d      	cmp	r3, #13
   260bc:	f47f aef8 	bne.w	25eb0 <rpc_ip_event_handler+0xe0>
   260c0:	6960      	ldr	r0, [r4, #20]
   260c2:	2800      	cmp	r0, #0
   260c4:	f000 80d7 	beq.w	26276 <rpc_ip_event_handler+0x4a6>
   260c8:	2810      	cmp	r0, #16
   260ca:	f200 80a1 	bhi.w	26210 <rpc_ip_event_handler+0x440>
   260ce:	4b1e      	ldr	r3, [pc, #120]	; (26148 <rpc_ip_event_handler+0x378>)
   260d0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   260d4:	e7e2      	b.n	2609c <rpc_ip_event_handler+0x2cc>
   260d6:	2100      	movs	r1, #0
   260d8:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
   260dc:	4403      	add	r3, r0
   260de:	f843 1c04 	str.w	r1, [r3, #-4]
   260e2:	4603      	mov	r3, r0
   260e4:	e7bd      	b.n	26062 <rpc_ip_event_handler+0x292>
   260e6:	683b      	ldr	r3, [r7, #0]
   260e8:	2b01      	cmp	r3, #1
   260ea:	f47f aee1 	bne.w	25eb0 <rpc_ip_event_handler+0xe0>
   260ee:	6960      	ldr	r0, [r4, #20]
   260f0:	2800      	cmp	r0, #0
   260f2:	d1e9      	bne.n	260c8 <rpc_ip_event_handler+0x2f8>
   260f4:	2302      	movs	r3, #2
   260f6:	603b      	str	r3, [r7, #0]
   260f8:	69a3      	ldr	r3, [r4, #24]
   260fa:	61bb      	str	r3, [r7, #24]
   260fc:	e6ca      	b.n	25e94 <rpc_ip_event_handler+0xc4>
   260fe:	683b      	ldr	r3, [r7, #0]
   26100:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   26104:	603b      	str	r3, [r7, #0]
   26106:	683b      	ldr	r3, [r7, #0]
   26108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2610c:	603b      	str	r3, [r7, #0]
   2610e:	683b      	ldr	r3, [r7, #0]
   26110:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   26114:	603b      	str	r3, [r7, #0]
   26116:	683b      	ldr	r3, [r7, #0]
   26118:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2611c:	603b      	str	r3, [r7, #0]
   2611e:	6923      	ldr	r3, [r4, #16]
   26120:	2b6c      	cmp	r3, #108	; 0x6c
   26122:	d077      	beq.n	26214 <rpc_ip_event_handler+0x444>
   26124:	2b10      	cmp	r3, #16
   26126:	bf8c      	ite	hi
   26128:	232d      	movhi	r3, #45	; 0x2d
   2612a:	4a07      	ldrls	r2, [pc, #28]	; (26148 <rpc_ip_event_handler+0x378>)
   2612c:	f04f 0000 	mov.w	r0, #0
   26130:	bf98      	it	ls
   26132:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   26136:	607b      	str	r3, [r7, #4]
   26138:	60bb      	str	r3, [r7, #8]
   2613a:	e6ab      	b.n	25e94 <rpc_ip_event_handler+0xc4>
   2613c:	683b      	ldr	r3, [r7, #0]
   2613e:	b29b      	uxth	r3, r3
   26140:	2b07      	cmp	r3, #7
   26142:	f47f aeb5 	bne.w	25eb0 <rpc_ip_event_handler+0xe0>
   26146:	e6fe      	b.n	25f46 <rpc_ip_event_handler+0x176>
   26148:	0003a938 	.word	0x0003a938
   2614c:	20029087 	.word	0x20029087
   26150:	20022704 	.word	0x20022704
   26154:	200226d4 	.word	0x200226d4
   26158:	200226cc 	.word	0x200226cc
   2615c:	2002761c 	.word	0x2002761c
   26160:	200226dc 	.word	0x200226dc
   26164:	200226d8 	.word	0x200226d8
   26168:	200226d0 	.word	0x200226d0
   2616c:	683b      	ldr	r3, [r7, #0]
   2616e:	b29b      	uxth	r3, r3
   26170:	2b08      	cmp	r3, #8
   26172:	f47f ae9d 	bne.w	25eb0 <rpc_ip_event_handler+0xe0>
   26176:	6963      	ldr	r3, [r4, #20]
   26178:	2b00      	cmp	r3, #0
   2617a:	d189      	bne.n	26090 <rpc_ip_event_handler+0x2c0>
   2617c:	4b5e      	ldr	r3, [pc, #376]	; (262f8 <rpc_ip_event_handler+0x528>)
   2617e:	2001      	movs	r0, #1
   26180:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
   26184:	683b      	ldr	r3, [r7, #0]
   26186:	0c1b      	lsrs	r3, r3, #16
   26188:	041b      	lsls	r3, r3, #16
   2618a:	f043 0309 	orr.w	r3, r3, #9
   2618e:	603b      	str	r3, [r7, #0]
   26190:	e680      	b.n	25e94 <rpc_ip_event_handler+0xc4>
   26192:	683b      	ldr	r3, [r7, #0]
   26194:	01db      	lsls	r3, r3, #7
   26196:	f57f ae8b 	bpl.w	25eb0 <rpc_ip_event_handler+0xe0>
   2619a:	6963      	ldr	r3, [r4, #20]
   2619c:	2b00      	cmp	r3, #0
   2619e:	f47f af77 	bne.w	26090 <rpc_ip_event_handler+0x2c0>
   261a2:	6823      	ldr	r3, [r4, #0]
   261a4:	2b00      	cmp	r3, #0
   261a6:	d071      	beq.n	2628c <rpc_ip_event_handler+0x4bc>
   261a8:	2001      	movs	r0, #1
   261aa:	4b53      	ldr	r3, [pc, #332]	; (262f8 <rpc_ip_event_handler+0x528>)
   261ac:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
   261b0:	683b      	ldr	r3, [r7, #0]
   261b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   261b6:	603b      	str	r3, [r7, #0]
   261b8:	e66c      	b.n	25e94 <rpc_ip_event_handler+0xc4>
   261ba:	683b      	ldr	r3, [r7, #0]
   261bc:	025a      	lsls	r2, r3, #9
   261be:	f57f ae77 	bpl.w	25eb0 <rpc_ip_event_handler+0xe0>
   261c2:	6960      	ldr	r0, [r4, #20]
   261c4:	2800      	cmp	r0, #0
   261c6:	f47f af7f 	bne.w	260c8 <rpc_ip_event_handler+0x2f8>
   261ca:	683b      	ldr	r3, [r7, #0]
   261cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   261d0:	603b      	str	r3, [r7, #0]
   261d2:	e65f      	b.n	25e94 <rpc_ip_event_handler+0xc4>
   261d4:	683b      	ldr	r3, [r7, #0]
   261d6:	b29b      	uxth	r3, r3
   261d8:	2b06      	cmp	r3, #6
   261da:	f47f ae69 	bne.w	25eb0 <rpc_ip_event_handler+0xe0>
   261de:	6960      	ldr	r0, [r4, #20]
   261e0:	2800      	cmp	r0, #0
   261e2:	f47f af71 	bne.w	260c8 <rpc_ip_event_handler+0x2f8>
   261e6:	683b      	ldr	r3, [r7, #0]
   261e8:	0c1b      	lsrs	r3, r3, #16
   261ea:	041b      	lsls	r3, r3, #16
   261ec:	f043 0307 	orr.w	r3, r3, #7
   261f0:	603b      	str	r3, [r7, #0]
   261f2:	e64f      	b.n	25e94 <rpc_ip_event_handler+0xc4>
   261f4:	683b      	ldr	r3, [r7, #0]
   261f6:	0299      	lsls	r1, r3, #10
   261f8:	f57f ae5a 	bpl.w	25eb0 <rpc_ip_event_handler+0xe0>
   261fc:	6963      	ldr	r3, [r4, #20]
   261fe:	b33b      	cbz	r3, 26250 <rpc_ip_event_handler+0x480>
   26200:	2b6b      	cmp	r3, #107	; 0x6b
   26202:	f47f ae2b 	bne.w	25e5c <rpc_ip_event_handler+0x8c>
   26206:	693b      	ldr	r3, [r7, #16]
   26208:	2b01      	cmp	r3, #1
   2620a:	d041      	beq.n	26290 <rpc_ip_event_handler+0x4c0>
   2620c:	230c      	movs	r3, #12
   2620e:	e62b      	b.n	25e68 <rpc_ip_event_handler+0x98>
   26210:	232d      	movs	r3, #45	; 0x2d
   26212:	e743      	b.n	2609c <rpc_ip_event_handler+0x2cc>
   26214:	2239      	movs	r2, #57	; 0x39
   26216:	683b      	ldr	r3, [r7, #0]
   26218:	2000      	movs	r0, #0
   2621a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   2621e:	603b      	str	r3, [r7, #0]
   26220:	607a      	str	r2, [r7, #4]
   26222:	60ba      	str	r2, [r7, #8]
   26224:	e636      	b.n	25e94 <rpc_ip_event_handler+0xc4>
   26226:	6820      	ldr	r0, [r4, #0]
   26228:	f7fe f9e2 	bl	245f0 <rpc_ip_client_data_free>
   2622c:	4628      	mov	r0, r5
   2622e:	e631      	b.n	25e94 <rpc_ip_event_handler+0xc4>
   26230:	683b      	ldr	r3, [r7, #0]
   26232:	2000      	movs	r0, #0
   26234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   26238:	603b      	str	r3, [r7, #0]
   2623a:	683b      	ldr	r3, [r7, #0]
   2623c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   26240:	603b      	str	r3, [r7, #0]
   26242:	683b      	ldr	r3, [r7, #0]
   26244:	0c1b      	lsrs	r3, r3, #16
   26246:	041b      	lsls	r3, r3, #16
   26248:	f043 0305 	orr.w	r3, r3, #5
   2624c:	603b      	str	r3, [r7, #0]
   2624e:	e621      	b.n	25e94 <rpc_ip_event_handler+0xc4>
   26250:	683b      	ldr	r3, [r7, #0]
   26252:	4a29      	ldr	r2, [pc, #164]	; (262f8 <rpc_ip_event_handler+0x528>)
   26254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   26258:	603b      	str	r3, [r7, #0]
   2625a:	2001      	movs	r0, #1
   2625c:	f842 4026 	str.w	r4, [r2, r6, lsl #2]
   26260:	e618      	b.n	25e94 <rpc_ip_event_handler+0xc4>
   26262:	2002      	movs	r0, #2
   26264:	e616      	b.n	25e94 <rpc_ip_event_handler+0xc4>
   26266:	683b      	ldr	r3, [r7, #0]
   26268:	2000      	movs	r0, #0
   2626a:	0c1b      	lsrs	r3, r3, #16
   2626c:	041b      	lsls	r3, r3, #16
   2626e:	f043 0304 	orr.w	r3, r3, #4
   26272:	603b      	str	r3, [r7, #0]
   26274:	e60e      	b.n	25e94 <rpc_ip_event_handler+0xc4>
   26276:	683b      	ldr	r3, [r7, #0]
   26278:	0c1b      	lsrs	r3, r3, #16
   2627a:	041b      	lsls	r3, r3, #16
   2627c:	f043 030e 	orr.w	r3, r3, #14
   26280:	603b      	str	r3, [r7, #0]
   26282:	e607      	b.n	25e94 <rpc_ip_event_handler+0xc4>
   26284:	8a65      	ldrh	r5, [r4, #18]
   26286:	b95d      	cbnz	r5, 262a0 <rpc_ip_event_handler+0x4d0>
   26288:	462e      	mov	r6, r5
   2628a:	e64e      	b.n	25f2a <rpc_ip_event_handler+0x15a>
   2628c:	2000      	movs	r0, #0
   2628e:	e78f      	b.n	261b0 <rpc_ip_event_handler+0x3e0>
   26290:	220c      	movs	r2, #12
   26292:	683b      	ldr	r3, [r7, #0]
   26294:	2000      	movs	r0, #0
   26296:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   2629a:	603b      	str	r3, [r7, #0]
   2629c:	607a      	str	r2, [r7, #4]
   2629e:	e5f9      	b.n	25e94 <rpc_ip_event_handler+0xc4>
   262a0:	2024      	movs	r0, #36	; 0x24
   262a2:	f003 fe3f 	bl	29f24 <nrf_malloc>
   262a6:	4606      	mov	r6, r0
   262a8:	2800      	cmp	r0, #0
   262aa:	d0da      	beq.n	26262 <rpc_ip_event_handler+0x492>
   262ac:	8a62      	ldrh	r2, [r4, #18]
   262ae:	2a10      	cmp	r2, #16
   262b0:	d009      	beq.n	262c6 <rpc_ip_event_handler+0x4f6>
   262b2:	2a04      	cmp	r2, #4
   262b4:	d013      	beq.n	262de <rpc_ip_event_handler+0x50e>
   262b6:	6820      	ldr	r0, [r4, #0]
   262b8:	f7fe f99a 	bl	245f0 <rpc_ip_client_data_free>
   262bc:	4630      	mov	r0, r6
   262be:	f003 fe3b 	bl	29f38 <nrf_free>
   262c2:	2000      	movs	r0, #0
   262c4:	e5e6      	b.n	25e94 <rpc_ip_event_handler+0xc4>
   262c6:	230a      	movs	r3, #10
   262c8:	2524      	movs	r5, #36	; 0x24
   262ca:	6043      	str	r3, [r0, #4]
   262cc:	7005      	strb	r5, [r0, #0]
   262ce:	8a23      	ldrh	r3, [r4, #16]
   262d0:	f104 0114 	add.w	r1, r4, #20
   262d4:	8103      	strh	r3, [r0, #8]
   262d6:	3010      	adds	r0, #16
   262d8:	f012 fe73 	bl	38fc2 <memcpy>
   262dc:	e625      	b.n	25f2a <rpc_ip_event_handler+0x15a>
   262de:	2302      	movs	r3, #2
   262e0:	2510      	movs	r5, #16
   262e2:	6043      	str	r3, [r0, #4]
   262e4:	7005      	strb	r5, [r0, #0]
   262e6:	8a23      	ldrh	r3, [r4, #16]
   262e8:	f104 0114 	add.w	r1, r4, #20
   262ec:	8103      	strh	r3, [r0, #8]
   262ee:	300c      	adds	r0, #12
   262f0:	f012 fe67 	bl	38fc2 <memcpy>
   262f4:	e619      	b.n	25f2a <rpc_ip_event_handler+0x15a>
   262f6:	bf00      	nop
   262f8:	200226e0 	.word	0x200226e0

000262fc <rpc_handle_ctrl_message>:
   262fc:	2902      	cmp	r1, #2
   262fe:	b510      	push	{r4, lr}
   26300:	4604      	mov	r4, r0
   26302:	d00c      	beq.n	2631e <rpc_handle_ctrl_message+0x22>
   26304:	2904      	cmp	r1, #4
   26306:	d008      	beq.n	2631a <rpc_handle_ctrl_message+0x1e>
   26308:	2901      	cmp	r1, #1
   2630a:	d006      	beq.n	2631a <rpc_handle_ctrl_message+0x1e>
   2630c:	6880      	ldr	r0, [r0, #8]
   2630e:	b108      	cbz	r0, 26314 <rpc_handle_ctrl_message+0x18>
   26310:	f7fc fc9e 	bl	22c50 <rpc_transport_data_free>
   26314:	4620      	mov	r0, r4
   26316:	f7fc fc99 	bl	22c4c <rpc_transport_rpc_free>
   2631a:	2000      	movs	r0, #0
   2631c:	bd10      	pop	{r4, pc}
   2631e:	6880      	ldr	r0, [r0, #8]
   26320:	2800      	cmp	r0, #0
   26322:	d0fa      	beq.n	2631a <rpc_handle_ctrl_message+0x1e>
   26324:	f7fc fc94 	bl	22c50 <rpc_transport_data_free>
   26328:	2000      	movs	r0, #0
   2632a:	bd10      	pop	{r4, pc}

0002632c <rpc_handle_data_message>:
   2632c:	4b23      	ldr	r3, [pc, #140]	; (263bc <rpc_handle_data_message+0x90>)
   2632e:	6802      	ldr	r2, [r0, #0]
   26330:	8819      	ldrh	r1, [r3, #0]
   26332:	b292      	uxth	r2, r2
   26334:	4291      	cmp	r1, r2
   26336:	d027      	beq.n	26388 <rpc_handle_data_message+0x5c>
   26338:	8a19      	ldrh	r1, [r3, #16]
   2633a:	4291      	cmp	r1, r2
   2633c:	d02a      	beq.n	26394 <rpc_handle_data_message+0x68>
   2633e:	8c19      	ldrh	r1, [r3, #32]
   26340:	4291      	cmp	r1, r2
   26342:	d02b      	beq.n	2639c <rpc_handle_data_message+0x70>
   26344:	8e19      	ldrh	r1, [r3, #48]	; 0x30
   26346:	4291      	cmp	r1, r2
   26348:	d02a      	beq.n	263a0 <rpc_handle_data_message+0x74>
   2634a:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
   2634e:	4291      	cmp	r1, r2
   26350:	d028      	beq.n	263a4 <rpc_handle_data_message+0x78>
   26352:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
   26356:	4291      	cmp	r1, r2
   26358:	d026      	beq.n	263a8 <rpc_handle_data_message+0x7c>
   2635a:	f8b3 1060 	ldrh.w	r1, [r3, #96]	; 0x60
   2635e:	4291      	cmp	r1, r2
   26360:	d026      	beq.n	263b0 <rpc_handle_data_message+0x84>
   26362:	f8b3 1070 	ldrh.w	r1, [r3, #112]	; 0x70
   26366:	4291      	cmp	r1, r2
   26368:	d024      	beq.n	263b4 <rpc_handle_data_message+0x88>
   2636a:	f8b3 1080 	ldrh.w	r1, [r3, #128]	; 0x80
   2636e:	4291      	cmp	r1, r2
   26370:	d01c      	beq.n	263ac <rpc_handle_data_message+0x80>
   26372:	f8b3 1090 	ldrh.w	r1, [r3, #144]	; 0x90
   26376:	4291      	cmp	r1, r2
   26378:	d01e      	beq.n	263b8 <rpc_handle_data_message+0x8c>
   2637a:	6880      	ldr	r0, [r0, #8]
   2637c:	b160      	cbz	r0, 26398 <rpc_handle_data_message+0x6c>
   2637e:	b510      	push	{r4, lr}
   26380:	f7fc fc66 	bl	22c50 <rpc_transport_data_free>
   26384:	2000      	movs	r0, #0
   26386:	bd10      	pop	{r4, pc}
   26388:	2200      	movs	r2, #0
   2638a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   2638e:	685a      	ldr	r2, [r3, #4]
   26390:	68d9      	ldr	r1, [r3, #12]
   26392:	4710      	bx	r2
   26394:	2201      	movs	r2, #1
   26396:	e7f8      	b.n	2638a <rpc_handle_data_message+0x5e>
   26398:	2000      	movs	r0, #0
   2639a:	4770      	bx	lr
   2639c:	2202      	movs	r2, #2
   2639e:	e7f4      	b.n	2638a <rpc_handle_data_message+0x5e>
   263a0:	2203      	movs	r2, #3
   263a2:	e7f2      	b.n	2638a <rpc_handle_data_message+0x5e>
   263a4:	2204      	movs	r2, #4
   263a6:	e7f0      	b.n	2638a <rpc_handle_data_message+0x5e>
   263a8:	2205      	movs	r2, #5
   263aa:	e7ee      	b.n	2638a <rpc_handle_data_message+0x5e>
   263ac:	2208      	movs	r2, #8
   263ae:	e7ec      	b.n	2638a <rpc_handle_data_message+0x5e>
   263b0:	2206      	movs	r2, #6
   263b2:	e7ea      	b.n	2638a <rpc_handle_data_message+0x5e>
   263b4:	2207      	movs	r2, #7
   263b6:	e7e8      	b.n	2638a <rpc_handle_data_message+0x5e>
   263b8:	2209      	movs	r2, #9
   263ba:	e7e6      	b.n	2638a <rpc_handle_data_message+0x5e>
   263bc:	20022708 	.word	0x20022708

000263c0 <rpc_framework_init>:
   263c0:	b508      	push	{r3, lr}
   263c2:	22a0      	movs	r2, #160	; 0xa0
   263c4:	2100      	movs	r1, #0
   263c6:	4802      	ldr	r0, [pc, #8]	; (263d0 <rpc_framework_init+0x10>)
   263c8:	f012 fe35 	bl	39036 <memset>
   263cc:	2000      	movs	r0, #0
   263ce:	bd08      	pop	{r3, pc}
   263d0:	20022708 	.word	0x20022708

000263d4 <rpc_client_register>:
   263d4:	8803      	ldrh	r3, [r0, #0]
   263d6:	2b00      	cmp	r3, #0
   263d8:	d045      	beq.n	26466 <rpc_client_register+0x92>
   263da:	6842      	ldr	r2, [r0, #4]
   263dc:	4601      	mov	r1, r0
   263de:	2a00      	cmp	r2, #0
   263e0:	d050      	beq.n	26484 <rpc_client_register+0xb0>
   263e2:	4a30      	ldr	r2, [pc, #192]	; (264a4 <rpc_client_register+0xd0>)
   263e4:	8810      	ldrh	r0, [r2, #0]
   263e6:	4283      	cmp	r3, r0
   263e8:	d03d      	beq.n	26466 <rpc_client_register+0x92>
   263ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   263ee:	8a14      	ldrh	r4, [r2, #16]
   263f0:	42a3      	cmp	r3, r4
   263f2:	d035      	beq.n	26460 <rpc_client_register+0x8c>
   263f4:	8c15      	ldrh	r5, [r2, #32]
   263f6:	42ab      	cmp	r3, r5
   263f8:	d032      	beq.n	26460 <rpc_client_register+0x8c>
   263fa:	8e16      	ldrh	r6, [r2, #48]	; 0x30
   263fc:	42b3      	cmp	r3, r6
   263fe:	d02f      	beq.n	26460 <rpc_client_register+0x8c>
   26400:	f8b2 7040 	ldrh.w	r7, [r2, #64]	; 0x40
   26404:	42bb      	cmp	r3, r7
   26406:	d02b      	beq.n	26460 <rpc_client_register+0x8c>
   26408:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
   2640c:	4563      	cmp	r3, ip
   2640e:	d027      	beq.n	26460 <rpc_client_register+0x8c>
   26410:	f8b2 e060 	ldrh.w	lr, [r2, #96]	; 0x60
   26414:	4573      	cmp	r3, lr
   26416:	d023      	beq.n	26460 <rpc_client_register+0x8c>
   26418:	f8b2 8070 	ldrh.w	r8, [r2, #112]	; 0x70
   2641c:	4543      	cmp	r3, r8
   2641e:	d01f      	beq.n	26460 <rpc_client_register+0x8c>
   26420:	f8b2 9080 	ldrh.w	r9, [r2, #128]	; 0x80
   26424:	454b      	cmp	r3, r9
   26426:	d01b      	beq.n	26460 <rpc_client_register+0x8c>
   26428:	f8b2 a090 	ldrh.w	sl, [r2, #144]	; 0x90
   2642c:	4553      	cmp	r3, sl
   2642e:	d017      	beq.n	26460 <rpc_client_register+0x8c>
   26430:	b1e0      	cbz	r0, 2646c <rpc_client_register+0x98>
   26432:	b35c      	cbz	r4, 2648c <rpc_client_register+0xb8>
   26434:	b365      	cbz	r5, 26490 <rpc_client_register+0xbc>
   26436:	b36e      	cbz	r6, 26494 <rpc_client_register+0xc0>
   26438:	b377      	cbz	r7, 26498 <rpc_client_register+0xc4>
   2643a:	f1bc 0f00 	cmp.w	ip, #0
   2643e:	d02d      	beq.n	2649c <rpc_client_register+0xc8>
   26440:	f1be 0f00 	cmp.w	lr, #0
   26444:	d020      	beq.n	26488 <rpc_client_register+0xb4>
   26446:	f1b8 0f00 	cmp.w	r8, #0
   2644a:	d029      	beq.n	264a0 <rpc_client_register+0xcc>
   2644c:	f1b9 0f00 	cmp.w	r9, #0
   26450:	d00b      	beq.n	2646a <rpc_client_register+0x96>
   26452:	2009      	movs	r0, #9
   26454:	f1ba 0f00 	cmp.w	sl, #0
   26458:	d008      	beq.n	2646c <rpc_client_register+0x98>
   2645a:	2004      	movs	r0, #4
   2645c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   26460:	2007      	movs	r0, #7
   26462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   26466:	2007      	movs	r0, #7
   26468:	4770      	bx	lr
   2646a:	2008      	movs	r0, #8
   2646c:	0100      	lsls	r0, r0, #4
   2646e:	5213      	strh	r3, [r2, r0]
   26470:	684b      	ldr	r3, [r1, #4]
   26472:	4402      	add	r2, r0
   26474:	6053      	str	r3, [r2, #4]
   26476:	688b      	ldr	r3, [r1, #8]
   26478:	2000      	movs	r0, #0
   2647a:	6093      	str	r3, [r2, #8]
   2647c:	68cb      	ldr	r3, [r1, #12]
   2647e:	60d3      	str	r3, [r2, #12]
   26480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   26484:	200e      	movs	r0, #14
   26486:	4770      	bx	lr
   26488:	2006      	movs	r0, #6
   2648a:	e7ef      	b.n	2646c <rpc_client_register+0x98>
   2648c:	2001      	movs	r0, #1
   2648e:	e7ed      	b.n	2646c <rpc_client_register+0x98>
   26490:	2002      	movs	r0, #2
   26492:	e7eb      	b.n	2646c <rpc_client_register+0x98>
   26494:	2003      	movs	r0, #3
   26496:	e7e9      	b.n	2646c <rpc_client_register+0x98>
   26498:	2004      	movs	r0, #4
   2649a:	e7e7      	b.n	2646c <rpc_client_register+0x98>
   2649c:	2005      	movs	r0, #5
   2649e:	e7e5      	b.n	2646c <rpc_client_register+0x98>
   264a0:	2007      	movs	r0, #7
   264a2:	e7e3      	b.n	2646c <rpc_client_register+0x98>
   264a4:	20022708 	.word	0x20022708

000264a8 <rpc_message_send>:
   264a8:	b150      	cbz	r0, 264c0 <rpc_message_send+0x18>
   264aa:	b159      	cbz	r1, 264c4 <rpc_message_send+0x1c>
   264ac:	684b      	ldr	r3, [r1, #4]
   264ae:	8008      	strh	r0, [r1, #0]
   264b0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   264b4:	f043 0302 	orr.w	r3, r3, #2
   264b8:	604b      	str	r3, [r1, #4]
   264ba:	4608      	mov	r0, r1
   264bc:	f7fc bbc0 	b.w	22c40 <rpc_transport_send>
   264c0:	2007      	movs	r0, #7
   264c2:	4770      	bx	lr
   264c4:	200e      	movs	r0, #14
   264c6:	4770      	bx	lr

000264c8 <rpc_message_alloc>:
   264c8:	b342      	cbz	r2, 2651c <rpc_message_alloc+0x54>
   264ca:	b328      	cbz	r0, 26518 <rpc_message_alloc+0x50>
   264cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   264ce:	2300      	movs	r3, #0
   264d0:	4616      	mov	r6, r2
   264d2:	460c      	mov	r4, r1
   264d4:	4605      	mov	r5, r0
   264d6:	6013      	str	r3, [r2, #0]
   264d8:	b171      	cbz	r1, 264f8 <rpc_message_alloc+0x30>
   264da:	4608      	mov	r0, r1
   264dc:	f7fc fbb4 	bl	22c48 <rpc_transport_data_alloc>
   264e0:	4607      	mov	r7, r0
   264e2:	b1b8      	cbz	r0, 26514 <rpc_message_alloc+0x4c>
   264e4:	f7fc fbae 	bl	22c44 <rpc_transport_rpc_alloc>
   264e8:	4603      	mov	r3, r0
   264ea:	b180      	cbz	r0, 2650e <rpc_message_alloc+0x46>
   264ec:	2000      	movs	r0, #0
   264ee:	60dc      	str	r4, [r3, #12]
   264f0:	609f      	str	r7, [r3, #8]
   264f2:	801d      	strh	r5, [r3, #0]
   264f4:	6033      	str	r3, [r6, #0]
   264f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   264f8:	f7fc fba4 	bl	22c44 <rpc_transport_rpc_alloc>
   264fc:	4603      	mov	r3, r0
   264fe:	b148      	cbz	r0, 26514 <rpc_message_alloc+0x4c>
   26500:	4627      	mov	r7, r4
   26502:	60dc      	str	r4, [r3, #12]
   26504:	609f      	str	r7, [r3, #8]
   26506:	801d      	strh	r5, [r3, #0]
   26508:	2000      	movs	r0, #0
   2650a:	6033      	str	r3, [r6, #0]
   2650c:	e7f3      	b.n	264f6 <rpc_message_alloc+0x2e>
   2650e:	4638      	mov	r0, r7
   26510:	f7fc fb9e 	bl	22c50 <rpc_transport_data_free>
   26514:	2004      	movs	r0, #4
   26516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26518:	2007      	movs	r0, #7
   2651a:	4770      	bx	lr
   2651c:	200e      	movs	r0, #14
   2651e:	4770      	bx	lr

00026520 <rpc_message_free>:
   26520:	b130      	cbz	r0, 26530 <rpc_message_free+0x10>
   26522:	b139      	cbz	r1, 26534 <rpc_message_free+0x14>
   26524:	b508      	push	{r3, lr}
   26526:	4608      	mov	r0, r1
   26528:	f7fc fb90 	bl	22c4c <rpc_transport_rpc_free>
   2652c:	2000      	movs	r0, #0
   2652e:	bd08      	pop	{r3, pc}
   26530:	2007      	movs	r0, #7
   26532:	4770      	bx	lr
   26534:	200e      	movs	r0, #14
   26536:	4770      	bx	lr

00026538 <rpc_message_data_free>:
   26538:	b130      	cbz	r0, 26548 <rpc_message_data_free+0x10>
   2653a:	b139      	cbz	r1, 2654c <rpc_message_data_free+0x14>
   2653c:	b508      	push	{r3, lr}
   2653e:	4608      	mov	r0, r1
   26540:	f7fc fb86 	bl	22c50 <rpc_transport_data_free>
   26544:	2000      	movs	r0, #0
   26546:	bd08      	pop	{r3, pc}
   26548:	2007      	movs	r0, #7
   2654a:	4770      	bx	lr
   2654c:	200e      	movs	r0, #14
   2654e:	4770      	bx	lr

00026550 <packet_free_cb>:
   26550:	b510      	push	{r4, lr}
   26552:	4604      	mov	r4, r0
   26554:	b118      	cbz	r0, 2655e <packet_free_cb+0xe>
   26556:	6800      	ldr	r0, [r0, #0]
   26558:	b108      	cbz	r0, 2655e <packet_free_cb+0xe>
   2655a:	f002 feff 	bl	2935c <rpc_gnss_client_data_free>
   2655e:	68a0      	ldr	r0, [r4, #8]
   26560:	b118      	cbz	r0, 2656a <packet_free_cb+0x1a>
   26562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   26566:	f003 bce7 	b.w	29f38 <nrf_free>
   2656a:	bd10      	pop	{r4, pc}

0002656c <rpc_gnss_event_handler>:
   2656c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2656e:	4b64      	ldr	r3, [pc, #400]	; (26700 <rpc_gnss_event_handler+0x194>)
   26570:	4606      	mov	r6, r0
   26572:	6800      	ldr	r0, [r0, #0]
   26574:	881b      	ldrh	r3, [r3, #0]
   26576:	6802      	ldr	r2, [r0, #0]
   26578:	b085      	sub	sp, #20
   2657a:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   2657e:	460d      	mov	r5, r1
   26580:	d037      	beq.n	265f2 <rpc_gnss_event_handler+0x86>
   26582:	f505 433f 	add.w	r3, r5, #48896	; 0xbf00
   26586:	33ff      	adds	r3, #255	; 0xff
   26588:	b29b      	uxth	r3, r3
   2658a:	2b02      	cmp	r3, #2
   2658c:	d811      	bhi.n	265b2 <rpc_gnss_event_handler+0x46>
   2658e:	4c5d      	ldr	r4, [pc, #372]	; (26704 <rpc_gnss_event_handler+0x198>)
   26590:	6823      	ldr	r3, [r4, #0]
   26592:	075a      	lsls	r2, r3, #29
   26594:	d410      	bmi.n	265b8 <rpc_gnss_event_handler+0x4c>
   26596:	6823      	ldr	r3, [r4, #0]
   26598:	079b      	lsls	r3, r3, #30
   2659a:	d503      	bpl.n	265a4 <rpc_gnss_event_handler+0x38>
   2659c:	f244 0303 	movw	r3, #16387	; 0x4003
   265a0:	429d      	cmp	r5, r3
   265a2:	d009      	beq.n	265b8 <rpc_gnss_event_handler+0x4c>
   265a4:	6830      	ldr	r0, [r6, #0]
   265a6:	b120      	cbz	r0, 265b2 <rpc_gnss_event_handler+0x46>
   265a8:	f002 fed8 	bl	2935c <rpc_gnss_client_data_free>
   265ac:	2200      	movs	r2, #0
   265ae:	4b56      	ldr	r3, [pc, #344]	; (26708 <rpc_gnss_event_handler+0x19c>)
   265b0:	601a      	str	r2, [r3, #0]
   265b2:	2000      	movs	r0, #0
   265b4:	b005      	add	sp, #20
   265b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   265b8:	2002      	movs	r0, #2
   265ba:	f003 fcb3 	bl	29f24 <nrf_malloc>
   265be:	4607      	mov	r7, r0
   265c0:	2800      	cmp	r0, #0
   265c2:	f000 8094 	beq.w	266ee <rpc_gnss_event_handler+0x182>
   265c6:	2302      	movs	r3, #2
   265c8:	8005      	strh	r5, [r0, #0]
   265ca:	6831      	ldr	r1, [r6, #0]
   265cc:	6872      	ldr	r2, [r6, #4]
   265ce:	484f      	ldr	r0, [pc, #316]	; (2670c <rpc_gnss_event_handler+0x1a0>)
   265d0:	e88d 0086 	stmia.w	sp, {r1, r2, r7}
   265d4:	6800      	ldr	r0, [r0, #0]
   265d6:	9303      	str	r3, [sp, #12]
   265d8:	6803      	ldr	r3, [r0, #0]
   265da:	4669      	mov	r1, sp
   265dc:	685b      	ldr	r3, [r3, #4]
   265de:	4798      	blx	r3
   265e0:	3001      	adds	r0, #1
   265e2:	d071      	beq.n	266c8 <rpc_gnss_event_handler+0x15c>
   265e4:	2000      	movs	r0, #0
   265e6:	6823      	ldr	r3, [r4, #0]
   265e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   265ec:	6023      	str	r3, [r4, #0]
   265ee:	b005      	add	sp, #20
   265f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   265f2:	4c44      	ldr	r4, [pc, #272]	; (26704 <rpc_gnss_event_handler+0x198>)
   265f4:	4f44      	ldr	r7, [pc, #272]	; (26708 <rpc_gnss_event_handler+0x19c>)
   265f6:	6823      	ldr	r3, [r4, #0]
   265f8:	6038      	str	r0, [r7, #0]
   265fa:	01d9      	lsls	r1, r3, #7
   265fc:	d523      	bpl.n	26646 <rpc_gnss_event_handler+0xda>
   265fe:	f242 1302 	movw	r3, #8450	; 0x2102
   26602:	429d      	cmp	r5, r3
   26604:	d11f      	bne.n	26646 <rpc_gnss_event_handler+0xda>
   26606:	6843      	ldr	r3, [r0, #4]
   26608:	b91b      	cbnz	r3, 26612 <rpc_gnss_event_handler+0xa6>
   2660a:	6823      	ldr	r3, [r4, #0]
   2660c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   26610:	6023      	str	r3, [r4, #0]
   26612:	6823      	ldr	r3, [r4, #0]
   26614:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   26618:	6023      	str	r3, [r4, #0]
   2661a:	6823      	ldr	r3, [r4, #0]
   2661c:	025a      	lsls	r2, r3, #9
   2661e:	d430      	bmi.n	26682 <rpc_gnss_event_handler+0x116>
   26620:	f242 0305 	movw	r3, #8197	; 0x2005
   26624:	429d      	cmp	r5, r3
   26626:	d12c      	bne.n	26682 <rpc_gnss_event_handler+0x116>
   26628:	6823      	ldr	r3, [r4, #0]
   2662a:	0299      	lsls	r1, r3, #10
   2662c:	d529      	bpl.n	26682 <rpc_gnss_event_handler+0x116>
   2662e:	6843      	ldr	r3, [r0, #4]
   26630:	2b00      	cmp	r3, #0
   26632:	d157      	bne.n	266e4 <rpc_gnss_event_handler+0x178>
   26634:	6823      	ldr	r3, [r4, #0]
   26636:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   2663a:	6023      	str	r3, [r4, #0]
   2663c:	6823      	ldr	r3, [r4, #0]
   2663e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   26642:	6023      	str	r3, [r4, #0]
   26644:	e01d      	b.n	26682 <rpc_gnss_event_handler+0x116>
   26646:	6823      	ldr	r3, [r4, #0]
   26648:	025b      	lsls	r3, r3, #9
   2664a:	d50e      	bpl.n	2666a <rpc_gnss_event_handler+0xfe>
   2664c:	f242 1303 	movw	r3, #8451	; 0x2103
   26650:	429d      	cmp	r5, r3
   26652:	d10a      	bne.n	2666a <rpc_gnss_event_handler+0xfe>
   26654:	6843      	ldr	r3, [r0, #4]
   26656:	b91b      	cbnz	r3, 26660 <rpc_gnss_event_handler+0xf4>
   26658:	6823      	ldr	r3, [r4, #0]
   2665a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   2665e:	6023      	str	r3, [r4, #0]
   26660:	6823      	ldr	r3, [r4, #0]
   26662:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   26666:	6023      	str	r3, [r4, #0]
   26668:	e00b      	b.n	26682 <rpc_gnss_event_handler+0x116>
   2666a:	f242 0301 	movw	r3, #8193	; 0x2001
   2666e:	429d      	cmp	r5, r3
   26670:	d10c      	bne.n	2668c <rpc_gnss_event_handler+0x120>
   26672:	6843      	ldr	r3, [r0, #4]
   26674:	b92b      	cbnz	r3, 26682 <rpc_gnss_event_handler+0x116>
   26676:	6823      	ldr	r3, [r4, #0]
   26678:	0c1b      	lsrs	r3, r3, #16
   2667a:	041b      	lsls	r3, r3, #16
   2667c:	f043 0302 	orr.w	r3, r3, #2
   26680:	6023      	str	r3, [r4, #0]
   26682:	f002 fe6b 	bl	2935c <rpc_gnss_client_data_free>
   26686:	2300      	movs	r3, #0
   26688:	603b      	str	r3, [r7, #0]
   2668a:	e77a      	b.n	26582 <rpc_gnss_event_handler+0x16>
   2668c:	f242 0304 	movw	r3, #8196	; 0x2004
   26690:	429d      	cmp	r5, r3
   26692:	d1c5      	bne.n	26620 <rpc_gnss_event_handler+0xb4>
   26694:	6843      	ldr	r3, [r0, #4]
   26696:	b993      	cbnz	r3, 266be <rpc_gnss_event_handler+0x152>
   26698:	6823      	ldr	r3, [r4, #0]
   2669a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   2669e:	6023      	str	r3, [r4, #0]
   266a0:	6823      	ldr	r3, [r4, #0]
   266a2:	b29b      	uxth	r3, r3
   266a4:	2b03      	cmp	r3, #3
   266a6:	6823      	ldr	r3, [r4, #0]
   266a8:	d016      	beq.n	266d8 <rpc_gnss_event_handler+0x16c>
   266aa:	b29b      	uxth	r3, r3
   266ac:	2b04      	cmp	r3, #4
   266ae:	d1d7      	bne.n	26660 <rpc_gnss_event_handler+0xf4>
   266b0:	6823      	ldr	r3, [r4, #0]
   266b2:	0c1b      	lsrs	r3, r3, #16
   266b4:	041b      	lsls	r3, r3, #16
   266b6:	f043 0302 	orr.w	r3, r3, #2
   266ba:	6023      	str	r3, [r4, #0]
   266bc:	e7d0      	b.n	26660 <rpc_gnss_event_handler+0xf4>
   266be:	6823      	ldr	r3, [r4, #0]
   266c0:	b29b      	uxth	r3, r3
   266c2:	2b03      	cmp	r3, #3
   266c4:	d1cc      	bne.n	26660 <rpc_gnss_event_handler+0xf4>
   266c6:	e7f3      	b.n	266b0 <rpc_gnss_event_handler+0x144>
   266c8:	4638      	mov	r0, r7
   266ca:	f003 fc35 	bl	29f38 <nrf_free>
   266ce:	6830      	ldr	r0, [r6, #0]
   266d0:	2800      	cmp	r0, #0
   266d2:	f47f af69 	bne.w	265a8 <rpc_gnss_event_handler+0x3c>
   266d6:	e76c      	b.n	265b2 <rpc_gnss_event_handler+0x46>
   266d8:	0c1b      	lsrs	r3, r3, #16
   266da:	041b      	lsls	r3, r3, #16
   266dc:	f043 0304 	orr.w	r3, r3, #4
   266e0:	6023      	str	r3, [r4, #0]
   266e2:	e7bd      	b.n	26660 <rpc_gnss_event_handler+0xf4>
   266e4:	6823      	ldr	r3, [r4, #0]
   266e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   266ea:	6023      	str	r3, [r4, #0]
   266ec:	e7c9      	b.n	26682 <rpc_gnss_event_handler+0x116>
   266ee:	6830      	ldr	r0, [r6, #0]
   266f0:	2800      	cmp	r0, #0
   266f2:	f43f af5e 	beq.w	265b2 <rpc_gnss_event_handler+0x46>
   266f6:	f002 fe31 	bl	2935c <rpc_gnss_client_data_free>
   266fa:	4b03      	ldr	r3, [pc, #12]	; (26708 <rpc_gnss_event_handler+0x19c>)
   266fc:	601f      	str	r7, [r3, #0]
   266fe:	e758      	b.n	265b2 <rpc_gnss_event_handler+0x46>
   26700:	2002761e 	.word	0x2002761e
   26704:	200227a8 	.word	0x200227a8
   26708:	200227ac 	.word	0x200227ac
   2670c:	200227b0 	.word	0x200227b0

00026710 <gnss_interface_write>:
   26710:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26714:	4a74      	ldr	r2, [pc, #464]	; (268e8 <gnss_interface_write+0x1d8>)
   26716:	b09f      	sub	sp, #124	; 0x7c
   26718:	4290      	cmp	r0, r2
   2671a:	9d26      	ldr	r5, [sp, #152]	; 0x98
   2671c:	f040 80d7 	bne.w	268ce <gnss_interface_write+0x1be>
   26720:	2900      	cmp	r1, #0
   26722:	f000 80c6 	beq.w	268b2 <gnss_interface_write+0x1a2>
   26726:	2d00      	cmp	r5, #0
   26728:	f000 80c3 	beq.w	268b2 <gnss_interface_write+0x1a2>
   2672c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2672e:	2a02      	cmp	r2, #2
   26730:	f040 80bf 	bne.w	268b2 <gnss_interface_write+0x1a2>
   26734:	4c6d      	ldr	r4, [pc, #436]	; (268ec <gnss_interface_write+0x1dc>)
   26736:	6822      	ldr	r2, [r4, #0]
   26738:	b292      	uxth	r2, r2
   2673a:	2a02      	cmp	r2, #2
   2673c:	d004      	beq.n	26748 <gnss_interface_write+0x38>
   2673e:	6822      	ldr	r2, [r4, #0]
   26740:	b292      	uxth	r2, r2
   26742:	2a04      	cmp	r2, #4
   26744:	f040 80bd 	bne.w	268c2 <gnss_interface_write+0x1b2>
   26748:	2b00      	cmp	r3, #0
   2674a:	f040 80c6 	bne.w	268da <gnss_interface_write+0x1ca>
   2674e:	6822      	ldr	r2, [r4, #0]
   26750:	0390      	lsls	r0, r2, #14
   26752:	d512      	bpl.n	2677a <gnss_interface_write+0x6a>
   26754:	6822      	ldr	r2, [r4, #0]
   26756:	882b      	ldrh	r3, [r5, #0]
   26758:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
   2675c:	6022      	str	r2, [r4, #0]
   2675e:	6822      	ldr	r2, [r4, #0]
   26760:	3b01      	subs	r3, #1
   26762:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   26766:	6022      	str	r2, [r4, #0]
   26768:	2b07      	cmp	r3, #7
   2676a:	f200 80a2 	bhi.w	268b2 <gnss_interface_write+0x1a2>
   2676e:	e8df f003 	tbb	[pc, r3]
   26772:	7d82      	.short	0x7d82
   26774:	646e7378 	.word	0x646e7378
   26778:	0869      	.short	0x0869
   2677a:	2000      	movs	r0, #0
   2677c:	b01f      	add	sp, #124	; 0x7c
   2677e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   26782:	4608      	mov	r0, r1
   26784:	a902      	add	r1, sp, #8
   26786:	f002 fd9d 	bl	292c4 <rpc_gnss_serialize_integrity>
   2678a:	2172      	movs	r1, #114	; 0x72
   2678c:	4668      	mov	r0, sp
   2678e:	f002 fdb3 	bl	292f8 <rpc_gnss_client_request_alloc>
   26792:	4605      	mov	r5, r0
   26794:	9800      	ldr	r0, [sp, #0]
   26796:	2d00      	cmp	r5, #0
   26798:	d172      	bne.n	26880 <gnss_interface_write+0x170>
   2679a:	2800      	cmp	r0, #0
   2679c:	d077      	beq.n	2688e <gnss_interface_write+0x17e>
   2679e:	f241 0605 	movw	r6, #4101	; 0x1005
   267a2:	f04f 0c49 	mov.w	ip, #73	; 0x49
   267a6:	2272      	movs	r2, #114	; 0x72
   267a8:	f04f 0e76 	mov.w	lr, #118	; 0x76
   267ac:	f04f 0943 	mov.w	r9, #67	; 0x43
   267b0:	f04f 0854 	mov.w	r8, #84	; 0x54
   267b4:	4f4e      	ldr	r7, [pc, #312]	; (268f0 <gnss_interface_write+0x1e0>)
   267b6:	a91e      	add	r1, sp, #120	; 0x78
   267b8:	883b      	ldrh	r3, [r7, #0]
   267ba:	f880 c00f 	strb.w	ip, [r0, #15]
   267be:	3301      	adds	r3, #1
   267c0:	b29b      	uxth	r3, r3
   267c2:	ea46 4c03 	orr.w	ip, r6, r3, lsl #16
   267c6:	f841 cd74 	str.w	ip, [r1, #-116]!
   267ca:	7145      	strb	r5, [r0, #5]
   267cc:	7185      	strb	r5, [r0, #6]
   267ce:	71c5      	strb	r5, [r0, #7]
   267d0:	7205      	strb	r5, [r0, #8]
   267d2:	7245      	strb	r5, [r0, #9]
   267d4:	7285      	strb	r5, [r0, #10]
   267d6:	72c5      	strb	r5, [r0, #11]
   267d8:	7102      	strb	r2, [r0, #4]
   267da:	f880 900c 	strb.w	r9, [r0, #12]
   267de:	f880 800d 	strb.w	r8, [r0, #13]
   267e2:	f880 e00e 	strb.w	lr, [r0, #14]
   267e6:	6800      	ldr	r0, [r0, #0]
   267e8:	803b      	strh	r3, [r7, #0]
   267ea:	f012 fbea 	bl	38fc2 <memcpy>
   267ee:	4b41      	ldr	r3, [pc, #260]	; (268f4 <gnss_interface_write+0x1e4>)
   267f0:	4631      	mov	r1, r6
   267f2:	9800      	ldr	r0, [sp, #0]
   267f4:	601d      	str	r5, [r3, #0]
   267f6:	f002 fd93 	bl	29320 <rpc_gnss_client_request_send>
   267fa:	2800      	cmp	r0, #0
   267fc:	d14e      	bne.n	2689c <gnss_interface_write+0x18c>
   267fe:	6823      	ldr	r3, [r4, #0]
   26800:	0299      	lsls	r1, r3, #10
   26802:	d50b      	bpl.n	2681c <gnss_interface_write+0x10c>
   26804:	4e3c      	ldr	r6, [pc, #240]	; (268f8 <gnss_interface_write+0x1e8>)
   26806:	4d38      	ldr	r5, [pc, #224]	; (268e8 <gnss_interface_write+0x1d8>)
   26808:	e000      	b.n	2680c <gnss_interface_write+0xfc>
   2680a:	b978      	cbnz	r0, 2682c <gnss_interface_write+0x11c>
   2680c:	4631      	mov	r1, r6
   2680e:	4628      	mov	r0, r5
   26810:	f7f9 fb72 	bl	1fef8 <bsd_os_timedwait>
   26814:	6823      	ldr	r3, [r4, #0]
   26816:	029a      	lsls	r2, r3, #10
   26818:	d4f7      	bmi.n	2680a <gnss_interface_write+0xfa>
   2681a:	b938      	cbnz	r0, 2682c <gnss_interface_write+0x11c>
   2681c:	6823      	ldr	r3, [r4, #0]
   2681e:	039b      	lsls	r3, r3, #14
   26820:	d4ab      	bmi.n	2677a <gnss_interface_write+0x6a>
   26822:	2005      	movs	r0, #5
   26824:	6823      	ldr	r3, [r4, #0]
   26826:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2682a:	6023      	str	r3, [r4, #0]
   2682c:	f7f9 fc0e 	bl	2004c <bsd_os_errno_set>
   26830:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26834:	b01f      	add	sp, #124	; 0x7c
   26836:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2683a:	4608      	mov	r0, r1
   2683c:	a902      	add	r1, sp, #8
   2683e:	f002 fcf9 	bl	29234 <rpc_gnss_serialize_time_and_sv_tow>
   26842:	e7a2      	b.n	2678a <gnss_interface_write+0x7a>
   26844:	4608      	mov	r0, r1
   26846:	a902      	add	r1, sp, #8
   26848:	f002 fd1c 	bl	29284 <rpc_gnss_serialize_location>
   2684c:	e79d      	b.n	2678a <gnss_interface_write+0x7a>
   2684e:	4608      	mov	r0, r1
   26850:	a902      	add	r1, sp, #8
   26852:	f002 fcd5 	bl	29200 <rpc_gnss_serialize_nequick>
   26856:	e798      	b.n	2678a <gnss_interface_write+0x7a>
   26858:	4608      	mov	r0, r1
   2685a:	a902      	add	r1, sp, #8
   2685c:	f002 fcac 	bl	291b8 <rpc_gnss_serialize_klob>
   26860:	e793      	b.n	2678a <gnss_interface_write+0x7a>
   26862:	4608      	mov	r0, r1
   26864:	a902      	add	r1, sp, #8
   26866:	f002 fc75 	bl	29154 <rpc_gnss_serialize_alm>
   2686a:	e78e      	b.n	2678a <gnss_interface_write+0x7a>
   2686c:	4608      	mov	r0, r1
   2686e:	a902      	add	r1, sp, #8
   26870:	f002 fc1e 	bl	290b0 <rpc_gnss_serialize_ephe>
   26874:	e789      	b.n	2678a <gnss_interface_write+0x7a>
   26876:	4608      	mov	r0, r1
   26878:	a902      	add	r1, sp, #8
   2687a:	f002 fbf7 	bl	2906c <rpc_gnss_serialize_utc>
   2687e:	e784      	b.n	2678a <gnss_interface_write+0x7a>
   26880:	b128      	cbz	r0, 2688e <gnss_interface_write+0x17e>
   26882:	6803      	ldr	r3, [r0, #0]
   26884:	b11b      	cbz	r3, 2688e <gnss_interface_write+0x17e>
   26886:	4618      	mov	r0, r3
   26888:	f002 fd68 	bl	2935c <rpc_gnss_client_data_free>
   2688c:	9800      	ldr	r0, [sp, #0]
   2688e:	f002 fd5d 	bl	2934c <rpc_gnss_client_message_free>
   26892:	2023      	movs	r0, #35	; 0x23
   26894:	f7f9 fbda 	bl	2004c <bsd_os_errno_set>
   26898:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2689c:	6823      	ldr	r3, [r4, #0]
   2689e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   268a2:	6023      	str	r3, [r4, #0]
   268a4:	6823      	ldr	r3, [r4, #0]
   268a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   268aa:	6023      	str	r3, [r4, #0]
   268ac:	b01f      	add	sp, #124	; 0x7c
   268ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   268b2:	2016      	movs	r0, #22
   268b4:	f7f9 fbca 	bl	2004c <bsd_os_errno_set>
   268b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   268bc:	b01f      	add	sp, #124	; 0x7c
   268be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   268c2:	2039      	movs	r0, #57	; 0x39
   268c4:	f7f9 fbc2 	bl	2004c <bsd_os_errno_set>
   268c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   268cc:	e756      	b.n	2677c <gnss_interface_write+0x6c>
   268ce:	2009      	movs	r0, #9
   268d0:	f7f9 fbbc 	bl	2004c <bsd_os_errno_set>
   268d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   268d8:	e750      	b.n	2677c <gnss_interface_write+0x6c>
   268da:	202d      	movs	r0, #45	; 0x2d
   268dc:	f7f9 fbb6 	bl	2004c <bsd_os_errno_set>
   268e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   268e4:	e74a      	b.n	2677c <gnss_interface_write+0x6c>
   268e6:	bf00      	nop
   268e8:	49765443 	.word	0x49765443
   268ec:	200227a8 	.word	0x200227a8
   268f0:	2002761e 	.word	0x2002761e
   268f4:	200227ac 	.word	0x200227ac
   268f8:	20020220 	.word	0x20020220

000268fc <gnss_interface_read>:
   268fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26900:	4c55      	ldr	r4, [pc, #340]	; (26a58 <gnss_interface_read+0x15c>)
   26902:	b0b7      	sub	sp, #220	; 0xdc
   26904:	42a0      	cmp	r0, r4
   26906:	f040 81fa 	bne.w	26cfe <gnss_interface_read+0x402>
   2690a:	460e      	mov	r6, r1
   2690c:	2900      	cmp	r1, #0
   2690e:	f000 81f0 	beq.w	26cf2 <gnss_interface_read+0x3f6>
   26912:	2ad7      	cmp	r2, #215	; 0xd7
   26914:	f240 81ed 	bls.w	26cf2 <gnss_interface_read+0x3f6>
   26918:	4d50      	ldr	r5, [pc, #320]	; (26a5c <gnss_interface_read+0x160>)
   2691a:	469a      	mov	sl, r3
   2691c:	682b      	ldr	r3, [r5, #0]
   2691e:	b29b      	uxth	r3, r3
   26920:	2b04      	cmp	r3, #4
   26922:	d004      	beq.n	2692e <gnss_interface_read+0x32>
   26924:	682b      	ldr	r3, [r5, #0]
   26926:	b29b      	uxth	r3, r3
   26928:	2b02      	cmp	r3, #2
   2692a:	f040 81dc 	bne.w	26ce6 <gnss_interface_read+0x3ea>
   2692e:	f1ba 0f00 	cmp.w	sl, #0
   26932:	d178      	bne.n	26a26 <gnss_interface_read+0x12a>
   26934:	2102      	movs	r1, #2
   26936:	20b6      	movs	r0, #182	; 0xb6
   26938:	2400      	movs	r4, #0
   2693a:	682b      	ldr	r3, [r5, #0]
   2693c:	f10d 020e 	add.w	r2, sp, #14
   26940:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   26944:	602b      	str	r3, [r5, #0]
   26946:	ab08      	add	r3, sp, #32
   26948:	9304      	str	r3, [sp, #16]
   2694a:	f8df b118 	ldr.w	fp, [pc, #280]	; 26a64 <gnss_interface_read+0x168>
   2694e:	ea0a 0301 	and.w	r3, sl, r1
   26952:	4f43      	ldr	r7, [pc, #268]	; (26a60 <gnss_interface_read+0x164>)
   26954:	f8df 9110 	ldr.w	r9, [pc, #272]	; 26a68 <gnss_interface_read+0x16c>
   26958:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 26a58 <gnss_interface_read+0x15c>
   2695c:	9005      	str	r0, [sp, #20]
   2695e:	9107      	str	r1, [sp, #28]
   26960:	9206      	str	r2, [sp, #24]
   26962:	9301      	str	r3, [sp, #4]
   26964:	f8db 0000 	ldr.w	r0, [fp]
   26968:	4652      	mov	r2, sl
   2696a:	6803      	ldr	r3, [r0, #0]
   2696c:	a904      	add	r1, sp, #16
   2696e:	689b      	ldr	r3, [r3, #8]
   26970:	4798      	blx	r3
   26972:	2800      	cmp	r0, #0
   26974:	da2a      	bge.n	269cc <gnss_interface_read+0xd0>
   26976:	9b01      	ldr	r3, [sp, #4]
   26978:	b15b      	cbz	r3, 26992 <gnss_interface_read+0x96>
   2697a:	1c42      	adds	r2, r0, #1
   2697c:	4603      	mov	r3, r0
   2697e:	d125      	bne.n	269cc <gnss_interface_read+0xd0>
   26980:	b9dc      	cbnz	r4, 269ba <gnss_interface_read+0xbe>
   26982:	2023      	movs	r0, #35	; 0x23
   26984:	461c      	mov	r4, r3
   26986:	f7f9 fb61 	bl	2004c <bsd_os_errno_set>
   2698a:	4620      	mov	r0, r4
   2698c:	b037      	add	sp, #220	; 0xdc
   2698e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26992:	682a      	ldr	r2, [r5, #0]
   26994:	783b      	ldrb	r3, [r7, #0]
   26996:	03d1      	lsls	r1, r2, #15
   26998:	d40c      	bmi.n	269b4 <gnss_interface_read+0xb8>
   2699a:	b95c      	cbnz	r4, 269b4 <gnss_interface_read+0xb8>
   2699c:	b163      	cbz	r3, 269b8 <gnss_interface_read+0xbc>
   2699e:	4649      	mov	r1, r9
   269a0:	4640      	mov	r0, r8
   269a2:	f7f9 faa9 	bl	1fef8 <bsd_os_timedwait>
   269a6:	682b      	ldr	r3, [r5, #0]
   269a8:	03db      	lsls	r3, r3, #15
   269aa:	d437      	bmi.n	26a1c <gnss_interface_read+0x120>
   269ac:	783b      	ldrb	r3, [r7, #0]
   269ae:	2800      	cmp	r0, #0
   269b0:	d0f4      	beq.n	2699c <gnss_interface_read+0xa0>
   269b2:	4604      	mov	r4, r0
   269b4:	2b00      	cmp	r3, #0
   269b6:	d1d5      	bne.n	26964 <gnss_interface_read+0x68>
   269b8:	2470      	movs	r4, #112	; 0x70
   269ba:	4620      	mov	r0, r4
   269bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   269c0:	f7f9 fb44 	bl	2004c <bsd_os_errno_set>
   269c4:	4620      	mov	r0, r4
   269c6:	b037      	add	sp, #220	; 0xdc
   269c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   269cc:	f244 0202 	movw	r2, #16386	; 0x4002
   269d0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   269d4:	4293      	cmp	r3, r2
   269d6:	d02f      	beq.n	26a38 <gnss_interface_read+0x13c>
   269d8:	f244 0201 	movw	r2, #16385	; 0x4001
   269dc:	4293      	cmp	r3, r2
   269de:	d045      	beq.n	26a6c <gnss_interface_read+0x170>
   269e0:	f244 0203 	movw	r2, #16387	; 0x4003
   269e4:	4293      	cmp	r3, r2
   269e6:	f040 8184 	bne.w	26cf2 <gnss_interface_read+0x3f6>
   269ea:	2203      	movs	r2, #3
   269ec:	2414      	movs	r4, #20
   269ee:	9b08      	ldr	r3, [sp, #32]
   269f0:	7032      	strb	r2, [r6, #0]
   269f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   269f4:	60b3      	str	r3, [r6, #8]
   269f6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   269fa:	e9c6 2303 	strd	r2, r3, [r6, #12]
   269fe:	f8db 0000 	ldr.w	r0, [fp]
   26a02:	6803      	ldr	r3, [r0, #0]
   26a04:	68db      	ldr	r3, [r3, #12]
   26a06:	4798      	blx	r3
   26a08:	2800      	cmp	r0, #0
   26a0a:	ddbe      	ble.n	2698a <gnss_interface_read+0x8e>
   26a0c:	4620      	mov	r0, r4
   26a0e:	682b      	ldr	r3, [r5, #0]
   26a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   26a14:	602b      	str	r3, [r5, #0]
   26a16:	b037      	add	sp, #220	; 0xdc
   26a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26a1c:	783b      	ldrb	r3, [r7, #0]
   26a1e:	4604      	mov	r4, r0
   26a20:	2b00      	cmp	r3, #0
   26a22:	d19f      	bne.n	26964 <gnss_interface_read+0x68>
   26a24:	e7c8      	b.n	269b8 <gnss_interface_read+0xbc>
   26a26:	f01a 0f2a 	tst.w	sl, #42	; 0x2a
   26a2a:	d183      	bne.n	26934 <gnss_interface_read+0x38>
   26a2c:	202d      	movs	r0, #45	; 0x2d
   26a2e:	f7f9 fb0d 	bl	2004c <bsd_os_errno_set>
   26a32:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   26a36:	e7a8      	b.n	2698a <gnss_interface_read+0x8e>
   26a38:	a808      	add	r0, sp, #32
   26a3a:	f7eb fb21 	bl	12080 <strlen>
   26a3e:	2302      	movs	r3, #2
   26a40:	1c44      	adds	r4, r0, #1
   26a42:	b2a4      	uxth	r4, r4
   26a44:	f806 3b08 	strb.w	r3, [r6], #8
   26a48:	4622      	mov	r2, r4
   26a4a:	a908      	add	r1, sp, #32
   26a4c:	4630      	mov	r0, r6
   26a4e:	f012 fab8 	bl	38fc2 <memcpy>
   26a52:	3408      	adds	r4, #8
   26a54:	e7d3      	b.n	269fe <gnss_interface_read+0x102>
   26a56:	bf00      	nop
   26a58:	49765443 	.word	0x49765443
   26a5c:	200227a8 	.word	0x200227a8
   26a60:	20029088 	.word	0x20029088
   26a64:	200227b0 	.word	0x200227b0
   26a68:	20020220 	.word	0x20020220
   26a6c:	2401      	movs	r4, #1
   26a6e:	a809      	add	r0, sp, #36	; 0x24
   26a70:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   26a72:	e9c6 0102 	strd	r0, r1, [r6, #8]
   26a76:	e9c6 2304 	strd	r2, r3, [r6, #16]
   26a7a:	990d      	ldr	r1, [sp, #52]	; 0x34
   26a7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   26a7e:	7034      	strb	r4, [r6, #0]
   26a80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   26a82:	61b1      	str	r1, [r6, #24]
   26a84:	9910      	ldr	r1, [sp, #64]	; 0x40
   26a86:	61f2      	str	r2, [r6, #28]
   26a88:	6233      	str	r3, [r6, #32]
   26a8a:	f89d 205d 	ldrb.w	r2, [sp, #93]	; 0x5d
   26a8e:	f8dd 304d 	ldr.w	r3, [sp, #77]	; 0x4d
   26a92:	6271      	str	r1, [r6, #36]	; 0x24
   26a94:	f8dd 1051 	ldr.w	r1, [sp, #81]	; 0x51
   26a98:	f886 2044 	strb.w	r2, [r6, #68]	; 0x44
   26a9c:	f8dd 2055 	ldr.w	r2, [sp, #85]	; 0x55
   26aa0:	6373      	str	r3, [r6, #52]	; 0x34
   26aa2:	f8dd 3059 	ldr.w	r3, [sp, #89]	; 0x59
   26aa6:	63b1      	str	r1, [r6, #56]	; 0x38
   26aa8:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   26aac:	63f2      	str	r2, [r6, #60]	; 0x3c
   26aae:	6433      	str	r3, [r6, #64]	; 0x40
   26ab0:	f8dd 2046 	ldr.w	r2, [sp, #70]	; 0x46
   26ab4:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   26ab8:	8531      	strh	r1, [r6, #40]	; 0x28
   26aba:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e
   26abe:	f8c6 202a 	str.w	r2, [r6, #42]	; 0x2a
   26ac2:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   26ac6:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
   26aca:	9b18      	ldr	r3, [sp, #96]	; 0x60
   26acc:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
   26ad0:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   26ad4:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
   26ad8:	f3c3 210f 	ubfx	r1, r3, #8, #16
   26adc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   26ade:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   26ae2:	8630      	strh	r0, [r6, #48]	; 0x30
   26ae4:	f8a6 104a 	strh.w	r1, [r6, #74]	; 0x4a
   26ae8:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
   26aec:	f3c3 230f 	ubfx	r3, r3, #8, #16
   26af0:	f8a6 2056 	strh.w	r2, [r6, #86]	; 0x56
   26af4:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   26af8:	f8a6 3062 	strh.w	r3, [r6, #98]	; 0x62
   26afc:	f8dd 3063 	ldr.w	r3, [sp, #99]	; 0x63
   26b00:	f8a6 1046 	strh.w	r1, [r6, #70]	; 0x46
   26b04:	f886 2048 	strb.w	r2, [r6, #72]	; 0x48
   26b08:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   26b0c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   26b10:	64f3      	str	r3, [r6, #76]	; 0x4c
   26b12:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
   26b16:	f886 1050 	strb.w	r1, [r6, #80]	; 0x50
   26b1a:	f8a6 2052 	strh.w	r2, [r6, #82]	; 0x52
   26b1e:	f886 3054 	strb.w	r3, [r6, #84]	; 0x54
   26b22:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
   26b26:	f8dd 106d 	ldr.w	r1, [sp, #109]	; 0x6d
   26b2a:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
   26b2e:	65b1      	str	r1, [r6, #88]	; 0x58
   26b30:	f886 205c 	strb.w	r2, [r6, #92]	; 0x5c
   26b34:	f89d 1074 	ldrb.w	r1, [sp, #116]	; 0x74
   26b38:	f8dd 2077 	ldr.w	r2, [sp, #119]	; 0x77
   26b3c:	f8a6 305e 	strh.w	r3, [r6, #94]	; 0x5e
   26b40:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
   26b44:	f886 1060 	strb.w	r1, [r6, #96]	; 0x60
   26b48:	6672      	str	r2, [r6, #100]	; 0x64
   26b4a:	f886 3068 	strb.w	r3, [r6, #104]	; 0x68
   26b4e:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
   26b52:	f89d 107f 	ldrb.w	r1, [sp, #127]	; 0x7f
   26b56:	9a22      	ldr	r2, [sp, #136]	; 0x88
   26b58:	f89d 0094 	ldrb.w	r0, [sp, #148]	; 0x94
   26b5c:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   26b60:	f89d 3093 	ldrb.w	r3, [sp, #147]	; 0x93
   26b64:	f3c2 220f 	ubfx	r2, r2, #8, #16
   26b68:	f8a6 106e 	strh.w	r1, [r6, #110]	; 0x6e
   26b6c:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
   26b70:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   26b74:	f8a6 207a 	strh.w	r2, [r6, #122]	; 0x7a
   26b78:	f89d 207e 	ldrb.w	r2, [sp, #126]	; 0x7e
   26b7c:	f8a6 3086 	strh.w	r3, [r6, #134]	; 0x86
   26b80:	f8dd 3081 	ldr.w	r3, [sp, #129]	; 0x81
   26b84:	f8a6 106a 	strh.w	r1, [r6, #106]	; 0x6a
   26b88:	f886 206c 	strb.w	r2, [r6, #108]	; 0x6c
   26b8c:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
   26b90:	f89d 1085 	ldrb.w	r1, [sp, #133]	; 0x85
   26b94:	6733      	str	r3, [r6, #112]	; 0x70
   26b96:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
   26b9a:	f886 1074 	strb.w	r1, [r6, #116]	; 0x74
   26b9e:	f8a6 2076 	strh.w	r2, [r6, #118]	; 0x76
   26ba2:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
   26ba6:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
   26baa:	f8dd 108b 	ldr.w	r1, [sp, #139]	; 0x8b
   26bae:	f89d 208f 	ldrb.w	r2, [sp, #143]	; 0x8f
   26bb2:	67f1      	str	r1, [r6, #124]	; 0x7c
   26bb4:	f886 2080 	strb.w	r2, [r6, #128]	; 0x80
   26bb8:	f89d 1092 	ldrb.w	r1, [sp, #146]	; 0x92
   26bbc:	f8dd 2095 	ldr.w	r2, [sp, #149]	; 0x95
   26bc0:	f8a6 3082 	strh.w	r3, [r6, #130]	; 0x82
   26bc4:	f89d 3099 	ldrb.w	r3, [sp, #153]	; 0x99
   26bc8:	f886 1084 	strb.w	r1, [r6, #132]	; 0x84
   26bcc:	f8c6 2088 	str.w	r2, [r6, #136]	; 0x88
   26bd0:	f886 308c 	strb.w	r3, [r6, #140]	; 0x8c
   26bd4:	f8bd 009a 	ldrh.w	r0, [sp, #154]	; 0x9a
   26bd8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   26bda:	f89d 40a8 	ldrb.w	r4, [sp, #168]	; 0xa8
   26bde:	f89d 20a7 	ldrb.w	r2, [sp, #167]	; 0xa7
   26be2:	f3c3 210f 	ubfx	r1, r3, #8, #16
   26be6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   26be8:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   26bec:	f8a6 1092 	strh.w	r1, [r6, #146]	; 0x92
   26bf0:	f89d 109c 	ldrb.w	r1, [sp, #156]	; 0x9c
   26bf4:	f8a6 209e 	strh.w	r2, [r6, #158]	; 0x9e
   26bf8:	f3c3 230f 	ubfx	r3, r3, #8, #16
   26bfc:	f8dd 209f 	ldr.w	r2, [sp, #159]	; 0x9f
   26c00:	f8a6 008e 	strh.w	r0, [r6, #142]	; 0x8e
   26c04:	f8a6 30aa 	strh.w	r3, [r6, #170]	; 0xaa
   26c08:	f886 1090 	strb.w	r1, [r6, #144]	; 0x90
   26c0c:	f89d 30a3 	ldrb.w	r3, [sp, #163]	; 0xa3
   26c10:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	; 0xa4
   26c14:	f8c6 2094 	str.w	r2, [r6, #148]	; 0x94
   26c18:	f89d 20a6 	ldrb.w	r2, [sp, #166]	; 0xa6
   26c1c:	f886 3098 	strb.w	r3, [r6, #152]	; 0x98
   26c20:	f8dd 30a9 	ldr.w	r3, [sp, #169]	; 0xa9
   26c24:	f8a6 109a 	strh.w	r1, [r6, #154]	; 0x9a
   26c28:	f886 209c 	strb.w	r2, [r6, #156]	; 0x9c
   26c2c:	f8bd 20ae 	ldrh.w	r2, [sp, #174]	; 0xae
   26c30:	f89d 10ad 	ldrb.w	r1, [sp, #173]	; 0xad
   26c34:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
   26c38:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
   26c3c:	f886 10a4 	strb.w	r1, [r6, #164]	; 0xa4
   26c40:	f8a6 20a6 	strh.w	r2, [r6, #166]	; 0xa6
   26c44:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
   26c48:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
   26c4c:	f8dd 10b3 	ldr.w	r1, [sp, #179]	; 0xb3
   26c50:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
   26c54:	f8c6 10ac 	str.w	r1, [r6, #172]	; 0xac
   26c58:	f886 20b0 	strb.w	r2, [r6, #176]	; 0xb0
   26c5c:	f8a6 30b2 	strh.w	r3, [r6, #178]	; 0xb2
   26c60:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
   26c64:	f89d 10bb 	ldrb.w	r1, [sp, #187]	; 0xbb
   26c68:	f89d 00d0 	ldrb.w	r0, [sp, #208]	; 0xd0
   26c6c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
   26c6e:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   26c72:	f89d 30cf 	ldrb.w	r3, [sp, #207]	; 0xcf
   26c76:	f89d 40ba 	ldrb.w	r4, [sp, #186]	; 0xba
   26c7a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   26c7e:	f3c2 220f 	ubfx	r2, r2, #8, #16
   26c82:	f8a6 10b6 	strh.w	r1, [r6, #182]	; 0xb6
   26c86:	f8a6 30ce 	strh.w	r3, [r6, #206]	; 0xce
   26c8a:	f886 40b4 	strb.w	r4, [r6, #180]	; 0xb4
   26c8e:	f8a6 20c2 	strh.w	r2, [r6, #194]	; 0xc2
   26c92:	f8bd 20c2 	ldrh.w	r2, [sp, #194]	; 0xc2
   26c96:	f89d 10c1 	ldrb.w	r1, [sp, #193]	; 0xc1
   26c9a:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
   26c9e:	f8dd 00bd 	ldr.w	r0, [sp, #189]	; 0xbd
   26ca2:	f886 10bc 	strb.w	r1, [r6, #188]	; 0xbc
   26ca6:	f8a6 20be 	strh.w	r2, [r6, #190]	; 0xbe
   26caa:	f8c6 00b8 	str.w	r0, [r6, #184]	; 0xb8
   26cae:	f886 30c0 	strb.w	r3, [r6, #192]	; 0xc0
   26cb2:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
   26cb6:	f8dd 10c7 	ldr.w	r1, [sp, #199]	; 0xc7
   26cba:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
   26cbe:	f8c6 10c4 	str.w	r1, [r6, #196]	; 0xc4
   26cc2:	f886 20c8 	strb.w	r2, [r6, #200]	; 0xc8
   26cc6:	f89d 10ce 	ldrb.w	r1, [sp, #206]	; 0xce
   26cca:	f8dd 20d1 	ldr.w	r2, [sp, #209]	; 0xd1
   26cce:	f8a6 30ca 	strh.w	r3, [r6, #202]	; 0xca
   26cd2:	f89d 30d5 	ldrb.w	r3, [sp, #213]	; 0xd5
   26cd6:	f886 10cc 	strb.w	r1, [r6, #204]	; 0xcc
   26cda:	f8c6 20d0 	str.w	r2, [r6, #208]	; 0xd0
   26cde:	f886 30d4 	strb.w	r3, [r6, #212]	; 0xd4
   26ce2:	24d8      	movs	r4, #216	; 0xd8
   26ce4:	e68b      	b.n	269fe <gnss_interface_read+0x102>
   26ce6:	2039      	movs	r0, #57	; 0x39
   26ce8:	f7f9 f9b0 	bl	2004c <bsd_os_errno_set>
   26cec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   26cf0:	e64b      	b.n	2698a <gnss_interface_read+0x8e>
   26cf2:	2016      	movs	r0, #22
   26cf4:	f7f9 f9aa 	bl	2004c <bsd_os_errno_set>
   26cf8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   26cfc:	e645      	b.n	2698a <gnss_interface_read+0x8e>
   26cfe:	2009      	movs	r0, #9
   26d00:	f7f9 f9a4 	bl	2004c <bsd_os_errno_set>
   26d04:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   26d08:	e63f      	b.n	2698a <gnss_interface_read+0x8e>
   26d0a:	bf00      	nop

00026d0c <gnss_interface_setopt>:
   26d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26d10:	4db3      	ldr	r5, [pc, #716]	; (26fe0 <gnss_interface_setopt+0x2d4>)
   26d12:	b086      	sub	sp, #24
   26d14:	682c      	ldr	r4, [r5, #0]
   26d16:	b2a4      	uxth	r4, r4
   26d18:	2c02      	cmp	r4, #2
   26d1a:	d00d      	beq.n	26d38 <gnss_interface_setopt+0x2c>
   26d1c:	2a08      	cmp	r2, #8
   26d1e:	d00b      	beq.n	26d38 <gnss_interface_setopt+0x2c>
   26d20:	f1a2 040a 	sub.w	r4, r2, #10
   26d24:	2c01      	cmp	r4, #1
   26d26:	d907      	bls.n	26d38 <gnss_interface_setopt+0x2c>
   26d28:	200e      	movs	r0, #14
   26d2a:	f7f9 f98f 	bl	2004c <bsd_os_errno_set>
   26d2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26d32:	b006      	add	sp, #24
   26d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   26d38:	682c      	ldr	r4, [r5, #0]
   26d3a:	0264      	lsls	r4, r4, #9
   26d3c:	f100 8149 	bmi.w	26fd2 <gnss_interface_setopt+0x2c6>
   26d40:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   26d44:	f040 8139 	bne.w	26fba <gnss_interface_setopt+0x2ae>
   26d48:	49a6      	ldr	r1, [pc, #664]	; (26fe4 <gnss_interface_setopt+0x2d8>)
   26d4a:	4288      	cmp	r0, r1
   26d4c:	f040 813b 	bne.w	26fc6 <gnss_interface_setopt+0x2ba>
   26d50:	f1a2 010a 	sub.w	r1, r2, #10
   26d54:	2901      	cmp	r1, #1
   26d56:	d902      	bls.n	26d5e <gnss_interface_setopt+0x52>
   26d58:	2b00      	cmp	r3, #0
   26d5a:	f000 8112 	beq.w	26f82 <gnss_interface_setopt+0x276>
   26d5e:	3a01      	subs	r2, #1
   26d60:	2a0a      	cmp	r2, #10
   26d62:	f200 810e 	bhi.w	26f82 <gnss_interface_setopt+0x276>
   26d66:	e8df f012 	tbh	[pc, r2, lsl #1]
   26d6a:	007f      	.short	0x007f
   26d6c:	0098008c 	.word	0x0098008c
   26d70:	00ae00a2 	.word	0x00ae00a2
   26d74:	00c500b9 	.word	0x00c500b9
   26d78:	00f300dd 	.word	0x00f300dd
   26d7c:	000b00ff 	.word	0x000b00ff
   26d80:	682b      	ldr	r3, [r5, #0]
   26d82:	b29b      	uxth	r3, r3
   26d84:	2b04      	cmp	r3, #4
   26d86:	d1cf      	bne.n	26d28 <gnss_interface_setopt+0x1c>
   26d88:	2203      	movs	r2, #3
   26d8a:	f241 0604 	movw	r6, #4100	; 0x1004
   26d8e:	2300      	movs	r3, #0
   26d90:	4637      	mov	r7, r6
   26d92:	f88d 2008 	strb.w	r2, [sp, #8]
   26d96:	f88d 3009 	strb.w	r3, [sp, #9]
   26d9a:	f88d 300a 	strb.w	r3, [sp, #10]
   26d9e:	f88d 300b 	strb.w	r3, [sp, #11]
   26da2:	f88d 300c 	strb.w	r3, [sp, #12]
   26da6:	682b      	ldr	r3, [r5, #0]
   26da8:	2112      	movs	r1, #18
   26daa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   26dae:	4668      	mov	r0, sp
   26db0:	602b      	str	r3, [r5, #0]
   26db2:	f002 faa1 	bl	292f8 <rpc_gnss_client_request_alloc>
   26db6:	4604      	mov	r4, r0
   26db8:	9800      	ldr	r0, [sp, #0]
   26dba:	2c00      	cmp	r4, #0
   26dbc:	f040 80e7 	bne.w	26f8e <gnss_interface_setopt+0x282>
   26dc0:	2800      	cmp	r0, #0
   26dc2:	f000 80eb 	beq.w	26f9c <gnss_interface_setopt+0x290>
   26dc6:	2212      	movs	r2, #18
   26dc8:	f04f 0876 	mov.w	r8, #118	; 0x76
   26dcc:	f04f 0e49 	mov.w	lr, #73	; 0x49
   26dd0:	f04f 0a43 	mov.w	sl, #67	; 0x43
   26dd4:	f04f 0954 	mov.w	r9, #84	; 0x54
   26dd8:	f8df c210 	ldr.w	ip, [pc, #528]	; 26fec <gnss_interface_setopt+0x2e0>
   26ddc:	a906      	add	r1, sp, #24
   26dde:	f8bc 3000 	ldrh.w	r3, [ip]
   26de2:	f880 800e 	strb.w	r8, [r0, #14]
   26de6:	3301      	adds	r3, #1
   26de8:	b29b      	uxth	r3, r3
   26dea:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
   26dee:	f841 6d14 	str.w	r6, [r1, #-20]!
   26df2:	7144      	strb	r4, [r0, #5]
   26df4:	7184      	strb	r4, [r0, #6]
   26df6:	71c4      	strb	r4, [r0, #7]
   26df8:	7204      	strb	r4, [r0, #8]
   26dfa:	7244      	strb	r4, [r0, #9]
   26dfc:	7284      	strb	r4, [r0, #10]
   26dfe:	72c4      	strb	r4, [r0, #11]
   26e00:	7102      	strb	r2, [r0, #4]
   26e02:	f880 a00c 	strb.w	sl, [r0, #12]
   26e06:	f880 900d 	strb.w	r9, [r0, #13]
   26e0a:	f880 e00f 	strb.w	lr, [r0, #15]
   26e0e:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 26ff0 <gnss_interface_setopt+0x2e4>
   26e12:	6800      	ldr	r0, [r0, #0]
   26e14:	f8ac 3000 	strh.w	r3, [ip]
   26e18:	f012 f8d3 	bl	38fc2 <memcpy>
   26e1c:	4639      	mov	r1, r7
   26e1e:	9800      	ldr	r0, [sp, #0]
   26e20:	f8c8 4000 	str.w	r4, [r8]
   26e24:	f002 fa7c 	bl	29320 <rpc_gnss_client_request_send>
   26e28:	2800      	cmp	r0, #0
   26e2a:	f040 80bc 	bne.w	26fa6 <gnss_interface_setopt+0x29a>
   26e2e:	4f6e      	ldr	r7, [pc, #440]	; (26fe8 <gnss_interface_setopt+0x2dc>)
   26e30:	4e6c      	ldr	r6, [pc, #432]	; (26fe4 <gnss_interface_setopt+0x2d8>)
   26e32:	4639      	mov	r1, r7
   26e34:	4630      	mov	r0, r6
   26e36:	f7f9 f85f 	bl	1fef8 <bsd_os_timedwait>
   26e3a:	682c      	ldr	r4, [r5, #0]
   26e3c:	f414 0480 	ands.w	r4, r4, #4194304	; 0x400000
   26e40:	d1f7      	bne.n	26e32 <gnss_interface_setopt+0x126>
   26e42:	f8d8 0000 	ldr.w	r0, [r8]
   26e46:	b118      	cbz	r0, 26e50 <gnss_interface_setopt+0x144>
   26e48:	f002 fa88 	bl	2935c <rpc_gnss_client_data_free>
   26e4c:	f8c8 4000 	str.w	r4, [r8]
   26e50:	682b      	ldr	r3, [r5, #0]
   26e52:	021b      	lsls	r3, r3, #8
   26e54:	f140 808f 	bpl.w	26f76 <gnss_interface_setopt+0x26a>
   26e58:	2000      	movs	r0, #0
   26e5a:	682b      	ldr	r3, [r5, #0]
   26e5c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   26e60:	602b      	str	r3, [r5, #0]
   26e62:	b006      	add	sp, #24
   26e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   26e68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   26e6a:	2a02      	cmp	r2, #2
   26e6c:	f040 8089 	bne.w	26f82 <gnss_interface_setopt+0x276>
   26e70:	2208      	movs	r2, #8
   26e72:	f241 1603 	movw	r6, #4355	; 0x1103
   26e76:	881b      	ldrh	r3, [r3, #0]
   26e78:	9202      	str	r2, [sp, #8]
   26e7a:	f8ad 300f 	strh.w	r3, [sp, #15]
   26e7e:	4637      	mov	r7, r6
   26e80:	e791      	b.n	26da6 <gnss_interface_setopt+0x9a>
   26e82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   26e84:	2a02      	cmp	r2, #2
   26e86:	d17c      	bne.n	26f82 <gnss_interface_setopt+0x276>
   26e88:	2210      	movs	r2, #16
   26e8a:	f241 1603 	movw	r6, #4355	; 0x1103
   26e8e:	881b      	ldrh	r3, [r3, #0]
   26e90:	9202      	str	r2, [sp, #8]
   26e92:	f8ad 3011 	strh.w	r3, [sp, #17]
   26e96:	4637      	mov	r7, r6
   26e98:	e785      	b.n	26da6 <gnss_interface_setopt+0x9a>
   26e9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   26e9c:	2a01      	cmp	r2, #1
   26e9e:	d170      	bne.n	26f82 <gnss_interface_setopt+0x276>
   26ea0:	781b      	ldrb	r3, [r3, #0]
   26ea2:	2b01      	cmp	r3, #1
   26ea4:	d16d      	bne.n	26f82 <gnss_interface_setopt+0x276>
   26ea6:	f241 1603 	movw	r6, #4355	; 0x1103
   26eaa:	4637      	mov	r7, r6
   26eac:	e77b      	b.n	26da6 <gnss_interface_setopt+0x9a>
   26eae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   26eb0:	2a02      	cmp	r2, #2
   26eb2:	d166      	bne.n	26f82 <gnss_interface_setopt+0x276>
   26eb4:	2220      	movs	r2, #32
   26eb6:	f241 1603 	movw	r6, #4355	; 0x1103
   26eba:	881b      	ldrh	r3, [r3, #0]
   26ebc:	9202      	str	r2, [sp, #8]
   26ebe:	f8ad 3013 	strh.w	r3, [sp, #19]
   26ec2:	4637      	mov	r7, r6
   26ec4:	e76f      	b.n	26da6 <gnss_interface_setopt+0x9a>
   26ec6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   26ec8:	2a01      	cmp	r2, #1
   26eca:	d15a      	bne.n	26f82 <gnss_interface_setopt+0x276>
   26ecc:	f241 1603 	movw	r6, #4355	; 0x1103
   26ed0:	781b      	ldrb	r3, [r3, #0]
   26ed2:	9202      	str	r2, [sp, #8]
   26ed4:	f88d 300c 	strb.w	r3, [sp, #12]
   26ed8:	4637      	mov	r7, r6
   26eda:	e764      	b.n	26da6 <gnss_interface_setopt+0x9a>
   26edc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   26ede:	2a01      	cmp	r2, #1
   26ee0:	d14f      	bne.n	26f82 <gnss_interface_setopt+0x276>
   26ee2:	2202      	movs	r2, #2
   26ee4:	f241 1603 	movw	r6, #4355	; 0x1103
   26ee8:	781b      	ldrb	r3, [r3, #0]
   26eea:	9202      	str	r2, [sp, #8]
   26eec:	f88d 300d 	strb.w	r3, [sp, #13]
   26ef0:	4637      	mov	r7, r6
   26ef2:	e758      	b.n	26da6 <gnss_interface_setopt+0x9a>
   26ef4:	682a      	ldr	r2, [r5, #0]
   26ef6:	b292      	uxth	r2, r2
   26ef8:	2a02      	cmp	r2, #2
   26efa:	f47f af15 	bne.w	26d28 <gnss_interface_setopt+0x1c>
   26efe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   26f00:	2a04      	cmp	r2, #4
   26f02:	d13e      	bne.n	26f82 <gnss_interface_setopt+0x276>
   26f04:	2101      	movs	r1, #1
   26f06:	f241 0604 	movw	r6, #4100	; 0x1004
   26f0a:	682a      	ldr	r2, [r5, #0]
   26f0c:	6818      	ldr	r0, [r3, #0]
   26f0e:	0c13      	lsrs	r3, r2, #16
   26f10:	041b      	lsls	r3, r3, #16
   26f12:	f043 0303 	orr.w	r3, r3, #3
   26f16:	f8cd 0009 	str.w	r0, [sp, #9]
   26f1a:	602b      	str	r3, [r5, #0]
   26f1c:	f88d 1008 	strb.w	r1, [sp, #8]
   26f20:	4637      	mov	r7, r6
   26f22:	e740      	b.n	26da6 <gnss_interface_setopt+0x9a>
   26f24:	682a      	ldr	r2, [r5, #0]
   26f26:	b292      	uxth	r2, r2
   26f28:	2a04      	cmp	r2, #4
   26f2a:	d004      	beq.n	26f36 <gnss_interface_setopt+0x22a>
   26f2c:	682a      	ldr	r2, [r5, #0]
   26f2e:	b292      	uxth	r2, r2
   26f30:	2a02      	cmp	r2, #2
   26f32:	f47f aef9 	bne.w	26d28 <gnss_interface_setopt+0x1c>
   26f36:	2200      	movs	r2, #0
   26f38:	f88d 2008 	strb.w	r2, [sp, #8]
   26f3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   26f3e:	2a04      	cmp	r2, #4
   26f40:	d11f      	bne.n	26f82 <gnss_interface_setopt+0x276>
   26f42:	f241 0604 	movw	r6, #4100	; 0x1004
   26f46:	681b      	ldr	r3, [r3, #0]
   26f48:	4637      	mov	r7, r6
   26f4a:	f8cd 3009 	str.w	r3, [sp, #9]
   26f4e:	e72a      	b.n	26da6 <gnss_interface_setopt+0x9a>
   26f50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   26f52:	2a01      	cmp	r2, #1
   26f54:	d115      	bne.n	26f82 <gnss_interface_setopt+0x276>
   26f56:	2240      	movs	r2, #64	; 0x40
   26f58:	f241 1603 	movw	r6, #4355	; 0x1103
   26f5c:	781b      	ldrb	r3, [r3, #0]
   26f5e:	9202      	str	r2, [sp, #8]
   26f60:	f88d 3015 	strb.w	r3, [sp, #21]
   26f64:	4637      	mov	r7, r6
   26f66:	e71e      	b.n	26da6 <gnss_interface_setopt+0x9a>
   26f68:	682b      	ldr	r3, [r5, #0]
   26f6a:	b29b      	uxth	r3, r3
   26f6c:	2b04      	cmp	r3, #4
   26f6e:	f47f aedb 	bne.w	26d28 <gnss_interface_setopt+0x1c>
   26f72:	2202      	movs	r2, #2
   26f74:	e709      	b.n	26d8a <gnss_interface_setopt+0x7e>
   26f76:	200e      	movs	r0, #14
   26f78:	f7f9 f868 	bl	2004c <bsd_os_errno_set>
   26f7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26f80:	e76b      	b.n	26e5a <gnss_interface_setopt+0x14e>
   26f82:	2016      	movs	r0, #22
   26f84:	f7f9 f862 	bl	2004c <bsd_os_errno_set>
   26f88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26f8c:	e6d1      	b.n	26d32 <gnss_interface_setopt+0x26>
   26f8e:	b128      	cbz	r0, 26f9c <gnss_interface_setopt+0x290>
   26f90:	6803      	ldr	r3, [r0, #0]
   26f92:	b11b      	cbz	r3, 26f9c <gnss_interface_setopt+0x290>
   26f94:	4618      	mov	r0, r3
   26f96:	f002 f9e1 	bl	2935c <rpc_gnss_client_data_free>
   26f9a:	9800      	ldr	r0, [sp, #0]
   26f9c:	f002 f9d6 	bl	2934c <rpc_gnss_client_message_free>
   26fa0:	2023      	movs	r0, #35	; 0x23
   26fa2:	f7f9 f853 	bl	2004c <bsd_os_errno_set>
   26fa6:	682b      	ldr	r3, [r5, #0]
   26fa8:	200e      	movs	r0, #14
   26faa:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   26fae:	602b      	str	r3, [r5, #0]
   26fb0:	f7f9 f84c 	bl	2004c <bsd_os_errno_set>
   26fb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26fb8:	e6bb      	b.n	26d32 <gnss_interface_setopt+0x26>
   26fba:	202a      	movs	r0, #42	; 0x2a
   26fbc:	f7f9 f846 	bl	2004c <bsd_os_errno_set>
   26fc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26fc4:	e6b5      	b.n	26d32 <gnss_interface_setopt+0x26>
   26fc6:	2009      	movs	r0, #9
   26fc8:	f7f9 f840 	bl	2004c <bsd_os_errno_set>
   26fcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26fd0:	e6af      	b.n	26d32 <gnss_interface_setopt+0x26>
   26fd2:	2073      	movs	r0, #115	; 0x73
   26fd4:	f7f9 f83a 	bl	2004c <bsd_os_errno_set>
   26fd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26fdc:	e6a9      	b.n	26d32 <gnss_interface_setopt+0x26>
   26fde:	bf00      	nop
   26fe0:	200227a8 	.word	0x200227a8
   26fe4:	49765443 	.word	0x49765443
   26fe8:	20020220 	.word	0x20020220
   26fec:	2002761e 	.word	0x2002761e
   26ff0:	200227ac 	.word	0x200227ac

00026ff4 <gnss_interface_getopt>:
   26ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26ff8:	4c81      	ldr	r4, [pc, #516]	; (27200 <gnss_interface_getopt+0x20c>)
   26ffa:	b087      	sub	sp, #28
   26ffc:	6825      	ldr	r5, [r4, #0]
   26ffe:	4698      	mov	r8, r3
   27000:	b2ad      	uxth	r5, r5
   27002:	2d02      	cmp	r5, #2
   27004:	9b10      	ldr	r3, [sp, #64]	; 0x40
   27006:	f040 80dd 	bne.w	271c4 <gnss_interface_getopt+0x1d0>
   2700a:	6825      	ldr	r5, [r4, #0]
   2700c:	03ee      	lsls	r6, r5, #15
   2700e:	f100 80eb 	bmi.w	271e8 <gnss_interface_getopt+0x1f4>
   27012:	6825      	ldr	r5, [r4, #0]
   27014:	01ed      	lsls	r5, r5, #7
   27016:	f100 80ed 	bmi.w	271f4 <gnss_interface_getopt+0x200>
   2701a:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   2701e:	f040 80d7 	bne.w	271d0 <gnss_interface_getopt+0x1dc>
   27022:	4978      	ldr	r1, [pc, #480]	; (27204 <gnss_interface_getopt+0x210>)
   27024:	4288      	cmp	r0, r1
   27026:	f040 80d9 	bne.w	271dc <gnss_interface_getopt+0x1e8>
   2702a:	f1b8 0f00 	cmp.w	r8, #0
   2702e:	d00b      	beq.n	27048 <gnss_interface_getopt+0x54>
   27030:	b153      	cbz	r3, 27048 <gnss_interface_getopt+0x54>
   27032:	1e57      	subs	r7, r2, #1
   27034:	2f05      	cmp	r7, #5
   27036:	d807      	bhi.n	27048 <gnss_interface_getopt+0x54>
   27038:	e8df f007 	tbb	[pc, r7]
   2703c:	0f030f0f 	.word	0x0f030f0f
   27040:	0303      	.short	0x0303
   27042:	681b      	ldr	r3, [r3, #0]
   27044:	2b01      	cmp	r3, #1
   27046:	d00b      	beq.n	27060 <gnss_interface_getopt+0x6c>
   27048:	2016      	movs	r0, #22
   2704a:	f7f8 ffff 	bl	2004c <bsd_os_errno_set>
   2704e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   27052:	4628      	mov	r0, r5
   27054:	b007      	add	sp, #28
   27056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2705a:	681b      	ldr	r3, [r3, #0]
   2705c:	2b02      	cmp	r3, #2
   2705e:	d1f3      	bne.n	27048 <gnss_interface_getopt+0x54>
   27060:	6823      	ldr	r3, [r4, #0]
   27062:	2212      	movs	r2, #18
   27064:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   27068:	2100      	movs	r1, #0
   2706a:	a801      	add	r0, sp, #4
   2706c:	6023      	str	r3, [r4, #0]
   2706e:	f011 ffe2 	bl	39036 <memset>
   27072:	2112      	movs	r1, #18
   27074:	4668      	mov	r0, sp
   27076:	f002 f93f 	bl	292f8 <rpc_gnss_client_request_alloc>
   2707a:	4605      	mov	r5, r0
   2707c:	9800      	ldr	r0, [sp, #0]
   2707e:	2d00      	cmp	r5, #0
   27080:	f040 808a 	bne.w	27198 <gnss_interface_getopt+0x1a4>
   27084:	2800      	cmp	r0, #0
   27086:	f000 808e 	beq.w	271a6 <gnss_interface_getopt+0x1b2>
   2708a:	f241 1602 	movw	r6, #4354	; 0x1102
   2708e:	f04f 0e49 	mov.w	lr, #73	; 0x49
   27092:	2212      	movs	r2, #18
   27094:	f04f 0976 	mov.w	r9, #118	; 0x76
   27098:	f04f 0b43 	mov.w	fp, #67	; 0x43
   2709c:	f04f 0a54 	mov.w	sl, #84	; 0x54
   270a0:	f8df c168 	ldr.w	ip, [pc, #360]	; 2720c <gnss_interface_getopt+0x218>
   270a4:	f880 e00f 	strb.w	lr, [r0, #15]
   270a8:	f8bc 3000 	ldrh.w	r3, [ip]
   270ac:	f880 900e 	strb.w	r9, [r0, #14]
   270b0:	3301      	adds	r3, #1
   270b2:	b29b      	uxth	r3, r3
   270b4:	ea46 4e03 	orr.w	lr, r6, r3, lsl #16
   270b8:	f8cd e004 	str.w	lr, [sp, #4]
   270bc:	7145      	strb	r5, [r0, #5]
   270be:	7185      	strb	r5, [r0, #6]
   270c0:	71c5      	strb	r5, [r0, #7]
   270c2:	7205      	strb	r5, [r0, #8]
   270c4:	7245      	strb	r5, [r0, #9]
   270c6:	7285      	strb	r5, [r0, #10]
   270c8:	72c5      	strb	r5, [r0, #11]
   270ca:	a901      	add	r1, sp, #4
   270cc:	7102      	strb	r2, [r0, #4]
   270ce:	f880 b00c 	strb.w	fp, [r0, #12]
   270d2:	f880 a00d 	strb.w	sl, [r0, #13]
   270d6:	f8df 9138 	ldr.w	r9, [pc, #312]	; 27210 <gnss_interface_getopt+0x21c>
   270da:	6800      	ldr	r0, [r0, #0]
   270dc:	f8ac 3000 	strh.w	r3, [ip]
   270e0:	f011 ff6f 	bl	38fc2 <memcpy>
   270e4:	4631      	mov	r1, r6
   270e6:	9800      	ldr	r0, [sp, #0]
   270e8:	f8c9 5000 	str.w	r5, [r9]
   270ec:	f002 f918 	bl	29320 <rpc_gnss_client_request_send>
   270f0:	2800      	cmp	r0, #0
   270f2:	d15d      	bne.n	271b0 <gnss_interface_getopt+0x1bc>
   270f4:	4e44      	ldr	r6, [pc, #272]	; (27208 <gnss_interface_getopt+0x214>)
   270f6:	4d43      	ldr	r5, [pc, #268]	; (27204 <gnss_interface_getopt+0x210>)
   270f8:	4631      	mov	r1, r6
   270fa:	4628      	mov	r0, r5
   270fc:	f7f8 fefc 	bl	1fef8 <bsd_os_timedwait>
   27100:	6823      	ldr	r3, [r4, #0]
   27102:	01db      	lsls	r3, r3, #7
   27104:	d4f8      	bmi.n	270f8 <gnss_interface_getopt+0x104>
   27106:	f8d9 0000 	ldr.w	r0, [r9]
   2710a:	b1d8      	cbz	r0, 27144 <gnss_interface_getopt+0x150>
   2710c:	6825      	ldr	r5, [r4, #0]
   2710e:	f015 7500 	ands.w	r5, r5, #33554432	; 0x2000000
   27112:	d00f      	beq.n	27134 <gnss_interface_getopt+0x140>
   27114:	2f05      	cmp	r7, #5
   27116:	d837      	bhi.n	27188 <gnss_interface_getopt+0x194>
   27118:	e8df f007 	tbb	[pc, r7]
   2711c:	2b26201a 	.word	0x2b26201a
   27120:	0331      	.short	0x0331
   27122:	2500      	movs	r5, #0
   27124:	7b43      	ldrb	r3, [r0, #13]
   27126:	f888 3000 	strb.w	r3, [r8]
   2712a:	f002 f917 	bl	2935c <rpc_gnss_client_data_free>
   2712e:	2300      	movs	r3, #0
   27130:	f8c9 3000 	str.w	r3, [r9]
   27134:	6823      	ldr	r3, [r4, #0]
   27136:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   2713a:	6023      	str	r3, [r4, #0]
   2713c:	4628      	mov	r0, r5
   2713e:	b007      	add	sp, #28
   27140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27144:	6823      	ldr	r3, [r4, #0]
   27146:	4605      	mov	r5, r0
   27148:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   2714c:	6023      	str	r3, [r4, #0]
   2714e:	e7f5      	b.n	2713c <gnss_interface_getopt+0x148>
   27150:	f8b0 300f 	ldrh.w	r3, [r0, #15]
   27154:	2500      	movs	r5, #0
   27156:	f8a8 3000 	strh.w	r3, [r8]
   2715a:	e7e6      	b.n	2712a <gnss_interface_getopt+0x136>
   2715c:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   27160:	2500      	movs	r5, #0
   27162:	f8a8 3000 	strh.w	r3, [r8]
   27166:	e7e0      	b.n	2712a <gnss_interface_getopt+0x136>
   27168:	7b83      	ldrb	r3, [r0, #14]
   2716a:	2500      	movs	r5, #0
   2716c:	f888 3000 	strb.w	r3, [r8]
   27170:	e7db      	b.n	2712a <gnss_interface_getopt+0x136>
   27172:	f8b0 3013 	ldrh.w	r3, [r0, #19]
   27176:	2500      	movs	r5, #0
   27178:	f8a8 3000 	strh.w	r3, [r8]
   2717c:	e7d5      	b.n	2712a <gnss_interface_getopt+0x136>
   2717e:	7b03      	ldrb	r3, [r0, #12]
   27180:	2500      	movs	r5, #0
   27182:	f888 3000 	strb.w	r3, [r8]
   27186:	e7d0      	b.n	2712a <gnss_interface_getopt+0x136>
   27188:	2016      	movs	r0, #22
   2718a:	f7f8 ff5f 	bl	2004c <bsd_os_errno_set>
   2718e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   27192:	f8d9 0000 	ldr.w	r0, [r9]
   27196:	e7c8      	b.n	2712a <gnss_interface_getopt+0x136>
   27198:	b128      	cbz	r0, 271a6 <gnss_interface_getopt+0x1b2>
   2719a:	6803      	ldr	r3, [r0, #0]
   2719c:	b11b      	cbz	r3, 271a6 <gnss_interface_getopt+0x1b2>
   2719e:	4618      	mov	r0, r3
   271a0:	f002 f8dc 	bl	2935c <rpc_gnss_client_data_free>
   271a4:	9800      	ldr	r0, [sp, #0]
   271a6:	f002 f8d1 	bl	2934c <rpc_gnss_client_message_free>
   271aa:	2023      	movs	r0, #35	; 0x23
   271ac:	f7f8 ff4e 	bl	2004c <bsd_os_errno_set>
   271b0:	6823      	ldr	r3, [r4, #0]
   271b2:	200e      	movs	r0, #14
   271b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   271b8:	6023      	str	r3, [r4, #0]
   271ba:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   271be:	f7f8 ff45 	bl	2004c <bsd_os_errno_set>
   271c2:	e746      	b.n	27052 <gnss_interface_getopt+0x5e>
   271c4:	200e      	movs	r0, #14
   271c6:	f7f8 ff41 	bl	2004c <bsd_os_errno_set>
   271ca:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   271ce:	e740      	b.n	27052 <gnss_interface_getopt+0x5e>
   271d0:	202a      	movs	r0, #42	; 0x2a
   271d2:	f7f8 ff3b 	bl	2004c <bsd_os_errno_set>
   271d6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   271da:	e73a      	b.n	27052 <gnss_interface_getopt+0x5e>
   271dc:	2009      	movs	r0, #9
   271de:	f7f8 ff35 	bl	2004c <bsd_os_errno_set>
   271e2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   271e6:	e734      	b.n	27052 <gnss_interface_getopt+0x5e>
   271e8:	2005      	movs	r0, #5
   271ea:	f7f8 ff2f 	bl	2004c <bsd_os_errno_set>
   271ee:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   271f2:	e72e      	b.n	27052 <gnss_interface_getopt+0x5e>
   271f4:	2073      	movs	r0, #115	; 0x73
   271f6:	f7f8 ff29 	bl	2004c <bsd_os_errno_set>
   271fa:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   271fe:	e728      	b.n	27052 <gnss_interface_getopt+0x5e>
   27200:	200227a8 	.word	0x200227a8
   27204:	49765443 	.word	0x49765443
   27208:	20020220 	.word	0x20020220
   2720c:	2002761e 	.word	0x2002761e
   27210:	200227ac 	.word	0x200227ac

00027214 <gnss_interface_init>:
   27214:	2100      	movs	r1, #0
   27216:	b538      	push	{r3, r4, r5, lr}
   27218:	4c0a      	ldr	r4, [pc, #40]	; (27244 <gnss_interface_init+0x30>)
   2721a:	4d0b      	ldr	r5, [pc, #44]	; (27248 <gnss_interface_init+0x34>)
   2721c:	6822      	ldr	r2, [r4, #0]
   2721e:	480b      	ldr	r0, [pc, #44]	; (2724c <gnss_interface_init+0x38>)
   27220:	4b0b      	ldr	r3, [pc, #44]	; (27250 <gnss_interface_init+0x3c>)
   27222:	402a      	ands	r2, r5
   27224:	6022      	str	r2, [r4, #0]
   27226:	8001      	strh	r1, [r0, #0]
   27228:	6019      	str	r1, [r3, #0]
   2722a:	f002 f85f 	bl	292ec <rpc_gnss_client_init>
   2722e:	b938      	cbnz	r0, 27240 <gnss_interface_init+0x2c>
   27230:	2101      	movs	r1, #1
   27232:	6823      	ldr	r3, [r4, #0]
   27234:	4a07      	ldr	r2, [pc, #28]	; (27254 <gnss_interface_init+0x40>)
   27236:	402b      	ands	r3, r5
   27238:	430b      	orrs	r3, r1
   2723a:	7011      	strb	r1, [r2, #0]
   2723c:	6023      	str	r3, [r4, #0]
   2723e:	bd38      	pop	{r3, r4, r5, pc}
   27240:	2003      	movs	r0, #3
   27242:	bd38      	pop	{r3, r4, r5, pc}
   27244:	200227a8 	.word	0x200227a8
   27248:	ffff0000 	.word	0xffff0000
   2724c:	2002761e 	.word	0x2002761e
   27250:	200227ac 	.word	0x200227ac
   27254:	20029088 	.word	0x20029088

00027258 <gnss_interface_open>:
   27258:	b510      	push	{r4, lr}
   2725a:	4b1c      	ldr	r3, [pc, #112]	; (272cc <gnss_interface_open+0x74>)
   2725c:	781b      	ldrb	r3, [r3, #0]
   2725e:	b34b      	cbz	r3, 272b4 <gnss_interface_open+0x5c>
   27260:	2902      	cmp	r1, #2
   27262:	d121      	bne.n	272a8 <gnss_interface_open+0x50>
   27264:	4c1a      	ldr	r4, [pc, #104]	; (272d0 <gnss_interface_open+0x78>)
   27266:	6823      	ldr	r3, [r4, #0]
   27268:	b29b      	uxth	r3, r3
   2726a:	2b01      	cmp	r3, #1
   2726c:	d116      	bne.n	2729c <gnss_interface_open+0x44>
   2726e:	6823      	ldr	r3, [r4, #0]
   27270:	4608      	mov	r0, r1
   27272:	0c1b      	lsrs	r3, r3, #16
   27274:	041b      	lsls	r3, r3, #16
   27276:	f043 0302 	orr.w	r3, r3, #2
   2727a:	2200      	movs	r2, #0
   2727c:	4915      	ldr	r1, [pc, #84]	; (272d4 <gnss_interface_open+0x7c>)
   2727e:	6023      	str	r3, [r4, #0]
   27280:	f002 f956 	bl	29530 <packet_handler_create>
   27284:	4a14      	ldr	r2, [pc, #80]	; (272d8 <gnss_interface_open+0x80>)
   27286:	6010      	str	r0, [r2, #0]
   27288:	b1d0      	cbz	r0, 272c0 <gnss_interface_open+0x68>
   2728a:	6823      	ldr	r3, [r4, #0]
   2728c:	6802      	ldr	r2, [r0, #0]
   2728e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   27292:	6812      	ldr	r2, [r2, #0]
   27294:	6023      	str	r3, [r4, #0]
   27296:	4790      	blx	r2
   27298:	4810      	ldr	r0, [pc, #64]	; (272dc <gnss_interface_open+0x84>)
   2729a:	bd10      	pop	{r4, pc}
   2729c:	2005      	movs	r0, #5
   2729e:	f7f8 fed5 	bl	2004c <bsd_os_errno_set>
   272a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   272a6:	bd10      	pop	{r4, pc}
   272a8:	2029      	movs	r0, #41	; 0x29
   272aa:	f7f8 fecf 	bl	2004c <bsd_os_errno_set>
   272ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   272b2:	bd10      	pop	{r4, pc}
   272b4:	2070      	movs	r0, #112	; 0x70
   272b6:	f7f8 fec9 	bl	2004c <bsd_os_errno_set>
   272ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   272be:	bd10      	pop	{r4, pc}
   272c0:	200e      	movs	r0, #14
   272c2:	f7f8 fec3 	bl	2004c <bsd_os_errno_set>
   272c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   272ca:	bd10      	pop	{r4, pc}
   272cc:	20029088 	.word	0x20029088
   272d0:	200227a8 	.word	0x200227a8
   272d4:	00026551 	.word	0x00026551
   272d8:	200227b0 	.word	0x200227b0
   272dc:	49765443 	.word	0x49765443

000272e0 <gnss_interface_close>:
   272e0:	b530      	push	{r4, r5, lr}
   272e2:	4b15      	ldr	r3, [pc, #84]	; (27338 <gnss_interface_close+0x58>)
   272e4:	b085      	sub	sp, #20
   272e6:	4298      	cmp	r0, r3
   272e8:	d11f      	bne.n	2732a <gnss_interface_close+0x4a>
   272ea:	4c14      	ldr	r4, [pc, #80]	; (2733c <gnss_interface_close+0x5c>)
   272ec:	6822      	ldr	r2, [r4, #0]
   272ee:	b292      	uxth	r2, r2
   272f0:	2a04      	cmp	r2, #4
   272f2:	d00f      	beq.n	27314 <gnss_interface_close+0x34>
   272f4:	4d12      	ldr	r5, [pc, #72]	; (27340 <gnss_interface_close+0x60>)
   272f6:	6828      	ldr	r0, [r5, #0]
   272f8:	b118      	cbz	r0, 27302 <gnss_interface_close+0x22>
   272fa:	f002 f939 	bl	29570 <packet_handler_delete>
   272fe:	2300      	movs	r3, #0
   27300:	602b      	str	r3, [r5, #0]
   27302:	2000      	movs	r0, #0
   27304:	6823      	ldr	r3, [r4, #0]
   27306:	0c1b      	lsrs	r3, r3, #16
   27308:	041b      	lsls	r3, r3, #16
   2730a:	f043 0301 	orr.w	r3, r3, #1
   2730e:	6023      	str	r3, [r4, #0]
   27310:	b005      	add	sp, #20
   27312:	bd30      	pop	{r4, r5, pc}
   27314:	2100      	movs	r1, #0
   27316:	ab04      	add	r3, sp, #16
   27318:	f843 1d04 	str.w	r1, [r3, #-4]!
   2731c:	9200      	str	r2, [sp, #0]
   2731e:	f44f 7101 	mov.w	r1, #516	; 0x204
   27322:	2208      	movs	r2, #8
   27324:	f001 fe62 	bl	28fec <nrf_setsockopt>
   27328:	e7e4      	b.n	272f4 <gnss_interface_close+0x14>
   2732a:	2009      	movs	r0, #9
   2732c:	f7f8 fe8e 	bl	2004c <bsd_os_errno_set>
   27330:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   27334:	e7ec      	b.n	27310 <gnss_interface_close+0x30>
   27336:	bf00      	nop
   27338:	49765443 	.word	0x49765443
   2733c:	200227a8 	.word	0x200227a8
   27340:	200227b0 	.word	0x200227b0

00027344 <rpc_logobj_client_evt_handler>:
   27344:	b120      	cbz	r0, 27350 <rpc_logobj_client_evt_handler+0xc>
   27346:	f850 1b08 	ldr.w	r1, [r0], #8
   2734a:	0c09      	lsrs	r1, r1, #16
   2734c:	f7fb b8c8 	b.w	224e0 <logobj_event_handler>
   27350:	4770      	bx	lr
   27352:	bf00      	nop

00027354 <rpc_logobj_client_init>:
   27354:	4801      	ldr	r0, [pc, #4]	; (2735c <rpc_logobj_client_init+0x8>)
   27356:	f7ff b83d 	b.w	263d4 <rpc_client_register>
   2735a:	bf00      	nop
   2735c:	0003a97c 	.word	0x0003a97c

00027360 <rpc_logobj_client_request_alloc>:
   27360:	2300      	movs	r3, #0
   27362:	b510      	push	{r4, lr}
   27364:	b082      	sub	sp, #8
   27366:	9301      	str	r3, [sp, #4]
   27368:	b961      	cbnz	r1, 27384 <rpc_logobj_client_request_alloc+0x24>
   2736a:	b170      	cbz	r0, 2738a <rpc_logobj_client_request_alloc+0x2a>
   2736c:	4604      	mov	r4, r0
   2736e:	aa01      	add	r2, sp, #4
   27370:	2009      	movs	r0, #9
   27372:	f7ff f8a9 	bl	264c8 <rpc_message_alloc>
   27376:	b918      	cbnz	r0, 27380 <rpc_logobj_client_request_alloc+0x20>
   27378:	9b01      	ldr	r3, [sp, #4]
   2737a:	b10b      	cbz	r3, 27380 <rpc_logobj_client_request_alloc+0x20>
   2737c:	3308      	adds	r3, #8
   2737e:	6023      	str	r3, [r4, #0]
   27380:	b002      	add	sp, #8
   27382:	bd10      	pop	{r4, pc}
   27384:	200f      	movs	r0, #15
   27386:	b002      	add	sp, #8
   27388:	bd10      	pop	{r4, pc}
   2738a:	200e      	movs	r0, #14
   2738c:	b002      	add	sp, #8
   2738e:	bd10      	pop	{r4, pc}

00027390 <rpc_logobj_client_request_send>:
   27390:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   27394:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   27398:	d10b      	bne.n	273b2 <rpc_logobj_client_request_send+0x22>
   2739a:	b160      	cbz	r0, 273b6 <rpc_logobj_client_request_send+0x26>
   2739c:	4603      	mov	r3, r0
   2739e:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   273a2:	2009      	movs	r0, #9
   273a4:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   273a8:	f843 1d08 	str.w	r1, [r3, #-8]!
   273ac:	4619      	mov	r1, r3
   273ae:	f7ff b87b 	b.w	264a8 <rpc_message_send>
   273b2:	200f      	movs	r0, #15
   273b4:	4770      	bx	lr
   273b6:	200e      	movs	r0, #14
   273b8:	4770      	bx	lr
   273ba:	bf00      	nop

000273bc <rpc_logobj_client_message_free>:
   273bc:	b120      	cbz	r0, 273c8 <rpc_logobj_client_message_free+0xc>
   273be:	f1a0 0108 	sub.w	r1, r0, #8
   273c2:	2009      	movs	r0, #9
   273c4:	f7ff b8ac 	b.w	26520 <rpc_message_free>
   273c8:	200e      	movs	r0, #14
   273ca:	4770      	bx	lr

000273cc <rpc_logobj_client_data_free>:
   273cc:	b118      	cbz	r0, 273d6 <rpc_logobj_client_data_free+0xa>
   273ce:	4601      	mov	r1, r0
   273d0:	2009      	movs	r0, #9
   273d2:	f7ff b8b1 	b.w	26538 <rpc_message_data_free>
   273d6:	200e      	movs	r0, #14
   273d8:	4770      	bx	lr
   273da:	bf00      	nop

000273dc <dfu_client_event_handler>:
   273dc:	f850 1b08 	ldr.w	r1, [r0], #8
   273e0:	0c09      	lsrs	r1, r1, #16
   273e2:	f002 bdcb 	b.w	29f7c <rpc_dfu_event_handler>
   273e6:	bf00      	nop

000273e8 <rpc_dfu_client_init>:
   273e8:	4801      	ldr	r0, [pc, #4]	; (273f0 <rpc_dfu_client_init+0x8>)
   273ea:	f7fe bff3 	b.w	263d4 <rpc_client_register>
   273ee:	bf00      	nop
   273f0:	0003a98c 	.word	0x0003a98c

000273f4 <rpc_dfu_client_request_alloc>:
   273f4:	2300      	movs	r3, #0
   273f6:	b510      	push	{r4, lr}
   273f8:	b082      	sub	sp, #8
   273fa:	9301      	str	r3, [sp, #4]
   273fc:	b158      	cbz	r0, 27416 <rpc_dfu_client_request_alloc+0x22>
   273fe:	4604      	mov	r4, r0
   27400:	aa01      	add	r2, sp, #4
   27402:	2006      	movs	r0, #6
   27404:	f7ff f860 	bl	264c8 <rpc_message_alloc>
   27408:	b918      	cbnz	r0, 27412 <rpc_dfu_client_request_alloc+0x1e>
   2740a:	9b01      	ldr	r3, [sp, #4]
   2740c:	b10b      	cbz	r3, 27412 <rpc_dfu_client_request_alloc+0x1e>
   2740e:	3308      	adds	r3, #8
   27410:	6023      	str	r3, [r4, #0]
   27412:	b002      	add	sp, #8
   27414:	bd10      	pop	{r4, pc}
   27416:	2007      	movs	r0, #7
   27418:	b002      	add	sp, #8
   2741a:	bd10      	pop	{r4, pc}

0002741c <rpc_dfu_client_request_send>:
   2741c:	f411 4f70 	tst.w	r1, #61440	; 0xf000
   27420:	d10b      	bne.n	2743a <rpc_dfu_client_request_send+0x1e>
   27422:	b160      	cbz	r0, 2743e <rpc_dfu_client_request_send+0x22>
   27424:	4603      	mov	r3, r0
   27426:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   2742a:	2006      	movs	r0, #6
   2742c:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   27430:	f843 1d08 	str.w	r1, [r3, #-8]!
   27434:	4619      	mov	r1, r3
   27436:	f7ff b837 	b.w	264a8 <rpc_message_send>
   2743a:	200f      	movs	r0, #15
   2743c:	4770      	bx	lr
   2743e:	2007      	movs	r0, #7
   27440:	4770      	bx	lr
   27442:	bf00      	nop

00027444 <rpc_dfu_client_message_free>:
   27444:	b120      	cbz	r0, 27450 <rpc_dfu_client_message_free+0xc>
   27446:	f1a0 0108 	sub.w	r1, r0, #8
   2744a:	2006      	movs	r0, #6
   2744c:	f7ff b868 	b.w	26520 <rpc_message_free>
   27450:	2007      	movs	r0, #7
   27452:	4770      	bx	lr

00027454 <rpc_dfu_client_data_free>:
   27454:	b118      	cbz	r0, 2745e <rpc_dfu_client_data_free+0xa>
   27456:	4601      	mov	r1, r0
   27458:	2006      	movs	r0, #6
   2745a:	f7ff b86d 	b.w	26538 <rpc_message_data_free>
   2745e:	2007      	movs	r0, #7
   27460:	4770      	bx	lr
   27462:	bf00      	nop

00027464 <packet_free_cb>:
   27464:	6800      	ldr	r0, [r0, #0]
   27466:	f003 bae3 	b.w	2aa30 <rpc_at_client_data_free>
   2746a:	bf00      	nop

0002746c <at_interface_write>:
   2746c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27470:	b083      	sub	sp, #12
   27472:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   27474:	2c00      	cmp	r4, #0
   27476:	d16c      	bne.n	27552 <at_interface_write+0xe6>
   27478:	4688      	mov	r8, r1
   2747a:	4615      	mov	r5, r2
   2747c:	461e      	mov	r6, r3
   2747e:	4607      	mov	r7, r0
   27480:	f003 f9a8 	bl	2a7d4 <interface_socket_from_handle_get>
   27484:	4604      	mov	r4, r0
   27486:	2e00      	cmp	r6, #0
   27488:	d137      	bne.n	274fa <at_interface_write+0x8e>
   2748a:	2800      	cmp	r0, #0
   2748c:	d067      	beq.n	2755e <at_interface_write+0xf2>
   2748e:	6803      	ldr	r3, [r0, #0]
   27490:	039b      	lsls	r3, r3, #14
   27492:	d564      	bpl.n	2755e <at_interface_write+0xf2>
   27494:	6803      	ldr	r3, [r0, #0]
   27496:	4629      	mov	r1, r5
   27498:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2749c:	6003      	str	r3, [r0, #0]
   2749e:	6803      	ldr	r3, [r0, #0]
   274a0:	4668      	mov	r0, sp
   274a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   274a6:	6023      	str	r3, [r4, #0]
   274a8:	f003 fa98 	bl	2a9dc <rpc_at_client_request_alloc>
   274ac:	4606      	mov	r6, r0
   274ae:	4638      	mov	r0, r7
   274b0:	f003 f990 	bl	2a7d4 <interface_socket_from_handle_get>
   274b4:	4681      	mov	r9, r0
   274b6:	bb56      	cbnz	r6, 2750e <at_interface_write+0xa2>
   274b8:	2304      	movs	r3, #4
   274ba:	9800      	ldr	r0, [sp, #0]
   274bc:	7203      	strb	r3, [r0, #8]
   274be:	7246      	strb	r6, [r0, #9]
   274c0:	7286      	strb	r6, [r0, #10]
   274c2:	72c6      	strb	r6, [r0, #11]
   274c4:	60c7      	str	r7, [r0, #12]
   274c6:	bb25      	cbnz	r5, 27512 <at_interface_write+0xa6>
   274c8:	2101      	movs	r1, #1
   274ca:	f003 fa9b 	bl	2aa04 <rpc_at_client_request_send>
   274ce:	bb78      	cbnz	r0, 27530 <at_interface_write+0xc4>
   274d0:	f8d9 1024 	ldr.w	r1, [r9, #36]	; 0x24
   274d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   274d8:	2900      	cmp	r1, #0
   274da:	bf08      	it	eq
   274dc:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   274e0:	ab02      	add	r3, sp, #8
   274e2:	f843 1d04 	str.w	r1, [r3, #-4]!
   274e6:	4638      	mov	r0, r7
   274e8:	4611      	mov	r1, r2
   274ea:	f003 f8ff 	bl	2a6ec <interface_socket_wait>
   274ee:	b320      	cbz	r0, 2753a <at_interface_write+0xce>
   274f0:	6823      	ldr	r3, [r4, #0]
   274f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   274f6:	6023      	str	r3, [r4, #0]
   274f8:	e002      	b.n	27500 <at_interface_write+0x94>
   274fa:	b390      	cbz	r0, 27562 <at_interface_write+0xf6>
   274fc:	6803      	ldr	r3, [r0, #0]
   274fe:	202d      	movs	r0, #45	; 0x2d
   27500:	f7f8 fda4 	bl	2004c <bsd_os_errno_set>
   27504:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   27508:	b003      	add	sp, #12
   2750a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2750e:	200c      	movs	r0, #12
   27510:	e7ee      	b.n	274f0 <at_interface_write+0x84>
   27512:	4641      	mov	r1, r8
   27514:	6800      	ldr	r0, [r0, #0]
   27516:	462a      	mov	r2, r5
   27518:	f011 fd53 	bl	38fc2 <memcpy>
   2751c:	2101      	movs	r1, #1
   2751e:	9800      	ldr	r0, [sp, #0]
   27520:	f003 fa70 	bl	2aa04 <rpc_at_client_request_send>
   27524:	2800      	cmp	r0, #0
   27526:	d0d3      	beq.n	274d0 <at_interface_write+0x64>
   27528:	9b00      	ldr	r3, [sp, #0]
   2752a:	6818      	ldr	r0, [r3, #0]
   2752c:	f003 fa80 	bl	2aa30 <rpc_at_client_data_free>
   27530:	9800      	ldr	r0, [sp, #0]
   27532:	f003 fa75 	bl	2aa20 <rpc_at_client_message_free>
   27536:	2023      	movs	r0, #35	; 0x23
   27538:	e7da      	b.n	274f0 <at_interface_write+0x84>
   2753a:	4638      	mov	r0, r7
   2753c:	f003 f94a 	bl	2a7d4 <interface_socket_from_handle_get>
   27540:	4603      	mov	r3, r0
   27542:	b120      	cbz	r0, 2754e <at_interface_write+0xe2>
   27544:	6840      	ldr	r0, [r0, #4]
   27546:	b110      	cbz	r0, 2754e <at_interface_write+0xe2>
   27548:	2200      	movs	r2, #0
   2754a:	605a      	str	r2, [r3, #4]
   2754c:	e7d0      	b.n	274f0 <at_interface_write+0x84>
   2754e:	4628      	mov	r0, r5
   27550:	e7da      	b.n	27508 <at_interface_write+0x9c>
   27552:	2038      	movs	r0, #56	; 0x38
   27554:	f7f8 fd7a 	bl	2004c <bsd_os_errno_set>
   27558:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2755c:	e7d4      	b.n	27508 <at_interface_write+0x9c>
   2755e:	2016      	movs	r0, #22
   27560:	e7ce      	b.n	27500 <at_interface_write+0x94>
   27562:	202d      	movs	r0, #45	; 0x2d
   27564:	e7cc      	b.n	27500 <at_interface_write+0x94>
   27566:	bf00      	nop

00027568 <at_interface_init>:
   27568:	b508      	push	{r3, lr}
   2756a:	f003 fa31 	bl	2a9d0 <rpc_at_client_init>
   2756e:	b910      	cbnz	r0, 27576 <at_interface_init+0xe>
   27570:	2201      	movs	r2, #1
   27572:	4b01      	ldr	r3, [pc, #4]	; (27578 <at_interface_init+0x10>)
   27574:	701a      	strb	r2, [r3, #0]
   27576:	bd08      	pop	{r3, pc}
   27578:	20029089 	.word	0x20029089

0002757c <at_interface_open>:
   2757c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27580:	2600      	movs	r6, #0
   27582:	4b34      	ldr	r3, [pc, #208]	; (27654 <at_interface_open+0xd8>)
   27584:	b084      	sub	sp, #16
   27586:	781b      	ldrb	r3, [r3, #0]
   27588:	9601      	str	r6, [sp, #4]
   2758a:	2b00      	cmp	r3, #0
   2758c:	d05c      	beq.n	27648 <at_interface_open+0xcc>
   2758e:	2902      	cmp	r1, #2
   27590:	460d      	mov	r5, r1
   27592:	d153      	bne.n	2763c <at_interface_open+0xc0>
   27594:	4680      	mov	r8, r0
   27596:	4617      	mov	r7, r2
   27598:	a801      	add	r0, sp, #4
   2759a:	4a2f      	ldr	r2, [pc, #188]	; (27658 <at_interface_open+0xdc>)
   2759c:	f002 fff4 	bl	2a588 <interface_socket_allocate>
   275a0:	9b01      	ldr	r3, [sp, #4]
   275a2:	4604      	mov	r4, r0
   275a4:	b3c3      	cbz	r3, 27618 <at_interface_open+0x9c>
   275a6:	615f      	str	r7, [r3, #20]
   275a8:	4631      	mov	r1, r6
   275aa:	e9c3 8503 	strd	r8, r5, [r3, #12]
   275ae:	a802      	add	r0, sp, #8
   275b0:	f003 fa14 	bl	2a9dc <rpc_at_client_request_alloc>
   275b4:	4606      	mov	r6, r0
   275b6:	4620      	mov	r0, r4
   275b8:	f003 f90c 	bl	2a7d4 <interface_socket_from_handle_get>
   275bc:	4607      	mov	r7, r0
   275be:	bb16      	cbnz	r6, 27606 <at_interface_open+0x8a>
   275c0:	2304      	movs	r3, #4
   275c2:	9802      	ldr	r0, [sp, #8]
   275c4:	2105      	movs	r1, #5
   275c6:	7246      	strb	r6, [r0, #9]
   275c8:	7286      	strb	r6, [r0, #10]
   275ca:	72c6      	strb	r6, [r0, #11]
   275cc:	7203      	strb	r3, [r0, #8]
   275ce:	60c4      	str	r4, [r0, #12]
   275d0:	f003 fa18 	bl	2aa04 <rpc_at_client_request_send>
   275d4:	4606      	mov	r6, r0
   275d6:	bb60      	cbnz	r0, 27632 <at_interface_open+0xb6>
   275d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   275da:	ab04      	add	r3, sp, #16
   275dc:	2a00      	cmp	r2, #0
   275de:	bf08      	it	eq
   275e0:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   275e4:	4629      	mov	r1, r5
   275e6:	f843 2d04 	str.w	r2, [r3, #-4]!
   275ea:	4620      	mov	r0, r4
   275ec:	462a      	mov	r2, r5
   275ee:	f003 f87d 	bl	2a6ec <interface_socket_wait>
   275f2:	4605      	mov	r5, r0
   275f4:	b940      	cbnz	r0, 27608 <at_interface_open+0x8c>
   275f6:	4620      	mov	r0, r4
   275f8:	f003 f8ec 	bl	2a7d4 <interface_socket_from_handle_get>
   275fc:	b180      	cbz	r0, 27620 <at_interface_open+0xa4>
   275fe:	6845      	ldr	r5, [r0, #4]
   27600:	b175      	cbz	r5, 27620 <at_interface_open+0xa4>
   27602:	6046      	str	r6, [r0, #4]
   27604:	e000      	b.n	27608 <at_interface_open+0x8c>
   27606:	250c      	movs	r5, #12
   27608:	4620      	mov	r0, r4
   2760a:	f003 f821 	bl	2a650 <interface_socket_free>
   2760e:	4628      	mov	r0, r5
   27610:	f7f8 fd1c 	bl	2004c <bsd_os_errno_set>
   27614:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   27618:	4620      	mov	r0, r4
   2761a:	b004      	add	sp, #16
   2761c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27620:	4620      	mov	r0, r4
   27622:	9a01      	ldr	r2, [sp, #4]
   27624:	6813      	ldr	r3, [r2, #0]
   27626:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2762a:	6013      	str	r3, [r2, #0]
   2762c:	b004      	add	sp, #16
   2762e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27632:	9802      	ldr	r0, [sp, #8]
   27634:	f003 f9f4 	bl	2aa20 <rpc_at_client_message_free>
   27638:	2523      	movs	r5, #35	; 0x23
   2763a:	e7e5      	b.n	27608 <at_interface_open+0x8c>
   2763c:	2029      	movs	r0, #41	; 0x29
   2763e:	f7f8 fd05 	bl	2004c <bsd_os_errno_set>
   27642:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   27646:	e7e7      	b.n	27618 <at_interface_open+0x9c>
   27648:	2070      	movs	r0, #112	; 0x70
   2764a:	f7f8 fcff 	bl	2004c <bsd_os_errno_set>
   2764e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   27652:	e7e1      	b.n	27618 <at_interface_open+0x9c>
   27654:	20029089 	.word	0x20029089
   27658:	00027465 	.word	0x00027465

0002765c <at_interface_close>:
   2765c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27660:	b082      	sub	sp, #8
   27662:	4606      	mov	r6, r0
   27664:	f003 f8b6 	bl	2a7d4 <interface_socket_from_handle_get>
   27668:	2800      	cmp	r0, #0
   2766a:	d051      	beq.n	27710 <at_interface_close+0xb4>
   2766c:	230d      	movs	r3, #13
   2766e:	6807      	ldr	r7, [r0, #0]
   27670:	6003      	str	r3, [r0, #0]
   27672:	6803      	ldr	r3, [r0, #0]
   27674:	4604      	mov	r4, r0
   27676:	039b      	lsls	r3, r3, #14
   27678:	d42e      	bmi.n	276d8 <at_interface_close+0x7c>
   2767a:	2100      	movs	r1, #0
   2767c:	4668      	mov	r0, sp
   2767e:	f003 f9ad 	bl	2a9dc <rpc_at_client_request_alloc>
   27682:	4605      	mov	r5, r0
   27684:	4630      	mov	r0, r6
   27686:	f003 f8a5 	bl	2a7d4 <interface_socket_from_handle_get>
   2768a:	4680      	mov	r8, r0
   2768c:	bb75      	cbnz	r5, 276ec <at_interface_close+0x90>
   2768e:	2304      	movs	r3, #4
   27690:	9800      	ldr	r0, [sp, #0]
   27692:	2106      	movs	r1, #6
   27694:	7203      	strb	r3, [r0, #8]
   27696:	7245      	strb	r5, [r0, #9]
   27698:	7285      	strb	r5, [r0, #10]
   2769a:	72c5      	strb	r5, [r0, #11]
   2769c:	60c6      	str	r6, [r0, #12]
   2769e:	f003 f9b1 	bl	2aa04 <rpc_at_client_request_send>
   276a2:	b9f0      	cbnz	r0, 276e2 <at_interface_close+0x86>
   276a4:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
   276a8:	220e      	movs	r2, #14
   276aa:	2900      	cmp	r1, #0
   276ac:	bf08      	it	eq
   276ae:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   276b2:	ab02      	add	r3, sp, #8
   276b4:	f843 1d04 	str.w	r1, [r3, #-4]!
   276b8:	4630      	mov	r0, r6
   276ba:	4611      	mov	r1, r2
   276bc:	f003 f816 	bl	2a6ec <interface_socket_wait>
   276c0:	4605      	mov	r5, r0
   276c2:	b1a8      	cbz	r0, 276f0 <at_interface_close+0x94>
   276c4:	6027      	str	r7, [r4, #0]
   276c6:	4628      	mov	r0, r5
   276c8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   276cc:	f7f8 fcbe 	bl	2004c <bsd_os_errno_set>
   276d0:	4628      	mov	r0, r5
   276d2:	b002      	add	sp, #8
   276d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   276d8:	6803      	ldr	r3, [r0, #0]
   276da:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   276de:	6003      	str	r3, [r0, #0]
   276e0:	e7cb      	b.n	2767a <at_interface_close+0x1e>
   276e2:	9800      	ldr	r0, [sp, #0]
   276e4:	f003 f99c 	bl	2aa20 <rpc_at_client_message_free>
   276e8:	2523      	movs	r5, #35	; 0x23
   276ea:	e7eb      	b.n	276c4 <at_interface_close+0x68>
   276ec:	250c      	movs	r5, #12
   276ee:	e7e9      	b.n	276c4 <at_interface_close+0x68>
   276f0:	4630      	mov	r0, r6
   276f2:	f003 f86f 	bl	2a7d4 <interface_socket_from_handle_get>
   276f6:	b120      	cbz	r0, 27702 <at_interface_close+0xa6>
   276f8:	6843      	ldr	r3, [r0, #4]
   276fa:	b113      	cbz	r3, 27702 <at_interface_close+0xa6>
   276fc:	6045      	str	r5, [r0, #4]
   276fe:	461d      	mov	r5, r3
   27700:	e7e0      	b.n	276c4 <at_interface_close+0x68>
   27702:	4630      	mov	r0, r6
   27704:	f002 ffa4 	bl	2a650 <interface_socket_free>
   27708:	4628      	mov	r0, r5
   2770a:	b002      	add	sp, #8
   2770c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27710:	2516      	movs	r5, #22
   27712:	e7d8      	b.n	276c6 <at_interface_close+0x6a>

00027714 <at_interface_read>:
   27714:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27718:	b087      	sub	sp, #28
   2771a:	4688      	mov	r8, r1
   2771c:	4615      	mov	r5, r2
   2771e:	461e      	mov	r6, r3
   27720:	4607      	mov	r7, r0
   27722:	f003 f857 	bl	2a7d4 <interface_socket_from_handle_get>
   27726:	2800      	cmp	r0, #0
   27728:	d056      	beq.n	277d8 <at_interface_read+0xc4>
   2772a:	2300      	movs	r3, #0
   2772c:	4604      	mov	r4, r0
   2772e:	e9cd 8502 	strd	r8, r5, [sp, #8]
   27732:	e9cd 3304 	strd	r3, r3, [sp, #16]
   27736:	bb66      	cbnz	r6, 27792 <at_interface_read+0x7e>
   27738:	f016 0502 	ands.w	r5, r6, #2
   2773c:	d136      	bne.n	277ac <at_interface_read+0x98>
   2773e:	46a8      	mov	r8, r5
   27740:	6823      	ldr	r3, [r4, #0]
   27742:	69e0      	ldr	r0, [r4, #28]
   27744:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   27748:	6023      	str	r3, [r4, #0]
   2774a:	6803      	ldr	r3, [r0, #0]
   2774c:	4632      	mov	r2, r6
   2774e:	689b      	ldr	r3, [r3, #8]
   27750:	a902      	add	r1, sp, #8
   27752:	4798      	blx	r3
   27754:	f1b0 0900 	subs.w	r9, r0, #0
   27758:	da38      	bge.n	277cc <at_interface_read+0xb8>
   2775a:	bb05      	cbnz	r5, 2779e <at_interface_read+0x8a>
   2775c:	6a25      	ldr	r5, [r4, #32]
   2775e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   27762:	2d00      	cmp	r5, #0
   27764:	bf08      	it	eq
   27766:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
   2776a:	4611      	mov	r1, r2
   2776c:	ab01      	add	r3, sp, #4
   2776e:	4638      	mov	r0, r7
   27770:	9501      	str	r5, [sp, #4]
   27772:	f002 ffbb 	bl	2a6ec <interface_socket_wait>
   27776:	4605      	mov	r5, r0
   27778:	2800      	cmp	r0, #0
   2777a:	d1e1      	bne.n	27740 <at_interface_read+0x2c>
   2777c:	4638      	mov	r0, r7
   2777e:	f003 f829 	bl	2a7d4 <interface_socket_from_handle_get>
   27782:	2800      	cmp	r0, #0
   27784:	d0dc      	beq.n	27740 <at_interface_read+0x2c>
   27786:	6845      	ldr	r5, [r0, #4]
   27788:	2d00      	cmp	r5, #0
   2778a:	d0d9      	beq.n	27740 <at_interface_read+0x2c>
   2778c:	f8c0 8004 	str.w	r8, [r0, #4]
   27790:	e7d6      	b.n	27740 <at_interface_read+0x2c>
   27792:	f016 0f2a 	tst.w	r6, #42	; 0x2a
   27796:	d1cf      	bne.n	27738 <at_interface_read+0x24>
   27798:	252d      	movs	r5, #45	; 0x2d
   2779a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   2779e:	4628      	mov	r0, r5
   277a0:	f7f8 fc54 	bl	2004c <bsd_os_errno_set>
   277a4:	4648      	mov	r0, r9
   277a6:	b007      	add	sp, #28
   277a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   277ac:	6823      	ldr	r3, [r4, #0]
   277ae:	69e0      	ldr	r0, [r4, #28]
   277b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   277b4:	6023      	str	r3, [r4, #0]
   277b6:	6803      	ldr	r3, [r0, #0]
   277b8:	4632      	mov	r2, r6
   277ba:	689b      	ldr	r3, [r3, #8]
   277bc:	a902      	add	r1, sp, #8
   277be:	4798      	blx	r3
   277c0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   277c4:	4681      	mov	r9, r0
   277c6:	d1ed      	bne.n	277a4 <at_interface_read+0x90>
   277c8:	2523      	movs	r5, #35	; 0x23
   277ca:	e7e8      	b.n	2779e <at_interface_read+0x8a>
   277cc:	2d00      	cmp	r5, #0
   277ce:	d1e6      	bne.n	2779e <at_interface_read+0x8a>
   277d0:	4648      	mov	r0, r9
   277d2:	b007      	add	sp, #28
   277d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   277d8:	2516      	movs	r5, #22
   277da:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   277de:	e7de      	b.n	2779e <at_interface_read+0x8a>

000277e0 <at_interface_getopt>:
   277e0:	f003 b866 	b.w	2a8b0 <interface_socket_getopt>

000277e4 <at_interface_setopt>:
   277e4:	f003 b81e 	b.w	2a824 <interface_socket_setopt>

000277e8 <rpc_at_event_handler>:
   277e8:	b570      	push	{r4, r5, r6, lr}
   277ea:	4606      	mov	r6, r0
   277ec:	b084      	sub	sp, #16
   277ee:	68c0      	ldr	r0, [r0, #12]
   277f0:	460d      	mov	r5, r1
   277f2:	f002 ffef 	bl	2a7d4 <interface_socket_from_handle_get>
   277f6:	4604      	mov	r4, r0
   277f8:	b348      	cbz	r0, 2784e <rpc_at_event_handler+0x66>
   277fa:	6803      	ldr	r3, [r0, #0]
   277fc:	b29b      	uxth	r3, r3
   277fe:	2b01      	cmp	r3, #1
   27800:	d01f      	beq.n	27842 <rpc_at_event_handler+0x5a>
   27802:	6803      	ldr	r3, [r0, #0]
   27804:	b29b      	uxth	r3, r3
   27806:	2b0d      	cmp	r3, #13
   27808:	d029      	beq.n	2785e <rpc_at_event_handler+0x76>
   2780a:	6803      	ldr	r3, [r0, #0]
   2780c:	b29b      	uxth	r3, r3
   2780e:	2b02      	cmp	r3, #2
   27810:	d02d      	beq.n	2786e <rpc_at_event_handler+0x86>
   27812:	3d03      	subs	r5, #3
   27814:	2d01      	cmp	r5, #1
   27816:	d817      	bhi.n	27848 <rpc_at_event_handler+0x60>
   27818:	2500      	movs	r5, #0
   2781a:	6873      	ldr	r3, [r6, #4]
   2781c:	6832      	ldr	r2, [r6, #0]
   2781e:	e9cd 5502 	strd	r5, r5, [sp, #8]
   27822:	e9cd 2300 	strd	r2, r3, [sp]
   27826:	69e0      	ldr	r0, [r4, #28]
   27828:	4669      	mov	r1, sp
   2782a:	6803      	ldr	r3, [r0, #0]
   2782c:	685b      	ldr	r3, [r3, #4]
   2782e:	4798      	blx	r3
   27830:	3001      	adds	r0, #1
   27832:	d019      	beq.n	27868 <rpc_at_event_handler+0x80>
   27834:	4628      	mov	r0, r5
   27836:	6823      	ldr	r3, [r4, #0]
   27838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2783c:	6023      	str	r3, [r4, #0]
   2783e:	b004      	add	sp, #16
   27840:	bd70      	pop	{r4, r5, r6, pc}
   27842:	2d02      	cmp	r5, #2
   27844:	d1e5      	bne.n	27812 <rpc_at_event_handler+0x2a>
   27846:	6005      	str	r5, [r0, #0]
   27848:	2000      	movs	r0, #0
   2784a:	b004      	add	sp, #16
   2784c:	bd70      	pop	{r4, r5, r6, pc}
   2784e:	6830      	ldr	r0, [r6, #0]
   27850:	2800      	cmp	r0, #0
   27852:	d0f9      	beq.n	27848 <rpc_at_event_handler+0x60>
   27854:	f003 f8ec 	bl	2aa30 <rpc_at_client_data_free>
   27858:	4620      	mov	r0, r4
   2785a:	b004      	add	sp, #16
   2785c:	bd70      	pop	{r4, r5, r6, pc}
   2785e:	2d02      	cmp	r5, #2
   27860:	d1d7      	bne.n	27812 <rpc_at_event_handler+0x2a>
   27862:	230e      	movs	r3, #14
   27864:	6003      	str	r3, [r0, #0]
   27866:	e7ef      	b.n	27848 <rpc_at_event_handler+0x60>
   27868:	2002      	movs	r0, #2
   2786a:	b004      	add	sp, #16
   2786c:	bd70      	pop	{r4, r5, r6, pc}
   2786e:	6803      	ldr	r3, [r0, #0]
   27870:	029b      	lsls	r3, r3, #10
   27872:	d5ce      	bpl.n	27812 <rpc_at_event_handler+0x2a>
   27874:	2d02      	cmp	r5, #2
   27876:	d1cc      	bne.n	27812 <rpc_at_event_handler+0x2a>
   27878:	6803      	ldr	r3, [r0, #0]
   2787a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   2787e:	6003      	str	r3, [r0, #0]
   27880:	6803      	ldr	r3, [r0, #0]
   27882:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   27886:	6003      	str	r3, [r0, #0]
   27888:	e7de      	b.n	27848 <rpc_at_event_handler+0x60>
   2788a:	bf00      	nop

0002788c <ok_rsp_parser>:
   2788c:	2000      	movs	r0, #0
   2788e:	4770      	bx	lr

00027890 <pdn_state_get_parser>:
   27890:	2200      	movs	r2, #0
   27892:	b570      	push	{r4, r5, r6, lr}
   27894:	780b      	ldrb	r3, [r1, #0]
   27896:	b084      	sub	sp, #16
   27898:	460e      	mov	r6, r1
   2789a:	e9cd 2200 	strd	r2, r2, [sp]
   2789e:	e9cd 2202 	strd	r2, r2, [sp, #8]
   278a2:	b323      	cbz	r3, 278ee <pdn_state_get_parser+0x5e>
   278a4:	460c      	mov	r4, r1
   278a6:	2b20      	cmp	r3, #32
   278a8:	460d      	mov	r5, r1
   278aa:	d01b      	beq.n	278e4 <pdn_state_get_parser+0x54>
   278ac:	700b      	strb	r3, [r1, #0]
   278ae:	3201      	adds	r2, #1
   278b0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   278b4:	18b1      	adds	r1, r6, r2
   278b6:	460d      	mov	r5, r1
   278b8:	2b00      	cmp	r3, #0
   278ba:	d1f4      	bne.n	278a6 <pdn_state_get_parser+0x16>
   278bc:	2200      	movs	r2, #0
   278be:	4b0d      	ldr	r3, [pc, #52]	; (278f4 <pdn_state_get_parser+0x64>)
   278c0:	702a      	strb	r2, [r5, #0]
   278c2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   278c6:	4a0c      	ldr	r2, [pc, #48]	; (278f8 <pdn_state_get_parser+0x68>)
   278c8:	681b      	ldr	r3, [r3, #0]
   278ca:	2110      	movs	r1, #16
   278cc:	4668      	mov	r0, sp
   278ce:	f00a f9cd 	bl	31c6c <sniprintf>
   278d2:	4669      	mov	r1, sp
   278d4:	4630      	mov	r0, r6
   278d6:	f011 fd1c 	bl	39312 <strstr>
   278da:	3000      	adds	r0, #0
   278dc:	bf18      	it	ne
   278de:	2001      	movne	r0, #1
   278e0:	b004      	add	sp, #16
   278e2:	bd70      	pop	{r4, r5, r6, pc}
   278e4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   278e8:	2b00      	cmp	r3, #0
   278ea:	d1dc      	bne.n	278a6 <pdn_state_get_parser+0x16>
   278ec:	e7e6      	b.n	278bc <pdn_state_get_parser+0x2c>
   278ee:	460d      	mov	r5, r1
   278f0:	e7e4      	b.n	278bc <pdn_state_get_parser+0x2c>
   278f2:	bf00      	nop
   278f4:	200228b8 	.word	0x200228b8
   278f8:	0003aa44 	.word	0x0003aa44

000278fc <pdn_id_get_parser>:
   278fc:	b570      	push	{r4, r5, r6, lr}
   278fe:	780b      	ldrb	r3, [r1, #0]
   27900:	4606      	mov	r6, r0
   27902:	b313      	cbz	r3, 2794a <pdn_id_get_parser+0x4e>
   27904:	4608      	mov	r0, r1
   27906:	2400      	movs	r4, #0
   27908:	460a      	mov	r2, r1
   2790a:	2b20      	cmp	r3, #32
   2790c:	4615      	mov	r5, r2
   2790e:	d017      	beq.n	27940 <pdn_id_get_parser+0x44>
   27910:	7013      	strb	r3, [r2, #0]
   27912:	3401      	adds	r4, #1
   27914:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   27918:	190a      	adds	r2, r1, r4
   2791a:	4615      	mov	r5, r2
   2791c:	2b00      	cmp	r3, #0
   2791e:	d1f4      	bne.n	2790a <pdn_id_get_parser+0xe>
   27920:	2300      	movs	r3, #0
   27922:	4608      	mov	r0, r1
   27924:	702b      	strb	r3, [r5, #0]
   27926:	213a      	movs	r1, #58	; 0x3a
   27928:	f011 fccc 	bl	392c4 <strchr>
   2792c:	b130      	cbz	r0, 2793c <pdn_id_get_parser+0x40>
   2792e:	3001      	adds	r0, #1
   27930:	f011 fb27 	bl	38f82 <atoi>
   27934:	4b06      	ldr	r3, [pc, #24]	; (27950 <pdn_id_get_parser+0x54>)
   27936:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   2793a:	6058      	str	r0, [r3, #4]
   2793c:	2000      	movs	r0, #0
   2793e:	bd70      	pop	{r4, r5, r6, pc}
   27940:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   27944:	2b00      	cmp	r3, #0
   27946:	d1e0      	bne.n	2790a <pdn_id_get_parser+0xe>
   27948:	e7ea      	b.n	27920 <pdn_id_get_parser+0x24>
   2794a:	460d      	mov	r5, r1
   2794c:	e7e8      	b.n	27920 <pdn_id_get_parser+0x24>
   2794e:	bf00      	nop
   27950:	200228b8 	.word	0x200228b8

00027954 <context_create_parser>:
   27954:	b570      	push	{r4, r5, r6, lr}
   27956:	780b      	ldrb	r3, [r1, #0]
   27958:	4606      	mov	r6, r0
   2795a:	b313      	cbz	r3, 279a2 <context_create_parser+0x4e>
   2795c:	4608      	mov	r0, r1
   2795e:	2400      	movs	r4, #0
   27960:	460a      	mov	r2, r1
   27962:	2b20      	cmp	r3, #32
   27964:	4615      	mov	r5, r2
   27966:	d017      	beq.n	27998 <context_create_parser+0x44>
   27968:	7013      	strb	r3, [r2, #0]
   2796a:	3401      	adds	r4, #1
   2796c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   27970:	190a      	adds	r2, r1, r4
   27972:	4615      	mov	r5, r2
   27974:	2b00      	cmp	r3, #0
   27976:	d1f4      	bne.n	27962 <context_create_parser+0xe>
   27978:	2300      	movs	r3, #0
   2797a:	4608      	mov	r0, r1
   2797c:	702b      	strb	r3, [r5, #0]
   2797e:	213a      	movs	r1, #58	; 0x3a
   27980:	f011 fca0 	bl	392c4 <strchr>
   27984:	b130      	cbz	r0, 27994 <context_create_parser+0x40>
   27986:	4b08      	ldr	r3, [pc, #32]	; (279a8 <context_create_parser+0x54>)
   27988:	3001      	adds	r0, #1
   2798a:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
   2798e:	f011 faf8 	bl	38f82 <atoi>
   27992:	6020      	str	r0, [r4, #0]
   27994:	2000      	movs	r0, #0
   27996:	bd70      	pop	{r4, r5, r6, pc}
   27998:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   2799c:	2b00      	cmp	r3, #0
   2799e:	d1e0      	bne.n	27962 <context_create_parser+0xe>
   279a0:	e7ea      	b.n	27978 <context_create_parser+0x24>
   279a2:	460d      	mov	r5, r1
   279a4:	e7e8      	b.n	27978 <context_create_parser+0x24>
   279a6:	bf00      	nop
   279a8:	200228b8 	.word	0x200228b8

000279ac <pdn_interface_init>:
   279ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   279b0:	b510      	push	{r4, lr}
   279b2:	4c0b      	ldr	r4, [pc, #44]	; (279e0 <pdn_interface_init+0x34>)
   279b4:	2228      	movs	r2, #40	; 0x28
   279b6:	2100      	movs	r1, #0
   279b8:	480a      	ldr	r0, [pc, #40]	; (279e4 <pdn_interface_init+0x38>)
   279ba:	6023      	str	r3, [r4, #0]
   279bc:	f011 fb3b 	bl	39036 <memset>
   279c0:	f240 2201 	movw	r2, #513	; 0x201
   279c4:	2102      	movs	r1, #2
   279c6:	2066      	movs	r0, #102	; 0x66
   279c8:	f7ff fdd8 	bl	2757c <at_interface_open>
   279cc:	2800      	cmp	r0, #0
   279ce:	6020      	str	r0, [r4, #0]
   279d0:	db04      	blt.n	279dc <pdn_interface_init+0x30>
   279d2:	2201      	movs	r2, #1
   279d4:	4b04      	ldr	r3, [pc, #16]	; (279e8 <pdn_interface_init+0x3c>)
   279d6:	2000      	movs	r0, #0
   279d8:	701a      	strb	r2, [r3, #0]
   279da:	bd10      	pop	{r4, pc}
   279dc:	2003      	movs	r0, #3
   279de:	bd10      	pop	{r4, pc}
   279e0:	200227b4 	.word	0x200227b4
   279e4:	200228b8 	.word	0x200228b8
   279e8:	2002908a 	.word	0x2002908a

000279ec <pdn_interface_open>:
   279ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   279f0:	4b66      	ldr	r3, [pc, #408]	; (27b8c <pdn_interface_open+0x1a0>)
   279f2:	b083      	sub	sp, #12
   279f4:	781b      	ldrb	r3, [r3, #0]
   279f6:	2b00      	cmp	r3, #0
   279f8:	f000 80c2 	beq.w	27b80 <pdn_interface_open+0x194>
   279fc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   27a00:	f040 80ad 	bne.w	27b5e <pdn_interface_open+0x172>
   27a04:	4c62      	ldr	r4, [pc, #392]	; (27b90 <pdn_interface_open+0x1a4>)
   27a06:	6825      	ldr	r5, [r4, #0]
   27a08:	b34d      	cbz	r5, 27a5e <pdn_interface_open+0x72>
   27a0a:	6863      	ldr	r3, [r4, #4]
   27a0c:	2b00      	cmp	r3, #0
   27a0e:	f000 8098 	beq.w	27b42 <pdn_interface_open+0x156>
   27a12:	68a3      	ldr	r3, [r4, #8]
   27a14:	2b00      	cmp	r3, #0
   27a16:	f000 8096 	beq.w	27b46 <pdn_interface_open+0x15a>
   27a1a:	68e3      	ldr	r3, [r4, #12]
   27a1c:	2b00      	cmp	r3, #0
   27a1e:	f000 8094 	beq.w	27b4a <pdn_interface_open+0x15e>
   27a22:	6923      	ldr	r3, [r4, #16]
   27a24:	2b00      	cmp	r3, #0
   27a26:	f000 8092 	beq.w	27b4e <pdn_interface_open+0x162>
   27a2a:	6963      	ldr	r3, [r4, #20]
   27a2c:	2b00      	cmp	r3, #0
   27a2e:	f000 8090 	beq.w	27b52 <pdn_interface_open+0x166>
   27a32:	69a3      	ldr	r3, [r4, #24]
   27a34:	2b00      	cmp	r3, #0
   27a36:	f000 808e 	beq.w	27b56 <pdn_interface_open+0x16a>
   27a3a:	69e3      	ldr	r3, [r4, #28]
   27a3c:	2b00      	cmp	r3, #0
   27a3e:	f000 808c 	beq.w	27b5a <pdn_interface_open+0x16e>
   27a42:	6a23      	ldr	r3, [r4, #32]
   27a44:	b153      	cbz	r3, 27a5c <pdn_interface_open+0x70>
   27a46:	6a63      	ldr	r3, [r4, #36]	; 0x24
   27a48:	2509      	movs	r5, #9
   27a4a:	b143      	cbz	r3, 27a5e <pdn_interface_open+0x72>
   27a4c:	200c      	movs	r0, #12
   27a4e:	f7f8 fafd 	bl	2004c <bsd_os_errno_set>
   27a52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   27a56:	b003      	add	sp, #12
   27a58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   27a5c:	2508      	movs	r5, #8
   27a5e:	2074      	movs	r0, #116	; 0x74
   27a60:	f002 fa60 	bl	29f24 <nrf_malloc>
   27a64:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
   27a68:	2800      	cmp	r0, #0
   27a6a:	d0ef      	beq.n	27a4c <pdn_interface_open+0x60>
   27a6c:	2274      	movs	r2, #116	; 0x74
   27a6e:	2100      	movs	r1, #0
   27a70:	f011 fae1 	bl	39036 <memset>
   27a74:	2101      	movs	r1, #1
   27a76:	2003      	movs	r0, #3
   27a78:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   27a7c:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   27a80:	4a44      	ldr	r2, [pc, #272]	; (27b94 <pdn_interface_open+0x1a8>)
   27a82:	6099      	str	r1, [r3, #8]
   27a84:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   27a88:	f44f 7180 	mov.w	r1, #256	; 0x100
   27a8c:	6718      	str	r0, [r3, #112]	; 0x70
   27a8e:	605f      	str	r7, [r3, #4]
   27a90:	4841      	ldr	r0, [pc, #260]	; (27b98 <pdn_interface_open+0x1ac>)
   27a92:	f8df 8110 	ldr.w	r8, [pc, #272]	; 27ba4 <pdn_interface_open+0x1b8>
   27a96:	f00a f8e9 	bl	31c6c <sniprintf>
   27a9a:	483f      	ldr	r0, [pc, #252]	; (27b98 <pdn_interface_open+0x1ac>)
   27a9c:	f8d8 9000 	ldr.w	r9, [r8]
   27aa0:	2600      	movs	r6, #0
   27aa2:	f7ea faed 	bl	12080 <strlen>
   27aa6:	4633      	mov	r3, r6
   27aa8:	4602      	mov	r2, r0
   27aaa:	493b      	ldr	r1, [pc, #236]	; (27b98 <pdn_interface_open+0x1ac>)
   27aac:	4648      	mov	r0, r9
   27aae:	9601      	str	r6, [sp, #4]
   27ab0:	9600      	str	r6, [sp, #0]
   27ab2:	f7ff fcdb 	bl	2746c <at_interface_write>
   27ab6:	4681      	mov	r9, r0
   27ab8:	4837      	ldr	r0, [pc, #220]	; (27b98 <pdn_interface_open+0x1ac>)
   27aba:	f7ea fae1 	bl	12080 <strlen>
   27abe:	4548      	cmp	r0, r9
   27ac0:	d153      	bne.n	27b6a <pdn_interface_open+0x17e>
   27ac2:	4633      	mov	r3, r6
   27ac4:	e9cd 6600 	strd	r6, r6, [sp]
   27ac8:	f44f 7280 	mov.w	r2, #256	; 0x100
   27acc:	4932      	ldr	r1, [pc, #200]	; (27b98 <pdn_interface_open+0x1ac>)
   27ace:	f8d8 0000 	ldr.w	r0, [r8]
   27ad2:	f7ff fe1f 	bl	27714 <at_interface_read>
   27ad6:	4606      	mov	r6, r0
   27ad8:	4830      	ldr	r0, [pc, #192]	; (27b9c <pdn_interface_open+0x1b0>)
   27ada:	f7ea fad1 	bl	12080 <strlen>
   27ade:	4286      	cmp	r6, r0
   27ae0:	db15      	blt.n	27b0e <pdn_interface_open+0x122>
   27ae2:	4602      	mov	r2, r0
   27ae4:	492c      	ldr	r1, [pc, #176]	; (27b98 <pdn_interface_open+0x1ac>)
   27ae6:	482d      	ldr	r0, [pc, #180]	; (27b9c <pdn_interface_open+0x1b0>)
   27ae8:	f011 fc01 	bl	392ee <strncmp>
   27aec:	b978      	cbnz	r0, 27b0e <pdn_interface_open+0x122>
   27aee:	492a      	ldr	r1, [pc, #168]	; (27b98 <pdn_interface_open+0x1ac>)
   27af0:	4628      	mov	r0, r5
   27af2:	f7ff ff2f 	bl	27954 <context_create_parser>
   27af6:	b9b0      	cbnz	r0, 27b26 <pdn_interface_open+0x13a>
   27af8:	2202      	movs	r2, #2
   27afa:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   27afe:	f045 40f1 	orr.w	r0, r5, #2021654528	; 0x78800000
   27b02:	f440 10d0 	orr.w	r0, r0, #1703936	; 0x1a0000
   27b06:	609a      	str	r2, [r3, #8]
   27b08:	b003      	add	sp, #12
   27b0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   27b0e:	4824      	ldr	r0, [pc, #144]	; (27ba0 <pdn_interface_open+0x1b4>)
   27b10:	f7ea fab6 	bl	12080 <strlen>
   27b14:	4920      	ldr	r1, [pc, #128]	; (27b98 <pdn_interface_open+0x1ac>)
   27b16:	4602      	mov	r2, r0
   27b18:	4821      	ldr	r0, [pc, #132]	; (27ba0 <pdn_interface_open+0x1b4>)
   27b1a:	f011 fbe8 	bl	392ee <strncmp>
   27b1e:	b960      	cbnz	r0, 27b3a <pdn_interface_open+0x14e>
   27b20:	2008      	movs	r0, #8
   27b22:	f7f8 fa93 	bl	2004c <bsd_os_errno_set>
   27b26:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   27b2a:	f002 fa05 	bl	29f38 <nrf_free>
   27b2e:	2300      	movs	r3, #0
   27b30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   27b34:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   27b38:	e78d      	b.n	27a56 <pdn_interface_open+0x6a>
   27b3a:	2005      	movs	r0, #5
   27b3c:	f7f8 fa86 	bl	2004c <bsd_os_errno_set>
   27b40:	e7f1      	b.n	27b26 <pdn_interface_open+0x13a>
   27b42:	2501      	movs	r5, #1
   27b44:	e78b      	b.n	27a5e <pdn_interface_open+0x72>
   27b46:	2502      	movs	r5, #2
   27b48:	e789      	b.n	27a5e <pdn_interface_open+0x72>
   27b4a:	2503      	movs	r5, #3
   27b4c:	e787      	b.n	27a5e <pdn_interface_open+0x72>
   27b4e:	2504      	movs	r5, #4
   27b50:	e785      	b.n	27a5e <pdn_interface_open+0x72>
   27b52:	2505      	movs	r5, #5
   27b54:	e783      	b.n	27a5e <pdn_interface_open+0x72>
   27b56:	2506      	movs	r5, #6
   27b58:	e781      	b.n	27a5e <pdn_interface_open+0x72>
   27b5a:	2507      	movs	r5, #7
   27b5c:	e77f      	b.n	27a5e <pdn_interface_open+0x72>
   27b5e:	2029      	movs	r0, #41	; 0x29
   27b60:	f7f8 fa74 	bl	2004c <bsd_os_errno_set>
   27b64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   27b68:	e775      	b.n	27a56 <pdn_interface_open+0x6a>
   27b6a:	2005      	movs	r0, #5
   27b6c:	f7f8 fa6e 	bl	2004c <bsd_os_errno_set>
   27b70:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   27b74:	f002 f9e0 	bl	29f38 <nrf_free>
   27b78:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
   27b7c:	4638      	mov	r0, r7
   27b7e:	e76a      	b.n	27a56 <pdn_interface_open+0x6a>
   27b80:	2070      	movs	r0, #112	; 0x70
   27b82:	f7f8 fa63 	bl	2004c <bsd_os_errno_set>
   27b86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   27b8a:	e764      	b.n	27a56 <pdn_interface_open+0x6a>
   27b8c:	2002908a 	.word	0x2002908a
   27b90:	200228b8 	.word	0x200228b8
   27b94:	0003aa20 	.word	0x0003aa20
   27b98:	200227b8 	.word	0x200227b8
   27b9c:	0003aa30 	.word	0x0003aa30
   27ba0:	0003aa3c 	.word	0x0003aa3c
   27ba4:	200227b4 	.word	0x200227b4

00027ba8 <pdn_interface_connect>:
   27ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27bac:	b083      	sub	sp, #12
   27bae:	2900      	cmp	r1, #0
   27bb0:	f000 813d 	beq.w	27e2e <pdn_interface_connect+0x286>
   27bb4:	2a64      	cmp	r2, #100	; 0x64
   27bb6:	4691      	mov	r9, r2
   27bb8:	f200 8139 	bhi.w	27e2e <pdn_interface_connect+0x286>
   27bbc:	4605      	mov	r5, r0
   27bbe:	4608      	mov	r0, r1
   27bc0:	4688      	mov	r8, r1
   27bc2:	f7ea fa5d 	bl	12080 <strlen>
   27bc6:	2864      	cmp	r0, #100	; 0x64
   27bc8:	f200 8131 	bhi.w	27e2e <pdn_interface_connect+0x286>
   27bcc:	0c2b      	lsrs	r3, r5, #16
   27bce:	4aa5      	ldr	r2, [pc, #660]	; (27e64 <pdn_interface_connect+0x2bc>)
   27bd0:	041b      	lsls	r3, r3, #16
   27bd2:	4293      	cmp	r3, r2
   27bd4:	f040 8122 	bne.w	27e1c <pdn_interface_connect+0x274>
   27bd8:	f025 45f1 	bic.w	r5, r5, #2021654528	; 0x78800000
   27bdc:	f425 15d0 	bic.w	r5, r5, #1703936	; 0x1a0000
   27be0:	2d09      	cmp	r5, #9
   27be2:	f300 811b 	bgt.w	27e1c <pdn_interface_connect+0x274>
   27be6:	4fa0      	ldr	r7, [pc, #640]	; (27e68 <pdn_interface_connect+0x2c0>)
   27be8:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   27bec:	2b00      	cmp	r3, #0
   27bee:	f000 8115 	beq.w	27e1c <pdn_interface_connect+0x274>
   27bf2:	689a      	ldr	r2, [r3, #8]
   27bf4:	2a00      	cmp	r2, #0
   27bf6:	f000 8111 	beq.w	27e1c <pdn_interface_connect+0x274>
   27bfa:	689b      	ldr	r3, [r3, #8]
   27bfc:	2b02      	cmp	r3, #2
   27bfe:	f040 810d 	bne.w	27e1c <pdn_interface_connect+0x274>
   27c02:	4e9a      	ldr	r6, [pc, #616]	; (27e6c <pdn_interface_connect+0x2c4>)
   27c04:	4a9a      	ldr	r2, [pc, #616]	; (27e70 <pdn_interface_connect+0x2c8>)
   27c06:	f44f 7180 	mov.w	r1, #256	; 0x100
   27c0a:	4630      	mov	r0, r6
   27c0c:	f00a f82e 	bl	31c6c <sniprintf>
   27c10:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   27c14:	4604      	mov	r4, r0
   27c16:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   27c1a:	681b      	ldr	r3, [r3, #0]
   27c1c:	4a95      	ldr	r2, [pc, #596]	; (27e74 <pdn_interface_connect+0x2cc>)
   27c1e:	1830      	adds	r0, r6, r0
   27c20:	f00a f824 	bl	31c6c <sniprintf>
   27c24:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   27c28:	4404      	add	r4, r0
   27c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   27c2c:	f003 0203 	and.w	r2, r3, #3
   27c30:	2a03      	cmp	r2, #3
   27c32:	f000 80ea 	beq.w	27e0a <pdn_interface_connect+0x262>
   27c36:	079b      	lsls	r3, r3, #30
   27c38:	eb06 0004 	add.w	r0, r6, r4
   27c3c:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   27c40:	bf4c      	ite	mi
   27c42:	4b8d      	ldrmi	r3, [pc, #564]	; (27e78 <pdn_interface_connect+0x2d0>)
   27c44:	4b8d      	ldrpl	r3, [pc, #564]	; (27e7c <pdn_interface_connect+0x2d4>)
   27c46:	4a8e      	ldr	r2, [pc, #568]	; (27e80 <pdn_interface_connect+0x2d8>)
   27c48:	f00a f810 	bl	31c6c <sniprintf>
   27c4c:	4404      	add	r4, r0
   27c4e:	4643      	mov	r3, r8
   27c50:	4a8c      	ldr	r2, [pc, #560]	; (27e84 <pdn_interface_connect+0x2dc>)
   27c52:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   27c56:	1930      	adds	r0, r6, r4
   27c58:	f00a f808 	bl	31c6c <sniprintf>
   27c5c:	4420      	add	r0, r4
   27c5e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   27c62:	f300 80f7 	bgt.w	27e54 <pdn_interface_connect+0x2ac>
   27c66:	f8df a23c 	ldr.w	sl, [pc, #572]	; 27ea4 <pdn_interface_connect+0x2fc>
   27c6a:	4880      	ldr	r0, [pc, #512]	; (27e6c <pdn_interface_connect+0x2c4>)
   27c6c:	f8da b000 	ldr.w	fp, [sl]
   27c70:	2400      	movs	r4, #0
   27c72:	f7ea fa05 	bl	12080 <strlen>
   27c76:	4623      	mov	r3, r4
   27c78:	4602      	mov	r2, r0
   27c7a:	497c      	ldr	r1, [pc, #496]	; (27e6c <pdn_interface_connect+0x2c4>)
   27c7c:	4658      	mov	r0, fp
   27c7e:	9401      	str	r4, [sp, #4]
   27c80:	9400      	str	r4, [sp, #0]
   27c82:	f7ff fbf3 	bl	2746c <at_interface_write>
   27c86:	4683      	mov	fp, r0
   27c88:	4878      	ldr	r0, [pc, #480]	; (27e6c <pdn_interface_connect+0x2c4>)
   27c8a:	f7ea f9f9 	bl	12080 <strlen>
   27c8e:	4558      	cmp	r0, fp
   27c90:	d008      	beq.n	27ca4 <pdn_interface_connect+0xfc>
   27c92:	2005      	movs	r0, #5
   27c94:	f7f8 f9da 	bl	2004c <bsd_os_errno_set>
   27c98:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   27c9c:	4620      	mov	r0, r4
   27c9e:	b003      	add	sp, #12
   27ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27ca4:	4623      	mov	r3, r4
   27ca6:	e9cd 4400 	strd	r4, r4, [sp]
   27caa:	f44f 7280 	mov.w	r2, #256	; 0x100
   27cae:	496f      	ldr	r1, [pc, #444]	; (27e6c <pdn_interface_connect+0x2c4>)
   27cb0:	f8da 0000 	ldr.w	r0, [sl]
   27cb4:	f7ff fd2e 	bl	27714 <at_interface_read>
   27cb8:	4604      	mov	r4, r0
   27cba:	4873      	ldr	r0, [pc, #460]	; (27e88 <pdn_interface_connect+0x2e0>)
   27cbc:	f7ea f9e0 	bl	12080 <strlen>
   27cc0:	4284      	cmp	r4, r0
   27cc2:	f2c0 8091 	blt.w	27de8 <pdn_interface_connect+0x240>
   27cc6:	4602      	mov	r2, r0
   27cc8:	4968      	ldr	r1, [pc, #416]	; (27e6c <pdn_interface_connect+0x2c4>)
   27cca:	486f      	ldr	r0, [pc, #444]	; (27e88 <pdn_interface_connect+0x2e0>)
   27ccc:	f011 fb0f 	bl	392ee <strncmp>
   27cd0:	2800      	cmp	r0, #0
   27cd2:	f040 8089 	bne.w	27de8 <pdn_interface_connect+0x240>
   27cd6:	4965      	ldr	r1, [pc, #404]	; (27e6c <pdn_interface_connect+0x2c4>)
   27cd8:	4628      	mov	r0, r5
   27cda:	f7ff fdd7 	bl	2788c <ok_rsp_parser>
   27cde:	4604      	mov	r4, r0
   27ce0:	2800      	cmp	r0, #0
   27ce2:	d1db      	bne.n	27c9c <pdn_interface_connect+0xf4>
   27ce4:	4a69      	ldr	r2, [pc, #420]	; (27e8c <pdn_interface_connect+0x2e4>)
   27ce6:	f44f 7180 	mov.w	r1, #256	; 0x100
   27cea:	4860      	ldr	r0, [pc, #384]	; (27e6c <pdn_interface_connect+0x2c4>)
   27cec:	f009 ffbe 	bl	31c6c <sniprintf>
   27cf0:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   27cf4:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   27cf8:	681b      	ldr	r3, [r3, #0]
   27cfa:	4a65      	ldr	r2, [pc, #404]	; (27e90 <pdn_interface_connect+0x2e8>)
   27cfc:	4430      	add	r0, r6
   27cfe:	f009 ffb5 	bl	31c6c <sniprintf>
   27d02:	485a      	ldr	r0, [pc, #360]	; (27e6c <pdn_interface_connect+0x2c4>)
   27d04:	f8da b000 	ldr.w	fp, [sl]
   27d08:	f7ea f9ba 	bl	12080 <strlen>
   27d0c:	4623      	mov	r3, r4
   27d0e:	4602      	mov	r2, r0
   27d10:	4956      	ldr	r1, [pc, #344]	; (27e6c <pdn_interface_connect+0x2c4>)
   27d12:	4658      	mov	r0, fp
   27d14:	9401      	str	r4, [sp, #4]
   27d16:	9400      	str	r4, [sp, #0]
   27d18:	f7ff fba8 	bl	2746c <at_interface_write>
   27d1c:	4683      	mov	fp, r0
   27d1e:	4853      	ldr	r0, [pc, #332]	; (27e6c <pdn_interface_connect+0x2c4>)
   27d20:	f7ea f9ae 	bl	12080 <strlen>
   27d24:	4558      	cmp	r0, fp
   27d26:	d1b4      	bne.n	27c92 <pdn_interface_connect+0xea>
   27d28:	4623      	mov	r3, r4
   27d2a:	f44f 7280 	mov.w	r2, #256	; 0x100
   27d2e:	494f      	ldr	r1, [pc, #316]	; (27e6c <pdn_interface_connect+0x2c4>)
   27d30:	f8da 0000 	ldr.w	r0, [sl]
   27d34:	e9cd 4400 	strd	r4, r4, [sp]
   27d38:	f7ff fcec 	bl	27714 <at_interface_read>
   27d3c:	4683      	mov	fp, r0
   27d3e:	4852      	ldr	r0, [pc, #328]	; (27e88 <pdn_interface_connect+0x2e0>)
   27d40:	f7ea f99e 	bl	12080 <strlen>
   27d44:	4583      	cmp	fp, r0
   27d46:	db4f      	blt.n	27de8 <pdn_interface_connect+0x240>
   27d48:	4602      	mov	r2, r0
   27d4a:	4948      	ldr	r1, [pc, #288]	; (27e6c <pdn_interface_connect+0x2c4>)
   27d4c:	484e      	ldr	r0, [pc, #312]	; (27e88 <pdn_interface_connect+0x2e0>)
   27d4e:	f011 face 	bl	392ee <strncmp>
   27d52:	2800      	cmp	r0, #0
   27d54:	d148      	bne.n	27de8 <pdn_interface_connect+0x240>
   27d56:	2103      	movs	r1, #3
   27d58:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   27d5c:	464a      	mov	r2, r9
   27d5e:	6099      	str	r1, [r3, #8]
   27d60:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   27d64:	4641      	mov	r1, r8
   27d66:	300c      	adds	r0, #12
   27d68:	f011 f92b 	bl	38fc2 <memcpy>
   27d6c:	4a49      	ldr	r2, [pc, #292]	; (27e94 <pdn_interface_connect+0x2ec>)
   27d6e:	f44f 7180 	mov.w	r1, #256	; 0x100
   27d72:	483e      	ldr	r0, [pc, #248]	; (27e6c <pdn_interface_connect+0x2c4>)
   27d74:	f009 ff7a 	bl	31c6c <sniprintf>
   27d78:	4601      	mov	r1, r0
   27d7a:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   27d7e:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   27d82:	681b      	ldr	r3, [r3, #0]
   27d84:	4a42      	ldr	r2, [pc, #264]	; (27e90 <pdn_interface_connect+0x2e8>)
   27d86:	1830      	adds	r0, r6, r0
   27d88:	f009 ff70 	bl	31c6c <sniprintf>
   27d8c:	4837      	ldr	r0, [pc, #220]	; (27e6c <pdn_interface_connect+0x2c4>)
   27d8e:	f8da 6000 	ldr.w	r6, [sl]
   27d92:	f7ea f975 	bl	12080 <strlen>
   27d96:	4623      	mov	r3, r4
   27d98:	4602      	mov	r2, r0
   27d9a:	4934      	ldr	r1, [pc, #208]	; (27e6c <pdn_interface_connect+0x2c4>)
   27d9c:	4630      	mov	r0, r6
   27d9e:	9401      	str	r4, [sp, #4]
   27da0:	9400      	str	r4, [sp, #0]
   27da2:	f7ff fb63 	bl	2746c <at_interface_write>
   27da6:	4606      	mov	r6, r0
   27da8:	4830      	ldr	r0, [pc, #192]	; (27e6c <pdn_interface_connect+0x2c4>)
   27daa:	f7ea f969 	bl	12080 <strlen>
   27dae:	42b0      	cmp	r0, r6
   27db0:	d153      	bne.n	27e5a <pdn_interface_connect+0x2b2>
   27db2:	4623      	mov	r3, r4
   27db4:	f44f 7280 	mov.w	r2, #256	; 0x100
   27db8:	492c      	ldr	r1, [pc, #176]	; (27e6c <pdn_interface_connect+0x2c4>)
   27dba:	f8da 0000 	ldr.w	r0, [sl]
   27dbe:	e9cd 4400 	strd	r4, r4, [sp]
   27dc2:	f7ff fca7 	bl	27714 <at_interface_read>
   27dc6:	4606      	mov	r6, r0
   27dc8:	4833      	ldr	r0, [pc, #204]	; (27e98 <pdn_interface_connect+0x2f0>)
   27dca:	f7ea f959 	bl	12080 <strlen>
   27dce:	4286      	cmp	r6, r0
   27dd0:	db33      	blt.n	27e3a <pdn_interface_connect+0x292>
   27dd2:	4602      	mov	r2, r0
   27dd4:	4925      	ldr	r1, [pc, #148]	; (27e6c <pdn_interface_connect+0x2c4>)
   27dd6:	4830      	ldr	r0, [pc, #192]	; (27e98 <pdn_interface_connect+0x2f0>)
   27dd8:	f011 fa89 	bl	392ee <strncmp>
   27ddc:	bb68      	cbnz	r0, 27e3a <pdn_interface_connect+0x292>
   27dde:	4628      	mov	r0, r5
   27de0:	4922      	ldr	r1, [pc, #136]	; (27e6c <pdn_interface_connect+0x2c4>)
   27de2:	f7ff fd8b 	bl	278fc <pdn_id_get_parser>
   27de6:	e759      	b.n	27c9c <pdn_interface_connect+0xf4>
   27de8:	482c      	ldr	r0, [pc, #176]	; (27e9c <pdn_interface_connect+0x2f4>)
   27dea:	f7ea f949 	bl	12080 <strlen>
   27dee:	491f      	ldr	r1, [pc, #124]	; (27e6c <pdn_interface_connect+0x2c4>)
   27df0:	4602      	mov	r2, r0
   27df2:	482a      	ldr	r0, [pc, #168]	; (27e9c <pdn_interface_connect+0x2f4>)
   27df4:	f011 fa7b 	bl	392ee <strncmp>
   27df8:	2800      	cmp	r0, #0
   27dfa:	f47f af4a 	bne.w	27c92 <pdn_interface_connect+0xea>
   27dfe:	2008      	movs	r0, #8
   27e00:	f7f8 f924 	bl	2004c <bsd_os_errno_set>
   27e04:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   27e08:	e748      	b.n	27c9c <pdn_interface_connect+0xf4>
   27e0a:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   27e0e:	1930      	adds	r0, r6, r4
   27e10:	4b23      	ldr	r3, [pc, #140]	; (27ea0 <pdn_interface_connect+0x2f8>)
   27e12:	4a1b      	ldr	r2, [pc, #108]	; (27e80 <pdn_interface_connect+0x2d8>)
   27e14:	f009 ff2a 	bl	31c6c <sniprintf>
   27e18:	4404      	add	r4, r0
   27e1a:	e718      	b.n	27c4e <pdn_interface_connect+0xa6>
   27e1c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   27e20:	2009      	movs	r0, #9
   27e22:	f7f8 f913 	bl	2004c <bsd_os_errno_set>
   27e26:	4620      	mov	r0, r4
   27e28:	b003      	add	sp, #12
   27e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27e2e:	2016      	movs	r0, #22
   27e30:	f7f8 f90c 	bl	2004c <bsd_os_errno_set>
   27e34:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   27e38:	e730      	b.n	27c9c <pdn_interface_connect+0xf4>
   27e3a:	4818      	ldr	r0, [pc, #96]	; (27e9c <pdn_interface_connect+0x2f4>)
   27e3c:	f7ea f920 	bl	12080 <strlen>
   27e40:	490a      	ldr	r1, [pc, #40]	; (27e6c <pdn_interface_connect+0x2c4>)
   27e42:	4602      	mov	r2, r0
   27e44:	4815      	ldr	r0, [pc, #84]	; (27e9c <pdn_interface_connect+0x2f4>)
   27e46:	f011 fa52 	bl	392ee <strncmp>
   27e4a:	b930      	cbnz	r0, 27e5a <pdn_interface_connect+0x2b2>
   27e4c:	2008      	movs	r0, #8
   27e4e:	f7f8 f8fd 	bl	2004c <bsd_os_errno_set>
   27e52:	e723      	b.n	27c9c <pdn_interface_connect+0xf4>
   27e54:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   27e58:	e720      	b.n	27c9c <pdn_interface_connect+0xf4>
   27e5a:	2005      	movs	r0, #5
   27e5c:	f7f8 f8f6 	bl	2004c <bsd_os_errno_set>
   27e60:	e71c      	b.n	27c9c <pdn_interface_connect+0xf4>
   27e62:	bf00      	nop
   27e64:	789a0000 	.word	0x789a0000
   27e68:	200228b8 	.word	0x200228b8
   27e6c:	200227b8 	.word	0x200227b8
   27e70:	0003a9a8 	.word	0x0003a9a8
   27e74:	0003a9b4 	.word	0x0003a9b4
   27e78:	0003a9c8 	.word	0x0003a9c8
   27e7c:	0003a9d0 	.word	0x0003a9d0
   27e80:	0003a9c0 	.word	0x0003a9c0
   27e84:	0003aa04 	.word	0x0003aa04
   27e88:	0003a9d4 	.word	0x0003a9d4
   27e8c:	0003a9d8 	.word	0x0003a9d8
   27e90:	0003a9e4 	.word	0x0003a9e4
   27e94:	0003a9e8 	.word	0x0003a9e8
   27e98:	0003a9f8 	.word	0x0003a9f8
   27e9c:	0003aa3c 	.word	0x0003aa3c
   27ea0:	0003a9b8 	.word	0x0003a9b8
   27ea4:	200227b4 	.word	0x200227b4

00027ea8 <pdn_interface_close>:
   27ea8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27eac:	4a6b      	ldr	r2, [pc, #428]	; (2805c <pdn_interface_close+0x1b4>)
   27eae:	0c03      	lsrs	r3, r0, #16
   27eb0:	041b      	lsls	r3, r3, #16
   27eb2:	4293      	cmp	r3, r2
   27eb4:	b083      	sub	sp, #12
   27eb6:	f040 80ac 	bne.w	28012 <pdn_interface_close+0x16a>
   27eba:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   27ebe:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   27ec2:	2c09      	cmp	r4, #9
   27ec4:	f300 80a5 	bgt.w	28012 <pdn_interface_close+0x16a>
   27ec8:	4d65      	ldr	r5, [pc, #404]	; (28060 <pdn_interface_close+0x1b8>)
   27eca:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   27ece:	2800      	cmp	r0, #0
   27ed0:	f000 809f 	beq.w	28012 <pdn_interface_close+0x16a>
   27ed4:	6883      	ldr	r3, [r0, #8]
   27ed6:	2b00      	cmp	r3, #0
   27ed8:	f000 809b 	beq.w	28012 <pdn_interface_close+0x16a>
   27edc:	6883      	ldr	r3, [r0, #8]
   27ede:	2b03      	cmp	r3, #3
   27ee0:	d00b      	beq.n	27efa <pdn_interface_close+0x52>
   27ee2:	6883      	ldr	r3, [r0, #8]
   27ee4:	2b02      	cmp	r3, #2
   27ee6:	d055      	beq.n	27f94 <pdn_interface_close+0xec>
   27ee8:	f002 f826 	bl	29f38 <nrf_free>
   27eec:	2300      	movs	r3, #0
   27eee:	4618      	mov	r0, r3
   27ef0:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
   27ef4:	b003      	add	sp, #12
   27ef6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   27efa:	4e5a      	ldr	r6, [pc, #360]	; (28064 <pdn_interface_close+0x1bc>)
   27efc:	4a5a      	ldr	r2, [pc, #360]	; (28068 <pdn_interface_close+0x1c0>)
   27efe:	f44f 7180 	mov.w	r1, #256	; 0x100
   27f02:	4630      	mov	r0, r6
   27f04:	f009 feb2 	bl	31c6c <sniprintf>
   27f08:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   27f0c:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   27f10:	681b      	ldr	r3, [r3, #0]
   27f12:	4a56      	ldr	r2, [pc, #344]	; (2806c <pdn_interface_close+0x1c4>)
   27f14:	4430      	add	r0, r6
   27f16:	f8df 8164 	ldr.w	r8, [pc, #356]	; 2807c <pdn_interface_close+0x1d4>
   27f1a:	f009 fea7 	bl	31c6c <sniprintf>
   27f1e:	4630      	mov	r0, r6
   27f20:	f8d8 9000 	ldr.w	r9, [r8]
   27f24:	2700      	movs	r7, #0
   27f26:	f7ea f8ab 	bl	12080 <strlen>
   27f2a:	4631      	mov	r1, r6
   27f2c:	4602      	mov	r2, r0
   27f2e:	463b      	mov	r3, r7
   27f30:	4648      	mov	r0, r9
   27f32:	9701      	str	r7, [sp, #4]
   27f34:	9700      	str	r7, [sp, #0]
   27f36:	f7ff fa99 	bl	2746c <at_interface_write>
   27f3a:	4681      	mov	r9, r0
   27f3c:	4630      	mov	r0, r6
   27f3e:	f7ea f89f 	bl	12080 <strlen>
   27f42:	4548      	cmp	r0, r9
   27f44:	f040 8082 	bne.w	2804c <pdn_interface_close+0x1a4>
   27f48:	463b      	mov	r3, r7
   27f4a:	e9cd 7700 	strd	r7, r7, [sp]
   27f4e:	f44f 7280 	mov.w	r2, #256	; 0x100
   27f52:	4631      	mov	r1, r6
   27f54:	f8d8 0000 	ldr.w	r0, [r8]
   27f58:	f7ff fbdc 	bl	27714 <at_interface_read>
   27f5c:	4607      	mov	r7, r0
   27f5e:	4844      	ldr	r0, [pc, #272]	; (28070 <pdn_interface_close+0x1c8>)
   27f60:	f7ea f88e 	bl	12080 <strlen>
   27f64:	4287      	cmp	r7, r0
   27f66:	da5a      	bge.n	2801e <pdn_interface_close+0x176>
   27f68:	4842      	ldr	r0, [pc, #264]	; (28074 <pdn_interface_close+0x1cc>)
   27f6a:	f7ea f889 	bl	12080 <strlen>
   27f6e:	493d      	ldr	r1, [pc, #244]	; (28064 <pdn_interface_close+0x1bc>)
   27f70:	4602      	mov	r2, r0
   27f72:	4840      	ldr	r0, [pc, #256]	; (28074 <pdn_interface_close+0x1cc>)
   27f74:	f011 f9bb 	bl	392ee <strncmp>
   27f78:	2800      	cmp	r0, #0
   27f7a:	d167      	bne.n	2804c <pdn_interface_close+0x1a4>
   27f7c:	2008      	movs	r0, #8
   27f7e:	f7f8 f865 	bl	2004c <bsd_os_errno_set>
   27f82:	2202      	movs	r2, #2
   27f84:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   27f88:	609a      	str	r2, [r3, #8]
   27f8a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   27f8e:	6883      	ldr	r3, [r0, #8]
   27f90:	2b02      	cmp	r3, #2
   27f92:	d1a9      	bne.n	27ee8 <pdn_interface_close+0x40>
   27f94:	4e33      	ldr	r6, [pc, #204]	; (28064 <pdn_interface_close+0x1bc>)
   27f96:	4a38      	ldr	r2, [pc, #224]	; (28078 <pdn_interface_close+0x1d0>)
   27f98:	f44f 7180 	mov.w	r1, #256	; 0x100
   27f9c:	4630      	mov	r0, r6
   27f9e:	f009 fe65 	bl	31c6c <sniprintf>
   27fa2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   27fa6:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   27faa:	681b      	ldr	r3, [r3, #0]
   27fac:	4a2f      	ldr	r2, [pc, #188]	; (2806c <pdn_interface_close+0x1c4>)
   27fae:	4430      	add	r0, r6
   27fb0:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 2807c <pdn_interface_close+0x1d4>
   27fb4:	f009 fe5a 	bl	31c6c <sniprintf>
   27fb8:	4630      	mov	r0, r6
   27fba:	f8d8 9000 	ldr.w	r9, [r8]
   27fbe:	2700      	movs	r7, #0
   27fc0:	f7ea f85e 	bl	12080 <strlen>
   27fc4:	4631      	mov	r1, r6
   27fc6:	4602      	mov	r2, r0
   27fc8:	463b      	mov	r3, r7
   27fca:	4648      	mov	r0, r9
   27fcc:	9701      	str	r7, [sp, #4]
   27fce:	9700      	str	r7, [sp, #0]
   27fd0:	f7ff fa4c 	bl	2746c <at_interface_write>
   27fd4:	4681      	mov	r9, r0
   27fd6:	4630      	mov	r0, r6
   27fd8:	f7ea f852 	bl	12080 <strlen>
   27fdc:	4548      	cmp	r0, r9
   27fde:	d139      	bne.n	28054 <pdn_interface_close+0x1ac>
   27fe0:	463b      	mov	r3, r7
   27fe2:	e9cd 7700 	strd	r7, r7, [sp]
   27fe6:	f44f 7280 	mov.w	r2, #256	; 0x100
   27fea:	4631      	mov	r1, r6
   27fec:	f8d8 0000 	ldr.w	r0, [r8]
   27ff0:	f7ff fb90 	bl	27714 <at_interface_read>
   27ff4:	4607      	mov	r7, r0
   27ff6:	481e      	ldr	r0, [pc, #120]	; (28070 <pdn_interface_close+0x1c8>)
   27ff8:	f7ea f842 	bl	12080 <strlen>
   27ffc:	4287      	cmp	r7, r0
   27ffe:	db16      	blt.n	2802e <pdn_interface_close+0x186>
   28000:	4602      	mov	r2, r0
   28002:	4631      	mov	r1, r6
   28004:	481a      	ldr	r0, [pc, #104]	; (28070 <pdn_interface_close+0x1c8>)
   28006:	f011 f972 	bl	392ee <strncmp>
   2800a:	b980      	cbnz	r0, 2802e <pdn_interface_close+0x186>
   2800c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   28010:	e76a      	b.n	27ee8 <pdn_interface_close+0x40>
   28012:	2009      	movs	r0, #9
   28014:	f7f8 f81a 	bl	2004c <bsd_os_errno_set>
   28018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2801c:	e76a      	b.n	27ef4 <pdn_interface_close+0x4c>
   2801e:	4602      	mov	r2, r0
   28020:	4631      	mov	r1, r6
   28022:	4813      	ldr	r0, [pc, #76]	; (28070 <pdn_interface_close+0x1c8>)
   28024:	f011 f963 	bl	392ee <strncmp>
   28028:	2800      	cmp	r0, #0
   2802a:	d0aa      	beq.n	27f82 <pdn_interface_close+0xda>
   2802c:	e79c      	b.n	27f68 <pdn_interface_close+0xc0>
   2802e:	4811      	ldr	r0, [pc, #68]	; (28074 <pdn_interface_close+0x1cc>)
   28030:	f7ea f826 	bl	12080 <strlen>
   28034:	490b      	ldr	r1, [pc, #44]	; (28064 <pdn_interface_close+0x1bc>)
   28036:	4602      	mov	r2, r0
   28038:	480e      	ldr	r0, [pc, #56]	; (28074 <pdn_interface_close+0x1cc>)
   2803a:	f011 f958 	bl	392ee <strncmp>
   2803e:	b948      	cbnz	r0, 28054 <pdn_interface_close+0x1ac>
   28040:	2008      	movs	r0, #8
   28042:	f7f8 f803 	bl	2004c <bsd_os_errno_set>
   28046:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   2804a:	e74d      	b.n	27ee8 <pdn_interface_close+0x40>
   2804c:	2005      	movs	r0, #5
   2804e:	f7f7 fffd 	bl	2004c <bsd_os_errno_set>
   28052:	e796      	b.n	27f82 <pdn_interface_close+0xda>
   28054:	2005      	movs	r0, #5
   28056:	f7f7 fff9 	bl	2004c <bsd_os_errno_set>
   2805a:	e7d7      	b.n	2800c <pdn_interface_close+0x164>
   2805c:	789a0000 	.word	0x789a0000
   28060:	200228b8 	.word	0x200228b8
   28064:	200227b8 	.word	0x200227b8
   28068:	0003a99c 	.word	0x0003a99c
   2806c:	0003a9e4 	.word	0x0003a9e4
   28070:	0003a9d4 	.word	0x0003a9d4
   28074:	0003aa3c 	.word	0x0003aa3c
   28078:	0003a9a8 	.word	0x0003a9a8
   2807c:	200227b4 	.word	0x200227b4

00028080 <pdn_interface_setopt>:
   28080:	b538      	push	{r3, r4, r5, lr}
   28082:	f240 2502 	movw	r5, #514	; 0x202
   28086:	42a9      	cmp	r1, r5
   28088:	9c04      	ldr	r4, [sp, #16]
   2808a:	d140      	bne.n	2810e <pdn_interface_setopt+0x8e>
   2808c:	2b00      	cmp	r3, #0
   2808e:	d03e      	beq.n	2810e <pdn_interface_setopt+0x8e>
   28090:	2c00      	cmp	r4, #0
   28092:	d03c      	beq.n	2810e <pdn_interface_setopt+0x8e>
   28094:	0c01      	lsrs	r1, r0, #16
   28096:	4d22      	ldr	r5, [pc, #136]	; (28120 <pdn_interface_setopt+0xa0>)
   28098:	0409      	lsls	r1, r1, #16
   2809a:	42a9      	cmp	r1, r5
   2809c:	d005      	beq.n	280aa <pdn_interface_setopt+0x2a>
   2809e:	2009      	movs	r0, #9
   280a0:	f7f7 ffd4 	bl	2004c <bsd_os_errno_set>
   280a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   280a8:	bd38      	pop	{r3, r4, r5, pc}
   280aa:	f020 40f1 	bic.w	r0, r0, #2021654528	; 0x78800000
   280ae:	f420 10d0 	bic.w	r0, r0, #1703936	; 0x1a0000
   280b2:	2809      	cmp	r0, #9
   280b4:	dcf3      	bgt.n	2809e <pdn_interface_setopt+0x1e>
   280b6:	491b      	ldr	r1, [pc, #108]	; (28124 <pdn_interface_setopt+0xa4>)
   280b8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   280bc:	2900      	cmp	r1, #0
   280be:	d0ee      	beq.n	2809e <pdn_interface_setopt+0x1e>
   280c0:	6888      	ldr	r0, [r1, #8]
   280c2:	2800      	cmp	r0, #0
   280c4:	d0eb      	beq.n	2809e <pdn_interface_setopt+0x1e>
   280c6:	2a01      	cmp	r2, #1
   280c8:	d128      	bne.n	2811c <pdn_interface_setopt+0x9c>
   280ca:	688a      	ldr	r2, [r1, #8]
   280cc:	b1ea      	cbz	r2, 2810a <pdn_interface_setopt+0x8a>
   280ce:	688a      	ldr	r2, [r1, #8]
   280d0:	2a03      	cmp	r2, #3
   280d2:	d01a      	beq.n	2810a <pdn_interface_setopt+0x8a>
   280d4:	688a      	ldr	r2, [r1, #8]
   280d6:	2a04      	cmp	r2, #4
   280d8:	d017      	beq.n	2810a <pdn_interface_setopt+0x8a>
   280da:	08a2      	lsrs	r2, r4, #2
   280dc:	1e50      	subs	r0, r2, #1
   280de:	2801      	cmp	r0, #1
   280e0:	d815      	bhi.n	2810e <pdn_interface_setopt+0x8e>
   280e2:	07a0      	lsls	r0, r4, #30
   280e4:	d113      	bne.n	2810e <pdn_interface_setopt+0x8e>
   280e6:	6818      	ldr	r0, [r3, #0]
   280e8:	2802      	cmp	r0, #2
   280ea:	d012      	beq.n	28112 <pdn_interface_setopt+0x92>
   280ec:	280a      	cmp	r0, #10
   280ee:	d10e      	bne.n	2810e <pdn_interface_setopt+0x8e>
   280f0:	2002      	movs	r0, #2
   280f2:	2a02      	cmp	r2, #2
   280f4:	d106      	bne.n	28104 <pdn_interface_setopt+0x84>
   280f6:	685b      	ldr	r3, [r3, #4]
   280f8:	2b02      	cmp	r3, #2
   280fa:	d00c      	beq.n	28116 <pdn_interface_setopt+0x96>
   280fc:	2b0a      	cmp	r3, #10
   280fe:	d106      	bne.n	2810e <pdn_interface_setopt+0x8e>
   28100:	f040 0002 	orr.w	r0, r0, #2
   28104:	6708      	str	r0, [r1, #112]	; 0x70
   28106:	2000      	movs	r0, #0
   28108:	bd38      	pop	{r3, r4, r5, pc}
   2810a:	200e      	movs	r0, #14
   2810c:	e7c8      	b.n	280a0 <pdn_interface_setopt+0x20>
   2810e:	2016      	movs	r0, #22
   28110:	e7c6      	b.n	280a0 <pdn_interface_setopt+0x20>
   28112:	2001      	movs	r0, #1
   28114:	e7ed      	b.n	280f2 <pdn_interface_setopt+0x72>
   28116:	f040 0001 	orr.w	r0, r0, #1
   2811a:	e7f3      	b.n	28104 <pdn_interface_setopt+0x84>
   2811c:	202d      	movs	r0, #45	; 0x2d
   2811e:	e7bf      	b.n	280a0 <pdn_interface_setopt+0x20>
   28120:	789a0000 	.word	0x789a0000
   28124:	200228b8 	.word	0x200228b8

00028128 <pdn_interface_getopt>:
   28128:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2812c:	f240 2402 	movw	r4, #514	; 0x202
   28130:	b083      	sub	sp, #12
   28132:	42a1      	cmp	r1, r4
   28134:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   28136:	f040 809f 	bne.w	28278 <pdn_interface_getopt+0x150>
   2813a:	461e      	mov	r6, r3
   2813c:	2b00      	cmp	r3, #0
   2813e:	f000 809b 	beq.w	28278 <pdn_interface_getopt+0x150>
   28142:	2d00      	cmp	r5, #0
   28144:	f000 8098 	beq.w	28278 <pdn_interface_getopt+0x150>
   28148:	0c03      	lsrs	r3, r0, #16
   2814a:	4955      	ldr	r1, [pc, #340]	; (282a0 <pdn_interface_getopt+0x178>)
   2814c:	041b      	lsls	r3, r3, #16
   2814e:	428b      	cmp	r3, r1
   28150:	f040 8094 	bne.w	2827c <pdn_interface_getopt+0x154>
   28154:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   28158:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   2815c:	2c09      	cmp	r4, #9
   2815e:	f300 808d 	bgt.w	2827c <pdn_interface_getopt+0x154>
   28162:	4b50      	ldr	r3, [pc, #320]	; (282a4 <pdn_interface_getopt+0x17c>)
   28164:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   28168:	2b00      	cmp	r3, #0
   2816a:	f000 8087 	beq.w	2827c <pdn_interface_getopt+0x154>
   2816e:	6899      	ldr	r1, [r3, #8]
   28170:	2900      	cmp	r1, #0
   28172:	f000 8083 	beq.w	2827c <pdn_interface_getopt+0x154>
   28176:	2a02      	cmp	r2, #2
   28178:	d04c      	beq.n	28214 <pdn_interface_getopt+0xec>
   2817a:	2a03      	cmp	r2, #3
   2817c:	d009      	beq.n	28192 <pdn_interface_getopt+0x6a>
   2817e:	2a01      	cmp	r2, #1
   28180:	d052      	beq.n	28228 <pdn_interface_getopt+0x100>
   28182:	202d      	movs	r0, #45	; 0x2d
   28184:	f7f7 ff62 	bl	2004c <bsd_os_errno_set>
   28188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2818c:	b003      	add	sp, #12
   2818e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   28192:	682b      	ldr	r3, [r5, #0]
   28194:	2b00      	cmp	r3, #0
   28196:	d06f      	beq.n	28278 <pdn_interface_getopt+0x150>
   28198:	4a43      	ldr	r2, [pc, #268]	; (282a8 <pdn_interface_getopt+0x180>)
   2819a:	f44f 7180 	mov.w	r1, #256	; 0x100
   2819e:	4843      	ldr	r0, [pc, #268]	; (282ac <pdn_interface_getopt+0x184>)
   281a0:	f8df 8114 	ldr.w	r8, [pc, #276]	; 282b8 <pdn_interface_getopt+0x190>
   281a4:	f009 fd62 	bl	31c6c <sniprintf>
   281a8:	4840      	ldr	r0, [pc, #256]	; (282ac <pdn_interface_getopt+0x184>)
   281aa:	f8d8 9000 	ldr.w	r9, [r8]
   281ae:	2700      	movs	r7, #0
   281b0:	f7e9 ff66 	bl	12080 <strlen>
   281b4:	463b      	mov	r3, r7
   281b6:	4602      	mov	r2, r0
   281b8:	493c      	ldr	r1, [pc, #240]	; (282ac <pdn_interface_getopt+0x184>)
   281ba:	4648      	mov	r0, r9
   281bc:	9701      	str	r7, [sp, #4]
   281be:	9700      	str	r7, [sp, #0]
   281c0:	f7ff f954 	bl	2746c <at_interface_write>
   281c4:	4681      	mov	r9, r0
   281c6:	4839      	ldr	r0, [pc, #228]	; (282ac <pdn_interface_getopt+0x184>)
   281c8:	f7e9 ff5a 	bl	12080 <strlen>
   281cc:	4548      	cmp	r0, r9
   281ce:	d160      	bne.n	28292 <pdn_interface_getopt+0x16a>
   281d0:	463b      	mov	r3, r7
   281d2:	e9cd 7700 	strd	r7, r7, [sp]
   281d6:	f44f 7280 	mov.w	r2, #256	; 0x100
   281da:	4934      	ldr	r1, [pc, #208]	; (282ac <pdn_interface_getopt+0x184>)
   281dc:	f8d8 0000 	ldr.w	r0, [r8]
   281e0:	f7ff fa98 	bl	27714 <at_interface_read>
   281e4:	4607      	mov	r7, r0
   281e6:	4832      	ldr	r0, [pc, #200]	; (282b0 <pdn_interface_getopt+0x188>)
   281e8:	f7e9 ff4a 	bl	12080 <strlen>
   281ec:	4287      	cmp	r7, r0
   281ee:	db32      	blt.n	28256 <pdn_interface_getopt+0x12e>
   281f0:	4602      	mov	r2, r0
   281f2:	492e      	ldr	r1, [pc, #184]	; (282ac <pdn_interface_getopt+0x184>)
   281f4:	482e      	ldr	r0, [pc, #184]	; (282b0 <pdn_interface_getopt+0x188>)
   281f6:	f011 f87a 	bl	392ee <strncmp>
   281fa:	4607      	mov	r7, r0
   281fc:	bb58      	cbnz	r0, 28256 <pdn_interface_getopt+0x12e>
   281fe:	4620      	mov	r0, r4
   28200:	492a      	ldr	r1, [pc, #168]	; (282ac <pdn_interface_getopt+0x184>)
   28202:	f7ff fb45 	bl	27890 <pdn_state_get_parser>
   28206:	2800      	cmp	r0, #0
   28208:	dbbc      	blt.n	28184 <pdn_interface_getopt+0x5c>
   2820a:	2301      	movs	r3, #1
   2820c:	7030      	strb	r0, [r6, #0]
   2820e:	4638      	mov	r0, r7
   28210:	602b      	str	r3, [r5, #0]
   28212:	e7bb      	b.n	2818c <pdn_interface_getopt+0x64>
   28214:	682a      	ldr	r2, [r5, #0]
   28216:	b37a      	cbz	r2, 28278 <pdn_interface_getopt+0x150>
   28218:	2201      	movs	r2, #1
   2821a:	2000      	movs	r0, #0
   2821c:	681b      	ldr	r3, [r3, #0]
   2821e:	7033      	strb	r3, [r6, #0]
   28220:	602a      	str	r2, [r5, #0]
   28222:	b003      	add	sp, #12
   28224:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   28228:	689a      	ldr	r2, [r3, #8]
   2822a:	b31a      	cbz	r2, 28274 <pdn_interface_getopt+0x14c>
   2822c:	689a      	ldr	r2, [r3, #8]
   2822e:	2a04      	cmp	r2, #4
   28230:	d020      	beq.n	28274 <pdn_interface_getopt+0x14c>
   28232:	682a      	ldr	r2, [r5, #0]
   28234:	2a07      	cmp	r2, #7
   28236:	d91f      	bls.n	28278 <pdn_interface_getopt+0x150>
   28238:	f012 0203 	ands.w	r2, r2, #3
   2823c:	d11c      	bne.n	28278 <pdn_interface_getopt+0x150>
   2823e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   28240:	0799      	lsls	r1, r3, #30
   28242:	d421      	bmi.n	28288 <pdn_interface_getopt+0x160>
   28244:	2104      	movs	r1, #4
   28246:	07db      	lsls	r3, r3, #31
   28248:	d502      	bpl.n	28250 <pdn_interface_getopt+0x128>
   2824a:	2302      	movs	r3, #2
   2824c:	50b3      	str	r3, [r6, r2]
   2824e:	460a      	mov	r2, r1
   28250:	602a      	str	r2, [r5, #0]
   28252:	2000      	movs	r0, #0
   28254:	e79a      	b.n	2818c <pdn_interface_getopt+0x64>
   28256:	4817      	ldr	r0, [pc, #92]	; (282b4 <pdn_interface_getopt+0x18c>)
   28258:	f7e9 ff12 	bl	12080 <strlen>
   2825c:	4913      	ldr	r1, [pc, #76]	; (282ac <pdn_interface_getopt+0x184>)
   2825e:	4602      	mov	r2, r0
   28260:	4814      	ldr	r0, [pc, #80]	; (282b4 <pdn_interface_getopt+0x18c>)
   28262:	f011 f844 	bl	392ee <strncmp>
   28266:	b9a0      	cbnz	r0, 28292 <pdn_interface_getopt+0x16a>
   28268:	2008      	movs	r0, #8
   2826a:	f7f7 feef 	bl	2004c <bsd_os_errno_set>
   2826e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28272:	e787      	b.n	28184 <pdn_interface_getopt+0x5c>
   28274:	200e      	movs	r0, #14
   28276:	e785      	b.n	28184 <pdn_interface_getopt+0x5c>
   28278:	2016      	movs	r0, #22
   2827a:	e783      	b.n	28184 <pdn_interface_getopt+0x5c>
   2827c:	2009      	movs	r0, #9
   2827e:	f7f7 fee5 	bl	2004c <bsd_os_errno_set>
   28282:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28286:	e781      	b.n	2818c <pdn_interface_getopt+0x64>
   28288:	220a      	movs	r2, #10
   2828a:	2108      	movs	r1, #8
   2828c:	6032      	str	r2, [r6, #0]
   2828e:	2204      	movs	r2, #4
   28290:	e7d9      	b.n	28246 <pdn_interface_getopt+0x11e>
   28292:	2005      	movs	r0, #5
   28294:	f7f7 feda 	bl	2004c <bsd_os_errno_set>
   28298:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2829c:	e772      	b.n	28184 <pdn_interface_getopt+0x5c>
   2829e:	bf00      	nop
   282a0:	789a0000 	.word	0x789a0000
   282a4:	200228b8 	.word	0x200228b8
   282a8:	0003aa0c 	.word	0x0003aa0c
   282ac:	200227b8 	.word	0x200227b8
   282b0:	0003aa18 	.word	0x0003aa18
   282b4:	0003aa3c 	.word	0x0003aa3c
   282b8:	200227b4 	.word	0x200227b4

000282bc <pdn_interface_pdn_id_get>:
   282bc:	2900      	cmp	r1, #0
   282be:	f000 83b9 	beq.w	28a34 <pdn_interface_pdn_id_get+0x778>
   282c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   282c6:	4ca3      	ldr	r4, [pc, #652]	; (28554 <pdn_interface_pdn_id_get+0x298>)
   282c8:	2802      	cmp	r0, #2
   282ca:	b083      	sub	sp, #12
   282cc:	460d      	mov	r5, r1
   282ce:	6823      	ldr	r3, [r4, #0]
   282d0:	f000 8094 	beq.w	283fc <pdn_interface_pdn_id_get+0x140>
   282d4:	280a      	cmp	r0, #10
   282d6:	d03f      	beq.n	28358 <pdn_interface_pdn_id_get+0x9c>
   282d8:	b11b      	cbz	r3, 282e2 <pdn_interface_pdn_id_get+0x26>
   282da:	689b      	ldr	r3, [r3, #8]
   282dc:	2b03      	cmp	r3, #3
   282de:	f000 8127 	beq.w	28530 <pdn_interface_pdn_id_get+0x274>
   282e2:	6863      	ldr	r3, [r4, #4]
   282e4:	b11b      	cbz	r3, 282ee <pdn_interface_pdn_id_get+0x32>
   282e6:	689b      	ldr	r3, [r3, #8]
   282e8:	2b03      	cmp	r3, #3
   282ea:	f000 8110 	beq.w	2850e <pdn_interface_pdn_id_get+0x252>
   282ee:	68a3      	ldr	r3, [r4, #8]
   282f0:	b11b      	cbz	r3, 282fa <pdn_interface_pdn_id_get+0x3e>
   282f2:	689b      	ldr	r3, [r3, #8]
   282f4:	2b03      	cmp	r3, #3
   282f6:	f000 80f9 	beq.w	284ec <pdn_interface_pdn_id_get+0x230>
   282fa:	68e3      	ldr	r3, [r4, #12]
   282fc:	b11b      	cbz	r3, 28306 <pdn_interface_pdn_id_get+0x4a>
   282fe:	689b      	ldr	r3, [r3, #8]
   28300:	2b03      	cmp	r3, #3
   28302:	f000 80e2 	beq.w	284ca <pdn_interface_pdn_id_get+0x20e>
   28306:	6923      	ldr	r3, [r4, #16]
   28308:	b11b      	cbz	r3, 28312 <pdn_interface_pdn_id_get+0x56>
   2830a:	689b      	ldr	r3, [r3, #8]
   2830c:	2b03      	cmp	r3, #3
   2830e:	f000 8123 	beq.w	28558 <pdn_interface_pdn_id_get+0x29c>
   28312:	6963      	ldr	r3, [r4, #20]
   28314:	b11b      	cbz	r3, 2831e <pdn_interface_pdn_id_get+0x62>
   28316:	689b      	ldr	r3, [r3, #8]
   28318:	2b03      	cmp	r3, #3
   2831a:	f000 8161 	beq.w	285e0 <pdn_interface_pdn_id_get+0x324>
   2831e:	69a3      	ldr	r3, [r4, #24]
   28320:	b11b      	cbz	r3, 2832a <pdn_interface_pdn_id_get+0x6e>
   28322:	689b      	ldr	r3, [r3, #8]
   28324:	2b03      	cmp	r3, #3
   28326:	f000 814a 	beq.w	285be <pdn_interface_pdn_id_get+0x302>
   2832a:	69e3      	ldr	r3, [r4, #28]
   2832c:	b11b      	cbz	r3, 28336 <pdn_interface_pdn_id_get+0x7a>
   2832e:	689b      	ldr	r3, [r3, #8]
   28330:	2b03      	cmp	r3, #3
   28332:	f000 8133 	beq.w	2859c <pdn_interface_pdn_id_get+0x2e0>
   28336:	6a23      	ldr	r3, [r4, #32]
   28338:	b11b      	cbz	r3, 28342 <pdn_interface_pdn_id_get+0x86>
   2833a:	689b      	ldr	r3, [r3, #8]
   2833c:	2b03      	cmp	r3, #3
   2833e:	f000 811c 	beq.w	2857a <pdn_interface_pdn_id_get+0x2be>
   28342:	6a63      	ldr	r3, [r4, #36]	; 0x24
   28344:	b11b      	cbz	r3, 2834e <pdn_interface_pdn_id_get+0x92>
   28346:	689b      	ldr	r3, [r3, #8]
   28348:	2b03      	cmp	r3, #3
   2834a:	f000 80ad 	beq.w	284a8 <pdn_interface_pdn_id_get+0x1ec>
   2834e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28352:	b003      	add	sp, #12
   28354:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   28358:	b11b      	cbz	r3, 28362 <pdn_interface_pdn_id_get+0xa6>
   2835a:	689b      	ldr	r3, [r3, #8]
   2835c:	2b03      	cmp	r3, #3
   2835e:	f000 8335 	beq.w	289cc <pdn_interface_pdn_id_get+0x710>
   28362:	6863      	ldr	r3, [r4, #4]
   28364:	b11b      	cbz	r3, 2836e <pdn_interface_pdn_id_get+0xb2>
   28366:	689b      	ldr	r3, [r3, #8]
   28368:	2b03      	cmp	r3, #3
   2836a:	f000 82fd 	beq.w	28968 <pdn_interface_pdn_id_get+0x6ac>
   2836e:	68a3      	ldr	r3, [r4, #8]
   28370:	b11b      	cbz	r3, 2837a <pdn_interface_pdn_id_get+0xbe>
   28372:	689b      	ldr	r3, [r3, #8]
   28374:	2b03      	cmp	r3, #3
   28376:	f000 82d5 	beq.w	28924 <pdn_interface_pdn_id_get+0x668>
   2837a:	68e3      	ldr	r3, [r4, #12]
   2837c:	b11b      	cbz	r3, 28386 <pdn_interface_pdn_id_get+0xca>
   2837e:	689e      	ldr	r6, [r3, #8]
   28380:	2e03      	cmp	r6, #3
   28382:	f000 81f0 	beq.w	28766 <pdn_interface_pdn_id_get+0x4aa>
   28386:	6923      	ldr	r3, [r4, #16]
   28388:	b11b      	cbz	r3, 28392 <pdn_interface_pdn_id_get+0xd6>
   2838a:	689b      	ldr	r3, [r3, #8]
   2838c:	2b03      	cmp	r3, #3
   2838e:	f000 8203 	beq.w	28798 <pdn_interface_pdn_id_get+0x4dc>
   28392:	6963      	ldr	r3, [r4, #20]
   28394:	b11b      	cbz	r3, 2839e <pdn_interface_pdn_id_get+0xe2>
   28396:	689b      	ldr	r3, [r3, #8]
   28398:	2b03      	cmp	r3, #3
   2839a:	f000 8215 	beq.w	287c8 <pdn_interface_pdn_id_get+0x50c>
   2839e:	69a3      	ldr	r3, [r4, #24]
   283a0:	b11b      	cbz	r3, 283aa <pdn_interface_pdn_id_get+0xee>
   283a2:	689b      	ldr	r3, [r3, #8]
   283a4:	2b03      	cmp	r3, #3
   283a6:	f000 8227 	beq.w	287f8 <pdn_interface_pdn_id_get+0x53c>
   283aa:	69e3      	ldr	r3, [r4, #28]
   283ac:	b11b      	cbz	r3, 283b6 <pdn_interface_pdn_id_get+0xfa>
   283ae:	689b      	ldr	r3, [r3, #8]
   283b0:	2b03      	cmp	r3, #3
   283b2:	f000 8239 	beq.w	28828 <pdn_interface_pdn_id_get+0x56c>
   283b6:	6a23      	ldr	r3, [r4, #32]
   283b8:	b11b      	cbz	r3, 283c2 <pdn_interface_pdn_id_get+0x106>
   283ba:	689b      	ldr	r3, [r3, #8]
   283bc:	2b03      	cmp	r3, #3
   283be:	f000 824d 	beq.w	2885c <pdn_interface_pdn_id_get+0x5a0>
   283c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   283c4:	2b00      	cmp	r3, #0
   283c6:	d0c2      	beq.n	2834e <pdn_interface_pdn_id_get+0x92>
   283c8:	689b      	ldr	r3, [r3, #8]
   283ca:	2b03      	cmp	r3, #3
   283cc:	d1bf      	bne.n	2834e <pdn_interface_pdn_id_get+0x92>
   283ce:	4628      	mov	r0, r5
   283d0:	f7e9 fe56 	bl	12080 <strlen>
   283d4:	4606      	mov	r6, r0
   283d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   283d8:	300c      	adds	r0, #12
   283da:	f7e9 fe51 	bl	12080 <strlen>
   283de:	42b0      	cmp	r0, r6
   283e0:	d1b5      	bne.n	2834e <pdn_interface_pdn_id_get+0x92>
   283e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   283e4:	4628      	mov	r0, r5
   283e6:	310c      	adds	r1, #12
   283e8:	f7e9 fe40 	bl	1206c <strcmp>
   283ec:	2800      	cmp	r0, #0
   283ee:	d1ae      	bne.n	2834e <pdn_interface_pdn_id_get+0x92>
   283f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   283f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   283f4:	0792      	lsls	r2, r2, #30
   283f6:	d5aa      	bpl.n	2834e <pdn_interface_pdn_id_get+0x92>
   283f8:	2609      	movs	r6, #9
   283fa:	e11a      	b.n	28632 <pdn_interface_pdn_id_get+0x376>
   283fc:	b11b      	cbz	r3, 28406 <pdn_interface_pdn_id_get+0x14a>
   283fe:	689b      	ldr	r3, [r3, #8]
   28400:	2b03      	cmp	r3, #3
   28402:	f000 82fd 	beq.w	28a00 <pdn_interface_pdn_id_get+0x744>
   28406:	6863      	ldr	r3, [r4, #4]
   28408:	b11b      	cbz	r3, 28412 <pdn_interface_pdn_id_get+0x156>
   2840a:	689b      	ldr	r3, [r3, #8]
   2840c:	2b03      	cmp	r3, #3
   2840e:	f000 82c5 	beq.w	2899c <pdn_interface_pdn_id_get+0x6e0>
   28412:	68a3      	ldr	r3, [r4, #8]
   28414:	b11b      	cbz	r3, 2841e <pdn_interface_pdn_id_get+0x162>
   28416:	689b      	ldr	r3, [r3, #8]
   28418:	2b03      	cmp	r3, #3
   2841a:	f000 8269 	beq.w	288f0 <pdn_interface_pdn_id_get+0x634>
   2841e:	68e3      	ldr	r3, [r4, #12]
   28420:	b11b      	cbz	r3, 2842a <pdn_interface_pdn_id_get+0x16e>
   28422:	689e      	ldr	r6, [r3, #8]
   28424:	2e03      	cmp	r6, #3
   28426:	f000 80ec 	beq.w	28602 <pdn_interface_pdn_id_get+0x346>
   2842a:	6923      	ldr	r3, [r4, #16]
   2842c:	b11b      	cbz	r3, 28436 <pdn_interface_pdn_id_get+0x17a>
   2842e:	689b      	ldr	r3, [r3, #8]
   28430:	2b03      	cmp	r3, #3
   28432:	f000 814a 	beq.w	286ca <pdn_interface_pdn_id_get+0x40e>
   28436:	6963      	ldr	r3, [r4, #20]
   28438:	b11b      	cbz	r3, 28442 <pdn_interface_pdn_id_get+0x186>
   2843a:	689b      	ldr	r3, [r3, #8]
   2843c:	2b03      	cmp	r3, #3
   2843e:	f000 815e 	beq.w	286fe <pdn_interface_pdn_id_get+0x442>
   28442:	69a3      	ldr	r3, [r4, #24]
   28444:	b11b      	cbz	r3, 2844e <pdn_interface_pdn_id_get+0x192>
   28446:	689b      	ldr	r3, [r3, #8]
   28448:	2b03      	cmp	r3, #3
   2844a:	f000 8172 	beq.w	28732 <pdn_interface_pdn_id_get+0x476>
   2844e:	69e3      	ldr	r3, [r4, #28]
   28450:	b11b      	cbz	r3, 2845a <pdn_interface_pdn_id_get+0x19e>
   28452:	689b      	ldr	r3, [r3, #8]
   28454:	2b03      	cmp	r3, #3
   28456:	f000 821b 	beq.w	28890 <pdn_interface_pdn_id_get+0x5d4>
   2845a:	6a23      	ldr	r3, [r4, #32]
   2845c:	b11b      	cbz	r3, 28466 <pdn_interface_pdn_id_get+0x1aa>
   2845e:	689b      	ldr	r3, [r3, #8]
   28460:	2b03      	cmp	r3, #3
   28462:	f000 822d 	beq.w	288c0 <pdn_interface_pdn_id_get+0x604>
   28466:	6a63      	ldr	r3, [r4, #36]	; 0x24
   28468:	2b00      	cmp	r3, #0
   2846a:	f43f af70 	beq.w	2834e <pdn_interface_pdn_id_get+0x92>
   2846e:	689b      	ldr	r3, [r3, #8]
   28470:	2b03      	cmp	r3, #3
   28472:	f47f af6c 	bne.w	2834e <pdn_interface_pdn_id_get+0x92>
   28476:	4628      	mov	r0, r5
   28478:	f7e9 fe02 	bl	12080 <strlen>
   2847c:	4606      	mov	r6, r0
   2847e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   28480:	300c      	adds	r0, #12
   28482:	f7e9 fdfd 	bl	12080 <strlen>
   28486:	4286      	cmp	r6, r0
   28488:	f47f af61 	bne.w	2834e <pdn_interface_pdn_id_get+0x92>
   2848c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2848e:	4628      	mov	r0, r5
   28490:	310c      	adds	r1, #12
   28492:	f7e9 fdeb 	bl	1206c <strcmp>
   28496:	2800      	cmp	r0, #0
   28498:	f47f af59 	bne.w	2834e <pdn_interface_pdn_id_get+0x92>
   2849c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2849e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   284a0:	07d2      	lsls	r2, r2, #31
   284a2:	f57f af54 	bpl.w	2834e <pdn_interface_pdn_id_get+0x92>
   284a6:	e7a7      	b.n	283f8 <pdn_interface_pdn_id_get+0x13c>
   284a8:	4628      	mov	r0, r5
   284aa:	f7e9 fde9 	bl	12080 <strlen>
   284ae:	4606      	mov	r6, r0
   284b0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   284b2:	300c      	adds	r0, #12
   284b4:	f7e9 fde4 	bl	12080 <strlen>
   284b8:	42b0      	cmp	r0, r6
   284ba:	f47f af48 	bne.w	2834e <pdn_interface_pdn_id_get+0x92>
   284be:	6a61      	ldr	r1, [r4, #36]	; 0x24
   284c0:	4628      	mov	r0, r5
   284c2:	310c      	adds	r1, #12
   284c4:	f7e9 fdd2 	bl	1206c <strcmp>
   284c8:	e741      	b.n	2834e <pdn_interface_pdn_id_get+0x92>
   284ca:	4628      	mov	r0, r5
   284cc:	f7e9 fdd8 	bl	12080 <strlen>
   284d0:	4606      	mov	r6, r0
   284d2:	68e0      	ldr	r0, [r4, #12]
   284d4:	300c      	adds	r0, #12
   284d6:	f7e9 fdd3 	bl	12080 <strlen>
   284da:	4286      	cmp	r6, r0
   284dc:	f47f af13 	bne.w	28306 <pdn_interface_pdn_id_get+0x4a>
   284e0:	68e1      	ldr	r1, [r4, #12]
   284e2:	4628      	mov	r0, r5
   284e4:	310c      	adds	r1, #12
   284e6:	f7e9 fdc1 	bl	1206c <strcmp>
   284ea:	e70c      	b.n	28306 <pdn_interface_pdn_id_get+0x4a>
   284ec:	4628      	mov	r0, r5
   284ee:	f7e9 fdc7 	bl	12080 <strlen>
   284f2:	4606      	mov	r6, r0
   284f4:	68a0      	ldr	r0, [r4, #8]
   284f6:	300c      	adds	r0, #12
   284f8:	f7e9 fdc2 	bl	12080 <strlen>
   284fc:	4286      	cmp	r6, r0
   284fe:	f47f aefc 	bne.w	282fa <pdn_interface_pdn_id_get+0x3e>
   28502:	68a1      	ldr	r1, [r4, #8]
   28504:	4628      	mov	r0, r5
   28506:	310c      	adds	r1, #12
   28508:	f7e9 fdb0 	bl	1206c <strcmp>
   2850c:	e6f5      	b.n	282fa <pdn_interface_pdn_id_get+0x3e>
   2850e:	4628      	mov	r0, r5
   28510:	f7e9 fdb6 	bl	12080 <strlen>
   28514:	4606      	mov	r6, r0
   28516:	6860      	ldr	r0, [r4, #4]
   28518:	300c      	adds	r0, #12
   2851a:	f7e9 fdb1 	bl	12080 <strlen>
   2851e:	4286      	cmp	r6, r0
   28520:	f47f aee5 	bne.w	282ee <pdn_interface_pdn_id_get+0x32>
   28524:	6861      	ldr	r1, [r4, #4]
   28526:	4628      	mov	r0, r5
   28528:	310c      	adds	r1, #12
   2852a:	f7e9 fd9f 	bl	1206c <strcmp>
   2852e:	e6de      	b.n	282ee <pdn_interface_pdn_id_get+0x32>
   28530:	4608      	mov	r0, r1
   28532:	f7e9 fda5 	bl	12080 <strlen>
   28536:	4606      	mov	r6, r0
   28538:	6820      	ldr	r0, [r4, #0]
   2853a:	300c      	adds	r0, #12
   2853c:	f7e9 fda0 	bl	12080 <strlen>
   28540:	4286      	cmp	r6, r0
   28542:	f47f aece 	bne.w	282e2 <pdn_interface_pdn_id_get+0x26>
   28546:	6821      	ldr	r1, [r4, #0]
   28548:	4628      	mov	r0, r5
   2854a:	310c      	adds	r1, #12
   2854c:	f7e9 fd8e 	bl	1206c <strcmp>
   28550:	e6c7      	b.n	282e2 <pdn_interface_pdn_id_get+0x26>
   28552:	bf00      	nop
   28554:	200228b8 	.word	0x200228b8
   28558:	4628      	mov	r0, r5
   2855a:	f7e9 fd91 	bl	12080 <strlen>
   2855e:	4606      	mov	r6, r0
   28560:	6920      	ldr	r0, [r4, #16]
   28562:	300c      	adds	r0, #12
   28564:	f7e9 fd8c 	bl	12080 <strlen>
   28568:	4286      	cmp	r6, r0
   2856a:	f47f aed2 	bne.w	28312 <pdn_interface_pdn_id_get+0x56>
   2856e:	6921      	ldr	r1, [r4, #16]
   28570:	4628      	mov	r0, r5
   28572:	310c      	adds	r1, #12
   28574:	f7e9 fd7a 	bl	1206c <strcmp>
   28578:	e6cb      	b.n	28312 <pdn_interface_pdn_id_get+0x56>
   2857a:	4628      	mov	r0, r5
   2857c:	f7e9 fd80 	bl	12080 <strlen>
   28580:	4606      	mov	r6, r0
   28582:	6a20      	ldr	r0, [r4, #32]
   28584:	300c      	adds	r0, #12
   28586:	f7e9 fd7b 	bl	12080 <strlen>
   2858a:	4286      	cmp	r6, r0
   2858c:	f47f aed9 	bne.w	28342 <pdn_interface_pdn_id_get+0x86>
   28590:	6a21      	ldr	r1, [r4, #32]
   28592:	4628      	mov	r0, r5
   28594:	310c      	adds	r1, #12
   28596:	f7e9 fd69 	bl	1206c <strcmp>
   2859a:	e6d2      	b.n	28342 <pdn_interface_pdn_id_get+0x86>
   2859c:	4628      	mov	r0, r5
   2859e:	f7e9 fd6f 	bl	12080 <strlen>
   285a2:	4606      	mov	r6, r0
   285a4:	69e0      	ldr	r0, [r4, #28]
   285a6:	300c      	adds	r0, #12
   285a8:	f7e9 fd6a 	bl	12080 <strlen>
   285ac:	4286      	cmp	r6, r0
   285ae:	f47f aec2 	bne.w	28336 <pdn_interface_pdn_id_get+0x7a>
   285b2:	69e1      	ldr	r1, [r4, #28]
   285b4:	4628      	mov	r0, r5
   285b6:	310c      	adds	r1, #12
   285b8:	f7e9 fd58 	bl	1206c <strcmp>
   285bc:	e6bb      	b.n	28336 <pdn_interface_pdn_id_get+0x7a>
   285be:	4628      	mov	r0, r5
   285c0:	f7e9 fd5e 	bl	12080 <strlen>
   285c4:	4606      	mov	r6, r0
   285c6:	69a0      	ldr	r0, [r4, #24]
   285c8:	300c      	adds	r0, #12
   285ca:	f7e9 fd59 	bl	12080 <strlen>
   285ce:	4286      	cmp	r6, r0
   285d0:	f47f aeab 	bne.w	2832a <pdn_interface_pdn_id_get+0x6e>
   285d4:	69a1      	ldr	r1, [r4, #24]
   285d6:	4628      	mov	r0, r5
   285d8:	310c      	adds	r1, #12
   285da:	f7e9 fd47 	bl	1206c <strcmp>
   285de:	e6a4      	b.n	2832a <pdn_interface_pdn_id_get+0x6e>
   285e0:	4628      	mov	r0, r5
   285e2:	f7e9 fd4d 	bl	12080 <strlen>
   285e6:	4606      	mov	r6, r0
   285e8:	6960      	ldr	r0, [r4, #20]
   285ea:	300c      	adds	r0, #12
   285ec:	f7e9 fd48 	bl	12080 <strlen>
   285f0:	4286      	cmp	r6, r0
   285f2:	f47f ae94 	bne.w	2831e <pdn_interface_pdn_id_get+0x62>
   285f6:	6961      	ldr	r1, [r4, #20]
   285f8:	4628      	mov	r0, r5
   285fa:	310c      	adds	r1, #12
   285fc:	f7e9 fd36 	bl	1206c <strcmp>
   28600:	e68d      	b.n	2831e <pdn_interface_pdn_id_get+0x62>
   28602:	4628      	mov	r0, r5
   28604:	f7e9 fd3c 	bl	12080 <strlen>
   28608:	4607      	mov	r7, r0
   2860a:	68e0      	ldr	r0, [r4, #12]
   2860c:	300c      	adds	r0, #12
   2860e:	f7e9 fd37 	bl	12080 <strlen>
   28612:	4287      	cmp	r7, r0
   28614:	f47f af09 	bne.w	2842a <pdn_interface_pdn_id_get+0x16e>
   28618:	68e1      	ldr	r1, [r4, #12]
   2861a:	4628      	mov	r0, r5
   2861c:	310c      	adds	r1, #12
   2861e:	f7e9 fd25 	bl	1206c <strcmp>
   28622:	2800      	cmp	r0, #0
   28624:	f47f af01 	bne.w	2842a <pdn_interface_pdn_id_get+0x16e>
   28628:	68e3      	ldr	r3, [r4, #12]
   2862a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   2862c:	07d1      	lsls	r1, r2, #31
   2862e:	f57f aefc 	bpl.w	2842a <pdn_interface_pdn_id_get+0x16e>
   28632:	6858      	ldr	r0, [r3, #4]
   28634:	1c43      	adds	r3, r0, #1
   28636:	f47f ae8c 	bne.w	28352 <pdn_interface_pdn_id_get+0x96>
   2863a:	4dc6      	ldr	r5, [pc, #792]	; (28954 <pdn_interface_pdn_id_get+0x698>)
   2863c:	4ac6      	ldr	r2, [pc, #792]	; (28958 <pdn_interface_pdn_id_get+0x69c>)
   2863e:	f44f 7180 	mov.w	r1, #256	; 0x100
   28642:	4628      	mov	r0, r5
   28644:	f009 fb12 	bl	31c6c <sniprintf>
   28648:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   2864c:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   28650:	681b      	ldr	r3, [r3, #0]
   28652:	4ac2      	ldr	r2, [pc, #776]	; (2895c <pdn_interface_pdn_id_get+0x6a0>)
   28654:	4428      	add	r0, r5
   28656:	f8df 830c 	ldr.w	r8, [pc, #780]	; 28964 <pdn_interface_pdn_id_get+0x6a8>
   2865a:	f009 fb07 	bl	31c6c <sniprintf>
   2865e:	4628      	mov	r0, r5
   28660:	f8d8 9000 	ldr.w	r9, [r8]
   28664:	2700      	movs	r7, #0
   28666:	f7e9 fd0b 	bl	12080 <strlen>
   2866a:	4629      	mov	r1, r5
   2866c:	4602      	mov	r2, r0
   2866e:	463b      	mov	r3, r7
   28670:	4648      	mov	r0, r9
   28672:	9701      	str	r7, [sp, #4]
   28674:	9700      	str	r7, [sp, #0]
   28676:	f7fe fef9 	bl	2746c <at_interface_write>
   2867a:	4681      	mov	r9, r0
   2867c:	4628      	mov	r0, r5
   2867e:	f7e9 fcff 	bl	12080 <strlen>
   28682:	4548      	cmp	r0, r9
   28684:	f040 81e9 	bne.w	28a5a <pdn_interface_pdn_id_get+0x79e>
   28688:	463b      	mov	r3, r7
   2868a:	f44f 7280 	mov.w	r2, #256	; 0x100
   2868e:	e9cd 7700 	strd	r7, r7, [sp]
   28692:	4629      	mov	r1, r5
   28694:	f8d8 0000 	ldr.w	r0, [r8]
   28698:	f7ff f83c 	bl	27714 <at_interface_read>
   2869c:	4607      	mov	r7, r0
   2869e:	48b0      	ldr	r0, [pc, #704]	; (28960 <pdn_interface_pdn_id_get+0x6a4>)
   286a0:	f7e9 fcee 	bl	12080 <strlen>
   286a4:	4287      	cmp	r7, r0
   286a6:	4602      	mov	r2, r0
   286a8:	f2c0 81c7 	blt.w	28a3a <pdn_interface_pdn_id_get+0x77e>
   286ac:	4629      	mov	r1, r5
   286ae:	48ac      	ldr	r0, [pc, #688]	; (28960 <pdn_interface_pdn_id_get+0x6a4>)
   286b0:	f010 fe1d 	bl	392ee <strncmp>
   286b4:	2800      	cmp	r0, #0
   286b6:	f040 81c0 	bne.w	28a3a <pdn_interface_pdn_id_get+0x77e>
   286ba:	4629      	mov	r1, r5
   286bc:	4630      	mov	r0, r6
   286be:	f7ff f91d 	bl	278fc <pdn_id_get_parser>
   286c2:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   286c6:	6858      	ldr	r0, [r3, #4]
   286c8:	e643      	b.n	28352 <pdn_interface_pdn_id_get+0x96>
   286ca:	4628      	mov	r0, r5
   286cc:	f7e9 fcd8 	bl	12080 <strlen>
   286d0:	4606      	mov	r6, r0
   286d2:	6920      	ldr	r0, [r4, #16]
   286d4:	300c      	adds	r0, #12
   286d6:	f7e9 fcd3 	bl	12080 <strlen>
   286da:	4286      	cmp	r6, r0
   286dc:	f47f aeab 	bne.w	28436 <pdn_interface_pdn_id_get+0x17a>
   286e0:	6921      	ldr	r1, [r4, #16]
   286e2:	4628      	mov	r0, r5
   286e4:	310c      	adds	r1, #12
   286e6:	f7e9 fcc1 	bl	1206c <strcmp>
   286ea:	2800      	cmp	r0, #0
   286ec:	f47f aea3 	bne.w	28436 <pdn_interface_pdn_id_get+0x17a>
   286f0:	6923      	ldr	r3, [r4, #16]
   286f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   286f4:	07d2      	lsls	r2, r2, #31
   286f6:	f57f ae9e 	bpl.w	28436 <pdn_interface_pdn_id_get+0x17a>
   286fa:	2604      	movs	r6, #4
   286fc:	e799      	b.n	28632 <pdn_interface_pdn_id_get+0x376>
   286fe:	4628      	mov	r0, r5
   28700:	f7e9 fcbe 	bl	12080 <strlen>
   28704:	4606      	mov	r6, r0
   28706:	6960      	ldr	r0, [r4, #20]
   28708:	300c      	adds	r0, #12
   2870a:	f7e9 fcb9 	bl	12080 <strlen>
   2870e:	4286      	cmp	r6, r0
   28710:	f47f ae97 	bne.w	28442 <pdn_interface_pdn_id_get+0x186>
   28714:	6961      	ldr	r1, [r4, #20]
   28716:	4628      	mov	r0, r5
   28718:	310c      	adds	r1, #12
   2871a:	f7e9 fca7 	bl	1206c <strcmp>
   2871e:	2800      	cmp	r0, #0
   28720:	f47f ae8f 	bne.w	28442 <pdn_interface_pdn_id_get+0x186>
   28724:	6963      	ldr	r3, [r4, #20]
   28726:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   28728:	07d7      	lsls	r7, r2, #31
   2872a:	f57f ae8a 	bpl.w	28442 <pdn_interface_pdn_id_get+0x186>
   2872e:	2605      	movs	r6, #5
   28730:	e77f      	b.n	28632 <pdn_interface_pdn_id_get+0x376>
   28732:	4628      	mov	r0, r5
   28734:	f7e9 fca4 	bl	12080 <strlen>
   28738:	4606      	mov	r6, r0
   2873a:	69a0      	ldr	r0, [r4, #24]
   2873c:	300c      	adds	r0, #12
   2873e:	f7e9 fc9f 	bl	12080 <strlen>
   28742:	4286      	cmp	r6, r0
   28744:	f47f ae83 	bne.w	2844e <pdn_interface_pdn_id_get+0x192>
   28748:	69a1      	ldr	r1, [r4, #24]
   2874a:	4628      	mov	r0, r5
   2874c:	310c      	adds	r1, #12
   2874e:	f7e9 fc8d 	bl	1206c <strcmp>
   28752:	2800      	cmp	r0, #0
   28754:	f47f ae7b 	bne.w	2844e <pdn_interface_pdn_id_get+0x192>
   28758:	69a3      	ldr	r3, [r4, #24]
   2875a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   2875c:	07d6      	lsls	r6, r2, #31
   2875e:	f57f ae76 	bpl.w	2844e <pdn_interface_pdn_id_get+0x192>
   28762:	2606      	movs	r6, #6
   28764:	e765      	b.n	28632 <pdn_interface_pdn_id_get+0x376>
   28766:	4628      	mov	r0, r5
   28768:	f7e9 fc8a 	bl	12080 <strlen>
   2876c:	4607      	mov	r7, r0
   2876e:	68e0      	ldr	r0, [r4, #12]
   28770:	300c      	adds	r0, #12
   28772:	f7e9 fc85 	bl	12080 <strlen>
   28776:	4287      	cmp	r7, r0
   28778:	f47f ae05 	bne.w	28386 <pdn_interface_pdn_id_get+0xca>
   2877c:	68e1      	ldr	r1, [r4, #12]
   2877e:	4628      	mov	r0, r5
   28780:	310c      	adds	r1, #12
   28782:	f7e9 fc73 	bl	1206c <strcmp>
   28786:	2800      	cmp	r0, #0
   28788:	f47f adfd 	bne.w	28386 <pdn_interface_pdn_id_get+0xca>
   2878c:	68e3      	ldr	r3, [r4, #12]
   2878e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   28790:	0791      	lsls	r1, r2, #30
   28792:	f53f af4e 	bmi.w	28632 <pdn_interface_pdn_id_get+0x376>
   28796:	e5f6      	b.n	28386 <pdn_interface_pdn_id_get+0xca>
   28798:	4628      	mov	r0, r5
   2879a:	f7e9 fc71 	bl	12080 <strlen>
   2879e:	4606      	mov	r6, r0
   287a0:	6920      	ldr	r0, [r4, #16]
   287a2:	300c      	adds	r0, #12
   287a4:	f7e9 fc6c 	bl	12080 <strlen>
   287a8:	4286      	cmp	r6, r0
   287aa:	f47f adf2 	bne.w	28392 <pdn_interface_pdn_id_get+0xd6>
   287ae:	6921      	ldr	r1, [r4, #16]
   287b0:	4628      	mov	r0, r5
   287b2:	310c      	adds	r1, #12
   287b4:	f7e9 fc5a 	bl	1206c <strcmp>
   287b8:	2800      	cmp	r0, #0
   287ba:	f47f adea 	bne.w	28392 <pdn_interface_pdn_id_get+0xd6>
   287be:	6923      	ldr	r3, [r4, #16]
   287c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   287c2:	0792      	lsls	r2, r2, #30
   287c4:	d499      	bmi.n	286fa <pdn_interface_pdn_id_get+0x43e>
   287c6:	e5e4      	b.n	28392 <pdn_interface_pdn_id_get+0xd6>
   287c8:	4628      	mov	r0, r5
   287ca:	f7e9 fc59 	bl	12080 <strlen>
   287ce:	4606      	mov	r6, r0
   287d0:	6960      	ldr	r0, [r4, #20]
   287d2:	300c      	adds	r0, #12
   287d4:	f7e9 fc54 	bl	12080 <strlen>
   287d8:	4286      	cmp	r6, r0
   287da:	f47f ade0 	bne.w	2839e <pdn_interface_pdn_id_get+0xe2>
   287de:	6961      	ldr	r1, [r4, #20]
   287e0:	4628      	mov	r0, r5
   287e2:	310c      	adds	r1, #12
   287e4:	f7e9 fc42 	bl	1206c <strcmp>
   287e8:	2800      	cmp	r0, #0
   287ea:	f47f add8 	bne.w	2839e <pdn_interface_pdn_id_get+0xe2>
   287ee:	6963      	ldr	r3, [r4, #20]
   287f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   287f2:	0797      	lsls	r7, r2, #30
   287f4:	d49b      	bmi.n	2872e <pdn_interface_pdn_id_get+0x472>
   287f6:	e5d2      	b.n	2839e <pdn_interface_pdn_id_get+0xe2>
   287f8:	4628      	mov	r0, r5
   287fa:	f7e9 fc41 	bl	12080 <strlen>
   287fe:	4606      	mov	r6, r0
   28800:	69a0      	ldr	r0, [r4, #24]
   28802:	300c      	adds	r0, #12
   28804:	f7e9 fc3c 	bl	12080 <strlen>
   28808:	4286      	cmp	r6, r0
   2880a:	f47f adce 	bne.w	283aa <pdn_interface_pdn_id_get+0xee>
   2880e:	69a1      	ldr	r1, [r4, #24]
   28810:	4628      	mov	r0, r5
   28812:	310c      	adds	r1, #12
   28814:	f7e9 fc2a 	bl	1206c <strcmp>
   28818:	2800      	cmp	r0, #0
   2881a:	f47f adc6 	bne.w	283aa <pdn_interface_pdn_id_get+0xee>
   2881e:	69a3      	ldr	r3, [r4, #24]
   28820:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   28822:	0796      	lsls	r6, r2, #30
   28824:	d49d      	bmi.n	28762 <pdn_interface_pdn_id_get+0x4a6>
   28826:	e5c0      	b.n	283aa <pdn_interface_pdn_id_get+0xee>
   28828:	4628      	mov	r0, r5
   2882a:	f7e9 fc29 	bl	12080 <strlen>
   2882e:	4606      	mov	r6, r0
   28830:	69e0      	ldr	r0, [r4, #28]
   28832:	300c      	adds	r0, #12
   28834:	f7e9 fc24 	bl	12080 <strlen>
   28838:	4286      	cmp	r6, r0
   2883a:	f47f adbc 	bne.w	283b6 <pdn_interface_pdn_id_get+0xfa>
   2883e:	69e1      	ldr	r1, [r4, #28]
   28840:	4628      	mov	r0, r5
   28842:	310c      	adds	r1, #12
   28844:	f7e9 fc12 	bl	1206c <strcmp>
   28848:	2800      	cmp	r0, #0
   2884a:	f47f adb4 	bne.w	283b6 <pdn_interface_pdn_id_get+0xfa>
   2884e:	69e3      	ldr	r3, [r4, #28]
   28850:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   28852:	0790      	lsls	r0, r2, #30
   28854:	f57f adaf 	bpl.w	283b6 <pdn_interface_pdn_id_get+0xfa>
   28858:	2607      	movs	r6, #7
   2885a:	e6ea      	b.n	28632 <pdn_interface_pdn_id_get+0x376>
   2885c:	4628      	mov	r0, r5
   2885e:	f7e9 fc0f 	bl	12080 <strlen>
   28862:	4606      	mov	r6, r0
   28864:	6a20      	ldr	r0, [r4, #32]
   28866:	300c      	adds	r0, #12
   28868:	f7e9 fc0a 	bl	12080 <strlen>
   2886c:	4286      	cmp	r6, r0
   2886e:	f47f ada8 	bne.w	283c2 <pdn_interface_pdn_id_get+0x106>
   28872:	6a21      	ldr	r1, [r4, #32]
   28874:	4628      	mov	r0, r5
   28876:	310c      	adds	r1, #12
   28878:	f7e9 fbf8 	bl	1206c <strcmp>
   2887c:	2800      	cmp	r0, #0
   2887e:	f47f ada0 	bne.w	283c2 <pdn_interface_pdn_id_get+0x106>
   28882:	6a23      	ldr	r3, [r4, #32]
   28884:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   28886:	0791      	lsls	r1, r2, #30
   28888:	f57f ad9b 	bpl.w	283c2 <pdn_interface_pdn_id_get+0x106>
   2888c:	2608      	movs	r6, #8
   2888e:	e6d0      	b.n	28632 <pdn_interface_pdn_id_get+0x376>
   28890:	4628      	mov	r0, r5
   28892:	f7e9 fbf5 	bl	12080 <strlen>
   28896:	4606      	mov	r6, r0
   28898:	69e0      	ldr	r0, [r4, #28]
   2889a:	300c      	adds	r0, #12
   2889c:	f7e9 fbf0 	bl	12080 <strlen>
   288a0:	4286      	cmp	r6, r0
   288a2:	f47f adda 	bne.w	2845a <pdn_interface_pdn_id_get+0x19e>
   288a6:	69e1      	ldr	r1, [r4, #28]
   288a8:	4628      	mov	r0, r5
   288aa:	310c      	adds	r1, #12
   288ac:	f7e9 fbde 	bl	1206c <strcmp>
   288b0:	2800      	cmp	r0, #0
   288b2:	f47f add2 	bne.w	2845a <pdn_interface_pdn_id_get+0x19e>
   288b6:	69e3      	ldr	r3, [r4, #28]
   288b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   288ba:	07d0      	lsls	r0, r2, #31
   288bc:	d4cc      	bmi.n	28858 <pdn_interface_pdn_id_get+0x59c>
   288be:	e5cc      	b.n	2845a <pdn_interface_pdn_id_get+0x19e>
   288c0:	4628      	mov	r0, r5
   288c2:	f7e9 fbdd 	bl	12080 <strlen>
   288c6:	4606      	mov	r6, r0
   288c8:	6a20      	ldr	r0, [r4, #32]
   288ca:	300c      	adds	r0, #12
   288cc:	f7e9 fbd8 	bl	12080 <strlen>
   288d0:	4286      	cmp	r6, r0
   288d2:	f47f adc8 	bne.w	28466 <pdn_interface_pdn_id_get+0x1aa>
   288d6:	6a21      	ldr	r1, [r4, #32]
   288d8:	4628      	mov	r0, r5
   288da:	310c      	adds	r1, #12
   288dc:	f7e9 fbc6 	bl	1206c <strcmp>
   288e0:	2800      	cmp	r0, #0
   288e2:	f47f adc0 	bne.w	28466 <pdn_interface_pdn_id_get+0x1aa>
   288e6:	6a23      	ldr	r3, [r4, #32]
   288e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   288ea:	07d1      	lsls	r1, r2, #31
   288ec:	d4ce      	bmi.n	2888c <pdn_interface_pdn_id_get+0x5d0>
   288ee:	e5ba      	b.n	28466 <pdn_interface_pdn_id_get+0x1aa>
   288f0:	4628      	mov	r0, r5
   288f2:	f7e9 fbc5 	bl	12080 <strlen>
   288f6:	4606      	mov	r6, r0
   288f8:	68a0      	ldr	r0, [r4, #8]
   288fa:	300c      	adds	r0, #12
   288fc:	f7e9 fbc0 	bl	12080 <strlen>
   28900:	4286      	cmp	r6, r0
   28902:	f47f ad8c 	bne.w	2841e <pdn_interface_pdn_id_get+0x162>
   28906:	68a1      	ldr	r1, [r4, #8]
   28908:	4628      	mov	r0, r5
   2890a:	310c      	adds	r1, #12
   2890c:	f7e9 fbae 	bl	1206c <strcmp>
   28910:	2800      	cmp	r0, #0
   28912:	f47f ad84 	bne.w	2841e <pdn_interface_pdn_id_get+0x162>
   28916:	68a3      	ldr	r3, [r4, #8]
   28918:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   2891a:	07d0      	lsls	r0, r2, #31
   2891c:	f57f ad7f 	bpl.w	2841e <pdn_interface_pdn_id_get+0x162>
   28920:	2602      	movs	r6, #2
   28922:	e686      	b.n	28632 <pdn_interface_pdn_id_get+0x376>
   28924:	4628      	mov	r0, r5
   28926:	f7e9 fbab 	bl	12080 <strlen>
   2892a:	4606      	mov	r6, r0
   2892c:	68a0      	ldr	r0, [r4, #8]
   2892e:	300c      	adds	r0, #12
   28930:	f7e9 fba6 	bl	12080 <strlen>
   28934:	4286      	cmp	r6, r0
   28936:	f47f ad20 	bne.w	2837a <pdn_interface_pdn_id_get+0xbe>
   2893a:	68a1      	ldr	r1, [r4, #8]
   2893c:	4628      	mov	r0, r5
   2893e:	310c      	adds	r1, #12
   28940:	f7e9 fb94 	bl	1206c <strcmp>
   28944:	2800      	cmp	r0, #0
   28946:	f47f ad18 	bne.w	2837a <pdn_interface_pdn_id_get+0xbe>
   2894a:	68a3      	ldr	r3, [r4, #8]
   2894c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   2894e:	0790      	lsls	r0, r2, #30
   28950:	d4e6      	bmi.n	28920 <pdn_interface_pdn_id_get+0x664>
   28952:	e512      	b.n	2837a <pdn_interface_pdn_id_get+0xbe>
   28954:	200227b8 	.word	0x200227b8
   28958:	0003a9e8 	.word	0x0003a9e8
   2895c:	0003a9e4 	.word	0x0003a9e4
   28960:	0003a9f8 	.word	0x0003a9f8
   28964:	200227b4 	.word	0x200227b4
   28968:	4628      	mov	r0, r5
   2896a:	f7e9 fb89 	bl	12080 <strlen>
   2896e:	4606      	mov	r6, r0
   28970:	6860      	ldr	r0, [r4, #4]
   28972:	300c      	adds	r0, #12
   28974:	f7e9 fb84 	bl	12080 <strlen>
   28978:	4286      	cmp	r6, r0
   2897a:	f47f acf8 	bne.w	2836e <pdn_interface_pdn_id_get+0xb2>
   2897e:	6861      	ldr	r1, [r4, #4]
   28980:	4628      	mov	r0, r5
   28982:	310c      	adds	r1, #12
   28984:	f7e9 fb72 	bl	1206c <strcmp>
   28988:	2800      	cmp	r0, #0
   2898a:	f47f acf0 	bne.w	2836e <pdn_interface_pdn_id_get+0xb2>
   2898e:	6863      	ldr	r3, [r4, #4]
   28990:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   28992:	0796      	lsls	r6, r2, #30
   28994:	f57f aceb 	bpl.w	2836e <pdn_interface_pdn_id_get+0xb2>
   28998:	2601      	movs	r6, #1
   2899a:	e64a      	b.n	28632 <pdn_interface_pdn_id_get+0x376>
   2899c:	4628      	mov	r0, r5
   2899e:	f7e9 fb6f 	bl	12080 <strlen>
   289a2:	4606      	mov	r6, r0
   289a4:	6860      	ldr	r0, [r4, #4]
   289a6:	300c      	adds	r0, #12
   289a8:	f7e9 fb6a 	bl	12080 <strlen>
   289ac:	4286      	cmp	r6, r0
   289ae:	f47f ad30 	bne.w	28412 <pdn_interface_pdn_id_get+0x156>
   289b2:	6861      	ldr	r1, [r4, #4]
   289b4:	4628      	mov	r0, r5
   289b6:	310c      	adds	r1, #12
   289b8:	f7e9 fb58 	bl	1206c <strcmp>
   289bc:	2800      	cmp	r0, #0
   289be:	f47f ad28 	bne.w	28412 <pdn_interface_pdn_id_get+0x156>
   289c2:	6863      	ldr	r3, [r4, #4]
   289c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   289c6:	07d6      	lsls	r6, r2, #31
   289c8:	d4e6      	bmi.n	28998 <pdn_interface_pdn_id_get+0x6dc>
   289ca:	e522      	b.n	28412 <pdn_interface_pdn_id_get+0x156>
   289cc:	4608      	mov	r0, r1
   289ce:	f7e9 fb57 	bl	12080 <strlen>
   289d2:	4606      	mov	r6, r0
   289d4:	6820      	ldr	r0, [r4, #0]
   289d6:	300c      	adds	r0, #12
   289d8:	f7e9 fb52 	bl	12080 <strlen>
   289dc:	4286      	cmp	r6, r0
   289de:	f47f acc0 	bne.w	28362 <pdn_interface_pdn_id_get+0xa6>
   289e2:	6821      	ldr	r1, [r4, #0]
   289e4:	4628      	mov	r0, r5
   289e6:	310c      	adds	r1, #12
   289e8:	f7e9 fb40 	bl	1206c <strcmp>
   289ec:	4606      	mov	r6, r0
   289ee:	2800      	cmp	r0, #0
   289f0:	f47f acb7 	bne.w	28362 <pdn_interface_pdn_id_get+0xa6>
   289f4:	6823      	ldr	r3, [r4, #0]
   289f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   289f8:	0797      	lsls	r7, r2, #30
   289fa:	f53f ae1a 	bmi.w	28632 <pdn_interface_pdn_id_get+0x376>
   289fe:	e4b0      	b.n	28362 <pdn_interface_pdn_id_get+0xa6>
   28a00:	4608      	mov	r0, r1
   28a02:	f7e9 fb3d 	bl	12080 <strlen>
   28a06:	4606      	mov	r6, r0
   28a08:	6820      	ldr	r0, [r4, #0]
   28a0a:	300c      	adds	r0, #12
   28a0c:	f7e9 fb38 	bl	12080 <strlen>
   28a10:	4286      	cmp	r6, r0
   28a12:	f47f acf8 	bne.w	28406 <pdn_interface_pdn_id_get+0x14a>
   28a16:	6821      	ldr	r1, [r4, #0]
   28a18:	4628      	mov	r0, r5
   28a1a:	310c      	adds	r1, #12
   28a1c:	f7e9 fb26 	bl	1206c <strcmp>
   28a20:	4606      	mov	r6, r0
   28a22:	2800      	cmp	r0, #0
   28a24:	f47f acef 	bne.w	28406 <pdn_interface_pdn_id_get+0x14a>
   28a28:	6823      	ldr	r3, [r4, #0]
   28a2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   28a2c:	07d7      	lsls	r7, r2, #31
   28a2e:	f53f ae00 	bmi.w	28632 <pdn_interface_pdn_id_get+0x376>
   28a32:	e4e8      	b.n	28406 <pdn_interface_pdn_id_get+0x14a>
   28a34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28a38:	4770      	bx	lr
   28a3a:	480b      	ldr	r0, [pc, #44]	; (28a68 <pdn_interface_pdn_id_get+0x7ac>)
   28a3c:	f7e9 fb20 	bl	12080 <strlen>
   28a40:	490a      	ldr	r1, [pc, #40]	; (28a6c <pdn_interface_pdn_id_get+0x7b0>)
   28a42:	4602      	mov	r2, r0
   28a44:	4808      	ldr	r0, [pc, #32]	; (28a68 <pdn_interface_pdn_id_get+0x7ac>)
   28a46:	f010 fc52 	bl	392ee <strncmp>
   28a4a:	b930      	cbnz	r0, 28a5a <pdn_interface_pdn_id_get+0x79e>
   28a4c:	2008      	movs	r0, #8
   28a4e:	f7f7 fafd 	bl	2004c <bsd_os_errno_set>
   28a52:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   28a56:	6858      	ldr	r0, [r3, #4]
   28a58:	e47b      	b.n	28352 <pdn_interface_pdn_id_get+0x96>
   28a5a:	2005      	movs	r0, #5
   28a5c:	f7f7 faf6 	bl	2004c <bsd_os_errno_set>
   28a60:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   28a64:	6858      	ldr	r0, [r3, #4]
   28a66:	e474      	b.n	28352 <pdn_interface_pdn_id_get+0x96>
   28a68:	0003aa3c 	.word	0x0003aa3c
   28a6c:	200227b8 	.word	0x200227b8

00028a70 <bsd_recoverable_error_handler>:
   28a70:	4770      	bx	lr
   28a72:	bf00      	nop

00028a74 <bsd_platform_error_handler>:
   28a74:	b508      	push	{r3, lr}
   28a76:	f7ff fffb 	bl	28a70 <bsd_recoverable_error_handler>
   28a7a:	bd08      	pop	{r3, pc}

00028a7c <bsd_init>:
   28a7c:	b160      	cbz	r0, 28a98 <bsd_init+0x1c>
   28a7e:	b510      	push	{r4, lr}
   28a80:	4c07      	ldr	r4, [pc, #28]	; (28aa0 <bsd_init+0x24>)
   28a82:	7823      	ldrb	r3, [r4, #0]
   28a84:	b92b      	cbnz	r3, 28a92 <bsd_init+0x16>
   28a86:	f000 f81b 	bl	28ac0 <bsd_platform_init>
   28a8a:	b908      	cbnz	r0, 28a90 <bsd_init+0x14>
   28a8c:	2301      	movs	r3, #1
   28a8e:	7023      	strb	r3, [r4, #0]
   28a90:	bd10      	pop	{r4, pc}
   28a92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28a96:	bd10      	pop	{r4, pc}
   28a98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28a9c:	4770      	bx	lr
   28a9e:	bf00      	nop
   28aa0:	2002908b 	.word	0x2002908b

00028aa4 <unimplemented_method>:
   28aa4:	b40f      	push	{r0, r1, r2, r3}
   28aa6:	b508      	push	{r3, lr}
   28aa8:	202d      	movs	r0, #45	; 0x2d
   28aaa:	f7f7 facf 	bl	2004c <bsd_os_errno_set>
   28aae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   28ab2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28ab6:	b004      	add	sp, #16
   28ab8:	4770      	bx	lr
   28aba:	bf00      	nop

00028abc <rpc_transport_ipc_fault_handler>:
   28abc:	f7ff bfda 	b.w	28a74 <bsd_platform_error_handler>

00028ac0 <bsd_platform_init>:
   28ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
   28ac2:	f04f 0c00 	mov.w	ip, #0
   28ac6:	f247 0660 	movw	r6, #28768	; 0x7060
   28aca:	f24b 0260 	movw	r2, #45152	; 0xb060
   28ace:	6843      	ldr	r3, [r0, #4]
   28ad0:	4d3a      	ldr	r5, [pc, #232]	; (28bbc <bsd_platform_init+0xfc>)
   28ad2:	4607      	mov	r7, r0
   28ad4:	602b      	str	r3, [r5, #0]
   28ad6:	7801      	ldrb	r1, [r0, #0]
   28ad8:	2006      	movs	r0, #6
   28ada:	4561      	cmp	r1, ip
   28adc:	bf08      	it	eq
   28ade:	4632      	moveq	r2, r6
   28ae0:	4413      	add	r3, r2
   28ae2:	4c37      	ldr	r4, [pc, #220]	; (28bc0 <bsd_platform_init+0x100>)
   28ae4:	60ab      	str	r3, [r5, #8]
   28ae6:	68b9      	ldr	r1, [r7, #8]
   28ae8:	6063      	str	r3, [r4, #4]
   28aea:	4b36      	ldr	r3, [pc, #216]	; (28bc4 <bsd_platform_init+0x104>)
   28aec:	b093      	sub	sp, #76	; 0x4c
   28aee:	606a      	str	r2, [r5, #4]
   28af0:	f8a4 c000 	strh.w	ip, [r4]
   28af4:	1a8a      	subs	r2, r1, r2
   28af6:	60ea      	str	r2, [r5, #12]
   28af8:	60a2      	str	r2, [r4, #8]
   28afa:	81a0      	strh	r0, [r4, #12]
   28afc:	6123      	str	r3, [r4, #16]
   28afe:	f001 f883 	bl	29c08 <nrf_mem_init>
   28b02:	2800      	cmp	r0, #0
   28b04:	d156      	bne.n	28bb4 <bsd_platform_init+0xf4>
   28b06:	4621      	mov	r1, r4
   28b08:	a801      	add	r0, sp, #4
   28b0a:	f001 f8f1 	bl	29cf0 <nrf_mem_register>
   28b0e:	2800      	cmp	r0, #0
   28b10:	d150      	bne.n	28bb4 <bsd_platform_init+0xf4>
   28b12:	f7f7 fbb3 	bl	2027c <bsd_os_init>
   28b16:	f7fd fc53 	bl	263c0 <rpc_framework_init>
   28b1a:	2800      	cmp	r0, #0
   28b1c:	d14a      	bne.n	28bb4 <bsd_platform_init+0xf4>
   28b1e:	783a      	ldrb	r2, [r7, #0]
   28b20:	682b      	ldr	r3, [r5, #0]
   28b22:	bb32      	cbnz	r2, 28b72 <bsd_platform_init+0xb2>
   28b24:	4606      	mov	r6, r0
   28b26:	2220      	movs	r2, #32
   28b28:	2408      	movs	r4, #8
   28b2a:	2500      	movs	r5, #0
   28b2c:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
   28b30:	f44f 4780 	mov.w	r7, #16384	; 0x4000
   28b34:	f503 5141 	add.w	r1, r3, #12352	; 0x3040
   28b38:	4411      	add	r1, r2
   28b3a:	9302      	str	r3, [sp, #8]
   28b3c:	e9cd 6008 	strd	r6, r0, [sp, #32]
   28b40:	910c      	str	r1, [sp, #48]	; 0x30
   28b42:	9203      	str	r2, [sp, #12]
   28b44:	f103 0140 	add.w	r1, r3, #64	; 0x40
   28b48:	9205      	str	r2, [sp, #20]
   28b4a:	9207      	str	r2, [sp, #28]
   28b4c:	eb0d 0004 	add.w	r0, sp, r4
   28b50:	189a      	adds	r2, r3, r2
   28b52:	3360      	adds	r3, #96	; 0x60
   28b54:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
   28b58:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   28b5c:	e9cd 740d 	strd	r7, r4, [sp, #52]	; 0x34
   28b60:	940f      	str	r4, [sp, #60]	; 0x3c
   28b62:	9104      	str	r1, [sp, #16]
   28b64:	9206      	str	r2, [sp, #24]
   28b66:	930a      	str	r3, [sp, #40]	; 0x28
   28b68:	f7fa fafa 	bl	23160 <rpc_transport_ipc_init>
   28b6c:	b128      	cbz	r0, 28b7a <bsd_platform_init+0xba>
   28b6e:	b013      	add	sp, #76	; 0x4c
   28b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28b72:	441e      	add	r6, r3
   28b74:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   28b78:	e7d5      	b.n	28b26 <bsd_platform_init+0x66>
   28b7a:	f001 fcf9 	bl	2a570 <interface_init>
   28b7e:	b9c8      	cbnz	r0, 28bb4 <bsd_platform_init+0xf4>
   28b80:	f7fe fcf2 	bl	27568 <at_interface_init>
   28b84:	b9b0      	cbnz	r0, 28bb4 <bsd_platform_init+0xf4>
   28b86:	f7fb fe1d 	bl	247c4 <ip_interface_init>
   28b8a:	b998      	cbnz	r0, 28bb4 <bsd_platform_init+0xf4>
   28b8c:	f7fb f8ba 	bl	23d04 <tls_interface_init>
   28b90:	b980      	cbnz	r0, 28bb4 <bsd_platform_init+0xf4>
   28b92:	f001 fa09 	bl	29fa8 <mfu_interface_init>
   28b96:	b968      	cbnz	r0, 28bb4 <bsd_platform_init+0xf4>
   28b98:	f7fe ff08 	bl	279ac <pdn_interface_init>
   28b9c:	b950      	cbnz	r0, 28bb4 <bsd_platform_init+0xf4>
   28b9e:	f7fe fb39 	bl	27214 <gnss_interface_init>
   28ba2:	b938      	cbnz	r0, 28bb4 <bsd_platform_init+0xf4>
   28ba4:	f7f9 fd1a 	bl	225dc <logobj_interface_init>
   28ba8:	1b40      	subs	r0, r0, r5
   28baa:	bf18      	it	ne
   28bac:	2001      	movne	r0, #1
   28bae:	4240      	negs	r0, r0
   28bb0:	b013      	add	sp, #76	; 0x4c
   28bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28bb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28bb8:	b013      	add	sp, #76	; 0x4c
   28bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28bbc:	200228f4 	.word	0x200228f4
   28bc0:	200228e0 	.word	0x200228e0
   28bc4:	0003ab90 	.word	0x0003ab90

00028bc8 <bsd_platform_af_method_table_get>:
   28bc8:	2805      	cmp	r0, #5
   28bca:	d02a      	beq.n	28c22 <bsd_platform_af_method_table_get+0x5a>
   28bcc:	b508      	push	{r3, lr}
   28bce:	d914      	bls.n	28bfa <bsd_platform_af_method_table_get+0x32>
   28bd0:	280a      	cmp	r0, #10
   28bd2:	d016      	beq.n	28c02 <bsd_platform_af_method_table_get+0x3a>
   28bd4:	2866      	cmp	r0, #102	; 0x66
   28bd6:	d11f      	bne.n	28c18 <bsd_platform_af_method_table_get+0x50>
   28bd8:	f240 2302 	movw	r3, #514	; 0x202
   28bdc:	429a      	cmp	r2, r3
   28bde:	d035      	beq.n	28c4c <bsd_platform_af_method_table_get+0x84>
   28be0:	f240 2305 	movw	r3, #517	; 0x205
   28be4:	429a      	cmp	r2, r3
   28be6:	d035      	beq.n	28c54 <bsd_platform_af_method_table_get+0x8c>
   28be8:	f240 2301 	movw	r3, #513	; 0x201
   28bec:	429a      	cmp	r2, r3
   28bee:	d02f      	beq.n	28c50 <bsd_platform_af_method_table_get+0x88>
   28bf0:	202b      	movs	r0, #43	; 0x2b
   28bf2:	f7f7 fa2b 	bl	2004c <bsd_os_errno_set>
   28bf6:	2000      	movs	r0, #0
   28bf8:	bd08      	pop	{r3, pc}
   28bfa:	2801      	cmp	r0, #1
   28bfc:	d016      	beq.n	28c2c <bsd_platform_af_method_table_get+0x64>
   28bfe:	2802      	cmp	r0, #2
   28c00:	d10a      	bne.n	28c18 <bsd_platform_af_method_table_get+0x50>
   28c02:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   28c06:	d21a      	bcs.n	28c3e <bsd_platform_af_method_table_get+0x76>
   28c08:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   28c0c:	d21a      	bcs.n	28c44 <bsd_platform_af_method_table_get+0x7c>
   28c0e:	3a01      	subs	r2, #1
   28c10:	2a01      	cmp	r2, #1
   28c12:	d8ed      	bhi.n	28bf0 <bsd_platform_af_method_table_get+0x28>
   28c14:	4810      	ldr	r0, [pc, #64]	; (28c58 <bsd_platform_af_method_table_get+0x90>)
   28c16:	bd08      	pop	{r3, pc}
   28c18:	2016      	movs	r0, #22
   28c1a:	f7f7 fa17 	bl	2004c <bsd_os_errno_set>
   28c1e:	2000      	movs	r0, #0
   28c20:	bd08      	pop	{r3, pc}
   28c22:	2903      	cmp	r1, #3
   28c24:	480d      	ldr	r0, [pc, #52]	; (28c5c <bsd_platform_af_method_table_get+0x94>)
   28c26:	bf18      	it	ne
   28c28:	2000      	movne	r0, #0
   28c2a:	4770      	bx	lr
   28c2c:	f240 2303 	movw	r3, #515	; 0x203
   28c30:	429a      	cmp	r2, r3
   28c32:	d009      	beq.n	28c48 <bsd_platform_af_method_table_get+0x80>
   28c34:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   28c38:	d1da      	bne.n	28bf0 <bsd_platform_af_method_table_get+0x28>
   28c3a:	4809      	ldr	r0, [pc, #36]	; (28c60 <bsd_platform_af_method_table_get+0x98>)
   28c3c:	bd08      	pop	{r3, pc}
   28c3e:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   28c42:	d1d5      	bne.n	28bf0 <bsd_platform_af_method_table_get+0x28>
   28c44:	4807      	ldr	r0, [pc, #28]	; (28c64 <bsd_platform_af_method_table_get+0x9c>)
   28c46:	bd08      	pop	{r3, pc}
   28c48:	4807      	ldr	r0, [pc, #28]	; (28c68 <bsd_platform_af_method_table_get+0xa0>)
   28c4a:	bd08      	pop	{r3, pc}
   28c4c:	4807      	ldr	r0, [pc, #28]	; (28c6c <bsd_platform_af_method_table_get+0xa4>)
   28c4e:	bd08      	pop	{r3, pc}
   28c50:	4807      	ldr	r0, [pc, #28]	; (28c70 <bsd_platform_af_method_table_get+0xa8>)
   28c52:	bd08      	pop	{r3, pc}
   28c54:	4807      	ldr	r0, [pc, #28]	; (28c74 <bsd_platform_af_method_table_get+0xac>)
   28c56:	bd08      	pop	{r3, pc}
   28c58:	0003aa78 	.word	0x0003aa78
   28c5c:	0003ab68 	.word	0x0003ab68
   28c60:	0003ab18 	.word	0x0003ab18
   28c64:	0003aaa0 	.word	0x0003aaa0
   28c68:	0003aac8 	.word	0x0003aac8
   28c6c:	0003aaf0 	.word	0x0003aaf0
   28c70:	0003aa50 	.word	0x0003aa50
   28c74:	0003ab40 	.word	0x0003ab40

00028c78 <bsd_platform_fd_method_table_get>:
   28c78:	b538      	push	{r3, r4, r5, lr}
   28c7a:	4605      	mov	r5, r0
   28c7c:	f001 fdaa 	bl	2a7d4 <interface_socket_from_handle_get>
   28c80:	4604      	mov	r4, r0
   28c82:	b960      	cbnz	r0, 28c9e <bsd_platform_fd_method_table_get+0x26>
   28c84:	4b2c      	ldr	r3, [pc, #176]	; (28d38 <bsd_platform_fd_method_table_get+0xc0>)
   28c86:	429d      	cmp	r5, r3
   28c88:	d02f      	beq.n	28cea <bsd_platform_fd_method_table_get+0x72>
   28c8a:	0c2b      	lsrs	r3, r5, #16
   28c8c:	4a2b      	ldr	r2, [pc, #172]	; (28d3c <bsd_platform_fd_method_table_get+0xc4>)
   28c8e:	041b      	lsls	r3, r3, #16
   28c90:	4293      	cmp	r3, r2
   28c92:	d03d      	beq.n	28d10 <bsd_platform_fd_method_table_get+0x98>
   28c94:	4b2a      	ldr	r3, [pc, #168]	; (28d40 <bsd_platform_fd_method_table_get+0xc8>)
   28c96:	429d      	cmp	r5, r3
   28c98:	d149      	bne.n	28d2e <bsd_platform_fd_method_table_get+0xb6>
   28c9a:	482a      	ldr	r0, [pc, #168]	; (28d44 <bsd_platform_fd_method_table_get+0xcc>)
   28c9c:	bd38      	pop	{r3, r4, r5, pc}
   28c9e:	68c3      	ldr	r3, [r0, #12]
   28ca0:	6942      	ldr	r2, [r0, #20]
   28ca2:	2b05      	cmp	r3, #5
   28ca4:	d036      	beq.n	28d14 <bsd_platform_fd_method_table_get+0x9c>
   28ca6:	d911      	bls.n	28ccc <bsd_platform_fd_method_table_get+0x54>
   28ca8:	2b0a      	cmp	r3, #10
   28caa:	d013      	beq.n	28cd4 <bsd_platform_fd_method_table_get+0x5c>
   28cac:	2b66      	cmp	r3, #102	; 0x66
   28cae:	d11e      	bne.n	28cee <bsd_platform_fd_method_table_get+0x76>
   28cb0:	f240 2302 	movw	r3, #514	; 0x202
   28cb4:	429a      	cmp	r2, r3
   28cb6:	d02b      	beq.n	28d10 <bsd_platform_fd_method_table_get+0x98>
   28cb8:	f240 2305 	movw	r3, #517	; 0x205
   28cbc:	429a      	cmp	r2, r3
   28cbe:	d02f      	beq.n	28d20 <bsd_platform_fd_method_table_get+0xa8>
   28cc0:	f240 2301 	movw	r3, #513	; 0x201
   28cc4:	429a      	cmp	r2, r3
   28cc6:	d11e      	bne.n	28d06 <bsd_platform_fd_method_table_get+0x8e>
   28cc8:	481f      	ldr	r0, [pc, #124]	; (28d48 <bsd_platform_fd_method_table_get+0xd0>)
   28cca:	bd38      	pop	{r3, r4, r5, pc}
   28ccc:	2b01      	cmp	r3, #1
   28cce:	d013      	beq.n	28cf8 <bsd_platform_fd_method_table_get+0x80>
   28cd0:	2b02      	cmp	r3, #2
   28cd2:	d10c      	bne.n	28cee <bsd_platform_fd_method_table_get+0x76>
   28cd4:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   28cd8:	d224      	bcs.n	28d24 <bsd_platform_fd_method_table_get+0xac>
   28cda:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   28cde:	d224      	bcs.n	28d2a <bsd_platform_fd_method_table_get+0xb2>
   28ce0:	3a01      	subs	r2, #1
   28ce2:	2a01      	cmp	r2, #1
   28ce4:	d80f      	bhi.n	28d06 <bsd_platform_fd_method_table_get+0x8e>
   28ce6:	4819      	ldr	r0, [pc, #100]	; (28d4c <bsd_platform_fd_method_table_get+0xd4>)
   28ce8:	bd38      	pop	{r3, r4, r5, pc}
   28cea:	4819      	ldr	r0, [pc, #100]	; (28d50 <bsd_platform_fd_method_table_get+0xd8>)
   28cec:	bd38      	pop	{r3, r4, r5, pc}
   28cee:	2016      	movs	r0, #22
   28cf0:	f7f7 f9ac 	bl	2004c <bsd_os_errno_set>
   28cf4:	2000      	movs	r0, #0
   28cf6:	bd38      	pop	{r3, r4, r5, pc}
   28cf8:	f240 2303 	movw	r3, #515	; 0x203
   28cfc:	429a      	cmp	r2, r3
   28cfe:	d0f4      	beq.n	28cea <bsd_platform_fd_method_table_get+0x72>
   28d00:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   28d04:	d0c9      	beq.n	28c9a <bsd_platform_fd_method_table_get+0x22>
   28d06:	202b      	movs	r0, #43	; 0x2b
   28d08:	f7f7 f9a0 	bl	2004c <bsd_os_errno_set>
   28d0c:	2000      	movs	r0, #0
   28d0e:	bd38      	pop	{r3, r4, r5, pc}
   28d10:	4810      	ldr	r0, [pc, #64]	; (28d54 <bsd_platform_fd_method_table_get+0xdc>)
   28d12:	bd38      	pop	{r3, r4, r5, pc}
   28d14:	6903      	ldr	r3, [r0, #16]
   28d16:	4810      	ldr	r0, [pc, #64]	; (28d58 <bsd_platform_fd_method_table_get+0xe0>)
   28d18:	2b03      	cmp	r3, #3
   28d1a:	bf18      	it	ne
   28d1c:	2000      	movne	r0, #0
   28d1e:	bd38      	pop	{r3, r4, r5, pc}
   28d20:	480e      	ldr	r0, [pc, #56]	; (28d5c <bsd_platform_fd_method_table_get+0xe4>)
   28d22:	bd38      	pop	{r3, r4, r5, pc}
   28d24:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   28d28:	d1ed      	bne.n	28d06 <bsd_platform_fd_method_table_get+0x8e>
   28d2a:	480d      	ldr	r0, [pc, #52]	; (28d60 <bsd_platform_fd_method_table_get+0xe8>)
   28d2c:	bd38      	pop	{r3, r4, r5, pc}
   28d2e:	2009      	movs	r0, #9
   28d30:	f7f7 f98c 	bl	2004c <bsd_os_errno_set>
   28d34:	4620      	mov	r0, r4
   28d36:	bd38      	pop	{r3, r4, r5, pc}
   28d38:	49765432 	.word	0x49765432
   28d3c:	789a0000 	.word	0x789a0000
   28d40:	49765443 	.word	0x49765443
   28d44:	0003ab18 	.word	0x0003ab18
   28d48:	0003aa50 	.word	0x0003aa50
   28d4c:	0003aa78 	.word	0x0003aa78
   28d50:	0003aac8 	.word	0x0003aac8
   28d54:	0003aaf0 	.word	0x0003aaf0
   28d58:	0003ab68 	.word	0x0003ab68
   28d5c:	0003ab40 	.word	0x0003ab40
   28d60:	0003aaa0 	.word	0x0003aaa0

00028d64 <bsd_platform_getaddrinfo>:
   28d64:	f7fc bf1a 	b.w	25b9c <ip_interface_getaddrinfo>

00028d68 <bsd_platform_freeaddrinfo>:
   28d68:	f7fd b816 	b.w	25d98 <ip_interface_freeaddrinfo>

00028d6c <bsd_platform_poll>:
   28d6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28d70:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   28d74:	b083      	sub	sp, #12
   28d76:	9200      	str	r2, [sp, #0]
   28d78:	2800      	cmp	r0, #0
   28d7a:	d048      	beq.n	28e0e <bsd_platform_poll+0xa2>
   28d7c:	1e4b      	subs	r3, r1, #1
   28d7e:	2b08      	cmp	r3, #8
   28d80:	d845      	bhi.n	28e0e <bsd_platform_poll+0xa2>
   28d82:	4680      	mov	r8, r0
   28d84:	4605      	mov	r5, r0
   28d86:	2400      	movs	r4, #0
   28d88:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
   28d8c:	88ab      	ldrh	r3, [r5, #4]
   28d8e:	6828      	ldr	r0, [r5, #0]
   28d90:	f003 0303 	and.w	r3, r3, #3
   28d94:	a901      	add	r1, sp, #4
   28d96:	f043 061c 	orr.w	r6, r3, #28
   28d9a:	f001 fd29 	bl	2a7f0 <interface_socket_event_get>
   28d9e:	9b01      	ldr	r3, [sp, #4]
   28da0:	3508      	adds	r5, #8
   28da2:	4033      	ands	r3, r6
   28da4:	f825 3c02 	strh.w	r3, [r5, #-2]
   28da8:	b103      	cbz	r3, 28dac <bsd_platform_poll+0x40>
   28daa:	3401      	adds	r4, #1
   28dac:	42af      	cmp	r7, r5
   28dae:	d1ed      	bne.n	28d8c <bsd_platform_poll+0x20>
   28db0:	bb9c      	cbnz	r4, 28e1a <bsd_platform_poll+0xae>
   28db2:	4669      	mov	r1, sp
   28db4:	4640      	mov	r0, r8
   28db6:	f7f7 f89f 	bl	1fef8 <bsd_os_timedwait>
   28dba:	4607      	mov	r7, r0
   28dbc:	b108      	cbz	r0, 28dc2 <bsd_platform_poll+0x56>
   28dbe:	283c      	cmp	r0, #60	; 0x3c
   28dc0:	d11d      	bne.n	28dfe <bsd_platform_poll+0x92>
   28dc2:	46c1      	mov	r9, r8
   28dc4:	2600      	movs	r6, #0
   28dc6:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   28dca:	f8d9 0000 	ldr.w	r0, [r9]
   28dce:	f003 0303 	and.w	r3, r3, #3
   28dd2:	a901      	add	r1, sp, #4
   28dd4:	f043 041c 	orr.w	r4, r3, #28
   28dd8:	f001 fd0a 	bl	2a7f0 <interface_socket_event_get>
   28ddc:	9b01      	ldr	r3, [sp, #4]
   28dde:	f109 0908 	add.w	r9, r9, #8
   28de2:	4023      	ands	r3, r4
   28de4:	f829 3c02 	strh.w	r3, [r9, #-2]
   28de8:	b103      	cbz	r3, 28dec <bsd_platform_poll+0x80>
   28dea:	3601      	adds	r6, #1
   28dec:	454d      	cmp	r5, r9
   28dee:	d1ea      	bne.n	28dc6 <bsd_platform_poll+0x5a>
   28df0:	b90e      	cbnz	r6, 28df6 <bsd_platform_poll+0x8a>
   28df2:	2f00      	cmp	r7, #0
   28df4:	d0dd      	beq.n	28db2 <bsd_platform_poll+0x46>
   28df6:	4630      	mov	r0, r6
   28df8:	b003      	add	sp, #12
   28dfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   28dfe:	2023      	movs	r0, #35	; 0x23
   28e00:	f7f7 f924 	bl	2004c <bsd_os_errno_set>
   28e04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28e08:	b003      	add	sp, #12
   28e0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   28e0e:	2016      	movs	r0, #22
   28e10:	f7f7 f91c 	bl	2004c <bsd_os_errno_set>
   28e14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28e18:	e7ee      	b.n	28df8 <bsd_platform_poll+0x8c>
   28e1a:	4620      	mov	r0, r4
   28e1c:	e7ec      	b.n	28df8 <bsd_platform_poll+0x8c>
   28e1e:	bf00      	nop

00028e20 <bsd_platform_fcntl>:
   28e20:	b508      	push	{r3, lr}
   28e22:	4b06      	ldr	r3, [pc, #24]	; (28e3c <bsd_platform_fcntl+0x1c>)
   28e24:	4298      	cmp	r0, r3
   28e26:	d003      	beq.n	28e30 <bsd_platform_fcntl+0x10>
   28e28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   28e2c:	f001 bd8a 	b.w	2a944 <interface_socket_fcntl>
   28e30:	202d      	movs	r0, #45	; 0x2d
   28e32:	f7f7 f90b 	bl	2004c <bsd_os_errno_set>
   28e36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28e3a:	bd08      	pop	{r3, pc}
   28e3c:	49765432 	.word	0x49765432

00028e40 <linked_list_init>:
   28e40:	b128      	cbz	r0, 28e4e <linked_list_init+0xe>
   28e42:	2300      	movs	r3, #0
   28e44:	6003      	str	r3, [r0, #0]
   28e46:	e9c0 3301 	strd	r3, r3, [r0, #4]
   28e4a:	4618      	mov	r0, r3
   28e4c:	4770      	bx	lr
   28e4e:	2007      	movs	r0, #7
   28e50:	4770      	bx	lr
   28e52:	bf00      	nop

00028e54 <linked_list_push>:
   28e54:	6802      	ldr	r2, [r0, #0]
   28e56:	4603      	mov	r3, r0
   28e58:	3201      	adds	r2, #1
   28e5a:	d00e      	beq.n	28e7a <linked_list_push+0x26>
   28e5c:	2200      	movs	r2, #0
   28e5e:	600a      	str	r2, [r1, #0]
   28e60:	6802      	ldr	r2, [r0, #0]
   28e62:	b13a      	cbz	r2, 28e74 <linked_list_push+0x20>
   28e64:	6882      	ldr	r2, [r0, #8]
   28e66:	6011      	str	r1, [r2, #0]
   28e68:	6081      	str	r1, [r0, #8]
   28e6a:	681a      	ldr	r2, [r3, #0]
   28e6c:	2000      	movs	r0, #0
   28e6e:	3201      	adds	r2, #1
   28e70:	601a      	str	r2, [r3, #0]
   28e72:	4770      	bx	lr
   28e74:	e9c0 1101 	strd	r1, r1, [r0, #4]
   28e78:	e7f7      	b.n	28e6a <linked_list_push+0x16>
   28e7a:	2004      	movs	r0, #4
   28e7c:	4770      	bx	lr
   28e7e:	bf00      	nop

00028e80 <linked_list_pop>:
   28e80:	4603      	mov	r3, r0
   28e82:	6800      	ldr	r0, [r0, #0]
   28e84:	b128      	cbz	r0, 28e92 <linked_list_pop+0x12>
   28e86:	6858      	ldr	r0, [r3, #4]
   28e88:	681a      	ldr	r2, [r3, #0]
   28e8a:	6801      	ldr	r1, [r0, #0]
   28e8c:	3a01      	subs	r2, #1
   28e8e:	6059      	str	r1, [r3, #4]
   28e90:	601a      	str	r2, [r3, #0]
   28e92:	4770      	bx	lr

00028e94 <linked_list_peek>:
   28e94:	6803      	ldr	r3, [r0, #0]
   28e96:	b10b      	cbz	r3, 28e9c <linked_list_peek+0x8>
   28e98:	6840      	ldr	r0, [r0, #4]
   28e9a:	4770      	bx	lr
   28e9c:	4618      	mov	r0, r3
   28e9e:	4770      	bx	lr

00028ea0 <linked_list_size_get>:
   28ea0:	6800      	ldr	r0, [r0, #0]
   28ea2:	4770      	bx	lr

00028ea4 <linked_list_get_next>:
   28ea4:	6800      	ldr	r0, [r0, #0]
   28ea6:	4770      	bx	lr

00028ea8 <nrf_socket>:
   28ea8:	b570      	push	{r4, r5, r6, lr}
   28eaa:	4604      	mov	r4, r0
   28eac:	460d      	mov	r5, r1
   28eae:	4616      	mov	r6, r2
   28eb0:	f7ff fe8a 	bl	28bc8 <bsd_platform_af_method_table_get>
   28eb4:	b130      	cbz	r0, 28ec4 <nrf_socket+0x1c>
   28eb6:	6803      	ldr	r3, [r0, #0]
   28eb8:	4632      	mov	r2, r6
   28eba:	4629      	mov	r1, r5
   28ebc:	4620      	mov	r0, r4
   28ebe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   28ec2:	4718      	bx	r3
   28ec4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28ec8:	bd70      	pop	{r4, r5, r6, pc}
   28eca:	bf00      	nop

00028ecc <nrf_close>:
   28ecc:	b510      	push	{r4, lr}
   28ece:	4604      	mov	r4, r0
   28ed0:	f7ff fed2 	bl	28c78 <bsd_platform_fd_method_table_get>
   28ed4:	b120      	cbz	r0, 28ee0 <nrf_close+0x14>
   28ed6:	6843      	ldr	r3, [r0, #4]
   28ed8:	4620      	mov	r0, r4
   28eda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   28ede:	4718      	bx	r3
   28ee0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28ee4:	bd10      	pop	{r4, pc}
   28ee6:	bf00      	nop

00028ee8 <nrf_sendto>:
   28ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28eec:	460d      	mov	r5, r1
   28eee:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   28ef2:	4616      	mov	r6, r2
   28ef4:	461f      	mov	r7, r3
   28ef6:	4604      	mov	r4, r0
   28ef8:	f7ff febe 	bl	28c78 <bsd_platform_fd_method_table_get>
   28efc:	b158      	cbz	r0, 28f16 <nrf_sendto+0x2e>
   28efe:	e9cd 8908 	strd	r8, r9, [sp, #32]
   28f02:	f8d0 e008 	ldr.w	lr, [r0, #8]
   28f06:	463b      	mov	r3, r7
   28f08:	4632      	mov	r2, r6
   28f0a:	4629      	mov	r1, r5
   28f0c:	4620      	mov	r0, r4
   28f0e:	46f4      	mov	ip, lr
   28f10:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28f14:	4760      	bx	ip
   28f16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28f1e:	bf00      	nop

00028f20 <nrf_recvfrom>:
   28f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28f24:	460d      	mov	r5, r1
   28f26:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   28f2a:	4616      	mov	r6, r2
   28f2c:	461f      	mov	r7, r3
   28f2e:	4604      	mov	r4, r0
   28f30:	f7ff fea2 	bl	28c78 <bsd_platform_fd_method_table_get>
   28f34:	b158      	cbz	r0, 28f4e <nrf_recvfrom+0x2e>
   28f36:	e9cd 8908 	strd	r8, r9, [sp, #32]
   28f3a:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   28f3e:	463b      	mov	r3, r7
   28f40:	4632      	mov	r2, r6
   28f42:	4629      	mov	r1, r5
   28f44:	4620      	mov	r0, r4
   28f46:	46f4      	mov	ip, lr
   28f48:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28f4c:	4760      	bx	ip
   28f4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28f56:	bf00      	nop

00028f58 <nrf_connect>:
   28f58:	b570      	push	{r4, r5, r6, lr}
   28f5a:	460d      	mov	r5, r1
   28f5c:	4616      	mov	r6, r2
   28f5e:	4604      	mov	r4, r0
   28f60:	f7ff fe8a 	bl	28c78 <bsd_platform_fd_method_table_get>
   28f64:	b130      	cbz	r0, 28f74 <nrf_connect+0x1c>
   28f66:	6943      	ldr	r3, [r0, #20]
   28f68:	4632      	mov	r2, r6
   28f6a:	4629      	mov	r1, r5
   28f6c:	4620      	mov	r0, r4
   28f6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   28f72:	4718      	bx	r3
   28f74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28f78:	bd70      	pop	{r4, r5, r6, pc}
   28f7a:	bf00      	nop

00028f7c <nrf_listen>:
   28f7c:	b570      	push	{r4, r5, r6, lr}
   28f7e:	460d      	mov	r5, r1
   28f80:	4604      	mov	r4, r0
   28f82:	f7ff fe79 	bl	28c78 <bsd_platform_fd_method_table_get>
   28f86:	b128      	cbz	r0, 28f94 <nrf_listen+0x18>
   28f88:	6983      	ldr	r3, [r0, #24]
   28f8a:	4629      	mov	r1, r5
   28f8c:	4620      	mov	r0, r4
   28f8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   28f92:	4718      	bx	r3
   28f94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28f98:	bd70      	pop	{r4, r5, r6, pc}
   28f9a:	bf00      	nop

00028f9c <nrf_accept>:
   28f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28fa0:	460d      	mov	r5, r1
   28fa2:	4616      	mov	r6, r2
   28fa4:	4604      	mov	r4, r0
   28fa6:	f7ff fe67 	bl	28c78 <bsd_platform_fd_method_table_get>
   28faa:	b140      	cbz	r0, 28fbe <nrf_accept+0x22>
   28fac:	69c7      	ldr	r7, [r0, #28]
   28fae:	4632      	mov	r2, r6
   28fb0:	4629      	mov	r1, r5
   28fb2:	4620      	mov	r0, r4
   28fb4:	46bc      	mov	ip, r7
   28fb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   28fba:	2300      	movs	r3, #0
   28fbc:	4760      	bx	ip
   28fbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   28fc6:	bf00      	nop

00028fc8 <nrf_bind>:
   28fc8:	b570      	push	{r4, r5, r6, lr}
   28fca:	460d      	mov	r5, r1
   28fcc:	4616      	mov	r6, r2
   28fce:	4604      	mov	r4, r0
   28fd0:	f7ff fe52 	bl	28c78 <bsd_platform_fd_method_table_get>
   28fd4:	b130      	cbz	r0, 28fe4 <nrf_bind+0x1c>
   28fd6:	6903      	ldr	r3, [r0, #16]
   28fd8:	4632      	mov	r2, r6
   28fda:	4629      	mov	r1, r5
   28fdc:	4620      	mov	r0, r4
   28fde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   28fe2:	4718      	bx	r3
   28fe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28fe8:	bd70      	pop	{r4, r5, r6, pc}
   28fea:	bf00      	nop

00028fec <nrf_setsockopt>:
   28fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28ff0:	f8dd 8018 	ldr.w	r8, [sp, #24]
   28ff4:	460d      	mov	r5, r1
   28ff6:	4616      	mov	r6, r2
   28ff8:	461f      	mov	r7, r3
   28ffa:	4604      	mov	r4, r0
   28ffc:	f7ff fe3c 	bl	28c78 <bsd_platform_fd_method_table_get>
   29000:	b158      	cbz	r0, 2901a <nrf_setsockopt+0x2e>
   29002:	f8cd 8018 	str.w	r8, [sp, #24]
   29006:	f8d0 e020 	ldr.w	lr, [r0, #32]
   2900a:	463b      	mov	r3, r7
   2900c:	4632      	mov	r2, r6
   2900e:	4629      	mov	r1, r5
   29010:	4620      	mov	r0, r4
   29012:	46f4      	mov	ip, lr
   29014:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   29018:	4760      	bx	ip
   2901a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2901e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29022:	bf00      	nop

00029024 <nrf_getsockopt>:
   29024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29028:	f8dd 8018 	ldr.w	r8, [sp, #24]
   2902c:	460d      	mov	r5, r1
   2902e:	4616      	mov	r6, r2
   29030:	461f      	mov	r7, r3
   29032:	4604      	mov	r4, r0
   29034:	f7ff fe20 	bl	28c78 <bsd_platform_fd_method_table_get>
   29038:	b158      	cbz	r0, 29052 <nrf_getsockopt+0x2e>
   2903a:	f8cd 8018 	str.w	r8, [sp, #24]
   2903e:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
   29042:	463b      	mov	r3, r7
   29044:	4632      	mov	r2, r6
   29046:	4629      	mov	r1, r5
   29048:	4620      	mov	r0, r4
   2904a:	46f4      	mov	ip, lr
   2904c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   29050:	4760      	bx	ip
   29052:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   29056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2905a:	bf00      	nop

0002905c <nrf_getaddrinfo>:
   2905c:	f7ff be82 	b.w	28d64 <bsd_platform_getaddrinfo>

00029060 <nrf_freeaddrinfo>:
   29060:	f7ff be82 	b.w	28d68 <bsd_platform_freeaddrinfo>

00029064 <nrf_poll>:
   29064:	f7ff be82 	b.w	28d6c <bsd_platform_poll>

00029068 <nrf_fcntl>:
   29068:	f7ff beda 	b.w	28e20 <bsd_platform_fcntl>

0002906c <rpc_gnss_serialize_utc>:
   2906c:	4603      	mov	r3, r0
   2906e:	b1d8      	cbz	r0, 290a8 <rpc_gnss_serialize_utc+0x3c>
   29070:	b1d1      	cbz	r1, 290a8 <rpc_gnss_serialize_utc+0x3c>
   29072:	2000      	movs	r0, #0
   29074:	2201      	movs	r2, #1
   29076:	7048      	strb	r0, [r1, #1]
   29078:	700a      	strb	r2, [r1, #0]
   2907a:	685a      	ldr	r2, [r3, #4]
   2907c:	2010      	movs	r0, #16
   2907e:	f8c1 2006 	str.w	r2, [r1, #6]
   29082:	681a      	ldr	r2, [r3, #0]
   29084:	f8c1 2002 	str.w	r2, [r1, #2]
   29088:	f993 200a 	ldrsb.w	r2, [r3, #10]
   2908c:	730a      	strb	r2, [r1, #12]
   2908e:	f993 200d 	ldrsb.w	r2, [r3, #13]
   29092:	73ca      	strb	r2, [r1, #15]
   29094:	f993 200c 	ldrsb.w	r2, [r3, #12]
   29098:	738a      	strb	r2, [r1, #14]
   2909a:	7a1a      	ldrb	r2, [r3, #8]
   2909c:	728a      	strb	r2, [r1, #10]
   2909e:	7ada      	ldrb	r2, [r3, #11]
   290a0:	734a      	strb	r2, [r1, #13]
   290a2:	7a5b      	ldrb	r3, [r3, #9]
   290a4:	72cb      	strb	r3, [r1, #11]
   290a6:	4770      	bx	lr
   290a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   290ac:	4770      	bx	lr
   290ae:	bf00      	nop

000290b0 <rpc_gnss_serialize_ephe>:
   290b0:	4603      	mov	r3, r0
   290b2:	2800      	cmp	r0, #0
   290b4:	d04b      	beq.n	2914e <rpc_gnss_serialize_ephe+0x9e>
   290b6:	2900      	cmp	r1, #0
   290b8:	d049      	beq.n	2914e <rpc_gnss_serialize_ephe+0x9e>
   290ba:	2000      	movs	r0, #0
   290bc:	2202      	movs	r2, #2
   290be:	7048      	strb	r0, [r1, #1]
   290c0:	700a      	strb	r2, [r1, #0]
   290c2:	68da      	ldr	r2, [r3, #12]
   290c4:	2040      	movs	r0, #64	; 0x40
   290c6:	f8c1 200b 	str.w	r2, [r1, #11]
   290ca:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   290ce:	f8a1 2009 	strh.w	r2, [r1, #9]
   290d2:	f993 2006 	ldrsb.w	r2, [r3, #6]
   290d6:	720a      	strb	r2, [r1, #8]
   290d8:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
   290dc:	878a      	strh	r2, [r1, #60]	; 0x3c
   290de:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
   290e2:	86ca      	strh	r2, [r1, #54]	; 0x36
   290e4:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
   290e8:	874a      	strh	r2, [r1, #58]	; 0x3a
   290ea:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
   290ee:	868a      	strh	r2, [r1, #52]	; 0x34
   290f0:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
   290f4:	87ca      	strh	r2, [r1, #62]	; 0x3e
   290f6:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
   290fa:	870a      	strh	r2, [r1, #56]	; 0x38
   290fc:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   29100:	830a      	strh	r2, [r1, #24]
   29102:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   29104:	f8c1 2022 	str.w	r2, [r1, #34]	; 0x22
   29108:	7c9a      	ldrb	r2, [r3, #18]
   2910a:	744a      	strb	r2, [r1, #17]
   2910c:	785a      	ldrb	r2, [r3, #1]
   2910e:	70ca      	strb	r2, [r1, #3]
   29110:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   29112:	62ca      	str	r2, [r1, #44]	; 0x2c
   29114:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
   29118:	84ca      	strh	r2, [r1, #38]	; 0x26
   2911a:	885a      	ldrh	r2, [r3, #2]
   2911c:	808a      	strh	r2, [r1, #4]
   2911e:	6a1a      	ldr	r2, [r3, #32]
   29120:	f8c1 201a 	str.w	r2, [r1, #26]
   29124:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   29126:	630a      	str	r2, [r1, #48]	; 0x30
   29128:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   2912a:	f8c1 201e 	str.w	r2, [r1, #30]
   2912e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   29130:	628a      	str	r2, [r1, #40]	; 0x28
   29132:	781a      	ldrb	r2, [r3, #0]
   29134:	708a      	strb	r2, [r1, #2]
   29136:	f993 2010 	ldrsb.w	r2, [r3, #16]
   2913a:	73ca      	strb	r2, [r1, #15]
   2913c:	889a      	ldrh	r2, [r3, #4]
   2913e:	80ca      	strh	r2, [r1, #6]
   29140:	8a9a      	ldrh	r2, [r3, #20]
   29142:	824a      	strh	r2, [r1, #18]
   29144:	7c5a      	ldrb	r2, [r3, #17]
   29146:	740a      	strb	r2, [r1, #16]
   29148:	699b      	ldr	r3, [r3, #24]
   2914a:	614b      	str	r3, [r1, #20]
   2914c:	4770      	bx	lr
   2914e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   29152:	4770      	bx	lr

00029154 <rpc_gnss_serialize_alm>:
   29154:	4603      	mov	r3, r0
   29156:	b360      	cbz	r0, 291b2 <rpc_gnss_serialize_alm+0x5e>
   29158:	b359      	cbz	r1, 291b2 <rpc_gnss_serialize_alm+0x5e>
   2915a:	2000      	movs	r0, #0
   2915c:	2203      	movs	r2, #3
   2915e:	7048      	strb	r0, [r1, #1]
   29160:	700a      	strb	r2, [r1, #0]
   29162:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   29166:	2021      	movs	r0, #33	; 0x21
   29168:	f8a1 201d 	strh.w	r2, [r1, #29]
   2916c:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
   29170:	f8a1 201f 	strh.w	r2, [r1, #31]
   29174:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
   29178:	810a      	strh	r2, [r1, #8]
   2917a:	889a      	ldrh	r2, [r3, #4]
   2917c:	80ca      	strh	r2, [r1, #6]
   2917e:	78da      	ldrb	r2, [r3, #3]
   29180:	714a      	strb	r2, [r1, #5]
   29182:	699a      	ldr	r2, [r3, #24]
   29184:	f8c1 2019 	str.w	r2, [r1, #25]
   29188:	691a      	ldr	r2, [r3, #16]
   2918a:	f8c1 2011 	str.w	r2, [r1, #17]
   2918e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   29192:	814a      	strh	r2, [r1, #10]
   29194:	68da      	ldr	r2, [r3, #12]
   29196:	f8c1 200d 	str.w	r2, [r1, #13]
   2919a:	7a9a      	ldrb	r2, [r3, #10]
   2919c:	730a      	strb	r2, [r1, #12]
   2919e:	781a      	ldrb	r2, [r3, #0]
   291a0:	708a      	strb	r2, [r1, #2]
   291a2:	789a      	ldrb	r2, [r3, #2]
   291a4:	710a      	strb	r2, [r1, #4]
   291a6:	695a      	ldr	r2, [r3, #20]
   291a8:	f8c1 2015 	str.w	r2, [r1, #21]
   291ac:	785b      	ldrb	r3, [r3, #1]
   291ae:	70cb      	strb	r3, [r1, #3]
   291b0:	4770      	bx	lr
   291b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   291b6:	4770      	bx	lr

000291b8 <rpc_gnss_serialize_klob>:
   291b8:	4603      	mov	r3, r0
   291ba:	b1f0      	cbz	r0, 291fa <rpc_gnss_serialize_klob+0x42>
   291bc:	b1e9      	cbz	r1, 291fa <rpc_gnss_serialize_klob+0x42>
   291be:	2000      	movs	r0, #0
   291c0:	2204      	movs	r2, #4
   291c2:	7048      	strb	r0, [r1, #1]
   291c4:	700a      	strb	r2, [r1, #0]
   291c6:	f993 2000 	ldrsb.w	r2, [r3]
   291ca:	200a      	movs	r0, #10
   291cc:	708a      	strb	r2, [r1, #2]
   291ce:	f993 2001 	ldrsb.w	r2, [r3, #1]
   291d2:	70ca      	strb	r2, [r1, #3]
   291d4:	f993 2002 	ldrsb.w	r2, [r3, #2]
   291d8:	710a      	strb	r2, [r1, #4]
   291da:	f993 2003 	ldrsb.w	r2, [r3, #3]
   291de:	714a      	strb	r2, [r1, #5]
   291e0:	f993 2004 	ldrsb.w	r2, [r3, #4]
   291e4:	718a      	strb	r2, [r1, #6]
   291e6:	f993 2005 	ldrsb.w	r2, [r3, #5]
   291ea:	71ca      	strb	r2, [r1, #7]
   291ec:	f993 2006 	ldrsb.w	r2, [r3, #6]
   291f0:	720a      	strb	r2, [r1, #8]
   291f2:	f993 3007 	ldrsb.w	r3, [r3, #7]
   291f6:	724b      	strb	r3, [r1, #9]
   291f8:	4770      	bx	lr
   291fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   291fe:	4770      	bx	lr

00029200 <rpc_gnss_serialize_nequick>:
   29200:	4603      	mov	r3, r0
   29202:	b198      	cbz	r0, 2922c <rpc_gnss_serialize_nequick+0x2c>
   29204:	b191      	cbz	r1, 2922c <rpc_gnss_serialize_nequick+0x2c>
   29206:	2000      	movs	r0, #0
   29208:	2205      	movs	r2, #5
   2920a:	7048      	strb	r0, [r1, #1]
   2920c:	700a      	strb	r2, [r1, #0]
   2920e:	f9b3 2000 	ldrsh.w	r2, [r3]
   29212:	200a      	movs	r0, #10
   29214:	804a      	strh	r2, [r1, #2]
   29216:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
   2921a:	808a      	strh	r2, [r1, #4]
   2921c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
   29220:	80ca      	strh	r2, [r1, #6]
   29222:	799a      	ldrb	r2, [r3, #6]
   29224:	720a      	strb	r2, [r1, #8]
   29226:	79db      	ldrb	r3, [r3, #7]
   29228:	724b      	strb	r3, [r1, #9]
   2922a:	4770      	bx	lr
   2922c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   29230:	4770      	bx	lr
   29232:	bf00      	nop

00029234 <rpc_gnss_serialize_time_and_sv_tow>:
   29234:	b310      	cbz	r0, 2927c <rpc_gnss_serialize_time_and_sv_tow+0x48>
   29236:	b309      	cbz	r1, 2927c <rpc_gnss_serialize_time_and_sv_tow+0x48>
   29238:	b470      	push	{r4, r5, r6}
   2923a:	2500      	movs	r5, #0
   2923c:	2606      	movs	r6, #6
   2923e:	460c      	mov	r4, r1
   29240:	704d      	strb	r5, [r1, #1]
   29242:	700e      	strb	r6, [r1, #0]
   29244:	462b      	mov	r3, r5
   29246:	8805      	ldrh	r5, [r0, #0]
   29248:	4602      	mov	r2, r0
   2924a:	804d      	strh	r5, [r1, #2]
   2924c:	68c5      	ldr	r5, [r0, #12]
   2924e:	f8c1 500a 	str.w	r5, [r1, #10]
   29252:	8905      	ldrh	r5, [r0, #8]
   29254:	810d      	strh	r5, [r1, #8]
   29256:	6840      	ldr	r0, [r0, #4]
   29258:	6048      	str	r0, [r1, #4]
   2925a:	8a15      	ldrh	r5, [r2, #16]
   2925c:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   29260:	4408      	add	r0, r1
   29262:	81c5      	strh	r5, [r0, #14]
   29264:	7c90      	ldrb	r0, [r2, #18]
   29266:	3301      	adds	r3, #1
   29268:	2b20      	cmp	r3, #32
   2926a:	7420      	strb	r0, [r4, #16]
   2926c:	f102 0204 	add.w	r2, r2, #4
   29270:	f104 0403 	add.w	r4, r4, #3
   29274:	d1f1      	bne.n	2925a <rpc_gnss_serialize_time_and_sv_tow+0x26>
   29276:	206e      	movs	r0, #110	; 0x6e
   29278:	bc70      	pop	{r4, r5, r6}
   2927a:	4770      	bx	lr
   2927c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   29280:	4770      	bx	lr
   29282:	bf00      	nop

00029284 <rpc_gnss_serialize_location>:
   29284:	4603      	mov	r3, r0
   29286:	b1c8      	cbz	r0, 292bc <rpc_gnss_serialize_location+0x38>
   29288:	b1c1      	cbz	r1, 292bc <rpc_gnss_serialize_location+0x38>
   2928a:	2000      	movs	r0, #0
   2928c:	2207      	movs	r2, #7
   2928e:	7048      	strb	r0, [r1, #1]
   29290:	700a      	strb	r2, [r1, #0]
   29292:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   29296:	2011      	movs	r0, #17
   29298:	814a      	strh	r2, [r1, #10]
   2929a:	7b9a      	ldrb	r2, [r3, #14]
   2929c:	740a      	strb	r2, [r1, #16]
   2929e:	681a      	ldr	r2, [r3, #0]
   292a0:	f8c1 2002 	str.w	r2, [r1, #2]
   292a4:	685a      	ldr	r2, [r3, #4]
   292a6:	f8c1 2006 	str.w	r2, [r1, #6]
   292aa:	7b1a      	ldrb	r2, [r3, #12]
   292ac:	738a      	strb	r2, [r1, #14]
   292ae:	7b5a      	ldrb	r2, [r3, #13]
   292b0:	73ca      	strb	r2, [r1, #15]
   292b2:	7a9a      	ldrb	r2, [r3, #10]
   292b4:	730a      	strb	r2, [r1, #12]
   292b6:	7adb      	ldrb	r3, [r3, #11]
   292b8:	734b      	strb	r3, [r1, #13]
   292ba:	4770      	bx	lr
   292bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   292c0:	4770      	bx	lr
   292c2:	bf00      	nop

000292c4 <rpc_gnss_serialize_integrity>:
   292c4:	b148      	cbz	r0, 292da <rpc_gnss_serialize_integrity+0x16>
   292c6:	b141      	cbz	r1, 292da <rpc_gnss_serialize_integrity+0x16>
   292c8:	2200      	movs	r2, #0
   292ca:	2308      	movs	r3, #8
   292cc:	704a      	strb	r2, [r1, #1]
   292ce:	700b      	strb	r3, [r1, #0]
   292d0:	6803      	ldr	r3, [r0, #0]
   292d2:	2006      	movs	r0, #6
   292d4:	f8c1 3002 	str.w	r3, [r1, #2]
   292d8:	4770      	bx	lr
   292da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   292de:	4770      	bx	lr

000292e0 <gnss_client_event_handler>:
   292e0:	f850 1b08 	ldr.w	r1, [r0], #8
   292e4:	0c09      	lsrs	r1, r1, #16
   292e6:	f7fd b941 	b.w	2656c <rpc_gnss_event_handler>
   292ea:	bf00      	nop

000292ec <rpc_gnss_client_init>:
   292ec:	4801      	ldr	r0, [pc, #4]	; (292f4 <rpc_gnss_client_init+0x8>)
   292ee:	f7fd b871 	b.w	263d4 <rpc_client_register>
   292f2:	bf00      	nop
   292f4:	0003aba8 	.word	0x0003aba8

000292f8 <rpc_gnss_client_request_alloc>:
   292f8:	2300      	movs	r3, #0
   292fa:	b510      	push	{r4, lr}
   292fc:	b082      	sub	sp, #8
   292fe:	9301      	str	r3, [sp, #4]
   29300:	b158      	cbz	r0, 2931a <rpc_gnss_client_request_alloc+0x22>
   29302:	4604      	mov	r4, r0
   29304:	aa01      	add	r2, sp, #4
   29306:	2007      	movs	r0, #7
   29308:	f7fd f8de 	bl	264c8 <rpc_message_alloc>
   2930c:	b918      	cbnz	r0, 29316 <rpc_gnss_client_request_alloc+0x1e>
   2930e:	9b01      	ldr	r3, [sp, #4]
   29310:	b10b      	cbz	r3, 29316 <rpc_gnss_client_request_alloc+0x1e>
   29312:	3308      	adds	r3, #8
   29314:	6023      	str	r3, [r4, #0]
   29316:	b002      	add	sp, #8
   29318:	bd10      	pop	{r4, pc}
   2931a:	2007      	movs	r0, #7
   2931c:	b002      	add	sp, #8
   2931e:	bd10      	pop	{r4, pc}

00029320 <rpc_gnss_client_request_send>:
   29320:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   29324:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   29328:	d10b      	bne.n	29342 <rpc_gnss_client_request_send+0x22>
   2932a:	b160      	cbz	r0, 29346 <rpc_gnss_client_request_send+0x26>
   2932c:	4603      	mov	r3, r0
   2932e:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   29332:	2007      	movs	r0, #7
   29334:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   29338:	f843 1d08 	str.w	r1, [r3, #-8]!
   2933c:	4619      	mov	r1, r3
   2933e:	f7fd b8b3 	b.w	264a8 <rpc_message_send>
   29342:	200f      	movs	r0, #15
   29344:	4770      	bx	lr
   29346:	2007      	movs	r0, #7
   29348:	4770      	bx	lr
   2934a:	bf00      	nop

0002934c <rpc_gnss_client_message_free>:
   2934c:	b120      	cbz	r0, 29358 <rpc_gnss_client_message_free+0xc>
   2934e:	f1a0 0108 	sub.w	r1, r0, #8
   29352:	2007      	movs	r0, #7
   29354:	f7fd b8e4 	b.w	26520 <rpc_message_free>
   29358:	2007      	movs	r0, #7
   2935a:	4770      	bx	lr

0002935c <rpc_gnss_client_data_free>:
   2935c:	b118      	cbz	r0, 29366 <rpc_gnss_client_data_free+0xa>
   2935e:	4601      	mov	r1, r0
   29360:	2007      	movs	r0, #7
   29362:	f7fd b8e9 	b.w	26538 <rpc_message_data_free>
   29366:	2007      	movs	r0, #7
   29368:	4770      	bx	lr
   2936a:	bf00      	nop

0002936c <datagram_handler_init>:
   2936c:	b510      	push	{r4, lr}
   2936e:	4604      	mov	r4, r0
   29370:	200c      	movs	r0, #12
   29372:	f000 fdd7 	bl	29f24 <nrf_malloc>
   29376:	60e0      	str	r0, [r4, #12]
   29378:	b118      	cbz	r0, 29382 <datagram_handler_init+0x16>
   2937a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2937e:	f7ff bd5f 	b.w	28e40 <linked_list_init>
   29382:	2004      	movs	r0, #4
   29384:	bd10      	pop	{r4, pc}
   29386:	bf00      	nop

00029388 <datagram_handler_put>:
   29388:	b570      	push	{r4, r5, r6, lr}
   2938a:	4606      	mov	r6, r0
   2938c:	2014      	movs	r0, #20
   2938e:	460d      	mov	r5, r1
   29390:	f000 fdc8 	bl	29f24 <nrf_malloc>
   29394:	b178      	cbz	r0, 293b6 <datagram_handler_put+0x2e>
   29396:	682b      	ldr	r3, [r5, #0]
   29398:	4604      	mov	r4, r0
   2939a:	6043      	str	r3, [r0, #4]
   2939c:	686b      	ldr	r3, [r5, #4]
   2939e:	4601      	mov	r1, r0
   293a0:	6083      	str	r3, [r0, #8]
   293a2:	68eb      	ldr	r3, [r5, #12]
   293a4:	60c3      	str	r3, [r0, #12]
   293a6:	68ab      	ldr	r3, [r5, #8]
   293a8:	6103      	str	r3, [r0, #16]
   293aa:	68f0      	ldr	r0, [r6, #12]
   293ac:	f7ff fd52 	bl	28e54 <linked_list_push>
   293b0:	b920      	cbnz	r0, 293bc <datagram_handler_put+0x34>
   293b2:	6868      	ldr	r0, [r5, #4]
   293b4:	bd70      	pop	{r4, r5, r6, pc}
   293b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   293ba:	bd70      	pop	{r4, r5, r6, pc}
   293bc:	4620      	mov	r0, r4
   293be:	f000 fdbb 	bl	29f38 <nrf_free>
   293c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   293c6:	bd70      	pop	{r4, r5, r6, pc}

000293c8 <datagram_handler_get>:
   293c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   293cc:	4607      	mov	r7, r0
   293ce:	b084      	sub	sp, #16
   293d0:	68c0      	ldr	r0, [r0, #12]
   293d2:	460c      	mov	r4, r1
   293d4:	4616      	mov	r6, r2
   293d6:	f7ff fd5d 	bl	28e94 <linked_list_peek>
   293da:	2800      	cmp	r0, #0
   293dc:	d03b      	beq.n	29456 <datagram_handler_get+0x8e>
   293de:	6882      	ldr	r2, [r0, #8]
   293e0:	4605      	mov	r5, r0
   293e2:	e9d4 0300 	ldrd	r0, r3, [r4]
   293e6:	429a      	cmp	r2, r3
   293e8:	bf28      	it	cs
   293ea:	461a      	movcs	r2, r3
   293ec:	6062      	str	r2, [r4, #4]
   293ee:	b110      	cbz	r0, 293f6 <datagram_handler_get+0x2e>
   293f0:	6869      	ldr	r1, [r5, #4]
   293f2:	f00f fde6 	bl	38fc2 <memcpy>
   293f6:	68a0      	ldr	r0, [r4, #8]
   293f8:	b118      	cbz	r0, 29402 <datagram_handler_get+0x3a>
   293fa:	692b      	ldr	r3, [r5, #16]
   293fc:	b10b      	cbz	r3, 29402 <datagram_handler_get+0x3a>
   293fe:	68ea      	ldr	r2, [r5, #12]
   29400:	bb02      	cbnz	r2, 29444 <datagram_handler_get+0x7c>
   29402:	2300      	movs	r3, #0
   29404:	60e3      	str	r3, [r4, #12]
   29406:	0732      	lsls	r2, r6, #28
   29408:	d506      	bpl.n	29418 <datagram_handler_get+0x50>
   2940a:	06b3      	lsls	r3, r6, #26
   2940c:	bf4c      	ite	mi
   2940e:	68a8      	ldrmi	r0, [r5, #8]
   29410:	6860      	ldrpl	r0, [r4, #4]
   29412:	b004      	add	sp, #16
   29414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29418:	68f8      	ldr	r0, [r7, #12]
   2941a:	f7ff fd31 	bl	28e80 <linked_list_pop>
   2941e:	4680      	mov	r8, r0
   29420:	2800      	cmp	r0, #0
   29422:	d0f2      	beq.n	2940a <datagram_handler_get+0x42>
   29424:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   29428:	6902      	ldr	r2, [r0, #16]
   2942a:	9300      	str	r3, [sp, #0]
   2942c:	68c3      	ldr	r3, [r0, #12]
   2942e:	e9cd 1201 	strd	r1, r2, [sp, #4]
   29432:	9303      	str	r3, [sp, #12]
   29434:	4668      	mov	r0, sp
   29436:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
   2943a:	4798      	blx	r3
   2943c:	4640      	mov	r0, r8
   2943e:	f000 fd7b 	bl	29f38 <nrf_free>
   29442:	e7e2      	b.n	2940a <datagram_handler_get+0x42>
   29444:	68e3      	ldr	r3, [r4, #12]
   29446:	429a      	cmp	r2, r3
   29448:	bf28      	it	cs
   2944a:	461a      	movcs	r2, r3
   2944c:	60e2      	str	r2, [r4, #12]
   2944e:	6929      	ldr	r1, [r5, #16]
   29450:	f00f fdb7 	bl	38fc2 <memcpy>
   29454:	e7d7      	b.n	29406 <datagram_handler_get+0x3e>
   29456:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2945a:	e7da      	b.n	29412 <datagram_handler_get+0x4a>

0002945c <datagram_handler_available>:
   2945c:	b508      	push	{r3, lr}
   2945e:	68c0      	ldr	r0, [r0, #12]
   29460:	f7ff fd18 	bl	28e94 <linked_list_peek>
   29464:	b108      	cbz	r0, 2946a <datagram_handler_available+0xe>
   29466:	6880      	ldr	r0, [r0, #8]
   29468:	bd08      	pop	{r3, pc}
   2946a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2946e:	bd08      	pop	{r3, pc}

00029470 <datagram_handler_flush>:
   29470:	b530      	push	{r4, r5, lr}
   29472:	4605      	mov	r5, r0
   29474:	68c0      	ldr	r0, [r0, #12]
   29476:	b085      	sub	sp, #20
   29478:	b9a8      	cbnz	r0, 294a6 <datagram_handler_flush+0x36>
   2947a:	e01a      	b.n	294b2 <datagram_handler_flush+0x42>
   2947c:	68e8      	ldr	r0, [r5, #12]
   2947e:	f7ff fcff 	bl	28e80 <linked_list_pop>
   29482:	4604      	mov	r4, r0
   29484:	b170      	cbz	r0, 294a4 <datagram_handler_flush+0x34>
   29486:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   2948a:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   2948e:	e9cd 0100 	strd	r0, r1, [sp]
   29492:	e9cd 2302 	strd	r2, r3, [sp, #8]
   29496:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   2949a:	4668      	mov	r0, sp
   2949c:	4798      	blx	r3
   2949e:	4620      	mov	r0, r4
   294a0:	f000 fd4a 	bl	29f38 <nrf_free>
   294a4:	68e8      	ldr	r0, [r5, #12]
   294a6:	f7ff fcfb 	bl	28ea0 <linked_list_size_get>
   294aa:	2800      	cmp	r0, #0
   294ac:	d1e6      	bne.n	2947c <datagram_handler_flush+0xc>
   294ae:	b005      	add	sp, #20
   294b0:	bd30      	pop	{r4, r5, pc}
   294b2:	2008      	movs	r0, #8
   294b4:	b005      	add	sp, #20
   294b6:	bd30      	pop	{r4, r5, pc}

000294b8 <datagram_handler_free>:
   294b8:	b530      	push	{r4, r5, lr}
   294ba:	4605      	mov	r5, r0
   294bc:	68c0      	ldr	r0, [r0, #12]
   294be:	b085      	sub	sp, #20
   294c0:	b9a0      	cbnz	r0, 294ec <datagram_handler_free+0x34>
   294c2:	e01c      	b.n	294fe <datagram_handler_free+0x46>
   294c4:	f7ff fcdc 	bl	28e80 <linked_list_pop>
   294c8:	4604      	mov	r4, r0
   294ca:	b170      	cbz	r0, 294ea <datagram_handler_free+0x32>
   294cc:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   294d0:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   294d4:	e9cd 0100 	strd	r0, r1, [sp]
   294d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
   294dc:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   294e0:	4668      	mov	r0, sp
   294e2:	4798      	blx	r3
   294e4:	4620      	mov	r0, r4
   294e6:	f000 fd27 	bl	29f38 <nrf_free>
   294ea:	68e8      	ldr	r0, [r5, #12]
   294ec:	f7ff fcd8 	bl	28ea0 <linked_list_size_get>
   294f0:	4604      	mov	r4, r0
   294f2:	68e8      	ldr	r0, [r5, #12]
   294f4:	2c00      	cmp	r4, #0
   294f6:	d1e5      	bne.n	294c4 <datagram_handler_free+0xc>
   294f8:	f000 fd1e 	bl	29f38 <nrf_free>
   294fc:	60ec      	str	r4, [r5, #12]
   294fe:	b005      	add	sp, #20
   29500:	bd30      	pop	{r4, r5, pc}
   29502:	bf00      	nop

00029504 <null_handler_init>:
   29504:	2000      	movs	r0, #0
   29506:	4770      	bx	lr

00029508 <null_handler_put>:
   29508:	b510      	push	{r4, lr}
   2950a:	460c      	mov	r4, r1
   2950c:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   29510:	4620      	mov	r0, r4
   29512:	4798      	blx	r3
   29514:	6860      	ldr	r0, [r4, #4]
   29516:	bd10      	pop	{r4, pc}

00029518 <null_handler_get>:
   29518:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2951c:	4770      	bx	lr
   2951e:	bf00      	nop

00029520 <null_handler_available>:
   29520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   29524:	4770      	bx	lr
   29526:	bf00      	nop

00029528 <null_handler_flush>:
   29528:	2000      	movs	r0, #0
   2952a:	4770      	bx	lr

0002952c <null_handler_free>:
   2952c:	4770      	bx	lr
   2952e:	bf00      	nop

00029530 <packet_handler_create>:
   29530:	2801      	cmp	r0, #1
   29532:	b538      	push	{r3, r4, r5, lr}
   29534:	460d      	mov	r5, r1
   29536:	4614      	mov	r4, r2
   29538:	d00d      	beq.n	29556 <packet_handler_create+0x26>
   2953a:	db11      	blt.n	29560 <packet_handler_create+0x30>
   2953c:	2803      	cmp	r0, #3
   2953e:	dc0f      	bgt.n	29560 <packet_handler_create+0x30>
   29540:	2010      	movs	r0, #16
   29542:	f000 fcef 	bl	29f24 <nrf_malloc>
   29546:	2218      	movs	r2, #24
   29548:	b120      	cbz	r0, 29554 <packet_handler_create+0x24>
   2954a:	4b08      	ldr	r3, [pc, #32]	; (2956c <packet_handler_create+0x3c>)
   2954c:	6045      	str	r5, [r0, #4]
   2954e:	4413      	add	r3, r2
   29550:	6084      	str	r4, [r0, #8]
   29552:	6003      	str	r3, [r0, #0]
   29554:	bd38      	pop	{r3, r4, r5, pc}
   29556:	2014      	movs	r0, #20
   29558:	f000 fce4 	bl	29f24 <nrf_malloc>
   2955c:	2230      	movs	r2, #48	; 0x30
   2955e:	e7f3      	b.n	29548 <packet_handler_create+0x18>
   29560:	200c      	movs	r0, #12
   29562:	f000 fcdf 	bl	29f24 <nrf_malloc>
   29566:	2200      	movs	r2, #0
   29568:	e7ee      	b.n	29548 <packet_handler_create+0x18>
   2956a:	bf00      	nop
   2956c:	0003abb8 	.word	0x0003abb8

00029570 <packet_handler_delete>:
   29570:	b510      	push	{r4, lr}
   29572:	4604      	mov	r4, r0
   29574:	6803      	ldr	r3, [r0, #0]
   29576:	691b      	ldr	r3, [r3, #16]
   29578:	4798      	blx	r3
   2957a:	6823      	ldr	r3, [r4, #0]
   2957c:	4620      	mov	r0, r4
   2957e:	695b      	ldr	r3, [r3, #20]
   29580:	4798      	blx	r3
   29582:	4620      	mov	r0, r4
   29584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   29588:	f000 bcd6 	b.w	29f38 <nrf_free>

0002958c <stream_handler_init>:
   2958c:	b510      	push	{r4, lr}
   2958e:	4604      	mov	r4, r0
   29590:	200c      	movs	r0, #12
   29592:	f000 fcc7 	bl	29f24 <nrf_malloc>
   29596:	60e0      	str	r0, [r4, #12]
   29598:	b128      	cbz	r0, 295a6 <stream_handler_init+0x1a>
   2959a:	2300      	movs	r3, #0
   2959c:	6123      	str	r3, [r4, #16]
   2959e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   295a2:	f7ff bc4d 	b.w	28e40 <linked_list_init>
   295a6:	2004      	movs	r0, #4
   295a8:	bd10      	pop	{r4, pc}
   295aa:	bf00      	nop

000295ac <stream_handler_put>:
   295ac:	b570      	push	{r4, r5, r6, lr}
   295ae:	4606      	mov	r6, r0
   295b0:	2014      	movs	r0, #20
   295b2:	460d      	mov	r5, r1
   295b4:	f000 fcb6 	bl	29f24 <nrf_malloc>
   295b8:	b178      	cbz	r0, 295da <stream_handler_put+0x2e>
   295ba:	682b      	ldr	r3, [r5, #0]
   295bc:	4604      	mov	r4, r0
   295be:	6043      	str	r3, [r0, #4]
   295c0:	686b      	ldr	r3, [r5, #4]
   295c2:	4601      	mov	r1, r0
   295c4:	6083      	str	r3, [r0, #8]
   295c6:	68eb      	ldr	r3, [r5, #12]
   295c8:	60c3      	str	r3, [r0, #12]
   295ca:	68ab      	ldr	r3, [r5, #8]
   295cc:	6103      	str	r3, [r0, #16]
   295ce:	68f0      	ldr	r0, [r6, #12]
   295d0:	f7ff fc40 	bl	28e54 <linked_list_push>
   295d4:	b920      	cbnz	r0, 295e0 <stream_handler_put+0x34>
   295d6:	6868      	ldr	r0, [r5, #4]
   295d8:	bd70      	pop	{r4, r5, r6, pc}
   295da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   295de:	bd70      	pop	{r4, r5, r6, pc}
   295e0:	4620      	mov	r0, r4
   295e2:	f000 fca9 	bl	29f38 <nrf_free>
   295e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   295ea:	bd70      	pop	{r4, r5, r6, pc}

000295ec <stream_handler_get>:
   295ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   295f0:	4682      	mov	sl, r0
   295f2:	b089      	sub	sp, #36	; 0x24
   295f4:	68c0      	ldr	r0, [r0, #12]
   295f6:	4689      	mov	r9, r1
   295f8:	4693      	mov	fp, r2
   295fa:	f7ff fc4b 	bl	28e94 <linked_list_peek>
   295fe:	2800      	cmp	r0, #0
   29600:	d071      	beq.n	296e6 <stream_handler_get+0xfa>
   29602:	4605      	mov	r5, r0
   29604:	f8d9 0008 	ldr.w	r0, [r9, #8]
   29608:	b120      	cbz	r0, 29614 <stream_handler_get+0x28>
   2960a:	692b      	ldr	r3, [r5, #16]
   2960c:	b113      	cbz	r3, 29614 <stream_handler_get+0x28>
   2960e:	68ea      	ldr	r2, [r5, #12]
   29610:	2a00      	cmp	r2, #0
   29612:	d15d      	bne.n	296d0 <stream_handler_get+0xe4>
   29614:	2300      	movs	r3, #0
   29616:	f8c9 300c 	str.w	r3, [r9, #12]
   2961a:	f8d9 2000 	ldr.w	r2, [r9]
   2961e:	f8d9 8004 	ldr.w	r8, [r9, #4]
   29622:	f8da 1010 	ldr.w	r1, [sl, #16]
   29626:	9203      	str	r2, [sp, #12]
   29628:	f1b8 0f00 	cmp.w	r8, #0
   2962c:	d030      	beq.n	29690 <stream_handler_get+0xa4>
   2962e:	2400      	movs	r4, #0
   29630:	f00b 0320 	and.w	r3, fp, #32
   29634:	9301      	str	r3, [sp, #4]
   29636:	f00b 0b08 	and.w	fp, fp, #8
   2963a:	68ae      	ldr	r6, [r5, #8]
   2963c:	eba8 0304 	sub.w	r3, r8, r4
   29640:	1a76      	subs	r6, r6, r1
   29642:	429e      	cmp	r6, r3
   29644:	4637      	mov	r7, r6
   29646:	bf28      	it	cs
   29648:	461f      	movcs	r7, r3
   2964a:	b10a      	cbz	r2, 29650 <stream_handler_get+0x64>
   2964c:	9a01      	ldr	r2, [sp, #4]
   2964e:	b1aa      	cbz	r2, 2967c <stream_handler_get+0x90>
   29650:	f1bb 0f00 	cmp.w	fp, #0
   29654:	d106      	bne.n	29664 <stream_handler_get+0x78>
   29656:	429e      	cmp	r6, r3
   29658:	d921      	bls.n	2969e <stream_handler_get+0xb2>
   2965a:	f8da 3010 	ldr.w	r3, [sl, #16]
   2965e:	443b      	add	r3, r7
   29660:	f8ca 3010 	str.w	r3, [sl, #16]
   29664:	4628      	mov	r0, r5
   29666:	f7ff fc1d 	bl	28ea4 <linked_list_get_next>
   2966a:	443c      	add	r4, r7
   2966c:	4605      	mov	r5, r0
   2966e:	b180      	cbz	r0, 29692 <stream_handler_get+0xa6>
   29670:	45a0      	cmp	r8, r4
   29672:	d90e      	bls.n	29692 <stream_handler_get+0xa6>
   29674:	f8d9 2000 	ldr.w	r2, [r9]
   29678:	2100      	movs	r1, #0
   2967a:	e7de      	b.n	2963a <stream_handler_get+0x4e>
   2967c:	6868      	ldr	r0, [r5, #4]
   2967e:	9302      	str	r3, [sp, #8]
   29680:	9b03      	ldr	r3, [sp, #12]
   29682:	4401      	add	r1, r0
   29684:	463a      	mov	r2, r7
   29686:	1918      	adds	r0, r3, r4
   29688:	f00f fc9b 	bl	38fc2 <memcpy>
   2968c:	9b02      	ldr	r3, [sp, #8]
   2968e:	e7df      	b.n	29650 <stream_handler_get+0x64>
   29690:	4644      	mov	r4, r8
   29692:	4620      	mov	r0, r4
   29694:	f8c9 4004 	str.w	r4, [r9, #4]
   29698:	b009      	add	sp, #36	; 0x24
   2969a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2969e:	f8da 000c 	ldr.w	r0, [sl, #12]
   296a2:	f7ff fbed 	bl	28e80 <linked_list_pop>
   296a6:	4606      	mov	r6, r0
   296a8:	b170      	cbz	r0, 296c8 <stream_handler_get+0xdc>
   296aa:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   296ae:	e9d0 0103 	ldrd	r0, r1, [r0, #12]
   296b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
   296b6:	e9cd 1006 	strd	r1, r0, [sp, #24]
   296ba:	e9da 3101 	ldrd	r3, r1, [sl, #4]
   296be:	a804      	add	r0, sp, #16
   296c0:	4798      	blx	r3
   296c2:	4630      	mov	r0, r6
   296c4:	f000 fc38 	bl	29f38 <nrf_free>
   296c8:	2300      	movs	r3, #0
   296ca:	f8ca 3010 	str.w	r3, [sl, #16]
   296ce:	e7c9      	b.n	29664 <stream_handler_get+0x78>
   296d0:	f8d9 300c 	ldr.w	r3, [r9, #12]
   296d4:	429a      	cmp	r2, r3
   296d6:	bf28      	it	cs
   296d8:	461a      	movcs	r2, r3
   296da:	f8c9 200c 	str.w	r2, [r9, #12]
   296de:	6929      	ldr	r1, [r5, #16]
   296e0:	f00f fc6f 	bl	38fc2 <memcpy>
   296e4:	e799      	b.n	2961a <stream_handler_get+0x2e>
   296e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   296ea:	e7d5      	b.n	29698 <stream_handler_get+0xac>

000296ec <stream_handler_available>:
   296ec:	b510      	push	{r4, lr}
   296ee:	4604      	mov	r4, r0
   296f0:	68c0      	ldr	r0, [r0, #12]
   296f2:	f7ff fbcf 	bl	28e94 <linked_list_peek>
   296f6:	b150      	cbz	r0, 2970e <stream_handler_available+0x22>
   296f8:	6924      	ldr	r4, [r4, #16]
   296fa:	4264      	negs	r4, r4
   296fc:	6883      	ldr	r3, [r0, #8]
   296fe:	441c      	add	r4, r3
   29700:	f7ff fbd0 	bl	28ea4 <linked_list_get_next>
   29704:	2800      	cmp	r0, #0
   29706:	d1f9      	bne.n	296fc <stream_handler_available+0x10>
   29708:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   2970c:	bd10      	pop	{r4, pc}
   2970e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   29712:	bd10      	pop	{r4, pc}

00029714 <stream_handler_flush>:
   29714:	b530      	push	{r4, r5, lr}
   29716:	4605      	mov	r5, r0
   29718:	68c0      	ldr	r0, [r0, #12]
   2971a:	b085      	sub	sp, #20
   2971c:	b9a8      	cbnz	r0, 2974a <stream_handler_flush+0x36>
   2971e:	e01a      	b.n	29756 <stream_handler_flush+0x42>
   29720:	68e8      	ldr	r0, [r5, #12]
   29722:	f7ff fbad 	bl	28e80 <linked_list_pop>
   29726:	4604      	mov	r4, r0
   29728:	b170      	cbz	r0, 29748 <stream_handler_flush+0x34>
   2972a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   2972e:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   29732:	e9cd 0100 	strd	r0, r1, [sp]
   29736:	e9cd 2302 	strd	r2, r3, [sp, #8]
   2973a:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   2973e:	4668      	mov	r0, sp
   29740:	4798      	blx	r3
   29742:	4620      	mov	r0, r4
   29744:	f000 fbf8 	bl	29f38 <nrf_free>
   29748:	68e8      	ldr	r0, [r5, #12]
   2974a:	f7ff fba9 	bl	28ea0 <linked_list_size_get>
   2974e:	2800      	cmp	r0, #0
   29750:	d1e6      	bne.n	29720 <stream_handler_flush+0xc>
   29752:	b005      	add	sp, #20
   29754:	bd30      	pop	{r4, r5, pc}
   29756:	2008      	movs	r0, #8
   29758:	b005      	add	sp, #20
   2975a:	bd30      	pop	{r4, r5, pc}

0002975c <stream_handler_free>:
   2975c:	b530      	push	{r4, r5, lr}
   2975e:	4605      	mov	r5, r0
   29760:	68c0      	ldr	r0, [r0, #12]
   29762:	b085      	sub	sp, #20
   29764:	b9a0      	cbnz	r0, 29790 <stream_handler_free+0x34>
   29766:	e01c      	b.n	297a2 <stream_handler_free+0x46>
   29768:	f7ff fb8a 	bl	28e80 <linked_list_pop>
   2976c:	4604      	mov	r4, r0
   2976e:	b170      	cbz	r0, 2978e <stream_handler_free+0x32>
   29770:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   29774:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   29778:	e9cd 0100 	strd	r0, r1, [sp]
   2977c:	e9cd 2302 	strd	r2, r3, [sp, #8]
   29780:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   29784:	4668      	mov	r0, sp
   29786:	4798      	blx	r3
   29788:	4620      	mov	r0, r4
   2978a:	f000 fbd5 	bl	29f38 <nrf_free>
   2978e:	68e8      	ldr	r0, [r5, #12]
   29790:	f7ff fb86 	bl	28ea0 <linked_list_size_get>
   29794:	4604      	mov	r4, r0
   29796:	68e8      	ldr	r0, [r5, #12]
   29798:	2c00      	cmp	r4, #0
   2979a:	d1e5      	bne.n	29768 <stream_handler_free+0xc>
   2979c:	f000 fbcc 	bl	29f38 <nrf_free>
   297a0:	60ec      	str	r4, [r5, #12]
   297a2:	b005      	add	sp, #20
   297a4:	bd30      	pop	{r4, r5, pc}
   297a6:	bf00      	nop

000297a8 <mem_free>:
   297a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   297ac:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 2987c <mem_free+0xd4>
   297b0:	b083      	sub	sp, #12
   297b2:	9000      	str	r0, [sp, #0]
   297b4:	f10c 0b3c 	add.w	fp, ip, #60	; 0x3c
   297b8:	f8dc 3008 	ldr.w	r3, [ip, #8]
   297bc:	b12b      	cbz	r3, 297ca <mem_free+0x22>
   297be:	f8dc 2000 	ldr.w	r2, [ip]
   297c2:	9c00      	ldr	r4, [sp, #0]
   297c4:	7810      	ldrb	r0, [r2, #0]
   297c6:	42a0      	cmp	r0, r4
   297c8:	d006      	beq.n	297d8 <mem_free+0x30>
   297ca:	f10c 0c0c 	add.w	ip, ip, #12
   297ce:	45e3      	cmp	fp, ip
   297d0:	d1f2      	bne.n	297b8 <mem_free+0x10>
   297d2:	b003      	add	sp, #12
   297d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   297d8:	f8dc a004 	ldr.w	sl, [ip, #4]
   297dc:	eb03 080a 	add.w	r8, r3, sl
   297e0:	45c2      	cmp	sl, r8
   297e2:	d2f2      	bcs.n	297ca <mem_free+0x22>
   297e4:	6853      	ldr	r3, [r2, #4]
   297e6:	f8cd c004 	str.w	ip, [sp, #4]
   297ea:	46d6      	mov	lr, sl
   297ec:	469c      	mov	ip, r3
   297ee:	f8d2 9010 	ldr.w	r9, [r2, #16]
   297f2:	8997      	ldrh	r7, [r2, #12]
   297f4:	ebae 000a 	sub.w	r0, lr, sl
   297f8:	b3df      	cbz	r7, 29872 <mem_free+0xca>
   297fa:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   297fe:	4290      	cmp	r0, r2
   29800:	d31c      	bcc.n	2983c <mem_free+0x94>
   29802:	4665      	mov	r5, ip
   29804:	2400      	movs	r4, #0
   29806:	f109 0304 	add.w	r3, r9, #4
   2980a:	e003      	b.n	29814 <mem_free+0x6c>
   2980c:	885a      	ldrh	r2, [r3, #2]
   2980e:	3304      	adds	r3, #4
   29810:	4282      	cmp	r2, r0
   29812:	d815      	bhi.n	29840 <mem_free+0x98>
   29814:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   29818:	3401      	adds	r4, #1
   2981a:	42a7      	cmp	r7, r4
   2981c:	fb02 5506 	mla	r5, r2, r6, r5
   29820:	eba0 0002 	sub.w	r0, r0, r2
   29824:	461e      	mov	r6, r3
   29826:	d1f1      	bne.n	2980c <mem_free+0x64>
   29828:	2000      	movs	r0, #0
   2982a:	4281      	cmp	r1, r0
   2982c:	d00d      	beq.n	2984a <mem_free+0xa2>
   2982e:	f10e 0e01 	add.w	lr, lr, #1
   29832:	45f0      	cmp	r8, lr
   29834:	d1de      	bne.n	297f4 <mem_free+0x4c>
   29836:	f8dd c004 	ldr.w	ip, [sp, #4]
   2983a:	e7c6      	b.n	297ca <mem_free+0x22>
   2983c:	4665      	mov	r5, ip
   2983e:	464e      	mov	r6, r9
   29840:	8833      	ldrh	r3, [r6, #0]
   29842:	fb00 5003 	mla	r0, r0, r3, r5
   29846:	4281      	cmp	r1, r0
   29848:	d1f1      	bne.n	2982e <mem_free+0x86>
   2984a:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   2984e:	f8dd c004 	ldr.w	ip, [sp, #4]
   29852:	d0ba      	beq.n	297ca <mem_free+0x22>
   29854:	2301      	movs	r3, #1
   29856:	4a08      	ldr	r2, [pc, #32]	; (29878 <mem_free+0xd0>)
   29858:	ea4f 115e 	mov.w	r1, lr, lsr #5
   2985c:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   29860:	f00e 0e1f 	and.w	lr, lr, #31
   29864:	fa03 fe0e 	lsl.w	lr, r3, lr
   29868:	ea4e 0000 	orr.w	r0, lr, r0
   2986c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   29870:	e7af      	b.n	297d2 <mem_free+0x2a>
   29872:	4638      	mov	r0, r7
   29874:	e7d9      	b.n	2982a <mem_free+0x82>
   29876:	bf00      	nop
   29878:	20022904 	.word	0x20022904
   2987c:	20022948 	.word	0x20022948

00029880 <mem_alloc.constprop.5>:
   29880:	2800      	cmp	r0, #0
   29882:	d050      	beq.n	29926 <mem_alloc.constprop.5+0xa6>
   29884:	4b6d      	ldr	r3, [pc, #436]	; (29a3c <mem_alloc.constprop.5+0x1bc>)
   29886:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   2988a:	4290      	cmp	r0, r2
   2988c:	d84b      	bhi.n	29926 <mem_alloc.constprop.5+0xa6>
   2988e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29892:	f8d3 b08c 	ldr.w	fp, [r3, #140]	; 0x8c
   29896:	b083      	sub	sp, #12
   29898:	f1bb 0f00 	cmp.w	fp, #0
   2989c:	d054      	beq.n	29948 <mem_alloc.constprop.5+0xc8>
   2989e:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
   298a2:	4691      	mov	r9, r2
   298a4:	2600      	movs	r6, #0
   298a6:	f04f 0812 	mov.w	r8, #18
   298aa:	4f65      	ldr	r7, [pc, #404]	; (29a40 <mem_alloc.constprop.5+0x1c0>)
   298ac:	9201      	str	r2, [sp, #4]
   298ae:	f10b 0e11 	add.w	lr, fp, #17
   298b2:	eb06 0209 	add.w	r2, r6, r9
   298b6:	f853 4038 	ldr.w	r4, [r3, r8, lsl #3]
   298ba:	3201      	adds	r2, #1
   298bc:	0852      	lsrs	r2, r2, #1
   298be:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
   298c2:	f102 0112 	add.w	r1, r2, #18
   298c6:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]
   298ca:	f857 a02c 	ldr.w	sl, [r7, ip, lsl #2]
   298ce:	f853 403e 	ldr.w	r4, [r3, lr, lsl #3]
   298d2:	eb03 0cc8 	add.w	ip, r3, r8, lsl #3
   298d6:	f8dc c004 	ldr.w	ip, [ip, #4]
   298da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   298de:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   298e2:	f8da a010 	ldr.w	sl, [sl, #16]
   298e6:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
   298ea:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   298ee:	f83a a02c 	ldrh.w	sl, [sl, ip, lsl #2]
   298f2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   298f6:	eb03 0cce 	add.w	ip, r3, lr, lsl #3
   298fa:	6849      	ldr	r1, [r1, #4]
   298fc:	692d      	ldr	r5, [r5, #16]
   298fe:	6924      	ldr	r4, [r4, #16]
   29900:	f8dc c004 	ldr.w	ip, [ip, #4]
   29904:	4550      	cmp	r0, sl
   29906:	f835 5021 	ldrh.w	r5, [r5, r1, lsl #2]
   2990a:	f834 102c 	ldrh.w	r1, [r4, ip, lsl #2]
   2990e:	d915      	bls.n	2993c <mem_alloc.constprop.5+0xbc>
   29910:	4288      	cmp	r0, r1
   29912:	d211      	bcs.n	29938 <mem_alloc.constprop.5+0xb8>
   29914:	42a8      	cmp	r0, r5
   29916:	d908      	bls.n	2992a <mem_alloc.constprop.5+0xaa>
   29918:	1c56      	adds	r6, r2, #1
   2991a:	45b1      	cmp	r9, r6
   2991c:	f0c0 8087 	bcc.w	29a2e <mem_alloc.constprop.5+0x1ae>
   29920:	f102 0813 	add.w	r8, r2, #19
   29924:	e7c5      	b.n	298b2 <mem_alloc.constprop.5+0x32>
   29926:	2000      	movs	r0, #0
   29928:	4770      	bx	lr
   2992a:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   2992e:	454e      	cmp	r6, r9
   29930:	d87d      	bhi.n	29a2e <mem_alloc.constprop.5+0x1ae>
   29932:	f102 0e11 	add.w	lr, r2, #17
   29936:	e7bc      	b.n	298b2 <mem_alloc.constprop.5+0x32>
   29938:	f109 0601 	add.w	r6, r9, #1
   2993c:	45b3      	cmp	fp, r6
   2993e:	d007      	beq.n	29950 <mem_alloc.constprop.5+0xd0>
   29940:	2e10      	cmp	r6, #16
   29942:	d001      	beq.n	29948 <mem_alloc.constprop.5+0xc8>
   29944:	45b3      	cmp	fp, r6
   29946:	d808      	bhi.n	2995a <mem_alloc.constprop.5+0xda>
   29948:	2000      	movs	r0, #0
   2994a:	b003      	add	sp, #12
   2994c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29950:	9a01      	ldr	r2, [sp, #4]
   29952:	2a10      	cmp	r2, #16
   29954:	bf18      	it	ne
   29956:	4616      	movne	r6, r2
   29958:	d0f6      	beq.n	29948 <mem_alloc.constprop.5+0xc8>
   2995a:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 29a44 <mem_alloc.constprop.5+0x1c4>
   2995e:	eb03 08c6 	add.w	r8, r3, r6, lsl #3
   29962:	e9d8 2424 	ldrd	r2, r4, [r8, #144]	; 0x90
   29966:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   2996a:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
   2996e:	eb07 0282 	add.w	r2, r7, r2, lsl #2
   29972:	f8d2 e004 	ldr.w	lr, [r2, #4]
   29976:	691d      	ldr	r5, [r3, #16]
   29978:	2c00      	cmp	r4, #0
   2997a:	d056      	beq.n	29a2a <mem_alloc.constprop.5+0x1aa>
   2997c:	462a      	mov	r2, r5
   2997e:	4670      	mov	r0, lr
   29980:	00a4      	lsls	r4, r4, #2
   29982:	eb05 0904 	add.w	r9, r5, r4
   29986:	8851      	ldrh	r1, [r2, #2]
   29988:	3204      	adds	r2, #4
   2998a:	4591      	cmp	r9, r2
   2998c:	4408      	add	r0, r1
   2998e:	d1fa      	bne.n	29986 <mem_alloc.constprop.5+0x106>
   29990:	1929      	adds	r1, r5, r4
   29992:	f8b1 a002 	ldrh.w	sl, [r1, #2]
   29996:	4482      	add	sl, r0
   29998:	4582      	cmp	sl, r0
   2999a:	d918      	bls.n	299ce <mem_alloc.constprop.5+0x14e>
   2999c:	0941      	lsrs	r1, r0, #5
   2999e:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   299a2:	f000 041f 	and.w	r4, r0, #31
   299a6:	fa22 f904 	lsr.w	r9, r2, r4
   299aa:	f019 0f01 	tst.w	r9, #1
   299ae:	d007      	beq.n	299c0 <mem_alloc.constprop.5+0x140>
   299b0:	e013      	b.n	299da <mem_alloc.constprop.5+0x15a>
   299b2:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   299b6:	fa22 f904 	lsr.w	r9, r2, r4
   299ba:	f019 0f01 	tst.w	r9, #1
   299be:	d10c      	bne.n	299da <mem_alloc.constprop.5+0x15a>
   299c0:	3001      	adds	r0, #1
   299c2:	4582      	cmp	sl, r0
   299c4:	ea4f 1150 	mov.w	r1, r0, lsr #5
   299c8:	f000 041f 	and.w	r4, r0, #31
   299cc:	d1f1      	bne.n	299b2 <mem_alloc.constprop.5+0x132>
   299ce:	3601      	adds	r6, #1
   299d0:	455e      	cmp	r6, fp
   299d2:	f108 0808 	add.w	r8, r8, #8
   299d6:	d3c4      	bcc.n	29962 <mem_alloc.constprop.5+0xe2>
   299d8:	e7b6      	b.n	29948 <mem_alloc.constprop.5+0xc8>
   299da:	2601      	movs	r6, #1
   299dc:	fa06 f404 	lsl.w	r4, r6, r4
   299e0:	899e      	ldrh	r6, [r3, #12]
   299e2:	ea22 0204 	bic.w	r2, r2, r4
   299e6:	eba0 000e 	sub.w	r0, r0, lr
   299ea:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
   299ee:	685c      	ldr	r4, [r3, #4]
   299f0:	2e00      	cmp	r6, #0
   299f2:	d0a9      	beq.n	29948 <mem_alloc.constprop.5+0xc8>
   299f4:	886a      	ldrh	r2, [r5, #2]
   299f6:	4282      	cmp	r2, r0
   299f8:	d811      	bhi.n	29a1e <mem_alloc.constprop.5+0x19e>
   299fa:	2100      	movs	r1, #0
   299fc:	1d2b      	adds	r3, r5, #4
   299fe:	e003      	b.n	29a08 <mem_alloc.constprop.5+0x188>
   29a00:	885a      	ldrh	r2, [r3, #2]
   29a02:	3304      	adds	r3, #4
   29a04:	4282      	cmp	r2, r0
   29a06:	d80a      	bhi.n	29a1e <mem_alloc.constprop.5+0x19e>
   29a08:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   29a0c:	3101      	adds	r1, #1
   29a0e:	428e      	cmp	r6, r1
   29a10:	fb02 4405 	mla	r4, r2, r5, r4
   29a14:	eba0 0002 	sub.w	r0, r0, r2
   29a18:	461d      	mov	r5, r3
   29a1a:	d1f1      	bne.n	29a00 <mem_alloc.constprop.5+0x180>
   29a1c:	e794      	b.n	29948 <mem_alloc.constprop.5+0xc8>
   29a1e:	882b      	ldrh	r3, [r5, #0]
   29a20:	fb00 4003 	mla	r0, r0, r3, r4
   29a24:	b003      	add	sp, #12
   29a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29a2a:	4670      	mov	r0, lr
   29a2c:	e7b0      	b.n	29990 <mem_alloc.constprop.5+0x110>
   29a2e:	f1bb 0f10 	cmp.w	fp, #16
   29a32:	bf08      	it	eq
   29a34:	260f      	moveq	r6, #15
   29a36:	d090      	beq.n	2995a <mem_alloc.constprop.5+0xda>
   29a38:	e786      	b.n	29948 <mem_alloc.constprop.5+0xc8>
   29a3a:	bf00      	nop
   29a3c:	20022984 	.word	0x20022984
   29a40:	20022948 	.word	0x20022948
   29a44:	20022904 	.word	0x20022904

00029a48 <mem_alloc.constprop.4>:
   29a48:	2800      	cmp	r0, #0
   29a4a:	d04c      	beq.n	29ae6 <mem_alloc.constprop.4+0x9e>
   29a4c:	4b6b      	ldr	r3, [pc, #428]	; (29bfc <mem_alloc.constprop.4+0x1b4>)
   29a4e:	681a      	ldr	r2, [r3, #0]
   29a50:	4290      	cmp	r0, r2
   29a52:	d848      	bhi.n	29ae6 <mem_alloc.constprop.4+0x9e>
   29a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29a58:	685f      	ldr	r7, [r3, #4]
   29a5a:	b083      	sub	sp, #12
   29a5c:	9700      	str	r7, [sp, #0]
   29a5e:	2f00      	cmp	r7, #0
   29a60:	d051      	beq.n	29b06 <mem_alloc.constprop.4+0xbe>
   29a62:	1e7a      	subs	r2, r7, #1
   29a64:	4696      	mov	lr, r2
   29a66:	2100      	movs	r1, #0
   29a68:	f04f 0c01 	mov.w	ip, #1
   29a6c:	4c64      	ldr	r4, [pc, #400]	; (29c00 <mem_alloc.constprop.4+0x1b8>)
   29a6e:	9201      	str	r2, [sp, #4]
   29a70:	eb01 020e 	add.w	r2, r1, lr
   29a74:	3201      	adds	r2, #1
   29a76:	f853 503c 	ldr.w	r5, [r3, ip, lsl #3]
   29a7a:	0852      	lsrs	r2, r2, #1
   29a7c:	f102 0801 	add.w	r8, r2, #1
   29a80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   29a84:	f853 9037 	ldr.w	r9, [r3, r7, lsl #3]
   29a88:	f854 a025 	ldr.w	sl, [r4, r5, lsl #2]
   29a8c:	f853 6038 	ldr.w	r6, [r3, r8, lsl #3]
   29a90:	eb09 0549 	add.w	r5, r9, r9, lsl #1
   29a94:	eb03 09cc 	add.w	r9, r3, ip, lsl #3
   29a98:	f8d9 9004 	ldr.w	r9, [r9, #4]
   29a9c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   29aa0:	f8da a010 	ldr.w	sl, [sl, #16]
   29aa4:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   29aa8:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   29aac:	f83a a029 	ldrh.w	sl, [sl, r9, lsl #2]
   29ab0:	eb03 0bc8 	add.w	fp, r3, r8, lsl #3
   29ab4:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
   29ab8:	6936      	ldr	r6, [r6, #16]
   29aba:	f8db b004 	ldr.w	fp, [fp, #4]
   29abe:	692d      	ldr	r5, [r5, #16]
   29ac0:	f8d9 9004 	ldr.w	r9, [r9, #4]
   29ac4:	4550      	cmp	r0, sl
   29ac6:	f836 602b 	ldrh.w	r6, [r6, fp, lsl #2]
   29aca:	f835 5029 	ldrh.w	r5, [r5, r9, lsl #2]
   29ace:	d913      	bls.n	29af8 <mem_alloc.constprop.4+0xb0>
   29ad0:	42a8      	cmp	r0, r5
   29ad2:	d210      	bcs.n	29af6 <mem_alloc.constprop.4+0xae>
   29ad4:	42b0      	cmp	r0, r6
   29ad6:	d908      	bls.n	29aea <mem_alloc.constprop.4+0xa2>
   29ad8:	45c6      	cmp	lr, r8
   29ada:	4641      	mov	r1, r8
   29adc:	f0c0 8087 	bcc.w	29bee <mem_alloc.constprop.4+0x1a6>
   29ae0:	f108 0c01 	add.w	ip, r8, #1
   29ae4:	e7c4      	b.n	29a70 <mem_alloc.constprop.4+0x28>
   29ae6:	2000      	movs	r0, #0
   29ae8:	4770      	bx	lr
   29aea:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
   29aee:	4571      	cmp	r1, lr
   29af0:	d87d      	bhi.n	29bee <mem_alloc.constprop.4+0x1a6>
   29af2:	4617      	mov	r7, r2
   29af4:	e7bc      	b.n	29a70 <mem_alloc.constprop.4+0x28>
   29af6:	4639      	mov	r1, r7
   29af8:	9a00      	ldr	r2, [sp, #0]
   29afa:	428a      	cmp	r2, r1
   29afc:	d007      	beq.n	29b0e <mem_alloc.constprop.4+0xc6>
   29afe:	2910      	cmp	r1, #16
   29b00:	d001      	beq.n	29b06 <mem_alloc.constprop.4+0xbe>
   29b02:	428a      	cmp	r2, r1
   29b04:	d808      	bhi.n	29b18 <mem_alloc.constprop.4+0xd0>
   29b06:	2000      	movs	r0, #0
   29b08:	b003      	add	sp, #12
   29b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29b0e:	9a01      	ldr	r2, [sp, #4]
   29b10:	2a10      	cmp	r2, #16
   29b12:	bf18      	it	ne
   29b14:	4611      	movne	r1, r2
   29b16:	d0f6      	beq.n	29b06 <mem_alloc.constprop.4+0xbe>
   29b18:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 29c04 <mem_alloc.constprop.4+0x1bc>
   29b1c:	f8dd 9000 	ldr.w	r9, [sp]
   29b20:	eb03 08c1 	add.w	r8, r3, r1, lsl #3
   29b24:	e9d8 2602 	ldrd	r2, r6, [r8, #8]
   29b28:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   29b2c:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
   29b30:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   29b34:	f8d2 e004 	ldr.w	lr, [r2, #4]
   29b38:	691f      	ldr	r7, [r3, #16]
   29b3a:	2e00      	cmp	r6, #0
   29b3c:	d055      	beq.n	29bea <mem_alloc.constprop.4+0x1a2>
   29b3e:	463a      	mov	r2, r7
   29b40:	4670      	mov	r0, lr
   29b42:	00b6      	lsls	r6, r6, #2
   29b44:	eb07 0a06 	add.w	sl, r7, r6
   29b48:	8855      	ldrh	r5, [r2, #2]
   29b4a:	3204      	adds	r2, #4
   29b4c:	4592      	cmp	sl, r2
   29b4e:	4428      	add	r0, r5
   29b50:	d1fa      	bne.n	29b48 <mem_alloc.constprop.4+0x100>
   29b52:	19bd      	adds	r5, r7, r6
   29b54:	f8b5 b002 	ldrh.w	fp, [r5, #2]
   29b58:	4483      	add	fp, r0
   29b5a:	4583      	cmp	fp, r0
   29b5c:	d918      	bls.n	29b90 <mem_alloc.constprop.4+0x148>
   29b5e:	0945      	lsrs	r5, r0, #5
   29b60:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   29b64:	f000 061f 	and.w	r6, r0, #31
   29b68:	fa22 fa06 	lsr.w	sl, r2, r6
   29b6c:	f01a 0f01 	tst.w	sl, #1
   29b70:	d007      	beq.n	29b82 <mem_alloc.constprop.4+0x13a>
   29b72:	e013      	b.n	29b9c <mem_alloc.constprop.4+0x154>
   29b74:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   29b78:	fa22 fa06 	lsr.w	sl, r2, r6
   29b7c:	f01a 0f01 	tst.w	sl, #1
   29b80:	d10c      	bne.n	29b9c <mem_alloc.constprop.4+0x154>
   29b82:	3001      	adds	r0, #1
   29b84:	4583      	cmp	fp, r0
   29b86:	ea4f 1550 	mov.w	r5, r0, lsr #5
   29b8a:	f000 061f 	and.w	r6, r0, #31
   29b8e:	d1f1      	bne.n	29b74 <mem_alloc.constprop.4+0x12c>
   29b90:	3101      	adds	r1, #1
   29b92:	4549      	cmp	r1, r9
   29b94:	f108 0808 	add.w	r8, r8, #8
   29b98:	d3c4      	bcc.n	29b24 <mem_alloc.constprop.4+0xdc>
   29b9a:	e7b4      	b.n	29b06 <mem_alloc.constprop.4+0xbe>
   29b9c:	2101      	movs	r1, #1
   29b9e:	40b1      	lsls	r1, r6
   29ba0:	899e      	ldrh	r6, [r3, #12]
   29ba2:	ea22 0201 	bic.w	r2, r2, r1
   29ba6:	eba0 000e 	sub.w	r0, r0, lr
   29baa:	f84c 2025 	str.w	r2, [ip, r5, lsl #2]
   29bae:	685c      	ldr	r4, [r3, #4]
   29bb0:	2e00      	cmp	r6, #0
   29bb2:	d0a8      	beq.n	29b06 <mem_alloc.constprop.4+0xbe>
   29bb4:	887a      	ldrh	r2, [r7, #2]
   29bb6:	4282      	cmp	r2, r0
   29bb8:	d811      	bhi.n	29bde <mem_alloc.constprop.4+0x196>
   29bba:	2100      	movs	r1, #0
   29bbc:	1d3b      	adds	r3, r7, #4
   29bbe:	e003      	b.n	29bc8 <mem_alloc.constprop.4+0x180>
   29bc0:	885a      	ldrh	r2, [r3, #2]
   29bc2:	3304      	adds	r3, #4
   29bc4:	4282      	cmp	r2, r0
   29bc6:	d80a      	bhi.n	29bde <mem_alloc.constprop.4+0x196>
   29bc8:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   29bcc:	3101      	adds	r1, #1
   29bce:	428e      	cmp	r6, r1
   29bd0:	eba0 0002 	sub.w	r0, r0, r2
   29bd4:	fb02 4405 	mla	r4, r2, r5, r4
   29bd8:	461f      	mov	r7, r3
   29bda:	d1f1      	bne.n	29bc0 <mem_alloc.constprop.4+0x178>
   29bdc:	e793      	b.n	29b06 <mem_alloc.constprop.4+0xbe>
   29bde:	883b      	ldrh	r3, [r7, #0]
   29be0:	fb00 4003 	mla	r0, r0, r3, r4
   29be4:	b003      	add	sp, #12
   29be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29bea:	4670      	mov	r0, lr
   29bec:	e7b1      	b.n	29b52 <mem_alloc.constprop.4+0x10a>
   29bee:	9a00      	ldr	r2, [sp, #0]
   29bf0:	2a10      	cmp	r2, #16
   29bf2:	bf08      	it	eq
   29bf4:	210f      	moveq	r1, #15
   29bf6:	d08f      	beq.n	29b18 <mem_alloc.constprop.4+0xd0>
   29bf8:	e785      	b.n	29b06 <mem_alloc.constprop.4+0xbe>
   29bfa:	bf00      	nop
   29bfc:	20022984 	.word	0x20022984
   29c00:	20022948 	.word	0x20022948
   29c04:	20022904 	.word	0x20022904

00029c08 <nrf_mem_init>:
   29c08:	b570      	push	{r4, r5, r6, lr}
   29c0a:	2200      	movs	r2, #0
   29c0c:	2501      	movs	r5, #1
   29c0e:	4833      	ldr	r0, [pc, #204]	; (29cdc <nrf_mem_init+0xd4>)
   29c10:	0951      	lsrs	r1, r2, #5
   29c12:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   29c16:	f002 031f 	and.w	r3, r2, #31
   29c1a:	fa05 f303 	lsl.w	r3, r5, r3
   29c1e:	3201      	adds	r2, #1
   29c20:	4323      	orrs	r3, r4
   29c22:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   29c26:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   29c2a:	d1f1      	bne.n	29c10 <nrf_mem_init+0x8>
   29c2c:	2400      	movs	r4, #0
   29c2e:	4b2c      	ldr	r3, [pc, #176]	; (29ce0 <nrf_mem_init+0xd8>)
   29c30:	4621      	mov	r1, r4
   29c32:	223c      	movs	r2, #60	; 0x3c
   29c34:	482b      	ldr	r0, [pc, #172]	; (29ce4 <nrf_mem_init+0xdc>)
   29c36:	601c      	str	r4, [r3, #0]
   29c38:	f00f f9fd 	bl	39036 <memset>
   29c3c:	2110      	movs	r1, #16
   29c3e:	2205      	movs	r2, #5
   29c40:	4b29      	ldr	r3, [pc, #164]	; (29ce8 <nrf_mem_init+0xe0>)
   29c42:	4e2a      	ldr	r6, [pc, #168]	; (29cec <nrf_mem_init+0xe4>)
   29c44:	e9c3 4400 	strd	r4, r4, [r3]
   29c48:	60d9      	str	r1, [r3, #12]
   29c4a:	6159      	str	r1, [r3, #20]
   29c4c:	61d9      	str	r1, [r3, #28]
   29c4e:	6259      	str	r1, [r3, #36]	; 0x24
   29c50:	62d9      	str	r1, [r3, #44]	; 0x2c
   29c52:	6359      	str	r1, [r3, #52]	; 0x34
   29c54:	63d9      	str	r1, [r3, #60]	; 0x3c
   29c56:	6459      	str	r1, [r3, #68]	; 0x44
   29c58:	64d9      	str	r1, [r3, #76]	; 0x4c
   29c5a:	6559      	str	r1, [r3, #84]	; 0x54
   29c5c:	65d9      	str	r1, [r3, #92]	; 0x5c
   29c5e:	6659      	str	r1, [r3, #100]	; 0x64
   29c60:	66d9      	str	r1, [r3, #108]	; 0x6c
   29c62:	6759      	str	r1, [r3, #116]	; 0x74
   29c64:	67d9      	str	r1, [r3, #124]	; 0x7c
   29c66:	609a      	str	r2, [r3, #8]
   29c68:	611a      	str	r2, [r3, #16]
   29c6a:	619a      	str	r2, [r3, #24]
   29c6c:	621a      	str	r2, [r3, #32]
   29c6e:	629a      	str	r2, [r3, #40]	; 0x28
   29c70:	631a      	str	r2, [r3, #48]	; 0x30
   29c72:	639a      	str	r2, [r3, #56]	; 0x38
   29c74:	641a      	str	r2, [r3, #64]	; 0x40
   29c76:	649a      	str	r2, [r3, #72]	; 0x48
   29c78:	651a      	str	r2, [r3, #80]	; 0x50
   29c7a:	659a      	str	r2, [r3, #88]	; 0x58
   29c7c:	661a      	str	r2, [r3, #96]	; 0x60
   29c7e:	669a      	str	r2, [r3, #104]	; 0x68
   29c80:	671a      	str	r2, [r3, #112]	; 0x70
   29c82:	679a      	str	r2, [r3, #120]	; 0x78
   29c84:	e9c3 2120 	strd	r2, r1, [r3, #128]	; 0x80
   29c88:	e9c3 4422 	strd	r4, r4, [r3, #136]	; 0x88
   29c8c:	e9c3 2124 	strd	r2, r1, [r3, #144]	; 0x90
   29c90:	e9c3 2126 	strd	r2, r1, [r3, #152]	; 0x98
   29c94:	e9c3 2128 	strd	r2, r1, [r3, #160]	; 0xa0
   29c98:	e9c3 212a 	strd	r2, r1, [r3, #168]	; 0xa8
   29c9c:	e9c3 212c 	strd	r2, r1, [r3, #176]	; 0xb0
   29ca0:	e9c3 212e 	strd	r2, r1, [r3, #184]	; 0xb8
   29ca4:	e9c3 2130 	strd	r2, r1, [r3, #192]	; 0xc0
   29ca8:	e9c3 2132 	strd	r2, r1, [r3, #200]	; 0xc8
   29cac:	e9c3 2134 	strd	r2, r1, [r3, #208]	; 0xd0
   29cb0:	e9c3 2136 	strd	r2, r1, [r3, #216]	; 0xd8
   29cb4:	e9c3 2138 	strd	r2, r1, [r3, #224]	; 0xe0
   29cb8:	e9c3 213a 	strd	r2, r1, [r3, #232]	; 0xe8
   29cbc:	e9c3 213c 	strd	r2, r1, [r3, #240]	; 0xf0
   29cc0:	e9c3 213e 	strd	r2, r1, [r3, #248]	; 0xf8
   29cc4:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   29cc8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   29ccc:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
   29cd0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   29cd4:	4620      	mov	r0, r4
   29cd6:	7035      	strb	r5, [r6, #0]
   29cd8:	bd70      	pop	{r4, r5, r6, pc}
   29cda:	bf00      	nop
   29cdc:	20022904 	.word	0x20022904
   29ce0:	20022944 	.word	0x20022944
   29ce4:	20022948 	.word	0x20022948
   29ce8:	20022984 	.word	0x20022984
   29cec:	2002908c 	.word	0x2002908c

00029cf0 <nrf_mem_register>:
   29cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29cf4:	4b87      	ldr	r3, [pc, #540]	; (29f14 <nrf_mem_register+0x224>)
   29cf6:	b087      	sub	sp, #28
   29cf8:	781b      	ldrb	r3, [r3, #0]
   29cfa:	2b00      	cmp	r3, #0
   29cfc:	f000 808c 	beq.w	29e18 <nrf_mem_register+0x128>
   29d00:	b328      	cbz	r0, 29d4e <nrf_mem_register+0x5e>
   29d02:	b321      	cbz	r1, 29d4e <nrf_mem_register+0x5e>
   29d04:	780b      	ldrb	r3, [r1, #0]
   29d06:	f8df 8218 	ldr.w	r8, [pc, #536]	; 29f20 <nrf_mem_register+0x230>
   29d0a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   29d0e:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   29d12:	685b      	ldr	r3, [r3, #4]
   29d14:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   29d18:	4463      	add	r3, ip
   29d1a:	2b10      	cmp	r3, #16
   29d1c:	d811      	bhi.n	29d42 <nrf_mem_register+0x52>
   29d1e:	f04f 0a00 	mov.w	sl, #0
   29d22:	4689      	mov	r9, r1
   29d24:	4b7c      	ldr	r3, [pc, #496]	; (29f18 <nrf_mem_register+0x228>)
   29d26:	4f7d      	ldr	r7, [pc, #500]	; (29f1c <nrf_mem_register+0x22c>)
   29d28:	681b      	ldr	r3, [r3, #0]
   29d2a:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
   29d2e:	9300      	str	r3, [sp, #0]
   29d30:	68b9      	ldr	r1, [r7, #8]
   29d32:	b191      	cbz	r1, 29d5a <nrf_mem_register+0x6a>
   29d34:	f10a 0a01 	add.w	sl, sl, #1
   29d38:	f1ba 0f05 	cmp.w	sl, #5
   29d3c:	f107 070c 	add.w	r7, r7, #12
   29d40:	d1f6      	bne.n	29d30 <nrf_mem_register+0x40>
   29d42:	f248 1b07 	movw	fp, #33031	; 0x8107
   29d46:	4658      	mov	r0, fp
   29d48:	b007      	add	sp, #28
   29d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29d4e:	f248 1b0e 	movw	fp, #33038	; 0x810e
   29d52:	4658      	mov	r0, fp
   29d54:	b007      	add	sp, #28
   29d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29d5a:	f1bc 0f00 	cmp.w	ip, #0
   29d5e:	d061      	beq.n	29e24 <nrf_mem_register+0x134>
   29d60:	460d      	mov	r5, r1
   29d62:	460c      	mov	r4, r1
   29d64:	f8d9 3010 	ldr.w	r3, [r9, #16]
   29d68:	eb0e 0b03 	add.w	fp, lr, r3
   29d6c:	885a      	ldrh	r2, [r3, #2]
   29d6e:	f833 6b04 	ldrh.w	r6, [r3], #4
   29d72:	4415      	add	r5, r2
   29d74:	459b      	cmp	fp, r3
   29d76:	fb02 4406 	mla	r4, r2, r6, r4
   29d7a:	d1f7      	bne.n	29d6c <nrf_mem_register+0x7c>
   29d7c:	f8d9 3008 	ldr.w	r3, [r9, #8]
   29d80:	42a3      	cmp	r3, r4
   29d82:	d3d7      	bcc.n	29d34 <nrf_mem_register+0x44>
   29d84:	9b00      	ldr	r3, [sp, #0]
   29d86:	442b      	add	r3, r5
   29d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   29d8c:	d2d2      	bcs.n	29d34 <nrf_mem_register+0x44>
   29d8e:	4c63      	ldr	r4, [pc, #396]	; (29f1c <nrf_mem_register+0x22c>)
   29d90:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
   29d94:	0092      	lsls	r2, r2, #2
   29d96:	f8c0 a000 	str.w	sl, [r0]
   29d9a:	18a0      	adds	r0, r4, r2
   29d9c:	f844 9002 	str.w	r9, [r4, r2]
   29da0:	9a00      	ldr	r2, [sp, #0]
   29da2:	468b      	mov	fp, r1
   29da4:	e9c0 2501 	strd	r2, r5, [r0, #4]
   29da8:	f899 2001 	ldrb.w	r2, [r9, #1]
   29dac:	485a      	ldr	r0, [pc, #360]	; (29f18 <nrf_mem_register+0x228>)
   29dae:	2a01      	cmp	r2, #1
   29db0:	6003      	str	r3, [r0, #0]
   29db2:	d0c8      	beq.n	29d46 <nrf_mem_register+0x56>
   29db4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   29db8:	2b00      	cmp	r3, #0
   29dba:	d0c4      	beq.n	29d46 <nrf_mem_register+0x56>
   29dbc:	2500      	movs	r5, #0
   29dbe:	f8cd 9004 	str.w	r9, [sp, #4]
   29dc2:	f8cd a00c 	str.w	sl, [sp, #12]
   29dc6:	f8cd b014 	str.w	fp, [sp, #20]
   29dca:	9b01      	ldr	r3, [sp, #4]
   29dcc:	781f      	ldrb	r7, [r3, #0]
   29dce:	691a      	ldr	r2, [r3, #16]
   29dd0:	013b      	lsls	r3, r7, #4
   29dd2:	eb03 0907 	add.w	r9, r3, r7
   29dd6:	9300      	str	r3, [sp, #0]
   29dd8:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   29ddc:	6859      	ldr	r1, [r3, #4]
   29dde:	f832 4025 	ldrh.w	r4, [r2, r5, lsl #2]
   29de2:	9102      	str	r1, [sp, #8]
   29de4:	bb39      	cbnz	r1, 29e36 <nrf_mem_register+0x146>
   29de6:	9a03      	ldr	r2, [sp, #12]
   29de8:	60dd      	str	r5, [r3, #12]
   29dea:	609a      	str	r2, [r3, #8]
   29dec:	9b00      	ldr	r3, [sp, #0]
   29dee:	443b      	add	r3, r7
   29df0:	461f      	mov	r7, r3
   29df2:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   29df6:	684b      	ldr	r3, [r1, #4]
   29df8:	f858 2037 	ldr.w	r2, [r8, r7, lsl #3]
   29dfc:	3301      	adds	r3, #1
   29dfe:	4294      	cmp	r4, r2
   29e00:	604b      	str	r3, [r1, #4]
   29e02:	d912      	bls.n	29e2a <nrf_mem_register+0x13a>
   29e04:	9b01      	ldr	r3, [sp, #4]
   29e06:	f848 4037 	str.w	r4, [r8, r7, lsl #3]
   29e0a:	899b      	ldrh	r3, [r3, #12]
   29e0c:	3501      	adds	r5, #1
   29e0e:	429d      	cmp	r5, r3
   29e10:	d3db      	bcc.n	29dca <nrf_mem_register+0xda>
   29e12:	f8dd b014 	ldr.w	fp, [sp, #20]
   29e16:	e796      	b.n	29d46 <nrf_mem_register+0x56>
   29e18:	f248 1b08 	movw	fp, #33032	; 0x8108
   29e1c:	4658      	mov	r0, fp
   29e1e:	b007      	add	sp, #28
   29e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29e24:	9b00      	ldr	r3, [sp, #0]
   29e26:	4665      	mov	r5, ip
   29e28:	e7ae      	b.n	29d88 <nrf_mem_register+0x98>
   29e2a:	9b01      	ldr	r3, [sp, #4]
   29e2c:	3501      	adds	r5, #1
   29e2e:	899b      	ldrh	r3, [r3, #12]
   29e30:	42ab      	cmp	r3, r5
   29e32:	d8ca      	bhi.n	29dca <nrf_mem_register+0xda>
   29e34:	e7ed      	b.n	29e12 <nrf_mem_register+0x122>
   29e36:	2600      	movs	r6, #0
   29e38:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
   29e3c:	9504      	str	r5, [sp, #16]
   29e3e:	eb06 000a 	add.w	r0, r6, sl
   29e42:	eb09 0206 	add.w	r2, r9, r6
   29e46:	3201      	adds	r2, #1
   29e48:	3001      	adds	r0, #1
   29e4a:	f858 c032 	ldr.w	ip, [r8, r2, lsl #3]
   29e4e:	0840      	lsrs	r0, r0, #1
   29e50:	4d32      	ldr	r5, [pc, #200]	; (29f1c <nrf_mem_register+0x22c>)
   29e52:	eb09 0100 	add.w	r1, r9, r0
   29e56:	eb09 030a 	add.w	r3, r9, sl
   29e5a:	3101      	adds	r1, #1
   29e5c:	3301      	adds	r3, #1
   29e5e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   29e62:	f858 e031 	ldr.w	lr, [r8, r1, lsl #3]
   29e66:	f855 b02c 	ldr.w	fp, [r5, ip, lsl #2]
   29e6a:	f858 c033 	ldr.w	ip, [r8, r3, lsl #3]
   29e6e:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
   29e72:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   29e76:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   29e7a:	f8db b010 	ldr.w	fp, [fp, #16]
   29e7e:	6852      	ldr	r2, [r2, #4]
   29e80:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
   29e84:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
   29e88:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
   29e8c:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   29e90:	f83b 2022 	ldrh.w	r2, [fp, r2, lsl #2]
   29e94:	f8de e010 	ldr.w	lr, [lr, #16]
   29e98:	6849      	ldr	r1, [r1, #4]
   29e9a:	f8dc c010 	ldr.w	ip, [ip, #16]
   29e9e:	685b      	ldr	r3, [r3, #4]
   29ea0:	4294      	cmp	r4, r2
   29ea2:	f83e 1021 	ldrh.w	r1, [lr, r1, lsl #2]
   29ea6:	f83c 3023 	ldrh.w	r3, [ip, r3, lsl #2]
   29eaa:	d92d      	bls.n	29f08 <nrf_mem_register+0x218>
   29eac:	429c      	cmp	r4, r3
   29eae:	d22d      	bcs.n	29f0c <nrf_mem_register+0x21c>
   29eb0:	428c      	cmp	r4, r1
   29eb2:	d924      	bls.n	29efe <nrf_mem_register+0x20e>
   29eb4:	1c46      	adds	r6, r0, #1
   29eb6:	45b2      	cmp	sl, r6
   29eb8:	d2c1      	bcs.n	29e3e <nrf_mem_register+0x14e>
   29eba:	2610      	movs	r6, #16
   29ebc:	9d04      	ldr	r5, [sp, #16]
   29ebe:	9a02      	ldr	r2, [sp, #8]
   29ec0:	42b2      	cmp	r2, r6
   29ec2:	d911      	bls.n	29ee8 <nrf_mem_register+0x1f8>
   29ec4:	9b00      	ldr	r3, [sp, #0]
   29ec6:	443b      	add	r3, r7
   29ec8:	441a      	add	r2, r3
   29eca:	4433      	add	r3, r6
   29ecc:	eb08 0ac2 	add.w	sl, r8, r2, lsl #3
   29ed0:	eb08 09c3 	add.w	r9, r8, r3, lsl #3
   29ed4:	2208      	movs	r2, #8
   29ed6:	4651      	mov	r1, sl
   29ed8:	eb0a 0002 	add.w	r0, sl, r2
   29edc:	f1aa 0a08 	sub.w	sl, sl, #8
   29ee0:	f00f f86f 	bl	38fc2 <memcpy>
   29ee4:	45d1      	cmp	r9, sl
   29ee6:	d1f5      	bne.n	29ed4 <nrf_mem_register+0x1e4>
   29ee8:	9b00      	ldr	r3, [sp, #0]
   29eea:	9903      	ldr	r1, [sp, #12]
   29eec:	443b      	add	r3, r7
   29eee:	4433      	add	r3, r6
   29ef0:	3301      	adds	r3, #1
   29ef2:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   29ef6:	f848 1033 	str.w	r1, [r8, r3, lsl #3]
   29efa:	6055      	str	r5, [r2, #4]
   29efc:	e776      	b.n	29dec <nrf_mem_register+0xfc>
   29efe:	f100 3aff 	add.w	sl, r0, #4294967295	; 0xffffffff
   29f02:	4556      	cmp	r6, sl
   29f04:	d99b      	bls.n	29e3e <nrf_mem_register+0x14e>
   29f06:	e7d8      	b.n	29eba <nrf_mem_register+0x1ca>
   29f08:	9d04      	ldr	r5, [sp, #16]
   29f0a:	e7d8      	b.n	29ebe <nrf_mem_register+0x1ce>
   29f0c:	9d04      	ldr	r5, [sp, #16]
   29f0e:	f10a 0601 	add.w	r6, sl, #1
   29f12:	e7d4      	b.n	29ebe <nrf_mem_register+0x1ce>
   29f14:	2002908c 	.word	0x2002908c
   29f18:	20022944 	.word	0x20022944
   29f1c:	20022948 	.word	0x20022948
   29f20:	20022984 	.word	0x20022984

00029f24 <nrf_malloc>:
   29f24:	4b03      	ldr	r3, [pc, #12]	; (29f34 <nrf_malloc+0x10>)
   29f26:	781b      	ldrb	r3, [r3, #0]
   29f28:	b10b      	cbz	r3, 29f2e <nrf_malloc+0xa>
   29f2a:	f7ff bd8d 	b.w	29a48 <mem_alloc.constprop.4>
   29f2e:	4618      	mov	r0, r3
   29f30:	4770      	bx	lr
   29f32:	bf00      	nop
   29f34:	2002908c 	.word	0x2002908c

00029f38 <nrf_free>:
   29f38:	4b04      	ldr	r3, [pc, #16]	; (29f4c <nrf_free+0x14>)
   29f3a:	781b      	ldrb	r3, [r3, #0]
   29f3c:	b123      	cbz	r3, 29f48 <nrf_free+0x10>
   29f3e:	b118      	cbz	r0, 29f48 <nrf_free+0x10>
   29f40:	4601      	mov	r1, r0
   29f42:	2000      	movs	r0, #0
   29f44:	f7ff bc30 	b.w	297a8 <mem_free>
   29f48:	4770      	bx	lr
   29f4a:	bf00      	nop
   29f4c:	2002908c 	.word	0x2002908c

00029f50 <nrf_shared_malloc>:
   29f50:	4b03      	ldr	r3, [pc, #12]	; (29f60 <nrf_shared_malloc+0x10>)
   29f52:	781b      	ldrb	r3, [r3, #0]
   29f54:	b10b      	cbz	r3, 29f5a <nrf_shared_malloc+0xa>
   29f56:	f7ff bc93 	b.w	29880 <mem_alloc.constprop.5>
   29f5a:	4618      	mov	r0, r3
   29f5c:	4770      	bx	lr
   29f5e:	bf00      	nop
   29f60:	2002908c 	.word	0x2002908c

00029f64 <nrf_shared_free>:
   29f64:	4b04      	ldr	r3, [pc, #16]	; (29f78 <nrf_shared_free+0x14>)
   29f66:	781b      	ldrb	r3, [r3, #0]
   29f68:	b123      	cbz	r3, 29f74 <nrf_shared_free+0x10>
   29f6a:	b118      	cbz	r0, 29f74 <nrf_shared_free+0x10>
   29f6c:	4601      	mov	r1, r0
   29f6e:	2001      	movs	r0, #1
   29f70:	f7ff bc1a 	b.w	297a8 <mem_free>
   29f74:	4770      	bx	lr
   29f76:	bf00      	nop
   29f78:	2002908c 	.word	0x2002908c

00029f7c <rpc_dfu_event_handler>:
   29f7c:	b508      	push	{r3, lr}
   29f7e:	4a08      	ldr	r2, [pc, #32]	; (29fa0 <rpc_dfu_event_handler+0x24>)
   29f80:	68c1      	ldr	r1, [r0, #12]
   29f82:	8812      	ldrh	r2, [r2, #0]
   29f84:	4603      	mov	r3, r0
   29f86:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   29f8a:	d005      	beq.n	29f98 <rpc_dfu_event_handler+0x1c>
   29f8c:	6800      	ldr	r0, [r0, #0]
   29f8e:	b110      	cbz	r0, 29f96 <rpc_dfu_event_handler+0x1a>
   29f90:	f7fd fa60 	bl	27454 <rpc_dfu_client_data_free>
   29f94:	2000      	movs	r0, #0
   29f96:	bd08      	pop	{r3, pc}
   29f98:	4a02      	ldr	r2, [pc, #8]	; (29fa4 <rpc_dfu_event_handler+0x28>)
   29f9a:	2001      	movs	r0, #1
   29f9c:	6013      	str	r3, [r2, #0]
   29f9e:	bd08      	pop	{r3, pc}
   29fa0:	20027620 	.word	0x20027620
   29fa4:	20022aa0 	.word	0x20022aa0

00029fa8 <mfu_interface_init>:
   29fa8:	2300      	movs	r3, #0
   29faa:	b510      	push	{r4, lr}
   29fac:	4808      	ldr	r0, [pc, #32]	; (29fd0 <mfu_interface_init+0x28>)
   29fae:	4909      	ldr	r1, [pc, #36]	; (29fd4 <mfu_interface_init+0x2c>)
   29fb0:	4a09      	ldr	r2, [pc, #36]	; (29fd8 <mfu_interface_init+0x30>)
   29fb2:	4c0a      	ldr	r4, [pc, #40]	; (29fdc <mfu_interface_init+0x34>)
   29fb4:	8003      	strh	r3, [r0, #0]
   29fb6:	600b      	str	r3, [r1, #0]
   29fb8:	6013      	str	r3, [r2, #0]
   29fba:	6023      	str	r3, [r4, #0]
   29fbc:	f7fd fa14 	bl	273e8 <rpc_dfu_client_init>
   29fc0:	b910      	cbnz	r0, 29fc8 <mfu_interface_init+0x20>
   29fc2:	2301      	movs	r3, #1
   29fc4:	6023      	str	r3, [r4, #0]
   29fc6:	bd10      	pop	{r4, pc}
   29fc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   29fcc:	bd10      	pop	{r4, pc}
   29fce:	bf00      	nop
   29fd0:	20027620 	.word	0x20027620
   29fd4:	20022aa0 	.word	0x20022aa0
   29fd8:	20022a9c 	.word	0x20022a9c
   29fdc:	20022a94 	.word	0x20022a94

00029fe0 <mfu_interface_open>:
   29fe0:	b508      	push	{r3, lr}
   29fe2:	4b07      	ldr	r3, [pc, #28]	; (2a000 <mfu_interface_open+0x20>)
   29fe4:	681a      	ldr	r2, [r3, #0]
   29fe6:	2a01      	cmp	r2, #1
   29fe8:	d103      	bne.n	29ff2 <mfu_interface_open+0x12>
   29fea:	2202      	movs	r2, #2
   29fec:	601a      	str	r2, [r3, #0]
   29fee:	4805      	ldr	r0, [pc, #20]	; (2a004 <mfu_interface_open+0x24>)
   29ff0:	bd08      	pop	{r3, pc}
   29ff2:	2001      	movs	r0, #1
   29ff4:	f7f6 f82a 	bl	2004c <bsd_os_errno_set>
   29ff8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   29ffc:	bd08      	pop	{r3, pc}
   29ffe:	bf00      	nop
   2a000:	20022a94 	.word	0x20022a94
   2a004:	49765432 	.word	0x49765432

0002a008 <mfu_interface_close>:
   2a008:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a00a:	4c32      	ldr	r4, [pc, #200]	; (2a0d4 <mfu_interface_close+0xcc>)
   2a00c:	b083      	sub	sp, #12
   2a00e:	6823      	ldr	r3, [r4, #0]
   2a010:	1e9a      	subs	r2, r3, #2
   2a012:	2a01      	cmp	r2, #1
   2a014:	d857      	bhi.n	2a0c6 <mfu_interface_close+0xbe>
   2a016:	2b03      	cmp	r3, #3
   2a018:	d004      	beq.n	2a024 <mfu_interface_close+0x1c>
   2a01a:	2301      	movs	r3, #1
   2a01c:	2000      	movs	r0, #0
   2a01e:	6023      	str	r3, [r4, #0]
   2a020:	b003      	add	sp, #12
   2a022:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a024:	2100      	movs	r1, #0
   2a026:	4668      	mov	r0, sp
   2a028:	f7fd f9e4 	bl	273f4 <rpc_dfu_client_request_alloc>
   2a02c:	4603      	mov	r3, r0
   2a02e:	2800      	cmp	r0, #0
   2a030:	d13d      	bne.n	2a0ae <mfu_interface_close+0xa6>
   2a032:	2104      	movs	r1, #4
   2a034:	4e28      	ldr	r6, [pc, #160]	; (2a0d8 <mfu_interface_close+0xd0>)
   2a036:	9800      	ldr	r0, [sp, #0]
   2a038:	8832      	ldrh	r2, [r6, #0]
   2a03a:	7201      	strb	r1, [r0, #8]
   2a03c:	3201      	adds	r2, #1
   2a03e:	b292      	uxth	r2, r2
   2a040:	0411      	lsls	r1, r2, #16
   2a042:	f041 0106 	orr.w	r1, r1, #6
   2a046:	4d25      	ldr	r5, [pc, #148]	; (2a0dc <mfu_interface_close+0xd4>)
   2a048:	60c1      	str	r1, [r0, #12]
   2a04a:	7103      	strb	r3, [r0, #4]
   2a04c:	7143      	strb	r3, [r0, #5]
   2a04e:	7183      	strb	r3, [r0, #6]
   2a050:	71c3      	strb	r3, [r0, #7]
   2a052:	7243      	strb	r3, [r0, #9]
   2a054:	7283      	strb	r3, [r0, #10]
   2a056:	72c3      	strb	r3, [r0, #11]
   2a058:	2106      	movs	r1, #6
   2a05a:	8032      	strh	r2, [r6, #0]
   2a05c:	602b      	str	r3, [r5, #0]
   2a05e:	f7fd f9dd 	bl	2741c <rpc_dfu_client_request_send>
   2a062:	b9d8      	cbnz	r0, 2a09c <mfu_interface_close+0x94>
   2a064:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a068:	ae02      	add	r6, sp, #8
   2a06a:	4627      	mov	r7, r4
   2a06c:	f846 3d04 	str.w	r3, [r6, #-4]!
   2a070:	e004      	b.n	2a07c <mfu_interface_close+0x74>
   2a072:	4631      	mov	r1, r6
   2a074:	4638      	mov	r0, r7
   2a076:	f7f5 ff3f 	bl	1fef8 <bsd_os_timedwait>
   2a07a:	b9f0      	cbnz	r0, 2a0ba <mfu_interface_close+0xb2>
   2a07c:	6828      	ldr	r0, [r5, #0]
   2a07e:	2800      	cmp	r0, #0
   2a080:	d0f7      	beq.n	2a072 <mfu_interface_close+0x6a>
   2a082:	6905      	ldr	r5, [r0, #16]
   2a084:	f7fd f9de 	bl	27444 <rpc_dfu_client_message_free>
   2a088:	2d00      	cmp	r5, #0
   2a08a:	d0c6      	beq.n	2a01a <mfu_interface_close+0x12>
   2a08c:	4b14      	ldr	r3, [pc, #80]	; (2a0e0 <mfu_interface_close+0xd8>)
   2a08e:	2008      	movs	r0, #8
   2a090:	601d      	str	r5, [r3, #0]
   2a092:	f7f5 ffdb 	bl	2004c <bsd_os_errno_set>
   2a096:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a09a:	e7c1      	b.n	2a020 <mfu_interface_close+0x18>
   2a09c:	9800      	ldr	r0, [sp, #0]
   2a09e:	6803      	ldr	r3, [r0, #0]
   2a0a0:	b11b      	cbz	r3, 2a0aa <mfu_interface_close+0xa2>
   2a0a2:	4618      	mov	r0, r3
   2a0a4:	f7fd f9d6 	bl	27454 <rpc_dfu_client_data_free>
   2a0a8:	9800      	ldr	r0, [sp, #0]
   2a0aa:	f7fd f9cb 	bl	27444 <rpc_dfu_client_message_free>
   2a0ae:	200c      	movs	r0, #12
   2a0b0:	f7f5 ffcc 	bl	2004c <bsd_os_errno_set>
   2a0b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a0b8:	e7b2      	b.n	2a020 <mfu_interface_close+0x18>
   2a0ba:	203c      	movs	r0, #60	; 0x3c
   2a0bc:	f7f5 ffc6 	bl	2004c <bsd_os_errno_set>
   2a0c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a0c4:	e7ac      	b.n	2a020 <mfu_interface_close+0x18>
   2a0c6:	2001      	movs	r0, #1
   2a0c8:	f7f5 ffc0 	bl	2004c <bsd_os_errno_set>
   2a0cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a0d0:	e7a6      	b.n	2a020 <mfu_interface_close+0x18>
   2a0d2:	bf00      	nop
   2a0d4:	20022a94 	.word	0x20022a94
   2a0d8:	20027620 	.word	0x20027620
   2a0dc:	20022aa0 	.word	0x20022aa0
   2a0e0:	20022a98 	.word	0x20022a98

0002a0e4 <mfu_interface_sendto>:
   2a0e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a0e8:	4e64      	ldr	r6, [pc, #400]	; (2a27c <mfu_interface_sendto+0x198>)
   2a0ea:	460f      	mov	r7, r1
   2a0ec:	6831      	ldr	r1, [r6, #0]
   2a0ee:	4615      	mov	r5, r2
   2a0f0:	1e8a      	subs	r2, r1, #2
   2a0f2:	2a01      	cmp	r2, #1
   2a0f4:	b082      	sub	sp, #8
   2a0f6:	f200 80b4 	bhi.w	2a262 <mfu_interface_sendto+0x17e>
   2a0fa:	2f00      	cmp	r7, #0
   2a0fc:	f000 80a5 	beq.w	2a24a <mfu_interface_sendto+0x166>
   2a100:	2d00      	cmp	r5, #0
   2a102:	f000 80a2 	beq.w	2a24a <mfu_interface_sendto+0x166>
   2a106:	2b00      	cmp	r3, #0
   2a108:	f040 80b1 	bne.w	2a26e <mfu_interface_sendto+0x18a>
   2a10c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2a10e:	2b00      	cmp	r3, #0
   2a110:	f040 80a1 	bne.w	2a256 <mfu_interface_sendto+0x172>
   2a114:	2902      	cmp	r1, #2
   2a116:	d04f      	beq.n	2a1b8 <mfu_interface_sendto+0xd4>
   2a118:	46e8      	mov	r8, sp
   2a11a:	4640      	mov	r0, r8
   2a11c:	4629      	mov	r1, r5
   2a11e:	f7fd f969 	bl	273f4 <rpc_dfu_client_request_alloc>
   2a122:	4606      	mov	r6, r0
   2a124:	b140      	cbz	r0, 2a138 <mfu_interface_sendto+0x54>
   2a126:	200c      	movs	r0, #12
   2a128:	f7f5 ff90 	bl	2004c <bsd_os_errno_set>
   2a12c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2a130:	4628      	mov	r0, r5
   2a132:	b002      	add	sp, #8
   2a134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2a138:	9b00      	ldr	r3, [sp, #0]
   2a13a:	4639      	mov	r1, r7
   2a13c:	6818      	ldr	r0, [r3, #0]
   2a13e:	462a      	mov	r2, r5
   2a140:	f00e ff3f 	bl	38fc2 <memcpy>
   2a144:	2104      	movs	r1, #4
   2a146:	4c4e      	ldr	r4, [pc, #312]	; (2a280 <mfu_interface_sendto+0x19c>)
   2a148:	9800      	ldr	r0, [sp, #0]
   2a14a:	8823      	ldrh	r3, [r4, #0]
   2a14c:	6045      	str	r5, [r0, #4]
   2a14e:	3301      	adds	r3, #1
   2a150:	b29b      	uxth	r3, r3
   2a152:	041a      	lsls	r2, r3, #16
   2a154:	8023      	strh	r3, [r4, #0]
   2a156:	430a      	orrs	r2, r1
   2a158:	4c4a      	ldr	r4, [pc, #296]	; (2a284 <mfu_interface_sendto+0x1a0>)
   2a15a:	60c2      	str	r2, [r0, #12]
   2a15c:	7246      	strb	r6, [r0, #9]
   2a15e:	7286      	strb	r6, [r0, #10]
   2a160:	72c6      	strb	r6, [r0, #11]
   2a162:	7201      	strb	r1, [r0, #8]
   2a164:	6026      	str	r6, [r4, #0]
   2a166:	f7fd f959 	bl	2741c <rpc_dfu_client_request_send>
   2a16a:	2800      	cmp	r0, #0
   2a16c:	d163      	bne.n	2a236 <mfu_interface_sendto+0x152>
   2a16e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a172:	ae02      	add	r6, sp, #8
   2a174:	4f41      	ldr	r7, [pc, #260]	; (2a27c <mfu_interface_sendto+0x198>)
   2a176:	f846 3d04 	str.w	r3, [r6, #-4]!
   2a17a:	e004      	b.n	2a186 <mfu_interface_sendto+0xa2>
   2a17c:	4631      	mov	r1, r6
   2a17e:	4638      	mov	r0, r7
   2a180:	f7f5 feba 	bl	1fef8 <bsd_os_timedwait>
   2a184:	b978      	cbnz	r0, 2a1a6 <mfu_interface_sendto+0xc2>
   2a186:	6820      	ldr	r0, [r4, #0]
   2a188:	2800      	cmp	r0, #0
   2a18a:	d0f7      	beq.n	2a17c <mfu_interface_sendto+0x98>
   2a18c:	6904      	ldr	r4, [r0, #16]
   2a18e:	f7fd f959 	bl	27444 <rpc_dfu_client_message_free>
   2a192:	2c00      	cmp	r4, #0
   2a194:	d0cc      	beq.n	2a130 <mfu_interface_sendto+0x4c>
   2a196:	4b3c      	ldr	r3, [pc, #240]	; (2a288 <mfu_interface_sendto+0x1a4>)
   2a198:	2008      	movs	r0, #8
   2a19a:	601c      	str	r4, [r3, #0]
   2a19c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2a1a0:	f7f5 ff54 	bl	2004c <bsd_os_errno_set>
   2a1a4:	e7c4      	b.n	2a130 <mfu_interface_sendto+0x4c>
   2a1a6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2a1aa:	203c      	movs	r0, #60	; 0x3c
   2a1ac:	f7f5 ff4e 	bl	2004c <bsd_os_errno_set>
   2a1b0:	4628      	mov	r0, r5
   2a1b2:	b002      	add	sp, #8
   2a1b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2a1b8:	46e8      	mov	r8, sp
   2a1ba:	4619      	mov	r1, r3
   2a1bc:	4640      	mov	r0, r8
   2a1be:	f7fd f919 	bl	273f4 <rpc_dfu_client_request_alloc>
   2a1c2:	4602      	mov	r2, r0
   2a1c4:	2800      	cmp	r0, #0
   2a1c6:	d1ae      	bne.n	2a126 <mfu_interface_sendto+0x42>
   2a1c8:	f04f 0c08 	mov.w	ip, #8
   2a1cc:	492c      	ldr	r1, [pc, #176]	; (2a280 <mfu_interface_sendto+0x19c>)
   2a1ce:	482f      	ldr	r0, [pc, #188]	; (2a28c <mfu_interface_sendto+0x1a8>)
   2a1d0:	880b      	ldrh	r3, [r1, #0]
   2a1d2:	6804      	ldr	r4, [r0, #0]
   2a1d4:	3301      	adds	r3, #1
   2a1d6:	9800      	ldr	r0, [sp, #0]
   2a1d8:	b29b      	uxth	r3, r3
   2a1da:	800b      	strh	r3, [r1, #0]
   2a1dc:	041b      	lsls	r3, r3, #16
   2a1de:	f043 0303 	orr.w	r3, r3, #3
   2a1e2:	6104      	str	r4, [r0, #16]
   2a1e4:	4c27      	ldr	r4, [pc, #156]	; (2a284 <mfu_interface_sendto+0x1a0>)
   2a1e6:	60c3      	str	r3, [r0, #12]
   2a1e8:	7102      	strb	r2, [r0, #4]
   2a1ea:	7142      	strb	r2, [r0, #5]
   2a1ec:	7182      	strb	r2, [r0, #6]
   2a1ee:	71c2      	strb	r2, [r0, #7]
   2a1f0:	7242      	strb	r2, [r0, #9]
   2a1f2:	7282      	strb	r2, [r0, #10]
   2a1f4:	72c2      	strb	r2, [r0, #11]
   2a1f6:	f880 c008 	strb.w	ip, [r0, #8]
   2a1fa:	2103      	movs	r1, #3
   2a1fc:	6022      	str	r2, [r4, #0]
   2a1fe:	f7fd f90d 	bl	2741c <rpc_dfu_client_request_send>
   2a202:	b9c0      	cbnz	r0, 2a236 <mfu_interface_sendto+0x152>
   2a204:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a208:	f10d 0908 	add.w	r9, sp, #8
   2a20c:	f849 3d04 	str.w	r3, [r9, #-4]!
   2a210:	46b2      	mov	sl, r6
   2a212:	e005      	b.n	2a220 <mfu_interface_sendto+0x13c>
   2a214:	4649      	mov	r1, r9
   2a216:	4650      	mov	r0, sl
   2a218:	f7f5 fe6e 	bl	1fef8 <bsd_os_timedwait>
   2a21c:	2800      	cmp	r0, #0
   2a21e:	d1c2      	bne.n	2a1a6 <mfu_interface_sendto+0xc2>
   2a220:	6820      	ldr	r0, [r4, #0]
   2a222:	2800      	cmp	r0, #0
   2a224:	d0f6      	beq.n	2a214 <mfu_interface_sendto+0x130>
   2a226:	6904      	ldr	r4, [r0, #16]
   2a228:	f7fd f90c 	bl	27444 <rpc_dfu_client_message_free>
   2a22c:	2c00      	cmp	r4, #0
   2a22e:	d1b2      	bne.n	2a196 <mfu_interface_sendto+0xb2>
   2a230:	2303      	movs	r3, #3
   2a232:	6033      	str	r3, [r6, #0]
   2a234:	e771      	b.n	2a11a <mfu_interface_sendto+0x36>
   2a236:	9800      	ldr	r0, [sp, #0]
   2a238:	6803      	ldr	r3, [r0, #0]
   2a23a:	b11b      	cbz	r3, 2a244 <mfu_interface_sendto+0x160>
   2a23c:	4618      	mov	r0, r3
   2a23e:	f7fd f909 	bl	27454 <rpc_dfu_client_data_free>
   2a242:	9800      	ldr	r0, [sp, #0]
   2a244:	f7fd f8fe 	bl	27444 <rpc_dfu_client_message_free>
   2a248:	e76d      	b.n	2a126 <mfu_interface_sendto+0x42>
   2a24a:	2016      	movs	r0, #22
   2a24c:	f7f5 fefe 	bl	2004c <bsd_os_errno_set>
   2a250:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2a254:	e76c      	b.n	2a130 <mfu_interface_sendto+0x4c>
   2a256:	2038      	movs	r0, #56	; 0x38
   2a258:	f7f5 fef8 	bl	2004c <bsd_os_errno_set>
   2a25c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2a260:	e766      	b.n	2a130 <mfu_interface_sendto+0x4c>
   2a262:	2001      	movs	r0, #1
   2a264:	f7f5 fef2 	bl	2004c <bsd_os_errno_set>
   2a268:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2a26c:	e760      	b.n	2a130 <mfu_interface_sendto+0x4c>
   2a26e:	202d      	movs	r0, #45	; 0x2d
   2a270:	f7f5 feec 	bl	2004c <bsd_os_errno_set>
   2a274:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2a278:	e75a      	b.n	2a130 <mfu_interface_sendto+0x4c>
   2a27a:	bf00      	nop
   2a27c:	20022a94 	.word	0x20022a94
   2a280:	20027620 	.word	0x20027620
   2a284:	20022aa0 	.word	0x20022aa0
   2a288:	20022a98 	.word	0x20022a98
   2a28c:	20022a9c 	.word	0x20022a9c

0002a290 <mfu_interface_setopt>:
   2a290:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a292:	4846      	ldr	r0, [pc, #280]	; (2a3ac <mfu_interface_setopt+0x11c>)
   2a294:	b083      	sub	sp, #12
   2a296:	6800      	ldr	r0, [r0, #0]
   2a298:	3802      	subs	r0, #2
   2a29a:	2801      	cmp	r0, #1
   2a29c:	d877      	bhi.n	2a38e <mfu_interface_setopt+0xfe>
   2a29e:	f240 2003 	movw	r0, #515	; 0x203
   2a2a2:	4281      	cmp	r1, r0
   2a2a4:	d16d      	bne.n	2a382 <mfu_interface_setopt+0xf2>
   2a2a6:	3a04      	subs	r2, #4
   2a2a8:	2a03      	cmp	r2, #3
   2a2aa:	d85c      	bhi.n	2a366 <mfu_interface_setopt+0xd6>
   2a2ac:	e8df f002 	tbb	[pc, r2]
   2a2b0:	514e024b 	.word	0x514e024b
   2a2b4:	2407      	movs	r4, #7
   2a2b6:	4625      	mov	r5, r4
   2a2b8:	2100      	movs	r1, #0
   2a2ba:	4668      	mov	r0, sp
   2a2bc:	f7fd f89a 	bl	273f4 <rpc_dfu_client_request_alloc>
   2a2c0:	4603      	mov	r3, r0
   2a2c2:	2800      	cmp	r0, #0
   2a2c4:	d138      	bne.n	2a338 <mfu_interface_setopt+0xa8>
   2a2c6:	2704      	movs	r7, #4
   2a2c8:	4e39      	ldr	r6, [pc, #228]	; (2a3b0 <mfu_interface_setopt+0x120>)
   2a2ca:	9800      	ldr	r0, [sp, #0]
   2a2cc:	8832      	ldrh	r2, [r6, #0]
   2a2ce:	4629      	mov	r1, r5
   2a2d0:	3201      	adds	r2, #1
   2a2d2:	b292      	uxth	r2, r2
   2a2d4:	ea44 4502 	orr.w	r5, r4, r2, lsl #16
   2a2d8:	4c36      	ldr	r4, [pc, #216]	; (2a3b4 <mfu_interface_setopt+0x124>)
   2a2da:	60c5      	str	r5, [r0, #12]
   2a2dc:	7103      	strb	r3, [r0, #4]
   2a2de:	7143      	strb	r3, [r0, #5]
   2a2e0:	7183      	strb	r3, [r0, #6]
   2a2e2:	71c3      	strb	r3, [r0, #7]
   2a2e4:	7243      	strb	r3, [r0, #9]
   2a2e6:	7283      	strb	r3, [r0, #10]
   2a2e8:	72c3      	strb	r3, [r0, #11]
   2a2ea:	7207      	strb	r7, [r0, #8]
   2a2ec:	8032      	strh	r2, [r6, #0]
   2a2ee:	6023      	str	r3, [r4, #0]
   2a2f0:	f7fd f894 	bl	2741c <rpc_dfu_client_request_send>
   2a2f4:	b9b8      	cbnz	r0, 2a326 <mfu_interface_setopt+0x96>
   2a2f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a2fa:	ad02      	add	r5, sp, #8
   2a2fc:	4e2b      	ldr	r6, [pc, #172]	; (2a3ac <mfu_interface_setopt+0x11c>)
   2a2fe:	f845 3d04 	str.w	r3, [r5, #-4]!
   2a302:	e005      	b.n	2a310 <mfu_interface_setopt+0x80>
   2a304:	4629      	mov	r1, r5
   2a306:	4630      	mov	r0, r6
   2a308:	f7f5 fdf6 	bl	1fef8 <bsd_os_timedwait>
   2a30c:	2800      	cmp	r0, #0
   2a30e:	d131      	bne.n	2a374 <mfu_interface_setopt+0xe4>
   2a310:	6820      	ldr	r0, [r4, #0]
   2a312:	2800      	cmp	r0, #0
   2a314:	d0f6      	beq.n	2a304 <mfu_interface_setopt+0x74>
   2a316:	6904      	ldr	r4, [r0, #16]
   2a318:	f7fd f894 	bl	27444 <rpc_dfu_client_message_free>
   2a31c:	2c00      	cmp	r4, #0
   2a31e:	d13c      	bne.n	2a39a <mfu_interface_setopt+0x10a>
   2a320:	4620      	mov	r0, r4
   2a322:	b003      	add	sp, #12
   2a324:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a326:	9800      	ldr	r0, [sp, #0]
   2a328:	6803      	ldr	r3, [r0, #0]
   2a32a:	b11b      	cbz	r3, 2a334 <mfu_interface_setopt+0xa4>
   2a32c:	4618      	mov	r0, r3
   2a32e:	f7fd f891 	bl	27454 <rpc_dfu_client_data_free>
   2a332:	9800      	ldr	r0, [sp, #0]
   2a334:	f7fd f886 	bl	27444 <rpc_dfu_client_message_free>
   2a338:	200c      	movs	r0, #12
   2a33a:	f7f5 fe87 	bl	2004c <bsd_os_errno_set>
   2a33e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a342:	b003      	add	sp, #12
   2a344:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a346:	2405      	movs	r4, #5
   2a348:	4625      	mov	r5, r4
   2a34a:	e7b5      	b.n	2a2b8 <mfu_interface_setopt+0x28>
   2a34c:	2408      	movs	r4, #8
   2a34e:	4625      	mov	r5, r4
   2a350:	e7b2      	b.n	2a2b8 <mfu_interface_setopt+0x28>
   2a352:	b1b3      	cbz	r3, 2a382 <mfu_interface_setopt+0xf2>
   2a354:	9a08      	ldr	r2, [sp, #32]
   2a356:	2a04      	cmp	r2, #4
   2a358:	d113      	bne.n	2a382 <mfu_interface_setopt+0xf2>
   2a35a:	2000      	movs	r0, #0
   2a35c:	681a      	ldr	r2, [r3, #0]
   2a35e:	4b16      	ldr	r3, [pc, #88]	; (2a3b8 <mfu_interface_setopt+0x128>)
   2a360:	601a      	str	r2, [r3, #0]
   2a362:	b003      	add	sp, #12
   2a364:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a366:	202a      	movs	r0, #42	; 0x2a
   2a368:	f7f5 fe70 	bl	2004c <bsd_os_errno_set>
   2a36c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a370:	b003      	add	sp, #12
   2a372:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a374:	203c      	movs	r0, #60	; 0x3c
   2a376:	f7f5 fe69 	bl	2004c <bsd_os_errno_set>
   2a37a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a37e:	b003      	add	sp, #12
   2a380:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a382:	2016      	movs	r0, #22
   2a384:	f7f5 fe62 	bl	2004c <bsd_os_errno_set>
   2a388:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a38c:	e7c9      	b.n	2a322 <mfu_interface_setopt+0x92>
   2a38e:	2001      	movs	r0, #1
   2a390:	f7f5 fe5c 	bl	2004c <bsd_os_errno_set>
   2a394:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a398:	e7c3      	b.n	2a322 <mfu_interface_setopt+0x92>
   2a39a:	4b08      	ldr	r3, [pc, #32]	; (2a3bc <mfu_interface_setopt+0x12c>)
   2a39c:	2008      	movs	r0, #8
   2a39e:	601c      	str	r4, [r3, #0]
   2a3a0:	f7f5 fe54 	bl	2004c <bsd_os_errno_set>
   2a3a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a3a8:	e7bb      	b.n	2a322 <mfu_interface_setopt+0x92>
   2a3aa:	bf00      	nop
   2a3ac:	20022a94 	.word	0x20022a94
   2a3b0:	20027620 	.word	0x20027620
   2a3b4:	20022aa0 	.word	0x20022aa0
   2a3b8:	20022a9c 	.word	0x20022a9c
   2a3bc:	20022a98 	.word	0x20022a98

0002a3c0 <mfu_interface_getopt>:
   2a3c0:	f240 2003 	movw	r0, #515	; 0x203
   2a3c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a3c8:	4281      	cmp	r1, r0
   2a3ca:	b082      	sub	sp, #8
   2a3cc:	9e08      	ldr	r6, [sp, #32]
   2a3ce:	f040 80ae 	bne.w	2a52e <mfu_interface_getopt+0x16e>
   2a3d2:	461d      	mov	r5, r3
   2a3d4:	2b00      	cmp	r3, #0
   2a3d6:	f000 80aa 	beq.w	2a52e <mfu_interface_getopt+0x16e>
   2a3da:	2e00      	cmp	r6, #0
   2a3dc:	f000 80a7 	beq.w	2a52e <mfu_interface_getopt+0x16e>
   2a3e0:	4b5e      	ldr	r3, [pc, #376]	; (2a55c <mfu_interface_getopt+0x19c>)
   2a3e2:	681b      	ldr	r3, [r3, #0]
   2a3e4:	3b02      	subs	r3, #2
   2a3e6:	2b01      	cmp	r3, #1
   2a3e8:	f200 80a7 	bhi.w	2a53a <mfu_interface_getopt+0x17a>
   2a3ec:	3a01      	subs	r2, #1
   2a3ee:	2a13      	cmp	r2, #19
   2a3f0:	d879      	bhi.n	2a4e6 <mfu_interface_getopt+0x126>
   2a3f2:	e8df f002 	tbb	[pc, r2]
   2a3f6:	5f17      	.short	0x5f17
   2a3f8:	78787878 	.word	0x78787878
   2a3fc:	78787872 	.word	0x78787872
   2a400:	78787878 	.word	0x78787878
   2a404:	78787878 	.word	0x78787878
   2a408:	0a78      	.short	0x0a78
   2a40a:	6833      	ldr	r3, [r6, #0]
   2a40c:	2b04      	cmp	r3, #4
   2a40e:	f040 808e 	bne.w	2a52e <mfu_interface_getopt+0x16e>
   2a412:	2200      	movs	r2, #0
   2a414:	4610      	mov	r0, r2
   2a416:	4b52      	ldr	r3, [pc, #328]	; (2a560 <mfu_interface_getopt+0x1a0>)
   2a418:	6819      	ldr	r1, [r3, #0]
   2a41a:	601a      	str	r2, [r3, #0]
   2a41c:	6029      	str	r1, [r5, #0]
   2a41e:	b002      	add	sp, #8
   2a420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a424:	6833      	ldr	r3, [r6, #0]
   2a426:	2b24      	cmp	r3, #36	; 0x24
   2a428:	f040 8081 	bne.w	2a52e <mfu_interface_getopt+0x16e>
   2a42c:	2401      	movs	r4, #1
   2a42e:	46a0      	mov	r8, r4
   2a430:	2100      	movs	r1, #0
   2a432:	4668      	mov	r0, sp
   2a434:	f7fc ffde 	bl	273f4 <rpc_dfu_client_request_alloc>
   2a438:	2800      	cmp	r0, #0
   2a43a:	d146      	bne.n	2a4ca <mfu_interface_getopt+0x10a>
   2a43c:	4949      	ldr	r1, [pc, #292]	; (2a564 <mfu_interface_getopt+0x1a4>)
   2a43e:	9b00      	ldr	r3, [sp, #0]
   2a440:	880a      	ldrh	r2, [r1, #0]
   2a442:	f1b8 0f03 	cmp.w	r8, #3
   2a446:	f102 0201 	add.w	r2, r2, #1
   2a44a:	b292      	uxth	r2, r2
   2a44c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   2a450:	7118      	strb	r0, [r3, #4]
   2a452:	800a      	strh	r2, [r1, #0]
   2a454:	60dc      	str	r4, [r3, #12]
   2a456:	7158      	strb	r0, [r3, #5]
   2a458:	7198      	strb	r0, [r3, #6]
   2a45a:	71d8      	strb	r0, [r3, #7]
   2a45c:	d04b      	beq.n	2a4f6 <mfu_interface_getopt+0x136>
   2a45e:	2104      	movs	r1, #4
   2a460:	2200      	movs	r2, #0
   2a462:	4f41      	ldr	r7, [pc, #260]	; (2a568 <mfu_interface_getopt+0x1a8>)
   2a464:	6099      	str	r1, [r3, #8]
   2a466:	4618      	mov	r0, r3
   2a468:	4641      	mov	r1, r8
   2a46a:	603a      	str	r2, [r7, #0]
   2a46c:	f7fc ffd6 	bl	2741c <rpc_dfu_client_request_send>
   2a470:	2800      	cmp	r0, #0
   2a472:	d14d      	bne.n	2a510 <mfu_interface_getopt+0x150>
   2a474:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a478:	ac02      	add	r4, sp, #8
   2a47a:	f844 3d04 	str.w	r3, [r4, #-4]!
   2a47e:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 2a55c <mfu_interface_getopt+0x19c>
   2a482:	e005      	b.n	2a490 <mfu_interface_getopt+0xd0>
   2a484:	4621      	mov	r1, r4
   2a486:	4640      	mov	r0, r8
   2a488:	f7f5 fd36 	bl	1fef8 <bsd_os_timedwait>
   2a48c:	2800      	cmp	r0, #0
   2a48e:	d137      	bne.n	2a500 <mfu_interface_getopt+0x140>
   2a490:	6839      	ldr	r1, [r7, #0]
   2a492:	2900      	cmp	r1, #0
   2a494:	d0f6      	beq.n	2a484 <mfu_interface_getopt+0xc4>
   2a496:	690c      	ldr	r4, [r1, #16]
   2a498:	2c00      	cmp	r4, #0
   2a49a:	d154      	bne.n	2a546 <mfu_interface_getopt+0x186>
   2a49c:	6832      	ldr	r2, [r6, #0]
   2a49e:	3114      	adds	r1, #20
   2a4a0:	4628      	mov	r0, r5
   2a4a2:	f00e fd8e 	bl	38fc2 <memcpy>
   2a4a6:	6838      	ldr	r0, [r7, #0]
   2a4a8:	f7fc ffcc 	bl	27444 <rpc_dfu_client_message_free>
   2a4ac:	4620      	mov	r0, r4
   2a4ae:	b002      	add	sp, #8
   2a4b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a4b4:	6833      	ldr	r3, [r6, #0]
   2a4b6:	2b04      	cmp	r3, #4
   2a4b8:	d139      	bne.n	2a52e <mfu_interface_getopt+0x16e>
   2a4ba:	2402      	movs	r4, #2
   2a4bc:	2100      	movs	r1, #0
   2a4be:	4668      	mov	r0, sp
   2a4c0:	46a0      	mov	r8, r4
   2a4c2:	f7fc ff97 	bl	273f4 <rpc_dfu_client_request_alloc>
   2a4c6:	2800      	cmp	r0, #0
   2a4c8:	d0b8      	beq.n	2a43c <mfu_interface_getopt+0x7c>
   2a4ca:	200c      	movs	r0, #12
   2a4cc:	f7f5 fdbe 	bl	2004c <bsd_os_errno_set>
   2a4d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a4d4:	b002      	add	sp, #8
   2a4d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a4da:	6833      	ldr	r3, [r6, #0]
   2a4dc:	2b04      	cmp	r3, #4
   2a4de:	d126      	bne.n	2a52e <mfu_interface_getopt+0x16e>
   2a4e0:	2409      	movs	r4, #9
   2a4e2:	46a0      	mov	r8, r4
   2a4e4:	e7a4      	b.n	2a430 <mfu_interface_getopt+0x70>
   2a4e6:	202a      	movs	r0, #42	; 0x2a
   2a4e8:	f7f5 fdb0 	bl	2004c <bsd_os_errno_set>
   2a4ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a4f0:	b002      	add	sp, #8
   2a4f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a4f6:	4a1d      	ldr	r2, [pc, #116]	; (2a56c <mfu_interface_getopt+0x1ac>)
   2a4f8:	2108      	movs	r1, #8
   2a4fa:	6812      	ldr	r2, [r2, #0]
   2a4fc:	611a      	str	r2, [r3, #16]
   2a4fe:	e7af      	b.n	2a460 <mfu_interface_getopt+0xa0>
   2a500:	203c      	movs	r0, #60	; 0x3c
   2a502:	f7f5 fda3 	bl	2004c <bsd_os_errno_set>
   2a506:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a50a:	b002      	add	sp, #8
   2a50c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a510:	9800      	ldr	r0, [sp, #0]
   2a512:	6803      	ldr	r3, [r0, #0]
   2a514:	b11b      	cbz	r3, 2a51e <mfu_interface_getopt+0x15e>
   2a516:	4618      	mov	r0, r3
   2a518:	f7fc ff9c 	bl	27454 <rpc_dfu_client_data_free>
   2a51c:	9800      	ldr	r0, [sp, #0]
   2a51e:	f7fc ff91 	bl	27444 <rpc_dfu_client_message_free>
   2a522:	200c      	movs	r0, #12
   2a524:	f7f5 fd92 	bl	2004c <bsd_os_errno_set>
   2a528:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a52c:	e7d2      	b.n	2a4d4 <mfu_interface_getopt+0x114>
   2a52e:	2016      	movs	r0, #22
   2a530:	f7f5 fd8c 	bl	2004c <bsd_os_errno_set>
   2a534:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a538:	e771      	b.n	2a41e <mfu_interface_getopt+0x5e>
   2a53a:	2001      	movs	r0, #1
   2a53c:	f7f5 fd86 	bl	2004c <bsd_os_errno_set>
   2a540:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a544:	e76b      	b.n	2a41e <mfu_interface_getopt+0x5e>
   2a546:	4b06      	ldr	r3, [pc, #24]	; (2a560 <mfu_interface_getopt+0x1a0>)
   2a548:	2008      	movs	r0, #8
   2a54a:	601c      	str	r4, [r3, #0]
   2a54c:	f7f5 fd7e 	bl	2004c <bsd_os_errno_set>
   2a550:	6838      	ldr	r0, [r7, #0]
   2a552:	f7fc ff77 	bl	27444 <rpc_dfu_client_message_free>
   2a556:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a55a:	e760      	b.n	2a41e <mfu_interface_getopt+0x5e>
   2a55c:	20022a94 	.word	0x20022a94
   2a560:	20022a98 	.word	0x20022a98
   2a564:	20027620 	.word	0x20027620
   2a568:	20022aa0 	.word	0x20022aa0
   2a56c:	20022a9c 	.word	0x20022a9c

0002a570 <interface_init>:
   2a570:	b508      	push	{r3, lr}
   2a572:	f44f 72b4 	mov.w	r2, #360	; 0x168
   2a576:	2100      	movs	r1, #0
   2a578:	4802      	ldr	r0, [pc, #8]	; (2a584 <interface_init+0x14>)
   2a57a:	f00e fd5c 	bl	39036 <memset>
   2a57e:	2000      	movs	r0, #0
   2a580:	bd08      	pop	{r3, pc}
   2a582:	bf00      	nop
   2a584:	20029090 	.word	0x20029090

0002a588 <interface_socket_allocate>:
   2a588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a58a:	4b30      	ldr	r3, [pc, #192]	; (2a64c <interface_socket_allocate+0xc4>)
   2a58c:	4606      	mov	r6, r0
   2a58e:	681d      	ldr	r5, [r3, #0]
   2a590:	4608      	mov	r0, r1
   2a592:	b31d      	cbz	r5, 2a5dc <interface_socket_allocate+0x54>
   2a594:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   2a596:	2c00      	cmp	r4, #0
   2a598:	d04a      	beq.n	2a630 <interface_socket_allocate+0xa8>
   2a59a:	6d1c      	ldr	r4, [r3, #80]	; 0x50
   2a59c:	2c00      	cmp	r4, #0
   2a59e:	d049      	beq.n	2a634 <interface_socket_allocate+0xac>
   2a5a0:	6f9c      	ldr	r4, [r3, #120]	; 0x78
   2a5a2:	2c00      	cmp	r4, #0
   2a5a4:	d048      	beq.n	2a638 <interface_socket_allocate+0xb0>
   2a5a6:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
   2a5aa:	2900      	cmp	r1, #0
   2a5ac:	d046      	beq.n	2a63c <interface_socket_allocate+0xb4>
   2a5ae:	f8d3 10c8 	ldr.w	r1, [r3, #200]	; 0xc8
   2a5b2:	b191      	cbz	r1, 2a5da <interface_socket_allocate+0x52>
   2a5b4:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
   2a5b8:	2900      	cmp	r1, #0
   2a5ba:	d043      	beq.n	2a644 <interface_socket_allocate+0xbc>
   2a5bc:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
   2a5c0:	2900      	cmp	r1, #0
   2a5c2:	d041      	beq.n	2a648 <interface_socket_allocate+0xc0>
   2a5c4:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
   2a5c8:	2900      	cmp	r1, #0
   2a5ca:	d039      	beq.n	2a640 <interface_socket_allocate+0xb8>
   2a5cc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2a5d0:	2069      	movs	r0, #105	; 0x69
   2a5d2:	f7f5 fd3b 	bl	2004c <bsd_os_errno_set>
   2a5d6:	4628      	mov	r0, r5
   2a5d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a5da:	2505      	movs	r5, #5
   2a5dc:	f04f 0c01 	mov.w	ip, #1
   2a5e0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2a5e4:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   2a5e8:	00e4      	lsls	r4, r4, #3
   2a5ea:	f843 c004 	str.w	ip, [r3, r4]
   2a5ee:	441c      	add	r4, r3
   2a5f0:	4611      	mov	r1, r2
   2a5f2:	61a7      	str	r7, [r4, #24]
   2a5f4:	4622      	mov	r2, r4
   2a5f6:	f7fe ff9b 	bl	29530 <packet_handler_create>
   2a5fa:	4603      	mov	r3, r0
   2a5fc:	61e0      	str	r0, [r4, #28]
   2a5fe:	b158      	cbz	r0, 2a618 <interface_socket_allocate+0x90>
   2a600:	681b      	ldr	r3, [r3, #0]
   2a602:	681b      	ldr	r3, [r3, #0]
   2a604:	4798      	blx	r3
   2a606:	b910      	cbnz	r0, 2a60e <interface_socket_allocate+0x86>
   2a608:	6034      	str	r4, [r6, #0]
   2a60a:	4628      	mov	r0, r5
   2a60c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a60e:	69e0      	ldr	r0, [r4, #28]
   2a610:	f7fe ffae 	bl	29570 <packet_handler_delete>
   2a614:	2300      	movs	r3, #0
   2a616:	61e3      	str	r3, [r4, #28]
   2a618:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2a61c:	2228      	movs	r2, #40	; 0x28
   2a61e:	2100      	movs	r1, #0
   2a620:	4620      	mov	r0, r4
   2a622:	f00e fd08 	bl	39036 <memset>
   2a626:	200c      	movs	r0, #12
   2a628:	f7f5 fd10 	bl	2004c <bsd_os_errno_set>
   2a62c:	4628      	mov	r0, r5
   2a62e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a630:	2501      	movs	r5, #1
   2a632:	e7d3      	b.n	2a5dc <interface_socket_allocate+0x54>
   2a634:	2502      	movs	r5, #2
   2a636:	e7d1      	b.n	2a5dc <interface_socket_allocate+0x54>
   2a638:	2503      	movs	r5, #3
   2a63a:	e7cf      	b.n	2a5dc <interface_socket_allocate+0x54>
   2a63c:	2504      	movs	r5, #4
   2a63e:	e7cd      	b.n	2a5dc <interface_socket_allocate+0x54>
   2a640:	2508      	movs	r5, #8
   2a642:	e7cb      	b.n	2a5dc <interface_socket_allocate+0x54>
   2a644:	2506      	movs	r5, #6
   2a646:	e7c9      	b.n	2a5dc <interface_socket_allocate+0x54>
   2a648:	2507      	movs	r5, #7
   2a64a:	e7c7      	b.n	2a5dc <interface_socket_allocate+0x54>
   2a64c:	20029090 	.word	0x20029090

0002a650 <interface_socket_free>:
   2a650:	2808      	cmp	r0, #8
   2a652:	d900      	bls.n	2a656 <interface_socket_free+0x6>
   2a654:	4770      	bx	lr
   2a656:	b510      	push	{r4, lr}
   2a658:	4c07      	ldr	r4, [pc, #28]	; (2a678 <interface_socket_free+0x28>)
   2a65a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   2a65e:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
   2a662:	69e0      	ldr	r0, [r4, #28]
   2a664:	b108      	cbz	r0, 2a66a <interface_socket_free+0x1a>
   2a666:	f7fe ff83 	bl	29570 <packet_handler_delete>
   2a66a:	4620      	mov	r0, r4
   2a66c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2a670:	2228      	movs	r2, #40	; 0x28
   2a672:	2100      	movs	r1, #0
   2a674:	f00e bcdf 	b.w	39036 <memset>
   2a678:	20029090 	.word	0x20029090

0002a67c <interface_socket_packet_handler_update>:
   2a67c:	2808      	cmp	r0, #8
   2a67e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a682:	d81e      	bhi.n	2a6c2 <interface_socket_packet_handler_update+0x46>
   2a684:	ea4f 0880 	mov.w	r8, r0, lsl #2
   2a688:	4e17      	ldr	r6, [pc, #92]	; (2a6e8 <interface_socket_packet_handler_update+0x6c>)
   2a68a:	eb08 0300 	add.w	r3, r8, r0
   2a68e:	00db      	lsls	r3, r3, #3
   2a690:	58f4      	ldr	r4, [r6, r3]
   2a692:	18f5      	adds	r5, r6, r3
   2a694:	b1ac      	cbz	r4, 2a6c2 <interface_socket_packet_handler_update+0x46>
   2a696:	460b      	mov	r3, r1
   2a698:	4604      	mov	r4, r0
   2a69a:	4611      	mov	r1, r2
   2a69c:	4618      	mov	r0, r3
   2a69e:	462a      	mov	r2, r5
   2a6a0:	f8d5 901c 	ldr.w	r9, [r5, #28]
   2a6a4:	f7fe ff44 	bl	29530 <packet_handler_create>
   2a6a8:	61e8      	str	r0, [r5, #28]
   2a6aa:	b1d0      	cbz	r0, 2a6e2 <interface_socket_packet_handler_update+0x66>
   2a6ac:	6803      	ldr	r3, [r0, #0]
   2a6ae:	681b      	ldr	r3, [r3, #0]
   2a6b0:	4798      	blx	r3
   2a6b2:	4607      	mov	r7, r0
   2a6b4:	b948      	cbnz	r0, 2a6ca <interface_socket_packet_handler_update+0x4e>
   2a6b6:	4648      	mov	r0, r9
   2a6b8:	f7fe ff5a 	bl	29570 <packet_handler_delete>
   2a6bc:	4638      	mov	r0, r7
   2a6be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2a6c2:	2705      	movs	r7, #5
   2a6c4:	4638      	mov	r0, r7
   2a6c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2a6ca:	69e8      	ldr	r0, [r5, #28]
   2a6cc:	f7fe ff50 	bl	29570 <packet_handler_delete>
   2a6d0:	eb08 0004 	add.w	r0, r8, r4
   2a6d4:	eb06 06c0 	add.w	r6, r6, r0, lsl #3
   2a6d8:	f8c6 901c 	str.w	r9, [r6, #28]
   2a6dc:	4638      	mov	r0, r7
   2a6de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2a6e2:	2704      	movs	r7, #4
   2a6e4:	e7f4      	b.n	2a6d0 <interface_socket_packet_handler_update+0x54>
   2a6e6:	bf00      	nop
   2a6e8:	20029090 	.word	0x20029090

0002a6ec <interface_socket_wait>:
   2a6ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a6f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   2a6f4:	4c0d      	ldr	r4, [pc, #52]	; (2a72c <interface_socket_wait+0x40>)
   2a6f6:	00c0      	lsls	r0, r0, #3
   2a6f8:	5825      	ldr	r5, [r4, r0]
   2a6fa:	4404      	add	r4, r0
   2a6fc:	4015      	ands	r5, r2
   2a6fe:	428d      	cmp	r5, r1
   2a700:	d011      	beq.n	2a726 <interface_socket_wait+0x3a>
   2a702:	6860      	ldr	r0, [r4, #4]
   2a704:	b978      	cbnz	r0, 2a726 <interface_socket_wait+0x3a>
   2a706:	4698      	mov	r8, r3
   2a708:	460f      	mov	r7, r1
   2a70a:	4616      	mov	r6, r2
   2a70c:	4625      	mov	r5, r4
   2a70e:	e006      	b.n	2a71e <interface_socket_wait+0x32>
   2a710:	686b      	ldr	r3, [r5, #4]
   2a712:	b943      	cbnz	r3, 2a726 <interface_socket_wait+0x3a>
   2a714:	4641      	mov	r1, r8
   2a716:	4620      	mov	r0, r4
   2a718:	f7f5 fbee 	bl	1fef8 <bsd_os_timedwait>
   2a71c:	b920      	cbnz	r0, 2a728 <interface_socket_wait+0x3c>
   2a71e:	6828      	ldr	r0, [r5, #0]
   2a720:	4030      	ands	r0, r6
   2a722:	42b8      	cmp	r0, r7
   2a724:	d1f4      	bne.n	2a710 <interface_socket_wait+0x24>
   2a726:	2000      	movs	r0, #0
   2a728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a72c:	20029090 	.word	0x20029090

0002a730 <interface_from_internal_id_search>:
   2a730:	4b27      	ldr	r3, [pc, #156]	; (2a7d0 <interface_from_internal_id_search+0xa0>)
   2a732:	681a      	ldr	r2, [r3, #0]
   2a734:	b112      	cbz	r2, 2a73c <interface_from_internal_id_search+0xc>
   2a736:	699a      	ldr	r2, [r3, #24]
   2a738:	4282      	cmp	r2, r0
   2a73a:	d039      	beq.n	2a7b0 <interface_from_internal_id_search+0x80>
   2a73c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2a73e:	b112      	cbz	r2, 2a746 <interface_from_internal_id_search+0x16>
   2a740:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   2a742:	4282      	cmp	r2, r0
   2a744:	d036      	beq.n	2a7b4 <interface_from_internal_id_search+0x84>
   2a746:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   2a748:	b112      	cbz	r2, 2a750 <interface_from_internal_id_search+0x20>
   2a74a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   2a74c:	4282      	cmp	r2, r0
   2a74e:	d033      	beq.n	2a7b8 <interface_from_internal_id_search+0x88>
   2a750:	6f9a      	ldr	r2, [r3, #120]	; 0x78
   2a752:	b11a      	cbz	r2, 2a75c <interface_from_internal_id_search+0x2c>
   2a754:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   2a758:	4282      	cmp	r2, r0
   2a75a:	d02f      	beq.n	2a7bc <interface_from_internal_id_search+0x8c>
   2a75c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
   2a760:	b11a      	cbz	r2, 2a76a <interface_from_internal_id_search+0x3a>
   2a762:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   2a766:	4282      	cmp	r2, r0
   2a768:	d02a      	beq.n	2a7c0 <interface_from_internal_id_search+0x90>
   2a76a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
   2a76e:	b11a      	cbz	r2, 2a778 <interface_from_internal_id_search+0x48>
   2a770:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   2a774:	4282      	cmp	r2, r0
   2a776:	d025      	beq.n	2a7c4 <interface_from_internal_id_search+0x94>
   2a778:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   2a77c:	b11a      	cbz	r2, 2a786 <interface_from_internal_id_search+0x56>
   2a77e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   2a782:	4282      	cmp	r2, r0
   2a784:	d020      	beq.n	2a7c8 <interface_from_internal_id_search+0x98>
   2a786:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
   2a78a:	b11a      	cbz	r2, 2a794 <interface_from_internal_id_search+0x64>
   2a78c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   2a790:	4282      	cmp	r2, r0
   2a792:	d01b      	beq.n	2a7cc <interface_from_internal_id_search+0x9c>
   2a794:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   2a798:	b13a      	cbz	r2, 2a7aa <interface_from_internal_id_search+0x7a>
   2a79a:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
   2a79e:	4283      	cmp	r3, r0
   2a7a0:	bf14      	ite	ne
   2a7a2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   2a7a6:	2008      	moveq	r0, #8
   2a7a8:	4770      	bx	lr
   2a7aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a7ae:	4770      	bx	lr
   2a7b0:	2000      	movs	r0, #0
   2a7b2:	4770      	bx	lr
   2a7b4:	2001      	movs	r0, #1
   2a7b6:	4770      	bx	lr
   2a7b8:	2002      	movs	r0, #2
   2a7ba:	4770      	bx	lr
   2a7bc:	2003      	movs	r0, #3
   2a7be:	4770      	bx	lr
   2a7c0:	2004      	movs	r0, #4
   2a7c2:	4770      	bx	lr
   2a7c4:	2005      	movs	r0, #5
   2a7c6:	4770      	bx	lr
   2a7c8:	2006      	movs	r0, #6
   2a7ca:	4770      	bx	lr
   2a7cc:	2007      	movs	r0, #7
   2a7ce:	4770      	bx	lr
   2a7d0:	20029090 	.word	0x20029090

0002a7d4 <interface_socket_from_handle_get>:
   2a7d4:	2808      	cmp	r0, #8
   2a7d6:	d807      	bhi.n	2a7e8 <interface_socket_from_handle_get+0x14>
   2a7d8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   2a7dc:	4b03      	ldr	r3, [pc, #12]	; (2a7ec <interface_socket_from_handle_get+0x18>)
   2a7de:	00c0      	lsls	r0, r0, #3
   2a7e0:	581a      	ldr	r2, [r3, r0]
   2a7e2:	b10a      	cbz	r2, 2a7e8 <interface_socket_from_handle_get+0x14>
   2a7e4:	4418      	add	r0, r3
   2a7e6:	4770      	bx	lr
   2a7e8:	2000      	movs	r0, #0
   2a7ea:	4770      	bx	lr
   2a7ec:	20029090 	.word	0x20029090

0002a7f0 <interface_socket_event_get>:
   2a7f0:	b119      	cbz	r1, 2a7fa <interface_socket_event_get+0xa>
   2a7f2:	2808      	cmp	r0, #8
   2a7f4:	d902      	bls.n	2a7fc <interface_socket_event_get+0xc>
   2a7f6:	2310      	movs	r3, #16
   2a7f8:	600b      	str	r3, [r1, #0]
   2a7fa:	4770      	bx	lr
   2a7fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   2a800:	4b07      	ldr	r3, [pc, #28]	; (2a820 <interface_socket_event_get+0x30>)
   2a802:	00c0      	lsls	r0, r0, #3
   2a804:	581a      	ldr	r2, [r3, r0]
   2a806:	2a00      	cmp	r2, #0
   2a808:	d0f5      	beq.n	2a7f6 <interface_socket_event_get+0x6>
   2a80a:	581b      	ldr	r3, [r3, r0]
   2a80c:	0c1b      	lsrs	r3, r3, #16
   2a80e:	f003 020a 	and.w	r2, r3, #10
   2a812:	2a0a      	cmp	r2, #10
   2a814:	bf14      	ite	ne
   2a816:	f003 030f 	andne.w	r3, r3, #15
   2a81a:	f003 030d 	andeq.w	r3, r3, #13
   2a81e:	e7eb      	b.n	2a7f8 <interface_socket_event_get+0x8>
   2a820:	20029090 	.word	0x20029090

0002a824 <interface_socket_setopt>:
   2a824:	2808      	cmp	r0, #8
   2a826:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a828:	d82c      	bhi.n	2a884 <interface_socket_setopt+0x60>
   2a82a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   2a82e:	4e1e      	ldr	r6, [pc, #120]	; (2a8a8 <interface_socket_setopt+0x84>)
   2a830:	00c0      	lsls	r0, r0, #3
   2a832:	5834      	ldr	r4, [r6, r0]
   2a834:	b334      	cbz	r4, 2a884 <interface_socket_setopt+0x60>
   2a836:	2901      	cmp	r1, #1
   2a838:	d11e      	bne.n	2a878 <interface_socket_setopt+0x54>
   2a83a:	f1a2 0114 	sub.w	r1, r2, #20
   2a83e:	2901      	cmp	r1, #1
   2a840:	d81a      	bhi.n	2a878 <interface_socket_setopt+0x54>
   2a842:	9906      	ldr	r1, [sp, #24]
   2a844:	2908      	cmp	r1, #8
   2a846:	d123      	bne.n	2a890 <interface_socket_setopt+0x6c>
   2a848:	b313      	cbz	r3, 2a890 <interface_socket_setopt+0x6c>
   2a84a:	6859      	ldr	r1, [r3, #4]
   2a84c:	4c17      	ldr	r4, [pc, #92]	; (2a8ac <interface_socket_setopt+0x88>)
   2a84e:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   2a852:	fba4 4101 	umull	r4, r1, r4, r1
   2a856:	0989      	lsrs	r1, r1, #6
   2a858:	460c      	mov	r4, r1
   2a85a:	2500      	movs	r5, #0
   2a85c:	681b      	ldr	r3, [r3, #0]
   2a85e:	fbe7 4503 	umlal	r4, r5, r7, r3
   2a862:	2d01      	cmp	r5, #1
   2a864:	bf08      	it	eq
   2a866:	2c00      	cmpeq	r4, #0
   2a868:	d218      	bcs.n	2a89c <interface_socket_setopt+0x78>
   2a86a:	4430      	add	r0, r6
   2a86c:	2a14      	cmp	r2, #20
   2a86e:	bf0c      	ite	eq
   2a870:	6204      	streq	r4, [r0, #32]
   2a872:	6244      	strne	r4, [r0, #36]	; 0x24
   2a874:	2000      	movs	r0, #0
   2a876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a878:	202a      	movs	r0, #42	; 0x2a
   2a87a:	f7f5 fbe7 	bl	2004c <bsd_os_errno_set>
   2a87e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a884:	2009      	movs	r0, #9
   2a886:	f7f5 fbe1 	bl	2004c <bsd_os_errno_set>
   2a88a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a88e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a890:	2016      	movs	r0, #22
   2a892:	f7f5 fbdb 	bl	2004c <bsd_os_errno_set>
   2a896:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a89a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a89c:	2025      	movs	r0, #37	; 0x25
   2a89e:	f7f5 fbd5 	bl	2004c <bsd_os_errno_set>
   2a8a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a8a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a8a8:	20029090 	.word	0x20029090
   2a8ac:	10624dd3 	.word	0x10624dd3

0002a8b0 <interface_socket_getopt>:
   2a8b0:	b570      	push	{r4, r5, r6, lr}
   2a8b2:	2808      	cmp	r0, #8
   2a8b4:	9d04      	ldr	r5, [sp, #16]
   2a8b6:	d835      	bhi.n	2a924 <interface_socket_getopt+0x74>
   2a8b8:	4c20      	ldr	r4, [pc, #128]	; (2a93c <interface_socket_getopt+0x8c>)
   2a8ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   2a8be:	00c0      	lsls	r0, r0, #3
   2a8c0:	5826      	ldr	r6, [r4, r0]
   2a8c2:	4404      	add	r4, r0
   2a8c4:	b376      	cbz	r6, 2a924 <interface_socket_getopt+0x74>
   2a8c6:	2901      	cmp	r1, #1
   2a8c8:	d132      	bne.n	2a930 <interface_socket_getopt+0x80>
   2a8ca:	b32b      	cbz	r3, 2a918 <interface_socket_getopt+0x68>
   2a8cc:	b325      	cbz	r5, 2a918 <interface_socket_getopt+0x68>
   2a8ce:	2a04      	cmp	r2, #4
   2a8d0:	d019      	beq.n	2a906 <interface_socket_getopt+0x56>
   2a8d2:	f1a2 0114 	sub.w	r1, r2, #20
   2a8d6:	2901      	cmp	r1, #1
   2a8d8:	d82a      	bhi.n	2a930 <interface_socket_getopt+0x80>
   2a8da:	6829      	ldr	r1, [r5, #0]
   2a8dc:	2908      	cmp	r1, #8
   2a8de:	d11b      	bne.n	2a918 <interface_socket_getopt+0x68>
   2a8e0:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
   2a8e4:	2a14      	cmp	r2, #20
   2a8e6:	bf18      	it	ne
   2a8e8:	4601      	movne	r1, r0
   2a8ea:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   2a8ee:	4a14      	ldr	r2, [pc, #80]	; (2a940 <interface_socket_getopt+0x90>)
   2a8f0:	2000      	movs	r0, #0
   2a8f2:	fba2 5201 	umull	r5, r2, r2, r1
   2a8f6:	0992      	lsrs	r2, r2, #6
   2a8f8:	fb04 1112 	mls	r1, r4, r2, r1
   2a8fc:	fb04 f101 	mul.w	r1, r4, r1
   2a900:	e9c3 2100 	strd	r2, r1, [r3]
   2a904:	bd70      	pop	{r4, r5, r6, pc}
   2a906:	682a      	ldr	r2, [r5, #0]
   2a908:	2a04      	cmp	r2, #4
   2a90a:	d105      	bne.n	2a918 <interface_socket_getopt+0x68>
   2a90c:	2200      	movs	r2, #0
   2a90e:	6861      	ldr	r1, [r4, #4]
   2a910:	4610      	mov	r0, r2
   2a912:	6019      	str	r1, [r3, #0]
   2a914:	6062      	str	r2, [r4, #4]
   2a916:	bd70      	pop	{r4, r5, r6, pc}
   2a918:	2016      	movs	r0, #22
   2a91a:	f7f5 fb97 	bl	2004c <bsd_os_errno_set>
   2a91e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a922:	bd70      	pop	{r4, r5, r6, pc}
   2a924:	2009      	movs	r0, #9
   2a926:	f7f5 fb91 	bl	2004c <bsd_os_errno_set>
   2a92a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a92e:	bd70      	pop	{r4, r5, r6, pc}
   2a930:	202a      	movs	r0, #42	; 0x2a
   2a932:	f7f5 fb8b 	bl	2004c <bsd_os_errno_set>
   2a936:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a93a:	bd70      	pop	{r4, r5, r6, pc}
   2a93c:	20029090 	.word	0x20029090
   2a940:	10624dd3 	.word	0x10624dd3

0002a944 <interface_socket_fcntl>:
   2a944:	2808      	cmp	r0, #8
   2a946:	b510      	push	{r4, lr}
   2a948:	d826      	bhi.n	2a998 <interface_socket_fcntl+0x54>
   2a94a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   2a94e:	4c1b      	ldr	r4, [pc, #108]	; (2a9bc <interface_socket_fcntl+0x78>)
   2a950:	00c3      	lsls	r3, r0, #3
   2a952:	58e0      	ldr	r0, [r4, r3]
   2a954:	b300      	cbz	r0, 2a998 <interface_socket_fcntl+0x54>
   2a956:	2901      	cmp	r1, #1
   2a958:	d005      	beq.n	2a966 <interface_socket_fcntl+0x22>
   2a95a:	2902      	cmp	r1, #2
   2a95c:	d122      	bne.n	2a9a4 <interface_socket_fcntl+0x60>
   2a95e:	58e0      	ldr	r0, [r4, r3]
   2a960:	f3c0 7000 	ubfx	r0, r0, #28, #1
   2a964:	bd10      	pop	{r4, pc}
   2a966:	07d2      	lsls	r2, r2, #31
   2a968:	d410      	bmi.n	2a98c <interface_socket_fcntl+0x48>
   2a96a:	58e0      	ldr	r0, [r4, r3]
   2a96c:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
   2a970:	d11e      	bne.n	2a9b0 <interface_socket_fcntl+0x6c>
   2a972:	58e2      	ldr	r2, [r4, r3]
   2a974:	b292      	uxth	r2, r2
   2a976:	2a0a      	cmp	r2, #10
   2a978:	d01a      	beq.n	2a9b0 <interface_socket_fcntl+0x6c>
   2a97a:	58e2      	ldr	r2, [r4, r3]
   2a97c:	b292      	uxth	r2, r2
   2a97e:	2a0b      	cmp	r2, #11
   2a980:	d016      	beq.n	2a9b0 <interface_socket_fcntl+0x6c>
   2a982:	58e2      	ldr	r2, [r4, r3]
   2a984:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   2a988:	50e2      	str	r2, [r4, r3]
   2a98a:	bd10      	pop	{r4, pc}
   2a98c:	58e2      	ldr	r2, [r4, r3]
   2a98e:	2000      	movs	r0, #0
   2a990:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   2a994:	50e2      	str	r2, [r4, r3]
   2a996:	bd10      	pop	{r4, pc}
   2a998:	2009      	movs	r0, #9
   2a99a:	f7f5 fb57 	bl	2004c <bsd_os_errno_set>
   2a99e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a9a2:	bd10      	pop	{r4, pc}
   2a9a4:	2016      	movs	r0, #22
   2a9a6:	f7f5 fb51 	bl	2004c <bsd_os_errno_set>
   2a9aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a9ae:	bd10      	pop	{r4, pc}
   2a9b0:	2023      	movs	r0, #35	; 0x23
   2a9b2:	f7f5 fb4b 	bl	2004c <bsd_os_errno_set>
   2a9b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a9ba:	bd10      	pop	{r4, pc}
   2a9bc:	20029090 	.word	0x20029090

0002a9c0 <at_client_evt_handler>:
   2a9c0:	b120      	cbz	r0, 2a9cc <at_client_evt_handler+0xc>
   2a9c2:	f850 1b08 	ldr.w	r1, [r0], #8
   2a9c6:	0c09      	lsrs	r1, r1, #16
   2a9c8:	f7fc bf0e 	b.w	277e8 <rpc_at_event_handler>
   2a9cc:	4770      	bx	lr
   2a9ce:	bf00      	nop

0002a9d0 <rpc_at_client_init>:
   2a9d0:	4801      	ldr	r0, [pc, #4]	; (2a9d8 <rpc_at_client_init+0x8>)
   2a9d2:	f7fb bcff 	b.w	263d4 <rpc_client_register>
   2a9d6:	bf00      	nop
   2a9d8:	0003ac00 	.word	0x0003ac00

0002a9dc <rpc_at_client_request_alloc>:
   2a9dc:	b180      	cbz	r0, 2aa00 <rpc_at_client_request_alloc+0x24>
   2a9de:	2300      	movs	r3, #0
   2a9e0:	b510      	push	{r4, lr}
   2a9e2:	b082      	sub	sp, #8
   2a9e4:	aa02      	add	r2, sp, #8
   2a9e6:	4604      	mov	r4, r0
   2a9e8:	f842 3d04 	str.w	r3, [r2, #-4]!
   2a9ec:	2003      	movs	r0, #3
   2a9ee:	f7fb fd6b 	bl	264c8 <rpc_message_alloc>
   2a9f2:	b918      	cbnz	r0, 2a9fc <rpc_at_client_request_alloc+0x20>
   2a9f4:	9b01      	ldr	r3, [sp, #4]
   2a9f6:	b10b      	cbz	r3, 2a9fc <rpc_at_client_request_alloc+0x20>
   2a9f8:	3308      	adds	r3, #8
   2a9fa:	6023      	str	r3, [r4, #0]
   2a9fc:	b002      	add	sp, #8
   2a9fe:	bd10      	pop	{r4, pc}
   2aa00:	200e      	movs	r0, #14
   2aa02:	4770      	bx	lr

0002aa04 <rpc_at_client_request_send>:
   2aa04:	b150      	cbz	r0, 2aa1c <rpc_at_client_request_send+0x18>
   2aa06:	4603      	mov	r3, r0
   2aa08:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   2aa0c:	2003      	movs	r0, #3
   2aa0e:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   2aa12:	f843 1d08 	str.w	r1, [r3, #-8]!
   2aa16:	4619      	mov	r1, r3
   2aa18:	f7fb bd46 	b.w	264a8 <rpc_message_send>
   2aa1c:	200e      	movs	r0, #14
   2aa1e:	4770      	bx	lr

0002aa20 <rpc_at_client_message_free>:
   2aa20:	b120      	cbz	r0, 2aa2c <rpc_at_client_message_free+0xc>
   2aa22:	f1a0 0108 	sub.w	r1, r0, #8
   2aa26:	2003      	movs	r0, #3
   2aa28:	f7fb bd7a 	b.w	26520 <rpc_message_free>
   2aa2c:	200e      	movs	r0, #14
   2aa2e:	4770      	bx	lr

0002aa30 <rpc_at_client_data_free>:
   2aa30:	b118      	cbz	r0, 2aa3a <rpc_at_client_data_free+0xa>
   2aa32:	4601      	mov	r1, r0
   2aa34:	2003      	movs	r0, #3
   2aa36:	f7fb bd7f 	b.w	26538 <rpc_message_data_free>
   2aa3a:	200e      	movs	r0, #14
   2aa3c:	4770      	bx	lr
   2aa3e:	bf00      	nop

0002aa40 <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   2aa40:	4a07      	ldr	r2, [pc, #28]	; (2aa60 <SystemInit+0x20>)
   2aa42:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   2aa46:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   2aa4a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   2aa4e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2aa52:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   2aa56:	4b03      	ldr	r3, [pc, #12]	; (2aa64 <SystemInit+0x24>)
   2aa58:	4a03      	ldr	r2, [pc, #12]	; (2aa68 <SystemInit+0x28>)
   2aa5a:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   2aa5c:	4770      	bx	lr
   2aa5e:	bf00      	nop
   2aa60:	e000ed00 	.word	0xe000ed00
   2aa64:	20020224 	.word	0x20020224
   2aa68:	03d09000 	.word	0x03d09000

0002aa6c <nrf_gpio_pin_port_decode.isra.0>:
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
   2aa6c:	b508      	push	{r3, lr}
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   2aa6e:	0943      	lsrs	r3, r0, #5
   2aa70:	bf0c      	ite	eq
   2aa72:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   2aa76:	2300      	movne	r3, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   2aa78:	f000 001f 	and.w	r0, r0, #31

    return (mask & (1UL << pin_number)) ? true : false;
   2aa7c:	fa23 f000 	lsr.w	r0, r3, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2aa80:	07c3      	lsls	r3, r0, #31
   2aa82:	d40b      	bmi.n	2aa9c <nrf_gpio_pin_port_decode.isra.0+0x30>
   2aa84:	4906      	ldr	r1, [pc, #24]	; (2aaa0 <nrf_gpio_pin_port_decode.isra.0+0x34>)
   2aa86:	4807      	ldr	r0, [pc, #28]	; (2aaa4 <nrf_gpio_pin_port_decode.isra.0+0x38>)
   2aa88:	f240 230d 	movw	r3, #525	; 0x20d
   2aa8c:	4a06      	ldr	r2, [pc, #24]	; (2aaa8 <nrf_gpio_pin_port_decode.isra.0+0x3c>)
   2aa8e:	f008 fd90 	bl	335b2 <printk>
   2aa92:	f240 210d 	movw	r1, #525	; 0x20d
   2aa96:	4804      	ldr	r0, [pc, #16]	; (2aaa8 <nrf_gpio_pin_port_decode.isra.0+0x3c>)
   2aa98:	f009 f88c 	bl	33bb4 <assert_post_action>
}
   2aa9c:	4803      	ldr	r0, [pc, #12]	; (2aaac <nrf_gpio_pin_port_decode.isra.0+0x40>)
   2aa9e:	bd08      	pop	{r3, pc}
   2aaa0:	0003df5b 	.word	0x0003df5b
   2aaa4:	0003b773 	.word	0x0003b773
   2aaa8:	0003df28 	.word	0x0003df28
   2aaac:	40842500 	.word	0x40842500

0002aab0 <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
   2aab0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2aab4:	4681      	mov	r9, r0
   2aab6:	4692      	mov	sl, r2
   2aab8:	461f      	mov	r7, r3
    NRFX_ASSERT(p_config);
   2aaba:	460c      	mov	r4, r1
   2aabc:	b949      	cbnz	r1, 2aad2 <nrfx_spim_init+0x22>
   2aabe:	4953      	ldr	r1, [pc, #332]	; (2ac0c <nrfx_spim_init+0x15c>)
   2aac0:	4853      	ldr	r0, [pc, #332]	; (2ac10 <nrfx_spim_init+0x160>)
   2aac2:	23ff      	movs	r3, #255	; 0xff
   2aac4:	4a53      	ldr	r2, [pc, #332]	; (2ac14 <nrfx_spim_init+0x164>)
   2aac6:	f008 fd74 	bl	335b2 <printk>
   2aaca:	21ff      	movs	r1, #255	; 0xff
   2aacc:	4851      	ldr	r0, [pc, #324]	; (2ac14 <nrfx_spim_init+0x164>)
   2aace:	f009 f871 	bl	33bb4 <assert_post_action>
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   2aad2:	2324      	movs	r3, #36	; 0x24
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2aad4:	f899 5004 	ldrb.w	r5, [r9, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   2aad8:	4e4f      	ldr	r6, [pc, #316]	; (2ac18 <nrfx_spim_init+0x168>)
   2aada:	436b      	muls	r3, r5
   2aadc:	18f2      	adds	r2, r6, r3
   2aade:	7f11      	ldrb	r1, [r2, #28]
   2aae0:	2900      	cmp	r1, #0
   2aae2:	f040 8091 	bne.w	2ac08 <nrfx_spim_init+0x158>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif

    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   2aae6:	f8d9 8000 	ldr.w	r8, [r9]
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
   2aaea:	f846 a003 	str.w	sl, [r6, r3]
    // Configure pins used by the peripheral:
    // - SCK - output with initial value corresponding with the SPI mode used:
    //   0 - for modes 0 and 1 (CPOL = 0), 1 - for modes 2 and 3 (CPOL = 1);
    //   according to the reference manual guidelines this pin and its input
    //   buffer must always be connected for the SPI to work.
    if (p_config->mode <= NRF_SPIM_MODE_1)
   2aaee:	7b23      	ldrb	r3, [r4, #12]
    p_cb->p_context = p_context;
   2aaf0:	6057      	str	r7, [r2, #4]
    if (p_config->mode <= NRF_SPIM_MODE_1)
   2aaf2:	2b01      	cmp	r3, #1
   2aaf4:	7820      	ldrb	r0, [r4, #0]
   2aaf6:	d875      	bhi.n	2abe4 <nrfx_spim_init+0x134>
    {
        nrf_gpio_pin_clear(p_config->sck_pin);
   2aaf8:	f00d ffb7 	bl	38a6a <nrf_gpio_pin_clear>
    }
    else
    {
        nrf_gpio_pin_set(p_config->sck_pin);
    }
    nrf_gpio_cfg(p_config->sck_pin,
   2aafc:	7827      	ldrb	r7, [r4, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2aafe:	4638      	mov	r0, r7
   2ab00:	f7ff ffb4 	bl	2aa6c <nrf_gpio_pin_port_decode.isra.0>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2ab04:	2301      	movs	r3, #1
   2ab06:	3780      	adds	r7, #128	; 0x80
   2ab08:	f840 3027 	str.w	r3, [r0, r7, lsl #2]
                 NRF_GPIO_PIN_INPUT_CONNECT,
                 NRF_GPIO_PIN_NOPULL,
                 NRF_GPIO_PIN_S0S1,
                 NRF_GPIO_PIN_NOSENSE);
    // - MOSI (optional) - output with initial value 0,
    if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   2ab0c:	7867      	ldrb	r7, [r4, #1]
   2ab0e:	2fff      	cmp	r7, #255	; 0xff
   2ab10:	d06b      	beq.n	2abea <nrfx_spim_init+0x13a>
    {
        mosi_pin = p_config->mosi_pin;
        nrf_gpio_pin_clear(mosi_pin);
   2ab12:	4638      	mov	r0, r7
   2ab14:	f00d ffa9 	bl	38a6a <nrf_gpio_pin_clear>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ab18:	4638      	mov	r0, r7
   2ab1a:	f7ff ffa7 	bl	2aa6c <nrf_gpio_pin_port_decode.isra.0>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2ab1e:	2203      	movs	r2, #3
   2ab20:	f107 0380 	add.w	r3, r7, #128	; 0x80
   2ab24:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    else
    {
        mosi_pin = NRF_SPIM_PIN_NOT_CONNECTED;
    }
    // - MISO (optional) - input,
    if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   2ab28:	f894 a002 	ldrb.w	sl, [r4, #2]
   2ab2c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   2ab30:	d05e      	beq.n	2abf0 <nrfx_spim_init+0x140>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ab32:	4650      	mov	r0, sl
    {
        miso_pin = p_config->miso_pin;
        nrf_gpio_cfg_input(miso_pin, p_config->miso_pull);
   2ab34:	f894 b00e 	ldrb.w	fp, [r4, #14]
   2ab38:	f7ff ff98 	bl	2aa6c <nrf_gpio_pin_port_decode.isra.0>
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
   2ab3c:	ea4f 038b 	mov.w	r3, fp, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2ab40:	f10a 0280 	add.w	r2, sl, #128	; 0x80
   2ab44:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    }
    // - Slave Select (optional) - output with initial value 1 (inactive).

    // 'p_cb->ss_pin' variable is used during transfers to check if SS pin should be toggled,
    // so this field needs to be initialized even if the pin is not used.
    p_cb->ss_pin = p_config->ss_pin;
   2ab48:	2324      	movs	r3, #36	; 0x24
   2ab4a:	fb03 6305 	mla	r3, r3, r5, r6
   2ab4e:	78e0      	ldrb	r0, [r4, #3]

    if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   2ab50:	28ff      	cmp	r0, #255	; 0xff
    p_cb->ss_pin = p_config->ss_pin;
   2ab52:	77d8      	strb	r0, [r3, #31]
    if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   2ab54:	d013      	beq.n	2ab7e <nrfx_spim_init+0xce>
    {
        if (p_config->ss_active_high)
   2ab56:	7923      	ldrb	r3, [r4, #4]
   2ab58:	2b00      	cmp	r3, #0
   2ab5a:	d04c      	beq.n	2abf6 <nrfx_spim_init+0x146>
        {
            nrf_gpio_pin_clear(p_config->ss_pin);
   2ab5c:	f00d ff85 	bl	38a6a <nrf_gpio_pin_clear>
        }
        else
        {
            nrf_gpio_pin_set(p_config->ss_pin);
        }
        nrf_gpio_cfg_output(p_config->ss_pin);
   2ab60:	f894 b003 	ldrb.w	fp, [r4, #3]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ab64:	4658      	mov	r0, fp
   2ab66:	f7ff ff81 	bl	2aa6c <nrf_gpio_pin_port_decode.isra.0>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2ab6a:	2303      	movs	r3, #3
   2ab6c:	f10b 0b80 	add.w	fp, fp, #128	; 0x80
   2ab70:	f840 302b 	str.w	r3, [r0, fp, lsl #2]
                                   (p_config->ss_active_high == true ?
                                        NRF_SPIM_CSN_POL_HIGH : NRF_SPIM_CSN_POL_LOW),
                                   p_config->ss_duration);
        }
#endif
        p_cb->ss_active_high = p_config->ss_active_high;
   2ab74:	2324      	movs	r3, #36	; 0x24
   2ab76:	fb03 6305 	mla	r3, r3, r5, r6
   2ab7a:	7922      	ldrb	r2, [r4, #4]
   2ab7c:	779a      	strb	r2, [r3, #30]
    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
#endif


    nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
   2ab7e:	7823      	ldrb	r3, [r4, #0]
    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
   2ab80:	7b22      	ldrb	r2, [r4, #12]
    p_reg->PSEL.SCK  = sck_pin;
   2ab82:	f8c8 3508 	str.w	r3, [r8, #1288]	; 0x508
    p_reg->FREQUENCY = (uint32_t)frequency;
   2ab86:	68a3      	ldr	r3, [r4, #8]
    p_reg->PSEL.MOSI = mosi_pin;
   2ab88:	f8c8 750c 	str.w	r7, [r8, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   2ab8c:	f8c8 a510 	str.w	sl, [r8, #1296]	; 0x510
    p_reg->FREQUENCY = (uint32_t)frequency;
   2ab90:	f8c8 3524 	str.w	r3, [r8, #1316]	; 0x524
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
   2ab94:	7b63      	ldrb	r3, [r4, #13]
   2ab96:	3300      	adds	r3, #0
   2ab98:	bf18      	it	ne
   2ab9a:	2301      	movne	r3, #1
    switch (spi_mode)
   2ab9c:	2a02      	cmp	r2, #2
   2ab9e:	d02d      	beq.n	2abfc <nrfx_spim_init+0x14c>
   2aba0:	2a03      	cmp	r2, #3
   2aba2:	d02e      	beq.n	2ac02 <nrfx_spim_init+0x152>
   2aba4:	2a01      	cmp	r2, #1
   2aba6:	d101      	bne.n	2abac <nrfx_spim_init+0xfc>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   2aba8:	f043 0302 	orr.w	r3, r3, #2
    p_reg->CONFIG = config;
   2abac:	f8c8 3554 	str.w	r3, [r8, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
   2abb0:	79a3      	ldrb	r3, [r4, #6]
   2abb2:	f8c8 35c0 	str.w	r3, [r8, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   2abb6:	2307      	movs	r3, #7
   2abb8:	f8c8 3500 	str.w	r3, [r8, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
   2abbc:	2324      	movs	r3, #36	; 0x24
   2abbe:	436b      	muls	r3, r5
   2abc0:	58f3      	ldr	r3, [r6, r3]
   2abc2:	b12b      	cbz	r3, 2abd0 <nrfx_spim_init+0x120>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   2abc4:	f8d9 0000 	ldr.w	r0, [r9]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   2abc8:	f340 3007 	sbfx	r0, r0, #12, #8
   2abcc:	f7f0 f806 	bl	1abdc <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   2abd0:	2324      	movs	r3, #36	; 0x24
   2abd2:	fb03 6505 	mla	r5, r3, r5, r6
   2abd6:	2300      	movs	r3, #0
   2abd8:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   2abda:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   2abdc:	480f      	ldr	r0, [pc, #60]	; (2ac1c <nrfx_spim_init+0x16c>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   2abde:	772b      	strb	r3, [r5, #28]
}
   2abe0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        nrf_gpio_pin_set(p_config->sck_pin);
   2abe4:	f00d ff49 	bl	38a7a <nrf_gpio_pin_set>
   2abe8:	e788      	b.n	2aafc <nrfx_spim_init+0x4c>
        mosi_pin = NRF_SPIM_PIN_NOT_CONNECTED;
   2abea:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2abee:	e79b      	b.n	2ab28 <nrfx_spim_init+0x78>
        miso_pin = NRF_SPIM_PIN_NOT_CONNECTED;
   2abf0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   2abf4:	e7a8      	b.n	2ab48 <nrfx_spim_init+0x98>
            nrf_gpio_pin_set(p_config->ss_pin);
   2abf6:	f00d ff40 	bl	38a7a <nrf_gpio_pin_set>
   2abfa:	e7b1      	b.n	2ab60 <nrfx_spim_init+0xb0>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   2abfc:	f043 0304 	orr.w	r3, r3, #4
        break;
   2ac00:	e7d4      	b.n	2abac <nrfx_spim_init+0xfc>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   2ac02:	f043 0306 	orr.w	r3, r3, #6
        break;
   2ac06:	e7d1      	b.n	2abac <nrfx_spim_init+0xfc>
        return err_code;
   2ac08:	4805      	ldr	r0, [pc, #20]	; (2ac20 <nrfx_spim_init+0x170>)
   2ac0a:	e7e9      	b.n	2abe0 <nrfx_spim_init+0x130>
   2ac0c:	0003f5b3 	.word	0x0003f5b3
   2ac10:	0003b773 	.word	0x0003b773
   2ac14:	0003f577 	.word	0x0003f577
   2ac18:	20022aa4 	.word	0x20022aa4
   2ac1c:	0bad0000 	.word	0x0bad0000
   2ac20:	0bad0005 	.word	0x0bad0005

0002ac24 <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   2ac24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   2ac28:	2324      	movs	r3, #36	; 0x24
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2ac2a:	7905      	ldrb	r5, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   2ac2c:	4e6e      	ldr	r6, [pc, #440]	; (2ade8 <nrfx_spim_xfer+0x1c4>)
{
   2ac2e:	4681      	mov	r9, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   2ac30:	fb03 6305 	mla	r3, r3, r5, r6
   2ac34:	7f1b      	ldrb	r3, [r3, #28]
{
   2ac36:	460c      	mov	r4, r1
   2ac38:	4617      	mov	r7, r2
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   2ac3a:	b95b      	cbnz	r3, 2ac54 <nrfx_spim_xfer+0x30>
   2ac3c:	496b      	ldr	r1, [pc, #428]	; (2adec <nrfx_spim_xfer+0x1c8>)
   2ac3e:	486c      	ldr	r0, [pc, #432]	; (2adf0 <nrfx_spim_xfer+0x1cc>)
   2ac40:	f240 2396 	movw	r3, #662	; 0x296
   2ac44:	4a6b      	ldr	r2, [pc, #428]	; (2adf4 <nrfx_spim_xfer+0x1d0>)
   2ac46:	f008 fcb4 	bl	335b2 <printk>
   2ac4a:	f240 2196 	movw	r1, #662	; 0x296
   2ac4e:	4869      	ldr	r0, [pc, #420]	; (2adf4 <nrfx_spim_xfer+0x1d0>)
   2ac50:	f008 ffb0 	bl	33bb4 <assert_post_action>
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
   2ac54:	6823      	ldr	r3, [r4, #0]
   2ac56:	b96b      	cbnz	r3, 2ac74 <nrfx_spim_xfer+0x50>
   2ac58:	6863      	ldr	r3, [r4, #4]
   2ac5a:	b15b      	cbz	r3, 2ac74 <nrfx_spim_xfer+0x50>
   2ac5c:	4966      	ldr	r1, [pc, #408]	; (2adf8 <nrfx_spim_xfer+0x1d4>)
   2ac5e:	4864      	ldr	r0, [pc, #400]	; (2adf0 <nrfx_spim_xfer+0x1cc>)
   2ac60:	f240 2397 	movw	r3, #663	; 0x297
   2ac64:	4a63      	ldr	r2, [pc, #396]	; (2adf4 <nrfx_spim_xfer+0x1d0>)
   2ac66:	f008 fca4 	bl	335b2 <printk>
   2ac6a:	f240 2197 	movw	r1, #663	; 0x297
   2ac6e:	4861      	ldr	r0, [pc, #388]	; (2adf4 <nrfx_spim_xfer+0x1d0>)
   2ac70:	f008 ffa0 	bl	33bb4 <assert_post_action>
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);
   2ac74:	68a3      	ldr	r3, [r4, #8]
   2ac76:	b96b      	cbnz	r3, 2ac94 <nrfx_spim_xfer+0x70>
   2ac78:	68e3      	ldr	r3, [r4, #12]
   2ac7a:	b15b      	cbz	r3, 2ac94 <nrfx_spim_xfer+0x70>
   2ac7c:	495f      	ldr	r1, [pc, #380]	; (2adfc <nrfx_spim_xfer+0x1d8>)
   2ac7e:	485c      	ldr	r0, [pc, #368]	; (2adf0 <nrfx_spim_xfer+0x1cc>)
   2ac80:	f44f 7326 	mov.w	r3, #664	; 0x298
   2ac84:	4a5b      	ldr	r2, [pc, #364]	; (2adf4 <nrfx_spim_xfer+0x1d0>)
   2ac86:	f008 fc94 	bl	335b2 <printk>
   2ac8a:	f44f 7126 	mov.w	r1, #664	; 0x298
   2ac8e:	4859      	ldr	r0, [pc, #356]	; (2adf4 <nrfx_spim_xfer+0x1d0>)
   2ac90:	f008 ff90 	bl	33bb4 <assert_post_action>
    NRFX_ASSERT(SPIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   2ac94:	f899 3004 	ldrb.w	r3, [r9, #4]
   2ac98:	b93b      	cbnz	r3, 2acaa <nrfx_spim_xfer+0x86>
   2ac9a:	68e3      	ldr	r3, [r4, #12]
   2ac9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   2aca0:	d203      	bcs.n	2acaa <nrfx_spim_xfer+0x86>
   2aca2:	6863      	ldr	r3, [r4, #4]
   2aca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   2aca8:	d30b      	bcc.n	2acc2 <nrfx_spim_xfer+0x9e>
   2acaa:	4955      	ldr	r1, [pc, #340]	; (2ae00 <nrfx_spim_xfer+0x1dc>)
   2acac:	4850      	ldr	r0, [pc, #320]	; (2adf0 <nrfx_spim_xfer+0x1cc>)
   2acae:	f240 239b 	movw	r3, #667	; 0x29b
   2acb2:	4a50      	ldr	r2, [pc, #320]	; (2adf4 <nrfx_spim_xfer+0x1d0>)
   2acb4:	f008 fc7d 	bl	335b2 <printk>
   2acb8:	f240 219b 	movw	r1, #667	; 0x29b
   2acbc:	484d      	ldr	r0, [pc, #308]	; (2adf4 <nrfx_spim_xfer+0x1d0>)
   2acbe:	f008 ff79 	bl	33bb4 <assert_post_action>
                                     p_xfer_desc->rx_length,
                                     p_xfer_desc->tx_length));
    NRFX_ASSERT(!(flags & NRFX_SPIM_FLAG_HOLD_XFER) ||
   2acc2:	f017 0808 	ands.w	r8, r7, #8
   2acc6:	d011      	beq.n	2acec <nrfx_spim_xfer+0xc8>
   2acc8:	2324      	movs	r3, #36	; 0x24
   2acca:	fb03 6305 	mla	r3, r3, r5, r6
   2acce:	7fdb      	ldrb	r3, [r3, #31]
   2acd0:	2bff      	cmp	r3, #255	; 0xff
   2acd2:	d00b      	beq.n	2acec <nrfx_spim_xfer+0xc8>
   2acd4:	494b      	ldr	r1, [pc, #300]	; (2ae04 <nrfx_spim_xfer+0x1e0>)
   2acd6:	4846      	ldr	r0, [pc, #280]	; (2adf0 <nrfx_spim_xfer+0x1cc>)
   2acd8:	f240 239d 	movw	r3, #669	; 0x29d
   2acdc:	4a45      	ldr	r2, [pc, #276]	; (2adf4 <nrfx_spim_xfer+0x1d0>)
   2acde:	f008 fc68 	bl	335b2 <printk>
   2ace2:	f240 219d 	movw	r1, #669	; 0x29d
   2ace6:	4843      	ldr	r0, [pc, #268]	; (2adf4 <nrfx_spim_xfer+0x1d0>)
   2ace8:	f008 ff64 	bl	33bb4 <assert_post_action>
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   2acec:	2324      	movs	r3, #36	; 0x24
   2acee:	436b      	muls	r3, r5
   2acf0:	18f2      	adds	r2, r6, r3
   2acf2:	7f51      	ldrb	r1, [r2, #29]
   2acf4:	2900      	cmp	r1, #0
   2acf6:	d175      	bne.n	2ade4 <nrfx_spim_xfer+0x1c0>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
   2acf8:	58f3      	ldr	r3, [r6, r3]
   2acfa:	b123      	cbz	r3, 2ad06 <nrfx_spim_xfer+0xe2>
   2acfc:	f017 0f14 	tst.w	r7, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
   2ad00:	bf04      	itt	eq
   2ad02:	2301      	moveq	r3, #1
   2ad04:	7753      	strbeq	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   2ad06:	f04f 0c24 	mov.w	ip, #36	; 0x24
   2ad0a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   2ad0e:	fb0c 6c05 	mla	ip, ip, r5, r6
   2ad12:	f10c 0e0c 	add.w	lr, ip, #12
   2ad16:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}

    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   2ad1a:	f89c 001f 	ldrb.w	r0, [ip, #31]
   2ad1e:	28ff      	cmp	r0, #255	; 0xff
   2ad20:	d004      	beq.n	2ad2c <nrfx_spim_xfer+0x108>
    {
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
        if (!p_cb->use_hw_ss)
#endif
        {
            if (p_cb->ss_active_high)
   2ad22:	f89c 301e 	ldrb.w	r3, [ip, #30]
   2ad26:	b1bb      	cbz	r3, 2ad58 <nrfx_spim_xfer+0x134>
            {
                nrf_gpio_pin_set(p_cb->ss_pin);
   2ad28:	f00d fea7 	bl	38a7a <nrf_gpio_pin_set>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   2ad2c:	6821      	ldr	r1, [r4, #0]
   2ad2e:	b121      	cbz	r1, 2ad3a <nrfx_spim_xfer+0x116>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   2ad30:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
   2ad34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   2ad38:	d106      	bne.n	2ad48 <nrfx_spim_xfer+0x124>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   2ad3a:	68a2      	ldr	r2, [r4, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   2ad3c:	b17a      	cbz	r2, 2ad5e <nrfx_spim_xfer+0x13a>
   2ad3e:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   2ad42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   2ad46:	d00a      	beq.n	2ad5e <nrfx_spim_xfer+0x13a>
        p_cb->transfer_in_progress = false;
   2ad48:	2324      	movs	r3, #36	; 0x24
   2ad4a:	fb03 6505 	mla	r5, r3, r5, r6
   2ad4e:	2300      	movs	r3, #0
        return err_code;
   2ad50:	482d      	ldr	r0, [pc, #180]	; (2ae08 <nrfx_spim_xfer+0x1e4>)
        p_cb->transfer_in_progress = false;
   2ad52:	776b      	strb	r3, [r5, #29]
            }
        }
    }

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
}
   2ad54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                nrf_gpio_pin_clear(p_cb->ss_pin);
   2ad58:	f00d fe87 	bl	38a6a <nrf_gpio_pin_clear>
   2ad5c:	e7e6      	b.n	2ad2c <nrfx_spim_xfer+0x108>
    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
   2ad5e:	f8d9 3000 	ldr.w	r3, [r9]
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
   2ad62:	6860      	ldr	r0, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2ad64:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2ad68:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    nrf_spim_rx_buffer_set(p_spim, p_xfer_desc->p_rx_buffer, p_xfer_desc->rx_length);
   2ad6c:	68e1      	ldr	r1, [r4, #12]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2ad6e:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2ad72:	2200      	movs	r2, #0
    p_reg->RXD.MAXCNT = length;
   2ad74:	f8c3 1538 	str.w	r1, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2ad78:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
   2ad7c:	f017 0201 	ands.w	r2, r7, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
   2ad80:	bf18      	it	ne
   2ad82:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
   2ad84:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
   2ad88:	f017 0202 	ands.w	r2, r7, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
   2ad8c:	bf18      	it	ne
   2ad8e:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
   2ad90:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   2ad94:	f1b8 0f00 	cmp.w	r8, #0
   2ad98:	d101      	bne.n	2ad9e <nrfx_spim_xfer+0x17a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2ad9a:	2201      	movs	r2, #1
   2ad9c:	611a      	str	r2, [r3, #16]
    if (!p_cb->handler)
   2ad9e:	2224      	movs	r2, #36	; 0x24
   2ada0:	436a      	muls	r2, r5
   2ada2:	58b2      	ldr	r2, [r6, r2]
   2ada4:	b9aa      	cbnz	r2, 2add2 <nrfx_spim_xfer+0x1ae>
        if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   2ada6:	f1b8 0f00 	cmp.w	r8, #0
   2adaa:	d103      	bne.n	2adb4 <nrfx_spim_xfer+0x190>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2adac:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   2adb0:	2a00      	cmp	r2, #0
   2adb2:	d0fb      	beq.n	2adac <nrfx_spim_xfer+0x188>
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   2adb4:	2324      	movs	r3, #36	; 0x24
   2adb6:	fb03 6505 	mla	r5, r3, r5, r6
   2adba:	7fe8      	ldrb	r0, [r5, #31]
   2adbc:	28ff      	cmp	r0, #255	; 0xff
   2adbe:	d003      	beq.n	2adc8 <nrfx_spim_xfer+0x1a4>
                if (p_cb->ss_active_high)
   2adc0:	7fab      	ldrb	r3, [r5, #30]
   2adc2:	b11b      	cbz	r3, 2adcc <nrfx_spim_xfer+0x1a8>
                    nrf_gpio_pin_clear(p_cb->ss_pin);
   2adc4:	f00d fe51 	bl	38a6a <nrf_gpio_pin_clear>
    return err_code;
   2adc8:	4810      	ldr	r0, [pc, #64]	; (2ae0c <nrfx_spim_xfer+0x1e8>)
   2adca:	e7c3      	b.n	2ad54 <nrfx_spim_xfer+0x130>
                    nrf_gpio_pin_set(p_cb->ss_pin);
   2adcc:	f00d fe55 	bl	38a7a <nrf_gpio_pin_set>
   2add0:	e7fa      	b.n	2adc8 <nrfx_spim_xfer+0x1a4>
    if (!enable)
   2add2:	2240      	movs	r2, #64	; 0x40
   2add4:	f017 0f04 	tst.w	r7, #4
    p_reg->INTENCLR = mask;
   2add8:	bf14      	ite	ne
   2adda:	f8c3 2308 	strne.w	r2, [r3, #776]	; 0x308
    p_reg->INTENSET = mask;
   2adde:	f8c3 2304 	streq.w	r2, [r3, #772]	; 0x304
   2ade2:	e7f1      	b.n	2adc8 <nrfx_spim_xfer+0x1a4>
        return err_code;
   2ade4:	480a      	ldr	r0, [pc, #40]	; (2ae10 <nrfx_spim_xfer+0x1ec>)
   2ade6:	e7b5      	b.n	2ad54 <nrfx_spim_xfer+0x130>
   2ade8:	20022aa4 	.word	0x20022aa4
   2adec:	0003f5bc 	.word	0x0003f5bc
   2adf0:	0003b773 	.word	0x0003b773
   2adf4:	0003f577 	.word	0x0003f577
   2adf8:	0003f5e8 	.word	0x0003f5e8
   2adfc:	0003f62f 	.word	0x0003f62f
   2ae00:	0003f676 	.word	0x0003f676
   2ae04:	0003f71a 	.word	0x0003f71a
   2ae08:	0bad000a 	.word	0x0bad000a
   2ae0c:	0bad0000 	.word	0x0bad0000
   2ae10:	0bad000b 	.word	0x0bad000b

0002ae14 <nrfx_spim_3_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2ae14:	4b15      	ldr	r3, [pc, #84]	; (2ae6c <nrfx_spim_3_irq_handler+0x58>)
}
#endif

#if NRFX_CHECK(NRFX_SPIM3_ENABLED)
void nrfx_spim_3_irq_handler(void)
{
   2ae16:	b510      	push	{r4, lr}
   2ae18:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   2ae1c:	b322      	cbz	r2, 2ae68 <nrfx_spim_3_irq_handler+0x54>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2ae1e:	2200      	movs	r2, #0
        NRFX_ASSERT(p_cb->handler);
   2ae20:	4c13      	ldr	r4, [pc, #76]	; (2ae70 <nrfx_spim_3_irq_handler+0x5c>)
   2ae22:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   2ae26:	6823      	ldr	r3, [r4, #0]
   2ae28:	b95b      	cbnz	r3, 2ae42 <nrfx_spim_3_irq_handler+0x2e>
   2ae2a:	4912      	ldr	r1, [pc, #72]	; (2ae74 <nrfx_spim_3_irq_handler+0x60>)
   2ae2c:	4812      	ldr	r0, [pc, #72]	; (2ae78 <nrfx_spim_3_irq_handler+0x64>)
   2ae2e:	f240 23ff 	movw	r3, #767	; 0x2ff
   2ae32:	4a12      	ldr	r2, [pc, #72]	; (2ae7c <nrfx_spim_3_irq_handler+0x68>)
   2ae34:	f008 fbbd 	bl	335b2 <printk>
   2ae38:	f240 21ff 	movw	r1, #767	; 0x2ff
   2ae3c:	480f      	ldr	r0, [pc, #60]	; (2ae7c <nrfx_spim_3_irq_handler+0x68>)
   2ae3e:	f008 feb9 	bl	33bb4 <assert_post_action>
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   2ae42:	7fe0      	ldrb	r0, [r4, #31]
   2ae44:	28ff      	cmp	r0, #255	; 0xff
   2ae46:	d003      	beq.n	2ae50 <nrfx_spim_3_irq_handler+0x3c>
            if (p_cb->ss_active_high)
   2ae48:	7fa3      	ldrb	r3, [r4, #30]
   2ae4a:	b153      	cbz	r3, 2ae62 <nrfx_spim_3_irq_handler+0x4e>
                nrf_gpio_pin_clear(p_cb->ss_pin);
   2ae4c:	f00d fe0d 	bl	38a6a <nrf_gpio_pin_clear>
    p_cb->transfer_in_progress = false;
   2ae50:	2300      	movs	r3, #0
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   2ae52:	480b      	ldr	r0, [pc, #44]	; (2ae80 <nrfx_spim_3_irq_handler+0x6c>)
    p_cb->transfer_in_progress = false;
   2ae54:	7763      	strb	r3, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
   2ae56:	7223      	strb	r3, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   2ae58:	e9d4 3100 	ldrd	r3, r1, [r4]
    irq_handler(NRF_SPIM3, &m_cb[NRFX_SPIM3_INST_IDX]);
}
   2ae5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   2ae60:	4718      	bx	r3
                nrf_gpio_pin_set(p_cb->ss_pin);
   2ae62:	f00d fe0a 	bl	38a7a <nrf_gpio_pin_set>
   2ae66:	e7f3      	b.n	2ae50 <nrfx_spim_3_irq_handler+0x3c>
}
   2ae68:	bd10      	pop	{r4, pc}
   2ae6a:	bf00      	nop
   2ae6c:	4000b000 	.word	0x4000b000
   2ae70:	20022aa4 	.word	0x20022aa4
   2ae74:	0003f569 	.word	0x0003f569
   2ae78:	0003b773 	.word	0x0003b773
   2ae7c:	0003f577 	.word	0x0003f577
   2ae80:	20022aac 	.word	0x20022aac

0002ae84 <nrf_gpio_pin_port_decode.isra.1>:
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
   2ae84:	b508      	push	{r3, lr}
    switch (port)
   2ae86:	0943      	lsrs	r3, r0, #5
   2ae88:	bf0c      	ite	eq
   2ae8a:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   2ae8e:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   2ae90:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2ae94:	fa23 f000 	lsr.w	r0, r3, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2ae98:	07c3      	lsls	r3, r0, #31
   2ae9a:	d40b      	bmi.n	2aeb4 <nrf_gpio_pin_port_decode.isra.1+0x30>
   2ae9c:	4906      	ldr	r1, [pc, #24]	; (2aeb8 <nrf_gpio_pin_port_decode.isra.1+0x34>)
   2ae9e:	4807      	ldr	r0, [pc, #28]	; (2aebc <nrf_gpio_pin_port_decode.isra.1+0x38>)
   2aea0:	f240 230d 	movw	r3, #525	; 0x20d
   2aea4:	4a06      	ldr	r2, [pc, #24]	; (2aec0 <nrf_gpio_pin_port_decode.isra.1+0x3c>)
   2aea6:	f008 fb84 	bl	335b2 <printk>
   2aeaa:	f240 210d 	movw	r1, #525	; 0x20d
   2aeae:	4804      	ldr	r0, [pc, #16]	; (2aec0 <nrf_gpio_pin_port_decode.isra.1+0x3c>)
   2aeb0:	f008 fe80 	bl	33bb4 <assert_post_action>
}
   2aeb4:	4803      	ldr	r0, [pc, #12]	; (2aec4 <nrf_gpio_pin_port_decode.isra.1+0x40>)
   2aeb6:	bd08      	pop	{r3, pc}
   2aeb8:	0003df5b 	.word	0x0003df5b
   2aebc:	0003b773 	.word	0x0003b773
   2aec0:	0003df28 	.word	0x0003df28
   2aec4:	40842500 	.word	0x40842500

0002aec8 <nrfx_twim_init>:

nrfx_err_t nrfx_twim_init(nrfx_twim_t const *        p_instance,
                          nrfx_twim_config_t const * p_config,
                          nrfx_twim_evt_handler_t    event_handler,
                          void *                     p_context)
{
   2aec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2aecc:	4681      	mov	r9, r0
   2aece:	4692      	mov	sl, r2
   2aed0:	4698      	mov	r8, r3
    NRFX_ASSERT(p_config);
   2aed2:	460c      	mov	r4, r1
   2aed4:	b949      	cbnz	r1, 2aeea <nrfx_twim_init+0x22>
   2aed6:	492e      	ldr	r1, [pc, #184]	; (2af90 <nrfx_twim_init+0xc8>)
   2aed8:	482e      	ldr	r0, [pc, #184]	; (2af94 <nrfx_twim_init+0xcc>)
   2aeda:	23de      	movs	r3, #222	; 0xde
   2aedc:	4a2e      	ldr	r2, [pc, #184]	; (2af98 <nrfx_twim_init+0xd0>)
   2aede:	f008 fb68 	bl	335b2 <printk>
   2aee2:	21de      	movs	r1, #222	; 0xde
   2aee4:	482c      	ldr	r0, [pc, #176]	; (2af98 <nrfx_twim_init+0xd0>)
   2aee6:	f008 fe65 	bl	33bb4 <assert_post_action>
    NRFX_ASSERT(p_config->scl != p_config->sda);
   2aeea:	e9d4 2300 	ldrd	r2, r3, [r4]
   2aeee:	429a      	cmp	r2, r3
   2aef0:	d109      	bne.n	2af06 <nrfx_twim_init+0x3e>
   2aef2:	492a      	ldr	r1, [pc, #168]	; (2af9c <nrfx_twim_init+0xd4>)
   2aef4:	4827      	ldr	r0, [pc, #156]	; (2af94 <nrfx_twim_init+0xcc>)
   2aef6:	23df      	movs	r3, #223	; 0xdf
   2aef8:	4a27      	ldr	r2, [pc, #156]	; (2af98 <nrfx_twim_init+0xd0>)
   2aefa:	f008 fb5a 	bl	335b2 <printk>
   2aefe:	21df      	movs	r1, #223	; 0xdf
   2af00:	4825      	ldr	r0, [pc, #148]	; (2af98 <nrfx_twim_init+0xd0>)
   2af02:	f008 fe57 	bl	33bb4 <assert_post_action>
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   2af06:	2634      	movs	r6, #52	; 0x34
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   2af08:	f899 7004 	ldrb.w	r7, [r9, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   2af0c:	4d24      	ldr	r5, [pc, #144]	; (2afa0 <nrfx_twim_init+0xd8>)
   2af0e:	437e      	muls	r6, r7
   2af10:	19ab      	adds	r3, r5, r6
   2af12:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
   2af16:	bbca      	cbnz	r2, 2af8c <nrfx_twim_init+0xc4>
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler         = event_handler;
    p_cb->p_context       = p_context;
    p_cb->int_mask        = 0;
   2af18:	609a      	str	r2, [r3, #8]
    p_cb->p_context       = p_context;
   2af1a:	f8c3 8004 	str.w	r8, [r3, #4]
    p_cb->repeated        = false;
   2af1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    p_cb->busy            = false;
   2af22:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    /* To secure correct signal levels on the pins used by the TWI
       master when the system is in OFF mode, and when the TWI master is
       disabled, these pins must be configured in the GPIO peripheral.
    */
    TWIM_PIN_INIT(p_config->scl);
   2af26:	f8d4 8000 	ldr.w	r8, [r4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   2af2a:	7b62      	ldrb	r2, [r4, #13]
    p_cb->handler         = event_handler;
   2af2c:	f845 a006 	str.w	sl, [r5, r6]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   2af30:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2af34:	4640      	mov	r0, r8
   2af36:	f7ff ffa5 	bl	2ae84 <nrf_gpio_pin_port_decode.isra.1>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2af3a:	f240 6a0c 	movw	sl, #1548	; 0x60c
   2af3e:	f108 0880 	add.w	r8, r8, #128	; 0x80
   2af42:	f840 a028 	str.w	sl, [r0, r8, lsl #2]
    TWIM_PIN_INIT(p_config->sda);
   2af46:	f8d4 8004 	ldr.w	r8, [r4, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2af4a:	4640      	mov	r0, r8
   2af4c:	f7ff ff9a 	bl	2ae84 <nrf_gpio_pin_port_decode.isra.1>

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
   2af50:	e9d4 2300 	ldrd	r2, r3, [r4]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2af54:	f108 0880 	add.w	r8, r8, #128	; 0x80
   2af58:	f840 a028 	str.w	sl, [r0, r8, lsl #2]
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   2af5c:	f8d9 0000 	ldr.w	r0, [r9]
    p_reg->PSEL.SCL = scl_pin;
   2af60:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   2af64:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
    nrf_twim_frequency_set(p_twim,
        (nrf_twim_frequency_t)p_config->frequency);
   2af68:	68a3      	ldr	r3, [r4, #8]
    p_reg->FREQUENCY = frequency;
   2af6a:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524

    if (p_cb->handler)
   2af6e:	59ab      	ldr	r3, [r5, r6]
   2af70:	b11b      	cbz	r3, 2af7a <nrfx_twim_init+0xb2>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twim),
            p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
   2af72:	f340 3007 	sbfx	r0, r0, #12, #8
   2af76:	f7ef fe31 	bl	1abdc <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   2af7a:	2334      	movs	r3, #52	; 0x34
   2af7c:	fb03 5507 	mla	r5, r3, r7, r5
   2af80:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   2af82:	4808      	ldr	r0, [pc, #32]	; (2afa4 <nrfx_twim_init+0xdc>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   2af84:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   2af88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return err_code;
   2af8c:	4806      	ldr	r0, [pc, #24]	; (2afa8 <nrfx_twim_init+0xe0>)
   2af8e:	e7fb      	b.n	2af88 <nrfx_twim_init+0xc0>
   2af90:	0003f5b3 	.word	0x0003f5b3
   2af94:	0003b773 	.word	0x0003b773
   2af98:	0003f774 	.word	0x0003f774
   2af9c:	0003f7b0 	.word	0x0003f7b0
   2afa0:	20022ac8 	.word	0x20022ac8
   2afa4:	0bad0000 	.word	0x0bad0000
   2afa8:	0bad0005 	.word	0x0bad0005

0002afac <nrfx_twim_enable>:
}

void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   2afac:	2234      	movs	r2, #52	; 0x34
{
   2afae:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   2afb0:	4d0f      	ldr	r5, [pc, #60]	; (2aff0 <nrfx_twim_enable+0x44>)
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2afb2:	7904      	ldrb	r4, [r0, #4]
{
   2afb4:	4606      	mov	r6, r0
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   2afb6:	fb02 5204 	mla	r2, r2, r4, r5
   2afba:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
   2afbe:	2a01      	cmp	r2, #1
   2afc0:	d00b      	beq.n	2afda <nrfx_twim_enable+0x2e>
   2afc2:	490c      	ldr	r1, [pc, #48]	; (2aff4 <nrfx_twim_enable+0x48>)
   2afc4:	480c      	ldr	r0, [pc, #48]	; (2aff8 <nrfx_twim_enable+0x4c>)
   2afc6:	f44f 73a3 	mov.w	r3, #326	; 0x146
   2afca:	4a0c      	ldr	r2, [pc, #48]	; (2affc <nrfx_twim_enable+0x50>)
   2afcc:	f008 faf1 	bl	335b2 <printk>
   2afd0:	f44f 71a3 	mov.w	r1, #326	; 0x146
   2afd4:	4809      	ldr	r0, [pc, #36]	; (2affc <nrfx_twim_enable+0x50>)
   2afd6:	f008 fded 	bl	33bb4 <assert_post_action>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   2afda:	2206      	movs	r2, #6

    nrf_twim_enable(p_instance->p_twim);
   2afdc:	6833      	ldr	r3, [r6, #0]
   2afde:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   2afe2:	2334      	movs	r3, #52	; 0x34
   2afe4:	fb03 5404 	mla	r4, r3, r4, r5
   2afe8:	2302      	movs	r3, #2
   2afea:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
   2afee:	bd70      	pop	{r4, r5, r6, pc}
   2aff0:	20022ac8 	.word	0x20022ac8
   2aff4:	0003f74a 	.word	0x0003f74a
   2aff8:	0003b773 	.word	0x0003b773
   2affc:	0003f774 	.word	0x0003f774

0002b000 <nrfx_twim_disable>:

void nrfx_twim_disable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   2b000:	2234      	movs	r2, #52	; 0x34
{
   2b002:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   2b004:	4d14      	ldr	r5, [pc, #80]	; (2b058 <nrfx_twim_disable+0x58>)
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2b006:	7904      	ldrb	r4, [r0, #4]
{
   2b008:	4606      	mov	r6, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   2b00a:	fb02 5204 	mla	r2, r2, r4, r5
   2b00e:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
   2b012:	b95a      	cbnz	r2, 2b02c <nrfx_twim_disable+0x2c>
   2b014:	4911      	ldr	r1, [pc, #68]	; (2b05c <nrfx_twim_disable+0x5c>)
   2b016:	4812      	ldr	r0, [pc, #72]	; (2b060 <nrfx_twim_disable+0x60>)
   2b018:	f240 1351 	movw	r3, #337	; 0x151
   2b01c:	4a11      	ldr	r2, [pc, #68]	; (2b064 <nrfx_twim_disable+0x64>)
   2b01e:	f008 fac8 	bl	335b2 <printk>
   2b022:	f240 1151 	movw	r1, #337	; 0x151
   2b026:	480f      	ldr	r0, [pc, #60]	; (2b064 <nrfx_twim_disable+0x64>)
   2b028:	f008 fdc4 	bl	33bb4 <assert_post_action>

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    p_cb->int_mask = 0;
   2b02c:	2234      	movs	r2, #52	; 0x34
   2b02e:	2100      	movs	r1, #0
   2b030:	fb02 5404 	mla	r4, r2, r4, r5
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   2b034:	6833      	ldr	r3, [r6, #0]
    p_reg->INTENCLR = mask;
   2b036:	4a0c      	ldr	r2, [pc, #48]	; (2b068 <nrfx_twim_disable+0x68>)
    p_cb->int_mask = 0;
   2b038:	60a1      	str	r1, [r4, #8]
   2b03a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   2b03e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   2b042:	f422 52bc 	bic.w	r2, r2, #6016	; 0x1780
   2b046:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   2b04a:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    nrf_twim_shorts_disable(p_twim, NRF_TWIM_ALL_SHORTS_MASK);
    nrf_twim_disable(p_twim);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   2b04e:	2301      	movs	r3, #1
   2b050:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    NRFX_LOG_INFO("Instance disabled: %d.", p_instance->drv_inst_idx);
}
   2b054:	bd70      	pop	{r4, r5, r6, pc}
   2b056:	bf00      	nop
   2b058:	20022ac8 	.word	0x20022ac8
   2b05c:	0003f5bc 	.word	0x0003f5bc
   2b060:	0003b773 	.word	0x0003b773
   2b064:	0003f774 	.word	0x0003f774
   2b068:	019c0202 	.word	0x019c0202

0002b06c <nrfx_twim_xfer>:


nrfx_err_t nrfx_twim_xfer(nrfx_twim_t           const * p_instance,
                          nrfx_twim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   2b06c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   2b070:	7903      	ldrb	r3, [r0, #4]
{
   2b072:	4606      	mov	r6, r0
   2b074:	460d      	mov	r5, r1
   2b076:	4690      	mov	r8, r2
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   2b078:	b93b      	cbnz	r3, 2b08a <nrfx_twim_xfer+0x1e>
   2b07a:	684b      	ldr	r3, [r1, #4]
   2b07c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   2b080:	d203      	bcs.n	2b08a <nrfx_twim_xfer+0x1e>
   2b082:	688b      	ldr	r3, [r1, #8]
   2b084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   2b088:	d30b      	bcc.n	2b0a2 <nrfx_twim_xfer+0x36>
   2b08a:	49b1      	ldr	r1, [pc, #708]	; (2b350 <nrfx_twim_xfer+0x2e4>)
   2b08c:	48b1      	ldr	r0, [pc, #708]	; (2b354 <nrfx_twim_xfer+0x2e8>)
   2b08e:	f240 2363 	movw	r3, #611	; 0x263
   2b092:	4ab1      	ldr	r2, [pc, #708]	; (2b358 <nrfx_twim_xfer+0x2ec>)
   2b094:	f008 fa8d 	bl	335b2 <printk>
   2b098:	f240 2163 	movw	r1, #611	; 0x263
   2b09c:	48ae      	ldr	r0, [pc, #696]	; (2b358 <nrfx_twim_xfer+0x2ec>)
   2b09e:	f008 fd89 	bl	33bb4 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];

    // TXRX and TXTX transfers are supported only in non-blocking mode.
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
   2b0a2:	2434      	movs	r4, #52	; 0x34
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2b0a4:	f896 9004 	ldrb.w	r9, [r6, #4]
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
   2b0a8:	4fac      	ldr	r7, [pc, #688]	; (2b35c <nrfx_twim_xfer+0x2f0>)
   2b0aa:	fb04 f409 	mul.w	r4, r4, r9
   2b0ae:	593b      	ldr	r3, [r7, r4]
   2b0b0:	bb0b      	cbnz	r3, 2b0f6 <nrfx_twim_xfer+0x8a>
   2b0b2:	782b      	ldrb	r3, [r5, #0]
   2b0b4:	2b02      	cmp	r3, #2
   2b0b6:	d00f      	beq.n	2b0d8 <nrfx_twim_xfer+0x6c>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXTX)));
   2b0b8:	782b      	ldrb	r3, [r5, #0]
   2b0ba:	2b03      	cmp	r3, #3
   2b0bc:	d11b      	bne.n	2b0f6 <nrfx_twim_xfer+0x8a>
   2b0be:	f240 236a 	movw	r3, #618	; 0x26a
   2b0c2:	4aa5      	ldr	r2, [pc, #660]	; (2b358 <nrfx_twim_xfer+0x2ec>)
   2b0c4:	49a6      	ldr	r1, [pc, #664]	; (2b360 <nrfx_twim_xfer+0x2f4>)
   2b0c6:	48a3      	ldr	r0, [pc, #652]	; (2b354 <nrfx_twim_xfer+0x2e8>)
   2b0c8:	f008 fa73 	bl	335b2 <printk>
   2b0cc:	f240 216a 	movw	r1, #618	; 0x26a
   2b0d0:	48a1      	ldr	r0, [pc, #644]	; (2b358 <nrfx_twim_xfer+0x2ec>)
   2b0d2:	f008 fd6f 	bl	33bb4 <assert_post_action>
   2b0d6:	e00e      	b.n	2b0f6 <nrfx_twim_xfer+0x8a>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
   2b0d8:	f240 2369 	movw	r3, #617	; 0x269
   2b0dc:	4a9e      	ldr	r2, [pc, #632]	; (2b358 <nrfx_twim_xfer+0x2ec>)
   2b0de:	49a1      	ldr	r1, [pc, #644]	; (2b364 <nrfx_twim_xfer+0x2f8>)
   2b0e0:	489c      	ldr	r0, [pc, #624]	; (2b354 <nrfx_twim_xfer+0x2e8>)
   2b0e2:	f008 fa66 	bl	335b2 <printk>
   2b0e6:	f240 2169 	movw	r1, #617	; 0x269
   2b0ea:	489b      	ldr	r0, [pc, #620]	; (2b358 <nrfx_twim_xfer+0x2ec>)
   2b0ec:	f008 fd62 	bl	33bb4 <assert_post_action>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXTX)));
   2b0f0:	593b      	ldr	r3, [r7, r4]
   2b0f2:	2b00      	cmp	r3, #0
   2b0f4:	d0e0      	beq.n	2b0b8 <nrfx_twim_xfer+0x4c>
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
   2b0f6:	6834      	ldr	r4, [r6, #0]
    p_cb->error = false;
   2b0f8:	2634      	movs	r6, #52	; 0x34
   2b0fa:	2300      	movs	r3, #0
   2b0fc:	fb06 7609 	mla	r6, r6, r9, r7
   2b100:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e
   2b104:	68eb      	ldr	r3, [r5, #12]
   2b106:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    if (!nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   2b10a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   2b10e:	d003      	beq.n	2b118 <nrfx_twim_xfer+0xac>
        return err_code;
   2b110:	4e95      	ldr	r6, [pc, #596]	; (2b368 <nrfx_twim_xfer+0x2fc>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   2b112:	4630      	mov	r0, r6
   2b114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    p_reg->INTENCLR = mask;
   2b118:	4b94      	ldr	r3, [pc, #592]	; (2b36c <nrfx_twim_xfer+0x300>)
   2b11a:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    if (p_cb->busy)
   2b11e:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
   2b122:	f003 0aff 	and.w	sl, r3, #255	; 0xff
   2b126:	b123      	cbz	r3, 2b132 <nrfx_twim_xfer+0xc6>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   2b128:	68b3      	ldr	r3, [r6, #8]
        return err_code;
   2b12a:	4e91      	ldr	r6, [pc, #580]	; (2b370 <nrfx_twim_xfer+0x304>)
    p_reg->INTENSET = mask;
   2b12c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   2b130:	e7ef      	b.n	2b112 <nrfx_twim_xfer+0xa6>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
   2b132:	f018 0f14 	tst.w	r8, #20
   2b136:	bf0c      	ite	eq
   2b138:	2301      	moveq	r3, #1
   2b13a:	2300      	movne	r3, #0
    p_cb->xfer_desc = *p_xfer_desc;
   2b13c:	46ae      	mov	lr, r5
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
   2b13e:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
   2b142:	f106 0c0c 	add.w	ip, r6, #12
   2b146:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   2b14a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   2b14e:	f8de 3000 	ldr.w	r3, [lr]
    p_cb->flags = flags;
   2b152:	f8c6 8020 	str.w	r8, [r6, #32]
    p_cb->xfer_desc = *p_xfer_desc;
   2b156:	f8cc 3000 	str.w	r3, [ip]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
   2b15a:	f3c8 1300 	ubfx	r3, r8, #4, #1
   2b15e:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
   2b162:	786b      	ldrb	r3, [r5, #1]
   2b164:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
   2b168:	f018 0301 	ands.w	r3, r8, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
   2b16c:	bf18      	it	ne
   2b16e:	2301      	movne	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2b170:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
   2b174:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
   2b178:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
   2b17c:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
   2b180:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
   2b184:	f018 0302 	ands.w	r3, r8, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
   2b188:	bf18      	it	ne
   2b18a:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
   2b18c:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
   2b190:	782b      	ldrb	r3, [r5, #0]
   2b192:	2b03      	cmp	r3, #3
   2b194:	f200 80d9 	bhi.w	2b34a <nrfx_twim_xfer+0x2de>
   2b198:	e8df f003 	tbb	[pc, r3]
   2b19c:	028dc4a8 	.word	0x028dc4a8
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_REPEATED_XFER));
   2b1a0:	f018 0f10 	tst.w	r8, #16
   2b1a4:	d00b      	beq.n	2b1be <nrfx_twim_xfer+0x152>
   2b1a6:	4973      	ldr	r1, [pc, #460]	; (2b374 <nrfx_twim_xfer+0x308>)
   2b1a8:	486a      	ldr	r0, [pc, #424]	; (2b354 <nrfx_twim_xfer+0x2e8>)
   2b1aa:	f240 13a9 	movw	r3, #425	; 0x1a9
   2b1ae:	4a6a      	ldr	r2, [pc, #424]	; (2b358 <nrfx_twim_xfer+0x2ec>)
   2b1b0:	f008 f9ff 	bl	335b2 <printk>
   2b1b4:	f240 11a9 	movw	r1, #425	; 0x1a9
   2b1b8:	4867      	ldr	r0, [pc, #412]	; (2b358 <nrfx_twim_xfer+0x2ec>)
   2b1ba:	f008 fcfb 	bl	33bb4 <assert_post_action>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_HOLD_XFER));
   2b1be:	f018 0f08 	tst.w	r8, #8
   2b1c2:	d00b      	beq.n	2b1dc <nrfx_twim_xfer+0x170>
   2b1c4:	496c      	ldr	r1, [pc, #432]	; (2b378 <nrfx_twim_xfer+0x30c>)
   2b1c6:	4863      	ldr	r0, [pc, #396]	; (2b354 <nrfx_twim_xfer+0x2e8>)
   2b1c8:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
   2b1cc:	4a62      	ldr	r2, [pc, #392]	; (2b358 <nrfx_twim_xfer+0x2ec>)
   2b1ce:	f008 f9f0 	bl	335b2 <printk>
   2b1d2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   2b1d6:	4860      	ldr	r0, [pc, #384]	; (2b358 <nrfx_twim_xfer+0x2ec>)
   2b1d8:	f008 fcec 	bl	33bb4 <assert_post_action>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER));
   2b1dc:	f018 0f04 	tst.w	r8, #4
   2b1e0:	d00b      	beq.n	2b1fa <nrfx_twim_xfer+0x18e>
   2b1e2:	4966      	ldr	r1, [pc, #408]	; (2b37c <nrfx_twim_xfer+0x310>)
   2b1e4:	485b      	ldr	r0, [pc, #364]	; (2b354 <nrfx_twim_xfer+0x2e8>)
   2b1e6:	f240 13ab 	movw	r3, #427	; 0x1ab
   2b1ea:	4a5b      	ldr	r2, [pc, #364]	; (2b358 <nrfx_twim_xfer+0x2ec>)
   2b1ec:	f008 f9e1 	bl	335b2 <printk>
   2b1f0:	f240 11ab 	movw	r1, #427	; 0x1ab
   2b1f4:	4858      	ldr	r0, [pc, #352]	; (2b358 <nrfx_twim_xfer+0x2ec>)
   2b1f6:	f008 fcdd 	bl	33bb4 <assert_post_action>
   2b1fa:	692a      	ldr	r2, [r5, #16]
   2b1fc:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   2b200:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   2b204:	d184      	bne.n	2b110 <nrfx_twim_xfer+0xa4>
    p_reg->SHORTS = mask;
   2b206:	f44f 7380 	mov.w	r3, #256	; 0x100
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2b20a:	68e9      	ldr	r1, [r5, #12]
    p_reg->SHORTS = mask;
   2b20c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   2b210:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2b212:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2b216:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2b21a:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2b21c:	2300      	movs	r3, #0
   2b21e:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2b222:	6221      	str	r1, [r4, #32]
   2b224:	60a1      	str	r1, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2b226:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
   2b22a:	2900      	cmp	r1, #0
   2b22c:	d0fb      	beq.n	2b226 <nrfx_twim_xfer+0x1ba>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2b22e:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   2b232:	68ab      	ldr	r3, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2b234:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2b238:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   2b23c:	2334      	movs	r3, #52	; 0x34
   2b23e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   2b242:	fb03 7309 	mla	r3, r3, r9, r7
   2b246:	609a      	str	r2, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   2b248:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
   2b24a:	4e4d      	ldr	r6, [pc, #308]	; (2b380 <nrfx_twim_xfer+0x314>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
   2b24c:	f018 0f08 	tst.w	r8, #8
   2b250:	d104      	bne.n	2b25c <nrfx_twim_xfer+0x1f0>
   2b252:	782a      	ldrb	r2, [r5, #0]
   2b254:	2a03      	cmp	r2, #3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2b256:	bf1c      	itt	ne
   2b258:	2201      	movne	r2, #1
   2b25a:	50e2      	strne	r2, [r4, r3]
    if (p_cb->handler)
   2b25c:	2334      	movs	r3, #52	; 0x34
   2b25e:	fb03 f309 	mul.w	r3, r3, r9
   2b262:	18fa      	adds	r2, r7, r3
   2b264:	58fb      	ldr	r3, [r7, r3]
   2b266:	2b00      	cmp	r3, #0
   2b268:	f040 808e 	bne.w	2b388 <nrfx_twim_xfer+0x31c>
                transmission_finished = true;
   2b26c:	2101      	movs	r1, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2b26e:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   2b272:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   2b276:	2800      	cmp	r0, #0
   2b278:	f040 80a0 	bne.w	2b3bc <nrfx_twim_xfer+0x350>
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
   2b27c:	3200      	adds	r2, #0
   2b27e:	bf18      	it	ne
   2b280:	2201      	movne	r2, #1
   2b282:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   2b286:	2800      	cmp	r0, #0
   2b288:	f000 809c 	beq.w	2b3c4 <nrfx_twim_xfer+0x358>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2b28c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2b290:	f8d4 5160 	ldr.w	r5, [r4, #352]	; 0x160
    return p_reg->SHORTS;
   2b294:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
   2b298:	b115      	cbz	r5, 2b2a0 <nrfx_twim_xfer+0x234>
   2b29a:	f410 7f00 	tst.w	r0, #512	; 0x200
   2b29e:	d104      	bne.n	2b2aa <nrfx_twim_xfer+0x23e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2b2a0:	6221      	str	r1, [r4, #32]
   2b2a2:	6161      	str	r1, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   2b2a4:	2d00      	cmp	r5, #0
   2b2a6:	d0e2      	beq.n	2b26e <nrfx_twim_xfer+0x202>
                    transmission_finished = false;
   2b2a8:	2200      	movs	r2, #0
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   2b2aa:	05c0      	lsls	r0, r0, #23
   2b2ac:	f140 808a 	bpl.w	2b3c4 <nrfx_twim_xfer+0x358>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2b2b0:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
                    transmission_finished = false;
   2b2b4:	e7db      	b.n	2b26e <nrfx_twim_xfer+0x202>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   2b2b6:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2b2b8:	68ea      	ldr	r2, [r5, #12]
   2b2ba:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2b2be:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   2b2c2:	692b      	ldr	r3, [r5, #16]
   2b2c4:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   2b2c8:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   2b2cc:	f47f af20 	bne.w	2b110 <nrfx_twim_xfer+0xa4>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   2b2d0:	68aa      	ldr	r2, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2b2d2:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
   2b2d6:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
   2b2da:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   2b2de:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   2b2e2:	2334      	movs	r3, #52	; 0x34
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   2b2e4:	fb03 7309 	mla	r3, r3, r9, r7
   2b2e8:	2202      	movs	r2, #2
   2b2ea:	e012      	b.n	2b312 <nrfx_twim_xfer+0x2a6>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   2b2ec:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2b2ee:	68ea      	ldr	r2, [r5, #12]
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
   2b2f0:	f018 0f20 	tst.w	r8, #32
   2b2f4:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2b2f8:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   2b2fc:	f04f 0334 	mov.w	r3, #52	; 0x34
   2b300:	d00b      	beq.n	2b31a <nrfx_twim_xfer+0x2ae>
    p_reg->SHORTS = mask;
   2b302:	f44f 7280 	mov.w	r2, #256	; 0x100
   2b306:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   2b30a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   2b30e:	fb03 7309 	mla	r3, r3, r9, r7
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   2b312:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2b314:	2301      	movs	r3, #1
   2b316:	6223      	str	r3, [r4, #32]
   2b318:	e796      	b.n	2b248 <nrfx_twim_xfer+0x1dc>
    p_reg->SHORTS = mask;
   2b31a:	f44f 7200 	mov.w	r2, #512	; 0x200
   2b31e:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
   2b322:	e7df      	b.n	2b2e4 <nrfx_twim_xfer+0x278>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   2b324:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2b326:	68ea      	ldr	r2, [r5, #12]
   2b328:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2b32c:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   2b330:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   2b334:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   2b338:	2334      	movs	r3, #52	; 0x34
   2b33a:	2202      	movs	r2, #2
   2b33c:	fb03 7309 	mla	r3, r3, r9, r7
   2b340:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2b342:	2301      	movs	r3, #1
   2b344:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
   2b346:	2300      	movs	r3, #0
   2b348:	e77f      	b.n	2b24a <nrfx_twim_xfer+0x1de>
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   2b34a:	2308      	movs	r3, #8
        err_code = NRFX_ERROR_INVALID_PARAM;
   2b34c:	4e0d      	ldr	r6, [pc, #52]	; (2b384 <nrfx_twim_xfer+0x318>)
   2b34e:	e77d      	b.n	2b24c <nrfx_twim_xfer+0x1e0>
   2b350:	0003f7cf 	.word	0x0003f7cf
   2b354:	0003b773 	.word	0x0003b773
   2b358:	0003f774 	.word	0x0003f774
   2b35c:	20022ac8 	.word	0x20022ac8
   2b360:	0003f8ca 	.word	0x0003f8ca
   2b364:	0003f87a 	.word	0x0003f87a
   2b368:	0bad000a 	.word	0x0bad000a
   2b36c:	019c0202 	.word	0x019c0202
   2b370:	0bad000b 	.word	0x0bad000b
   2b374:	0003f91a 	.word	0x0003f91a
   2b378:	0003f930 	.word	0x0003f930
   2b37c:	0003f946 	.word	0x0003f946
   2b380:	0bad0000 	.word	0x0bad0000
   2b384:	0bad0004 	.word	0x0bad0004
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
   2b388:	f018 0f04 	tst.w	r8, #4
            p_cb->int_mask = 0;
   2b38c:	bf1c      	itt	ne
   2b38e:	2300      	movne	r3, #0
   2b390:	6093      	strne	r3, [r2, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
   2b392:	f018 0f40 	tst.w	r8, #64	; 0x40
   2b396:	d106      	bne.n	2b3a6 <nrfx_twim_xfer+0x33a>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
   2b398:	2334      	movs	r3, #52	; 0x34
   2b39a:	fb03 7309 	mla	r3, r3, r9, r7
   2b39e:	689a      	ldr	r2, [r3, #8]
   2b3a0:	f042 0202 	orr.w	r2, r2, #2
   2b3a4:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
   2b3a6:	2334      	movs	r3, #52	; 0x34
   2b3a8:	fb03 7709 	mla	r7, r3, r9, r7
   2b3ac:	68bb      	ldr	r3, [r7, #8]
   2b3ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   2b3b2:	60bb      	str	r3, [r7, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   2b3b4:	68bb      	ldr	r3, [r7, #8]
    p_reg->INTENSET = mask;
   2b3b6:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   2b3ba:	e6aa      	b.n	2b112 <nrfx_twim_xfer+0xa6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2b3bc:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
                transmission_finished = true;
   2b3c0:	2201      	movs	r2, #1
   2b3c2:	e75e      	b.n	2b282 <nrfx_twim_xfer+0x216>
        } while (!transmission_finished);
   2b3c4:	2a00      	cmp	r2, #0
   2b3c6:	f43f af52 	beq.w	2b26e <nrfx_twim_xfer+0x202>
        p_cb->busy = false;
   2b3ca:	2134      	movs	r1, #52	; 0x34
   2b3cc:	2000      	movs	r0, #0
   2b3ce:	fb01 7209 	mla	r2, r1, r9, r7
    uint32_t error_source = p_reg->ERRORSRC;
   2b3d2:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   2b3d6:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
   2b3da:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
   2b3de:	b18b      	cbz	r3, 2b404 <nrfx_twim_xfer+0x398>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   2b3e0:	4a0f      	ldr	r2, [pc, #60]	; (2b420 <nrfx_twim_xfer+0x3b4>)
   2b3e2:	f013 0f01 	tst.w	r3, #1
   2b3e6:	4e0f      	ldr	r6, [pc, #60]	; (2b424 <nrfx_twim_xfer+0x3b8>)
   2b3e8:	bf18      	it	ne
   2b3ea:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   2b3ec:	f013 0f02 	tst.w	r3, #2
   2b3f0:	f102 0201 	add.w	r2, r2, #1
   2b3f4:	bf18      	it	ne
   2b3f6:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   2b3f8:	f013 0f04 	tst.w	r3, #4
   2b3fc:	4b0a      	ldr	r3, [pc, #40]	; (2b428 <nrfx_twim_xfer+0x3bc>)
   2b3fe:	bf18      	it	ne
   2b400:	461e      	movne	r6, r3
   2b402:	e686      	b.n	2b112 <nrfx_twim_xfer+0xa6>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
   2b404:	f018 0f40 	tst.w	r8, #64	; 0x40
   2b408:	f47f ae83 	bne.w	2b112 <nrfx_twim_xfer+0xa6>
                !xfer_completeness_check(p_twim, p_cb))
   2b40c:	fb09 7101 	mla	r1, r9, r1, r7
   2b410:	4620      	mov	r0, r4
   2b412:	f00d fb3a 	bl	38a8a <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
   2b416:	4b03      	ldr	r3, [pc, #12]	; (2b424 <nrfx_twim_xfer+0x3b8>)
   2b418:	2800      	cmp	r0, #0
   2b41a:	bf08      	it	eq
   2b41c:	461e      	moveq	r6, r3
   2b41e:	e678      	b.n	2b112 <nrfx_twim_xfer+0xa6>
   2b420:	0bae0000 	.word	0x0bae0000
   2b424:	0bad0001 	.word	0x0bad0001
   2b428:	0bae0002 	.word	0x0bae0002

0002b42c <nrfx_twim_2_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_TWIM2_ENABLED)
void nrfx_twim_2_irq_handler(void)
{
   2b42c:	b5f0      	push	{r4, r5, r6, r7, lr}
    NRFX_ASSERT(p_cb->handler);
   2b42e:	4c5d      	ldr	r4, [pc, #372]	; (2b5a4 <nrfx_twim_2_irq_handler+0x178>)
{
   2b430:	b087      	sub	sp, #28
    NRFX_ASSERT(p_cb->handler);
   2b432:	6823      	ldr	r3, [r4, #0]
   2b434:	b95b      	cbnz	r3, 2b44e <nrfx_twim_2_irq_handler+0x22>
   2b436:	495c      	ldr	r1, [pc, #368]	; (2b5a8 <nrfx_twim_2_irq_handler+0x17c>)
   2b438:	485c      	ldr	r0, [pc, #368]	; (2b5ac <nrfx_twim_2_irq_handler+0x180>)
   2b43a:	f44f 7329 	mov.w	r3, #676	; 0x2a4
   2b43e:	4a5c      	ldr	r2, [pc, #368]	; (2b5b0 <nrfx_twim_2_irq_handler+0x184>)
   2b440:	f008 f8b7 	bl	335b2 <printk>
   2b444:	f44f 7129 	mov.w	r1, #676	; 0x2a4
   2b448:	4859      	ldr	r0, [pc, #356]	; (2b5b0 <nrfx_twim_2_irq_handler+0x184>)
   2b44a:	f008 fbb3 	bl	33bb4 <assert_post_action>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2b44e:	4b59      	ldr	r3, [pc, #356]	; (2b5b4 <nrfx_twim_2_irq_handler+0x188>)
   2b450:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   2b454:	461d      	mov	r5, r3
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   2b456:	b1ea      	cbz	r2, 2b494 <nrfx_twim_2_irq_handler+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2b458:	2200      	movs	r2, #0
   2b45a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2b45e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   2b462:	b9ba      	cbnz	r2, 2b494 <nrfx_twim_2_irq_handler+0x68>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
   2b464:	68a2      	ldr	r2, [r4, #8]
    p_reg->INTENCLR = mask;
   2b466:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   2b46a:	2202      	movs	r2, #2
   2b46c:	60a2      	str	r2, [r4, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   2b46e:	68a2      	ldr	r2, [r4, #8]
    p_reg->INTENSET = mask;
   2b470:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2b474:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
   2b478:	b11a      	cbz	r2, 2b482 <nrfx_twim_2_irq_handler+0x56>
    return p_reg->SHORTS;
   2b47a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   2b47e:	059e      	lsls	r6, r3, #22
   2b480:	d403      	bmi.n	2b48a <nrfx_twim_2_irq_handler+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2b482:	2201      	movs	r2, #1
   2b484:	4b4b      	ldr	r3, [pc, #300]	; (2b5b4 <nrfx_twim_2_irq_handler+0x188>)
   2b486:	621a      	str	r2, [r3, #32]
   2b488:	615a      	str	r2, [r3, #20]
            p_cb->error = true;
   2b48a:	2301      	movs	r3, #1
   2b48c:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    twim_irq_handler(NRF_TWIM2, &m_cb[NRFX_TWIM2_INST_IDX]);
}
   2b490:	b007      	add	sp, #28
   2b492:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2b494:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   2b498:	2b00      	cmp	r3, #0
   2b49a:	d04e      	beq.n	2b53a <nrfx_twim_2_irq_handler+0x10e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2b49c:	2300      	movs	r3, #0
   2b49e:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
   2b4a2:	6a23      	ldr	r3, [r4, #32]
   2b4a4:	065d      	lsls	r5, r3, #25
   2b4a6:	d40a      	bmi.n	2b4be <nrfx_twim_2_irq_handler+0x92>
   2b4a8:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   2b4ac:	b93b      	cbnz	r3, 2b4be <nrfx_twim_2_irq_handler+0x92>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
   2b4ae:	493d      	ldr	r1, [pc, #244]	; (2b5a4 <nrfx_twim_2_irq_handler+0x178>)
   2b4b0:	4840      	ldr	r0, [pc, #256]	; (2b5b4 <nrfx_twim_2_irq_handler+0x188>)
   2b4b2:	f00d faea 	bl	38a8a <xfer_completeness_check>
   2b4b6:	f080 0001 	eor.w	r0, r0, #1
   2b4ba:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
   2b4be:	6a23      	ldr	r3, [r4, #32]
   2b4c0:	f013 0704 	ands.w	r7, r3, #4
   2b4c4:	d11e      	bne.n	2b504 <nrfx_twim_2_irq_handler+0xd8>
            event.xfer_desc = p_cb->xfer_desc;
   2b4c6:	4e3c      	ldr	r6, [pc, #240]	; (2b5b8 <nrfx_twim_2_irq_handler+0x18c>)
   2b4c8:	ad01      	add	r5, sp, #4
   2b4ca:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2b4cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2b4ce:	6833      	ldr	r3, [r6, #0]
   2b4d0:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
   2b4d4:	602b      	str	r3, [r5, #0]
   2b4d6:	4b37      	ldr	r3, [pc, #220]	; (2b5b4 <nrfx_twim_2_irq_handler+0x188>)
   2b4d8:	f8c3 7160 	str.w	r7, [r3, #352]	; 0x160
   2b4dc:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
   2b4e0:	f1bc 0f00 	cmp.w	ip, #0
   2b4e4:	d002      	beq.n	2b4ec <nrfx_twim_2_irq_handler+0xc0>
   2b4e6:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
   2b4ea:	b15a      	cbz	r2, 2b504 <nrfx_twim_2_irq_handler+0xd8>
    p_reg->SHORTS = mask;
   2b4ec:	2200      	movs	r2, #0
   2b4ee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                p_cb->int_mask = 0;
   2b4f2:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
   2b4f4:	4a31      	ldr	r2, [pc, #196]	; (2b5bc <nrfx_twim_2_irq_handler+0x190>)
   2b4f6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   2b4fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2b4fe:	4b30      	ldr	r3, [pc, #192]	; (2b5c0 <nrfx_twim_2_irq_handler+0x194>)
   2b500:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    uint32_t error_source = p_reg->ERRORSRC;
   2b504:	4a2b      	ldr	r2, [pc, #172]	; (2b5b4 <nrfx_twim_2_irq_handler+0x188>)
   2b506:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
   2b50a:	0798      	lsls	r0, r3, #30
    p_reg->ERRORSRC = error_source;
   2b50c:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
   2b510:	d53a      	bpl.n	2b588 <nrfx_twim_2_irq_handler+0x15c>
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
   2b512:	2301      	movs	r3, #1
        event.type = NRFX_TWIM_EVT_DONE;
   2b514:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
   2b518:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   2b51c:	b90b      	cbnz	r3, 2b522 <nrfx_twim_2_irq_handler+0xf6>
        p_cb->busy = false;
   2b51e:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
   2b522:	6a23      	ldr	r3, [r4, #32]
   2b524:	075b      	lsls	r3, r3, #29
   2b526:	d503      	bpl.n	2b530 <nrfx_twim_2_irq_handler+0x104>
   2b528:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   2b52c:	2b00      	cmp	r3, #0
   2b52e:	d0af      	beq.n	2b490 <nrfx_twim_2_irq_handler+0x64>
        p_cb->handler(&event, p_cb->p_context);
   2b530:	e9d4 3100 	ldrd	r3, r1, [r4]
   2b534:	4668      	mov	r0, sp
   2b536:	4798      	blx	r3
}
   2b538:	e7aa      	b.n	2b490 <nrfx_twim_2_irq_handler+0x64>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2b53a:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
   2b53e:	7b23      	ldrb	r3, [r4, #12]
   2b540:	b983      	cbnz	r3, 2b564 <nrfx_twim_2_irq_handler+0x138>
            event.xfer_desc = p_cb->xfer_desc;
   2b542:	4f1d      	ldr	r7, [pc, #116]	; (2b5b8 <nrfx_twim_2_irq_handler+0x18c>)
   2b544:	ae01      	add	r6, sp, #4
   2b546:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   2b548:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   2b54a:	683b      	ldr	r3, [r7, #0]
   2b54c:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
   2b54e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   2b552:	2b00      	cmp	r3, #0
   2b554:	d1d6      	bne.n	2b504 <nrfx_twim_2_irq_handler+0xd8>
    p_reg->SHORTS = mask;
   2b556:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
   2b55a:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   2b55c:	4b17      	ldr	r3, [pc, #92]	; (2b5bc <nrfx_twim_2_irq_handler+0x190>)
   2b55e:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   2b562:	e7ca      	b.n	2b4fa <nrfx_twim_2_irq_handler+0xce>
    p_reg->SHORTS = mask;
   2b564:	f44f 7300 	mov.w	r3, #512	; 0x200
   2b568:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   2b56c:	f240 2302 	movw	r3, #514	; 0x202
   2b570:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   2b572:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
   2b576:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   2b57a:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   2b57c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2b580:	2301      	movs	r3, #1
   2b582:	60ab      	str	r3, [r5, #8]
   2b584:	622b      	str	r3, [r5, #32]
            return;
   2b586:	e783      	b.n	2b490 <nrfx_twim_2_irq_handler+0x64>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
   2b588:	0759      	lsls	r1, r3, #29
   2b58a:	d501      	bpl.n	2b590 <nrfx_twim_2_irq_handler+0x164>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
   2b58c:	2302      	movs	r3, #2
   2b58e:	e7c1      	b.n	2b514 <nrfx_twim_2_irq_handler+0xe8>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
   2b590:	07da      	lsls	r2, r3, #31
   2b592:	d501      	bpl.n	2b598 <nrfx_twim_2_irq_handler+0x16c>
        event.type = NRFX_TWIM_EVT_OVERRUN;
   2b594:	2303      	movs	r3, #3
   2b596:	e7bd      	b.n	2b514 <nrfx_twim_2_irq_handler+0xe8>
    else if (p_cb->error)
   2b598:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   2b59c:	2b00      	cmp	r3, #0
   2b59e:	d0b9      	beq.n	2b514 <nrfx_twim_2_irq_handler+0xe8>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
   2b5a0:	2304      	movs	r3, #4
   2b5a2:	e7b7      	b.n	2b514 <nrfx_twim_2_irq_handler+0xe8>
   2b5a4:	20022ac8 	.word	0x20022ac8
   2b5a8:	0003f569 	.word	0x0003f569
   2b5ac:	0003b773 	.word	0x0003b773
   2b5b0:	0003f774 	.word	0x0003f774
   2b5b4:	4000a000 	.word	0x4000a000
   2b5b8:	20022ad4 	.word	0x20022ad4
   2b5bc:	019c0202 	.word	0x019c0202
   2b5c0:	e000e100 	.word	0xe000e100

0002b5c4 <nrfx_wdt_init>:
static wdt_control_block_t m_cb[NRFX_WDT_ENABLED_COUNT];

nrfx_err_t nrfx_wdt_init(nrfx_wdt_t const *        p_instance,
                         nrfx_wdt_config_t const * p_config,
                         nrfx_wdt_event_handler_t  wdt_event_handler)
{
   2b5c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b5c8:	4606      	mov	r6, r0
   2b5ca:	4617      	mov	r7, r2
    NRFX_ASSERT(p_config);
   2b5cc:	460c      	mov	r4, r1
   2b5ce:	b949      	cbnz	r1, 2b5e4 <nrfx_wdt_init+0x20>
   2b5d0:	4921      	ldr	r1, [pc, #132]	; (2b658 <nrfx_wdt_init+0x94>)
   2b5d2:	4822      	ldr	r0, [pc, #136]	; (2b65c <nrfx_wdt_init+0x98>)
   2b5d4:	233d      	movs	r3, #61	; 0x3d
   2b5d6:	4a22      	ldr	r2, [pc, #136]	; (2b660 <nrfx_wdt_init+0x9c>)
   2b5d8:	f007 ffeb 	bl	335b2 <printk>
   2b5dc:	213d      	movs	r1, #61	; 0x3d
   2b5de:	4820      	ldr	r0, [pc, #128]	; (2b660 <nrfx_wdt_init+0x9c>)
   2b5e0:	f008 fae8 	bl	33bb4 <assert_post_action>
    nrfx_err_t err_code;

    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2b5e4:	7932      	ldrb	r2, [r6, #4]

#if NRFX_CHECK(NRFX_WDT_CONFIG_NO_IRQ)
    (void)wdt_event_handler;
#else
    p_cb->wdt_event_handler = wdt_event_handler;
   2b5e6:	4b1f      	ldr	r3, [pc, #124]	; (2b664 <nrfx_wdt_init+0xa0>)
   2b5e8:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
   2b5ec:	604f      	str	r7, [r1, #4]
#endif

    if (p_cb->state == NRFX_DRV_STATE_UNINITIALIZED)
   2b5ee:	f813 1032 	ldrb.w	r1, [r3, r2, lsl #3]
   2b5f2:	bb69      	cbnz	r1, 2b650 <nrfx_wdt_init+0x8c>
    {
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   2b5f4:	2001      	movs	r0, #1
   2b5f6:	f803 0032 	strb.w	r0, [r3, r2, lsl #3]
    p_reg->CONFIG = behaviour;
   2b5fa:	7822      	ldrb	r2, [r4, #0]
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    nrf_wdt_behaviour_set(p_instance->p_reg, p_config->behaviour);
   2b5fc:	6833      	ldr	r3, [r6, #0]
   2b5fe:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    uint64_t ticks = (p_config->reload_value * 32768ULL) / 1000;
   2b602:	6863      	ldr	r3, [r4, #4]
   2b604:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2b608:	0c5d      	lsrs	r5, r3, #17
   2b60a:	03dc      	lsls	r4, r3, #15
   2b60c:	4620      	mov	r0, r4
   2b60e:	2300      	movs	r3, #0
   2b610:	4629      	mov	r1, r5
   2b612:	f7e2 f8ad 	bl	d770 <__aeabi_uldivmod>
    NRFX_ASSERT(ticks <= UINT32_MAX);
   2b616:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
   2b61a:	bf08      	it	eq
   2b61c:	2c00      	cmpeq	r4, #0
    uint64_t ticks = (p_config->reload_value * 32768ULL) / 1000;
   2b61e:	4680      	mov	r8, r0
    NRFX_ASSERT(ticks <= UINT32_MAX);
   2b620:	d309      	bcc.n	2b636 <nrfx_wdt_init+0x72>
   2b622:	4911      	ldr	r1, [pc, #68]	; (2b668 <nrfx_wdt_init+0xa4>)
   2b624:	480d      	ldr	r0, [pc, #52]	; (2b65c <nrfx_wdt_init+0x98>)
   2b626:	2358      	movs	r3, #88	; 0x58
   2b628:	4a0d      	ldr	r2, [pc, #52]	; (2b660 <nrfx_wdt_init+0x9c>)
   2b62a:	f007 ffc2 	bl	335b2 <printk>
   2b62e:	2158      	movs	r1, #88	; 0x58
   2b630:	480b      	ldr	r0, [pc, #44]	; (2b660 <nrfx_wdt_init+0x9c>)
   2b632:	f008 fabf 	bl	33bb4 <assert_post_action>

    nrf_wdt_reload_value_set(p_instance->p_reg, (uint32_t) ticks);
   2b636:	6830      	ldr	r0, [r6, #0]
}

NRF_STATIC_INLINE void nrf_wdt_reload_value_set(NRF_WDT_Type * p_reg, uint32_t reload_value)
{
    p_reg->CRV = reload_value;
   2b638:	f8c0 8504 	str.w	r8, [r0, #1284]	; 0x504

#if !NRFX_CHECK(NRFX_WDT_CONFIG_NO_IRQ)
    if (wdt_event_handler)
   2b63c:	b137      	cbz	r7, 2b64c <nrfx_wdt_init+0x88>
    p_reg->INTENSET = mask;
   2b63e:	2301      	movs	r3, #1
   2b640:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
    {
        nrf_wdt_int_enable(p_instance->p_reg, NRF_WDT_INT_TIMEOUT_MASK);
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg), p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   2b644:	f340 3007 	sbfx	r0, r0, #12, #8
   2b648:	f7ef fac8 	bl	1abdc <arch_irq_enable>
    }
#endif

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   2b64c:	4807      	ldr	r0, [pc, #28]	; (2b66c <nrfx_wdt_init+0xa8>)
   2b64e:	e000      	b.n	2b652 <nrfx_wdt_init+0x8e>
        return err_code;
   2b650:	4807      	ldr	r0, [pc, #28]	; (2b670 <nrfx_wdt_init+0xac>)
}
   2b652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2b656:	bf00      	nop
   2b658:	0003f5b3 	.word	0x0003f5b3
   2b65c:	0003b773 	.word	0x0003b773
   2b660:	0003f9c2 	.word	0x0003f9c2
   2b664:	20022afc 	.word	0x20022afc
   2b668:	0003f9fd 	.word	0x0003f9fd
   2b66c:	0bad0000 	.word	0x0bad0000
   2b670:	0bad0005 	.word	0x0bad0005

0002b674 <nrfx_wdt_enable>:


void nrfx_wdt_enable(nrfx_wdt_t const * p_instance)
{
   2b674:	b570      	push	{r4, r5, r6, lr}
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->alloc_index != 0);
   2b676:	4c13      	ldr	r4, [pc, #76]	; (2b6c4 <nrfx_wdt_enable+0x50>)
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2b678:	7905      	ldrb	r5, [r0, #4]
{
   2b67a:	4606      	mov	r6, r0
    NRFX_ASSERT(p_cb->alloc_index != 0);
   2b67c:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   2b680:	785b      	ldrb	r3, [r3, #1]
   2b682:	b94b      	cbnz	r3, 2b698 <nrfx_wdt_enable+0x24>
   2b684:	4910      	ldr	r1, [pc, #64]	; (2b6c8 <nrfx_wdt_enable+0x54>)
   2b686:	4811      	ldr	r0, [pc, #68]	; (2b6cc <nrfx_wdt_enable+0x58>)
   2b688:	236e      	movs	r3, #110	; 0x6e
   2b68a:	4a11      	ldr	r2, [pc, #68]	; (2b6d0 <nrfx_wdt_enable+0x5c>)
   2b68c:	f007 ff91 	bl	335b2 <printk>
   2b690:	216e      	movs	r1, #110	; 0x6e
   2b692:	480f      	ldr	r0, [pc, #60]	; (2b6d0 <nrfx_wdt_enable+0x5c>)
   2b694:	f008 fa8e 	bl	33bb4 <assert_post_action>
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   2b698:	f814 3035 	ldrb.w	r3, [r4, r5, lsl #3]
   2b69c:	2b01      	cmp	r3, #1
   2b69e:	d009      	beq.n	2b6b4 <nrfx_wdt_enable+0x40>
   2b6a0:	490c      	ldr	r1, [pc, #48]	; (2b6d4 <nrfx_wdt_enable+0x60>)
   2b6a2:	480a      	ldr	r0, [pc, #40]	; (2b6cc <nrfx_wdt_enable+0x58>)
   2b6a4:	236f      	movs	r3, #111	; 0x6f
   2b6a6:	4a0a      	ldr	r2, [pc, #40]	; (2b6d0 <nrfx_wdt_enable+0x5c>)
   2b6a8:	f007 ff83 	bl	335b2 <printk>
   2b6ac:	216f      	movs	r1, #111	; 0x6f
   2b6ae:	4808      	ldr	r0, [pc, #32]	; (2b6d0 <nrfx_wdt_enable+0x5c>)
   2b6b0:	f008 fa80 	bl	33bb4 <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x01UL;
   2b6b4:	2201      	movs	r2, #1
    nrf_wdt_task_trigger(p_instance->p_reg, NRF_WDT_TASK_START);
   2b6b6:	6833      	ldr	r3, [r6, #0]
   2b6b8:	601a      	str	r2, [r3, #0]
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   2b6ba:	2302      	movs	r3, #2
   2b6bc:	f804 3035 	strb.w	r3, [r4, r5, lsl #3]
    NRFX_LOG_INFO("Enabled.");
}
   2b6c0:	bd70      	pop	{r4, r5, r6, pc}
   2b6c2:	bf00      	nop
   2b6c4:	20022afc 	.word	0x20022afc
   2b6c8:	0003f9ab 	.word	0x0003f9ab
   2b6cc:	0003b773 	.word	0x0003b773
   2b6d0:	0003f9c2 	.word	0x0003f9c2
   2b6d4:	0003f74a 	.word	0x0003f74a

0002b6d8 <nrfx_wdt_channel_alloc>:
        nrf_wdt_reload_request_set(p_instance->p_reg, (nrf_wdt_rr_register_t)(NRF_WDT_RR0 + i));
    }
}

nrfx_err_t nrfx_wdt_channel_alloc(nrfx_wdt_t const * p_instance, nrfx_wdt_channel_id * p_channel_id)
{
   2b6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b6da:	4605      	mov	r5, r0
    nrfx_err_t result;
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2b6dc:	7907      	ldrb	r7, [r0, #4]

    NRFX_ASSERT(p_channel_id);
   2b6de:	460e      	mov	r6, r1
   2b6e0:	b949      	cbnz	r1, 2b6f6 <nrfx_wdt_channel_alloc+0x1e>
   2b6e2:	491c      	ldr	r1, [pc, #112]	; (2b754 <nrfx_wdt_channel_alloc+0x7c>)
   2b6e4:	481c      	ldr	r0, [pc, #112]	; (2b758 <nrfx_wdt_channel_alloc+0x80>)
   2b6e6:	2385      	movs	r3, #133	; 0x85
   2b6e8:	4a1c      	ldr	r2, [pc, #112]	; (2b75c <nrfx_wdt_channel_alloc+0x84>)
   2b6ea:	f007 ff62 	bl	335b2 <printk>
   2b6ee:	2185      	movs	r1, #133	; 0x85
   2b6f0:	481a      	ldr	r0, [pc, #104]	; (2b75c <nrfx_wdt_channel_alloc+0x84>)
   2b6f2:	f008 fa5f 	bl	33bb4 <assert_post_action>
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   2b6f6:	4c1a      	ldr	r4, [pc, #104]	; (2b760 <nrfx_wdt_channel_alloc+0x88>)
   2b6f8:	f814 2037 	ldrb.w	r2, [r4, r7, lsl #3]
   2b6fc:	2a01      	cmp	r2, #1
   2b6fe:	d009      	beq.n	2b714 <nrfx_wdt_channel_alloc+0x3c>
   2b700:	4918      	ldr	r1, [pc, #96]	; (2b764 <nrfx_wdt_channel_alloc+0x8c>)
   2b702:	4815      	ldr	r0, [pc, #84]	; (2b758 <nrfx_wdt_channel_alloc+0x80>)
   2b704:	2386      	movs	r3, #134	; 0x86
   2b706:	4a15      	ldr	r2, [pc, #84]	; (2b75c <nrfx_wdt_channel_alloc+0x84>)
   2b708:	f007 ff53 	bl	335b2 <printk>
   2b70c:	2186      	movs	r1, #134	; 0x86
   2b70e:	4813      	ldr	r0, [pc, #76]	; (2b75c <nrfx_wdt_channel_alloc+0x84>)
   2b710:	f008 fa50 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   2b714:	f04f 0320 	mov.w	r3, #32
   2b718:	f3ef 8c11 	mrs	ip, BASEPRI
   2b71c:	f383 8811 	msr	BASEPRI, r3
   2b720:	f3bf 8f6f 	isb	sy

    NRFX_CRITICAL_SECTION_ENTER();
    if (p_cb->alloc_index < NRF_WDT_CHANNEL_NUMBER)
   2b724:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
   2b728:	785a      	ldrb	r2, [r3, #1]
   2b72a:	2a07      	cmp	r2, #7
   2b72c:	d810      	bhi.n	2b750 <nrfx_wdt_channel_alloc+0x78>
    {
        *p_channel_id = (nrfx_wdt_channel_id)(NRF_WDT_RR0 + p_cb->alloc_index);
        p_cb->alloc_index++;
   2b72e:	1c51      	adds	r1, r2, #1
   2b730:	7059      	strb	r1, [r3, #1]
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_enable(NRF_WDT_Type *        p_reg,
                                                     nrf_wdt_rr_register_t rr_register)
{
    p_reg->RREN |= 0x1UL << rr_register;
   2b732:	2301      	movs	r3, #1
        nrf_wdt_reload_request_enable(p_instance->p_reg, *p_channel_id);
   2b734:	6829      	ldr	r1, [r5, #0]
   2b736:	4093      	lsls	r3, r2
   2b738:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
        *p_channel_id = (nrfx_wdt_channel_id)(NRF_WDT_RR0 + p_cb->alloc_index);
   2b73c:	7032      	strb	r2, [r6, #0]
   2b73e:	4303      	orrs	r3, r0
        result = NRFX_SUCCESS;
   2b740:	4809      	ldr	r0, [pc, #36]	; (2b768 <nrfx_wdt_channel_alloc+0x90>)
   2b742:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
	__asm__ volatile(
   2b746:	f38c 8811 	msr	BASEPRI, ip
   2b74a:	f3bf 8f6f 	isb	sy
        result = NRFX_ERROR_NO_MEM;
    }
    NRFX_CRITICAL_SECTION_EXIT();
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(result));
    return result;
}
   2b74e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        result = NRFX_ERROR_NO_MEM;
   2b750:	4806      	ldr	r0, [pc, #24]	; (2b76c <nrfx_wdt_channel_alloc+0x94>)
   2b752:	e7f8      	b.n	2b746 <nrfx_wdt_channel_alloc+0x6e>
   2b754:	0003f95c 	.word	0x0003f95c
   2b758:	0003b773 	.word	0x0003b773
   2b75c:	0003f9c2 	.word	0x0003f9c2
   2b760:	20022afc 	.word	0x20022afc
   2b764:	0003f74a 	.word	0x0003f74a
   2b768:	0bad0000 	.word	0x0bad0000
   2b76c:	0bad0002 	.word	0x0bad0002

0002b770 <nrfx_wdt_channel_feed>:

void nrfx_wdt_channel_feed(nrfx_wdt_t const * p_instance, nrfx_wdt_channel_id channel_id)
{
   2b770:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state == NRFX_DRV_STATE_POWERED_ON);
   2b772:	4b0c      	ldr	r3, [pc, #48]	; (2b7a4 <nrfx_wdt_channel_feed+0x34>)
   2b774:	7902      	ldrb	r2, [r0, #4]
{
   2b776:	4605      	mov	r5, r0
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state == NRFX_DRV_STATE_POWERED_ON);
   2b778:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
{
   2b77c:	460c      	mov	r4, r1
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state == NRFX_DRV_STATE_POWERED_ON);
   2b77e:	2b02      	cmp	r3, #2
   2b780:	d009      	beq.n	2b796 <nrfx_wdt_channel_feed+0x26>
   2b782:	4909      	ldr	r1, [pc, #36]	; (2b7a8 <nrfx_wdt_channel_feed+0x38>)
   2b784:	4809      	ldr	r0, [pc, #36]	; (2b7ac <nrfx_wdt_channel_feed+0x3c>)
   2b786:	239b      	movs	r3, #155	; 0x9b
   2b788:	4a09      	ldr	r2, [pc, #36]	; (2b7b0 <nrfx_wdt_channel_feed+0x40>)
   2b78a:	f007 ff12 	bl	335b2 <printk>
   2b78e:	219b      	movs	r1, #155	; 0x9b
   2b790:	4807      	ldr	r0, [pc, #28]	; (2b7b0 <nrfx_wdt_channel_feed+0x40>)
   2b792:	f008 fa0f 	bl	33bb4 <assert_post_action>
    nrf_wdt_reload_request_set(p_instance->p_reg, channel_id);
   2b796:	682b      	ldr	r3, [r5, #0]
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_set(NRF_WDT_Type *        p_reg,
                                                  nrf_wdt_rr_register_t rr_register)
{
    p_reg->RR[rr_register] = NRF_WDT_RR_VALUE;
   2b798:	4a06      	ldr	r2, [pc, #24]	; (2b7b4 <nrfx_wdt_channel_feed+0x44>)
   2b79a:	f504 74c0 	add.w	r4, r4, #384	; 0x180
   2b79e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
}
   2b7a2:	bd38      	pop	{r3, r4, r5, pc}
   2b7a4:	20022afc 	.word	0x20022afc
   2b7a8:	0003f969 	.word	0x0003f969
   2b7ac:	0003b773 	.word	0x0003b773
   2b7b0:	0003f9c2 	.word	0x0003f9c2
   2b7b4:	6e524635 	.word	0x6e524635

0002b7b8 <nrfx_wdt_0_irq_handler>:

#if NRFX_CHECK(NRFX_WDT0_ENABLED) && !NRFX_CHECK(NRFX_WDT_CONFIG_NO_IRQ)
void nrfx_wdt_0_irq_handler(void)
{
   2b7b8:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   2b7ba:	4c04      	ldr	r4, [pc, #16]	; (2b7cc <nrfx_wdt_0_irq_handler+0x14>)
   2b7bc:	6823      	ldr	r3, [r4, #0]
    if (nrf_wdt_event_check(NRF_WDT0, NRF_WDT_EVENT_TIMEOUT))
   2b7be:	b123      	cbz	r3, 2b7ca <nrfx_wdt_0_irq_handler+0x12>
    {
        m_cb[NRFX_WDT0_INST_IDX].wdt_event_handler();
   2b7c0:	4b03      	ldr	r3, [pc, #12]	; (2b7d0 <nrfx_wdt_0_irq_handler+0x18>)
   2b7c2:	685b      	ldr	r3, [r3, #4]
   2b7c4:	4798      	blx	r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2b7c6:	2300      	movs	r3, #0
   2b7c8:	6023      	str	r3, [r4, #0]
        nrf_wdt_event_clear(NRF_WDT0, NRF_WDT_EVENT_TIMEOUT);
    }
}
   2b7ca:	bd10      	pop	{r4, pc}
   2b7cc:	40018100 	.word	0x40018100
   2b7d0:	20022afc 	.word	0x20022afc

0002b7d4 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(s32_t level)
{
   2b7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			if (dev) {
				/* Initialization failed. Clear the API struct
				 * so that device_get_binding() will not succeed
				 * for it.
				 */
				dev->driver_api = NULL;
   2b7d6:	2700      	movs	r7, #0
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   2b7d8:	4b08      	ldr	r3, [pc, #32]	; (2b7fc <z_sys_init_run_level+0x28>)
   2b7da:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   2b7de:	3001      	adds	r0, #1
   2b7e0:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   2b7e4:	42a6      	cmp	r6, r4
   2b7e6:	d800      	bhi.n	2b7ea <z_sys_init_run_level+0x16>
			}
		}
	}
}
   2b7e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		retval = entry->init(dev);
   2b7ea:	e9d4 3500 	ldrd	r3, r5, [r4]
   2b7ee:	4628      	mov	r0, r5
   2b7f0:	4798      	blx	r3
		if (retval != 0) {
   2b7f2:	b108      	cbz	r0, 2b7f8 <z_sys_init_run_level+0x24>
			if (dev) {
   2b7f4:	b105      	cbz	r5, 2b7f8 <z_sys_init_run_level+0x24>
				dev->driver_api = NULL;
   2b7f6:	60af      	str	r7, [r5, #8]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   2b7f8:	3408      	adds	r4, #8
   2b7fa:	e7f3      	b.n	2b7e4 <z_sys_init_run_level+0x10>
   2b7fc:	0003ac10 	.word	0x0003ac10

0002b800 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
   2b800:	4b0f      	ldr	r3, [pc, #60]	; (2b840 <z_impl_device_get_binding+0x40>)
{
   2b802:	b570      	push	{r4, r5, r6, lr}
   2b804:	4605      	mov	r5, r0
   2b806:	461e      	mov	r6, r3
	for (dev = __device_start; dev != __device_end; dev++) {
   2b808:	4c0e      	ldr	r4, [pc, #56]	; (2b844 <z_impl_device_get_binding+0x44>)
   2b80a:	429c      	cmp	r4, r3
   2b80c:	d104      	bne.n	2b818 <z_impl_device_get_binding+0x18>
		    (dev->name == name)) {
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
   2b80e:	4c0d      	ldr	r4, [pc, #52]	; (2b844 <z_impl_device_get_binding+0x44>)
   2b810:	42b4      	cmp	r4, r6
   2b812:	d108      	bne.n	2b826 <z_impl_device_get_binding+0x26>
		    (strcmp(name, dev->name) == 0)) {
			return dev;
		}
	}

	return NULL;
   2b814:	2400      	movs	r4, #0
   2b816:	e010      	b.n	2b83a <z_impl_device_get_binding+0x3a>
		if ((dev->driver_api != NULL) &&
   2b818:	68a2      	ldr	r2, [r4, #8]
   2b81a:	b112      	cbz	r2, 2b822 <z_impl_device_get_binding+0x22>
   2b81c:	6822      	ldr	r2, [r4, #0]
   2b81e:	42aa      	cmp	r2, r5
   2b820:	d00b      	beq.n	2b83a <z_impl_device_get_binding+0x3a>
	for (dev = __device_start; dev != __device_end; dev++) {
   2b822:	3410      	adds	r4, #16
   2b824:	e7f1      	b.n	2b80a <z_impl_device_get_binding+0xa>
		if ((dev->driver_api != NULL) &&
   2b826:	68a3      	ldr	r3, [r4, #8]
   2b828:	b90b      	cbnz	r3, 2b82e <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   2b82a:	3410      	adds	r4, #16
   2b82c:	e7f0      	b.n	2b810 <z_impl_device_get_binding+0x10>
		    (strcmp(name, dev->name) == 0)) {
   2b82e:	6821      	ldr	r1, [r4, #0]
   2b830:	4628      	mov	r0, r5
   2b832:	f7e6 fc1b 	bl	1206c <strcmp>
		if ((dev->driver_api != NULL) &&
   2b836:	2800      	cmp	r0, #0
   2b838:	d1f7      	bne.n	2b82a <z_impl_device_get_binding+0x2a>
}
   2b83a:	4620      	mov	r0, r4
   2b83c:	bd70      	pop	{r4, r5, r6, pc}
   2b83e:	bf00      	nop
   2b840:	200205b4 	.word	0x200205b4
   2b844:	20020504 	.word	0x20020504

0002b848 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   2b848:	4b01      	ldr	r3, [pc, #4]	; (2b850 <z_impl_z_errno+0x8>)
   2b84a:	6898      	ldr	r0, [r3, #8]
}
   2b84c:	305c      	adds	r0, #92	; 0x5c
   2b84e:	4770      	bx	lr
   2b850:	200274dc 	.word	0x200274dc

0002b854 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   2b854:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2b858:	4605      	mov	r5, r0
   2b85a:	460f      	mov	r7, r1
	__asm__ volatile(
   2b85c:	f04f 0320 	mov.w	r3, #32
   2b860:	f3ef 8911 	mrs	r9, BASEPRI
   2b864:	f383 8811 	msr	BASEPRI, r3
   2b868:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   2b86c:	f002 fbae 	bl	2dfcc <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   2b870:	2301      	movs	r3, #1
   2b872:	4606      	mov	r6, r0
   2b874:	f04f 0000 	mov.w	r0, #0
   2b878:	2200      	movs	r2, #0
   2b87a:	f363 0007 	bfi	r0, r3, #0, #8
   2b87e:	4c2d      	ldr	r4, [pc, #180]	; (2b934 <z_fatal_error+0xe0>)
   2b880:	4b2d      	ldr	r3, [pc, #180]	; (2b938 <z_fatal_error+0xe4>)
   2b882:	2d04      	cmp	r5, #4
   2b884:	eba4 0403 	sub.w	r4, r4, r3
   2b888:	bf98      	it	ls
   2b88a:	4b2c      	ldrls	r3, [pc, #176]	; (2b93c <z_fatal_error+0xe8>)
   2b88c:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2b890:	bf94      	ite	ls
   2b892:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
   2b896:	4b2a      	ldrhi	r3, [pc, #168]	; (2b940 <z_fatal_error+0xec>)
   2b898:	9200      	str	r2, [sp, #0]
   2b89a:	f364 108f 	bfi	r0, r4, #6, #10
   2b89e:	462a      	mov	r2, r5
   2b8a0:	4928      	ldr	r1, [pc, #160]	; (2b944 <z_fatal_error+0xf0>)
   2b8a2:	f008 f99e 	bl	33be2 <log_string_sync>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   2b8a6:	b16f      	cbz	r7, 2b8c4 <z_fatal_error+0x70>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   2b8a8:	69fb      	ldr	r3, [r7, #28]
   2b8aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
   2b8ae:	b14b      	cbz	r3, 2b8c4 <z_fatal_error+0x70>
		LOG_ERR("Fault during interrupt handling\n");
   2b8b0:	f04f 0000 	mov.w	r0, #0
   2b8b4:	2301      	movs	r3, #1
   2b8b6:	f363 0007 	bfi	r0, r3, #0, #8
   2b8ba:	f364 108f 	bfi	r0, r4, #6, #10
   2b8be:	4922      	ldr	r1, [pc, #136]	; (2b948 <z_fatal_error+0xf4>)
   2b8c0:	f008 f98f 	bl	33be2 <log_string_sync>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   2b8c4:	f04f 0800 	mov.w	r8, #0
   2b8c8:	2301      	movs	r3, #1
	const char *thread_name = k_thread_name_get(thread);
   2b8ca:	4630      	mov	r0, r6
	LOG_ERR("Current thread: %p (%s)", thread,
   2b8cc:	f363 0807 	bfi	r8, r3, #0, #8
   2b8d0:	f364 188f 	bfi	r8, r4, #6, #10
	const char *thread_name = k_thread_name_get(thread);
   2b8d4:	f00d fa35 	bl	38d42 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   2b8d8:	b348      	cbz	r0, 2b92e <z_fatal_error+0xda>
   2b8da:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
   2b8dc:	4b1b      	ldr	r3, [pc, #108]	; (2b94c <z_fatal_error+0xf8>)
   2b8de:	2a00      	cmp	r2, #0
   2b8e0:	bf08      	it	eq
   2b8e2:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
   2b8e4:	f008 f98f 	bl	33c06 <log_strdup>
   2b8e8:	4632      	mov	r2, r6
   2b8ea:	4603      	mov	r3, r0
   2b8ec:	4918      	ldr	r1, [pc, #96]	; (2b950 <z_fatal_error+0xfc>)
   2b8ee:	4640      	mov	r0, r8
   2b8f0:	f008 f977 	bl	33be2 <log_string_sync>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   2b8f4:	4639      	mov	r1, r7
   2b8f6:	4628      	mov	r0, r5
   2b8f8:	f7f6 f982 	bl	21c00 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   2b8fc:	2d04      	cmp	r5, #4
   2b8fe:	d10c      	bne.n	2b91a <z_fatal_error+0xc6>
   2b900:	4914      	ldr	r1, [pc, #80]	; (2b954 <z_fatal_error+0x100>)
   2b902:	238c      	movs	r3, #140	; 0x8c
   2b904:	4a14      	ldr	r2, [pc, #80]	; (2b958 <z_fatal_error+0x104>)
   2b906:	4815      	ldr	r0, [pc, #84]	; (2b95c <z_fatal_error+0x108>)
   2b908:	f007 fe53 	bl	335b2 <printk>
   2b90c:	4814      	ldr	r0, [pc, #80]	; (2b960 <z_fatal_error+0x10c>)
   2b90e:	f007 fe50 	bl	335b2 <printk>
   2b912:	218c      	movs	r1, #140	; 0x8c
   2b914:	4810      	ldr	r0, [pc, #64]	; (2b958 <z_fatal_error+0x104>)
   2b916:	f008 f94d 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   2b91a:	f389 8811 	msr	BASEPRI, r9
   2b91e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   2b922:	4630      	mov	r0, r6
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   2b924:	b003      	add	sp, #12
   2b926:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2b92a:	f7ef be13 	b.w	1b554 <z_impl_k_thread_abort>
		thread_name = "unknown";
   2b92e:	4807      	ldr	r0, [pc, #28]	; (2b94c <z_fatal_error+0xf8>)
   2b930:	e7d8      	b.n	2b8e4 <z_fatal_error+0x90>
   2b932:	bf00      	nop
   2b934:	00039fd8 	.word	0x00039fd8
   2b938:	00039f48 	.word	0x00039f48
   2b93c:	0003ac28 	.word	0x0003ac28
   2b940:	0003fa5d 	.word	0x0003fa5d
   2b944:	0003fa73 	.word	0x0003fa73
   2b948:	0003fa9b 	.word	0x0003fa9b
   2b94c:	0003fa6b 	.word	0x0003fa6b
   2b950:	0003fabc 	.word	0x0003fabc
   2b954:	0003faf6 	.word	0x0003faf6
   2b958:	0003fad4 	.word	0x0003fad4
   2b95c:	0003b773 	.word	0x0003b773
   2b960:	0003fb13 	.word	0x0003fb13

0002b964 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   2b964:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   2b966:	4d0b      	ldr	r5, [pc, #44]	; (2b994 <idle+0x30>)
	__asm__ volatile(
   2b968:	f04f 0220 	mov.w	r2, #32
   2b96c:	f3ef 8311 	mrs	r3, BASEPRI
   2b970:	f382 8811 	msr	BASEPRI, r2
   2b974:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   2b978:	f003 f86c 	bl	2ea54 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   2b97c:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
   2b97e:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   2b980:	2802      	cmp	r0, #2
   2b982:	bfd8      	it	le
   2b984:	4608      	movle	r0, r1
   2b986:	f003 f8ad 	bl	2eae4 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   2b98a:	622c      	str	r4, [r5, #32]
	arch_cpu_idle();
   2b98c:	f7ef f9c0 	bl	1ad10 <arch_cpu_idle>
   2b990:	e7ea      	b.n	2b968 <idle+0x4>
   2b992:	bf00      	nop
   2b994:	200274dc 	.word	0x200274dc

0002b998 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   2b998:	4802      	ldr	r0, [pc, #8]	; (2b9a4 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   2b99a:	4a03      	ldr	r2, [pc, #12]	; (2b9a8 <z_bss_zero+0x10>)
   2b99c:	2100      	movs	r1, #0
   2b99e:	1a12      	subs	r2, r2, r0
   2b9a0:	f00d bb49 	b.w	39036 <memset>
   2b9a4:	20020900 	.word	0x20020900
   2b9a8:	20029208 	.word	0x20029208

0002b9ac <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   2b9ac:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2b9ae:	4806      	ldr	r0, [pc, #24]	; (2b9c8 <z_data_copy+0x1c>)
   2b9b0:	4a06      	ldr	r2, [pc, #24]	; (2b9cc <z_data_copy+0x20>)
   2b9b2:	4907      	ldr	r1, [pc, #28]	; (2b9d0 <z_data_copy+0x24>)
   2b9b4:	1a12      	subs	r2, r2, r0
   2b9b6:	f00d fb04 	bl	38fc2 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   2b9ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2b9be:	4a05      	ldr	r2, [pc, #20]	; (2b9d4 <z_data_copy+0x28>)
   2b9c0:	4905      	ldr	r1, [pc, #20]	; (2b9d8 <z_data_copy+0x2c>)
   2b9c2:	4806      	ldr	r0, [pc, #24]	; (2b9dc <z_data_copy+0x30>)
   2b9c4:	f00d bafd 	b.w	38fc2 <memcpy>
   2b9c8:	20020000 	.word	0x20020000
   2b9cc:	200208fc 	.word	0x200208fc
   2b9d0:	00040998 	.word	0x00040998
   2b9d4:	00000000 	.word	0x00000000
   2b9d8:	00040998 	.word	0x00040998
   2b9dc:	20020000 	.word	0x20020000

0002b9e0 <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   2b9e0:	2201      	movs	r2, #1
{
   2b9e2:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   2b9e4:	4b0b      	ldr	r3, [pc, #44]	; (2ba14 <bg_thread_main+0x34>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   2b9e6:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   2b9e8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   2b9ea:	f7ff fef3 	bl	2b7d4 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   2b9ee:	4a0a      	ldr	r2, [pc, #40]	; (2ba18 <bg_thread_main+0x38>)
   2b9f0:	490a      	ldr	r1, [pc, #40]	; (2ba1c <bg_thread_main+0x3c>)
   2b9f2:	480b      	ldr	r0, [pc, #44]	; (2ba20 <bg_thread_main+0x40>)
   2b9f4:	f007 fddd 	bl	335b2 <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   2b9f8:	2003      	movs	r0, #3
   2b9fa:	f7ff feeb 	bl	2b7d4 <z_sys_init_run_level>

	z_init_static_threads();
   2b9fe:	f002 fcdb 	bl	2e3b8 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   2ba02:	f7e9 fc0d 	bl	15220 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   2ba06:	4a07      	ldr	r2, [pc, #28]	; (2ba24 <bg_thread_main+0x44>)
   2ba08:	7b13      	ldrb	r3, [r2, #12]
   2ba0a:	f023 0301 	bic.w	r3, r3, #1
   2ba0e:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   2ba10:	bd08      	pop	{r3, pc}
   2ba12:	bf00      	nop
   2ba14:	2002908d 	.word	0x2002908d
   2ba18:	0003c514 	.word	0x0003c514
   2ba1c:	0003fb48 	.word	0x0003fb48
   2ba20:	0003fb68 	.word	0x0003fb68
   2ba24:	20022bbc 	.word	0x20022bbc

0002ba28 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   2ba28:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   2ba2c:	b0b5      	sub	sp, #212	; 0xd4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   2ba2e:	f7ed f9bd 	bl	18dac <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(z_interrupt_stacks[0])) +
   2ba32:	4b36      	ldr	r3, [pc, #216]	; (2bb0c <z_cstart+0xe4>)
   2ba34:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   2ba38:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   2ba3c:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2ba40:	2400      	movs	r4, #0
   2ba42:	23e0      	movs	r3, #224	; 0xe0
   2ba44:	4d32      	ldr	r5, [pc, #200]	; (2bb10 <z_cstart+0xe8>)
	_kernel.ready_q.cache = &z_main_thread;
   2ba46:	4e33      	ldr	r6, [pc, #204]	; (2bb14 <z_cstart+0xec>)
   2ba48:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   2ba4c:	77ec      	strb	r4, [r5, #31]
   2ba4e:	762c      	strb	r4, [r5, #24]
   2ba50:	766c      	strb	r4, [r5, #25]
   2ba52:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   2ba54:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   2ba56:	f04f 0b01 	mov.w	fp, #1
   2ba5a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   2ba5e:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   2ba60:	f7ef fd40 	bl	1b4e4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   2ba64:	f7ef f94e 	bl	1ad04 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   2ba68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2ba6c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   2ba6e:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   2ba70:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = 0;
#endif

	_current_cpu->current = dummy_thread;
   2ba74:	4d28      	ldr	r5, [pc, #160]	; (2bb18 <z_cstart+0xf0>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   2ba76:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   2ba7a:	ab06      	add	r3, sp, #24
   2ba7c:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   2ba7e:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   2ba80:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
   2ba84:	f7ff fea6 	bl	2b7d4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   2ba88:	2001      	movs	r0, #1
   2ba8a:	f7ff fea3 	bl	2b7d4 <z_sys_init_run_level>
	z_sched_init();
   2ba8e:	f002 f913 	bl	2dcb8 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   2ba92:	4b22      	ldr	r3, [pc, #136]	; (2bb1c <z_cstart+0xf4>)
	_kernel.ready_q.cache = &z_main_thread;
   2ba94:	626e      	str	r6, [r5, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   2ba96:	9305      	str	r3, [sp, #20]
   2ba98:	2307      	movs	r3, #7
   2ba9a:	f8df a090 	ldr.w	sl, [pc, #144]	; 2bb2c <z_cstart+0x104>
   2ba9e:	f8df 8090 	ldr.w	r8, [pc, #144]	; 2bb30 <z_cstart+0x108>
   2baa2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   2baa6:	4641      	mov	r1, r8
   2baa8:	e9cd 3b03 	strd	r3, fp, [sp, #12]
   2baac:	4630      	mov	r0, r6
   2baae:	4653      	mov	r3, sl
   2bab0:	e9cd 4401 	strd	r4, r4, [sp, #4]
   2bab4:	9400      	str	r4, [sp, #0]
   2bab6:	f002 fbd3 	bl	2e260 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2baba:	7b73      	ldrb	r3, [r6, #13]
	z_ready_thread(&z_main_thread);
   2babc:	4630      	mov	r0, r6
   2babe:	f023 0304 	bic.w	r3, r3, #4
   2bac2:	7373      	strb	r3, [r6, #13]
   2bac4:	f001 fbb8 	bl	2d238 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   2bac8:	230f      	movs	r3, #15
   2baca:	4f15      	ldr	r7, [pc, #84]	; (2bb20 <z_cstart+0xf8>)
   2bacc:	e9cd 4302 	strd	r4, r3, [sp, #8]
   2bad0:	f44f 72a0 	mov.w	r2, #320	; 0x140
   2bad4:	4b13      	ldr	r3, [pc, #76]	; (2bb24 <z_cstart+0xfc>)
   2bad6:	4914      	ldr	r1, [pc, #80]	; (2bb28 <z_cstart+0x100>)
   2bad8:	4638      	mov	r0, r7
   2bada:	e9cd b404 	strd	fp, r4, [sp, #16]
   2bade:	e9cd 4400 	strd	r4, r4, [sp]
   2bae2:	f002 fbbd 	bl	2e260 <z_setup_new_thread>
   2bae6:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   2bae8:	60ef      	str	r7, [r5, #12]
   2baea:	f023 0304 	bic.w	r3, r3, #4
   2baee:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   2baf0:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
   2baf4:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
   2baf8:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   2bafa:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   2bafe:	4653      	mov	r3, sl
   2bb00:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   2bb04:	4641      	mov	r1, r8
   2bb06:	4630      	mov	r0, r6
   2bb08:	f7ef f8d4 	bl	1acb4 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   2bb0c:	200349d8 	.word	0x200349d8
   2bb10:	e000ed00 	.word	0xe000ed00
   2bb14:	20022bbc 	.word	0x20022bbc
   2bb18:	200274dc 	.word	0x200274dc
   2bb1c:	0003fb92 	.word	0x0003fb92
   2bb20:	20022b04 	.word	0x20022b04
   2bb24:	0002b965 	.word	0x0002b965
   2bb28:	20034898 	.word	0x20034898
   2bb2c:	0002b9e1 	.word	0x0002b9e1
   2bb30:	20032898 	.word	0x20032898

0002bb34 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(struct device *unused)
{
   2bb34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   2bb36:	4d0f      	ldr	r5, [pc, #60]	; (2bb74 <statics_init+0x40>)
   2bb38:	4c0f      	ldr	r4, [pc, #60]	; (2bb78 <statics_init+0x44>)
   2bb3a:	462f      	mov	r7, r5
   2bb3c:	4e0f      	ldr	r6, [pc, #60]	; (2bb7c <statics_init+0x48>)
   2bb3e:	42ac      	cmp	r4, r5
   2bb40:	d90c      	bls.n	2bb5c <statics_init+0x28>
   2bb42:	490f      	ldr	r1, [pc, #60]	; (2bb80 <statics_init+0x4c>)
   2bb44:	2315      	movs	r3, #21
   2bb46:	4632      	mov	r2, r6
   2bb48:	480e      	ldr	r0, [pc, #56]	; (2bb84 <statics_init+0x50>)
   2bb4a:	f007 fd32 	bl	335b2 <printk>
   2bb4e:	480e      	ldr	r0, [pc, #56]	; (2bb88 <statics_init+0x54>)
   2bb50:	f007 fd2f 	bl	335b2 <printk>
   2bb54:	2115      	movs	r1, #21
   2bb56:	4630      	mov	r0, r6
   2bb58:	f008 f82c 	bl	33bb4 <assert_post_action>
   2bb5c:	42bc      	cmp	r4, r7
   2bb5e:	d301      	bcc.n	2bb64 <statics_init+0x30>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   2bb60:	2000      	movs	r0, #0
   2bb62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   2bb64:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   2bb68:	4620      	mov	r0, r4
   2bb6a:	f00c ffc0 	bl	38aee <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   2bb6e:	3418      	adds	r4, #24
   2bb70:	e7e5      	b.n	2bb3e <statics_init+0xa>
   2bb72:	bf00      	nop
   2bb74:	200206d4 	.word	0x200206d4
   2bb78:	200206bc 	.word	0x200206bc
   2bb7c:	0003fbbf 	.word	0x0003fbbf
   2bb80:	0003fbe1 	.word	0x0003fbe1
   2bb84:	0003b773 	.word	0x0003b773
   2bb88:	0003cbfd 	.word	0x0003cbfd

0002bb8c <k_heap_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   2bb8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bb90:	4606      	mov	r6, r0
   2bb92:	b085      	sub	sp, #20
	s64_t now, end = z_timeout_end_calc(timeout);
   2bb94:	4610      	mov	r0, r2
{
   2bb96:	468b      	mov	fp, r1
   2bb98:	4617      	mov	r7, r2
	s64_t now, end = z_timeout_end_calc(timeout);
   2bb9a:	f00d f946 	bl	38e2a <z_timeout_end_calc>
   2bb9e:	4680      	mov	r8, r0
   2bba0:	9003      	str	r0, [sp, #12]
   2bba2:	468a      	mov	sl, r1
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2bba4:	f106 0414 	add.w	r4, r6, #20
   2bba8:	f04f 0320 	mov.w	r3, #32
   2bbac:	f3ef 8511 	mrs	r5, BASEPRI
   2bbb0:	f383 8811 	msr	BASEPRI, r3
   2bbb4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2bbb8:	4620      	mov	r0, r4
   2bbba:	f002 fc87 	bl	2e4cc <z_spin_lock_valid>
   2bbbe:	b968      	cbnz	r0, 2bbdc <k_heap_alloc+0x50>
   2bbc0:	235c      	movs	r3, #92	; 0x5c
   2bbc2:	4a41      	ldr	r2, [pc, #260]	; (2bcc8 <k_heap_alloc+0x13c>)
   2bbc4:	4941      	ldr	r1, [pc, #260]	; (2bccc <k_heap_alloc+0x140>)
   2bbc6:	4842      	ldr	r0, [pc, #264]	; (2bcd0 <k_heap_alloc+0x144>)
   2bbc8:	f007 fcf3 	bl	335b2 <printk>
   2bbcc:	4621      	mov	r1, r4
   2bbce:	4841      	ldr	r0, [pc, #260]	; (2bcd4 <k_heap_alloc+0x148>)
   2bbd0:	f007 fcef 	bl	335b2 <printk>
   2bbd4:	215c      	movs	r1, #92	; 0x5c
   2bbd6:	483c      	ldr	r0, [pc, #240]	; (2bcc8 <k_heap_alloc+0x13c>)
   2bbd8:	f007 ffec 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2bbdc:	4620      	mov	r0, r4
   2bbde:	f002 fc93 	bl	2e508 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2bbe2:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   2bbe6:	b16b      	cbz	r3, 2bc04 <k_heap_alloc+0x78>
   2bbe8:	b167      	cbz	r7, 2bc04 <k_heap_alloc+0x78>
   2bbea:	493b      	ldr	r1, [pc, #236]	; (2bcd8 <k_heap_alloc+0x14c>)
   2bbec:	2323      	movs	r3, #35	; 0x23
   2bbee:	4a3b      	ldr	r2, [pc, #236]	; (2bcdc <k_heap_alloc+0x150>)
   2bbf0:	4837      	ldr	r0, [pc, #220]	; (2bcd0 <k_heap_alloc+0x144>)
   2bbf2:	f007 fcde 	bl	335b2 <printk>
   2bbf6:	483a      	ldr	r0, [pc, #232]	; (2bce0 <k_heap_alloc+0x154>)
   2bbf8:	f007 fcdb 	bl	335b2 <printk>
   2bbfc:	2123      	movs	r1, #35	; 0x23
   2bbfe:	4837      	ldr	r0, [pc, #220]	; (2bcdc <k_heap_alloc+0x150>)
   2bc00:	f007 ffd8 	bl	33bb4 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2bc04:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 2bcc8 <k_heap_alloc+0x13c>

	while (ret == NULL) {
		ret = sys_heap_alloc(&h->heap, bytes);
   2bc08:	4659      	mov	r1, fp
   2bc0a:	4630      	mov	r0, r6
   2bc0c:	f007 fedc 	bl	339c8 <sys_heap_alloc>
   2bc10:	4607      	mov	r7, r0

		now = z_tick_get();
   2bc12:	f003 f869 	bl	2ece8 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   2bc16:	b1cf      	cbz	r7, 2bc4c <k_heap_alloc+0xc0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2bc18:	4620      	mov	r0, r4
   2bc1a:	f002 fc65 	bl	2e4e8 <z_spin_unlock_valid>
   2bc1e:	b968      	cbnz	r0, 2bc3c <k_heap_alloc+0xb0>
   2bc20:	2384      	movs	r3, #132	; 0x84
   2bc22:	4a29      	ldr	r2, [pc, #164]	; (2bcc8 <k_heap_alloc+0x13c>)
   2bc24:	492f      	ldr	r1, [pc, #188]	; (2bce4 <k_heap_alloc+0x158>)
   2bc26:	482a      	ldr	r0, [pc, #168]	; (2bcd0 <k_heap_alloc+0x144>)
   2bc28:	f007 fcc3 	bl	335b2 <printk>
   2bc2c:	4621      	mov	r1, r4
   2bc2e:	482e      	ldr	r0, [pc, #184]	; (2bce8 <k_heap_alloc+0x15c>)
   2bc30:	f007 fcbf 	bl	335b2 <printk>
   2bc34:	2184      	movs	r1, #132	; 0x84
   2bc36:	4824      	ldr	r0, [pc, #144]	; (2bcc8 <k_heap_alloc+0x13c>)
   2bc38:	f007 ffbc 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   2bc3c:	f385 8811 	msr	BASEPRI, r5
   2bc40:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   2bc44:	4638      	mov	r0, r7
   2bc46:	b005      	add	sp, #20
   2bc48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   2bc4c:	9b03      	ldr	r3, [sp, #12]
   2bc4e:	1a1b      	subs	r3, r3, r0
   2bc50:	9300      	str	r3, [sp, #0]
   2bc52:	eb6a 0301 	sbc.w	r3, sl, r1
   2bc56:	9301      	str	r3, [sp, #4]
   2bc58:	e9dd 2300 	ldrd	r2, r3, [sp]
   2bc5c:	2a01      	cmp	r2, #1
   2bc5e:	f173 0300 	sbcs.w	r3, r3, #0
   2bc62:	dbd9      	blt.n	2bc18 <k_heap_alloc+0x8c>
			return (u32_t)((t * to_hz + off) / from_hz);
   2bc64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2bc68:	f647 71ff 	movw	r1, #32767	; 0x7fff
   2bc6c:	2200      	movs	r2, #0
				   K_TICKS(end - now));
   2bc6e:	eba8 0000 	sub.w	r0, r8, r0
   2bc72:	fbe3 1200 	umlal	r1, r2, r3, r0
   2bc76:	4608      	mov	r0, r1
   2bc78:	4611      	mov	r1, r2
   2bc7a:	0bc2      	lsrs	r2, r0, #15
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2bc7c:	ea42 4341 	orr.w	r3, r2, r1, lsl #17
   2bc80:	4620      	mov	r0, r4
   2bc82:	f106 020c 	add.w	r2, r6, #12
   2bc86:	4629      	mov	r1, r5
   2bc88:	f001 fec8 	bl	2da1c <z_pend_curr>
	__asm__ volatile(
   2bc8c:	f04f 0320 	mov.w	r3, #32
   2bc90:	f3ef 8511 	mrs	r5, BASEPRI
   2bc94:	f383 8811 	msr	BASEPRI, r3
   2bc98:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2bc9c:	4620      	mov	r0, r4
   2bc9e:	f002 fc15 	bl	2e4cc <z_spin_lock_valid>
   2bca2:	b968      	cbnz	r0, 2bcc0 <k_heap_alloc+0x134>
   2bca4:	235c      	movs	r3, #92	; 0x5c
   2bca6:	464a      	mov	r2, r9
   2bca8:	4908      	ldr	r1, [pc, #32]	; (2bccc <k_heap_alloc+0x140>)
   2bcaa:	4809      	ldr	r0, [pc, #36]	; (2bcd0 <k_heap_alloc+0x144>)
   2bcac:	f007 fc81 	bl	335b2 <printk>
   2bcb0:	4621      	mov	r1, r4
   2bcb2:	4808      	ldr	r0, [pc, #32]	; (2bcd4 <k_heap_alloc+0x148>)
   2bcb4:	f007 fc7d 	bl	335b2 <printk>
   2bcb8:	215c      	movs	r1, #92	; 0x5c
   2bcba:	4648      	mov	r0, r9
   2bcbc:	f007 ff7a 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2bcc0:	4620      	mov	r0, r4
   2bcc2:	f002 fc21 	bl	2e508 <z_spin_lock_set_owner>
	return k;
   2bcc6:	e79f      	b.n	2bc08 <k_heap_alloc+0x7c>
   2bcc8:	0003c745 	.word	0x0003c745
   2bccc:	0003c76b 	.word	0x0003c76b
   2bcd0:	0003b773 	.word	0x0003b773
   2bcd4:	0003c780 	.word	0x0003c780
   2bcd8:	0003fb97 	.word	0x0003fb97
   2bcdc:	0003fbbf 	.word	0x0003fbbf
   2bce0:	0003cb7f 	.word	0x0003cb7f
   2bce4:	0003c798 	.word	0x0003c798
   2bce8:	0003c7af 	.word	0x0003c7af

0002bcec <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   2bcec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bcee:	4605      	mov	r5, r0
   2bcf0:	460f      	mov	r7, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2bcf2:	f100 0414 	add.w	r4, r0, #20
   2bcf6:	f04f 0320 	mov.w	r3, #32
   2bcfa:	f3ef 8611 	mrs	r6, BASEPRI
   2bcfe:	f383 8811 	msr	BASEPRI, r3
   2bd02:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2bd06:	4620      	mov	r0, r4
   2bd08:	f002 fbe0 	bl	2e4cc <z_spin_lock_valid>
   2bd0c:	b968      	cbnz	r0, 2bd2a <k_heap_free+0x3e>
   2bd0e:	235c      	movs	r3, #92	; 0x5c
   2bd10:	4a1a      	ldr	r2, [pc, #104]	; (2bd7c <k_heap_free+0x90>)
   2bd12:	491b      	ldr	r1, [pc, #108]	; (2bd80 <k_heap_free+0x94>)
   2bd14:	481b      	ldr	r0, [pc, #108]	; (2bd84 <k_heap_free+0x98>)
   2bd16:	f007 fc4c 	bl	335b2 <printk>
   2bd1a:	4621      	mov	r1, r4
   2bd1c:	481a      	ldr	r0, [pc, #104]	; (2bd88 <k_heap_free+0x9c>)
   2bd1e:	f007 fc48 	bl	335b2 <printk>
   2bd22:	215c      	movs	r1, #92	; 0x5c
   2bd24:	4815      	ldr	r0, [pc, #84]	; (2bd7c <k_heap_free+0x90>)
   2bd26:	f007 ff45 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2bd2a:	4620      	mov	r0, r4
   2bd2c:	f002 fbec 	bl	2e508 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   2bd30:	4628      	mov	r0, r5
   2bd32:	4639      	mov	r1, r7
   2bd34:	f007 fd96 	bl	33864 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   2bd38:	f105 000c 	add.w	r0, r5, #12
   2bd3c:	f00c ffd6 	bl	38cec <z_unpend_all>
   2bd40:	b128      	cbz	r0, 2bd4e <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
   2bd42:	4631      	mov	r1, r6
   2bd44:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   2bd46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   2bd4a:	f001 b853 	b.w	2cdf4 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2bd4e:	4620      	mov	r0, r4
   2bd50:	f002 fbca 	bl	2e4e8 <z_spin_unlock_valid>
   2bd54:	b968      	cbnz	r0, 2bd72 <k_heap_free+0x86>
   2bd56:	2384      	movs	r3, #132	; 0x84
   2bd58:	4a08      	ldr	r2, [pc, #32]	; (2bd7c <k_heap_free+0x90>)
   2bd5a:	490c      	ldr	r1, [pc, #48]	; (2bd8c <k_heap_free+0xa0>)
   2bd5c:	4809      	ldr	r0, [pc, #36]	; (2bd84 <k_heap_free+0x98>)
   2bd5e:	f007 fc28 	bl	335b2 <printk>
   2bd62:	4621      	mov	r1, r4
   2bd64:	480a      	ldr	r0, [pc, #40]	; (2bd90 <k_heap_free+0xa4>)
   2bd66:	f007 fc24 	bl	335b2 <printk>
   2bd6a:	2184      	movs	r1, #132	; 0x84
   2bd6c:	4803      	ldr	r0, [pc, #12]	; (2bd7c <k_heap_free+0x90>)
   2bd6e:	f007 ff21 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   2bd72:	f386 8811 	msr	BASEPRI, r6
   2bd76:	f3bf 8f6f 	isb	sy
}
   2bd7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2bd7c:	0003c745 	.word	0x0003c745
   2bd80:	0003c76b 	.word	0x0003c76b
   2bd84:	0003b773 	.word	0x0003b773
   2bd88:	0003c780 	.word	0x0003c780
   2bd8c:	0003c798 	.word	0x0003c798
   2bd90:	0003c7af 	.word	0x0003c7af

0002bd94 <mbox_message_put>:
	struct k_thread *receiving_thread;
	struct k_mbox_msg *rx_msg;
	k_spinlock_key_t key;

	/* save sender id so it can be used during message matching */
	tx_msg->rx_source_thread = _current;
   2bd94:	4b4d      	ldr	r3, [pc, #308]	; (2becc <mbox_message_put+0x138>)
{
   2bd96:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	tx_msg->rx_source_thread = _current;
   2bd9a:	689b      	ldr	r3, [r3, #8]

	/* finish readying sending thread (actual or dummy) for send */
	sending_thread = tx_msg->_syncing_thread;
   2bd9c:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
	tx_msg->rx_source_thread = _current;
   2bda0:	61cb      	str	r3, [r1, #28]
{
   2bda2:	4680      	mov	r8, r0
   2bda4:	468a      	mov	sl, r1
   2bda6:	4693      	mov	fp, r2
	sending_thread->base.swap_data = tx_msg;
   2bda8:	f8c9 1014 	str.w	r1, [r9, #20]

	/* search mailbox's rx queue for a compatible receiver */
	key = k_spin_lock(&mbox->lock);
   2bdac:	f100 0410 	add.w	r4, r0, #16
	__asm__ volatile(
   2bdb0:	f04f 0320 	mov.w	r3, #32
   2bdb4:	f3ef 8711 	mrs	r7, BASEPRI
   2bdb8:	f383 8811 	msr	BASEPRI, r3
   2bdbc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2bdc0:	4620      	mov	r0, r4
   2bdc2:	f002 fb83 	bl	2e4cc <z_spin_lock_valid>
   2bdc6:	b968      	cbnz	r0, 2bde4 <mbox_message_put+0x50>
   2bdc8:	235c      	movs	r3, #92	; 0x5c
   2bdca:	4a41      	ldr	r2, [pc, #260]	; (2bed0 <mbox_message_put+0x13c>)
   2bdcc:	4941      	ldr	r1, [pc, #260]	; (2bed4 <mbox_message_put+0x140>)
   2bdce:	4842      	ldr	r0, [pc, #264]	; (2bed8 <mbox_message_put+0x144>)
   2bdd0:	f007 fbef 	bl	335b2 <printk>
   2bdd4:	4621      	mov	r1, r4
   2bdd6:	4841      	ldr	r0, [pc, #260]	; (2bedc <mbox_message_put+0x148>)
   2bdd8:	f007 fbeb 	bl	335b2 <printk>
   2bddc:	215c      	movs	r1, #92	; 0x5c
   2bdde:	483c      	ldr	r0, [pc, #240]	; (2bed0 <mbox_message_put+0x13c>)
   2bde0:	f007 fee8 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2bde4:	4620      	mov	r0, r4
   2bde6:	f002 fb8f 	bl	2e508 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   2bdea:	4643      	mov	r3, r8
   2bdec:	f853 5f08 	ldr.w	r5, [r3, #8]!
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2bdf0:	429d      	cmp	r5, r3
   2bdf2:	d129      	bne.n	2be48 <mbox_message_put+0xb4>

		}
	}

	/* didn't find a matching receiver: don't wait for one */
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2bdf4:	f1bb 0f00 	cmp.w	fp, #0
   2bdf8:	d143      	bne.n	2be82 <mbox_message_put+0xee>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2bdfa:	4620      	mov	r0, r4
   2bdfc:	f002 fb74 	bl	2e4e8 <z_spin_unlock_valid>
   2be00:	b968      	cbnz	r0, 2be1e <mbox_message_put+0x8a>
   2be02:	2384      	movs	r3, #132	; 0x84
   2be04:	4a32      	ldr	r2, [pc, #200]	; (2bed0 <mbox_message_put+0x13c>)
   2be06:	4936      	ldr	r1, [pc, #216]	; (2bee0 <mbox_message_put+0x14c>)
   2be08:	4833      	ldr	r0, [pc, #204]	; (2bed8 <mbox_message_put+0x144>)
   2be0a:	f007 fbd2 	bl	335b2 <printk>
   2be0e:	4621      	mov	r1, r4
   2be10:	4834      	ldr	r0, [pc, #208]	; (2bee4 <mbox_message_put+0x150>)
   2be12:	f007 fbce 	bl	335b2 <printk>
   2be16:	2184      	movs	r1, #132	; 0x84
   2be18:	482d      	ldr	r0, [pc, #180]	; (2bed0 <mbox_message_put+0x13c>)
   2be1a:	f007 fecb 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   2be1e:	f387 8811 	msr	BASEPRI, r7
   2be22:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&mbox->lock, key);
		return -ENOMSG;
   2be26:	f06f 0622 	mvn.w	r6, #34	; 0x22
   2be2a:	e026      	b.n	2be7a <mbox_message_put+0xe6>
			return z_pend_curr(&mbox->lock, key, NULL, K_FOREVER);
   2be2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		return 0;
	}
#endif

	/* synchronous send: sender waits on tx queue for receiver or timeout */
	return z_pend_curr(&mbox->lock, key, &mbox->tx_msg_queue, timeout);
   2be30:	4639      	mov	r1, r7
   2be32:	4620      	mov	r0, r4
}
   2be34:	b001      	add	sp, #4
   2be36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return z_pend_curr(&mbox->lock, key, &mbox->tx_msg_queue, timeout);
   2be3a:	f001 bdef 	b.w	2da1c <z_pend_curr>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   2be3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   2be42:	429d      	cmp	r5, r3
   2be44:	d0d6      	beq.n	2bdf4 <mbox_message_put+0x60>
   2be46:	682d      	ldr	r5, [r5, #0]
	_WAIT_Q_FOR_EACH(&mbox->rx_msg_queue, receiving_thread) {
   2be48:	2d00      	cmp	r5, #0
   2be4a:	d0d3      	beq.n	2bdf4 <mbox_message_put+0x60>
		if (mbox_message_match(tx_msg, rx_msg) == 0) {
   2be4c:	6969      	ldr	r1, [r5, #20]
   2be4e:	4650      	mov	r0, sl
   2be50:	f00c fe70 	bl	38b34 <mbox_message_match>
   2be54:	4606      	mov	r6, r0
   2be56:	2800      	cmp	r0, #0
   2be58:	d1f1      	bne.n	2be3e <mbox_message_put+0xaa>
			z_unpend_thread(receiving_thread);
   2be5a:	4628      	mov	r0, r5
   2be5c:	f001 f8ac 	bl	2cfb8 <z_unpend_thread>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   2be60:	672e      	str	r6, [r5, #112]	; 0x70
			z_ready_thread(receiving_thread);
   2be62:	4628      	mov	r0, r5
   2be64:	f001 f9e8 	bl	2d238 <z_ready_thread>
			if ((sending_thread->base.thread_state & _THREAD_DUMMY)
   2be68:	f899 200d 	ldrb.w	r2, [r9, #13]
   2be6c:	f012 0201 	ands.w	r2, r2, #1
   2be70:	d0dc      	beq.n	2be2c <mbox_message_put+0x98>
				z_reschedule(&mbox->lock, key);
   2be72:	4639      	mov	r1, r7
   2be74:	4620      	mov	r0, r4
   2be76:	f000 ffbd 	bl	2cdf4 <z_reschedule>
}
   2be7a:	4630      	mov	r0, r6
   2be7c:	b001      	add	sp, #4
   2be7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((sending_thread->base.thread_state & _THREAD_DUMMY) != 0U) {
   2be82:	f899 300d 	ldrb.w	r3, [r9, #13]
   2be86:	07db      	lsls	r3, r3, #31
   2be88:	d51d      	bpl.n	2bec6 <mbox_message_put+0x132>
		z_pend_thread(sending_thread, &mbox->tx_msg_queue, K_FOREVER);
   2be8a:	4648      	mov	r0, r9
   2be8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2be90:	4641      	mov	r1, r8
   2be92:	f001 fd9d 	bl	2d9d0 <z_pend_thread>
   2be96:	4620      	mov	r0, r4
   2be98:	f002 fb26 	bl	2e4e8 <z_spin_unlock_valid>
   2be9c:	b968      	cbnz	r0, 2beba <mbox_message_put+0x126>
   2be9e:	2384      	movs	r3, #132	; 0x84
   2bea0:	4a0b      	ldr	r2, [pc, #44]	; (2bed0 <mbox_message_put+0x13c>)
   2bea2:	490f      	ldr	r1, [pc, #60]	; (2bee0 <mbox_message_put+0x14c>)
   2bea4:	480c      	ldr	r0, [pc, #48]	; (2bed8 <mbox_message_put+0x144>)
   2bea6:	f007 fb84 	bl	335b2 <printk>
   2beaa:	4621      	mov	r1, r4
   2beac:	480d      	ldr	r0, [pc, #52]	; (2bee4 <mbox_message_put+0x150>)
   2beae:	f007 fb80 	bl	335b2 <printk>
   2beb2:	2184      	movs	r1, #132	; 0x84
   2beb4:	4806      	ldr	r0, [pc, #24]	; (2bed0 <mbox_message_put+0x13c>)
   2beb6:	f007 fe7d 	bl	33bb4 <assert_post_action>
   2beba:	f387 8811 	msr	BASEPRI, r7
   2bebe:	f3bf 8f6f 	isb	sy
		return 0;
   2bec2:	2600      	movs	r6, #0
   2bec4:	e7d9      	b.n	2be7a <mbox_message_put+0xe6>
	return z_pend_curr(&mbox->lock, key, &mbox->tx_msg_queue, timeout);
   2bec6:	465b      	mov	r3, fp
   2bec8:	4642      	mov	r2, r8
   2beca:	e7b1      	b.n	2be30 <mbox_message_put+0x9c>
   2becc:	200274dc 	.word	0x200274dc
   2bed0:	0003c745 	.word	0x0003c745
   2bed4:	0003c76b 	.word	0x0003c76b
   2bed8:	0003b773 	.word	0x0003b773
   2bedc:	0003c780 	.word	0x0003c780
   2bee0:	0003c798 	.word	0x0003c798
   2bee4:	0003c7af 	.word	0x0003c7af

0002bee8 <mbox_message_dispose>:
	if (rx_msg->_syncing_thread == NULL) {
   2bee8:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
   2beea:	b510      	push	{r4, lr}
   2beec:	4604      	mov	r4, r0
	if (rx_msg->_syncing_thread == NULL) {
   2beee:	b36b      	cbz	r3, 2bf4c <mbox_message_dispose+0x64>
	if (rx_msg->tx_block.data != NULL) {
   2bef0:	6943      	ldr	r3, [r0, #20]
   2bef2:	b123      	cbz	r3, 2befe <mbox_message_dispose+0x16>
		k_mem_pool_free(&rx_msg->tx_block);
   2bef4:	3014      	adds	r0, #20
   2bef6:	f00c fe69 	bl	38bcc <k_mem_pool_free>
		rx_msg->tx_block.data = NULL;
   2befa:	2300      	movs	r3, #0
   2befc:	6163      	str	r3, [r4, #20]
	rx_msg->_syncing_thread = NULL;
   2befe:	2300      	movs	r3, #0
	sending_thread = rx_msg->_syncing_thread;
   2bf00:	6a61      	ldr	r1, [r4, #36]	; 0x24
	rx_msg->_syncing_thread = NULL;
   2bf02:	6263      	str	r3, [r4, #36]	; 0x24
	tx_msg = (struct k_mbox_msg *)sending_thread->base.swap_data;
   2bf04:	694a      	ldr	r2, [r1, #20]
	tx_msg->size = rx_msg->size;
   2bf06:	6863      	ldr	r3, [r4, #4]
   2bf08:	6053      	str	r3, [r2, #4]
	if ((sending_thread->base.thread_state & _THREAD_DUMMY) != 0U) {
   2bf0a:	7b4b      	ldrb	r3, [r1, #13]
   2bf0c:	f013 0001 	ands.w	r0, r3, #1
   2bf10:	d009      	beq.n	2bf26 <mbox_message_dispose+0x3e>
		struct k_sem *async_sem = tx_msg->_async_sem;
   2bf12:	6a94      	ldr	r4, [r2, #40]	; 0x28
	return z_impl_k_stack_push(stack, data);
   2bf14:	480e      	ldr	r0, [pc, #56]	; (2bf50 <mbox_message_dispose+0x68>)
   2bf16:	f002 f927 	bl	2e168 <z_impl_k_stack_push>
		if (async_sem != NULL) {
   2bf1a:	b1bc      	cbz	r4, 2bf4c <mbox_message_dispose+0x64>
	z_impl_k_sem_give(sem);
   2bf1c:	4620      	mov	r0, r4
}
   2bf1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2bf22:	f002 b859 	b.w	2dfd8 <z_impl_k_sem_give>
	thread->base.thread_state |= _THREAD_PENDING;
}

static inline void z_mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
   2bf26:	f023 0302 	bic.w	r3, r3, #2
   2bf2a:	6708      	str	r0, [r1, #112]	; 0x70
   2bf2c:	734b      	strb	r3, [r1, #13]
	z_ready_thread(sending_thread);
   2bf2e:	4608      	mov	r0, r1
   2bf30:	f001 f982 	bl	2d238 <z_ready_thread>
	__asm__ volatile(
   2bf34:	f04f 0320 	mov.w	r3, #32
   2bf38:	f3ef 8011 	mrs	r0, BASEPRI
   2bf3c:	f383 8811 	msr	BASEPRI, r3
   2bf40:	f3bf 8f6f 	isb	sy
}
   2bf44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   2bf48:	f00c beb4 	b.w	38cb4 <z_reschedule_irqlock>
   2bf4c:	bd10      	pop	{r4, pc}
   2bf4e:	bf00      	nop
   2bf50:	20020784 	.word	0x20020784

0002bf54 <init_mbox_module>:
{
   2bf54:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < CONFIG_NUM_MBOX_ASYNC_MSGS; i++) {
   2bf56:	2500      	movs	r5, #0
   2bf58:	4c09      	ldr	r4, [pc, #36]	; (2bf80 <init_mbox_module+0x2c>)
	return z_impl_k_stack_push(stack, data);
   2bf5a:	4e0a      	ldr	r6, [pc, #40]	; (2bf84 <init_mbox_module+0x30>)
		z_init_thread_base(&async_msg[i].thread, 0, _THREAD_DUMMY, 0);
   2bf5c:	2300      	movs	r3, #0
   2bf5e:	2201      	movs	r2, #1
   2bf60:	4619      	mov	r1, r3
   2bf62:	4620      	mov	r0, r4
   2bf64:	f00c feef 	bl	38d46 <z_init_thread_base>
   2bf68:	4621      	mov	r1, r4
   2bf6a:	4630      	mov	r0, r6
	for (i = 0; i < CONFIG_NUM_MBOX_ASYNC_MSGS; i++) {
   2bf6c:	3501      	adds	r5, #1
   2bf6e:	f002 f8fb 	bl	2e168 <z_impl_k_stack_push>
   2bf72:	2d0a      	cmp	r5, #10
   2bf74:	f104 045c 	add.w	r4, r4, #92	; 0x5c
   2bf78:	d1f0      	bne.n	2bf5c <init_mbox_module+0x8>
}
   2bf7a:	2000      	movs	r0, #0
   2bf7c:	bd70      	pop	{r4, r5, r6, pc}
   2bf7e:	bf00      	nop
   2bf80:	200374d8 	.word	0x200374d8
   2bf84:	20020784 	.word	0x20020784

0002bf88 <k_mbox_put>:

int k_mbox_put(struct k_mbox *mbox, struct k_mbox_msg *tx_msg,
	       k_timeout_t timeout)
{
	/* configure things for a synchronous send, then send the message */
	tx_msg->_syncing_thread = _current;
   2bf88:	4b02      	ldr	r3, [pc, #8]	; (2bf94 <k_mbox_put+0xc>)
   2bf8a:	689b      	ldr	r3, [r3, #8]
   2bf8c:	624b      	str	r3, [r1, #36]	; 0x24

	return mbox_message_put(mbox, tx_msg, timeout);
   2bf8e:	f7ff bf01 	b.w	2bd94 <mbox_message_put>
   2bf92:	bf00      	nop
   2bf94:	200274dc 	.word	0x200274dc

0002bf98 <k_mbox_get>:
	return 0;
}

int k_mbox_get(struct k_mbox *mbox, struct k_mbox_msg *rx_msg, void *buffer,
	       k_timeout_t timeout)
{
   2bf98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct k_mbox_msg *tx_msg;
	k_spinlock_key_t key;
	int result;

	/* save receiver id so it can be used during message matching */
	rx_msg->tx_target_thread = _current;
   2bf9c:	4d43      	ldr	r5, [pc, #268]	; (2c0ac <k_mbox_get+0x114>)
{
   2bf9e:	469a      	mov	sl, r3
	rx_msg->tx_target_thread = _current;
   2bfa0:	68ab      	ldr	r3, [r5, #8]
{
   2bfa2:	4607      	mov	r7, r0
   2bfa4:	460e      	mov	r6, r1
   2bfa6:	4690      	mov	r8, r2
	rx_msg->tx_target_thread = _current;
   2bfa8:	620b      	str	r3, [r1, #32]

	/* search mailbox's tx queue for a compatible sender */
	key = k_spin_lock(&mbox->lock);
   2bfaa:	f100 0410 	add.w	r4, r0, #16
   2bfae:	f04f 0320 	mov.w	r3, #32
   2bfb2:	f3ef 8911 	mrs	r9, BASEPRI
   2bfb6:	f383 8811 	msr	BASEPRI, r3
   2bfba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2bfbe:	4620      	mov	r0, r4
   2bfc0:	f002 fa84 	bl	2e4cc <z_spin_lock_valid>
   2bfc4:	46ab      	mov	fp, r5
   2bfc6:	b968      	cbnz	r0, 2bfe4 <k_mbox_get+0x4c>
   2bfc8:	235c      	movs	r3, #92	; 0x5c
   2bfca:	4a39      	ldr	r2, [pc, #228]	; (2c0b0 <k_mbox_get+0x118>)
   2bfcc:	4939      	ldr	r1, [pc, #228]	; (2c0b4 <k_mbox_get+0x11c>)
   2bfce:	483a      	ldr	r0, [pc, #232]	; (2c0b8 <k_mbox_get+0x120>)
   2bfd0:	f007 faef 	bl	335b2 <printk>
   2bfd4:	4621      	mov	r1, r4
   2bfd6:	4839      	ldr	r0, [pc, #228]	; (2c0bc <k_mbox_get+0x124>)
   2bfd8:	f007 faeb 	bl	335b2 <printk>
   2bfdc:	215c      	movs	r1, #92	; 0x5c
   2bfde:	4834      	ldr	r0, [pc, #208]	; (2c0b0 <k_mbox_get+0x118>)
   2bfe0:	f007 fde8 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2bfe4:	4620      	mov	r0, r4
   2bfe6:	f002 fa8f 	bl	2e508 <z_spin_lock_set_owner>
	return list->head == list;
   2bfea:	683d      	ldr	r5, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2bfec:	42af      	cmp	r7, r5
   2bfee:	d125      	bne.n	2c03c <k_mbox_get+0xa4>
		}
	}

	/* didn't find a matching sender */

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2bff0:	f1ba 0f00 	cmp.w	sl, #0
   2bff4:	d14d      	bne.n	2c092 <k_mbox_get+0xfa>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2bff6:	4620      	mov	r0, r4
   2bff8:	f002 fa76 	bl	2e4e8 <z_spin_unlock_valid>
   2bffc:	b968      	cbnz	r0, 2c01a <k_mbox_get+0x82>
   2bffe:	2384      	movs	r3, #132	; 0x84
   2c000:	4a2b      	ldr	r2, [pc, #172]	; (2c0b0 <k_mbox_get+0x118>)
   2c002:	492f      	ldr	r1, [pc, #188]	; (2c0c0 <k_mbox_get+0x128>)
   2c004:	482c      	ldr	r0, [pc, #176]	; (2c0b8 <k_mbox_get+0x120>)
   2c006:	f007 fad4 	bl	335b2 <printk>
   2c00a:	4621      	mov	r1, r4
   2c00c:	482d      	ldr	r0, [pc, #180]	; (2c0c4 <k_mbox_get+0x12c>)
   2c00e:	f007 fad0 	bl	335b2 <printk>
   2c012:	2184      	movs	r1, #132	; 0x84
   2c014:	4826      	ldr	r0, [pc, #152]	; (2c0b0 <k_mbox_get+0x118>)
   2c016:	f007 fdcd 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   2c01a:	f389 8811 	msr	BASEPRI, r9
   2c01e:	f3bf 8f6f 	isb	sy
		/* don't wait for a matching sender to appear */
		k_spin_unlock(&mbox->lock, key);
		return -ENOMSG;
   2c022:	f06f 0022 	mvn.w	r0, #34	; 0x22
   2c026:	e032      	b.n	2c08e <k_mbox_get+0xf6>
	} else if (rx_msg->size == 0) {
   2c028:	6873      	ldr	r3, [r6, #4]
   2c02a:	bb7b      	cbnz	r3, 2c08c <k_mbox_get+0xf4>
		mbox_message_dispose(rx_msg);
   2c02c:	4630      	mov	r0, r6
   2c02e:	f7ff ff5b 	bl	2bee8 <mbox_message_dispose>
   2c032:	e02b      	b.n	2c08c <k_mbox_get+0xf4>
	return (node == list->tail) ? NULL : node->next;
   2c034:	687b      	ldr	r3, [r7, #4]
   2c036:	429d      	cmp	r5, r3
   2c038:	d0da      	beq.n	2bff0 <k_mbox_get+0x58>
   2c03a:	682d      	ldr	r5, [r5, #0]
	_WAIT_Q_FOR_EACH(&mbox->tx_msg_queue, sending_thread) {
   2c03c:	2d00      	cmp	r5, #0
   2c03e:	d0d7      	beq.n	2bff0 <k_mbox_get+0x58>
		if (mbox_message_match(tx_msg, rx_msg) == 0) {
   2c040:	4631      	mov	r1, r6
   2c042:	6968      	ldr	r0, [r5, #20]
   2c044:	f00c fd76 	bl	38b34 <mbox_message_match>
   2c048:	2800      	cmp	r0, #0
   2c04a:	d1f3      	bne.n	2c034 <k_mbox_get+0x9c>
			z_unpend_thread(sending_thread);
   2c04c:	4628      	mov	r0, r5
   2c04e:	f000 ffb3 	bl	2cfb8 <z_unpend_thread>
   2c052:	4620      	mov	r0, r4
   2c054:	f002 fa48 	bl	2e4e8 <z_spin_unlock_valid>
   2c058:	b968      	cbnz	r0, 2c076 <k_mbox_get+0xde>
   2c05a:	2384      	movs	r3, #132	; 0x84
   2c05c:	4a14      	ldr	r2, [pc, #80]	; (2c0b0 <k_mbox_get+0x118>)
   2c05e:	4918      	ldr	r1, [pc, #96]	; (2c0c0 <k_mbox_get+0x128>)
   2c060:	4815      	ldr	r0, [pc, #84]	; (2c0b8 <k_mbox_get+0x120>)
   2c062:	f007 faa6 	bl	335b2 <printk>
   2c066:	4621      	mov	r1, r4
   2c068:	4816      	ldr	r0, [pc, #88]	; (2c0c4 <k_mbox_get+0x12c>)
   2c06a:	f007 faa2 	bl	335b2 <printk>
   2c06e:	2184      	movs	r1, #132	; 0x84
   2c070:	480f      	ldr	r0, [pc, #60]	; (2c0b0 <k_mbox_get+0x118>)
   2c072:	f007 fd9f 	bl	33bb4 <assert_post_action>
   2c076:	f389 8811 	msr	BASEPRI, r9
   2c07a:	f3bf 8f6f 	isb	sy
	if (buffer != NULL) {
   2c07e:	f1b8 0f00 	cmp.w	r8, #0
   2c082:	d0d1      	beq.n	2c028 <k_mbox_get+0x90>
		k_mbox_data_get(rx_msg, buffer);
   2c084:	4641      	mov	r1, r8
   2c086:	4630      	mov	r0, r6
   2c088:	f00c fd8e 	bl	38ba8 <k_mbox_data_get>
			return mbox_message_data_check(rx_msg, buffer);
   2c08c:	2000      	movs	r0, #0
	if (result == 0) {
		result = mbox_message_data_check(rx_msg, buffer);
	}

	return result;
}
   2c08e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_current->base.swap_data = rx_msg;
   2c092:	f8db 3008 	ldr.w	r3, [fp, #8]
	result = z_pend_curr(&mbox->lock, key, &mbox->rx_msg_queue, timeout);
   2c096:	f107 0208 	add.w	r2, r7, #8
	_current->base.swap_data = rx_msg;
   2c09a:	615e      	str	r6, [r3, #20]
	result = z_pend_curr(&mbox->lock, key, &mbox->rx_msg_queue, timeout);
   2c09c:	4649      	mov	r1, r9
   2c09e:	4653      	mov	r3, sl
   2c0a0:	4620      	mov	r0, r4
   2c0a2:	f001 fcbb 	bl	2da1c <z_pend_curr>
	if (result == 0) {
   2c0a6:	2800      	cmp	r0, #0
   2c0a8:	d1f1      	bne.n	2c08e <k_mbox_get+0xf6>
   2c0aa:	e7e8      	b.n	2c07e <k_mbox_get+0xe6>
   2c0ac:	200274dc 	.word	0x200274dc
   2c0b0:	0003c745 	.word	0x0003c745
   2c0b4:	0003c76b 	.word	0x0003c76b
   2c0b8:	0003b773 	.word	0x0003b773
   2c0bc:	0003c780 	.word	0x0003c780
   2c0c0:	0003c798 	.word	0x0003c798
   2c0c4:	0003c7af 	.word	0x0003c7af

0002c0c8 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   2c0c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   2c0cc:	4d16      	ldr	r5, [pc, #88]	; (2c128 <init_mem_slab_module+0x60>)
   2c0ce:	4c17      	ldr	r4, [pc, #92]	; (2c12c <init_mem_slab_module+0x64>)
   2c0d0:	46a8      	mov	r8, r5
   2c0d2:	4e17      	ldr	r6, [pc, #92]	; (2c130 <init_mem_slab_module+0x68>)
   2c0d4:	42ac      	cmp	r4, r5
   2c0d6:	d90c      	bls.n	2c0f2 <init_mem_slab_module+0x2a>
   2c0d8:	4916      	ldr	r1, [pc, #88]	; (2c134 <init_mem_slab_module+0x6c>)
   2c0da:	2342      	movs	r3, #66	; 0x42
   2c0dc:	4632      	mov	r2, r6
   2c0de:	4816      	ldr	r0, [pc, #88]	; (2c138 <init_mem_slab_module+0x70>)
   2c0e0:	f007 fa67 	bl	335b2 <printk>
   2c0e4:	4815      	ldr	r0, [pc, #84]	; (2c13c <init_mem_slab_module+0x74>)
   2c0e6:	f007 fa64 	bl	335b2 <printk>
   2c0ea:	2142      	movs	r1, #66	; 0x42
   2c0ec:	4630      	mov	r0, r6
   2c0ee:	f007 fd61 	bl	33bb4 <assert_post_action>
   2c0f2:	4544      	cmp	r4, r8
   2c0f4:	d302      	bcc.n	2c0fc <init_mem_slab_module+0x34>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   2c0f6:	2000      	movs	r0, #0
	return rc;
}
   2c0f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2c0fc:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   2c100:	ea42 0301 	orr.w	r3, r2, r1
   2c104:	f013 0303 	ands.w	r3, r3, #3
   2c108:	d10b      	bne.n	2c122 <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
   2c10a:	68a0      	ldr	r0, [r4, #8]
	slab->free_list = NULL;
   2c10c:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2c10e:	4283      	cmp	r3, r0
   2c110:	d101      	bne.n	2c116 <init_mem_slab_module+0x4e>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   2c112:	341c      	adds	r4, #28
   2c114:	e7de      	b.n	2c0d4 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
   2c116:	6967      	ldr	r7, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2c118:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   2c11a:	6017      	str	r7, [r2, #0]
		slab->free_list = p;
   2c11c:	6162      	str	r2, [r4, #20]
		p += slab->block_size;
   2c11e:	440a      	add	r2, r1
   2c120:	e7f5      	b.n	2c10e <init_mem_slab_module+0x46>
		return -EINVAL;
   2c122:	f06f 0015 	mvn.w	r0, #21
	return rc;
   2c126:	e7e7      	b.n	2c0f8 <init_mem_slab_module+0x30>
   2c128:	200206bc 	.word	0x200206bc
   2c12c:	20020668 	.word	0x20020668
   2c130:	0003fbf7 	.word	0x0003fbf7
   2c134:	0003fc1c 	.word	0x0003fc1c
   2c138:	0003b773 	.word	0x0003b773
   2c13c:	0003cbfd 	.word	0x0003cbfd

0002c140 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   2c140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c142:	4604      	mov	r4, r0
   2c144:	460d      	mov	r5, r1
   2c146:	4616      	mov	r6, r2
	__asm__ volatile(
   2c148:	f04f 0320 	mov.w	r3, #32
   2c14c:	f3ef 8711 	mrs	r7, BASEPRI
   2c150:	f383 8811 	msr	BASEPRI, r3
   2c154:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2c158:	4823      	ldr	r0, [pc, #140]	; (2c1e8 <k_mem_slab_alloc+0xa8>)
   2c15a:	f002 f9b7 	bl	2e4cc <z_spin_lock_valid>
   2c15e:	b968      	cbnz	r0, 2c17c <k_mem_slab_alloc+0x3c>
   2c160:	235c      	movs	r3, #92	; 0x5c
   2c162:	4a22      	ldr	r2, [pc, #136]	; (2c1ec <k_mem_slab_alloc+0xac>)
   2c164:	4922      	ldr	r1, [pc, #136]	; (2c1f0 <k_mem_slab_alloc+0xb0>)
   2c166:	4823      	ldr	r0, [pc, #140]	; (2c1f4 <k_mem_slab_alloc+0xb4>)
   2c168:	f007 fa23 	bl	335b2 <printk>
   2c16c:	491e      	ldr	r1, [pc, #120]	; (2c1e8 <k_mem_slab_alloc+0xa8>)
   2c16e:	4822      	ldr	r0, [pc, #136]	; (2c1f8 <k_mem_slab_alloc+0xb8>)
   2c170:	f007 fa1f 	bl	335b2 <printk>
   2c174:	215c      	movs	r1, #92	; 0x5c
   2c176:	481d      	ldr	r0, [pc, #116]	; (2c1ec <k_mem_slab_alloc+0xac>)
   2c178:	f007 fd1c 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2c17c:	481a      	ldr	r0, [pc, #104]	; (2c1e8 <k_mem_slab_alloc+0xa8>)
   2c17e:	f002 f9c3 	bl	2e508 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   2c182:	6963      	ldr	r3, [r4, #20]
   2c184:	b1eb      	cbz	r3, 2c1c2 <k_mem_slab_alloc+0x82>
		/* take a free block */
		*mem = slab->free_list;
   2c186:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   2c188:	681b      	ldr	r3, [r3, #0]
   2c18a:	6163      	str	r3, [r4, #20]
		slab->num_used++;
   2c18c:	69a3      	ldr	r3, [r4, #24]
   2c18e:	3301      	adds	r3, #1
   2c190:	61a3      	str	r3, [r4, #24]
		result = 0;
   2c192:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2c194:	4814      	ldr	r0, [pc, #80]	; (2c1e8 <k_mem_slab_alloc+0xa8>)
   2c196:	f002 f9a7 	bl	2e4e8 <z_spin_unlock_valid>
   2c19a:	b968      	cbnz	r0, 2c1b8 <k_mem_slab_alloc+0x78>
   2c19c:	2384      	movs	r3, #132	; 0x84
   2c19e:	4a13      	ldr	r2, [pc, #76]	; (2c1ec <k_mem_slab_alloc+0xac>)
   2c1a0:	4916      	ldr	r1, [pc, #88]	; (2c1fc <k_mem_slab_alloc+0xbc>)
   2c1a2:	4814      	ldr	r0, [pc, #80]	; (2c1f4 <k_mem_slab_alloc+0xb4>)
   2c1a4:	f007 fa05 	bl	335b2 <printk>
   2c1a8:	490f      	ldr	r1, [pc, #60]	; (2c1e8 <k_mem_slab_alloc+0xa8>)
   2c1aa:	4815      	ldr	r0, [pc, #84]	; (2c200 <k_mem_slab_alloc+0xc0>)
   2c1ac:	f007 fa01 	bl	335b2 <printk>
   2c1b0:	2184      	movs	r1, #132	; 0x84
   2c1b2:	480e      	ldr	r0, [pc, #56]	; (2c1ec <k_mem_slab_alloc+0xac>)
   2c1b4:	f007 fcfe 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   2c1b8:	f387 8811 	msr	BASEPRI, r7
   2c1bc:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   2c1c0:	e010      	b.n	2c1e4 <k_mem_slab_alloc+0xa4>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2c1c2:	b91e      	cbnz	r6, 2c1cc <k_mem_slab_alloc+0x8c>
		*mem = NULL;
   2c1c4:	602e      	str	r6, [r5, #0]
		result = -ENOMEM;
   2c1c6:	f06f 040b 	mvn.w	r4, #11
   2c1ca:	e7e3      	b.n	2c194 <k_mem_slab_alloc+0x54>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   2c1cc:	4622      	mov	r2, r4
   2c1ce:	4633      	mov	r3, r6
   2c1d0:	4639      	mov	r1, r7
   2c1d2:	4805      	ldr	r0, [pc, #20]	; (2c1e8 <k_mem_slab_alloc+0xa8>)
   2c1d4:	f001 fc22 	bl	2da1c <z_pend_curr>
		if (result == 0) {
   2c1d8:	4604      	mov	r4, r0
   2c1da:	b918      	cbnz	r0, 2c1e4 <k_mem_slab_alloc+0xa4>
			*mem = _current->base.swap_data;
   2c1dc:	4b09      	ldr	r3, [pc, #36]	; (2c204 <k_mem_slab_alloc+0xc4>)
   2c1de:	689b      	ldr	r3, [r3, #8]
   2c1e0:	695b      	ldr	r3, [r3, #20]
   2c1e2:	602b      	str	r3, [r5, #0]
}
   2c1e4:	4620      	mov	r0, r4
   2c1e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c1e8:	20022c74 	.word	0x20022c74
   2c1ec:	0003c745 	.word	0x0003c745
   2c1f0:	0003c76b 	.word	0x0003c76b
   2c1f4:	0003b773 	.word	0x0003b773
   2c1f8:	0003c780 	.word	0x0003c780
   2c1fc:	0003c798 	.word	0x0003c798
   2c200:	0003c7af 	.word	0x0003c7af
   2c204:	200274dc 	.word	0x200274dc

0002c208 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   2c208:	b570      	push	{r4, r5, r6, lr}
   2c20a:	4604      	mov	r4, r0
   2c20c:	460d      	mov	r5, r1
	__asm__ volatile(
   2c20e:	f04f 0320 	mov.w	r3, #32
   2c212:	f3ef 8611 	mrs	r6, BASEPRI
   2c216:	f383 8811 	msr	BASEPRI, r3
   2c21a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2c21e:	4822      	ldr	r0, [pc, #136]	; (2c2a8 <k_mem_slab_free+0xa0>)
   2c220:	f002 f954 	bl	2e4cc <z_spin_lock_valid>
   2c224:	b968      	cbnz	r0, 2c242 <k_mem_slab_free+0x3a>
   2c226:	235c      	movs	r3, #92	; 0x5c
   2c228:	4a20      	ldr	r2, [pc, #128]	; (2c2ac <k_mem_slab_free+0xa4>)
   2c22a:	4921      	ldr	r1, [pc, #132]	; (2c2b0 <k_mem_slab_free+0xa8>)
   2c22c:	4821      	ldr	r0, [pc, #132]	; (2c2b4 <k_mem_slab_free+0xac>)
   2c22e:	f007 f9c0 	bl	335b2 <printk>
   2c232:	491d      	ldr	r1, [pc, #116]	; (2c2a8 <k_mem_slab_free+0xa0>)
   2c234:	4820      	ldr	r0, [pc, #128]	; (2c2b8 <k_mem_slab_free+0xb0>)
   2c236:	f007 f9bc 	bl	335b2 <printk>
   2c23a:	215c      	movs	r1, #92	; 0x5c
   2c23c:	481b      	ldr	r0, [pc, #108]	; (2c2ac <k_mem_slab_free+0xa4>)
   2c23e:	f007 fcb9 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2c242:	4819      	ldr	r0, [pc, #100]	; (2c2a8 <k_mem_slab_free+0xa0>)
   2c244:	f002 f960 	bl	2e508 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   2c248:	4620      	mov	r0, r4
   2c24a:	f001 fca5 	bl	2db98 <z_unpend_first_thread>

	if (pending_thread != NULL) {
   2c24e:	b158      	cbz	r0, 2c268 <k_mem_slab_free+0x60>
   2c250:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   2c252:	682a      	ldr	r2, [r5, #0]
   2c254:	6701      	str	r1, [r0, #112]	; 0x70
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   2c256:	6142      	str	r2, [r0, #20]
		z_ready_thread(pending_thread);
   2c258:	f000 ffee 	bl	2d238 <z_ready_thread>
		z_reschedule(&lock, key);
   2c25c:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   2c25e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   2c262:	4811      	ldr	r0, [pc, #68]	; (2c2a8 <k_mem_slab_free+0xa0>)
   2c264:	f000 bdc6 	b.w	2cdf4 <z_reschedule>
		**(char ***)mem = slab->free_list;
   2c268:	682b      	ldr	r3, [r5, #0]
   2c26a:	6962      	ldr	r2, [r4, #20]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2c26c:	480e      	ldr	r0, [pc, #56]	; (2c2a8 <k_mem_slab_free+0xa0>)
   2c26e:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   2c270:	682b      	ldr	r3, [r5, #0]
   2c272:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   2c274:	69a3      	ldr	r3, [r4, #24]
   2c276:	3b01      	subs	r3, #1
   2c278:	61a3      	str	r3, [r4, #24]
   2c27a:	f002 f935 	bl	2e4e8 <z_spin_unlock_valid>
   2c27e:	b968      	cbnz	r0, 2c29c <k_mem_slab_free+0x94>
   2c280:	2384      	movs	r3, #132	; 0x84
   2c282:	4a0a      	ldr	r2, [pc, #40]	; (2c2ac <k_mem_slab_free+0xa4>)
   2c284:	490d      	ldr	r1, [pc, #52]	; (2c2bc <k_mem_slab_free+0xb4>)
   2c286:	480b      	ldr	r0, [pc, #44]	; (2c2b4 <k_mem_slab_free+0xac>)
   2c288:	f007 f993 	bl	335b2 <printk>
   2c28c:	4906      	ldr	r1, [pc, #24]	; (2c2a8 <k_mem_slab_free+0xa0>)
   2c28e:	480c      	ldr	r0, [pc, #48]	; (2c2c0 <k_mem_slab_free+0xb8>)
   2c290:	f007 f98f 	bl	335b2 <printk>
   2c294:	2184      	movs	r1, #132	; 0x84
   2c296:	4805      	ldr	r0, [pc, #20]	; (2c2ac <k_mem_slab_free+0xa4>)
   2c298:	f007 fc8c 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   2c29c:	f386 8811 	msr	BASEPRI, r6
   2c2a0:	f3bf 8f6f 	isb	sy
}
   2c2a4:	bd70      	pop	{r4, r5, r6, pc}
   2c2a6:	bf00      	nop
   2c2a8:	20022c74 	.word	0x20022c74
   2c2ac:	0003c745 	.word	0x0003c745
   2c2b0:	0003c76b 	.word	0x0003c76b
   2c2b4:	0003b773 	.word	0x0003b773
   2c2b8:	0003c780 	.word	0x0003c780
   2c2bc:	0003c798 	.word	0x0003c798
   2c2c0:	0003c7af 	.word	0x0003c7af

0002c2c4 <k_malloc>:
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   2c2c4:	4601      	mov	r1, r0
   2c2c6:	4801      	ldr	r0, [pc, #4]	; (2c2cc <k_malloc+0x8>)
   2c2c8:	f00c bc82 	b.w	38bd0 <k_mem_pool_malloc>
   2c2cc:	20020228 	.word	0x20020228

0002c2d0 <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
   2c2d0:	b510      	push	{r4, lr}
   2c2d2:	4604      	mov	r4, r0
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
   2c2d4:	f00c fd2a 	bl	38d2c <k_is_in_isr>
   2c2d8:	b948      	cbnz	r0, 2c2ee <z_thread_malloc+0x1e>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
   2c2da:	4b06      	ldr	r3, [pc, #24]	; (2c2f4 <z_thread_malloc+0x24>)
   2c2dc:	689b      	ldr	r3, [r3, #8]
   2c2de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	}

	if (pool) {
   2c2e0:	b13b      	cbz	r3, 2c2f2 <z_thread_malloc+0x22>
		ret = k_mem_pool_malloc(pool, size);
   2c2e2:	4621      	mov	r1, r4
	} else {
		ret = NULL;
	}

	return ret;
}
   2c2e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = k_mem_pool_malloc(pool, size);
   2c2e8:	4618      	mov	r0, r3
   2c2ea:	f00c bc71 	b.w	38bd0 <k_mem_pool_malloc>
		pool = _HEAP_MEM_POOL;
   2c2ee:	4b02      	ldr	r3, [pc, #8]	; (2c2f8 <z_thread_malloc+0x28>)
   2c2f0:	e7f7      	b.n	2c2e2 <z_thread_malloc+0x12>
}
   2c2f2:	bd10      	pop	{r4, pc}
   2c2f4:	200274dc 	.word	0x200274dc
   2c2f8:	20020228 	.word	0x20020228

0002c2fc <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   2c2fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c300:	4604      	mov	r4, r0
   2c302:	4688      	mov	r8, r1
   2c304:	4616      	mov	r6, r2
   2c306:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   2c30a:	b16b      	cbz	r3, 2c328 <z_impl_k_msgq_put+0x2c>
   2c30c:	b162      	cbz	r2, 2c328 <z_impl_k_msgq_put+0x2c>
   2c30e:	493e      	ldr	r1, [pc, #248]	; (2c408 <z_impl_k_msgq_put+0x10c>)
   2c310:	2376      	movs	r3, #118	; 0x76
   2c312:	4a3e      	ldr	r2, [pc, #248]	; (2c40c <z_impl_k_msgq_put+0x110>)
   2c314:	483e      	ldr	r0, [pc, #248]	; (2c410 <z_impl_k_msgq_put+0x114>)
   2c316:	f007 f94c 	bl	335b2 <printk>
   2c31a:	483e      	ldr	r0, [pc, #248]	; (2c414 <z_impl_k_msgq_put+0x118>)
   2c31c:	f007 f949 	bl	335b2 <printk>
   2c320:	2176      	movs	r1, #118	; 0x76
   2c322:	483a      	ldr	r0, [pc, #232]	; (2c40c <z_impl_k_msgq_put+0x110>)
   2c324:	f007 fc46 	bl	33bb4 <assert_post_action>

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   2c328:	f104 0508 	add.w	r5, r4, #8
	__asm__ volatile(
   2c32c:	f04f 0320 	mov.w	r3, #32
   2c330:	f3ef 8711 	mrs	r7, BASEPRI
   2c334:	f383 8811 	msr	BASEPRI, r3
   2c338:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2c33c:	4628      	mov	r0, r5
   2c33e:	f002 f8c5 	bl	2e4cc <z_spin_lock_valid>
   2c342:	b968      	cbnz	r0, 2c360 <z_impl_k_msgq_put+0x64>
   2c344:	235c      	movs	r3, #92	; 0x5c
   2c346:	4a34      	ldr	r2, [pc, #208]	; (2c418 <z_impl_k_msgq_put+0x11c>)
   2c348:	4934      	ldr	r1, [pc, #208]	; (2c41c <z_impl_k_msgq_put+0x120>)
   2c34a:	4831      	ldr	r0, [pc, #196]	; (2c410 <z_impl_k_msgq_put+0x114>)
   2c34c:	f007 f931 	bl	335b2 <printk>
   2c350:	4629      	mov	r1, r5
   2c352:	4833      	ldr	r0, [pc, #204]	; (2c420 <z_impl_k_msgq_put+0x124>)
   2c354:	f007 f92d 	bl	335b2 <printk>
   2c358:	215c      	movs	r1, #92	; 0x5c
   2c35a:	482f      	ldr	r0, [pc, #188]	; (2c418 <z_impl_k_msgq_put+0x11c>)
   2c35c:	f007 fc2a 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2c360:	4628      	mov	r0, r5
   2c362:	f002 f8d1 	bl	2e508 <z_spin_lock_set_owner>

	if (msgq->used_msgs < msgq->max_msgs) {
   2c366:	6a62      	ldr	r2, [r4, #36]	; 0x24
   2c368:	6923      	ldr	r3, [r4, #16]
   2c36a:	429a      	cmp	r2, r3
   2c36c:	d23c      	bcs.n	2c3e8 <z_impl_k_msgq_put+0xec>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   2c36e:	4620      	mov	r0, r4
   2c370:	f001 fc12 	bl	2db98 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   2c374:	68e2      	ldr	r2, [r4, #12]
   2c376:	4606      	mov	r6, r0
   2c378:	4641      	mov	r1, r8
   2c37a:	b170      	cbz	r0, 2c39a <z_impl_k_msgq_put+0x9e>
   2c37c:	2400      	movs	r4, #0
   2c37e:	6940      	ldr	r0, [r0, #20]
   2c380:	f00c fe1f 	bl	38fc2 <memcpy>
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   2c384:	4630      	mov	r0, r6
   2c386:	6734      	str	r4, [r6, #112]	; 0x70
   2c388:	f000 ff56 	bl	2d238 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   2c38c:	4639      	mov	r1, r7
   2c38e:	4628      	mov	r0, r5
   2c390:	f000 fd30 	bl	2cdf4 <z_reschedule>
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   2c394:	4620      	mov	r0, r4
   2c396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2c39a:	6a20      	ldr	r0, [r4, #32]
   2c39c:	f00c fe11 	bl	38fc2 <memcpy>
			msgq->write_ptr += msgq->msg_size;
   2c3a0:	6a23      	ldr	r3, [r4, #32]
   2c3a2:	68e2      	ldr	r2, [r4, #12]
   2c3a4:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   2c3a6:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   2c3a8:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   2c3aa:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   2c3ac:	bf04      	itt	eq
   2c3ae:	6963      	ldreq	r3, [r4, #20]
   2c3b0:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   2c3b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2c3b4:	3301      	adds	r3, #1
   2c3b6:	6263      	str	r3, [r4, #36]	; 0x24
		result = 0;
   2c3b8:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2c3ba:	4628      	mov	r0, r5
   2c3bc:	f002 f894 	bl	2e4e8 <z_spin_unlock_valid>
   2c3c0:	b968      	cbnz	r0, 2c3de <z_impl_k_msgq_put+0xe2>
   2c3c2:	2384      	movs	r3, #132	; 0x84
   2c3c4:	4a14      	ldr	r2, [pc, #80]	; (2c418 <z_impl_k_msgq_put+0x11c>)
   2c3c6:	4917      	ldr	r1, [pc, #92]	; (2c424 <z_impl_k_msgq_put+0x128>)
   2c3c8:	4811      	ldr	r0, [pc, #68]	; (2c410 <z_impl_k_msgq_put+0x114>)
   2c3ca:	f007 f8f2 	bl	335b2 <printk>
   2c3ce:	4629      	mov	r1, r5
   2c3d0:	4815      	ldr	r0, [pc, #84]	; (2c428 <z_impl_k_msgq_put+0x12c>)
   2c3d2:	f007 f8ee 	bl	335b2 <printk>
   2c3d6:	2184      	movs	r1, #132	; 0x84
   2c3d8:	480f      	ldr	r0, [pc, #60]	; (2c418 <z_impl_k_msgq_put+0x11c>)
   2c3da:	f007 fbeb 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   2c3de:	f387 8811 	msr	BASEPRI, r7
   2c3e2:	f3bf 8f6f 	isb	sy
	return result;
   2c3e6:	e7d5      	b.n	2c394 <z_impl_k_msgq_put+0x98>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2c3e8:	b15e      	cbz	r6, 2c402 <z_impl_k_msgq_put+0x106>
		_current->base.swap_data = data;
   2c3ea:	4b10      	ldr	r3, [pc, #64]	; (2c42c <z_impl_k_msgq_put+0x130>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   2c3ec:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   2c3ee:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   2c3f0:	4639      	mov	r1, r7
		_current->base.swap_data = data;
   2c3f2:	f8c3 8014 	str.w	r8, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   2c3f6:	4628      	mov	r0, r5
   2c3f8:	4633      	mov	r3, r6
}
   2c3fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   2c3fe:	f001 bb0d 	b.w	2da1c <z_pend_curr>
		result = -ENOMSG;
   2c402:	f06f 0422 	mvn.w	r4, #34	; 0x22
   2c406:	e7d8      	b.n	2c3ba <z_impl_k_msgq_put+0xbe>
   2c408:	0003fb97 	.word	0x0003fb97
   2c40c:	0003fc39 	.word	0x0003fc39
   2c410:	0003b773 	.word	0x0003b773
   2c414:	0003cb7f 	.word	0x0003cb7f
   2c418:	0003c745 	.word	0x0003c745
   2c41c:	0003c76b 	.word	0x0003c76b
   2c420:	0003c780 	.word	0x0003c780
   2c424:	0003c798 	.word	0x0003c798
   2c428:	0003c7af 	.word	0x0003c7af
   2c42c:	200274dc 	.word	0x200274dc

0002c430 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   2c430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c434:	4604      	mov	r4, r0
   2c436:	4688      	mov	r8, r1
   2c438:	4615      	mov	r5, r2
   2c43a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   2c43e:	b16b      	cbz	r3, 2c45c <z_impl_k_msgq_get+0x2c>
   2c440:	b162      	cbz	r2, 2c45c <z_impl_k_msgq_get+0x2c>
   2c442:	4944      	ldr	r1, [pc, #272]	; (2c554 <z_impl_k_msgq_get+0x124>)
   2c444:	23c2      	movs	r3, #194	; 0xc2
   2c446:	4a44      	ldr	r2, [pc, #272]	; (2c558 <z_impl_k_msgq_get+0x128>)
   2c448:	4844      	ldr	r0, [pc, #272]	; (2c55c <z_impl_k_msgq_get+0x12c>)
   2c44a:	f007 f8b2 	bl	335b2 <printk>
   2c44e:	4844      	ldr	r0, [pc, #272]	; (2c560 <z_impl_k_msgq_get+0x130>)
   2c450:	f007 f8af 	bl	335b2 <printk>
   2c454:	21c2      	movs	r1, #194	; 0xc2
   2c456:	4840      	ldr	r0, [pc, #256]	; (2c558 <z_impl_k_msgq_get+0x128>)
   2c458:	f007 fbac 	bl	33bb4 <assert_post_action>

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   2c45c:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
   2c460:	f04f 0320 	mov.w	r3, #32
   2c464:	f3ef 8711 	mrs	r7, BASEPRI
   2c468:	f383 8811 	msr	BASEPRI, r3
   2c46c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2c470:	4630      	mov	r0, r6
   2c472:	f002 f82b 	bl	2e4cc <z_spin_lock_valid>
   2c476:	b968      	cbnz	r0, 2c494 <z_impl_k_msgq_get+0x64>
   2c478:	235c      	movs	r3, #92	; 0x5c
   2c47a:	4a3a      	ldr	r2, [pc, #232]	; (2c564 <z_impl_k_msgq_get+0x134>)
   2c47c:	493a      	ldr	r1, [pc, #232]	; (2c568 <z_impl_k_msgq_get+0x138>)
   2c47e:	4837      	ldr	r0, [pc, #220]	; (2c55c <z_impl_k_msgq_get+0x12c>)
   2c480:	f007 f897 	bl	335b2 <printk>
   2c484:	4631      	mov	r1, r6
   2c486:	4839      	ldr	r0, [pc, #228]	; (2c56c <z_impl_k_msgq_get+0x13c>)
   2c488:	f007 f893 	bl	335b2 <printk>
   2c48c:	215c      	movs	r1, #92	; 0x5c
   2c48e:	4835      	ldr	r0, [pc, #212]	; (2c564 <z_impl_k_msgq_get+0x134>)
   2c490:	f007 fb90 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2c494:	4630      	mov	r0, r6
   2c496:	f002 f837 	bl	2e508 <z_spin_lock_set_owner>

	if (msgq->used_msgs > 0) {
   2c49a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2c49c:	2b00      	cmp	r3, #0
   2c49e:	d033      	beq.n	2c508 <z_impl_k_msgq_get+0xd8>
   2c4a0:	68e2      	ldr	r2, [r4, #12]
   2c4a2:	69e1      	ldr	r1, [r4, #28]
   2c4a4:	4640      	mov	r0, r8
   2c4a6:	f00c fd8c 	bl	38fc2 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   2c4aa:	69e3      	ldr	r3, [r4, #28]
   2c4ac:	68e2      	ldr	r2, [r4, #12]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   2c4ae:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   2c4b0:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   2c4b2:	69a2      	ldr	r2, [r4, #24]
		msgq->read_ptr += msgq->msg_size;
   2c4b4:	61e3      	str	r3, [r4, #28]
		if (msgq->read_ptr == msgq->buffer_end) {
   2c4b6:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   2c4b8:	bf04      	itt	eq
   2c4ba:	6963      	ldreq	r3, [r4, #20]
   2c4bc:	61e3      	streq	r3, [r4, #28]
		msgq->used_msgs--;
   2c4be:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2c4c0:	3b01      	subs	r3, #1
   2c4c2:	6263      	str	r3, [r4, #36]	; 0x24
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   2c4c4:	f001 fb68 	bl	2db98 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   2c4c8:	4605      	mov	r5, r0
   2c4ca:	b360      	cbz	r0, 2c526 <z_impl_k_msgq_get+0xf6>
   2c4cc:	6941      	ldr	r1, [r0, #20]
   2c4ce:	68e2      	ldr	r2, [r4, #12]
   2c4d0:	6a20      	ldr	r0, [r4, #32]
   2c4d2:	f00c fd76 	bl	38fc2 <memcpy>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   2c4d6:	6a23      	ldr	r3, [r4, #32]
   2c4d8:	68e2      	ldr	r2, [r4, #12]
			}
			msgq->used_msgs++;

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   2c4da:	4628      	mov	r0, r5
			msgq->write_ptr += msgq->msg_size;
   2c4dc:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   2c4de:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   2c4e0:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   2c4e2:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   2c4e4:	bf04      	itt	eq
   2c4e6:	6963      	ldreq	r3, [r4, #20]
   2c4e8:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   2c4ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2c4ec:	3301      	adds	r3, #1
   2c4ee:	6263      	str	r3, [r4, #36]	; 0x24
   2c4f0:	2400      	movs	r4, #0
   2c4f2:	672c      	str	r4, [r5, #112]	; 0x70
			z_ready_thread(pending_thread);
   2c4f4:	f000 fea0 	bl	2d238 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   2c4f8:	4639      	mov	r1, r7
   2c4fa:	4630      	mov	r0, r6
   2c4fc:	f000 fc7a 	bl	2cdf4 <z_reschedule>
			return 0;
   2c500:	4625      	mov	r5, r4
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   2c502:	4628      	mov	r0, r5
   2c504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2c508:	b15d      	cbz	r5, 2c522 <z_impl_k_msgq_get+0xf2>
		_current->base.swap_data = data;
   2c50a:	4b19      	ldr	r3, [pc, #100]	; (2c570 <z_impl_k_msgq_get+0x140>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   2c50c:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   2c50e:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   2c510:	4639      	mov	r1, r7
		_current->base.swap_data = data;
   2c512:	f8c3 8014 	str.w	r8, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   2c516:	4630      	mov	r0, r6
   2c518:	462b      	mov	r3, r5
}
   2c51a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   2c51e:	f001 ba7d 	b.w	2da1c <z_pend_curr>
		result = -ENOMSG;
   2c522:	f06f 0522 	mvn.w	r5, #34	; 0x22
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2c526:	4630      	mov	r0, r6
   2c528:	f001 ffde 	bl	2e4e8 <z_spin_unlock_valid>
   2c52c:	b968      	cbnz	r0, 2c54a <z_impl_k_msgq_get+0x11a>
   2c52e:	2384      	movs	r3, #132	; 0x84
   2c530:	4a0c      	ldr	r2, [pc, #48]	; (2c564 <z_impl_k_msgq_get+0x134>)
   2c532:	4910      	ldr	r1, [pc, #64]	; (2c574 <z_impl_k_msgq_get+0x144>)
   2c534:	4809      	ldr	r0, [pc, #36]	; (2c55c <z_impl_k_msgq_get+0x12c>)
   2c536:	f007 f83c 	bl	335b2 <printk>
   2c53a:	4631      	mov	r1, r6
   2c53c:	480e      	ldr	r0, [pc, #56]	; (2c578 <z_impl_k_msgq_get+0x148>)
   2c53e:	f007 f838 	bl	335b2 <printk>
   2c542:	2184      	movs	r1, #132	; 0x84
   2c544:	4807      	ldr	r0, [pc, #28]	; (2c564 <z_impl_k_msgq_get+0x134>)
   2c546:	f007 fb35 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   2c54a:	f387 8811 	msr	BASEPRI, r7
   2c54e:	f3bf 8f6f 	isb	sy
	return result;
   2c552:	e7d6      	b.n	2c502 <z_impl_k_msgq_get+0xd2>
   2c554:	0003fb97 	.word	0x0003fb97
   2c558:	0003fc39 	.word	0x0003fc39
   2c55c:	0003b773 	.word	0x0003b773
   2c560:	0003cb7f 	.word	0x0003cb7f
   2c564:	0003c745 	.word	0x0003c745
   2c568:	0003c76b 	.word	0x0003c76b
   2c56c:	0003c780 	.word	0x0003c780
   2c570:	200274dc 	.word	0x200274dc
   2c574:	0003c798 	.word	0x0003c798
   2c578:	0003c7af 	.word	0x0003c7af

0002c57c <z_impl_k_msgq_purge>:
}
#include <syscalls/k_msgq_peek_mrsh.c>
#endif

void z_impl_k_msgq_purge(struct k_msgq *msgq)
{
   2c57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c57e:	4604      	mov	r4, r0
	k_spinlock_key_t key;
	struct k_thread *pending_thread;

	key = k_spin_lock(&msgq->lock);
   2c580:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   2c584:	f04f 0320 	mov.w	r3, #32
   2c588:	f3ef 8611 	mrs	r6, BASEPRI
   2c58c:	f383 8811 	msr	BASEPRI, r3
   2c590:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2c594:	4628      	mov	r0, r5
   2c596:	f001 ff99 	bl	2e4cc <z_spin_lock_valid>
   2c59a:	b968      	cbnz	r0, 2c5b8 <z_impl_k_msgq_purge+0x3c>
   2c59c:	235c      	movs	r3, #92	; 0x5c
   2c59e:	4a12      	ldr	r2, [pc, #72]	; (2c5e8 <z_impl_k_msgq_purge+0x6c>)
   2c5a0:	4912      	ldr	r1, [pc, #72]	; (2c5ec <z_impl_k_msgq_purge+0x70>)
   2c5a2:	4813      	ldr	r0, [pc, #76]	; (2c5f0 <z_impl_k_msgq_purge+0x74>)
   2c5a4:	f007 f805 	bl	335b2 <printk>
   2c5a8:	4629      	mov	r1, r5
   2c5aa:	4812      	ldr	r0, [pc, #72]	; (2c5f4 <z_impl_k_msgq_purge+0x78>)
   2c5ac:	f007 f801 	bl	335b2 <printk>
   2c5b0:	215c      	movs	r1, #92	; 0x5c
   2c5b2:	480d      	ldr	r0, [pc, #52]	; (2c5e8 <z_impl_k_msgq_purge+0x6c>)
   2c5b4:	f007 fafe 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2c5b8:	4628      	mov	r0, r5
   2c5ba:	f001 ffa5 	bl	2e508 <z_spin_lock_set_owner>
   2c5be:	f06f 0722 	mvn.w	r7, #34	; 0x22

	/* wake up any threads that are waiting to write */
	while ((pending_thread = z_unpend_first_thread(&msgq->wait_q)) != NULL) {
   2c5c2:	4620      	mov	r0, r4
   2c5c4:	f001 fae8 	bl	2db98 <z_unpend_first_thread>
   2c5c8:	4603      	mov	r3, r0
   2c5ca:	b940      	cbnz	r0, 2c5de <z_impl_k_msgq_purge+0x62>
		arch_thread_return_value_set(pending_thread, -ENOMSG);
		z_ready_thread(pending_thread);
	}

	msgq->used_msgs = 0;
	msgq->read_ptr = msgq->write_ptr;
   2c5cc:	6a23      	ldr	r3, [r4, #32]
	msgq->used_msgs = 0;
   2c5ce:	6260      	str	r0, [r4, #36]	; 0x24
	msgq->read_ptr = msgq->write_ptr;
   2c5d0:	61e3      	str	r3, [r4, #28]

	z_reschedule(&msgq->lock, key);
   2c5d2:	4631      	mov	r1, r6
   2c5d4:	4628      	mov	r0, r5
}
   2c5d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_reschedule(&msgq->lock, key);
   2c5da:	f000 bc0b 	b.w	2cdf4 <z_reschedule>
   2c5de:	671f      	str	r7, [r3, #112]	; 0x70
		z_ready_thread(pending_thread);
   2c5e0:	f000 fe2a 	bl	2d238 <z_ready_thread>
   2c5e4:	e7ed      	b.n	2c5c2 <z_impl_k_msgq_purge+0x46>
   2c5e6:	bf00      	nop
   2c5e8:	0003c745 	.word	0x0003c745
   2c5ec:	0003c76b 	.word	0x0003c76b
   2c5f0:	0003b773 	.word	0x0003b773
   2c5f4:	0003c780 	.word	0x0003c780

0002c5f8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   2c5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c5fa:	4604      	mov	r4, r0
   2c5fc:	460e      	mov	r6, r1
   2c5fe:	f04f 0320 	mov.w	r3, #32
   2c602:	f3ef 8511 	mrs	r5, BASEPRI
   2c606:	f383 8811 	msr	BASEPRI, r3
   2c60a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2c60e:	4861      	ldr	r0, [pc, #388]	; (2c794 <z_impl_k_mutex_lock+0x19c>)
   2c610:	f001 ff5c 	bl	2e4cc <z_spin_lock_valid>
   2c614:	b968      	cbnz	r0, 2c632 <z_impl_k_mutex_lock+0x3a>
   2c616:	235c      	movs	r3, #92	; 0x5c
   2c618:	4a5f      	ldr	r2, [pc, #380]	; (2c798 <z_impl_k_mutex_lock+0x1a0>)
   2c61a:	4960      	ldr	r1, [pc, #384]	; (2c79c <z_impl_k_mutex_lock+0x1a4>)
   2c61c:	4860      	ldr	r0, [pc, #384]	; (2c7a0 <z_impl_k_mutex_lock+0x1a8>)
   2c61e:	f006 ffc8 	bl	335b2 <printk>
   2c622:	495c      	ldr	r1, [pc, #368]	; (2c794 <z_impl_k_mutex_lock+0x19c>)
   2c624:	485f      	ldr	r0, [pc, #380]	; (2c7a4 <z_impl_k_mutex_lock+0x1ac>)
   2c626:	f006 ffc4 	bl	335b2 <printk>
   2c62a:	215c      	movs	r1, #92	; 0x5c
   2c62c:	485a      	ldr	r0, [pc, #360]	; (2c798 <z_impl_k_mutex_lock+0x1a0>)
   2c62e:	f007 fac1 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2c632:	4858      	ldr	r0, [pc, #352]	; (2c794 <z_impl_k_mutex_lock+0x19c>)
   2c634:	f001 ff68 	bl	2e508 <z_spin_lock_set_owner>
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   2c638:	68e3      	ldr	r3, [r4, #12]
   2c63a:	4a5b      	ldr	r2, [pc, #364]	; (2c7a8 <z_impl_k_mutex_lock+0x1b0>)
   2c63c:	b1f3      	cbz	r3, 2c67c <z_impl_k_mutex_lock+0x84>
   2c63e:	68a0      	ldr	r0, [r4, #8]
   2c640:	6891      	ldr	r1, [r2, #8]
   2c642:	4288      	cmp	r0, r1
   2c644:	d03a      	beq.n	2c6bc <z_impl_k_mutex_lock+0xc4>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   2c646:	2e00      	cmp	r6, #0
   2c648:	d13a      	bne.n	2c6c0 <z_impl_k_mutex_lock+0xc8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2c64a:	4852      	ldr	r0, [pc, #328]	; (2c794 <z_impl_k_mutex_lock+0x19c>)
   2c64c:	f001 ff4c 	bl	2e4e8 <z_spin_unlock_valid>
   2c650:	b968      	cbnz	r0, 2c66e <z_impl_k_mutex_lock+0x76>
   2c652:	2384      	movs	r3, #132	; 0x84
   2c654:	4a50      	ldr	r2, [pc, #320]	; (2c798 <z_impl_k_mutex_lock+0x1a0>)
   2c656:	4955      	ldr	r1, [pc, #340]	; (2c7ac <z_impl_k_mutex_lock+0x1b4>)
   2c658:	4851      	ldr	r0, [pc, #324]	; (2c7a0 <z_impl_k_mutex_lock+0x1a8>)
   2c65a:	f006 ffaa 	bl	335b2 <printk>
   2c65e:	494d      	ldr	r1, [pc, #308]	; (2c794 <z_impl_k_mutex_lock+0x19c>)
   2c660:	4853      	ldr	r0, [pc, #332]	; (2c7b0 <z_impl_k_mutex_lock+0x1b8>)
   2c662:	f006 ffa6 	bl	335b2 <printk>
   2c666:	2184      	movs	r1, #132	; 0x84
   2c668:	484b      	ldr	r0, [pc, #300]	; (2c798 <z_impl_k_mutex_lock+0x1a0>)
   2c66a:	f007 faa3 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   2c66e:	f385 8811 	msr	BASEPRI, r5
   2c672:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   2c676:	f06f 000f 	mvn.w	r0, #15
   2c67a:	e01e      	b.n	2c6ba <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
   2c67c:	6891      	ldr	r1, [r2, #8]
   2c67e:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   2c682:	3301      	adds	r3, #1
   2c684:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   2c686:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   2c688:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   2c68a:	60a3      	str	r3, [r4, #8]
   2c68c:	4841      	ldr	r0, [pc, #260]	; (2c794 <z_impl_k_mutex_lock+0x19c>)
   2c68e:	f001 ff2b 	bl	2e4e8 <z_spin_unlock_valid>
   2c692:	b968      	cbnz	r0, 2c6b0 <z_impl_k_mutex_lock+0xb8>
   2c694:	2384      	movs	r3, #132	; 0x84
   2c696:	4a40      	ldr	r2, [pc, #256]	; (2c798 <z_impl_k_mutex_lock+0x1a0>)
   2c698:	4944      	ldr	r1, [pc, #272]	; (2c7ac <z_impl_k_mutex_lock+0x1b4>)
   2c69a:	4841      	ldr	r0, [pc, #260]	; (2c7a0 <z_impl_k_mutex_lock+0x1a8>)
   2c69c:	f006 ff89 	bl	335b2 <printk>
   2c6a0:	493c      	ldr	r1, [pc, #240]	; (2c794 <z_impl_k_mutex_lock+0x19c>)
   2c6a2:	4843      	ldr	r0, [pc, #268]	; (2c7b0 <z_impl_k_mutex_lock+0x1b8>)
   2c6a4:	f006 ff85 	bl	335b2 <printk>
   2c6a8:	2184      	movs	r1, #132	; 0x84
   2c6aa:	483b      	ldr	r0, [pc, #236]	; (2c798 <z_impl_k_mutex_lock+0x1a0>)
   2c6ac:	f007 fa82 	bl	33bb4 <assert_post_action>
   2c6b0:	f385 8811 	msr	BASEPRI, r5
   2c6b4:	f3bf 8f6f 	isb	sy
		return 0;
   2c6b8:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   2c6ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					_current->base.prio :
   2c6bc:	6921      	ldr	r1, [r4, #16]
   2c6be:	e7e0      	b.n	2c682 <z_impl_k_mutex_lock+0x8a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   2c6c0:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2c6c4:	f991 100e 	ldrsb.w	r1, [r1, #14]
   2c6c8:	4299      	cmp	r1, r3
   2c6ca:	bfa8      	it	ge
   2c6cc:	4619      	movge	r1, r3
   2c6ce:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   2c6d2:	4299      	cmp	r1, r3
   2c6d4:	da40      	bge.n	2c758 <z_impl_k_mutex_lock+0x160>
		return z_set_prio(mutex->owner, new_prio);
   2c6d6:	f001 f9cf 	bl	2da78 <z_set_prio>
   2c6da:	4607      	mov	r7, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   2c6dc:	4633      	mov	r3, r6
   2c6de:	4622      	mov	r2, r4
   2c6e0:	4629      	mov	r1, r5
   2c6e2:	482c      	ldr	r0, [pc, #176]	; (2c794 <z_impl_k_mutex_lock+0x19c>)
   2c6e4:	f001 f99a 	bl	2da1c <z_pend_curr>
	if (got_mutex == 0) {
   2c6e8:	2800      	cmp	r0, #0
   2c6ea:	d0e6      	beq.n	2c6ba <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
   2c6ec:	f04f 0320 	mov.w	r3, #32
   2c6f0:	f3ef 8511 	mrs	r5, BASEPRI
   2c6f4:	f383 8811 	msr	BASEPRI, r3
   2c6f8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2c6fc:	4825      	ldr	r0, [pc, #148]	; (2c794 <z_impl_k_mutex_lock+0x19c>)
   2c6fe:	f001 fee5 	bl	2e4cc <z_spin_lock_valid>
   2c702:	b968      	cbnz	r0, 2c720 <z_impl_k_mutex_lock+0x128>
   2c704:	235c      	movs	r3, #92	; 0x5c
   2c706:	4a24      	ldr	r2, [pc, #144]	; (2c798 <z_impl_k_mutex_lock+0x1a0>)
   2c708:	4924      	ldr	r1, [pc, #144]	; (2c79c <z_impl_k_mutex_lock+0x1a4>)
   2c70a:	4825      	ldr	r0, [pc, #148]	; (2c7a0 <z_impl_k_mutex_lock+0x1a8>)
   2c70c:	f006 ff51 	bl	335b2 <printk>
   2c710:	4920      	ldr	r1, [pc, #128]	; (2c794 <z_impl_k_mutex_lock+0x19c>)
   2c712:	4824      	ldr	r0, [pc, #144]	; (2c7a4 <z_impl_k_mutex_lock+0x1ac>)
   2c714:	f006 ff4d 	bl	335b2 <printk>
   2c718:	215c      	movs	r1, #92	; 0x5c
   2c71a:	481f      	ldr	r0, [pc, #124]	; (2c798 <z_impl_k_mutex_lock+0x1a0>)
   2c71c:	f007 fa4a 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2c720:	481c      	ldr	r0, [pc, #112]	; (2c794 <z_impl_k_mutex_lock+0x19c>)
   2c722:	f001 fef1 	bl	2e508 <z_spin_lock_set_owner>
	return list->head == list;
   2c726:	6823      	ldr	r3, [r4, #0]
   2c728:	6921      	ldr	r1, [r4, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2c72a:	429c      	cmp	r4, r3
   2c72c:	d007      	beq.n	2c73e <z_impl_k_mutex_lock+0x146>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   2c72e:	b133      	cbz	r3, 2c73e <z_impl_k_mutex_lock+0x146>
   2c730:	f993 300e 	ldrsb.w	r3, [r3, #14]
   2c734:	4299      	cmp	r1, r3
   2c736:	bfa8      	it	ge
   2c738:	4619      	movge	r1, r3
   2c73a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   2c73e:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   2c740:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2c744:	4299      	cmp	r1, r3
   2c746:	d109      	bne.n	2c75c <z_impl_k_mutex_lock+0x164>
	if (resched) {
   2c748:	b16f      	cbz	r7, 2c766 <z_impl_k_mutex_lock+0x16e>
		z_reschedule(&lock, key);
   2c74a:	4629      	mov	r1, r5
   2c74c:	4811      	ldr	r0, [pc, #68]	; (2c794 <z_impl_k_mutex_lock+0x19c>)
   2c74e:	f000 fb51 	bl	2cdf4 <z_reschedule>
	return -EAGAIN;
   2c752:	f06f 000a 	mvn.w	r0, #10
   2c756:	e7b0      	b.n	2c6ba <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
   2c758:	2700      	movs	r7, #0
   2c75a:	e7bf      	b.n	2c6dc <z_impl_k_mutex_lock+0xe4>
		return z_set_prio(mutex->owner, new_prio);
   2c75c:	f001 f98c 	bl	2da78 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   2c760:	2800      	cmp	r0, #0
   2c762:	d1f2      	bne.n	2c74a <z_impl_k_mutex_lock+0x152>
   2c764:	e7f0      	b.n	2c748 <z_impl_k_mutex_lock+0x150>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2c766:	480b      	ldr	r0, [pc, #44]	; (2c794 <z_impl_k_mutex_lock+0x19c>)
   2c768:	f001 febe 	bl	2e4e8 <z_spin_unlock_valid>
   2c76c:	b968      	cbnz	r0, 2c78a <z_impl_k_mutex_lock+0x192>
   2c76e:	2384      	movs	r3, #132	; 0x84
   2c770:	4a09      	ldr	r2, [pc, #36]	; (2c798 <z_impl_k_mutex_lock+0x1a0>)
   2c772:	490e      	ldr	r1, [pc, #56]	; (2c7ac <z_impl_k_mutex_lock+0x1b4>)
   2c774:	480a      	ldr	r0, [pc, #40]	; (2c7a0 <z_impl_k_mutex_lock+0x1a8>)
   2c776:	f006 ff1c 	bl	335b2 <printk>
   2c77a:	4906      	ldr	r1, [pc, #24]	; (2c794 <z_impl_k_mutex_lock+0x19c>)
   2c77c:	480c      	ldr	r0, [pc, #48]	; (2c7b0 <z_impl_k_mutex_lock+0x1b8>)
   2c77e:	f006 ff18 	bl	335b2 <printk>
   2c782:	2184      	movs	r1, #132	; 0x84
   2c784:	4804      	ldr	r0, [pc, #16]	; (2c798 <z_impl_k_mutex_lock+0x1a0>)
   2c786:	f007 fa15 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   2c78a:	f385 8811 	msr	BASEPRI, r5
   2c78e:	f3bf 8f6f 	isb	sy
   2c792:	e7de      	b.n	2c752 <z_impl_k_mutex_lock+0x15a>
   2c794:	200274d8 	.word	0x200274d8
   2c798:	0003c745 	.word	0x0003c745
   2c79c:	0003c76b 	.word	0x0003c76b
   2c7a0:	0003b773 	.word	0x0003b773
   2c7a4:	0003c780 	.word	0x0003c780
   2c7a8:	200274dc 	.word	0x200274dc
   2c7ac:	0003c798 	.word	0x0003c798
   2c7b0:	0003c7af 	.word	0x0003c7af

0002c7b4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   2c7b4:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	CHECKIF(mutex->owner == NULL) {
   2c7b6:	6883      	ldr	r3, [r0, #8]
{
   2c7b8:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   2c7ba:	2b00      	cmp	r3, #0
   2c7bc:	f000 8091 	beq.w	2c8e2 <z_impl_k_mutex_unlock+0x12e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   2c7c0:	4d4b      	ldr	r5, [pc, #300]	; (2c8f0 <z_impl_k_mutex_unlock+0x13c>)
   2c7c2:	68aa      	ldr	r2, [r5, #8]
   2c7c4:	4293      	cmp	r3, r2
   2c7c6:	f040 808f 	bne.w	2c8e8 <z_impl_k_mutex_unlock+0x134>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   2c7ca:	68c3      	ldr	r3, [r0, #12]
   2c7cc:	b94b      	cbnz	r3, 2c7e2 <z_impl_k_mutex_unlock+0x2e>
   2c7ce:	4949      	ldr	r1, [pc, #292]	; (2c8f4 <z_impl_k_mutex_unlock+0x140>)
   2c7d0:	4849      	ldr	r0, [pc, #292]	; (2c8f8 <z_impl_k_mutex_unlock+0x144>)
   2c7d2:	23e6      	movs	r3, #230	; 0xe6
   2c7d4:	4a49      	ldr	r2, [pc, #292]	; (2c8fc <z_impl_k_mutex_unlock+0x148>)
   2c7d6:	f006 feec 	bl	335b2 <printk>
   2c7da:	21e6      	movs	r1, #230	; 0xe6
   2c7dc:	4847      	ldr	r0, [pc, #284]	; (2c8fc <z_impl_k_mutex_unlock+0x148>)
   2c7de:	f007 f9e9 	bl	33bb4 <assert_post_action>
   2c7e2:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
   2c7e6:	b173      	cbz	r3, 2c806 <z_impl_k_mutex_unlock+0x52>
   2c7e8:	4945      	ldr	r1, [pc, #276]	; (2c900 <z_impl_k_mutex_unlock+0x14c>)
   2c7ea:	f240 130b 	movw	r3, #267	; 0x10b
   2c7ee:	4a45      	ldr	r2, [pc, #276]	; (2c904 <z_impl_k_mutex_unlock+0x150>)
   2c7f0:	4841      	ldr	r0, [pc, #260]	; (2c8f8 <z_impl_k_mutex_unlock+0x144>)
   2c7f2:	f006 fede 	bl	335b2 <printk>
   2c7f6:	4844      	ldr	r0, [pc, #272]	; (2c908 <z_impl_k_mutex_unlock+0x154>)
   2c7f8:	f006 fedb 	bl	335b2 <printk>
   2c7fc:	f240 110b 	movw	r1, #267	; 0x10b
   2c800:	4840      	ldr	r0, [pc, #256]	; (2c904 <z_impl_k_mutex_unlock+0x150>)
   2c802:	f007 f9d7 	bl	33bb4 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   2c806:	68ab      	ldr	r3, [r5, #8]
   2c808:	7bdb      	ldrb	r3, [r3, #15]
   2c80a:	2b01      	cmp	r3, #1
   2c80c:	d10e      	bne.n	2c82c <z_impl_k_mutex_unlock+0x78>
   2c80e:	493f      	ldr	r1, [pc, #252]	; (2c90c <z_impl_k_mutex_unlock+0x158>)
   2c810:	f44f 7386 	mov.w	r3, #268	; 0x10c
   2c814:	4a3b      	ldr	r2, [pc, #236]	; (2c904 <z_impl_k_mutex_unlock+0x150>)
   2c816:	4838      	ldr	r0, [pc, #224]	; (2c8f8 <z_impl_k_mutex_unlock+0x144>)
   2c818:	f006 fecb 	bl	335b2 <printk>
   2c81c:	483a      	ldr	r0, [pc, #232]	; (2c908 <z_impl_k_mutex_unlock+0x154>)
   2c81e:	f006 fec8 	bl	335b2 <printk>
   2c822:	f44f 7186 	mov.w	r1, #268	; 0x10c
   2c826:	4837      	ldr	r0, [pc, #220]	; (2c904 <z_impl_k_mutex_unlock+0x150>)
   2c828:	f007 f9c4 	bl	33bb4 <assert_post_action>

	--_current->base.sched_locked;
   2c82c:	68aa      	ldr	r2, [r5, #8]
   2c82e:	7bd3      	ldrb	r3, [r2, #15]
   2c830:	3b01      	subs	r3, #1
   2c832:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   2c834:	68e3      	ldr	r3, [r4, #12]
   2c836:	2b01      	cmp	r3, #1
   2c838:	d005      	beq.n	2c846 <z_impl_k_mutex_unlock+0x92>
		mutex->lock_count--;
   2c83a:	3b01      	subs	r3, #1
   2c83c:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   2c83e:	f000 fc35 	bl	2d0ac <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   2c842:	2000      	movs	r0, #0
}
   2c844:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   2c846:	f04f 0320 	mov.w	r3, #32
   2c84a:	f3ef 8511 	mrs	r5, BASEPRI
   2c84e:	f383 8811 	msr	BASEPRI, r3
   2c852:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2c856:	482e      	ldr	r0, [pc, #184]	; (2c910 <z_impl_k_mutex_unlock+0x15c>)
   2c858:	f001 fe38 	bl	2e4cc <z_spin_lock_valid>
   2c85c:	b968      	cbnz	r0, 2c87a <z_impl_k_mutex_unlock+0xc6>
   2c85e:	235c      	movs	r3, #92	; 0x5c
   2c860:	4a2c      	ldr	r2, [pc, #176]	; (2c914 <z_impl_k_mutex_unlock+0x160>)
   2c862:	492d      	ldr	r1, [pc, #180]	; (2c918 <z_impl_k_mutex_unlock+0x164>)
   2c864:	4824      	ldr	r0, [pc, #144]	; (2c8f8 <z_impl_k_mutex_unlock+0x144>)
   2c866:	f006 fea4 	bl	335b2 <printk>
   2c86a:	4929      	ldr	r1, [pc, #164]	; (2c910 <z_impl_k_mutex_unlock+0x15c>)
   2c86c:	482b      	ldr	r0, [pc, #172]	; (2c91c <z_impl_k_mutex_unlock+0x168>)
   2c86e:	f006 fea0 	bl	335b2 <printk>
   2c872:	215c      	movs	r1, #92	; 0x5c
   2c874:	4827      	ldr	r0, [pc, #156]	; (2c914 <z_impl_k_mutex_unlock+0x160>)
   2c876:	f007 f99d 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2c87a:	4825      	ldr	r0, [pc, #148]	; (2c910 <z_impl_k_mutex_unlock+0x15c>)
   2c87c:	f001 fe44 	bl	2e508 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   2c880:	68a0      	ldr	r0, [r4, #8]
   2c882:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   2c884:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2c888:	4299      	cmp	r1, r3
   2c88a:	d001      	beq.n	2c890 <z_impl_k_mutex_unlock+0xdc>
		return z_set_prio(mutex->owner, new_prio);
   2c88c:	f001 f8f4 	bl	2da78 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   2c890:	4620      	mov	r0, r4
   2c892:	f001 f981 	bl	2db98 <z_unpend_first_thread>
	mutex->owner = new_owner;
   2c896:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   2c898:	b158      	cbz	r0, 2c8b2 <z_impl_k_mutex_unlock+0xfe>
		mutex->owner_orig_prio = new_owner->base.prio;
   2c89a:	f990 200e 	ldrsb.w	r2, [r0, #14]
   2c89e:	6122      	str	r2, [r4, #16]
   2c8a0:	2200      	movs	r2, #0
   2c8a2:	6702      	str	r2, [r0, #112]	; 0x70
		z_ready_thread(new_owner);
   2c8a4:	f000 fcc8 	bl	2d238 <z_ready_thread>
		z_reschedule(&lock, key);
   2c8a8:	4629      	mov	r1, r5
   2c8aa:	4819      	ldr	r0, [pc, #100]	; (2c910 <z_impl_k_mutex_unlock+0x15c>)
   2c8ac:	f000 faa2 	bl	2cdf4 <z_reschedule>
   2c8b0:	e7c5      	b.n	2c83e <z_impl_k_mutex_unlock+0x8a>
		mutex->lock_count = 0U;
   2c8b2:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2c8b4:	4816      	ldr	r0, [pc, #88]	; (2c910 <z_impl_k_mutex_unlock+0x15c>)
   2c8b6:	f001 fe17 	bl	2e4e8 <z_spin_unlock_valid>
   2c8ba:	b968      	cbnz	r0, 2c8d8 <z_impl_k_mutex_unlock+0x124>
   2c8bc:	2384      	movs	r3, #132	; 0x84
   2c8be:	4a15      	ldr	r2, [pc, #84]	; (2c914 <z_impl_k_mutex_unlock+0x160>)
   2c8c0:	4917      	ldr	r1, [pc, #92]	; (2c920 <z_impl_k_mutex_unlock+0x16c>)
   2c8c2:	480d      	ldr	r0, [pc, #52]	; (2c8f8 <z_impl_k_mutex_unlock+0x144>)
   2c8c4:	f006 fe75 	bl	335b2 <printk>
   2c8c8:	4911      	ldr	r1, [pc, #68]	; (2c910 <z_impl_k_mutex_unlock+0x15c>)
   2c8ca:	4816      	ldr	r0, [pc, #88]	; (2c924 <z_impl_k_mutex_unlock+0x170>)
   2c8cc:	f006 fe71 	bl	335b2 <printk>
   2c8d0:	2184      	movs	r1, #132	; 0x84
   2c8d2:	4810      	ldr	r0, [pc, #64]	; (2c914 <z_impl_k_mutex_unlock+0x160>)
   2c8d4:	f007 f96e 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   2c8d8:	f385 8811 	msr	BASEPRI, r5
   2c8dc:	f3bf 8f6f 	isb	sy
   2c8e0:	e7ad      	b.n	2c83e <z_impl_k_mutex_unlock+0x8a>
		return -EINVAL;
   2c8e2:	f06f 0015 	mvn.w	r0, #21
   2c8e6:	e7ad      	b.n	2c844 <z_impl_k_mutex_unlock+0x90>
		return -EPERM;
   2c8e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c8ec:	e7aa      	b.n	2c844 <z_impl_k_mutex_unlock+0x90>
   2c8ee:	bf00      	nop
   2c8f0:	200274dc 	.word	0x200274dc
   2c8f4:	0003fc7d 	.word	0x0003fc7d
   2c8f8:	0003b773 	.word	0x0003b773
   2c8fc:	0003fc5b 	.word	0x0003fc5b
   2c900:	0003fcbf 	.word	0x0003fcbf
   2c904:	0003fc94 	.word	0x0003fc94
   2c908:	0003cb7f 	.word	0x0003cb7f
   2c90c:	0003fcd1 	.word	0x0003fcd1
   2c910:	200274d8 	.word	0x200274d8
   2c914:	0003c745 	.word	0x0003c745
   2c918:	0003c76b 	.word	0x0003c76b
   2c91c:	0003c780 	.word	0x0003c780
   2c920:	0003c798 	.word	0x0003c798
   2c924:	0003c7af 	.word	0x0003c7af

0002c928 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   2c928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2c92c:	4604      	mov	r4, r0
   2c92e:	460e      	mov	r6, r1
   2c930:	4690      	mov	r8, r2
   2c932:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2c934:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   2c938:	f04f 0320 	mov.w	r3, #32
   2c93c:	f3ef 8711 	mrs	r7, BASEPRI
   2c940:	f383 8811 	msr	BASEPRI, r3
   2c944:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2c948:	4628      	mov	r0, r5
   2c94a:	f001 fdbf 	bl	2e4cc <z_spin_lock_valid>
   2c94e:	b968      	cbnz	r0, 2c96c <queue_insert+0x44>
   2c950:	235c      	movs	r3, #92	; 0x5c
   2c952:	4a39      	ldr	r2, [pc, #228]	; (2ca38 <queue_insert+0x110>)
   2c954:	4939      	ldr	r1, [pc, #228]	; (2ca3c <queue_insert+0x114>)
   2c956:	483a      	ldr	r0, [pc, #232]	; (2ca40 <queue_insert+0x118>)
   2c958:	f006 fe2b 	bl	335b2 <printk>
   2c95c:	4629      	mov	r1, r5
   2c95e:	4839      	ldr	r0, [pc, #228]	; (2ca44 <queue_insert+0x11c>)
   2c960:	f006 fe27 	bl	335b2 <printk>
   2c964:	215c      	movs	r1, #92	; 0x5c
   2c966:	4834      	ldr	r0, [pc, #208]	; (2ca38 <queue_insert+0x110>)
   2c968:	f007 f924 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2c96c:	4628      	mov	r0, r5
   2c96e:	f001 fdcb 	bl	2e508 <z_spin_lock_set_owner>
	struct k_thread *first_pending_thread;

	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   2c972:	f104 000c 	add.w	r0, r4, #12
   2c976:	f001 f90f 	bl	2db98 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   2c97a:	b158      	cbz	r0, 2c994 <queue_insert+0x6c>
   2c97c:	2400      	movs	r4, #0
   2c97e:	f8c0 8014 	str.w	r8, [r0, #20]
   2c982:	6704      	str	r4, [r0, #112]	; 0x70
	z_ready_thread(thread);
   2c984:	f000 fc58 	bl	2d238 <z_ready_thread>
		sys_sfnode_init(data, 0x0);
	}

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   2c988:	4628      	mov	r0, r5
   2c98a:	4639      	mov	r1, r7
   2c98c:	f000 fa32 	bl	2cdf4 <z_reschedule>
	return 0;
   2c990:	2000      	movs	r0, #0
   2c992:	e01e      	b.n	2c9d2 <queue_insert+0xaa>
	if (alloc) {
   2c994:	f1b9 0f00 	cmp.w	r9, #0
   2c998:	d02d      	beq.n	2c9f6 <queue_insert+0xce>
		anode = z_thread_malloc(sizeof(*anode));
   2c99a:	2008      	movs	r0, #8
   2c99c:	f7ff fc98 	bl	2c2d0 <z_thread_malloc>
		if (anode == NULL) {
   2c9a0:	b9c8      	cbnz	r0, 2c9d6 <queue_insert+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2c9a2:	4628      	mov	r0, r5
   2c9a4:	f001 fda0 	bl	2e4e8 <z_spin_unlock_valid>
   2c9a8:	b968      	cbnz	r0, 2c9c6 <queue_insert+0x9e>
   2c9aa:	2384      	movs	r3, #132	; 0x84
   2c9ac:	4a22      	ldr	r2, [pc, #136]	; (2ca38 <queue_insert+0x110>)
   2c9ae:	4926      	ldr	r1, [pc, #152]	; (2ca48 <queue_insert+0x120>)
   2c9b0:	4823      	ldr	r0, [pc, #140]	; (2ca40 <queue_insert+0x118>)
   2c9b2:	f006 fdfe 	bl	335b2 <printk>
   2c9b6:	4629      	mov	r1, r5
   2c9b8:	4824      	ldr	r0, [pc, #144]	; (2ca4c <queue_insert+0x124>)
   2c9ba:	f006 fdfa 	bl	335b2 <printk>
   2c9be:	2184      	movs	r1, #132	; 0x84
   2c9c0:	481d      	ldr	r0, [pc, #116]	; (2ca38 <queue_insert+0x110>)
   2c9c2:	f007 f8f7 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   2c9c6:	f387 8811 	msr	BASEPRI, r7
   2c9ca:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   2c9ce:	f06f 000b 	mvn.w	r0, #11
}
   2c9d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   2c9d6:	2301      	movs	r3, #1
		anode->data = data;
   2c9d8:	f8c0 8004 	str.w	r8, [r0, #4]
   2c9dc:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   2c9de:	6803      	ldr	r3, [r0, #0]
   2c9e0:	f003 0303 	and.w	r3, r3, #3
   2c9e4:	b95e      	cbnz	r6, 2c9fe <queue_insert+0xd6>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2c9e6:	6822      	ldr	r2, [r4, #0]
   2c9e8:	4313      	orrs	r3, r2
   2c9ea:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2c9ec:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   2c9ee:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2c9f0:	b973      	cbnz	r3, 2ca10 <queue_insert+0xe8>
	list->tail = node;
   2c9f2:	6060      	str	r0, [r4, #4]
   2c9f4:	e00c      	b.n	2ca10 <queue_insert+0xe8>
	node->next_and_flags = flags;
   2c9f6:	f8c8 9000 	str.w	r9, [r8]
   2c9fa:	4640      	mov	r0, r8
   2c9fc:	e7ef      	b.n	2c9de <queue_insert+0xb6>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2c9fe:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2ca00:	f032 0203 	bics.w	r2, r2, #3
   2ca04:	d110      	bne.n	2ca28 <queue_insert+0x100>
Z_GENLIST_APPEND(sflist, sfnode)
   2ca06:	6862      	ldr	r2, [r4, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2ca08:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   2ca0a:	b93a      	cbnz	r2, 2ca1c <queue_insert+0xf4>
	list->head = node;
   2ca0c:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2ca10:	2104      	movs	r1, #4
   2ca12:	f104 0014 	add.w	r0, r4, #20
   2ca16:	f00c faa5 	bl	38f64 <z_handle_obj_poll_events>
   2ca1a:	e7b5      	b.n	2c988 <queue_insert+0x60>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2ca1c:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2ca1e:	f003 0303 	and.w	r3, r3, #3
   2ca22:	4303      	orrs	r3, r0
   2ca24:	6013      	str	r3, [r2, #0]
   2ca26:	e7e4      	b.n	2c9f2 <queue_insert+0xca>
   2ca28:	4313      	orrs	r3, r2
   2ca2a:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2ca2c:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2ca2e:	f003 0303 	and.w	r3, r3, #3
   2ca32:	4318      	orrs	r0, r3
   2ca34:	6030      	str	r0, [r6, #0]
   2ca36:	e7eb      	b.n	2ca10 <queue_insert+0xe8>
   2ca38:	0003c745 	.word	0x0003c745
   2ca3c:	0003c76b 	.word	0x0003c76b
   2ca40:	0003b773 	.word	0x0003b773
   2ca44:	0003c780 	.word	0x0003c780
   2ca48:	0003c798 	.word	0x0003c798
   2ca4c:	0003c7af 	.word	0x0003c7af

0002ca50 <z_impl_k_queue_cancel_wait>:
{
   2ca50:	b570      	push	{r4, r5, r6, lr}
   2ca52:	4605      	mov	r5, r0
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2ca54:	f100 0408 	add.w	r4, r0, #8
	__asm__ volatile(
   2ca58:	f04f 0320 	mov.w	r3, #32
   2ca5c:	f3ef 8611 	mrs	r6, BASEPRI
   2ca60:	f383 8811 	msr	BASEPRI, r3
   2ca64:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2ca68:	4620      	mov	r0, r4
   2ca6a:	f001 fd2f 	bl	2e4cc <z_spin_lock_valid>
   2ca6e:	b968      	cbnz	r0, 2ca8c <z_impl_k_queue_cancel_wait+0x3c>
   2ca70:	235c      	movs	r3, #92	; 0x5c
   2ca72:	4a12      	ldr	r2, [pc, #72]	; (2cabc <z_impl_k_queue_cancel_wait+0x6c>)
   2ca74:	4912      	ldr	r1, [pc, #72]	; (2cac0 <z_impl_k_queue_cancel_wait+0x70>)
   2ca76:	4813      	ldr	r0, [pc, #76]	; (2cac4 <z_impl_k_queue_cancel_wait+0x74>)
   2ca78:	f006 fd9b 	bl	335b2 <printk>
   2ca7c:	4621      	mov	r1, r4
   2ca7e:	4812      	ldr	r0, [pc, #72]	; (2cac8 <z_impl_k_queue_cancel_wait+0x78>)
   2ca80:	f006 fd97 	bl	335b2 <printk>
   2ca84:	215c      	movs	r1, #92	; 0x5c
   2ca86:	480d      	ldr	r0, [pc, #52]	; (2cabc <z_impl_k_queue_cancel_wait+0x6c>)
   2ca88:	f007 f894 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2ca8c:	4620      	mov	r0, r4
   2ca8e:	f001 fd3b 	bl	2e508 <z_spin_lock_set_owner>
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   2ca92:	f105 000c 	add.w	r0, r5, #12
   2ca96:	f001 f87f 	bl	2db98 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   2ca9a:	b120      	cbz	r0, 2caa6 <z_impl_k_queue_cancel_wait+0x56>
   2ca9c:	2200      	movs	r2, #0
   2ca9e:	6702      	str	r2, [r0, #112]	; 0x70
   2caa0:	6142      	str	r2, [r0, #20]
	z_ready_thread(thread);
   2caa2:	f000 fbc9 	bl	2d238 <z_ready_thread>
	z_handle_obj_poll_events(&queue->poll_events, state);
   2caa6:	f105 0014 	add.w	r0, r5, #20
   2caaa:	2108      	movs	r1, #8
   2caac:	f00c fa5a 	bl	38f64 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   2cab0:	4631      	mov	r1, r6
   2cab2:	4620      	mov	r0, r4
}
   2cab4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&queue->lock, key);
   2cab8:	f000 b99c 	b.w	2cdf4 <z_reschedule>
   2cabc:	0003c745 	.word	0x0003c745
   2cac0:	0003c76b 	.word	0x0003c76b
   2cac4:	0003b773 	.word	0x0003b773
   2cac8:	0003c780 	.word	0x0003c780

0002cacc <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   2cacc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2cad0:	4606      	mov	r6, r0
   2cad2:	4688      	mov	r8, r1
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2cad4:	f100 0408 	add.w	r4, r0, #8
   2cad8:	f04f 0320 	mov.w	r3, #32
   2cadc:	f3ef 8711 	mrs	r7, BASEPRI
   2cae0:	f383 8811 	msr	BASEPRI, r3
   2cae4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2cae8:	4620      	mov	r0, r4
   2caea:	f001 fcef 	bl	2e4cc <z_spin_lock_valid>
   2caee:	b968      	cbnz	r0, 2cb0c <z_impl_k_queue_get+0x40>
   2caf0:	235c      	movs	r3, #92	; 0x5c
   2caf2:	4a24      	ldr	r2, [pc, #144]	; (2cb84 <z_impl_k_queue_get+0xb8>)
   2caf4:	4924      	ldr	r1, [pc, #144]	; (2cb88 <z_impl_k_queue_get+0xbc>)
   2caf6:	4825      	ldr	r0, [pc, #148]	; (2cb8c <z_impl_k_queue_get+0xc0>)
   2caf8:	f006 fd5b 	bl	335b2 <printk>
   2cafc:	4621      	mov	r1, r4
   2cafe:	4824      	ldr	r0, [pc, #144]	; (2cb90 <z_impl_k_queue_get+0xc4>)
   2cb00:	f006 fd57 	bl	335b2 <printk>
   2cb04:	215c      	movs	r1, #92	; 0x5c
   2cb06:	481f      	ldr	r0, [pc, #124]	; (2cb84 <z_impl_k_queue_get+0xb8>)
   2cb08:	f007 f854 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2cb0c:	4620      	mov	r0, r4
   2cb0e:	f001 fcfb 	bl	2e508 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   2cb12:	6835      	ldr	r5, [r6, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   2cb14:	b32d      	cbz	r5, 2cb62 <z_impl_k_queue_get+0x96>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2cb16:	682b      	ldr	r3, [r5, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2cb18:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2cb1a:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2cb1e:	4295      	cmp	r5, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   2cb20:	4628      	mov	r0, r5
	list->head = node;
   2cb22:	6033      	str	r3, [r6, #0]
	list->tail = node;
   2cb24:	bf08      	it	eq
   2cb26:	6073      	streq	r3, [r6, #4]
   2cb28:	2101      	movs	r1, #1
   2cb2a:	f00c f897 	bl	38c5c <z_queue_node_peek>
   2cb2e:	4605      	mov	r5, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2cb30:	4620      	mov	r0, r4
   2cb32:	f001 fcd9 	bl	2e4e8 <z_spin_unlock_valid>
   2cb36:	b968      	cbnz	r0, 2cb54 <z_impl_k_queue_get+0x88>
   2cb38:	2384      	movs	r3, #132	; 0x84
   2cb3a:	4a12      	ldr	r2, [pc, #72]	; (2cb84 <z_impl_k_queue_get+0xb8>)
   2cb3c:	4915      	ldr	r1, [pc, #84]	; (2cb94 <z_impl_k_queue_get+0xc8>)
   2cb3e:	4813      	ldr	r0, [pc, #76]	; (2cb8c <z_impl_k_queue_get+0xc0>)
   2cb40:	f006 fd37 	bl	335b2 <printk>
   2cb44:	4621      	mov	r1, r4
   2cb46:	4814      	ldr	r0, [pc, #80]	; (2cb98 <z_impl_k_queue_get+0xcc>)
   2cb48:	f006 fd33 	bl	335b2 <printk>
   2cb4c:	2184      	movs	r1, #132	; 0x84
   2cb4e:	480d      	ldr	r0, [pc, #52]	; (2cb84 <z_impl_k_queue_get+0xb8>)
   2cb50:	f007 f830 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   2cb54:	f387 8811 	msr	BASEPRI, r7
   2cb58:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   2cb5c:	4628      	mov	r0, r5
   2cb5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2cb62:	f1b8 0f00 	cmp.w	r8, #0
   2cb66:	d0e3      	beq.n	2cb30 <z_impl_k_queue_get+0x64>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   2cb68:	4643      	mov	r3, r8
   2cb6a:	f106 020c 	add.w	r2, r6, #12
   2cb6e:	4639      	mov	r1, r7
   2cb70:	4620      	mov	r0, r4
   2cb72:	f000 ff53 	bl	2da1c <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   2cb76:	2800      	cmp	r0, #0
   2cb78:	d1f0      	bne.n	2cb5c <z_impl_k_queue_get+0x90>
   2cb7a:	4b08      	ldr	r3, [pc, #32]	; (2cb9c <z_impl_k_queue_get+0xd0>)
   2cb7c:	689b      	ldr	r3, [r3, #8]
   2cb7e:	695d      	ldr	r5, [r3, #20]
   2cb80:	e7ec      	b.n	2cb5c <z_impl_k_queue_get+0x90>
   2cb82:	bf00      	nop
   2cb84:	0003c745 	.word	0x0003c745
   2cb88:	0003c76b 	.word	0x0003c76b
   2cb8c:	0003b773 	.word	0x0003b773
   2cb90:	0003c780 	.word	0x0003c780
   2cb94:	0003c798 	.word	0x0003c798
   2cb98:	0003c7af 	.word	0x0003c7af
   2cb9c:	200274dc 	.word	0x200274dc

0002cba0 <pended_on.isra.18>:
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on(struct k_thread *thread)
{
	__ASSERT_NO_MSG(thread->base.pended_on);
   2cba0:	6803      	ldr	r3, [r0, #0]
static _wait_q_t *pended_on(struct k_thread *thread)
   2cba2:	b510      	push	{r4, lr}
   2cba4:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   2cba6:	b95b      	cbnz	r3, 2cbc0 <pended_on.isra.18+0x20>
   2cba8:	4906      	ldr	r1, [pc, #24]	; (2cbc4 <pended_on.isra.18+0x24>)
   2cbaa:	4807      	ldr	r0, [pc, #28]	; (2cbc8 <pended_on.isra.18+0x28>)
   2cbac:	f240 13d9 	movw	r3, #473	; 0x1d9
   2cbb0:	4a06      	ldr	r2, [pc, #24]	; (2cbcc <pended_on.isra.18+0x2c>)
   2cbb2:	f006 fcfe 	bl	335b2 <printk>
   2cbb6:	f240 11d9 	movw	r1, #473	; 0x1d9
   2cbba:	4804      	ldr	r0, [pc, #16]	; (2cbcc <pended_on.isra.18+0x2c>)
   2cbbc:	f006 fffa 	bl	33bb4 <assert_post_action>

	return thread->base.pended_on;
}
   2cbc0:	6820      	ldr	r0, [r4, #0]
   2cbc2:	bd10      	pop	{r4, pc}
   2cbc4:	0003fd53 	.word	0x0003fd53
   2cbc8:	0003b773 	.word	0x0003b773
   2cbcc:	0003fd31 	.word	0x0003fd31

0002cbd0 <z_reset_time_slice>:
{
   2cbd0:	b510      	push	{r4, lr}
	if (slice_time != 0) {
   2cbd2:	4c08      	ldr	r4, [pc, #32]	; (2cbf4 <z_reset_time_slice+0x24>)
   2cbd4:	6823      	ldr	r3, [r4, #0]
   2cbd6:	b15b      	cbz	r3, 2cbf0 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   2cbd8:	f7ed fc38 	bl	1a44c <z_clock_elapsed>
   2cbdc:	6823      	ldr	r3, [r4, #0]
   2cbde:	4a06      	ldr	r2, [pc, #24]	; (2cbf8 <z_reset_time_slice+0x28>)
   2cbe0:	4418      	add	r0, r3
   2cbe2:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   2cbe4:	2100      	movs	r1, #0
}
   2cbe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   2cbea:	4618      	mov	r0, r3
   2cbec:	f001 bf7a 	b.w	2eae4 <z_set_timeout_expiry>
}
   2cbf0:	bd10      	pop	{r4, pc}
   2cbf2:	bf00      	nop
   2cbf4:	2002751c 	.word	0x2002751c
   2cbf8:	200274dc 	.word	0x200274dc

0002cbfc <k_sched_time_slice_set>:
{
   2cbfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2cbfe:	4607      	mov	r7, r0
   2cc00:	460d      	mov	r5, r1
	__asm__ volatile(
   2cc02:	f04f 0320 	mov.w	r3, #32
   2cc06:	f3ef 8411 	mrs	r4, BASEPRI
   2cc0a:	f383 8811 	msr	BASEPRI, r3
   2cc0e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2cc12:	4820      	ldr	r0, [pc, #128]	; (2cc94 <k_sched_time_slice_set+0x98>)
   2cc14:	f001 fc5a 	bl	2e4cc <z_spin_lock_valid>
   2cc18:	b968      	cbnz	r0, 2cc36 <k_sched_time_slice_set+0x3a>
   2cc1a:	235c      	movs	r3, #92	; 0x5c
   2cc1c:	4a1e      	ldr	r2, [pc, #120]	; (2cc98 <k_sched_time_slice_set+0x9c>)
   2cc1e:	491f      	ldr	r1, [pc, #124]	; (2cc9c <k_sched_time_slice_set+0xa0>)
   2cc20:	481f      	ldr	r0, [pc, #124]	; (2cca0 <k_sched_time_slice_set+0xa4>)
   2cc22:	f006 fcc6 	bl	335b2 <printk>
   2cc26:	491b      	ldr	r1, [pc, #108]	; (2cc94 <k_sched_time_slice_set+0x98>)
   2cc28:	481e      	ldr	r0, [pc, #120]	; (2cca4 <k_sched_time_slice_set+0xa8>)
   2cc2a:	f006 fcc2 	bl	335b2 <printk>
   2cc2e:	215c      	movs	r1, #92	; 0x5c
   2cc30:	4819      	ldr	r0, [pc, #100]	; (2cc98 <k_sched_time_slice_set+0x9c>)
   2cc32:	f006 ffbf 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2cc36:	4817      	ldr	r0, [pc, #92]	; (2cc94 <k_sched_time_slice_set+0x98>)
   2cc38:	f001 fc66 	bl	2e508 <z_spin_lock_set_owner>
   2cc3c:	f44f 4600 	mov.w	r6, #32768	; 0x8000
		_current_cpu->slice_ticks = 0;
   2cc40:	2200      	movs	r2, #0
   2cc42:	f240 30e7 	movw	r0, #999	; 0x3e7
   2cc46:	2100      	movs	r1, #0
   2cc48:	4b17      	ldr	r3, [pc, #92]	; (2cca8 <k_sched_time_slice_set+0xac>)
   2cc4a:	fbe6 0107 	umlal	r0, r1, r6, r7
   2cc4e:	611a      	str	r2, [r3, #16]
   2cc50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2cc54:	2300      	movs	r3, #0
   2cc56:	f7e0 fd8b 	bl	d770 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   2cc5a:	4b14      	ldr	r3, [pc, #80]	; (2ccac <k_sched_time_slice_set+0xb0>)
   2cc5c:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   2cc5e:	4b14      	ldr	r3, [pc, #80]	; (2ccb0 <k_sched_time_slice_set+0xb4>)
   2cc60:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   2cc62:	f7ff ffb5 	bl	2cbd0 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2cc66:	480b      	ldr	r0, [pc, #44]	; (2cc94 <k_sched_time_slice_set+0x98>)
   2cc68:	f001 fc3e 	bl	2e4e8 <z_spin_unlock_valid>
   2cc6c:	b968      	cbnz	r0, 2cc8a <k_sched_time_slice_set+0x8e>
   2cc6e:	2384      	movs	r3, #132	; 0x84
   2cc70:	4a09      	ldr	r2, [pc, #36]	; (2cc98 <k_sched_time_slice_set+0x9c>)
   2cc72:	4910      	ldr	r1, [pc, #64]	; (2ccb4 <k_sched_time_slice_set+0xb8>)
   2cc74:	480a      	ldr	r0, [pc, #40]	; (2cca0 <k_sched_time_slice_set+0xa4>)
   2cc76:	f006 fc9c 	bl	335b2 <printk>
   2cc7a:	4906      	ldr	r1, [pc, #24]	; (2cc94 <k_sched_time_slice_set+0x98>)
   2cc7c:	480e      	ldr	r0, [pc, #56]	; (2ccb8 <k_sched_time_slice_set+0xbc>)
   2cc7e:	f006 fc98 	bl	335b2 <printk>
   2cc82:	2184      	movs	r1, #132	; 0x84
   2cc84:	4804      	ldr	r0, [pc, #16]	; (2cc98 <k_sched_time_slice_set+0x9c>)
   2cc86:	f006 ff95 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   2cc8a:	f384 8811 	msr	BASEPRI, r4
   2cc8e:	f3bf 8f6f 	isb	sy
}
   2cc92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2cc94:	20027514 	.word	0x20027514
   2cc98:	0003c745 	.word	0x0003c745
   2cc9c:	0003c76b 	.word	0x0003c76b
   2cca0:	0003b773 	.word	0x0003b773
   2cca4:	0003c780 	.word	0x0003c780
   2cca8:	200274dc 	.word	0x200274dc
   2ccac:	2002751c 	.word	0x2002751c
   2ccb0:	20027518 	.word	0x20027518
   2ccb4:	0003c798 	.word	0x0003c798
   2ccb8:	0003c7af 	.word	0x0003c7af

0002ccbc <z_find_first_thread_to_unpend>:
	pend(thread, wait_q, timeout);
}

ALWAYS_INLINE struct k_thread *z_find_first_thread_to_unpend(_wait_q_t *wait_q,
						     struct k_thread *from)
{
   2ccbc:	b538      	push	{r3, r4, r5, lr}
   2ccbe:	4604      	mov	r4, r0
	__asm__ volatile(
   2ccc0:	f04f 0320 	mov.w	r3, #32
   2ccc4:	f3ef 8511 	mrs	r5, BASEPRI
   2ccc8:	f383 8811 	msr	BASEPRI, r3
   2cccc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2ccd0:	4818      	ldr	r0, [pc, #96]	; (2cd34 <z_find_first_thread_to_unpend+0x78>)
   2ccd2:	f001 fbfb 	bl	2e4cc <z_spin_lock_valid>
   2ccd6:	b968      	cbnz	r0, 2ccf4 <z_find_first_thread_to_unpend+0x38>
   2ccd8:	235c      	movs	r3, #92	; 0x5c
   2ccda:	4a17      	ldr	r2, [pc, #92]	; (2cd38 <z_find_first_thread_to_unpend+0x7c>)
   2ccdc:	4917      	ldr	r1, [pc, #92]	; (2cd3c <z_find_first_thread_to_unpend+0x80>)
   2ccde:	4818      	ldr	r0, [pc, #96]	; (2cd40 <z_find_first_thread_to_unpend+0x84>)
   2cce0:	f006 fc67 	bl	335b2 <printk>
   2cce4:	4913      	ldr	r1, [pc, #76]	; (2cd34 <z_find_first_thread_to_unpend+0x78>)
   2cce6:	4817      	ldr	r0, [pc, #92]	; (2cd44 <z_find_first_thread_to_unpend+0x88>)
   2cce8:	f006 fc63 	bl	335b2 <printk>
   2ccec:	215c      	movs	r1, #92	; 0x5c
   2ccee:	4812      	ldr	r0, [pc, #72]	; (2cd38 <z_find_first_thread_to_unpend+0x7c>)
   2ccf0:	f006 ff60 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2ccf4:	480f      	ldr	r0, [pc, #60]	; (2cd34 <z_find_first_thread_to_unpend+0x78>)
   2ccf6:	f001 fc07 	bl	2e508 <z_spin_lock_set_owner>
	ARG_UNUSED(from);

	struct k_thread *ret = NULL;

	LOCKED(&sched_spinlock) {
		ret = _priq_wait_best(&wait_q->waitq);
   2ccfa:	4620      	mov	r0, r4
   2ccfc:	f00b fff0 	bl	38ce0 <z_priq_dumb_best>
   2cd00:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2cd02:	480c      	ldr	r0, [pc, #48]	; (2cd34 <z_find_first_thread_to_unpend+0x78>)
   2cd04:	f001 fbf0 	bl	2e4e8 <z_spin_unlock_valid>
   2cd08:	b968      	cbnz	r0, 2cd26 <z_find_first_thread_to_unpend+0x6a>
   2cd0a:	2384      	movs	r3, #132	; 0x84
   2cd0c:	4a0a      	ldr	r2, [pc, #40]	; (2cd38 <z_find_first_thread_to_unpend+0x7c>)
   2cd0e:	490e      	ldr	r1, [pc, #56]	; (2cd48 <z_find_first_thread_to_unpend+0x8c>)
   2cd10:	480b      	ldr	r0, [pc, #44]	; (2cd40 <z_find_first_thread_to_unpend+0x84>)
   2cd12:	f006 fc4e 	bl	335b2 <printk>
   2cd16:	4907      	ldr	r1, [pc, #28]	; (2cd34 <z_find_first_thread_to_unpend+0x78>)
   2cd18:	480c      	ldr	r0, [pc, #48]	; (2cd4c <z_find_first_thread_to_unpend+0x90>)
   2cd1a:	f006 fc4a 	bl	335b2 <printk>
   2cd1e:	2184      	movs	r1, #132	; 0x84
   2cd20:	4805      	ldr	r0, [pc, #20]	; (2cd38 <z_find_first_thread_to_unpend+0x7c>)
   2cd22:	f006 ff47 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   2cd26:	f385 8811 	msr	BASEPRI, r5
   2cd2a:	f3bf 8f6f 	isb	sy
	}

	return ret;
}
   2cd2e:	4620      	mov	r0, r4
   2cd30:	bd38      	pop	{r3, r4, r5, pc}
   2cd32:	bf00      	nop
   2cd34:	20027514 	.word	0x20027514
   2cd38:	0003c745 	.word	0x0003c745
   2cd3c:	0003c76b 	.word	0x0003c76b
   2cd40:	0003b773 	.word	0x0003b773
   2cd44:	0003c780 	.word	0x0003c780
   2cd48:	0003c798 	.word	0x0003c798
   2cd4c:	0003c7af 	.word	0x0003c7af

0002cd50 <z_unpend_thread_no_timeout>:

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   2cd50:	b538      	push	{r3, r4, r5, lr}
   2cd52:	4604      	mov	r4, r0
	__asm__ volatile(
   2cd54:	f04f 0320 	mov.w	r3, #32
   2cd58:	f3ef 8511 	mrs	r5, BASEPRI
   2cd5c:	f383 8811 	msr	BASEPRI, r3
   2cd60:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2cd64:	481c      	ldr	r0, [pc, #112]	; (2cdd8 <z_unpend_thread_no_timeout+0x88>)
   2cd66:	f001 fbb1 	bl	2e4cc <z_spin_lock_valid>
   2cd6a:	b968      	cbnz	r0, 2cd88 <z_unpend_thread_no_timeout+0x38>
   2cd6c:	235c      	movs	r3, #92	; 0x5c
   2cd6e:	4a1b      	ldr	r2, [pc, #108]	; (2cddc <z_unpend_thread_no_timeout+0x8c>)
   2cd70:	491b      	ldr	r1, [pc, #108]	; (2cde0 <z_unpend_thread_no_timeout+0x90>)
   2cd72:	481c      	ldr	r0, [pc, #112]	; (2cde4 <z_unpend_thread_no_timeout+0x94>)
   2cd74:	f006 fc1d 	bl	335b2 <printk>
   2cd78:	4917      	ldr	r1, [pc, #92]	; (2cdd8 <z_unpend_thread_no_timeout+0x88>)
   2cd7a:	481b      	ldr	r0, [pc, #108]	; (2cde8 <z_unpend_thread_no_timeout+0x98>)
   2cd7c:	f006 fc19 	bl	335b2 <printk>
   2cd80:	215c      	movs	r1, #92	; 0x5c
   2cd82:	4816      	ldr	r0, [pc, #88]	; (2cddc <z_unpend_thread_no_timeout+0x8c>)
   2cd84:	f006 ff16 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2cd88:	4813      	ldr	r0, [pc, #76]	; (2cdd8 <z_unpend_thread_no_timeout+0x88>)
   2cd8a:	f001 fbbd 	bl	2e508 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2cd8e:	f104 0008 	add.w	r0, r4, #8
   2cd92:	f7ff ff05 	bl	2cba0 <pended_on.isra.18>
   2cd96:	4621      	mov	r1, r4
   2cd98:	f000 f8e0 	bl	2cf5c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2cd9c:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2cd9e:	480e      	ldr	r0, [pc, #56]	; (2cdd8 <z_unpend_thread_no_timeout+0x88>)
   2cda0:	f023 0302 	bic.w	r3, r3, #2
   2cda4:	7363      	strb	r3, [r4, #13]
		z_mark_thread_as_not_pending(thread);
		thread->base.pended_on = NULL;
   2cda6:	2300      	movs	r3, #0
   2cda8:	60a3      	str	r3, [r4, #8]
   2cdaa:	f001 fb9d 	bl	2e4e8 <z_spin_unlock_valid>
   2cdae:	b968      	cbnz	r0, 2cdcc <z_unpend_thread_no_timeout+0x7c>
   2cdb0:	2384      	movs	r3, #132	; 0x84
   2cdb2:	4a0a      	ldr	r2, [pc, #40]	; (2cddc <z_unpend_thread_no_timeout+0x8c>)
   2cdb4:	490d      	ldr	r1, [pc, #52]	; (2cdec <z_unpend_thread_no_timeout+0x9c>)
   2cdb6:	480b      	ldr	r0, [pc, #44]	; (2cde4 <z_unpend_thread_no_timeout+0x94>)
   2cdb8:	f006 fbfb 	bl	335b2 <printk>
   2cdbc:	4906      	ldr	r1, [pc, #24]	; (2cdd8 <z_unpend_thread_no_timeout+0x88>)
   2cdbe:	480c      	ldr	r0, [pc, #48]	; (2cdf0 <z_unpend_thread_no_timeout+0xa0>)
   2cdc0:	f006 fbf7 	bl	335b2 <printk>
   2cdc4:	2184      	movs	r1, #132	; 0x84
   2cdc6:	4805      	ldr	r0, [pc, #20]	; (2cddc <z_unpend_thread_no_timeout+0x8c>)
   2cdc8:	f006 fef4 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   2cdcc:	f385 8811 	msr	BASEPRI, r5
   2cdd0:	f3bf 8f6f 	isb	sy
	}
}
   2cdd4:	bd38      	pop	{r3, r4, r5, pc}
   2cdd6:	bf00      	nop
   2cdd8:	20027514 	.word	0x20027514
   2cddc:	0003c745 	.word	0x0003c745
   2cde0:	0003c76b 	.word	0x0003c76b
   2cde4:	0003b773 	.word	0x0003b773
   2cde8:	0003c780 	.word	0x0003c780
   2cdec:	0003c798 	.word	0x0003c798
   2cdf0:	0003c7af 	.word	0x0003c7af

0002cdf4 <z_reschedule>:

	return arch_irq_unlocked(key) && !arch_is_in_isr();
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   2cdf4:	b538      	push	{r3, r4, r5, lr}
   2cdf6:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2cdf8:	460d      	mov	r5, r1
   2cdfa:	b9c1      	cbnz	r1, 2ce2e <z_reschedule+0x3a>
   2cdfc:	f3ef 8305 	mrs	r3, IPSR
   2ce00:	b9ab      	cbnz	r3, 2ce2e <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2ce02:	f001 fb71 	bl	2e4e8 <z_spin_unlock_valid>
   2ce06:	b968      	cbnz	r0, 2ce24 <z_reschedule+0x30>
   2ce08:	239b      	movs	r3, #155	; 0x9b
   2ce0a:	4a14      	ldr	r2, [pc, #80]	; (2ce5c <z_reschedule+0x68>)
   2ce0c:	4914      	ldr	r1, [pc, #80]	; (2ce60 <z_reschedule+0x6c>)
   2ce0e:	4815      	ldr	r0, [pc, #84]	; (2ce64 <z_reschedule+0x70>)
   2ce10:	f006 fbcf 	bl	335b2 <printk>
   2ce14:	4621      	mov	r1, r4
   2ce16:	4814      	ldr	r0, [pc, #80]	; (2ce68 <z_reschedule+0x74>)
   2ce18:	f006 fbcb 	bl	335b2 <printk>
   2ce1c:	219b      	movs	r1, #155	; 0x9b
   2ce1e:	480f      	ldr	r0, [pc, #60]	; (2ce5c <z_reschedule+0x68>)
   2ce20:	f006 fec8 	bl	33bb4 <assert_post_action>
	if (resched(key.key)) {
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   2ce24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
   2ce28:	2000      	movs	r0, #0
   2ce2a:	f7ed be55 	b.w	1aad8 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2ce2e:	4620      	mov	r0, r4
   2ce30:	f001 fb5a 	bl	2e4e8 <z_spin_unlock_valid>
   2ce34:	b968      	cbnz	r0, 2ce52 <z_reschedule+0x5e>
   2ce36:	2384      	movs	r3, #132	; 0x84
   2ce38:	4a08      	ldr	r2, [pc, #32]	; (2ce5c <z_reschedule+0x68>)
   2ce3a:	4909      	ldr	r1, [pc, #36]	; (2ce60 <z_reschedule+0x6c>)
   2ce3c:	4809      	ldr	r0, [pc, #36]	; (2ce64 <z_reschedule+0x70>)
   2ce3e:	f006 fbb8 	bl	335b2 <printk>
   2ce42:	4621      	mov	r1, r4
   2ce44:	4808      	ldr	r0, [pc, #32]	; (2ce68 <z_reschedule+0x74>)
   2ce46:	f006 fbb4 	bl	335b2 <printk>
   2ce4a:	2184      	movs	r1, #132	; 0x84
   2ce4c:	4803      	ldr	r0, [pc, #12]	; (2ce5c <z_reschedule+0x68>)
   2ce4e:	f006 feb1 	bl	33bb4 <assert_post_action>
   2ce52:	f385 8811 	msr	BASEPRI, r5
   2ce56:	f3bf 8f6f 	isb	sy
   2ce5a:	bd38      	pop	{r3, r4, r5, pc}
   2ce5c:	0003c745 	.word	0x0003c745
   2ce60:	0003c798 	.word	0x0003c798
   2ce64:	0003b773 	.word	0x0003b773
   2ce68:	0003c7af 	.word	0x0003c7af

0002ce6c <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   2ce6c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2ce6e:	f04f 0320 	mov.w	r3, #32
   2ce72:	f3ef 8511 	mrs	r5, BASEPRI
   2ce76:	f383 8811 	msr	BASEPRI, r3
   2ce7a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2ce7e:	482b      	ldr	r0, [pc, #172]	; (2cf2c <k_sched_lock+0xc0>)
   2ce80:	f001 fb24 	bl	2e4cc <z_spin_lock_valid>
   2ce84:	b968      	cbnz	r0, 2cea2 <k_sched_lock+0x36>
   2ce86:	235c      	movs	r3, #92	; 0x5c
   2ce88:	4a29      	ldr	r2, [pc, #164]	; (2cf30 <k_sched_lock+0xc4>)
   2ce8a:	492a      	ldr	r1, [pc, #168]	; (2cf34 <k_sched_lock+0xc8>)
   2ce8c:	482a      	ldr	r0, [pc, #168]	; (2cf38 <k_sched_lock+0xcc>)
   2ce8e:	f006 fb90 	bl	335b2 <printk>
   2ce92:	4926      	ldr	r1, [pc, #152]	; (2cf2c <k_sched_lock+0xc0>)
   2ce94:	4829      	ldr	r0, [pc, #164]	; (2cf3c <k_sched_lock+0xd0>)
   2ce96:	f006 fb8c 	bl	335b2 <printk>
   2ce9a:	215c      	movs	r1, #92	; 0x5c
   2ce9c:	4824      	ldr	r0, [pc, #144]	; (2cf30 <k_sched_lock+0xc4>)
   2ce9e:	f006 fe89 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2cea2:	4822      	ldr	r0, [pc, #136]	; (2cf2c <k_sched_lock+0xc0>)
   2cea4:	f001 fb30 	bl	2e508 <z_spin_lock_set_owner>
   2cea8:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   2ceac:	b173      	cbz	r3, 2cecc <k_sched_lock+0x60>
   2ceae:	4924      	ldr	r1, [pc, #144]	; (2cf40 <k_sched_lock+0xd4>)
   2ceb0:	f240 130b 	movw	r3, #267	; 0x10b
   2ceb4:	4a23      	ldr	r2, [pc, #140]	; (2cf44 <k_sched_lock+0xd8>)
   2ceb6:	4820      	ldr	r0, [pc, #128]	; (2cf38 <k_sched_lock+0xcc>)
   2ceb8:	f006 fb7b 	bl	335b2 <printk>
   2cebc:	4822      	ldr	r0, [pc, #136]	; (2cf48 <k_sched_lock+0xdc>)
   2cebe:	f006 fb78 	bl	335b2 <printk>
   2cec2:	f240 110b 	movw	r1, #267	; 0x10b
   2cec6:	481f      	ldr	r0, [pc, #124]	; (2cf44 <k_sched_lock+0xd8>)
   2cec8:	f006 fe74 	bl	33bb4 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   2cecc:	4c1f      	ldr	r4, [pc, #124]	; (2cf4c <k_sched_lock+0xe0>)
   2cece:	68a2      	ldr	r2, [r4, #8]
   2ced0:	7bd2      	ldrb	r2, [r2, #15]
   2ced2:	2a01      	cmp	r2, #1
   2ced4:	d10e      	bne.n	2cef4 <k_sched_lock+0x88>
   2ced6:	491e      	ldr	r1, [pc, #120]	; (2cf50 <k_sched_lock+0xe4>)
   2ced8:	f44f 7386 	mov.w	r3, #268	; 0x10c
   2cedc:	4a19      	ldr	r2, [pc, #100]	; (2cf44 <k_sched_lock+0xd8>)
   2cede:	4816      	ldr	r0, [pc, #88]	; (2cf38 <k_sched_lock+0xcc>)
   2cee0:	f006 fb67 	bl	335b2 <printk>
   2cee4:	4818      	ldr	r0, [pc, #96]	; (2cf48 <k_sched_lock+0xdc>)
   2cee6:	f006 fb64 	bl	335b2 <printk>
   2ceea:	f44f 7186 	mov.w	r1, #268	; 0x10c
   2ceee:	4815      	ldr	r0, [pc, #84]	; (2cf44 <k_sched_lock+0xd8>)
   2cef0:	f006 fe60 	bl	33bb4 <assert_post_action>
	--_current->base.sched_locked;
   2cef4:	68a2      	ldr	r2, [r4, #8]
   2cef6:	7bd3      	ldrb	r3, [r2, #15]
   2cef8:	3b01      	subs	r3, #1
   2cefa:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2cefc:	480b      	ldr	r0, [pc, #44]	; (2cf2c <k_sched_lock+0xc0>)
   2cefe:	f001 faf3 	bl	2e4e8 <z_spin_unlock_valid>
   2cf02:	b968      	cbnz	r0, 2cf20 <k_sched_lock+0xb4>
   2cf04:	2384      	movs	r3, #132	; 0x84
   2cf06:	4a0a      	ldr	r2, [pc, #40]	; (2cf30 <k_sched_lock+0xc4>)
   2cf08:	4912      	ldr	r1, [pc, #72]	; (2cf54 <k_sched_lock+0xe8>)
   2cf0a:	480b      	ldr	r0, [pc, #44]	; (2cf38 <k_sched_lock+0xcc>)
   2cf0c:	f006 fb51 	bl	335b2 <printk>
   2cf10:	4906      	ldr	r1, [pc, #24]	; (2cf2c <k_sched_lock+0xc0>)
   2cf12:	4811      	ldr	r0, [pc, #68]	; (2cf58 <k_sched_lock+0xec>)
   2cf14:	f006 fb4d 	bl	335b2 <printk>
   2cf18:	2184      	movs	r1, #132	; 0x84
   2cf1a:	4805      	ldr	r0, [pc, #20]	; (2cf30 <k_sched_lock+0xc4>)
   2cf1c:	f006 fe4a 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   2cf20:	f385 8811 	msr	BASEPRI, r5
   2cf24:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   2cf28:	bd38      	pop	{r3, r4, r5, pc}
   2cf2a:	bf00      	nop
   2cf2c:	20027514 	.word	0x20027514
   2cf30:	0003c745 	.word	0x0003c745
   2cf34:	0003c76b 	.word	0x0003c76b
   2cf38:	0003b773 	.word	0x0003b773
   2cf3c:	0003c780 	.word	0x0003c780
   2cf40:	0003fcbf 	.word	0x0003fcbf
   2cf44:	0003fc94 	.word	0x0003fc94
   2cf48:	0003cb7f 	.word	0x0003cb7f
   2cf4c:	200274dc 	.word	0x200274dc
   2cf50:	0003fcd1 	.word	0x0003fcd1
   2cf54:	0003c798 	.word	0x0003c798
   2cf58:	0003c7af 	.word	0x0003c7af

0002cf5c <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   2cf5c:	4b11      	ldr	r3, [pc, #68]	; (2cfa4 <z_priq_dumb_remove+0x48>)
{
   2cf5e:	b510      	push	{r4, lr}
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   2cf60:	f103 0228 	add.w	r2, r3, #40	; 0x28
   2cf64:	4282      	cmp	r2, r0
{
   2cf66:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   2cf68:	d105      	bne.n	2cf76 <z_priq_dumb_remove+0x1a>
   2cf6a:	689b      	ldr	r3, [r3, #8]
   2cf6c:	428b      	cmp	r3, r1
   2cf6e:	d102      	bne.n	2cf76 <z_priq_dumb_remove+0x1a>
   2cf70:	7b4b      	ldrb	r3, [r1, #13]
   2cf72:	06db      	lsls	r3, r3, #27
   2cf74:	d115      	bne.n	2cfa2 <z_priq_dumb_remove+0x46>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2cf76:	4b0c      	ldr	r3, [pc, #48]	; (2cfa8 <z_priq_dumb_remove+0x4c>)
   2cf78:	429c      	cmp	r4, r3
   2cf7a:	d10b      	bne.n	2cf94 <z_priq_dumb_remove+0x38>
   2cf7c:	490b      	ldr	r1, [pc, #44]	; (2cfac <z_priq_dumb_remove+0x50>)
   2cf7e:	480c      	ldr	r0, [pc, #48]	; (2cfb0 <z_priq_dumb_remove+0x54>)
   2cf80:	f240 336b 	movw	r3, #875	; 0x36b
   2cf84:	4a0b      	ldr	r2, [pc, #44]	; (2cfb4 <z_priq_dumb_remove+0x58>)
   2cf86:	f006 fb14 	bl	335b2 <printk>
   2cf8a:	f240 316b 	movw	r1, #875	; 0x36b
   2cf8e:	4809      	ldr	r0, [pc, #36]	; (2cfb4 <z_priq_dumb_remove+0x58>)
   2cf90:	f006 fe10 	bl	33bb4 <assert_post_action>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   2cf94:	e9d4 3200 	ldrd	r3, r2, [r4]
   2cf98:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   2cf9a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2cf9c:	2300      	movs	r3, #0
	node->prev = NULL;
   2cf9e:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   2cfa2:	bd10      	pop	{r4, pc}
   2cfa4:	200274dc 	.word	0x200274dc
   2cfa8:	20022b04 	.word	0x20022b04
   2cfac:	0003fda7 	.word	0x0003fda7
   2cfb0:	0003b773 	.word	0x0003b773
   2cfb4:	0003fd31 	.word	0x0003fd31

0002cfb8 <z_unpend_thread>:
{
   2cfb8:	b538      	push	{r3, r4, r5, lr}
   2cfba:	4604      	mov	r4, r0
	__asm__ volatile(
   2cfbc:	f04f 0320 	mov.w	r3, #32
   2cfc0:	f3ef 8511 	mrs	r5, BASEPRI
   2cfc4:	f383 8811 	msr	BASEPRI, r3
   2cfc8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2cfcc:	481e      	ldr	r0, [pc, #120]	; (2d048 <z_unpend_thread+0x90>)
   2cfce:	f001 fa7d 	bl	2e4cc <z_spin_lock_valid>
   2cfd2:	b968      	cbnz	r0, 2cff0 <z_unpend_thread+0x38>
   2cfd4:	235c      	movs	r3, #92	; 0x5c
   2cfd6:	4a1d      	ldr	r2, [pc, #116]	; (2d04c <z_unpend_thread+0x94>)
   2cfd8:	491d      	ldr	r1, [pc, #116]	; (2d050 <z_unpend_thread+0x98>)
   2cfda:	481e      	ldr	r0, [pc, #120]	; (2d054 <z_unpend_thread+0x9c>)
   2cfdc:	f006 fae9 	bl	335b2 <printk>
   2cfe0:	4919      	ldr	r1, [pc, #100]	; (2d048 <z_unpend_thread+0x90>)
   2cfe2:	481d      	ldr	r0, [pc, #116]	; (2d058 <z_unpend_thread+0xa0>)
   2cfe4:	f006 fae5 	bl	335b2 <printk>
   2cfe8:	215c      	movs	r1, #92	; 0x5c
   2cfea:	4818      	ldr	r0, [pc, #96]	; (2d04c <z_unpend_thread+0x94>)
   2cfec:	f006 fde2 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2cff0:	4815      	ldr	r0, [pc, #84]	; (2d048 <z_unpend_thread+0x90>)
   2cff2:	f001 fa89 	bl	2e508 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2cff6:	f104 0008 	add.w	r0, r4, #8
   2cffa:	f7ff fdd1 	bl	2cba0 <pended_on.isra.18>
   2cffe:	4621      	mov	r1, r4
   2d000:	f7ff ffac 	bl	2cf5c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2d004:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2d006:	4810      	ldr	r0, [pc, #64]	; (2d048 <z_unpend_thread+0x90>)
   2d008:	f023 0302 	bic.w	r3, r3, #2
   2d00c:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
   2d00e:	2300      	movs	r3, #0
   2d010:	60a3      	str	r3, [r4, #8]
   2d012:	f001 fa69 	bl	2e4e8 <z_spin_unlock_valid>
   2d016:	b968      	cbnz	r0, 2d034 <z_unpend_thread+0x7c>
   2d018:	2384      	movs	r3, #132	; 0x84
   2d01a:	4a0c      	ldr	r2, [pc, #48]	; (2d04c <z_unpend_thread+0x94>)
   2d01c:	490f      	ldr	r1, [pc, #60]	; (2d05c <z_unpend_thread+0xa4>)
   2d01e:	480d      	ldr	r0, [pc, #52]	; (2d054 <z_unpend_thread+0x9c>)
   2d020:	f006 fac7 	bl	335b2 <printk>
   2d024:	4908      	ldr	r1, [pc, #32]	; (2d048 <z_unpend_thread+0x90>)
   2d026:	480e      	ldr	r0, [pc, #56]	; (2d060 <z_unpend_thread+0xa8>)
   2d028:	f006 fac3 	bl	335b2 <printk>
   2d02c:	2184      	movs	r1, #132	; 0x84
   2d02e:	4807      	ldr	r0, [pc, #28]	; (2d04c <z_unpend_thread+0x94>)
   2d030:	f006 fdc0 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   2d034:	f385 8811 	msr	BASEPRI, r5
   2d038:	f3bf 8f6f 	isb	sy
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   2d03c:	f104 0018 	add.w	r0, r4, #24
}
   2d040:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2d044:	f001 bc6e 	b.w	2e924 <z_abort_timeout>
   2d048:	20027514 	.word	0x20027514
   2d04c:	0003c745 	.word	0x0003c745
   2d050:	0003c76b 	.word	0x0003c76b
   2d054:	0003b773 	.word	0x0003b773
   2d058:	0003c780 	.word	0x0003c780
   2d05c:	0003c798 	.word	0x0003c798
   2d060:	0003c7af 	.word	0x0003c7af

0002d064 <update_cache>:
{
   2d064:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   2d066:	4c10      	ldr	r4, [pc, #64]	; (2d0a8 <update_cache+0x44>)
{
   2d068:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   2d06a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   2d06e:	f00b fe37 	bl	38ce0 <z_priq_dumb_best>
   2d072:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   2d074:	68a3      	ldr	r3, [r4, #8]
   2d076:	7b59      	ldrb	r1, [r3, #13]
   2d078:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
   2d07a:	bf44      	itt	mi
   2d07c:	f041 0108 	orrmi.w	r1, r1, #8
   2d080:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
   2d082:	b905      	cbnz	r5, 2d086 <update_cache+0x22>
   2d084:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   2d086:	b94e      	cbnz	r6, 2d09c <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
   2d088:	7b5a      	ldrb	r2, [r3, #13]
   2d08a:	06d2      	lsls	r2, r2, #27
   2d08c:	d106      	bne.n	2d09c <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   2d08e:	69aa      	ldr	r2, [r5, #24]
   2d090:	b922      	cbnz	r2, 2d09c <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
   2d092:	89da      	ldrh	r2, [r3, #14]
   2d094:	2a7f      	cmp	r2, #127	; 0x7f
   2d096:	d901      	bls.n	2d09c <update_cache+0x38>
		_kernel.ready_q.cache = _current;
   2d098:	6263      	str	r3, [r4, #36]	; 0x24
}
   2d09a:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
   2d09c:	42ab      	cmp	r3, r5
   2d09e:	d001      	beq.n	2d0a4 <update_cache+0x40>
			z_reset_time_slice();
   2d0a0:	f7ff fd96 	bl	2cbd0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   2d0a4:	6265      	str	r5, [r4, #36]	; 0x24
}
   2d0a6:	e7f8      	b.n	2d09a <update_cache+0x36>
   2d0a8:	200274dc 	.word	0x200274dc

0002d0ac <k_sched_unlock>:
{
   2d0ac:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2d0ae:	f04f 0320 	mov.w	r3, #32
   2d0b2:	f3ef 8511 	mrs	r5, BASEPRI
   2d0b6:	f383 8811 	msr	BASEPRI, r3
   2d0ba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2d0be:	482d      	ldr	r0, [pc, #180]	; (2d174 <k_sched_unlock+0xc8>)
   2d0c0:	f001 fa04 	bl	2e4cc <z_spin_lock_valid>
   2d0c4:	b968      	cbnz	r0, 2d0e2 <k_sched_unlock+0x36>
   2d0c6:	235c      	movs	r3, #92	; 0x5c
   2d0c8:	4a2b      	ldr	r2, [pc, #172]	; (2d178 <k_sched_unlock+0xcc>)
   2d0ca:	492c      	ldr	r1, [pc, #176]	; (2d17c <k_sched_unlock+0xd0>)
   2d0cc:	482c      	ldr	r0, [pc, #176]	; (2d180 <k_sched_unlock+0xd4>)
   2d0ce:	f006 fa70 	bl	335b2 <printk>
   2d0d2:	4928      	ldr	r1, [pc, #160]	; (2d174 <k_sched_unlock+0xc8>)
   2d0d4:	482b      	ldr	r0, [pc, #172]	; (2d184 <k_sched_unlock+0xd8>)
   2d0d6:	f006 fa6c 	bl	335b2 <printk>
   2d0da:	215c      	movs	r1, #92	; 0x5c
   2d0dc:	4826      	ldr	r0, [pc, #152]	; (2d178 <k_sched_unlock+0xcc>)
   2d0de:	f006 fd69 	bl	33bb4 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0, "");
   2d0e2:	4c29      	ldr	r4, [pc, #164]	; (2d188 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
   2d0e4:	4823      	ldr	r0, [pc, #140]	; (2d174 <k_sched_unlock+0xc8>)
   2d0e6:	f001 fa0f 	bl	2e508 <z_spin_lock_set_owner>
   2d0ea:	68a2      	ldr	r2, [r4, #8]
   2d0ec:	7bd2      	ldrb	r2, [r2, #15]
   2d0ee:	b972      	cbnz	r2, 2d10e <k_sched_unlock+0x62>
   2d0f0:	4926      	ldr	r1, [pc, #152]	; (2d18c <k_sched_unlock+0xe0>)
   2d0f2:	f240 330a 	movw	r3, #778	; 0x30a
   2d0f6:	4a26      	ldr	r2, [pc, #152]	; (2d190 <k_sched_unlock+0xe4>)
   2d0f8:	4821      	ldr	r0, [pc, #132]	; (2d180 <k_sched_unlock+0xd4>)
   2d0fa:	f006 fa5a 	bl	335b2 <printk>
   2d0fe:	4825      	ldr	r0, [pc, #148]	; (2d194 <k_sched_unlock+0xe8>)
   2d100:	f006 fa57 	bl	335b2 <printk>
   2d104:	f240 310a 	movw	r1, #778	; 0x30a
   2d108:	4821      	ldr	r0, [pc, #132]	; (2d190 <k_sched_unlock+0xe4>)
   2d10a:	f006 fd53 	bl	33bb4 <assert_post_action>
   2d10e:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   2d112:	b173      	cbz	r3, 2d132 <k_sched_unlock+0x86>
   2d114:	4920      	ldr	r1, [pc, #128]	; (2d198 <k_sched_unlock+0xec>)
   2d116:	f240 330b 	movw	r3, #779	; 0x30b
   2d11a:	4a1d      	ldr	r2, [pc, #116]	; (2d190 <k_sched_unlock+0xe4>)
   2d11c:	4818      	ldr	r0, [pc, #96]	; (2d180 <k_sched_unlock+0xd4>)
   2d11e:	f006 fa48 	bl	335b2 <printk>
   2d122:	481c      	ldr	r0, [pc, #112]	; (2d194 <k_sched_unlock+0xe8>)
   2d124:	f006 fa45 	bl	335b2 <printk>
   2d128:	f240 310b 	movw	r1, #779	; 0x30b
   2d12c:	4818      	ldr	r0, [pc, #96]	; (2d190 <k_sched_unlock+0xe4>)
   2d12e:	f006 fd41 	bl	33bb4 <assert_post_action>
		++_current->base.sched_locked;
   2d132:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   2d134:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   2d136:	7bd3      	ldrb	r3, [r2, #15]
   2d138:	3301      	adds	r3, #1
   2d13a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   2d13c:	f7ff ff92 	bl	2d064 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2d140:	480c      	ldr	r0, [pc, #48]	; (2d174 <k_sched_unlock+0xc8>)
   2d142:	f001 f9d1 	bl	2e4e8 <z_spin_unlock_valid>
   2d146:	b968      	cbnz	r0, 2d164 <k_sched_unlock+0xb8>
   2d148:	2384      	movs	r3, #132	; 0x84
   2d14a:	4a0b      	ldr	r2, [pc, #44]	; (2d178 <k_sched_unlock+0xcc>)
   2d14c:	4913      	ldr	r1, [pc, #76]	; (2d19c <k_sched_unlock+0xf0>)
   2d14e:	480c      	ldr	r0, [pc, #48]	; (2d180 <k_sched_unlock+0xd4>)
   2d150:	f006 fa2f 	bl	335b2 <printk>
   2d154:	4907      	ldr	r1, [pc, #28]	; (2d174 <k_sched_unlock+0xc8>)
   2d156:	4812      	ldr	r0, [pc, #72]	; (2d1a0 <k_sched_unlock+0xf4>)
   2d158:	f006 fa2b 	bl	335b2 <printk>
   2d15c:	2184      	movs	r1, #132	; 0x84
   2d15e:	4806      	ldr	r0, [pc, #24]	; (2d178 <k_sched_unlock+0xcc>)
   2d160:	f006 fd28 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   2d164:	f385 8811 	msr	BASEPRI, r5
   2d168:	f3bf 8f6f 	isb	sy
}
   2d16c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   2d170:	f00b bdac 	b.w	38ccc <z_reschedule_unlocked>
   2d174:	20027514 	.word	0x20027514
   2d178:	0003c745 	.word	0x0003c745
   2d17c:	0003c76b 	.word	0x0003c76b
   2d180:	0003b773 	.word	0x0003b773
   2d184:	0003c780 	.word	0x0003c780
   2d188:	200274dc 	.word	0x200274dc
   2d18c:	0003fd01 	.word	0x0003fd01
   2d190:	0003fd31 	.word	0x0003fd31
   2d194:	0003cb7f 	.word	0x0003cb7f
   2d198:	0003fcbf 	.word	0x0003fcbf
   2d19c:	0003c798 	.word	0x0003c798
   2d1a0:	0003c7af 	.word	0x0003c7af

0002d1a4 <ready_thread>:
{
   2d1a4:	b570      	push	{r4, r5, r6, lr}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2d1a6:	7b43      	ldrb	r3, [r0, #13]
   2d1a8:	4604      	mov	r4, r0
   2d1aa:	06db      	lsls	r3, r3, #27
   2d1ac:	d138      	bne.n	2d220 <ready_thread+0x7c>
	if (z_is_thread_ready(thread)) {
   2d1ae:	6983      	ldr	r3, [r0, #24]
   2d1b0:	2b00      	cmp	r3, #0
   2d1b2:	d135      	bne.n	2d220 <ready_thread+0x7c>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2d1b4:	4b1b      	ldr	r3, [pc, #108]	; (2d224 <ready_thread+0x80>)
   2d1b6:	4298      	cmp	r0, r3
   2d1b8:	d10b      	bne.n	2d1d2 <ready_thread+0x2e>
   2d1ba:	491b      	ldr	r1, [pc, #108]	; (2d228 <ready_thread+0x84>)
   2d1bc:	481b      	ldr	r0, [pc, #108]	; (2d22c <ready_thread+0x88>)
   2d1be:	f240 3355 	movw	r3, #853	; 0x355
   2d1c2:	4a1b      	ldr	r2, [pc, #108]	; (2d230 <ready_thread+0x8c>)
   2d1c4:	f006 f9f5 	bl	335b2 <printk>
   2d1c8:	f240 3155 	movw	r1, #853	; 0x355
   2d1cc:	4818      	ldr	r0, [pc, #96]	; (2d230 <ready_thread+0x8c>)
   2d1ce:	f006 fcf1 	bl	33bb4 <assert_post_action>
	return list->head == list;
   2d1d2:	4a18      	ldr	r2, [pc, #96]	; (2d234 <ready_thread+0x90>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2d1d4:	f102 0128 	add.w	r1, r2, #40	; 0x28
   2d1d8:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   2d1dc:	428b      	cmp	r3, r1
   2d1de:	d019      	beq.n	2d214 <ready_thread+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2d1e0:	b1c3      	cbz	r3, 2d214 <ready_thread+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
   2d1e2:	f994 500e 	ldrsb.w	r5, [r4, #14]
   2d1e6:	f993 600e 	ldrsb.w	r6, [r3, #14]
   2d1ea:	42ae      	cmp	r6, r5
   2d1ec:	dd0d      	ble.n	2d20a <ready_thread+0x66>
	node->prev = successor->prev;
   2d1ee:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2d1f0:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   2d1f4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2d1f6:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   2d1f8:	7b63      	ldrb	r3, [r4, #13]
		update_cache(0);
   2d1fa:	2000      	movs	r0, #0
   2d1fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2d200:	7363      	strb	r3, [r4, #13]
}
   2d202:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   2d206:	f7ff bf2d 	b.w	2d064 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   2d20a:	4298      	cmp	r0, r3
   2d20c:	d002      	beq.n	2d214 <ready_thread+0x70>
   2d20e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2d210:	2b00      	cmp	r3, #0
   2d212:	d1e8      	bne.n	2d1e6 <ready_thread+0x42>
	node->prev = list->tail;
   2d214:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   2d218:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   2d21a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2d21c:	62d4      	str	r4, [r2, #44]	; 0x2c
   2d21e:	e7eb      	b.n	2d1f8 <ready_thread+0x54>
}
   2d220:	bd70      	pop	{r4, r5, r6, pc}
   2d222:	bf00      	nop
   2d224:	20022b04 	.word	0x20022b04
   2d228:	0003fda7 	.word	0x0003fda7
   2d22c:	0003b773 	.word	0x0003b773
   2d230:	0003fd31 	.word	0x0003fd31
   2d234:	200274dc 	.word	0x200274dc

0002d238 <z_ready_thread>:
{
   2d238:	b538      	push	{r3, r4, r5, lr}
   2d23a:	4605      	mov	r5, r0
	__asm__ volatile(
   2d23c:	f04f 0320 	mov.w	r3, #32
   2d240:	f3ef 8411 	mrs	r4, BASEPRI
   2d244:	f383 8811 	msr	BASEPRI, r3
   2d248:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2d24c:	4817      	ldr	r0, [pc, #92]	; (2d2ac <z_ready_thread+0x74>)
   2d24e:	f001 f93d 	bl	2e4cc <z_spin_lock_valid>
   2d252:	b968      	cbnz	r0, 2d270 <z_ready_thread+0x38>
   2d254:	235c      	movs	r3, #92	; 0x5c
   2d256:	4a16      	ldr	r2, [pc, #88]	; (2d2b0 <z_ready_thread+0x78>)
   2d258:	4916      	ldr	r1, [pc, #88]	; (2d2b4 <z_ready_thread+0x7c>)
   2d25a:	4817      	ldr	r0, [pc, #92]	; (2d2b8 <z_ready_thread+0x80>)
   2d25c:	f006 f9a9 	bl	335b2 <printk>
   2d260:	4912      	ldr	r1, [pc, #72]	; (2d2ac <z_ready_thread+0x74>)
   2d262:	4816      	ldr	r0, [pc, #88]	; (2d2bc <z_ready_thread+0x84>)
   2d264:	f006 f9a5 	bl	335b2 <printk>
   2d268:	215c      	movs	r1, #92	; 0x5c
   2d26a:	4811      	ldr	r0, [pc, #68]	; (2d2b0 <z_ready_thread+0x78>)
   2d26c:	f006 fca2 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2d270:	480e      	ldr	r0, [pc, #56]	; (2d2ac <z_ready_thread+0x74>)
   2d272:	f001 f949 	bl	2e508 <z_spin_lock_set_owner>
		ready_thread(thread);
   2d276:	4628      	mov	r0, r5
   2d278:	f7ff ff94 	bl	2d1a4 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2d27c:	480b      	ldr	r0, [pc, #44]	; (2d2ac <z_ready_thread+0x74>)
   2d27e:	f001 f933 	bl	2e4e8 <z_spin_unlock_valid>
   2d282:	b968      	cbnz	r0, 2d2a0 <z_ready_thread+0x68>
   2d284:	2384      	movs	r3, #132	; 0x84
   2d286:	4a0a      	ldr	r2, [pc, #40]	; (2d2b0 <z_ready_thread+0x78>)
   2d288:	490d      	ldr	r1, [pc, #52]	; (2d2c0 <z_ready_thread+0x88>)
   2d28a:	480b      	ldr	r0, [pc, #44]	; (2d2b8 <z_ready_thread+0x80>)
   2d28c:	f006 f991 	bl	335b2 <printk>
   2d290:	4906      	ldr	r1, [pc, #24]	; (2d2ac <z_ready_thread+0x74>)
   2d292:	480c      	ldr	r0, [pc, #48]	; (2d2c4 <z_ready_thread+0x8c>)
   2d294:	f006 f98d 	bl	335b2 <printk>
   2d298:	2184      	movs	r1, #132	; 0x84
   2d29a:	4805      	ldr	r0, [pc, #20]	; (2d2b0 <z_ready_thread+0x78>)
   2d29c:	f006 fc8a 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   2d2a0:	f384 8811 	msr	BASEPRI, r4
   2d2a4:	f3bf 8f6f 	isb	sy
}
   2d2a8:	bd38      	pop	{r3, r4, r5, pc}
   2d2aa:	bf00      	nop
   2d2ac:	20027514 	.word	0x20027514
   2d2b0:	0003c745 	.word	0x0003c745
   2d2b4:	0003c76b 	.word	0x0003c76b
   2d2b8:	0003b773 	.word	0x0003b773
   2d2bc:	0003c780 	.word	0x0003c780
   2d2c0:	0003c798 	.word	0x0003c798
   2d2c4:	0003c7af 	.word	0x0003c7af

0002d2c8 <z_thread_timeout>:
	if (thread->base.pended_on != NULL) {
   2d2c8:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   2d2cc:	b570      	push	{r4, r5, r6, lr}
   2d2ce:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   2d2d0:	f1a0 0518 	sub.w	r5, r0, #24
	if (thread->base.pended_on != NULL) {
   2d2d4:	2b00      	cmp	r3, #0
   2d2d6:	d042      	beq.n	2d35e <z_thread_timeout+0x96>
	__asm__ volatile(
   2d2d8:	f04f 0320 	mov.w	r3, #32
   2d2dc:	f3ef 8611 	mrs	r6, BASEPRI
   2d2e0:	f383 8811 	msr	BASEPRI, r3
   2d2e4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2d2e8:	4822      	ldr	r0, [pc, #136]	; (2d374 <z_thread_timeout+0xac>)
   2d2ea:	f001 f8ef 	bl	2e4cc <z_spin_lock_valid>
   2d2ee:	b968      	cbnz	r0, 2d30c <z_thread_timeout+0x44>
   2d2f0:	235c      	movs	r3, #92	; 0x5c
   2d2f2:	4a21      	ldr	r2, [pc, #132]	; (2d378 <z_thread_timeout+0xb0>)
   2d2f4:	4921      	ldr	r1, [pc, #132]	; (2d37c <z_thread_timeout+0xb4>)
   2d2f6:	4822      	ldr	r0, [pc, #136]	; (2d380 <z_thread_timeout+0xb8>)
   2d2f8:	f006 f95b 	bl	335b2 <printk>
   2d2fc:	491d      	ldr	r1, [pc, #116]	; (2d374 <z_thread_timeout+0xac>)
   2d2fe:	4821      	ldr	r0, [pc, #132]	; (2d384 <z_thread_timeout+0xbc>)
   2d300:	f006 f957 	bl	335b2 <printk>
   2d304:	215c      	movs	r1, #92	; 0x5c
   2d306:	481c      	ldr	r0, [pc, #112]	; (2d378 <z_thread_timeout+0xb0>)
   2d308:	f006 fc54 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2d30c:	4819      	ldr	r0, [pc, #100]	; (2d374 <z_thread_timeout+0xac>)
   2d30e:	f001 f8fb 	bl	2e508 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2d312:	f1a4 0010 	sub.w	r0, r4, #16
   2d316:	f7ff fc43 	bl	2cba0 <pended_on.isra.18>
   2d31a:	4629      	mov	r1, r5
   2d31c:	f7ff fe1e 	bl	2cf5c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2d320:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2d324:	4813      	ldr	r0, [pc, #76]	; (2d374 <z_thread_timeout+0xac>)
   2d326:	f023 0302 	bic.w	r3, r3, #2
   2d32a:	f804 3c0b 	strb.w	r3, [r4, #-11]
		thread->base.pended_on = NULL;
   2d32e:	2300      	movs	r3, #0
   2d330:	f844 3c10 	str.w	r3, [r4, #-16]
   2d334:	f001 f8d8 	bl	2e4e8 <z_spin_unlock_valid>
   2d338:	b968      	cbnz	r0, 2d356 <z_thread_timeout+0x8e>
   2d33a:	2384      	movs	r3, #132	; 0x84
   2d33c:	4a0e      	ldr	r2, [pc, #56]	; (2d378 <z_thread_timeout+0xb0>)
   2d33e:	4912      	ldr	r1, [pc, #72]	; (2d388 <z_thread_timeout+0xc0>)
   2d340:	480f      	ldr	r0, [pc, #60]	; (2d380 <z_thread_timeout+0xb8>)
   2d342:	f006 f936 	bl	335b2 <printk>
   2d346:	490b      	ldr	r1, [pc, #44]	; (2d374 <z_thread_timeout+0xac>)
   2d348:	4810      	ldr	r0, [pc, #64]	; (2d38c <z_thread_timeout+0xc4>)
   2d34a:	f006 f932 	bl	335b2 <printk>
   2d34e:	2184      	movs	r1, #132	; 0x84
   2d350:	4809      	ldr	r0, [pc, #36]	; (2d378 <z_thread_timeout+0xb0>)
   2d352:	f006 fc2f 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   2d356:	f386 8811 	msr	BASEPRI, r6
   2d35a:	f3bf 8f6f 	isb	sy
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2d35e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	z_ready_thread(thread);
   2d362:	4628      	mov	r0, r5
   2d364:	f023 0314 	bic.w	r3, r3, #20
   2d368:	f804 3c0b 	strb.w	r3, [r4, #-11]
}
   2d36c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   2d370:	f7ff bf62 	b.w	2d238 <z_ready_thread>
   2d374:	20027514 	.word	0x20027514
   2d378:	0003c745 	.word	0x0003c745
   2d37c:	0003c76b 	.word	0x0003c76b
   2d380:	0003b773 	.word	0x0003b773
   2d384:	0003c780 	.word	0x0003c780
   2d388:	0003c798 	.word	0x0003c798
   2d38c:	0003c7af 	.word	0x0003c7af

0002d390 <z_sched_start>:
{
   2d390:	b538      	push	{r3, r4, r5, lr}
   2d392:	4604      	mov	r4, r0
	__asm__ volatile(
   2d394:	f04f 0320 	mov.w	r3, #32
   2d398:	f3ef 8511 	mrs	r5, BASEPRI
   2d39c:	f383 8811 	msr	BASEPRI, r3
   2d3a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2d3a4:	481d      	ldr	r0, [pc, #116]	; (2d41c <z_sched_start+0x8c>)
   2d3a6:	f001 f891 	bl	2e4cc <z_spin_lock_valid>
   2d3aa:	b968      	cbnz	r0, 2d3c8 <z_sched_start+0x38>
   2d3ac:	235c      	movs	r3, #92	; 0x5c
   2d3ae:	4a1c      	ldr	r2, [pc, #112]	; (2d420 <z_sched_start+0x90>)
   2d3b0:	491c      	ldr	r1, [pc, #112]	; (2d424 <z_sched_start+0x94>)
   2d3b2:	481d      	ldr	r0, [pc, #116]	; (2d428 <z_sched_start+0x98>)
   2d3b4:	f006 f8fd 	bl	335b2 <printk>
   2d3b8:	4918      	ldr	r1, [pc, #96]	; (2d41c <z_sched_start+0x8c>)
   2d3ba:	481c      	ldr	r0, [pc, #112]	; (2d42c <z_sched_start+0x9c>)
   2d3bc:	f006 f8f9 	bl	335b2 <printk>
   2d3c0:	215c      	movs	r1, #92	; 0x5c
   2d3c2:	4817      	ldr	r0, [pc, #92]	; (2d420 <z_sched_start+0x90>)
   2d3c4:	f006 fbf6 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2d3c8:	4814      	ldr	r0, [pc, #80]	; (2d41c <z_sched_start+0x8c>)
   2d3ca:	f001 f89d 	bl	2e508 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   2d3ce:	7b63      	ldrb	r3, [r4, #13]
   2d3d0:	075a      	lsls	r2, r3, #29
   2d3d2:	d416      	bmi.n	2d402 <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2d3d4:	4811      	ldr	r0, [pc, #68]	; (2d41c <z_sched_start+0x8c>)
   2d3d6:	f001 f887 	bl	2e4e8 <z_spin_unlock_valid>
   2d3da:	b968      	cbnz	r0, 2d3f8 <z_sched_start+0x68>
   2d3dc:	2384      	movs	r3, #132	; 0x84
   2d3de:	4a10      	ldr	r2, [pc, #64]	; (2d420 <z_sched_start+0x90>)
   2d3e0:	4913      	ldr	r1, [pc, #76]	; (2d430 <z_sched_start+0xa0>)
   2d3e2:	4811      	ldr	r0, [pc, #68]	; (2d428 <z_sched_start+0x98>)
   2d3e4:	f006 f8e5 	bl	335b2 <printk>
   2d3e8:	490c      	ldr	r1, [pc, #48]	; (2d41c <z_sched_start+0x8c>)
   2d3ea:	4812      	ldr	r0, [pc, #72]	; (2d434 <z_sched_start+0xa4>)
   2d3ec:	f006 f8e1 	bl	335b2 <printk>
   2d3f0:	2184      	movs	r1, #132	; 0x84
   2d3f2:	480b      	ldr	r0, [pc, #44]	; (2d420 <z_sched_start+0x90>)
   2d3f4:	f006 fbde 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   2d3f8:	f385 8811 	msr	BASEPRI, r5
   2d3fc:	f3bf 8f6f 	isb	sy
}
   2d400:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2d402:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   2d406:	4620      	mov	r0, r4
   2d408:	7363      	strb	r3, [r4, #13]
   2d40a:	f7ff fecb 	bl	2d1a4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   2d40e:	4629      	mov	r1, r5
}
   2d410:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   2d414:	4801      	ldr	r0, [pc, #4]	; (2d41c <z_sched_start+0x8c>)
   2d416:	f7ff bced 	b.w	2cdf4 <z_reschedule>
   2d41a:	bf00      	nop
   2d41c:	20027514 	.word	0x20027514
   2d420:	0003c745 	.word	0x0003c745
   2d424:	0003c76b 	.word	0x0003c76b
   2d428:	0003b773 	.word	0x0003b773
   2d42c:	0003c780 	.word	0x0003c780
   2d430:	0003c798 	.word	0x0003c798
   2d434:	0003c7af 	.word	0x0003c7af

0002d438 <z_move_thread_to_end_of_prio_q>:
{
   2d438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d43a:	4604      	mov	r4, r0
	__asm__ volatile(
   2d43c:	f04f 0320 	mov.w	r3, #32
   2d440:	f3ef 8511 	mrs	r5, BASEPRI
   2d444:	f383 8811 	msr	BASEPRI, r3
   2d448:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2d44c:	4835      	ldr	r0, [pc, #212]	; (2d524 <z_move_thread_to_end_of_prio_q+0xec>)
   2d44e:	f001 f83d 	bl	2e4cc <z_spin_lock_valid>
   2d452:	b968      	cbnz	r0, 2d470 <z_move_thread_to_end_of_prio_q+0x38>
   2d454:	235c      	movs	r3, #92	; 0x5c
   2d456:	4a34      	ldr	r2, [pc, #208]	; (2d528 <z_move_thread_to_end_of_prio_q+0xf0>)
   2d458:	4934      	ldr	r1, [pc, #208]	; (2d52c <z_move_thread_to_end_of_prio_q+0xf4>)
   2d45a:	4835      	ldr	r0, [pc, #212]	; (2d530 <z_move_thread_to_end_of_prio_q+0xf8>)
   2d45c:	f006 f8a9 	bl	335b2 <printk>
   2d460:	4930      	ldr	r1, [pc, #192]	; (2d524 <z_move_thread_to_end_of_prio_q+0xec>)
   2d462:	4834      	ldr	r0, [pc, #208]	; (2d534 <z_move_thread_to_end_of_prio_q+0xfc>)
   2d464:	f006 f8a5 	bl	335b2 <printk>
   2d468:	215c      	movs	r1, #92	; 0x5c
   2d46a:	482f      	ldr	r0, [pc, #188]	; (2d528 <z_move_thread_to_end_of_prio_q+0xf0>)
   2d46c:	f006 fba2 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2d470:	482c      	ldr	r0, [pc, #176]	; (2d524 <z_move_thread_to_end_of_prio_q+0xec>)
   2d472:	f001 f849 	bl	2e508 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   2d476:	f994 300d 	ldrsb.w	r3, [r4, #13]
   2d47a:	2b00      	cmp	r3, #0
   2d47c:	da03      	bge.n	2d486 <z_move_thread_to_end_of_prio_q+0x4e>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   2d47e:	4621      	mov	r1, r4
   2d480:	482d      	ldr	r0, [pc, #180]	; (2d538 <z_move_thread_to_end_of_prio_q+0x100>)
   2d482:	f7ff fd6b 	bl	2cf5c <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2d486:	4b2d      	ldr	r3, [pc, #180]	; (2d53c <z_move_thread_to_end_of_prio_q+0x104>)
   2d488:	429c      	cmp	r4, r3
   2d48a:	d10b      	bne.n	2d4a4 <z_move_thread_to_end_of_prio_q+0x6c>
   2d48c:	492c      	ldr	r1, [pc, #176]	; (2d540 <z_move_thread_to_end_of_prio_q+0x108>)
   2d48e:	4828      	ldr	r0, [pc, #160]	; (2d530 <z_move_thread_to_end_of_prio_q+0xf8>)
   2d490:	f240 3355 	movw	r3, #853	; 0x355
   2d494:	4a2b      	ldr	r2, [pc, #172]	; (2d544 <z_move_thread_to_end_of_prio_q+0x10c>)
   2d496:	f006 f88c 	bl	335b2 <printk>
   2d49a:	f240 3155 	movw	r1, #853	; 0x355
   2d49e:	4829      	ldr	r0, [pc, #164]	; (2d544 <z_move_thread_to_end_of_prio_q+0x10c>)
   2d4a0:	f006 fb88 	bl	33bb4 <assert_post_action>
	return list->head == list;
   2d4a4:	4a28      	ldr	r2, [pc, #160]	; (2d548 <z_move_thread_to_end_of_prio_q+0x110>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2d4a6:	f102 0128 	add.w	r1, r2, #40	; 0x28
   2d4aa:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   2d4ae:	428b      	cmp	r3, r1
   2d4b0:	d032      	beq.n	2d518 <z_move_thread_to_end_of_prio_q+0xe0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2d4b2:	2b00      	cmp	r3, #0
   2d4b4:	d030      	beq.n	2d518 <z_move_thread_to_end_of_prio_q+0xe0>
	if (thread_1->base.prio < thread_2->base.prio) {
   2d4b6:	f994 600e 	ldrsb.w	r6, [r4, #14]
   2d4ba:	f993 700e 	ldrsb.w	r7, [r3, #14]
   2d4be:	42b7      	cmp	r7, r6
   2d4c0:	dd25      	ble.n	2d50e <z_move_thread_to_end_of_prio_q+0xd6>
	node->prev = successor->prev;
   2d4c2:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   2d4c4:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   2d4c8:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   2d4ca:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   2d4cc:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
   2d4ce:	6890      	ldr	r0, [r2, #8]
   2d4d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2d4d4:	7363      	strb	r3, [r4, #13]
   2d4d6:	1b03      	subs	r3, r0, r4
   2d4d8:	4258      	negs	r0, r3
   2d4da:	4158      	adcs	r0, r3
   2d4dc:	f7ff fdc2 	bl	2d064 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2d4e0:	4810      	ldr	r0, [pc, #64]	; (2d524 <z_move_thread_to_end_of_prio_q+0xec>)
   2d4e2:	f001 f801 	bl	2e4e8 <z_spin_unlock_valid>
   2d4e6:	b968      	cbnz	r0, 2d504 <z_move_thread_to_end_of_prio_q+0xcc>
   2d4e8:	2384      	movs	r3, #132	; 0x84
   2d4ea:	4a0f      	ldr	r2, [pc, #60]	; (2d528 <z_move_thread_to_end_of_prio_q+0xf0>)
   2d4ec:	4917      	ldr	r1, [pc, #92]	; (2d54c <z_move_thread_to_end_of_prio_q+0x114>)
   2d4ee:	4810      	ldr	r0, [pc, #64]	; (2d530 <z_move_thread_to_end_of_prio_q+0xf8>)
   2d4f0:	f006 f85f 	bl	335b2 <printk>
   2d4f4:	490b      	ldr	r1, [pc, #44]	; (2d524 <z_move_thread_to_end_of_prio_q+0xec>)
   2d4f6:	4816      	ldr	r0, [pc, #88]	; (2d550 <z_move_thread_to_end_of_prio_q+0x118>)
   2d4f8:	f006 f85b 	bl	335b2 <printk>
   2d4fc:	2184      	movs	r1, #132	; 0x84
   2d4fe:	480a      	ldr	r0, [pc, #40]	; (2d528 <z_move_thread_to_end_of_prio_q+0xf0>)
   2d500:	f006 fb58 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   2d504:	f385 8811 	msr	BASEPRI, r5
   2d508:	f3bf 8f6f 	isb	sy
}
   2d50c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   2d50e:	4298      	cmp	r0, r3
   2d510:	d002      	beq.n	2d518 <z_move_thread_to_end_of_prio_q+0xe0>
   2d512:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2d514:	2b00      	cmp	r3, #0
   2d516:	d1d0      	bne.n	2d4ba <z_move_thread_to_end_of_prio_q+0x82>
	node->prev = list->tail;
   2d518:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   2d51c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   2d51e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2d520:	62d4      	str	r4, [r2, #44]	; 0x2c
   2d522:	e7d3      	b.n	2d4cc <z_move_thread_to_end_of_prio_q+0x94>
   2d524:	20027514 	.word	0x20027514
   2d528:	0003c745 	.word	0x0003c745
   2d52c:	0003c76b 	.word	0x0003c76b
   2d530:	0003b773 	.word	0x0003b773
   2d534:	0003c780 	.word	0x0003c780
   2d538:	20027504 	.word	0x20027504
   2d53c:	20022b04 	.word	0x20022b04
   2d540:	0003fda7 	.word	0x0003fda7
   2d544:	0003fd31 	.word	0x0003fd31
   2d548:	200274dc 	.word	0x200274dc
   2d54c:	0003c798 	.word	0x0003c798
   2d550:	0003c7af 	.word	0x0003c7af

0002d554 <z_time_slice>:
	if (pending_current == _current) {
   2d554:	4a15      	ldr	r2, [pc, #84]	; (2d5ac <z_time_slice+0x58>)
   2d556:	4916      	ldr	r1, [pc, #88]	; (2d5b0 <z_time_slice+0x5c>)
{
   2d558:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   2d55a:	680c      	ldr	r4, [r1, #0]
   2d55c:	6893      	ldr	r3, [r2, #8]
   2d55e:	42a3      	cmp	r3, r4
   2d560:	4614      	mov	r4, r2
   2d562:	d103      	bne.n	2d56c <z_time_slice+0x18>
}
   2d564:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   2d568:	f7ff bb32 	b.w	2cbd0 <z_reset_time_slice>
	pending_current = NULL;
   2d56c:	2500      	movs	r5, #0
   2d56e:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
   2d570:	4910      	ldr	r1, [pc, #64]	; (2d5b4 <z_time_slice+0x60>)
   2d572:	6809      	ldr	r1, [r1, #0]
   2d574:	b1b9      	cbz	r1, 2d5a6 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   2d576:	89d9      	ldrh	r1, [r3, #14]
   2d578:	297f      	cmp	r1, #127	; 0x7f
   2d57a:	d814      	bhi.n	2d5a6 <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   2d57c:	490e      	ldr	r1, [pc, #56]	; (2d5b8 <z_time_slice+0x64>)
   2d57e:	f993 500e 	ldrsb.w	r5, [r3, #14]
   2d582:	6809      	ldr	r1, [r1, #0]
   2d584:	428d      	cmp	r5, r1
   2d586:	db0e      	blt.n	2d5a6 <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
   2d588:	490c      	ldr	r1, [pc, #48]	; (2d5bc <z_time_slice+0x68>)
   2d58a:	428b      	cmp	r3, r1
   2d58c:	d00b      	beq.n	2d5a6 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   2d58e:	6999      	ldr	r1, [r3, #24]
   2d590:	b949      	cbnz	r1, 2d5a6 <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   2d592:	6911      	ldr	r1, [r2, #16]
   2d594:	4281      	cmp	r1, r0
   2d596:	dc03      	bgt.n	2d5a0 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   2d598:	4618      	mov	r0, r3
   2d59a:	f7ff ff4d 	bl	2d438 <z_move_thread_to_end_of_prio_q>
   2d59e:	e7e1      	b.n	2d564 <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
   2d5a0:	1a09      	subs	r1, r1, r0
   2d5a2:	6111      	str	r1, [r2, #16]
}
   2d5a4:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   2d5a6:	2300      	movs	r3, #0
   2d5a8:	6123      	str	r3, [r4, #16]
   2d5aa:	e7fb      	b.n	2d5a4 <z_time_slice+0x50>
   2d5ac:	200274dc 	.word	0x200274dc
   2d5b0:	20027510 	.word	0x20027510
   2d5b4:	2002751c 	.word	0x2002751c
   2d5b8:	20027518 	.word	0x20027518
   2d5bc:	20022b04 	.word	0x20022b04

0002d5c0 <z_impl_k_thread_suspend>:
{
   2d5c0:	b570      	push	{r4, r5, r6, lr}
   2d5c2:	4604      	mov	r4, r0
   2d5c4:	3018      	adds	r0, #24
   2d5c6:	f001 f9ad 	bl	2e924 <z_abort_timeout>
	__asm__ volatile(
   2d5ca:	f04f 0320 	mov.w	r3, #32
   2d5ce:	f3ef 8611 	mrs	r6, BASEPRI
   2d5d2:	f383 8811 	msr	BASEPRI, r3
   2d5d6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2d5da:	4825      	ldr	r0, [pc, #148]	; (2d670 <z_impl_k_thread_suspend+0xb0>)
   2d5dc:	f000 ff76 	bl	2e4cc <z_spin_lock_valid>
   2d5e0:	b968      	cbnz	r0, 2d5fe <z_impl_k_thread_suspend+0x3e>
   2d5e2:	235c      	movs	r3, #92	; 0x5c
   2d5e4:	4a23      	ldr	r2, [pc, #140]	; (2d674 <z_impl_k_thread_suspend+0xb4>)
   2d5e6:	4924      	ldr	r1, [pc, #144]	; (2d678 <z_impl_k_thread_suspend+0xb8>)
   2d5e8:	4824      	ldr	r0, [pc, #144]	; (2d67c <z_impl_k_thread_suspend+0xbc>)
   2d5ea:	f005 ffe2 	bl	335b2 <printk>
   2d5ee:	4920      	ldr	r1, [pc, #128]	; (2d670 <z_impl_k_thread_suspend+0xb0>)
   2d5f0:	4823      	ldr	r0, [pc, #140]	; (2d680 <z_impl_k_thread_suspend+0xc0>)
   2d5f2:	f005 ffde 	bl	335b2 <printk>
   2d5f6:	215c      	movs	r1, #92	; 0x5c
   2d5f8:	481e      	ldr	r0, [pc, #120]	; (2d674 <z_impl_k_thread_suspend+0xb4>)
   2d5fa:	f006 fadb 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2d5fe:	481c      	ldr	r0, [pc, #112]	; (2d670 <z_impl_k_thread_suspend+0xb0>)
   2d600:	f000 ff82 	bl	2e508 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   2d604:	f994 300d 	ldrsb.w	r3, [r4, #13]
   2d608:	2b00      	cmp	r3, #0
   2d60a:	da07      	bge.n	2d61c <z_impl_k_thread_suspend+0x5c>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   2d60c:	4621      	mov	r1, r4
   2d60e:	481d      	ldr	r0, [pc, #116]	; (2d684 <z_impl_k_thread_suspend+0xc4>)
   2d610:	f7ff fca4 	bl	2cf5c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   2d614:	7b63      	ldrb	r3, [r4, #13]
   2d616:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2d61a:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   2d61c:	4d1a      	ldr	r5, [pc, #104]	; (2d688 <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2d61e:	7b63      	ldrb	r3, [r4, #13]
   2d620:	68a8      	ldr	r0, [r5, #8]
   2d622:	f043 0310 	orr.w	r3, r3, #16
   2d626:	7363      	strb	r3, [r4, #13]
   2d628:	1b03      	subs	r3, r0, r4
   2d62a:	4258      	negs	r0, r3
   2d62c:	4158      	adcs	r0, r3
   2d62e:	f7ff fd19 	bl	2d064 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2d632:	480f      	ldr	r0, [pc, #60]	; (2d670 <z_impl_k_thread_suspend+0xb0>)
   2d634:	f000 ff58 	bl	2e4e8 <z_spin_unlock_valid>
   2d638:	b968      	cbnz	r0, 2d656 <z_impl_k_thread_suspend+0x96>
   2d63a:	2384      	movs	r3, #132	; 0x84
   2d63c:	4a0d      	ldr	r2, [pc, #52]	; (2d674 <z_impl_k_thread_suspend+0xb4>)
   2d63e:	4913      	ldr	r1, [pc, #76]	; (2d68c <z_impl_k_thread_suspend+0xcc>)
   2d640:	480e      	ldr	r0, [pc, #56]	; (2d67c <z_impl_k_thread_suspend+0xbc>)
   2d642:	f005 ffb6 	bl	335b2 <printk>
   2d646:	490a      	ldr	r1, [pc, #40]	; (2d670 <z_impl_k_thread_suspend+0xb0>)
   2d648:	4811      	ldr	r0, [pc, #68]	; (2d690 <z_impl_k_thread_suspend+0xd0>)
   2d64a:	f005 ffb2 	bl	335b2 <printk>
   2d64e:	2184      	movs	r1, #132	; 0x84
   2d650:	4808      	ldr	r0, [pc, #32]	; (2d674 <z_impl_k_thread_suspend+0xb4>)
   2d652:	f006 faaf 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   2d656:	f386 8811 	msr	BASEPRI, r6
   2d65a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   2d65e:	68ab      	ldr	r3, [r5, #8]
   2d660:	42a3      	cmp	r3, r4
   2d662:	d103      	bne.n	2d66c <z_impl_k_thread_suspend+0xac>
}
   2d664:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   2d668:	f00b bb30 	b.w	38ccc <z_reschedule_unlocked>
}
   2d66c:	bd70      	pop	{r4, r5, r6, pc}
   2d66e:	bf00      	nop
   2d670:	20027514 	.word	0x20027514
   2d674:	0003c745 	.word	0x0003c745
   2d678:	0003c76b 	.word	0x0003c76b
   2d67c:	0003b773 	.word	0x0003b773
   2d680:	0003c780 	.word	0x0003c780
   2d684:	20027504 	.word	0x20027504
   2d688:	200274dc 	.word	0x200274dc
   2d68c:	0003c798 	.word	0x0003c798
   2d690:	0003c7af 	.word	0x0003c7af

0002d694 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   2d694:	6d83      	ldr	r3, [r0, #88]	; 0x58
{
   2d696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d69a:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   2d69c:	b103      	cbz	r3, 2d6a0 <z_thread_single_abort+0xc>
		thread->fn_abort();
   2d69e:	4798      	blx	r3
   2d6a0:	f104 0018 	add.w	r0, r4, #24
   2d6a4:	f001 f93e 	bl	2e924 <z_abort_timeout>
	__asm__ volatile(
   2d6a8:	f04f 0320 	mov.w	r3, #32
   2d6ac:	f3ef 8611 	mrs	r6, BASEPRI
   2d6b0:	f383 8811 	msr	BASEPRI, r3
   2d6b4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2d6b8:	4839      	ldr	r0, [pc, #228]	; (2d7a0 <z_thread_single_abort+0x10c>)
   2d6ba:	f000 ff07 	bl	2e4cc <z_spin_lock_valid>
   2d6be:	b968      	cbnz	r0, 2d6dc <z_thread_single_abort+0x48>
   2d6c0:	235c      	movs	r3, #92	; 0x5c
   2d6c2:	4a38      	ldr	r2, [pc, #224]	; (2d7a4 <z_thread_single_abort+0x110>)
   2d6c4:	4938      	ldr	r1, [pc, #224]	; (2d7a8 <z_thread_single_abort+0x114>)
   2d6c6:	4839      	ldr	r0, [pc, #228]	; (2d7ac <z_thread_single_abort+0x118>)
   2d6c8:	f005 ff73 	bl	335b2 <printk>
   2d6cc:	4934      	ldr	r1, [pc, #208]	; (2d7a0 <z_thread_single_abort+0x10c>)
   2d6ce:	4838      	ldr	r0, [pc, #224]	; (2d7b0 <z_thread_single_abort+0x11c>)
   2d6d0:	f005 ff6f 	bl	335b2 <printk>
   2d6d4:	215c      	movs	r1, #92	; 0x5c
   2d6d6:	4833      	ldr	r0, [pc, #204]	; (2d7a4 <z_thread_single_abort+0x110>)
   2d6d8:	f006 fa6c 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2d6dc:	4830      	ldr	r0, [pc, #192]	; (2d7a0 <z_thread_single_abort+0x10c>)
   2d6de:	f000 ff13 	bl	2e508 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2d6e2:	7b63      	ldrb	r3, [r4, #13]
   2d6e4:	06d8      	lsls	r0, r3, #27
   2d6e6:	d136      	bne.n	2d756 <z_thread_single_abort+0xc2>
		if (z_is_thread_ready(thread)) {
   2d6e8:	69a2      	ldr	r2, [r4, #24]
   2d6ea:	2a00      	cmp	r2, #0
   2d6ec:	d133      	bne.n	2d756 <z_thread_single_abort+0xc2>
			if (z_is_thread_queued(thread)) {
   2d6ee:	0619      	lsls	r1, r3, #24
   2d6f0:	d507      	bpl.n	2d702 <z_thread_single_abort+0x6e>
				_priq_run_remove(&_kernel.ready_q.runq,
   2d6f2:	4621      	mov	r1, r4
   2d6f4:	482f      	ldr	r0, [pc, #188]	; (2d7b4 <z_thread_single_abort+0x120>)
   2d6f6:	f7ff fc31 	bl	2cf5c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   2d6fa:	7b63      	ldrb	r3, [r4, #13]
   2d6fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2d700:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   2d702:	4b2d      	ldr	r3, [pc, #180]	; (2d7b8 <z_thread_single_abort+0x124>)
   2d704:	6898      	ldr	r0, [r3, #8]
   2d706:	1b02      	subs	r2, r0, r4
   2d708:	4250      	negs	r0, r2
   2d70a:	4150      	adcs	r0, r2
   2d70c:	f7ff fcaa 	bl	2d064 <update_cache>
			waiter->base.pended_on = NULL;
   2d710:	2700      	movs	r7, #0
		thread->base.thread_state |= mask;
   2d712:	7b63      	ldrb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   2d714:	f104 0828 	add.w	r8, r4, #40	; 0x28
   2d718:	f043 0308 	orr.w	r3, r3, #8
   2d71c:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   2d71e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2d720:	4545      	cmp	r5, r8
   2d722:	d000      	beq.n	2d726 <z_thread_single_abort+0x92>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   2d724:	bb3d      	cbnz	r5, 2d776 <z_thread_single_abort+0xe2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2d726:	481e      	ldr	r0, [pc, #120]	; (2d7a0 <z_thread_single_abort+0x10c>)
   2d728:	f000 fede 	bl	2e4e8 <z_spin_unlock_valid>
   2d72c:	b968      	cbnz	r0, 2d74a <z_thread_single_abort+0xb6>
   2d72e:	2384      	movs	r3, #132	; 0x84
   2d730:	4a1c      	ldr	r2, [pc, #112]	; (2d7a4 <z_thread_single_abort+0x110>)
   2d732:	4922      	ldr	r1, [pc, #136]	; (2d7bc <z_thread_single_abort+0x128>)
   2d734:	481d      	ldr	r0, [pc, #116]	; (2d7ac <z_thread_single_abort+0x118>)
   2d736:	f005 ff3c 	bl	335b2 <printk>
   2d73a:	4919      	ldr	r1, [pc, #100]	; (2d7a0 <z_thread_single_abort+0x10c>)
   2d73c:	4820      	ldr	r0, [pc, #128]	; (2d7c0 <z_thread_single_abort+0x12c>)
   2d73e:	f005 ff38 	bl	335b2 <printk>
   2d742:	2184      	movs	r1, #132	; 0x84
   2d744:	4817      	ldr	r0, [pc, #92]	; (2d7a4 <z_thread_single_abort+0x110>)
   2d746:	f006 fa35 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   2d74a:	f386 8811 	msr	BASEPRI, r6
   2d74e:	f3bf 8f6f 	isb	sy
}
   2d752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
   2d756:	079b      	lsls	r3, r3, #30
   2d758:	d5da      	bpl.n	2d710 <z_thread_single_abort+0x7c>
				_priq_wait_remove(&pended_on(thread)->waitq,
   2d75a:	f104 0008 	add.w	r0, r4, #8
   2d75e:	f7ff fa1f 	bl	2cba0 <pended_on.isra.18>
   2d762:	4621      	mov	r1, r4
   2d764:	f7ff fbfa 	bl	2cf5c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2d768:	7b63      	ldrb	r3, [r4, #13]
   2d76a:	f023 0302 	bic.w	r3, r3, #2
   2d76e:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   2d770:	2300      	movs	r3, #0
   2d772:	60a3      	str	r3, [r4, #8]
   2d774:	e7cc      	b.n	2d710 <z_thread_single_abort+0x7c>
   2d776:	f105 0018 	add.w	r0, r5, #24
   2d77a:	f001 f8d3 	bl	2e924 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   2d77e:	f105 0008 	add.w	r0, r5, #8
   2d782:	f7ff fa0d 	bl	2cba0 <pended_on.isra.18>
   2d786:	4629      	mov	r1, r5
   2d788:	f7ff fbe8 	bl	2cf5c <z_priq_dumb_remove>
   2d78c:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   2d78e:	60af      	str	r7, [r5, #8]
   2d790:	f023 0302 	bic.w	r3, r3, #2
   2d794:	736b      	strb	r3, [r5, #13]
   2d796:	672f      	str	r7, [r5, #112]	; 0x70
			ready_thread(waiter);
   2d798:	4628      	mov	r0, r5
   2d79a:	f7ff fd03 	bl	2d1a4 <ready_thread>
   2d79e:	e7be      	b.n	2d71e <z_thread_single_abort+0x8a>
   2d7a0:	20027514 	.word	0x20027514
   2d7a4:	0003c745 	.word	0x0003c745
   2d7a8:	0003c76b 	.word	0x0003c76b
   2d7ac:	0003b773 	.word	0x0003b773
   2d7b0:	0003c780 	.word	0x0003c780
   2d7b4:	20027504 	.word	0x20027504
   2d7b8:	200274dc 	.word	0x200274dc
   2d7bc:	0003c798 	.word	0x0003c798
   2d7c0:	0003c7af 	.word	0x0003c7af

0002d7c4 <unready_thread>:
{
   2d7c4:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   2d7c6:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   2d7ca:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   2d7cc:	2b00      	cmp	r3, #0
   2d7ce:	da07      	bge.n	2d7e0 <unready_thread+0x1c>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   2d7d0:	4601      	mov	r1, r0
   2d7d2:	4808      	ldr	r0, [pc, #32]	; (2d7f4 <unready_thread+0x30>)
   2d7d4:	f7ff fbc2 	bl	2cf5c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   2d7d8:	7b63      	ldrb	r3, [r4, #13]
   2d7da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2d7de:	7363      	strb	r3, [r4, #13]
	update_cache(thread == _current);
   2d7e0:	4b05      	ldr	r3, [pc, #20]	; (2d7f8 <unready_thread+0x34>)
   2d7e2:	6898      	ldr	r0, [r3, #8]
   2d7e4:	1b03      	subs	r3, r0, r4
   2d7e6:	4258      	negs	r0, r3
   2d7e8:	4158      	adcs	r0, r3
}
   2d7ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   2d7ee:	f7ff bc39 	b.w	2d064 <update_cache>
   2d7f2:	bf00      	nop
   2d7f4:	20027504 	.word	0x20027504
   2d7f8:	200274dc 	.word	0x200274dc

0002d7fc <z_remove_thread_from_ready_q>:
{
   2d7fc:	b538      	push	{r3, r4, r5, lr}
   2d7fe:	4605      	mov	r5, r0
	__asm__ volatile(
   2d800:	f04f 0320 	mov.w	r3, #32
   2d804:	f3ef 8411 	mrs	r4, BASEPRI
   2d808:	f383 8811 	msr	BASEPRI, r3
   2d80c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2d810:	4817      	ldr	r0, [pc, #92]	; (2d870 <z_remove_thread_from_ready_q+0x74>)
   2d812:	f000 fe5b 	bl	2e4cc <z_spin_lock_valid>
   2d816:	b968      	cbnz	r0, 2d834 <z_remove_thread_from_ready_q+0x38>
   2d818:	235c      	movs	r3, #92	; 0x5c
   2d81a:	4a16      	ldr	r2, [pc, #88]	; (2d874 <z_remove_thread_from_ready_q+0x78>)
   2d81c:	4916      	ldr	r1, [pc, #88]	; (2d878 <z_remove_thread_from_ready_q+0x7c>)
   2d81e:	4817      	ldr	r0, [pc, #92]	; (2d87c <z_remove_thread_from_ready_q+0x80>)
   2d820:	f005 fec7 	bl	335b2 <printk>
   2d824:	4912      	ldr	r1, [pc, #72]	; (2d870 <z_remove_thread_from_ready_q+0x74>)
   2d826:	4816      	ldr	r0, [pc, #88]	; (2d880 <z_remove_thread_from_ready_q+0x84>)
   2d828:	f005 fec3 	bl	335b2 <printk>
   2d82c:	215c      	movs	r1, #92	; 0x5c
   2d82e:	4811      	ldr	r0, [pc, #68]	; (2d874 <z_remove_thread_from_ready_q+0x78>)
   2d830:	f006 f9c0 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2d834:	480e      	ldr	r0, [pc, #56]	; (2d870 <z_remove_thread_from_ready_q+0x74>)
   2d836:	f000 fe67 	bl	2e508 <z_spin_lock_set_owner>
		unready_thread(thread);
   2d83a:	4628      	mov	r0, r5
   2d83c:	f7ff ffc2 	bl	2d7c4 <unready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2d840:	480b      	ldr	r0, [pc, #44]	; (2d870 <z_remove_thread_from_ready_q+0x74>)
   2d842:	f000 fe51 	bl	2e4e8 <z_spin_unlock_valid>
   2d846:	b968      	cbnz	r0, 2d864 <z_remove_thread_from_ready_q+0x68>
   2d848:	2384      	movs	r3, #132	; 0x84
   2d84a:	4a0a      	ldr	r2, [pc, #40]	; (2d874 <z_remove_thread_from_ready_q+0x78>)
   2d84c:	490d      	ldr	r1, [pc, #52]	; (2d884 <z_remove_thread_from_ready_q+0x88>)
   2d84e:	480b      	ldr	r0, [pc, #44]	; (2d87c <z_remove_thread_from_ready_q+0x80>)
   2d850:	f005 feaf 	bl	335b2 <printk>
   2d854:	4906      	ldr	r1, [pc, #24]	; (2d870 <z_remove_thread_from_ready_q+0x74>)
   2d856:	480c      	ldr	r0, [pc, #48]	; (2d888 <z_remove_thread_from_ready_q+0x8c>)
   2d858:	f005 feab 	bl	335b2 <printk>
   2d85c:	2184      	movs	r1, #132	; 0x84
   2d85e:	4805      	ldr	r0, [pc, #20]	; (2d874 <z_remove_thread_from_ready_q+0x78>)
   2d860:	f006 f9a8 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   2d864:	f384 8811 	msr	BASEPRI, r4
   2d868:	f3bf 8f6f 	isb	sy
}
   2d86c:	bd38      	pop	{r3, r4, r5, pc}
   2d86e:	bf00      	nop
   2d870:	20027514 	.word	0x20027514
   2d874:	0003c745 	.word	0x0003c745
   2d878:	0003c76b 	.word	0x0003c76b
   2d87c:	0003b773 	.word	0x0003b773
   2d880:	0003c780 	.word	0x0003c780
   2d884:	0003c798 	.word	0x0003c798
   2d888:	0003c7af 	.word	0x0003c7af

0002d88c <add_to_waitq_locked>:
{
   2d88c:	b538      	push	{r3, r4, r5, lr}
   2d88e:	4604      	mov	r4, r0
   2d890:	460d      	mov	r5, r1
	unready_thread(thread);
   2d892:	f7ff ff97 	bl	2d7c4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2d896:	7b63      	ldrb	r3, [r4, #13]
   2d898:	f043 0302 	orr.w	r3, r3, #2
   2d89c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2d89e:	b1f5      	cbz	r5, 2d8de <add_to_waitq_locked+0x52>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2d8a0:	4b16      	ldr	r3, [pc, #88]	; (2d8fc <add_to_waitq_locked+0x70>)
		thread->base.pended_on = wait_q;
   2d8a2:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2d8a4:	429c      	cmp	r4, r3
   2d8a6:	d10b      	bne.n	2d8c0 <add_to_waitq_locked+0x34>
   2d8a8:	4915      	ldr	r1, [pc, #84]	; (2d900 <add_to_waitq_locked+0x74>)
   2d8aa:	4816      	ldr	r0, [pc, #88]	; (2d904 <add_to_waitq_locked+0x78>)
   2d8ac:	f240 3355 	movw	r3, #853	; 0x355
   2d8b0:	4a15      	ldr	r2, [pc, #84]	; (2d908 <add_to_waitq_locked+0x7c>)
   2d8b2:	f005 fe7e 	bl	335b2 <printk>
   2d8b6:	f240 3155 	movw	r1, #853	; 0x355
   2d8ba:	4813      	ldr	r0, [pc, #76]	; (2d908 <add_to_waitq_locked+0x7c>)
   2d8bc:	f006 f97a 	bl	33bb4 <assert_post_action>
	return list->head == list;
   2d8c0:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2d8c2:	429d      	cmp	r5, r3
   2d8c4:	d012      	beq.n	2d8ec <add_to_waitq_locked+0x60>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2d8c6:	b18b      	cbz	r3, 2d8ec <add_to_waitq_locked+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
   2d8c8:	f994 200e 	ldrsb.w	r2, [r4, #14]
   2d8cc:	f993 100e 	ldrsb.w	r1, [r3, #14]
   2d8d0:	4291      	cmp	r1, r2
   2d8d2:	dd05      	ble.n	2d8e0 <add_to_waitq_locked+0x54>
	node->prev = successor->prev;
   2d8d4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2d8d6:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   2d8da:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2d8dc:	605c      	str	r4, [r3, #4]
}
   2d8de:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   2d8e0:	6869      	ldr	r1, [r5, #4]
   2d8e2:	428b      	cmp	r3, r1
   2d8e4:	d002      	beq.n	2d8ec <add_to_waitq_locked+0x60>
   2d8e6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2d8e8:	2b00      	cmp	r3, #0
   2d8ea:	d1ef      	bne.n	2d8cc <add_to_waitq_locked+0x40>
	node->prev = list->tail;
   2d8ec:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   2d8ee:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   2d8f0:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   2d8f2:	686b      	ldr	r3, [r5, #4]
   2d8f4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2d8f6:	606c      	str	r4, [r5, #4]
}
   2d8f8:	e7f1      	b.n	2d8de <add_to_waitq_locked+0x52>
   2d8fa:	bf00      	nop
   2d8fc:	20022b04 	.word	0x20022b04
   2d900:	0003fda7 	.word	0x0003fda7
   2d904:	0003b773 	.word	0x0003b773
   2d908:	0003fd31 	.word	0x0003fd31

0002d90c <pend>:
{
   2d90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d90e:	4604      	mov	r4, r0
   2d910:	460f      	mov	r7, r1
   2d912:	4615      	mov	r5, r2
	__asm__ volatile(
   2d914:	f04f 0320 	mov.w	r3, #32
   2d918:	f3ef 8611 	mrs	r6, BASEPRI
   2d91c:	f383 8811 	msr	BASEPRI, r3
   2d920:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2d924:	4822      	ldr	r0, [pc, #136]	; (2d9b0 <pend+0xa4>)
   2d926:	f000 fdd1 	bl	2e4cc <z_spin_lock_valid>
   2d92a:	b968      	cbnz	r0, 2d948 <pend+0x3c>
   2d92c:	235c      	movs	r3, #92	; 0x5c
   2d92e:	4a21      	ldr	r2, [pc, #132]	; (2d9b4 <pend+0xa8>)
   2d930:	4921      	ldr	r1, [pc, #132]	; (2d9b8 <pend+0xac>)
   2d932:	4822      	ldr	r0, [pc, #136]	; (2d9bc <pend+0xb0>)
   2d934:	f005 fe3d 	bl	335b2 <printk>
   2d938:	491d      	ldr	r1, [pc, #116]	; (2d9b0 <pend+0xa4>)
   2d93a:	4821      	ldr	r0, [pc, #132]	; (2d9c0 <pend+0xb4>)
   2d93c:	f005 fe39 	bl	335b2 <printk>
   2d940:	215c      	movs	r1, #92	; 0x5c
   2d942:	481c      	ldr	r0, [pc, #112]	; (2d9b4 <pend+0xa8>)
   2d944:	f006 f936 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2d948:	4819      	ldr	r0, [pc, #100]	; (2d9b0 <pend+0xa4>)
   2d94a:	f000 fddd 	bl	2e508 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   2d94e:	4620      	mov	r0, r4
   2d950:	4639      	mov	r1, r7
   2d952:	f7ff ff9b 	bl	2d88c <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2d956:	4816      	ldr	r0, [pc, #88]	; (2d9b0 <pend+0xa4>)
   2d958:	f000 fdc6 	bl	2e4e8 <z_spin_unlock_valid>
   2d95c:	b968      	cbnz	r0, 2d97a <pend+0x6e>
   2d95e:	2384      	movs	r3, #132	; 0x84
   2d960:	4a14      	ldr	r2, [pc, #80]	; (2d9b4 <pend+0xa8>)
   2d962:	4918      	ldr	r1, [pc, #96]	; (2d9c4 <pend+0xb8>)
   2d964:	4815      	ldr	r0, [pc, #84]	; (2d9bc <pend+0xb0>)
   2d966:	f005 fe24 	bl	335b2 <printk>
   2d96a:	4911      	ldr	r1, [pc, #68]	; (2d9b0 <pend+0xa4>)
   2d96c:	4816      	ldr	r0, [pc, #88]	; (2d9c8 <pend+0xbc>)
   2d96e:	f005 fe20 	bl	335b2 <printk>
   2d972:	2184      	movs	r1, #132	; 0x84
   2d974:	480f      	ldr	r0, [pc, #60]	; (2d9b4 <pend+0xa8>)
   2d976:	f006 f91d 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   2d97a:	f386 8811 	msr	BASEPRI, r6
   2d97e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2d982:	1c6b      	adds	r3, r5, #1
   2d984:	d013      	beq.n	2d9ae <pend+0xa2>
   2d986:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   2d98a:	f240 30e7 	movw	r0, #999	; 0x3e7
   2d98e:	2100      	movs	r1, #0
   2d990:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2d994:	2300      	movs	r3, #0
   2d996:	fbe6 0105 	umlal	r0, r1, r6, r5
   2d99a:	f7df fee9 	bl	d770 <__aeabi_uldivmod>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   2d99e:	490b      	ldr	r1, [pc, #44]	; (2d9cc <pend+0xc0>)
   2d9a0:	1c42      	adds	r2, r0, #1
   2d9a2:	f104 0018 	add.w	r0, r4, #24
}
   2d9a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2d9aa:	f000 bf13 	b.w	2e7d4 <z_add_timeout>
   2d9ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2d9b0:	20027514 	.word	0x20027514
   2d9b4:	0003c745 	.word	0x0003c745
   2d9b8:	0003c76b 	.word	0x0003c76b
   2d9bc:	0003b773 	.word	0x0003b773
   2d9c0:	0003c780 	.word	0x0003c780
   2d9c4:	0003c798 	.word	0x0003c798
   2d9c8:	0003c7af 	.word	0x0003c7af
   2d9cc:	0002d2c9 	.word	0x0002d2c9

0002d9d0 <z_pend_thread>:
	__ASSERT_NO_MSG(thread == _current || is_thread_dummy(thread));
   2d9d0:	4b0e      	ldr	r3, [pc, #56]	; (2da0c <z_pend_thread+0x3c>)
{
   2d9d2:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(thread == _current || is_thread_dummy(thread));
   2d9d4:	689b      	ldr	r3, [r3, #8]
{
   2d9d6:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread == _current || is_thread_dummy(thread));
   2d9d8:	4283      	cmp	r3, r0
{
   2d9da:	460d      	mov	r5, r1
   2d9dc:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(thread == _current || is_thread_dummy(thread));
   2d9de:	d00e      	beq.n	2d9fe <z_pend_thread+0x2e>
   2d9e0:	7b43      	ldrb	r3, [r0, #13]
   2d9e2:	07db      	lsls	r3, r3, #31
   2d9e4:	d40b      	bmi.n	2d9fe <z_pend_thread+0x2e>
   2d9e6:	490a      	ldr	r1, [pc, #40]	; (2da10 <z_pend_thread+0x40>)
   2d9e8:	480a      	ldr	r0, [pc, #40]	; (2da14 <z_pend_thread+0x44>)
   2d9ea:	f240 2361 	movw	r3, #609	; 0x261
   2d9ee:	4a0a      	ldr	r2, [pc, #40]	; (2da18 <z_pend_thread+0x48>)
   2d9f0:	f005 fddf 	bl	335b2 <printk>
   2d9f4:	f240 2161 	movw	r1, #609	; 0x261
   2d9f8:	4807      	ldr	r0, [pc, #28]	; (2da18 <z_pend_thread+0x48>)
   2d9fa:	f006 f8db 	bl	33bb4 <assert_post_action>
	pend(thread, wait_q, timeout);
   2d9fe:	4632      	mov	r2, r6
   2da00:	4629      	mov	r1, r5
   2da02:	4620      	mov	r0, r4
}
   2da04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	pend(thread, wait_q, timeout);
   2da08:	f7ff bf80 	b.w	2d90c <pend>
   2da0c:	200274dc 	.word	0x200274dc
   2da10:	0003fd6a 	.word	0x0003fd6a
   2da14:	0003b773 	.word	0x0003b773
   2da18:	0003fd31 	.word	0x0003fd31

0002da1c <z_pend_curr>:
{
   2da1c:	b538      	push	{r3, r4, r5, lr}
   2da1e:	4604      	mov	r4, r0
   2da20:	460d      	mov	r5, r1
   2da22:	4611      	mov	r1, r2
	pending_current = _current;
   2da24:	4a0e      	ldr	r2, [pc, #56]	; (2da60 <z_pend_curr+0x44>)
   2da26:	6890      	ldr	r0, [r2, #8]
   2da28:	4a0e      	ldr	r2, [pc, #56]	; (2da64 <z_pend_curr+0x48>)
   2da2a:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
   2da2c:	461a      	mov	r2, r3
   2da2e:	f7ff ff6d 	bl	2d90c <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2da32:	4620      	mov	r0, r4
   2da34:	f000 fd58 	bl	2e4e8 <z_spin_unlock_valid>
   2da38:	b968      	cbnz	r0, 2da56 <z_pend_curr+0x3a>
   2da3a:	239b      	movs	r3, #155	; 0x9b
   2da3c:	4a0a      	ldr	r2, [pc, #40]	; (2da68 <z_pend_curr+0x4c>)
   2da3e:	490b      	ldr	r1, [pc, #44]	; (2da6c <z_pend_curr+0x50>)
   2da40:	480b      	ldr	r0, [pc, #44]	; (2da70 <z_pend_curr+0x54>)
   2da42:	f005 fdb6 	bl	335b2 <printk>
   2da46:	4621      	mov	r1, r4
   2da48:	480a      	ldr	r0, [pc, #40]	; (2da74 <z_pend_curr+0x58>)
   2da4a:	f005 fdb2 	bl	335b2 <printk>
   2da4e:	219b      	movs	r1, #155	; 0x9b
   2da50:	4805      	ldr	r0, [pc, #20]	; (2da68 <z_pend_curr+0x4c>)
   2da52:	f006 f8af 	bl	33bb4 <assert_post_action>
   2da56:	4628      	mov	r0, r5
}
   2da58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2da5c:	f7ed b83c 	b.w	1aad8 <arch_swap>
   2da60:	200274dc 	.word	0x200274dc
   2da64:	20027510 	.word	0x20027510
   2da68:	0003c745 	.word	0x0003c745
   2da6c:	0003c798 	.word	0x0003c798
   2da70:	0003b773 	.word	0x0003b773
   2da74:	0003c7af 	.word	0x0003c7af

0002da78 <z_set_prio>:
{
   2da78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2da7a:	4604      	mov	r4, r0
   2da7c:	460d      	mov	r5, r1
	__asm__ volatile(
   2da7e:	f04f 0320 	mov.w	r3, #32
   2da82:	f3ef 8611 	mrs	r6, BASEPRI
   2da86:	f383 8811 	msr	BASEPRI, r3
   2da8a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2da8e:	4836      	ldr	r0, [pc, #216]	; (2db68 <z_set_prio+0xf0>)
   2da90:	f000 fd1c 	bl	2e4cc <z_spin_lock_valid>
   2da94:	b968      	cbnz	r0, 2dab2 <z_set_prio+0x3a>
   2da96:	235c      	movs	r3, #92	; 0x5c
   2da98:	4a34      	ldr	r2, [pc, #208]	; (2db6c <z_set_prio+0xf4>)
   2da9a:	4935      	ldr	r1, [pc, #212]	; (2db70 <z_set_prio+0xf8>)
   2da9c:	4835      	ldr	r0, [pc, #212]	; (2db74 <z_set_prio+0xfc>)
   2da9e:	f005 fd88 	bl	335b2 <printk>
   2daa2:	4931      	ldr	r1, [pc, #196]	; (2db68 <z_set_prio+0xf0>)
   2daa4:	4834      	ldr	r0, [pc, #208]	; (2db78 <z_set_prio+0x100>)
   2daa6:	f005 fd84 	bl	335b2 <printk>
   2daaa:	215c      	movs	r1, #92	; 0x5c
   2daac:	482f      	ldr	r0, [pc, #188]	; (2db6c <z_set_prio+0xf4>)
   2daae:	f006 f881 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2dab2:	482d      	ldr	r0, [pc, #180]	; (2db68 <z_set_prio+0xf0>)
   2dab4:	f000 fd28 	bl	2e508 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2dab8:	7b63      	ldrb	r3, [r4, #13]
   2daba:	b26d      	sxtb	r5, r5
   2dabc:	06db      	lsls	r3, r3, #27
   2dabe:	d150      	bne.n	2db62 <z_set_prio+0xea>
		if (need_sched) {
   2dac0:	69a3      	ldr	r3, [r4, #24]
   2dac2:	2b00      	cmp	r3, #0
   2dac4:	d14d      	bne.n	2db62 <z_set_prio+0xea>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   2dac6:	4621      	mov	r1, r4
   2dac8:	482c      	ldr	r0, [pc, #176]	; (2db7c <z_set_prio+0x104>)
   2daca:	f7ff fa47 	bl	2cf5c <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2dace:	4b2c      	ldr	r3, [pc, #176]	; (2db80 <z_set_prio+0x108>)
				thread->base.prio = prio;
   2dad0:	73a5      	strb	r5, [r4, #14]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2dad2:	429c      	cmp	r4, r3
   2dad4:	d10b      	bne.n	2daee <z_set_prio+0x76>
   2dad6:	492b      	ldr	r1, [pc, #172]	; (2db84 <z_set_prio+0x10c>)
   2dad8:	4826      	ldr	r0, [pc, #152]	; (2db74 <z_set_prio+0xfc>)
   2dada:	f240 3355 	movw	r3, #853	; 0x355
   2dade:	4a2a      	ldr	r2, [pc, #168]	; (2db88 <z_set_prio+0x110>)
   2dae0:	f005 fd67 	bl	335b2 <printk>
   2dae4:	f240 3155 	movw	r1, #853	; 0x355
   2dae8:	4827      	ldr	r0, [pc, #156]	; (2db88 <z_set_prio+0x110>)
   2daea:	f006 f863 	bl	33bb4 <assert_post_action>
	return list->head == list;
   2daee:	4a27      	ldr	r2, [pc, #156]	; (2db8c <z_set_prio+0x114>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2daf0:	f102 0128 	add.w	r1, r2, #40	; 0x28
   2daf4:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   2daf8:	428b      	cmp	r3, r1
   2dafa:	d02c      	beq.n	2db56 <z_set_prio+0xde>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2dafc:	b35b      	cbz	r3, 2db56 <z_set_prio+0xde>
	if (thread_1->base.prio < thread_2->base.prio) {
   2dafe:	f994 500e 	ldrsb.w	r5, [r4, #14]
   2db02:	f993 700e 	ldrsb.w	r7, [r3, #14]
   2db06:	42af      	cmp	r7, r5
   2db08:	dd20      	ble.n	2db4c <z_set_prio+0xd4>
	node->prev = successor->prev;
   2db0a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2db0c:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   2db10:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2db12:	605c      	str	r4, [r3, #4]
			update_cache(1);
   2db14:	2001      	movs	r0, #1
   2db16:	f7ff faa5 	bl	2d064 <update_cache>
   2db1a:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2db1c:	4812      	ldr	r0, [pc, #72]	; (2db68 <z_set_prio+0xf0>)
   2db1e:	f000 fce3 	bl	2e4e8 <z_spin_unlock_valid>
   2db22:	b968      	cbnz	r0, 2db40 <z_set_prio+0xc8>
   2db24:	2384      	movs	r3, #132	; 0x84
   2db26:	4a11      	ldr	r2, [pc, #68]	; (2db6c <z_set_prio+0xf4>)
   2db28:	4919      	ldr	r1, [pc, #100]	; (2db90 <z_set_prio+0x118>)
   2db2a:	4812      	ldr	r0, [pc, #72]	; (2db74 <z_set_prio+0xfc>)
   2db2c:	f005 fd41 	bl	335b2 <printk>
   2db30:	490d      	ldr	r1, [pc, #52]	; (2db68 <z_set_prio+0xf0>)
   2db32:	4818      	ldr	r0, [pc, #96]	; (2db94 <z_set_prio+0x11c>)
   2db34:	f005 fd3d 	bl	335b2 <printk>
   2db38:	2184      	movs	r1, #132	; 0x84
   2db3a:	480c      	ldr	r0, [pc, #48]	; (2db6c <z_set_prio+0xf4>)
   2db3c:	f006 f83a 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   2db40:	f386 8811 	msr	BASEPRI, r6
   2db44:	f3bf 8f6f 	isb	sy
}
   2db48:	4620      	mov	r0, r4
   2db4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   2db4c:	4298      	cmp	r0, r3
   2db4e:	d002      	beq.n	2db56 <z_set_prio+0xde>
   2db50:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2db52:	2b00      	cmp	r3, #0
   2db54:	d1d5      	bne.n	2db02 <z_set_prio+0x8a>
	node->prev = list->tail;
   2db56:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   2db5a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   2db5c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2db5e:	62d4      	str	r4, [r2, #44]	; 0x2c
   2db60:	e7d8      	b.n	2db14 <z_set_prio+0x9c>
			thread->base.prio = prio;
   2db62:	73a5      	strb	r5, [r4, #14]
   2db64:	2400      	movs	r4, #0
   2db66:	e7d9      	b.n	2db1c <z_set_prio+0xa4>
   2db68:	20027514 	.word	0x20027514
   2db6c:	0003c745 	.word	0x0003c745
   2db70:	0003c76b 	.word	0x0003c76b
   2db74:	0003b773 	.word	0x0003b773
   2db78:	0003c780 	.word	0x0003c780
   2db7c:	20027504 	.word	0x20027504
   2db80:	20022b04 	.word	0x20022b04
   2db84:	0003fda7 	.word	0x0003fda7
   2db88:	0003fd31 	.word	0x0003fd31
   2db8c:	200274dc 	.word	0x200274dc
   2db90:	0003c798 	.word	0x0003c798
   2db94:	0003c7af 	.word	0x0003c7af

0002db98 <z_unpend_first_thread>:
{
   2db98:	b538      	push	{r3, r4, r5, lr}
   2db9a:	4604      	mov	r4, r0
	__asm__ volatile(
   2db9c:	f04f 0320 	mov.w	r3, #32
   2dba0:	f3ef 8511 	mrs	r5, BASEPRI
   2dba4:	f383 8811 	msr	BASEPRI, r3
   2dba8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2dbac:	483b      	ldr	r0, [pc, #236]	; (2dc9c <z_unpend_first_thread+0x104>)
   2dbae:	f000 fc8d 	bl	2e4cc <z_spin_lock_valid>
   2dbb2:	b968      	cbnz	r0, 2dbd0 <z_unpend_first_thread+0x38>
   2dbb4:	235c      	movs	r3, #92	; 0x5c
   2dbb6:	4a3a      	ldr	r2, [pc, #232]	; (2dca0 <z_unpend_first_thread+0x108>)
   2dbb8:	493a      	ldr	r1, [pc, #232]	; (2dca4 <z_unpend_first_thread+0x10c>)
   2dbba:	483b      	ldr	r0, [pc, #236]	; (2dca8 <z_unpend_first_thread+0x110>)
   2dbbc:	f005 fcf9 	bl	335b2 <printk>
   2dbc0:	4936      	ldr	r1, [pc, #216]	; (2dc9c <z_unpend_first_thread+0x104>)
   2dbc2:	483a      	ldr	r0, [pc, #232]	; (2dcac <z_unpend_first_thread+0x114>)
   2dbc4:	f005 fcf5 	bl	335b2 <printk>
   2dbc8:	215c      	movs	r1, #92	; 0x5c
   2dbca:	4835      	ldr	r0, [pc, #212]	; (2dca0 <z_unpend_first_thread+0x108>)
   2dbcc:	f005 fff2 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2dbd0:	4832      	ldr	r0, [pc, #200]	; (2dc9c <z_unpend_first_thread+0x104>)
   2dbd2:	f000 fc99 	bl	2e508 <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
   2dbd6:	4620      	mov	r0, r4
   2dbd8:	f00b f882 	bl	38ce0 <z_priq_dumb_best>
   2dbdc:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2dbde:	482f      	ldr	r0, [pc, #188]	; (2dc9c <z_unpend_first_thread+0x104>)
   2dbe0:	f000 fc82 	bl	2e4e8 <z_spin_unlock_valid>
   2dbe4:	b968      	cbnz	r0, 2dc02 <z_unpend_first_thread+0x6a>
   2dbe6:	2384      	movs	r3, #132	; 0x84
   2dbe8:	4a2d      	ldr	r2, [pc, #180]	; (2dca0 <z_unpend_first_thread+0x108>)
   2dbea:	4931      	ldr	r1, [pc, #196]	; (2dcb0 <z_unpend_first_thread+0x118>)
   2dbec:	482e      	ldr	r0, [pc, #184]	; (2dca8 <z_unpend_first_thread+0x110>)
   2dbee:	f005 fce0 	bl	335b2 <printk>
   2dbf2:	492a      	ldr	r1, [pc, #168]	; (2dc9c <z_unpend_first_thread+0x104>)
   2dbf4:	482f      	ldr	r0, [pc, #188]	; (2dcb4 <z_unpend_first_thread+0x11c>)
   2dbf6:	f005 fcdc 	bl	335b2 <printk>
   2dbfa:	2184      	movs	r1, #132	; 0x84
   2dbfc:	4828      	ldr	r0, [pc, #160]	; (2dca0 <z_unpend_first_thread+0x108>)
   2dbfe:	f005 ffd9 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   2dc02:	f385 8811 	msr	BASEPRI, r5
   2dc06:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   2dc0a:	2c00      	cmp	r4, #0
   2dc0c:	d043      	beq.n	2dc96 <z_unpend_first_thread+0xfe>
	__asm__ volatile(
   2dc0e:	f04f 0320 	mov.w	r3, #32
   2dc12:	f3ef 8511 	mrs	r5, BASEPRI
   2dc16:	f383 8811 	msr	BASEPRI, r3
   2dc1a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2dc1e:	481f      	ldr	r0, [pc, #124]	; (2dc9c <z_unpend_first_thread+0x104>)
   2dc20:	f000 fc54 	bl	2e4cc <z_spin_lock_valid>
   2dc24:	b968      	cbnz	r0, 2dc42 <z_unpend_first_thread+0xaa>
   2dc26:	235c      	movs	r3, #92	; 0x5c
   2dc28:	4a1d      	ldr	r2, [pc, #116]	; (2dca0 <z_unpend_first_thread+0x108>)
   2dc2a:	491e      	ldr	r1, [pc, #120]	; (2dca4 <z_unpend_first_thread+0x10c>)
   2dc2c:	481e      	ldr	r0, [pc, #120]	; (2dca8 <z_unpend_first_thread+0x110>)
   2dc2e:	f005 fcc0 	bl	335b2 <printk>
   2dc32:	491a      	ldr	r1, [pc, #104]	; (2dc9c <z_unpend_first_thread+0x104>)
   2dc34:	481d      	ldr	r0, [pc, #116]	; (2dcac <z_unpend_first_thread+0x114>)
   2dc36:	f005 fcbc 	bl	335b2 <printk>
   2dc3a:	215c      	movs	r1, #92	; 0x5c
   2dc3c:	4818      	ldr	r0, [pc, #96]	; (2dca0 <z_unpend_first_thread+0x108>)
   2dc3e:	f005 ffb9 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2dc42:	4816      	ldr	r0, [pc, #88]	; (2dc9c <z_unpend_first_thread+0x104>)
   2dc44:	f000 fc60 	bl	2e508 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2dc48:	f104 0008 	add.w	r0, r4, #8
   2dc4c:	f7fe ffa8 	bl	2cba0 <pended_on.isra.18>
   2dc50:	4621      	mov	r1, r4
   2dc52:	f7ff f983 	bl	2cf5c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2dc56:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2dc58:	4810      	ldr	r0, [pc, #64]	; (2dc9c <z_unpend_first_thread+0x104>)
   2dc5a:	f023 0302 	bic.w	r3, r3, #2
   2dc5e:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
   2dc60:	2300      	movs	r3, #0
   2dc62:	60a3      	str	r3, [r4, #8]
   2dc64:	f000 fc40 	bl	2e4e8 <z_spin_unlock_valid>
   2dc68:	b968      	cbnz	r0, 2dc86 <z_unpend_first_thread+0xee>
   2dc6a:	2384      	movs	r3, #132	; 0x84
   2dc6c:	4a0c      	ldr	r2, [pc, #48]	; (2dca0 <z_unpend_first_thread+0x108>)
   2dc6e:	4910      	ldr	r1, [pc, #64]	; (2dcb0 <z_unpend_first_thread+0x118>)
   2dc70:	480d      	ldr	r0, [pc, #52]	; (2dca8 <z_unpend_first_thread+0x110>)
   2dc72:	f005 fc9e 	bl	335b2 <printk>
   2dc76:	4909      	ldr	r1, [pc, #36]	; (2dc9c <z_unpend_first_thread+0x104>)
   2dc78:	480e      	ldr	r0, [pc, #56]	; (2dcb4 <z_unpend_first_thread+0x11c>)
   2dc7a:	f005 fc9a 	bl	335b2 <printk>
   2dc7e:	2184      	movs	r1, #132	; 0x84
   2dc80:	4807      	ldr	r0, [pc, #28]	; (2dca0 <z_unpend_first_thread+0x108>)
   2dc82:	f005 ff97 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   2dc86:	f385 8811 	msr	BASEPRI, r5
   2dc8a:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   2dc8e:	f104 0018 	add.w	r0, r4, #24
   2dc92:	f000 fe47 	bl	2e924 <z_abort_timeout>
}
   2dc96:	4620      	mov	r0, r4
   2dc98:	bd38      	pop	{r3, r4, r5, pc}
   2dc9a:	bf00      	nop
   2dc9c:	20027514 	.word	0x20027514
   2dca0:	0003c745 	.word	0x0003c745
   2dca4:	0003c76b 	.word	0x0003c76b
   2dca8:	0003b773 	.word	0x0003b773
   2dcac:	0003c780 	.word	0x0003c780
   2dcb0:	0003c798 	.word	0x0003c798
   2dcb4:	0003c7af 	.word	0x0003c7af

0002dcb8 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   2dcb8:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   2dcba:	4b04      	ldr	r3, [pc, #16]	; (2dccc <z_sched_init+0x14>)
   2dcbc:	4608      	mov	r0, r1
   2dcbe:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   2dcc2:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   2dcc6:	f7fe bf99 	b.w	2cbfc <k_sched_time_slice_set>
   2dcca:	bf00      	nop
   2dccc:	200274dc 	.word	0x200274dc

0002dcd0 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   2dcd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2dcd2:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   2dcd6:	b173      	cbz	r3, 2dcf6 <z_impl_k_yield+0x26>
   2dcd8:	4945      	ldr	r1, [pc, #276]	; (2ddf0 <z_impl_k_yield+0x120>)
   2dcda:	f44f 638c 	mov.w	r3, #1120	; 0x460
   2dcde:	4a45      	ldr	r2, [pc, #276]	; (2ddf4 <z_impl_k_yield+0x124>)
   2dce0:	4845      	ldr	r0, [pc, #276]	; (2ddf8 <z_impl_k_yield+0x128>)
   2dce2:	f005 fc66 	bl	335b2 <printk>
   2dce6:	4845      	ldr	r0, [pc, #276]	; (2ddfc <z_impl_k_yield+0x12c>)
   2dce8:	f005 fc63 	bl	335b2 <printk>
   2dcec:	f44f 618c 	mov.w	r1, #1120	; 0x460
   2dcf0:	4840      	ldr	r0, [pc, #256]	; (2ddf4 <z_impl_k_yield+0x124>)
   2dcf2:	f005 ff5f 	bl	33bb4 <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
   2dcf6:	4c42      	ldr	r4, [pc, #264]	; (2de00 <z_impl_k_yield+0x130>)
   2dcf8:	4e42      	ldr	r6, [pc, #264]	; (2de04 <z_impl_k_yield+0x134>)
   2dcfa:	68a2      	ldr	r2, [r4, #8]
   2dcfc:	42b2      	cmp	r2, r6
   2dcfe:	d05f      	beq.n	2ddc0 <z_impl_k_yield+0xf0>
	__asm__ volatile(
   2dd00:	f04f 0320 	mov.w	r3, #32
   2dd04:	f3ef 8711 	mrs	r7, BASEPRI
   2dd08:	f383 8811 	msr	BASEPRI, r3
   2dd0c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2dd10:	483d      	ldr	r0, [pc, #244]	; (2de08 <z_impl_k_yield+0x138>)
   2dd12:	f000 fbdb 	bl	2e4cc <z_spin_lock_valid>
   2dd16:	b968      	cbnz	r0, 2dd34 <z_impl_k_yield+0x64>
   2dd18:	235c      	movs	r3, #92	; 0x5c
   2dd1a:	4a3c      	ldr	r2, [pc, #240]	; (2de0c <z_impl_k_yield+0x13c>)
   2dd1c:	493c      	ldr	r1, [pc, #240]	; (2de10 <z_impl_k_yield+0x140>)
   2dd1e:	4836      	ldr	r0, [pc, #216]	; (2ddf8 <z_impl_k_yield+0x128>)
   2dd20:	f005 fc47 	bl	335b2 <printk>
   2dd24:	4938      	ldr	r1, [pc, #224]	; (2de08 <z_impl_k_yield+0x138>)
   2dd26:	483b      	ldr	r0, [pc, #236]	; (2de14 <z_impl_k_yield+0x144>)
   2dd28:	f005 fc43 	bl	335b2 <printk>
   2dd2c:	215c      	movs	r1, #92	; 0x5c
   2dd2e:	4837      	ldr	r0, [pc, #220]	; (2de0c <z_impl_k_yield+0x13c>)
   2dd30:	f005 ff40 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2dd34:	4834      	ldr	r0, [pc, #208]	; (2de08 <z_impl_k_yield+0x138>)
   2dd36:	f000 fbe7 	bl	2e508 <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   2dd3a:	68a1      	ldr	r1, [r4, #8]
   2dd3c:	4836      	ldr	r0, [pc, #216]	; (2de18 <z_impl_k_yield+0x148>)
   2dd3e:	f7ff f90d 	bl	2cf5c <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   2dd42:	68a5      	ldr	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2dd44:	42b5      	cmp	r5, r6
   2dd46:	d10b      	bne.n	2dd60 <z_impl_k_yield+0x90>
   2dd48:	4934      	ldr	r1, [pc, #208]	; (2de1c <z_impl_k_yield+0x14c>)
   2dd4a:	482b      	ldr	r0, [pc, #172]	; (2ddf8 <z_impl_k_yield+0x128>)
   2dd4c:	f240 3355 	movw	r3, #853	; 0x355
   2dd50:	4a28      	ldr	r2, [pc, #160]	; (2ddf4 <z_impl_k_yield+0x124>)
   2dd52:	f005 fc2e 	bl	335b2 <printk>
   2dd56:	f240 3155 	movw	r1, #853	; 0x355
   2dd5a:	4826      	ldr	r0, [pc, #152]	; (2ddf4 <z_impl_k_yield+0x124>)
   2dd5c:	f005 ff2a 	bl	33bb4 <assert_post_action>
	return list->head == list;
   2dd60:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2dd64:	4a2c      	ldr	r2, [pc, #176]	; (2de18 <z_impl_k_yield+0x148>)
   2dd66:	4293      	cmp	r3, r2
   2dd68:	d03b      	beq.n	2dde2 <z_impl_k_yield+0x112>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2dd6a:	2b00      	cmp	r3, #0
   2dd6c:	d039      	beq.n	2dde2 <z_impl_k_yield+0x112>
	if (thread_1->base.prio < thread_2->base.prio) {
   2dd6e:	f995 000e 	ldrsb.w	r0, [r5, #14]
   2dd72:	f993 600e 	ldrsb.w	r6, [r3, #14]
   2dd76:	4286      	cmp	r6, r0
   2dd78:	dd2e      	ble.n	2ddd8 <z_impl_k_yield+0x108>
	node->prev = successor->prev;
   2dd7a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2dd7c:	e9c5 3200 	strd	r3, r2, [r5]
	successor->prev->next = node;
   2dd80:	6015      	str	r5, [r2, #0]
	successor->prev = node;
   2dd82:	605d      	str	r5, [r3, #4]
			z_mark_thread_as_queued(_current);
   2dd84:	68a2      	ldr	r2, [r4, #8]
			update_cache(1);
   2dd86:	2001      	movs	r0, #1
	thread->base.thread_state |= states;
   2dd88:	7b53      	ldrb	r3, [r2, #13]
   2dd8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2dd8e:	7353      	strb	r3, [r2, #13]
   2dd90:	f7ff f968 	bl	2d064 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2dd94:	481c      	ldr	r0, [pc, #112]	; (2de08 <z_impl_k_yield+0x138>)
   2dd96:	f000 fba7 	bl	2e4e8 <z_spin_unlock_valid>
   2dd9a:	b968      	cbnz	r0, 2ddb8 <z_impl_k_yield+0xe8>
   2dd9c:	2384      	movs	r3, #132	; 0x84
   2dd9e:	4a1b      	ldr	r2, [pc, #108]	; (2de0c <z_impl_k_yield+0x13c>)
   2dda0:	491f      	ldr	r1, [pc, #124]	; (2de20 <z_impl_k_yield+0x150>)
   2dda2:	4815      	ldr	r0, [pc, #84]	; (2ddf8 <z_impl_k_yield+0x128>)
   2dda4:	f005 fc05 	bl	335b2 <printk>
   2dda8:	4917      	ldr	r1, [pc, #92]	; (2de08 <z_impl_k_yield+0x138>)
   2ddaa:	481e      	ldr	r0, [pc, #120]	; (2de24 <z_impl_k_yield+0x154>)
   2ddac:	f005 fc01 	bl	335b2 <printk>
   2ddb0:	2184      	movs	r1, #132	; 0x84
   2ddb2:	4816      	ldr	r0, [pc, #88]	; (2de0c <z_impl_k_yield+0x13c>)
   2ddb4:	f005 fefe 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   2ddb8:	f387 8811 	msr	BASEPRI, r7
   2ddbc:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2ddc0:	f04f 0320 	mov.w	r3, #32
   2ddc4:	f3ef 8011 	mrs	r0, BASEPRI
   2ddc8:	f383 8811 	msr	BASEPRI, r3
   2ddcc:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   2ddd0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2ddd4:	f7ec be80 	b.w	1aad8 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   2ddd8:	4299      	cmp	r1, r3
   2ddda:	d002      	beq.n	2dde2 <z_impl_k_yield+0x112>
   2dddc:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2ddde:	2b00      	cmp	r3, #0
   2dde0:	d1c7      	bne.n	2dd72 <z_impl_k_yield+0xa2>
	node->prev = list->tail;
   2dde2:	e9c5 2100 	strd	r2, r1, [r5]
	list->tail->next = node;
   2dde6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2dde8:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2ddea:	62e5      	str	r5, [r4, #44]	; 0x2c
   2ddec:	e7ca      	b.n	2dd84 <z_impl_k_yield+0xb4>
   2ddee:	bf00      	nop
   2ddf0:	0003fcbf 	.word	0x0003fcbf
   2ddf4:	0003fd31 	.word	0x0003fd31
   2ddf8:	0003b773 	.word	0x0003b773
   2ddfc:	0003cb7f 	.word	0x0003cb7f
   2de00:	200274dc 	.word	0x200274dc
   2de04:	20022b04 	.word	0x20022b04
   2de08:	20027514 	.word	0x20027514
   2de0c:	0003c745 	.word	0x0003c745
   2de10:	0003c76b 	.word	0x0003c76b
   2de14:	0003c780 	.word	0x0003c780
   2de18:	20027504 	.word	0x20027504
   2de1c:	0003fda7 	.word	0x0003fda7
   2de20:	0003c798 	.word	0x0003c798
   2de24:	0003c7af 	.word	0x0003c7af

0002de28 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
{
   2de28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2de2a:	4604      	mov	r4, r0
   2de2c:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	u32_t expected_wakeup_time;

	__ASSERT(!arch_is_in_isr(), "");
   2de30:	b173      	cbz	r3, 2de50 <z_tick_sleep+0x28>
   2de32:	493b      	ldr	r1, [pc, #236]	; (2df20 <z_tick_sleep+0xf8>)
   2de34:	f240 437e 	movw	r3, #1150	; 0x47e
   2de38:	4a3a      	ldr	r2, [pc, #232]	; (2df24 <z_tick_sleep+0xfc>)
   2de3a:	483b      	ldr	r0, [pc, #236]	; (2df28 <z_tick_sleep+0x100>)
   2de3c:	f005 fbb9 	bl	335b2 <printk>
   2de40:	483a      	ldr	r0, [pc, #232]	; (2df2c <z_tick_sleep+0x104>)
   2de42:	f005 fbb6 	bl	335b2 <printk>
   2de46:	f240 417e 	movw	r1, #1150	; 0x47e
   2de4a:	4836      	ldr	r0, [pc, #216]	; (2df24 <z_tick_sleep+0xfc>)
   2de4c:	f005 feb2 	bl	33bb4 <assert_post_action>

	K_DEBUG("thread %p for %d ticks\n", _current, ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   2de50:	b924      	cbnz	r4, 2de5c <z_tick_sleep+0x34>
	z_impl_k_yield();
   2de52:	f7ff ff3d 	bl	2dcd0 <z_impl_k_yield>
		return ticks;
	}
#endif

	return 0;
}
   2de56:	4620      	mov	r0, r4
   2de58:	b003      	add	sp, #12
   2de5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	expected_wakeup_time = ticks + z_tick_get_32();
   2de5c:	f00a ffdf 	bl	38e1e <z_tick_get_32>
	struct k_spinlock local_lock = {};
   2de60:	2300      	movs	r3, #0
	ticks += _TICK_ALIGN;
   2de62:	1c66      	adds	r6, r4, #1
	expected_wakeup_time = ticks + z_tick_get_32();
   2de64:	1834      	adds	r4, r6, r0
	struct k_spinlock local_lock = {};
   2de66:	9301      	str	r3, [sp, #4]
   2de68:	f04f 0320 	mov.w	r3, #32
   2de6c:	f3ef 8711 	mrs	r7, BASEPRI
   2de70:	f383 8811 	msr	BASEPRI, r3
   2de74:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2de78:	a801      	add	r0, sp, #4
   2de7a:	f000 fb27 	bl	2e4cc <z_spin_lock_valid>
   2de7e:	b968      	cbnz	r0, 2de9c <z_tick_sleep+0x74>
   2de80:	235c      	movs	r3, #92	; 0x5c
   2de82:	4a2b      	ldr	r2, [pc, #172]	; (2df30 <z_tick_sleep+0x108>)
   2de84:	492b      	ldr	r1, [pc, #172]	; (2df34 <z_tick_sleep+0x10c>)
   2de86:	4828      	ldr	r0, [pc, #160]	; (2df28 <z_tick_sleep+0x100>)
   2de88:	f005 fb93 	bl	335b2 <printk>
   2de8c:	a901      	add	r1, sp, #4
   2de8e:	482a      	ldr	r0, [pc, #168]	; (2df38 <z_tick_sleep+0x110>)
   2de90:	f005 fb8f 	bl	335b2 <printk>
   2de94:	215c      	movs	r1, #92	; 0x5c
   2de96:	4826      	ldr	r0, [pc, #152]	; (2df30 <z_tick_sleep+0x108>)
   2de98:	f005 fe8c 	bl	33bb4 <assert_post_action>
	pending_current = _current;
   2de9c:	4d27      	ldr	r5, [pc, #156]	; (2df3c <z_tick_sleep+0x114>)
	z_spin_lock_set_owner(l);
   2de9e:	a801      	add	r0, sp, #4
   2dea0:	f000 fb32 	bl	2e508 <z_spin_lock_set_owner>
   2dea4:	4b26      	ldr	r3, [pc, #152]	; (2df40 <z_tick_sleep+0x118>)
   2dea6:	68a8      	ldr	r0, [r5, #8]
   2dea8:	6018      	str	r0, [r3, #0]
	z_remove_thread_from_ready_q(_current);
   2deaa:	f7ff fca7 	bl	2d7fc <z_remove_thread_from_ready_q>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   2deae:	68a8      	ldr	r0, [r5, #8]
   2deb0:	4632      	mov	r2, r6
   2deb2:	3018      	adds	r0, #24
   2deb4:	4923      	ldr	r1, [pc, #140]	; (2df44 <z_tick_sleep+0x11c>)
   2deb6:	f000 fc8d 	bl	2e7d4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   2deba:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2debc:	a801      	add	r0, sp, #4
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2debe:	7b53      	ldrb	r3, [r2, #13]
   2dec0:	f043 0310 	orr.w	r3, r3, #16
   2dec4:	7353      	strb	r3, [r2, #13]
   2dec6:	f000 fb0f 	bl	2e4e8 <z_spin_unlock_valid>
   2deca:	b968      	cbnz	r0, 2dee8 <z_tick_sleep+0xc0>
   2decc:	239b      	movs	r3, #155	; 0x9b
   2dece:	4a18      	ldr	r2, [pc, #96]	; (2df30 <z_tick_sleep+0x108>)
   2ded0:	491d      	ldr	r1, [pc, #116]	; (2df48 <z_tick_sleep+0x120>)
   2ded2:	4815      	ldr	r0, [pc, #84]	; (2df28 <z_tick_sleep+0x100>)
   2ded4:	f005 fb6d 	bl	335b2 <printk>
   2ded8:	a901      	add	r1, sp, #4
   2deda:	481c      	ldr	r0, [pc, #112]	; (2df4c <z_tick_sleep+0x124>)
   2dedc:	f005 fb69 	bl	335b2 <printk>
   2dee0:	219b      	movs	r1, #155	; 0x9b
   2dee2:	4813      	ldr	r0, [pc, #76]	; (2df30 <z_tick_sleep+0x108>)
   2dee4:	f005 fe66 	bl	33bb4 <assert_post_action>
   2dee8:	4638      	mov	r0, r7
   2deea:	f7ec fdf5 	bl	1aad8 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   2deee:	68ab      	ldr	r3, [r5, #8]
   2def0:	7b5b      	ldrb	r3, [r3, #13]
   2def2:	06db      	lsls	r3, r3, #27
   2def4:	d50e      	bpl.n	2df14 <z_tick_sleep+0xec>
   2def6:	4916      	ldr	r1, [pc, #88]	; (2df50 <z_tick_sleep+0x128>)
   2def8:	f240 43a3 	movw	r3, #1187	; 0x4a3
   2defc:	4a09      	ldr	r2, [pc, #36]	; (2df24 <z_tick_sleep+0xfc>)
   2defe:	480a      	ldr	r0, [pc, #40]	; (2df28 <z_tick_sleep+0x100>)
   2df00:	f005 fb57 	bl	335b2 <printk>
   2df04:	4809      	ldr	r0, [pc, #36]	; (2df2c <z_tick_sleep+0x104>)
   2df06:	f005 fb54 	bl	335b2 <printk>
   2df0a:	f240 41a3 	movw	r1, #1187	; 0x4a3
   2df0e:	4805      	ldr	r0, [pc, #20]	; (2df24 <z_tick_sleep+0xfc>)
   2df10:	f005 fe50 	bl	33bb4 <assert_post_action>
	ticks = expected_wakeup_time - z_tick_get_32();
   2df14:	f00a ff83 	bl	38e1e <z_tick_get_32>
   2df18:	1a24      	subs	r4, r4, r0
   2df1a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   2df1e:	e79a      	b.n	2de56 <z_tick_sleep+0x2e>
   2df20:	0003fcbf 	.word	0x0003fcbf
   2df24:	0003fd31 	.word	0x0003fd31
   2df28:	0003b773 	.word	0x0003b773
   2df2c:	0003cb7f 	.word	0x0003cb7f
   2df30:	0003c745 	.word	0x0003c745
   2df34:	0003c76b 	.word	0x0003c76b
   2df38:	0003c780 	.word	0x0003c780
   2df3c:	200274dc 	.word	0x200274dc
   2df40:	20027510 	.word	0x20027510
   2df44:	0002d2c9 	.word	0x0002d2c9
   2df48:	0003c798 	.word	0x0003c798
   2df4c:	0003c7af 	.word	0x0003c7af
   2df50:	0003fdc8 	.word	0x0003fdc8

0002df54 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(k_timeout_t timeout)
{
   2df54:	b538      	push	{r3, r4, r5, lr}
   2df56:	4604      	mov	r4, r0
   2df58:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   2df5c:	b173      	cbz	r3, 2df7c <z_impl_k_sleep+0x28>
   2df5e:	4916      	ldr	r1, [pc, #88]	; (2dfb8 <z_impl_k_sleep+0x64>)
   2df60:	f240 43b2 	movw	r3, #1202	; 0x4b2
   2df64:	4a15      	ldr	r2, [pc, #84]	; (2dfbc <z_impl_k_sleep+0x68>)
   2df66:	4816      	ldr	r0, [pc, #88]	; (2dfc0 <z_impl_k_sleep+0x6c>)
   2df68:	f005 fb23 	bl	335b2 <printk>
   2df6c:	4815      	ldr	r0, [pc, #84]	; (2dfc4 <z_impl_k_sleep+0x70>)
   2df6e:	f005 fb20 	bl	335b2 <printk>
   2df72:	f240 41b2 	movw	r1, #1202	; 0x4b2
   2df76:	4811      	ldr	r0, [pc, #68]	; (2dfbc <z_impl_k_sleep+0x68>)
   2df78:	f005 fe1c 	bl	33bb4 <assert_post_action>

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2df7c:	1c63      	adds	r3, r4, #1
   2df7e:	d105      	bne.n	2df8c <z_impl_k_sleep+0x38>
		k_thread_suspend(_current);
   2df80:	4b11      	ldr	r3, [pc, #68]	; (2dfc8 <z_impl_k_sleep+0x74>)
   2df82:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   2df84:	f7ff fb1c 	bl	2d5c0 <z_impl_k_thread_suspend>
	ticks = timeout.ticks;
#endif

	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
   2df88:	4620      	mov	r0, r4
   2df8a:	bd38      	pop	{r3, r4, r5, pc}
   2df8c:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   2df90:	f240 30e7 	movw	r0, #999	; 0x3e7
   2df94:	2100      	movs	r1, #0
   2df96:	2300      	movs	r3, #0
   2df98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2df9c:	fbe5 0104 	umlal	r0, r1, r5, r4
   2dfa0:	f7df fbe6 	bl	d770 <__aeabi_uldivmod>
	ticks = z_tick_sleep(ticks);
   2dfa4:	f7ff ff40 	bl	2de28 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   2dfa8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2dfac:	fba0 0103 	umull	r0, r1, r0, r3
   2dfb0:	0bc4      	lsrs	r4, r0, #15
   2dfb2:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   2dfb6:	e7e7      	b.n	2df88 <z_impl_k_sleep+0x34>
   2dfb8:	0003fcbf 	.word	0x0003fcbf
   2dfbc:	0003fd31 	.word	0x0003fd31
   2dfc0:	0003b773 	.word	0x0003b773
   2dfc4:	0003cb7f 	.word	0x0003cb7f
   2dfc8:	200274dc 	.word	0x200274dc

0002dfcc <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   2dfcc:	4b01      	ldr	r3, [pc, #4]	; (2dfd4 <z_impl_k_current_get+0x8>)
   2dfce:	6898      	ldr	r0, [r3, #8]
   2dfd0:	4770      	bx	lr
   2dfd2:	bf00      	nop
   2dfd4:	200274dc 	.word	0x200274dc

0002dfd8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   2dfd8:	b538      	push	{r3, r4, r5, lr}
   2dfda:	4604      	mov	r4, r0
   2dfdc:	f04f 0320 	mov.w	r3, #32
   2dfe0:	f3ef 8511 	mrs	r5, BASEPRI
   2dfe4:	f383 8811 	msr	BASEPRI, r3
   2dfe8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2dfec:	4817      	ldr	r0, [pc, #92]	; (2e04c <z_impl_k_sem_give+0x74>)
   2dfee:	f000 fa6d 	bl	2e4cc <z_spin_lock_valid>
   2dff2:	b968      	cbnz	r0, 2e010 <z_impl_k_sem_give+0x38>
   2dff4:	235c      	movs	r3, #92	; 0x5c
   2dff6:	4a16      	ldr	r2, [pc, #88]	; (2e050 <z_impl_k_sem_give+0x78>)
   2dff8:	4916      	ldr	r1, [pc, #88]	; (2e054 <z_impl_k_sem_give+0x7c>)
   2dffa:	4817      	ldr	r0, [pc, #92]	; (2e058 <z_impl_k_sem_give+0x80>)
   2dffc:	f005 fad9 	bl	335b2 <printk>
   2e000:	4912      	ldr	r1, [pc, #72]	; (2e04c <z_impl_k_sem_give+0x74>)
   2e002:	4816      	ldr	r0, [pc, #88]	; (2e05c <z_impl_k_sem_give+0x84>)
   2e004:	f005 fad5 	bl	335b2 <printk>
   2e008:	215c      	movs	r1, #92	; 0x5c
   2e00a:	4811      	ldr	r0, [pc, #68]	; (2e050 <z_impl_k_sem_give+0x78>)
   2e00c:	f005 fdd2 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2e010:	480e      	ldr	r0, [pc, #56]	; (2e04c <z_impl_k_sem_give+0x74>)
   2e012:	f000 fa79 	bl	2e508 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   2e016:	4620      	mov	r0, r4
   2e018:	f7ff fdbe 	bl	2db98 <z_unpend_first_thread>

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);

	if (thread != NULL) {
   2e01c:	b148      	cbz	r0, 2e032 <z_impl_k_sem_give+0x5a>
   2e01e:	2200      	movs	r2, #0
   2e020:	6702      	str	r2, [r0, #112]	; 0x70
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   2e022:	f7ff f909 	bl	2d238 <z_ready_thread>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   2e026:	4629      	mov	r1, r5
}
   2e028:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   2e02c:	4807      	ldr	r0, [pc, #28]	; (2e04c <z_impl_k_sem_give+0x74>)
   2e02e:	f7fe bee1 	b.w	2cdf4 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   2e032:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   2e036:	429a      	cmp	r2, r3
   2e038:	bf18      	it	ne
   2e03a:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2e03c:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   2e03e:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2e040:	f104 0010 	add.w	r0, r4, #16
   2e044:	f00a ff8e 	bl	38f64 <z_handle_obj_poll_events>
   2e048:	e7ed      	b.n	2e026 <z_impl_k_sem_give+0x4e>
   2e04a:	bf00      	nop
   2e04c:	20027520 	.word	0x20027520
   2e050:	0003c745 	.word	0x0003c745
   2e054:	0003c76b 	.word	0x0003c76b
   2e058:	0003b773 	.word	0x0003b773
   2e05c:	0003c780 	.word	0x0003c780

0002e060 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   2e060:	b570      	push	{r4, r5, r6, lr}
   2e062:	4605      	mov	r5, r0
   2e064:	460e      	mov	r6, r1
   2e066:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   2e06a:	b16b      	cbz	r3, 2e088 <z_impl_k_sem_take+0x28>
   2e06c:	b161      	cbz	r1, 2e088 <z_impl_k_sem_take+0x28>
   2e06e:	4934      	ldr	r1, [pc, #208]	; (2e140 <z_impl_k_sem_take+0xe0>)
   2e070:	238d      	movs	r3, #141	; 0x8d
   2e072:	4a34      	ldr	r2, [pc, #208]	; (2e144 <z_impl_k_sem_take+0xe4>)
   2e074:	4834      	ldr	r0, [pc, #208]	; (2e148 <z_impl_k_sem_take+0xe8>)
   2e076:	f005 fa9c 	bl	335b2 <printk>
   2e07a:	4834      	ldr	r0, [pc, #208]	; (2e14c <z_impl_k_sem_take+0xec>)
   2e07c:	f005 fa99 	bl	335b2 <printk>
   2e080:	218d      	movs	r1, #141	; 0x8d
   2e082:	4830      	ldr	r0, [pc, #192]	; (2e144 <z_impl_k_sem_take+0xe4>)
   2e084:	f005 fd96 	bl	33bb4 <assert_post_action>
   2e088:	f04f 0320 	mov.w	r3, #32
   2e08c:	f3ef 8411 	mrs	r4, BASEPRI
   2e090:	f383 8811 	msr	BASEPRI, r3
   2e094:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2e098:	482d      	ldr	r0, [pc, #180]	; (2e150 <z_impl_k_sem_take+0xf0>)
   2e09a:	f000 fa17 	bl	2e4cc <z_spin_lock_valid>
   2e09e:	b968      	cbnz	r0, 2e0bc <z_impl_k_sem_take+0x5c>
   2e0a0:	235c      	movs	r3, #92	; 0x5c
   2e0a2:	4a2c      	ldr	r2, [pc, #176]	; (2e154 <z_impl_k_sem_take+0xf4>)
   2e0a4:	492c      	ldr	r1, [pc, #176]	; (2e158 <z_impl_k_sem_take+0xf8>)
   2e0a6:	4828      	ldr	r0, [pc, #160]	; (2e148 <z_impl_k_sem_take+0xe8>)
   2e0a8:	f005 fa83 	bl	335b2 <printk>
   2e0ac:	4928      	ldr	r1, [pc, #160]	; (2e150 <z_impl_k_sem_take+0xf0>)
   2e0ae:	482b      	ldr	r0, [pc, #172]	; (2e15c <z_impl_k_sem_take+0xfc>)
   2e0b0:	f005 fa7f 	bl	335b2 <printk>
   2e0b4:	215c      	movs	r1, #92	; 0x5c
   2e0b6:	4827      	ldr	r0, [pc, #156]	; (2e154 <z_impl_k_sem_take+0xf4>)
   2e0b8:	f005 fd7c 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2e0bc:	4824      	ldr	r0, [pc, #144]	; (2e150 <z_impl_k_sem_take+0xf0>)
   2e0be:	f000 fa23 	bl	2e508 <z_spin_lock_set_owner>
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   2e0c2:	68ab      	ldr	r3, [r5, #8]
   2e0c4:	b1cb      	cbz	r3, 2e0fa <z_impl_k_sem_take+0x9a>
		sem->count--;
   2e0c6:	3b01      	subs	r3, #1
   2e0c8:	60ab      	str	r3, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2e0ca:	4821      	ldr	r0, [pc, #132]	; (2e150 <z_impl_k_sem_take+0xf0>)
   2e0cc:	f000 fa0c 	bl	2e4e8 <z_spin_unlock_valid>
   2e0d0:	b968      	cbnz	r0, 2e0ee <z_impl_k_sem_take+0x8e>
   2e0d2:	2384      	movs	r3, #132	; 0x84
   2e0d4:	4a1f      	ldr	r2, [pc, #124]	; (2e154 <z_impl_k_sem_take+0xf4>)
   2e0d6:	4922      	ldr	r1, [pc, #136]	; (2e160 <z_impl_k_sem_take+0x100>)
   2e0d8:	481b      	ldr	r0, [pc, #108]	; (2e148 <z_impl_k_sem_take+0xe8>)
   2e0da:	f005 fa6a 	bl	335b2 <printk>
   2e0de:	491c      	ldr	r1, [pc, #112]	; (2e150 <z_impl_k_sem_take+0xf0>)
   2e0e0:	4820      	ldr	r0, [pc, #128]	; (2e164 <z_impl_k_sem_take+0x104>)
   2e0e2:	f005 fa66 	bl	335b2 <printk>
   2e0e6:	2184      	movs	r1, #132	; 0x84
   2e0e8:	481a      	ldr	r0, [pc, #104]	; (2e154 <z_impl_k_sem_take+0xf4>)
   2e0ea:	f005 fd63 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   2e0ee:	f384 8811 	msr	BASEPRI, r4
   2e0f2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   2e0f6:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   2e0f8:	bd70      	pop	{r4, r5, r6, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2e0fa:	b9c6      	cbnz	r6, 2e12e <z_impl_k_sem_take+0xce>
   2e0fc:	4814      	ldr	r0, [pc, #80]	; (2e150 <z_impl_k_sem_take+0xf0>)
   2e0fe:	f000 f9f3 	bl	2e4e8 <z_spin_unlock_valid>
   2e102:	b968      	cbnz	r0, 2e120 <z_impl_k_sem_take+0xc0>
   2e104:	2384      	movs	r3, #132	; 0x84
   2e106:	4a13      	ldr	r2, [pc, #76]	; (2e154 <z_impl_k_sem_take+0xf4>)
   2e108:	4915      	ldr	r1, [pc, #84]	; (2e160 <z_impl_k_sem_take+0x100>)
   2e10a:	480f      	ldr	r0, [pc, #60]	; (2e148 <z_impl_k_sem_take+0xe8>)
   2e10c:	f005 fa51 	bl	335b2 <printk>
   2e110:	490f      	ldr	r1, [pc, #60]	; (2e150 <z_impl_k_sem_take+0xf0>)
   2e112:	4814      	ldr	r0, [pc, #80]	; (2e164 <z_impl_k_sem_take+0x104>)
   2e114:	f005 fa4d 	bl	335b2 <printk>
   2e118:	2184      	movs	r1, #132	; 0x84
   2e11a:	480e      	ldr	r0, [pc, #56]	; (2e154 <z_impl_k_sem_take+0xf4>)
   2e11c:	f005 fd4a 	bl	33bb4 <assert_post_action>
   2e120:	f384 8811 	msr	BASEPRI, r4
   2e124:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   2e128:	f06f 000f 	mvn.w	r0, #15
		goto out;
   2e12c:	e7e4      	b.n	2e0f8 <z_impl_k_sem_take+0x98>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   2e12e:	4633      	mov	r3, r6
   2e130:	462a      	mov	r2, r5
   2e132:	4621      	mov	r1, r4
}
   2e134:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   2e138:	4805      	ldr	r0, [pc, #20]	; (2e150 <z_impl_k_sem_take+0xf0>)
   2e13a:	f7ff bc6f 	b.w	2da1c <z_pend_curr>
   2e13e:	bf00      	nop
   2e140:	0003fe28 	.word	0x0003fe28
   2e144:	0003fe08 	.word	0x0003fe08
   2e148:	0003b773 	.word	0x0003b773
   2e14c:	0003cb7f 	.word	0x0003cb7f
   2e150:	20027520 	.word	0x20027520
   2e154:	0003c745 	.word	0x0003c745
   2e158:	0003c76b 	.word	0x0003c76b
   2e15c:	0003c780 	.word	0x0003c780
   2e160:	0003c798 	.word	0x0003c798
   2e164:	0003c7af 	.word	0x0003c7af

0002e168 <z_impl_k_stack_push>:
int z_impl_k_stack_push(struct k_stack *stack, stack_data_t data)
{
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key;

	CHECKIF(stack->next == stack->top) {
   2e168:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   2e16c:	429a      	cmp	r2, r3
{
   2e16e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e172:	4604      	mov	r4, r0
   2e174:	460f      	mov	r7, r1
	CHECKIF(stack->next == stack->top) {
   2e176:	d04c      	beq.n	2e212 <z_impl_k_stack_push+0xaa>
		return -ENOMEM;
	}

	key = k_spin_lock(&stack->lock);
   2e178:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   2e17c:	f04f 0320 	mov.w	r3, #32
   2e180:	f3ef 8611 	mrs	r6, BASEPRI
   2e184:	f383 8811 	msr	BASEPRI, r3
   2e188:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2e18c:	4628      	mov	r0, r5
   2e18e:	f000 f99d 	bl	2e4cc <z_spin_lock_valid>
   2e192:	b968      	cbnz	r0, 2e1b0 <z_impl_k_stack_push+0x48>
   2e194:	235c      	movs	r3, #92	; 0x5c
   2e196:	4a20      	ldr	r2, [pc, #128]	; (2e218 <z_impl_k_stack_push+0xb0>)
   2e198:	4920      	ldr	r1, [pc, #128]	; (2e21c <z_impl_k_stack_push+0xb4>)
   2e19a:	4821      	ldr	r0, [pc, #132]	; (2e220 <z_impl_k_stack_push+0xb8>)
   2e19c:	f005 fa09 	bl	335b2 <printk>
   2e1a0:	4629      	mov	r1, r5
   2e1a2:	4820      	ldr	r0, [pc, #128]	; (2e224 <z_impl_k_stack_push+0xbc>)
   2e1a4:	f005 fa05 	bl	335b2 <printk>
   2e1a8:	215c      	movs	r1, #92	; 0x5c
   2e1aa:	481b      	ldr	r0, [pc, #108]	; (2e218 <z_impl_k_stack_push+0xb0>)
   2e1ac:	f005 fd02 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2e1b0:	4628      	mov	r0, r5
   2e1b2:	f000 f9a9 	bl	2e508 <z_spin_lock_set_owner>

	first_pending_thread = z_unpend_first_thread(&stack->wait_q);
   2e1b6:	4620      	mov	r0, r4
   2e1b8:	f7ff fcee 	bl	2db98 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   2e1bc:	4680      	mov	r8, r0
   2e1be:	b168      	cbz	r0, 2e1dc <z_impl_k_stack_push+0x74>
   2e1c0:	2400      	movs	r4, #0
		z_ready_thread(first_pending_thread);
   2e1c2:	f7ff f839 	bl	2d238 <z_ready_thread>
   2e1c6:	f8c8 4070 	str.w	r4, [r8, #112]	; 0x70
   2e1ca:	f8c8 7014 	str.w	r7, [r8, #20]

		z_thread_return_value_set_with_data(first_pending_thread,
						   0, (void *)data);
		z_reschedule(&stack->lock, key);
   2e1ce:	4631      	mov	r1, r6
   2e1d0:	4628      	mov	r0, r5
   2e1d2:	f7fe fe0f 	bl	2cdf4 <z_reschedule>
		*(stack->next) = data;
		stack->next++;
		k_spin_unlock(&stack->lock, key);
	}

	return 0;
   2e1d6:	2000      	movs	r0, #0
}
   2e1d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*(stack->next) = data;
   2e1dc:	6923      	ldr	r3, [r4, #16]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2e1de:	4628      	mov	r0, r5
   2e1e0:	f843 7b04 	str.w	r7, [r3], #4
		stack->next++;
   2e1e4:	6123      	str	r3, [r4, #16]
   2e1e6:	f000 f97f 	bl	2e4e8 <z_spin_unlock_valid>
   2e1ea:	b968      	cbnz	r0, 2e208 <z_impl_k_stack_push+0xa0>
   2e1ec:	2384      	movs	r3, #132	; 0x84
   2e1ee:	4a0a      	ldr	r2, [pc, #40]	; (2e218 <z_impl_k_stack_push+0xb0>)
   2e1f0:	490d      	ldr	r1, [pc, #52]	; (2e228 <z_impl_k_stack_push+0xc0>)
   2e1f2:	480b      	ldr	r0, [pc, #44]	; (2e220 <z_impl_k_stack_push+0xb8>)
   2e1f4:	f005 f9dd 	bl	335b2 <printk>
   2e1f8:	4629      	mov	r1, r5
   2e1fa:	480c      	ldr	r0, [pc, #48]	; (2e22c <z_impl_k_stack_push+0xc4>)
   2e1fc:	f005 f9d9 	bl	335b2 <printk>
   2e200:	2184      	movs	r1, #132	; 0x84
   2e202:	4805      	ldr	r0, [pc, #20]	; (2e218 <z_impl_k_stack_push+0xb0>)
   2e204:	f005 fcd6 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   2e208:	f386 8811 	msr	BASEPRI, r6
   2e20c:	f3bf 8f6f 	isb	sy
   2e210:	e7e1      	b.n	2e1d6 <z_impl_k_stack_push+0x6e>
		return -ENOMEM;
   2e212:	f06f 000b 	mvn.w	r0, #11
   2e216:	e7df      	b.n	2e1d8 <z_impl_k_stack_push+0x70>
   2e218:	0003c745 	.word	0x0003c745
   2e21c:	0003c76b 	.word	0x0003c76b
   2e220:	0003b773 	.word	0x0003b773
   2e224:	0003c780 	.word	0x0003c780
   2e228:	0003c798 	.word	0x0003c798
   2e22c:	0003c7af 	.word	0x0003c7af

0002e230 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   2e230:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   2e232:	4c08      	ldr	r4, [pc, #32]	; (2e254 <k_sys_work_q_init+0x24>)
   2e234:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2e238:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2e23c:	4906      	ldr	r1, [pc, #24]	; (2e258 <k_sys_work_q_init+0x28>)
   2e23e:	4620      	mov	r0, r4
   2e240:	f000 f96a 	bl	2e518 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   2e244:	4905      	ldr	r1, [pc, #20]	; (2e25c <k_sys_work_q_init+0x2c>)
   2e246:	f104 001c 	add.w	r0, r4, #28
   2e24a:	f00a fd77 	bl	38d3c <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   2e24e:	2000      	movs	r0, #0
   2e250:	bd10      	pop	{r4, pc}
   2e252:	bf00      	nop
   2e254:	20027524 	.word	0x20027524
   2e258:	200351d8 	.word	0x200351d8
   2e25c:	0003fe58 	.word	0x0003fe58

0002e260 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   2e260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2e264:	b086      	sub	sp, #24
   2e266:	e9dd 6811 	ldrd	r6, r8, [sp, #68]	; 0x44
	Z_ASSERT_VALID_PRIO(prio, entry);
   2e26a:	2e0f      	cmp	r6, #15
{
   2e26c:	4604      	mov	r4, r0
   2e26e:	4689      	mov	r9, r1
   2e270:	4692      	mov	sl, r2
   2e272:	461f      	mov	r7, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
   2e274:	d127      	bne.n	2e2c6 <z_setup_new_thread+0x66>
   2e276:	4b20      	ldr	r3, [pc, #128]	; (2e2f8 <z_setup_new_thread+0x98>)
   2e278:	429f      	cmp	r7, r3
   2e27a:	d128      	bne.n	2e2ce <z_setup_new_thread+0x6e>
	sys_dlist_init(&w->waitq);
   2e27c:	f104 0328 	add.w	r3, r4, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   2e280:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
	thread_base->thread_state = (u8_t)initial_state;
   2e284:	2304      	movs	r3, #4

	thread_base->prio = priority;

	thread_base->sched_locked = 0U;
   2e286:	2500      	movs	r5, #0
	thread_base->thread_state = (u8_t)initial_state;
   2e288:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2e28a:	9b10      	ldr	r3, [sp, #64]	; 0x40
	thread_base->user_options = (u8_t)options;
   2e28c:	f884 800c 	strb.w	r8, [r4, #12]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2e290:	9302      	str	r3, [sp, #8]
   2e292:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	thread_base->prio = priority;
   2e294:	73a6      	strb	r6, [r4, #14]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2e296:	9301      	str	r3, [sp, #4]
   2e298:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	thread_base->sched_locked = 0U;
   2e29a:	73e5      	strb	r5, [r4, #15]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2e29c:	9300      	str	r3, [sp, #0]
	node->prev = NULL;
   2e29e:	e9c4 5506 	strd	r5, r5, [r4, #24]
   2e2a2:	463b      	mov	r3, r7
   2e2a4:	e9cd 6803 	strd	r6, r8, [sp, #12]
   2e2a8:	4652      	mov	r2, sl
   2e2aa:	4649      	mov	r1, r9
   2e2ac:	4620      	mov	r0, r4
   2e2ae:	f7ec fce5 	bl	1ac7c <arch_new_thread>
	if (!_current) {
   2e2b2:	4b12      	ldr	r3, [pc, #72]	; (2e2fc <z_setup_new_thread+0x9c>)
	new_thread->fn_abort = NULL;
   2e2b4:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
	if (!_current) {
   2e2b8:	689b      	ldr	r3, [r3, #8]
   2e2ba:	b103      	cbz	r3, 2e2be <z_setup_new_thread+0x5e>
	new_thread->resource_pool = _current->resource_pool;
   2e2bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   2e2be:	66a3      	str	r3, [r4, #104]	; 0x68
}
   2e2c0:	b006      	add	sp, #24
   2e2c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   2e2c6:	f106 0310 	add.w	r3, r6, #16
   2e2ca:	2b1e      	cmp	r3, #30
   2e2cc:	d9d6      	bls.n	2e27c <z_setup_new_thread+0x1c>
   2e2ce:	f44f 73e7 	mov.w	r3, #462	; 0x1ce
   2e2d2:	4a0b      	ldr	r2, [pc, #44]	; (2e300 <z_setup_new_thread+0xa0>)
   2e2d4:	490b      	ldr	r1, [pc, #44]	; (2e304 <z_setup_new_thread+0xa4>)
   2e2d6:	480c      	ldr	r0, [pc, #48]	; (2e308 <z_setup_new_thread+0xa8>)
   2e2d8:	f005 f96b 	bl	335b2 <printk>
   2e2dc:	4631      	mov	r1, r6
   2e2de:	f06f 030f 	mvn.w	r3, #15
   2e2e2:	220e      	movs	r2, #14
   2e2e4:	4809      	ldr	r0, [pc, #36]	; (2e30c <z_setup_new_thread+0xac>)
   2e2e6:	f005 f964 	bl	335b2 <printk>
   2e2ea:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
   2e2ee:	4804      	ldr	r0, [pc, #16]	; (2e300 <z_setup_new_thread+0xa0>)
   2e2f0:	f005 fc60 	bl	33bb4 <assert_post_action>
   2e2f4:	e7c2      	b.n	2e27c <z_setup_new_thread+0x1c>
   2e2f6:	bf00      	nop
   2e2f8:	0002b965 	.word	0x0002b965
   2e2fc:	200274dc 	.word	0x200274dc
   2e300:	0003feb3 	.word	0x0003feb3
   2e304:	0003fed6 	.word	0x0003fed6
   2e308:	0003b773 	.word	0x0003b773
   2e30c:	0003ff56 	.word	0x0003ff56

0002e310 <z_impl_k_thread_create>:
{
   2e310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e314:	b086      	sub	sp, #24
   2e316:	4604      	mov	r4, r0
   2e318:	460e      	mov	r6, r1
   2e31a:	4617      	mov	r7, r2
   2e31c:	4698      	mov	r8, r3
   2e31e:	9d11      	ldr	r5, [sp, #68]	; 0x44
   2e320:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   2e324:	b173      	cbz	r3, 2e344 <z_impl_k_thread_create+0x34>
   2e326:	491f      	ldr	r1, [pc, #124]	; (2e3a4 <z_impl_k_thread_create+0x94>)
   2e328:	f240 2343 	movw	r3, #579	; 0x243
   2e32c:	4a1e      	ldr	r2, [pc, #120]	; (2e3a8 <z_impl_k_thread_create+0x98>)
   2e32e:	481f      	ldr	r0, [pc, #124]	; (2e3ac <z_impl_k_thread_create+0x9c>)
   2e330:	f005 f93f 	bl	335b2 <printk>
   2e334:	481e      	ldr	r0, [pc, #120]	; (2e3b0 <z_impl_k_thread_create+0xa0>)
   2e336:	f005 f93c 	bl	335b2 <printk>
   2e33a:	f240 2143 	movw	r1, #579	; 0x243
   2e33e:	481a      	ldr	r0, [pc, #104]	; (2e3a8 <z_impl_k_thread_create+0x98>)
   2e340:	f005 fc38 	bl	33bb4 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2e344:	2300      	movs	r3, #0
   2e346:	9305      	str	r3, [sp, #20]
   2e348:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2e34a:	463a      	mov	r2, r7
   2e34c:	9304      	str	r3, [sp, #16]
   2e34e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2e350:	4631      	mov	r1, r6
   2e352:	9303      	str	r3, [sp, #12]
   2e354:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2e356:	4620      	mov	r0, r4
   2e358:	9302      	str	r3, [sp, #8]
   2e35a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2e35c:	9301      	str	r3, [sp, #4]
   2e35e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2e360:	9300      	str	r3, [sp, #0]
   2e362:	4643      	mov	r3, r8
   2e364:	f7ff ff7c 	bl	2e260 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   2e368:	1c6b      	adds	r3, r5, #1
   2e36a:	d003      	beq.n	2e374 <z_impl_k_thread_create+0x64>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2e36c:	b935      	cbnz	r5, 2e37c <z_impl_k_thread_create+0x6c>
	z_sched_start(thread);
   2e36e:	4620      	mov	r0, r4
   2e370:	f7ff f80e 	bl	2d390 <z_sched_start>
}
   2e374:	4620      	mov	r0, r4
   2e376:	b006      	add	sp, #24
   2e378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return (u32_t)((t * to_hz + off) / from_hz);
   2e37c:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   2e380:	f240 30e7 	movw	r0, #999	; 0x3e7
   2e384:	2100      	movs	r1, #0
   2e386:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2e38a:	2300      	movs	r3, #0
   2e38c:	fbe6 0105 	umlal	r0, r1, r6, r5
   2e390:	f7df f9ee 	bl	d770 <__aeabi_uldivmod>
   2e394:	4907      	ldr	r1, [pc, #28]	; (2e3b4 <z_impl_k_thread_create+0xa4>)
   2e396:	1c42      	adds	r2, r0, #1
   2e398:	f104 0018 	add.w	r0, r4, #24
   2e39c:	f000 fa1a 	bl	2e7d4 <z_add_timeout>
   2e3a0:	e7e8      	b.n	2e374 <z_impl_k_thread_create+0x64>
   2e3a2:	bf00      	nop
   2e3a4:	0003fcbf 	.word	0x0003fcbf
   2e3a8:	0003feb3 	.word	0x0003feb3
   2e3ac:	0003b773 	.word	0x0003b773
   2e3b0:	0003fe61 	.word	0x0003fe61
   2e3b4:	0002d2c9 	.word	0x0002d2c9

0002e3b8 <z_init_static_threads>:
{
   2e3b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   2e3bc:	4f3c      	ldr	r7, [pc, #240]	; (2e4b0 <z_init_static_threads+0xf8>)
   2e3be:	4d3d      	ldr	r5, [pc, #244]	; (2e4b4 <z_init_static_threads+0xfc>)
   2e3c0:	463e      	mov	r6, r7
   2e3c2:	f8df 8100 	ldr.w	r8, [pc, #256]	; 2e4c4 <z_init_static_threads+0x10c>
{
   2e3c6:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   2e3c8:	42bd      	cmp	r5, r7
   2e3ca:	d90e      	bls.n	2e3ea <z_init_static_threads+0x32>
   2e3cc:	493a      	ldr	r1, [pc, #232]	; (2e4b8 <z_init_static_threads+0x100>)
   2e3ce:	f44f 732a 	mov.w	r3, #680	; 0x2a8
   2e3d2:	4642      	mov	r2, r8
   2e3d4:	4839      	ldr	r0, [pc, #228]	; (2e4bc <z_init_static_threads+0x104>)
   2e3d6:	f005 f8ec 	bl	335b2 <printk>
   2e3da:	4839      	ldr	r0, [pc, #228]	; (2e4c0 <z_init_static_threads+0x108>)
   2e3dc:	f005 f8e9 	bl	335b2 <printk>
   2e3e0:	f44f 712a 	mov.w	r1, #680	; 0x2a8
   2e3e4:	4640      	mov	r0, r8
   2e3e6:	f005 fbe5 	bl	33bb4 <assert_post_action>
   2e3ea:	42b5      	cmp	r5, r6
   2e3ec:	f105 0430 	add.w	r4, r5, #48	; 0x30
   2e3f0:	d31f      	bcc.n	2e432 <z_init_static_threads+0x7a>
	k_sched_lock();
   2e3f2:	f7fe fd3b 	bl	2ce6c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   2e3f6:	4c2f      	ldr	r4, [pc, #188]	; (2e4b4 <z_init_static_threads+0xfc>)
   2e3f8:	4d32      	ldr	r5, [pc, #200]	; (2e4c4 <z_init_static_threads+0x10c>)
   2e3fa:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 2e4b8 <z_init_static_threads+0x100>
   2e3fe:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 2e4bc <z_init_static_threads+0x104>
   2e402:	42b4      	cmp	r4, r6
   2e404:	d90e      	bls.n	2e424 <z_init_static_threads+0x6c>
   2e406:	4641      	mov	r1, r8
   2e408:	f240 23c7 	movw	r3, #711	; 0x2c7
   2e40c:	462a      	mov	r2, r5
   2e40e:	4648      	mov	r0, r9
   2e410:	f005 f8cf 	bl	335b2 <printk>
   2e414:	482a      	ldr	r0, [pc, #168]	; (2e4c0 <z_init_static_threads+0x108>)
   2e416:	f005 f8cc 	bl	335b2 <printk>
   2e41a:	f240 21c7 	movw	r1, #711	; 0x2c7
   2e41e:	4628      	mov	r0, r5
   2e420:	f005 fbc8 	bl	33bb4 <assert_post_action>
   2e424:	42b4      	cmp	r4, r6
   2e426:	d321      	bcc.n	2e46c <z_init_static_threads+0xb4>
}
   2e428:	b007      	add	sp, #28
   2e42a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   2e42e:	f7fe be3d 	b.w	2d0ac <k_sched_unlock>
		z_setup_new_thread(
   2e432:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2e436:	9305      	str	r3, [sp, #20]
   2e438:	f854 3c10 	ldr.w	r3, [r4, #-16]
   2e43c:	9304      	str	r3, [sp, #16]
   2e43e:	f854 3c14 	ldr.w	r3, [r4, #-20]
   2e442:	9303      	str	r3, [sp, #12]
   2e444:	f854 3c18 	ldr.w	r3, [r4, #-24]
   2e448:	9302      	str	r3, [sp, #8]
   2e44a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   2e44e:	9301      	str	r3, [sp, #4]
   2e450:	f854 3c20 	ldr.w	r3, [r4, #-32]
   2e454:	9300      	str	r3, [sp, #0]
   2e456:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   2e45a:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   2e45e:	f7ff feff 	bl	2e260 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   2e462:	f854 3c30 	ldr.w	r3, [r4, #-48]
   2e466:	655d      	str	r5, [r3, #84]	; 0x54
   2e468:	4625      	mov	r5, r4
   2e46a:	e7ad      	b.n	2e3c8 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   2e46c:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   2e470:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
   2e474:	d006      	beq.n	2e484 <z_init_static_threads+0xcc>
			schedule_new_thread(thread_data->init_thread,
   2e476:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2e478:	f1bc 0f00 	cmp.w	ip, #0
   2e47c:	d104      	bne.n	2e488 <z_init_static_threads+0xd0>
	z_sched_start(thread);
   2e47e:	4638      	mov	r0, r7
   2e480:	f7fe ff86 	bl	2d390 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   2e484:	3430      	adds	r4, #48	; 0x30
   2e486:	e7bc      	b.n	2e402 <z_init_static_threads+0x4a>
   2e488:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   2e48c:	f240 30e7 	movw	r0, #999	; 0x3e7
   2e490:	2100      	movs	r1, #0
   2e492:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2e496:	2300      	movs	r3, #0
   2e498:	fbee 010c 	umlal	r0, r1, lr, ip
   2e49c:	f7df f968 	bl	d770 <__aeabi_uldivmod>
   2e4a0:	4909      	ldr	r1, [pc, #36]	; (2e4c8 <z_init_static_threads+0x110>)
   2e4a2:	1c42      	adds	r2, r0, #1
   2e4a4:	f107 0018 	add.w	r0, r7, #24
   2e4a8:	f000 f994 	bl	2e7d4 <z_add_timeout>
   2e4ac:	e7ea      	b.n	2e484 <z_init_static_threads+0xcc>
   2e4ae:	bf00      	nop
   2e4b0:	200205e4 	.word	0x200205e4
   2e4b4:	200205b4 	.word	0x200205b4
   2e4b8:	0003fe86 	.word	0x0003fe86
   2e4bc:	0003b773 	.word	0x0003b773
   2e4c0:	0003cbfd 	.word	0x0003cbfd
   2e4c4:	0003feb3 	.word	0x0003feb3
   2e4c8:	0002d2c9 	.word	0x0002d2c9

0002e4cc <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   2e4cc:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
   2e4ce:	b138      	cbz	r0, 2e4e0 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3) == _current_cpu->id) {
   2e4d0:	4b04      	ldr	r3, [pc, #16]	; (2e4e4 <z_spin_lock_valid+0x18>)
   2e4d2:	f000 0003 	and.w	r0, r0, #3
   2e4d6:	7d1b      	ldrb	r3, [r3, #20]
   2e4d8:	1ac0      	subs	r0, r0, r3
   2e4da:	bf18      	it	ne
   2e4dc:	2001      	movne	r0, #1
   2e4de:	4770      	bx	lr
			return false;
		}
	}
	return true;
   2e4e0:	2001      	movs	r0, #1
}
   2e4e2:	4770      	bx	lr
   2e4e4:	200274dc 	.word	0x200274dc

0002e4e8 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   2e4e8:	4a06      	ldr	r2, [pc, #24]	; (2e504 <z_spin_unlock_valid+0x1c>)
   2e4ea:	7d11      	ldrb	r1, [r2, #20]
   2e4ec:	6893      	ldr	r3, [r2, #8]
   2e4ee:	6802      	ldr	r2, [r0, #0]
   2e4f0:	430b      	orrs	r3, r1
   2e4f2:	429a      	cmp	r2, r3
   2e4f4:	f04f 0300 	mov.w	r3, #0
		return false;
	}
	l->thread_cpu = 0;
   2e4f8:	bf06      	itte	eq
   2e4fa:	6003      	streq	r3, [r0, #0]
	return true;
   2e4fc:	2001      	moveq	r0, #1
		return false;
   2e4fe:	4618      	movne	r0, r3
}
   2e500:	4770      	bx	lr
   2e502:	bf00      	nop
   2e504:	200274dc 	.word	0x200274dc

0002e508 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   2e508:	4a02      	ldr	r2, [pc, #8]	; (2e514 <z_spin_lock_set_owner+0xc>)
   2e50a:	7d11      	ldrb	r1, [r2, #20]
   2e50c:	6893      	ldr	r3, [r2, #8]
   2e50e:	430b      	orrs	r3, r1
   2e510:	6003      	str	r3, [r0, #0]
}
   2e512:	4770      	bx	lr
   2e514:	200274dc 	.word	0x200274dc

0002e518 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   2e518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e51c:	4605      	mov	r5, r0
   2e51e:	b086      	sub	sp, #24
   2e520:	460e      	mov	r6, r1
   2e522:	4617      	mov	r7, r2
   2e524:	4698      	mov	r8, r3
	z_impl_k_queue_init(queue);
   2e526:	f00a fba5 	bl	38c74 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   2e52a:	f105 041c 	add.w	r4, r5, #28
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2e52e:	2000      	movs	r0, #0
   2e530:	4b09      	ldr	r3, [pc, #36]	; (2e558 <k_work_q_start+0x40>)
   2e532:	e9cd 0004 	strd	r0, r0, [sp, #16]
   2e536:	e9cd 0802 	strd	r0, r8, [sp, #8]
   2e53a:	e9cd 5000 	strd	r5, r0, [sp]
   2e53e:	463a      	mov	r2, r7
   2e540:	4631      	mov	r1, r6
   2e542:	4620      	mov	r0, r4
   2e544:	f7ff fee4 	bl	2e310 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   2e548:	4620      	mov	r0, r4
   2e54a:	4904      	ldr	r1, [pc, #16]	; (2e55c <k_work_q_start+0x44>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   2e54c:	b006      	add	sp, #24
   2e54e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2e552:	f00a bbf3 	b.w	38d3c <z_impl_k_thread_name_set>
   2e556:	bf00      	nop
   2e558:	00033623 	.word	0x00033623
   2e55c:	0003ff87 	.word	0x0003ff87

0002e560 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   2e560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e564:	4606      	mov	r6, r0
   2e566:	460d      	mov	r5, r1
   2e568:	4690      	mov	r8, r2
	__asm__ volatile(
   2e56a:	f04f 0320 	mov.w	r3, #32
   2e56e:	f3ef 8711 	mrs	r7, BASEPRI
   2e572:	f383 8811 	msr	BASEPRI, r3
   2e576:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2e57a:	483a      	ldr	r0, [pc, #232]	; (2e664 <k_delayed_work_submit_to_queue+0x104>)
   2e57c:	f7ff ffa6 	bl	2e4cc <z_spin_lock_valid>
   2e580:	b968      	cbnz	r0, 2e59e <k_delayed_work_submit_to_queue+0x3e>
   2e582:	235c      	movs	r3, #92	; 0x5c
   2e584:	4a38      	ldr	r2, [pc, #224]	; (2e668 <k_delayed_work_submit_to_queue+0x108>)
   2e586:	4939      	ldr	r1, [pc, #228]	; (2e66c <k_delayed_work_submit_to_queue+0x10c>)
   2e588:	4839      	ldr	r0, [pc, #228]	; (2e670 <k_delayed_work_submit_to_queue+0x110>)
   2e58a:	f005 f812 	bl	335b2 <printk>
   2e58e:	4935      	ldr	r1, [pc, #212]	; (2e664 <k_delayed_work_submit_to_queue+0x104>)
   2e590:	4838      	ldr	r0, [pc, #224]	; (2e674 <k_delayed_work_submit_to_queue+0x114>)
   2e592:	f005 f80e 	bl	335b2 <printk>
   2e596:	215c      	movs	r1, #92	; 0x5c
   2e598:	4833      	ldr	r0, [pc, #204]	; (2e668 <k_delayed_work_submit_to_queue+0x108>)
   2e59a:	f005 fb0b 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2e59e:	4831      	ldr	r0, [pc, #196]	; (2e664 <k_delayed_work_submit_to_queue+0x104>)
   2e5a0:	f7ff ffb2 	bl	2e508 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   2e5a4:	69eb      	ldr	r3, [r5, #28]
   2e5a6:	b30b      	cbz	r3, 2e5ec <k_delayed_work_submit_to_queue+0x8c>
   2e5a8:	42b3      	cmp	r3, r6
   2e5aa:	d157      	bne.n	2e65c <k_delayed_work_submit_to_queue+0xfc>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   2e5ac:	4628      	mov	r0, r5
   2e5ae:	f00a fbeb 	bl	38d88 <work_cancel>
		/* -EALREADY indicates the work has already completed so this
		 * is likely a recurring work.
		 */
		if (err == -EALREADY) {
   2e5b2:	f110 0f78 	cmn.w	r0, #120	; 0x78
		err = work_cancel(work);
   2e5b6:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   2e5b8:	d01a      	beq.n	2e5f0 <k_delayed_work_submit_to_queue+0x90>
			err = 0;
		} else if (err < 0) {
   2e5ba:	2800      	cmp	r0, #0
   2e5bc:	da19      	bge.n	2e5f2 <k_delayed_work_submit_to_queue+0x92>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2e5be:	4829      	ldr	r0, [pc, #164]	; (2e664 <k_delayed_work_submit_to_queue+0x104>)
   2e5c0:	f7ff ff92 	bl	2e4e8 <z_spin_unlock_valid>
   2e5c4:	b968      	cbnz	r0, 2e5e2 <k_delayed_work_submit_to_queue+0x82>
   2e5c6:	2384      	movs	r3, #132	; 0x84
   2e5c8:	4a27      	ldr	r2, [pc, #156]	; (2e668 <k_delayed_work_submit_to_queue+0x108>)
   2e5ca:	492b      	ldr	r1, [pc, #172]	; (2e678 <k_delayed_work_submit_to_queue+0x118>)
   2e5cc:	4828      	ldr	r0, [pc, #160]	; (2e670 <k_delayed_work_submit_to_queue+0x110>)
   2e5ce:	f004 fff0 	bl	335b2 <printk>
   2e5d2:	4924      	ldr	r1, [pc, #144]	; (2e664 <k_delayed_work_submit_to_queue+0x104>)
   2e5d4:	4829      	ldr	r0, [pc, #164]	; (2e67c <k_delayed_work_submit_to_queue+0x11c>)
   2e5d6:	f004 ffec 	bl	335b2 <printk>
   2e5da:	2184      	movs	r1, #132	; 0x84
   2e5dc:	4822      	ldr	r0, [pc, #136]	; (2e668 <k_delayed_work_submit_to_queue+0x108>)
   2e5de:	f005 fae9 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   2e5e2:	f387 8811 	msr	BASEPRI, r7
   2e5e6:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   2e5ea:	e021      	b.n	2e630 <k_delayed_work_submit_to_queue+0xd0>
	if (work->work_q == work_q) {
   2e5ec:	2e00      	cmp	r6, #0
   2e5ee:	d0dd      	beq.n	2e5ac <k_delayed_work_submit_to_queue+0x4c>
	int err = 0;
   2e5f0:	2400      	movs	r4, #0
	work->work_q = work_q;
   2e5f2:	61ee      	str	r6, [r5, #28]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2e5f4:	f1b8 0f00 	cmp.w	r8, #0
   2e5f8:	d11d      	bne.n	2e636 <k_delayed_work_submit_to_queue+0xd6>
   2e5fa:	481a      	ldr	r0, [pc, #104]	; (2e664 <k_delayed_work_submit_to_queue+0x104>)
   2e5fc:	f7ff ff74 	bl	2e4e8 <z_spin_unlock_valid>
   2e600:	b968      	cbnz	r0, 2e61e <k_delayed_work_submit_to_queue+0xbe>
   2e602:	2384      	movs	r3, #132	; 0x84
   2e604:	4a18      	ldr	r2, [pc, #96]	; (2e668 <k_delayed_work_submit_to_queue+0x108>)
   2e606:	491c      	ldr	r1, [pc, #112]	; (2e678 <k_delayed_work_submit_to_queue+0x118>)
   2e608:	4819      	ldr	r0, [pc, #100]	; (2e670 <k_delayed_work_submit_to_queue+0x110>)
   2e60a:	f004 ffd2 	bl	335b2 <printk>
   2e60e:	4915      	ldr	r1, [pc, #84]	; (2e664 <k_delayed_work_submit_to_queue+0x104>)
   2e610:	481a      	ldr	r0, [pc, #104]	; (2e67c <k_delayed_work_submit_to_queue+0x11c>)
   2e612:	f004 ffce 	bl	335b2 <printk>
   2e616:	2184      	movs	r1, #132	; 0x84
   2e618:	4813      	ldr	r0, [pc, #76]	; (2e668 <k_delayed_work_submit_to_queue+0x108>)
   2e61a:	f005 facb 	bl	33bb4 <assert_post_action>
   2e61e:	f387 8811 	msr	BASEPRI, r7
   2e622:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   2e626:	4629      	mov	r1, r5
   2e628:	4630      	mov	r0, r6
   2e62a:	f00a fb94 	bl	38d56 <k_work_submit_to_queue>
		return 0;
   2e62e:	2400      	movs	r4, #0
}
   2e630:	4620      	mov	r0, r4
   2e632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e636:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   2e63a:	f240 30e7 	movw	r0, #999	; 0x3e7
   2e63e:	2100      	movs	r1, #0
   2e640:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2e644:	2300      	movs	r3, #0
   2e646:	fbe6 0108 	umlal	r0, r1, r6, r8
   2e64a:	f7df f891 	bl	d770 <__aeabi_uldivmod>
	z_add_timeout(&work->timeout, work_timeout, delay);
   2e64e:	490c      	ldr	r1, [pc, #48]	; (2e680 <k_delayed_work_submit_to_queue+0x120>)
   2e650:	1c42      	adds	r2, r0, #1
   2e652:	f105 000c 	add.w	r0, r5, #12
   2e656:	f000 f8bd 	bl	2e7d4 <z_add_timeout>
   2e65a:	e7b0      	b.n	2e5be <k_delayed_work_submit_to_queue+0x5e>
		err = -EADDRINUSE;
   2e65c:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   2e660:	e7ad      	b.n	2e5be <k_delayed_work_submit_to_queue+0x5e>
   2e662:	bf00      	nop
   2e664:	200275f8 	.word	0x200275f8
   2e668:	0003c745 	.word	0x0003c745
   2e66c:	0003c76b 	.word	0x0003c76b
   2e670:	0003b773 	.word	0x0003b773
   2e674:	0003c780 	.word	0x0003c780
   2e678:	0003c798 	.word	0x0003c798
   2e67c:	0003c7af 	.word	0x0003c7af
   2e680:	00038d7f 	.word	0x00038d7f

0002e684 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   2e684:	b538      	push	{r3, r4, r5, lr}
	if (!work->work_q) {
   2e686:	69c3      	ldr	r3, [r0, #28]
{
   2e688:	4604      	mov	r4, r0
	if (!work->work_q) {
   2e68a:	2b00      	cmp	r3, #0
   2e68c:	d038      	beq.n	2e700 <k_delayed_work_cancel+0x7c>
	__asm__ volatile(
   2e68e:	f04f 0320 	mov.w	r3, #32
   2e692:	f3ef 8511 	mrs	r5, BASEPRI
   2e696:	f383 8811 	msr	BASEPRI, r3
   2e69a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2e69e:	481a      	ldr	r0, [pc, #104]	; (2e708 <k_delayed_work_cancel+0x84>)
   2e6a0:	f7ff ff14 	bl	2e4cc <z_spin_lock_valid>
   2e6a4:	b968      	cbnz	r0, 2e6c2 <k_delayed_work_cancel+0x3e>
   2e6a6:	235c      	movs	r3, #92	; 0x5c
   2e6a8:	4a18      	ldr	r2, [pc, #96]	; (2e70c <k_delayed_work_cancel+0x88>)
   2e6aa:	4919      	ldr	r1, [pc, #100]	; (2e710 <k_delayed_work_cancel+0x8c>)
   2e6ac:	4819      	ldr	r0, [pc, #100]	; (2e714 <k_delayed_work_cancel+0x90>)
   2e6ae:	f004 ff80 	bl	335b2 <printk>
   2e6b2:	4915      	ldr	r1, [pc, #84]	; (2e708 <k_delayed_work_cancel+0x84>)
   2e6b4:	4818      	ldr	r0, [pc, #96]	; (2e718 <k_delayed_work_cancel+0x94>)
   2e6b6:	f004 ff7c 	bl	335b2 <printk>
   2e6ba:	215c      	movs	r1, #92	; 0x5c
   2e6bc:	4813      	ldr	r0, [pc, #76]	; (2e70c <k_delayed_work_cancel+0x88>)
   2e6be:	f005 fa79 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2e6c2:	4811      	ldr	r0, [pc, #68]	; (2e708 <k_delayed_work_cancel+0x84>)
   2e6c4:	f7ff ff20 	bl	2e508 <z_spin_lock_set_owner>
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = work_cancel(work);
   2e6c8:	4620      	mov	r0, r4
   2e6ca:	f00a fb5d 	bl	38d88 <work_cancel>
   2e6ce:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2e6d0:	480d      	ldr	r0, [pc, #52]	; (2e708 <k_delayed_work_cancel+0x84>)
   2e6d2:	f7ff ff09 	bl	2e4e8 <z_spin_unlock_valid>
   2e6d6:	b968      	cbnz	r0, 2e6f4 <k_delayed_work_cancel+0x70>
   2e6d8:	2384      	movs	r3, #132	; 0x84
   2e6da:	4a0c      	ldr	r2, [pc, #48]	; (2e70c <k_delayed_work_cancel+0x88>)
   2e6dc:	490f      	ldr	r1, [pc, #60]	; (2e71c <k_delayed_work_cancel+0x98>)
   2e6de:	480d      	ldr	r0, [pc, #52]	; (2e714 <k_delayed_work_cancel+0x90>)
   2e6e0:	f004 ff67 	bl	335b2 <printk>
   2e6e4:	4908      	ldr	r1, [pc, #32]	; (2e708 <k_delayed_work_cancel+0x84>)
   2e6e6:	480e      	ldr	r0, [pc, #56]	; (2e720 <k_delayed_work_cancel+0x9c>)
   2e6e8:	f004 ff63 	bl	335b2 <printk>
   2e6ec:	2184      	movs	r1, #132	; 0x84
   2e6ee:	4807      	ldr	r0, [pc, #28]	; (2e70c <k_delayed_work_cancel+0x88>)
   2e6f0:	f005 fa60 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   2e6f4:	f385 8811 	msr	BASEPRI, r5
   2e6f8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   2e6fc:	4620      	mov	r0, r4
   2e6fe:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2e700:	f06f 0415 	mvn.w	r4, #21
   2e704:	e7fa      	b.n	2e6fc <k_delayed_work_cancel+0x78>
   2e706:	bf00      	nop
   2e708:	200275f8 	.word	0x200275f8
   2e70c:	0003c745 	.word	0x0003c745
   2e710:	0003c76b 	.word	0x0003c76b
   2e714:	0003b773 	.word	0x0003b773
   2e718:	0003c780 	.word	0x0003c780
   2e71c:	0003c798 	.word	0x0003c798
   2e720:	0003c7af 	.word	0x0003c7af

0002e724 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   2e724:	4b03      	ldr	r3, [pc, #12]	; (2e734 <elapsed+0x10>)
   2e726:	681b      	ldr	r3, [r3, #0]
   2e728:	b90b      	cbnz	r3, 2e72e <elapsed+0xa>
   2e72a:	f7eb be8f 	b.w	1a44c <z_clock_elapsed>
}
   2e72e:	2000      	movs	r0, #0
   2e730:	4770      	bx	lr
   2e732:	bf00      	nop
   2e734:	200275fc 	.word	0x200275fc

0002e738 <next_timeout>:
	return list->head == list;
   2e738:	4b0b      	ldr	r3, [pc, #44]	; (2e768 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   2e73a:	b510      	push	{r4, lr}
   2e73c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2e73e:	429c      	cmp	r4, r3
   2e740:	bf08      	it	eq
   2e742:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   2e744:	f7ff ffee 	bl	2e724 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   2e748:	b154      	cbz	r4, 2e760 <next_timeout+0x28>
   2e74a:	68a3      	ldr	r3, [r4, #8]
   2e74c:	1a18      	subs	r0, r3, r0
   2e74e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   2e752:	4b06      	ldr	r3, [pc, #24]	; (2e76c <next_timeout+0x34>)
   2e754:	691b      	ldr	r3, [r3, #16]
   2e756:	b113      	cbz	r3, 2e75e <next_timeout+0x26>
   2e758:	4298      	cmp	r0, r3
   2e75a:	bfa8      	it	ge
   2e75c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   2e75e:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   2e760:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   2e764:	e7f5      	b.n	2e752 <next_timeout+0x1a>
   2e766:	bf00      	nop
   2e768:	2002022c 	.word	0x2002022c
   2e76c:	200274dc 	.word	0x200274dc

0002e770 <timeout_rem>:
	return ret;
}

/* must be locked */
static k_ticks_t timeout_rem(struct _timeout *timeout)
{
   2e770:	b510      	push	{r4, lr}
	k_ticks_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   2e772:	6804      	ldr	r4, [r0, #0]
   2e774:	b1b4      	cbz	r4, 2e7a4 <timeout_rem+0x34>
	return list->head == list;
   2e776:	4a0c      	ldr	r2, [pc, #48]	; (2e7a8 <timeout_rem+0x38>)
   2e778:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2e77a:	4293      	cmp	r3, r2
   2e77c:	d010      	beq.n	2e7a0 <timeout_rem+0x30>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2e77e:	2400      	movs	r4, #0
   2e780:	6852      	ldr	r2, [r2, #4]
		return 0;
	}

	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   2e782:	b91b      	cbnz	r3, 2e78c <timeout_rem+0x1c>
		if (timeout == t) {
			break;
		}
	}

	return ticks - elapsed();
   2e784:	f7ff ffce 	bl	2e724 <elapsed>
   2e788:	1a20      	subs	r0, r4, r0
}
   2e78a:	bd10      	pop	{r4, pc}
		ticks += t->dticks;
   2e78c:	6899      	ldr	r1, [r3, #8]
		if (timeout == t) {
   2e78e:	4283      	cmp	r3, r0
		ticks += t->dticks;
   2e790:	440c      	add	r4, r1
		if (timeout == t) {
   2e792:	d0f7      	beq.n	2e784 <timeout_rem+0x14>
   2e794:	2b00      	cmp	r3, #0
   2e796:	d0f5      	beq.n	2e784 <timeout_rem+0x14>
	return (node == list->tail) ? NULL : node->next;
   2e798:	4293      	cmp	r3, r2
   2e79a:	d0f3      	beq.n	2e784 <timeout_rem+0x14>
   2e79c:	681b      	ldr	r3, [r3, #0]
   2e79e:	e7f0      	b.n	2e782 <timeout_rem+0x12>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2e7a0:	2400      	movs	r4, #0
   2e7a2:	e7ef      	b.n	2e784 <timeout_rem+0x14>
		return 0;
   2e7a4:	4620      	mov	r0, r4
   2e7a6:	e7f0      	b.n	2e78a <timeout_rem+0x1a>
   2e7a8:	2002022c 	.word	0x2002022c

0002e7ac <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2e7ac:	6803      	ldr	r3, [r0, #0]
   2e7ae:	b140      	cbz	r0, 2e7c2 <remove_timeout+0x16>
   2e7b0:	4a07      	ldr	r2, [pc, #28]	; (2e7d0 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
   2e7b2:	6852      	ldr	r2, [r2, #4]
   2e7b4:	4290      	cmp	r0, r2
   2e7b6:	d004      	beq.n	2e7c2 <remove_timeout+0x16>
	if (next(t) != NULL) {
   2e7b8:	b11b      	cbz	r3, 2e7c2 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   2e7ba:	689a      	ldr	r2, [r3, #8]
   2e7bc:	6881      	ldr	r1, [r0, #8]
   2e7be:	440a      	add	r2, r1
   2e7c0:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   2e7c2:	6842      	ldr	r2, [r0, #4]
   2e7c4:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   2e7c6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2e7c8:	2300      	movs	r3, #0
	node->prev = NULL;
   2e7ca:	e9c0 3300 	strd	r3, r3, [r0]
}
   2e7ce:	4770      	bx	lr
   2e7d0:	2002022c 	.word	0x2002022c

0002e7d4 <z_add_timeout>:
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2e7d4:	1c53      	adds	r3, r2, #1
{
   2e7d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2e7da:	4604      	mov	r4, r0
   2e7dc:	460e      	mov	r6, r1
   2e7de:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2e7e0:	d07f      	beq.n	2e8e2 <z_add_timeout+0x10e>
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   2e7e2:	6803      	ldr	r3, [r0, #0]
   2e7e4:	b163      	cbz	r3, 2e800 <z_add_timeout+0x2c>
   2e7e6:	4943      	ldr	r1, [pc, #268]	; (2e8f4 <z_add_timeout+0x120>)
   2e7e8:	2367      	movs	r3, #103	; 0x67
   2e7ea:	4a43      	ldr	r2, [pc, #268]	; (2e8f8 <z_add_timeout+0x124>)
   2e7ec:	4843      	ldr	r0, [pc, #268]	; (2e8fc <z_add_timeout+0x128>)
   2e7ee:	f004 fee0 	bl	335b2 <printk>
   2e7f2:	4843      	ldr	r0, [pc, #268]	; (2e900 <z_add_timeout+0x12c>)
   2e7f4:	f004 fedd 	bl	335b2 <printk>
   2e7f8:	2167      	movs	r1, #103	; 0x67
   2e7fa:	483f      	ldr	r0, [pc, #252]	; (2e8f8 <z_add_timeout+0x124>)
   2e7fc:	f005 f9da 	bl	33bb4 <assert_post_action>
	ticks = MAX(1, ticks);
   2e800:	2d00      	cmp	r5, #0
   2e802:	bf08      	it	eq
   2e804:	2501      	moveq	r5, #1
	to->fn = fn;
   2e806:	60e6      	str	r6, [r4, #12]
	__asm__ volatile(
   2e808:	f04f 0320 	mov.w	r3, #32
   2e80c:	f3ef 8811 	mrs	r8, BASEPRI
   2e810:	f383 8811 	msr	BASEPRI, r3
   2e814:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2e818:	483a      	ldr	r0, [pc, #232]	; (2e904 <z_add_timeout+0x130>)
   2e81a:	f7ff fe57 	bl	2e4cc <z_spin_lock_valid>
   2e81e:	b968      	cbnz	r0, 2e83c <z_add_timeout+0x68>
   2e820:	235c      	movs	r3, #92	; 0x5c
   2e822:	4a39      	ldr	r2, [pc, #228]	; (2e908 <z_add_timeout+0x134>)
   2e824:	4939      	ldr	r1, [pc, #228]	; (2e90c <z_add_timeout+0x138>)
   2e826:	4835      	ldr	r0, [pc, #212]	; (2e8fc <z_add_timeout+0x128>)
   2e828:	f004 fec3 	bl	335b2 <printk>
   2e82c:	4935      	ldr	r1, [pc, #212]	; (2e904 <z_add_timeout+0x130>)
   2e82e:	4838      	ldr	r0, [pc, #224]	; (2e910 <z_add_timeout+0x13c>)
   2e830:	f004 febf 	bl	335b2 <printk>
   2e834:	215c      	movs	r1, #92	; 0x5c
   2e836:	4834      	ldr	r0, [pc, #208]	; (2e908 <z_add_timeout+0x134>)
   2e838:	f005 f9bc 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2e83c:	4831      	ldr	r0, [pc, #196]	; (2e904 <z_add_timeout+0x130>)
   2e83e:	f7ff fe63 	bl	2e508 <z_spin_lock_set_owner>
		to->dticks = ticks + elapsed();
   2e842:	f7ff ff6f 	bl	2e724 <elapsed>
   2e846:	4405      	add	r5, r0
   2e848:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   2e84a:	4d32      	ldr	r5, [pc, #200]	; (2e914 <z_add_timeout+0x140>)
   2e84c:	682e      	ldr	r6, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2e84e:	42ae      	cmp	r6, r5
   2e850:	d005      	beq.n	2e85e <z_add_timeout+0x8a>
			__ASSERT(t->dticks >= 0, "");
   2e852:	4f29      	ldr	r7, [pc, #164]	; (2e8f8 <z_add_timeout+0x124>)
   2e854:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 2e920 <z_add_timeout+0x14c>
   2e858:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 2e8fc <z_add_timeout+0x128>
		for (t = first(); t != NULL; t = next(t)) {
   2e85c:	b936      	cbnz	r6, 2e86c <z_add_timeout+0x98>
	node->prev = list->tail;
   2e85e:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   2e860:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   2e862:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   2e864:	686b      	ldr	r3, [r5, #4]
   2e866:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2e868:	606c      	str	r4, [r5, #4]
   2e86a:	e01a      	b.n	2e8a2 <z_add_timeout+0xce>
			__ASSERT(t->dticks >= 0, "");
   2e86c:	68b3      	ldr	r3, [r6, #8]
   2e86e:	2b00      	cmp	r3, #0
   2e870:	da0c      	bge.n	2e88c <z_add_timeout+0xb8>
   2e872:	4649      	mov	r1, r9
   2e874:	2370      	movs	r3, #112	; 0x70
   2e876:	463a      	mov	r2, r7
   2e878:	4650      	mov	r0, sl
   2e87a:	f004 fe9a 	bl	335b2 <printk>
   2e87e:	4820      	ldr	r0, [pc, #128]	; (2e900 <z_add_timeout+0x12c>)
   2e880:	f004 fe97 	bl	335b2 <printk>
   2e884:	2170      	movs	r1, #112	; 0x70
   2e886:	4638      	mov	r0, r7
   2e888:	f005 f994 	bl	33bb4 <assert_post_action>
			if (t->dticks > to->dticks) {
   2e88c:	68b2      	ldr	r2, [r6, #8]
   2e88e:	68a3      	ldr	r3, [r4, #8]
   2e890:	429a      	cmp	r2, r3
   2e892:	dd28      	ble.n	2e8e6 <z_add_timeout+0x112>
				t->dticks -= to->dticks;
   2e894:	1ad3      	subs	r3, r2, r3
   2e896:	60b3      	str	r3, [r6, #8]
	node->prev = successor->prev;
   2e898:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2e89a:	e9c4 6300 	strd	r6, r3, [r4]
	successor->prev->next = node;
   2e89e:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   2e8a0:	6074      	str	r4, [r6, #4]
	return list->head == list;
   2e8a2:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2e8a4:	42ab      	cmp	r3, r5
   2e8a6:	d006      	beq.n	2e8b6 <z_add_timeout+0xe2>
		if (to == first()) {
   2e8a8:	429c      	cmp	r4, r3
   2e8aa:	d104      	bne.n	2e8b6 <z_add_timeout+0xe2>
			z_clock_set_timeout(next_timeout(), false);
   2e8ac:	f7ff ff44 	bl	2e738 <next_timeout>
   2e8b0:	2100      	movs	r1, #0
   2e8b2:	f7eb fd67 	bl	1a384 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2e8b6:	4813      	ldr	r0, [pc, #76]	; (2e904 <z_add_timeout+0x130>)
   2e8b8:	f7ff fe16 	bl	2e4e8 <z_spin_unlock_valid>
   2e8bc:	b968      	cbnz	r0, 2e8da <z_add_timeout+0x106>
   2e8be:	2384      	movs	r3, #132	; 0x84
   2e8c0:	4a11      	ldr	r2, [pc, #68]	; (2e908 <z_add_timeout+0x134>)
   2e8c2:	4915      	ldr	r1, [pc, #84]	; (2e918 <z_add_timeout+0x144>)
   2e8c4:	480d      	ldr	r0, [pc, #52]	; (2e8fc <z_add_timeout+0x128>)
   2e8c6:	f004 fe74 	bl	335b2 <printk>
   2e8ca:	490e      	ldr	r1, [pc, #56]	; (2e904 <z_add_timeout+0x130>)
   2e8cc:	4813      	ldr	r0, [pc, #76]	; (2e91c <z_add_timeout+0x148>)
   2e8ce:	f004 fe70 	bl	335b2 <printk>
   2e8d2:	2184      	movs	r1, #132	; 0x84
   2e8d4:	480c      	ldr	r0, [pc, #48]	; (2e908 <z_add_timeout+0x134>)
   2e8d6:	f005 f96d 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   2e8da:	f388 8811 	msr	BASEPRI, r8
   2e8de:	f3bf 8f6f 	isb	sy
}
   2e8e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			to->dticks -= t->dticks;
   2e8e6:	1a9b      	subs	r3, r3, r2
   2e8e8:	60a3      	str	r3, [r4, #8]
	return (node == list->tail) ? NULL : node->next;
   2e8ea:	686b      	ldr	r3, [r5, #4]
   2e8ec:	42b3      	cmp	r3, r6
   2e8ee:	d0b6      	beq.n	2e85e <z_add_timeout+0x8a>
   2e8f0:	6836      	ldr	r6, [r6, #0]
   2e8f2:	e7b3      	b.n	2e85c <z_add_timeout+0x88>
   2e8f4:	0003ffb5 	.word	0x0003ffb5
   2e8f8:	0003ff91 	.word	0x0003ff91
   2e8fc:	0003b773 	.word	0x0003b773
   2e900:	0003cb7f 	.word	0x0003cb7f
   2e904:	20027600 	.word	0x20027600
   2e908:	0003c745 	.word	0x0003c745
   2e90c:	0003c76b 	.word	0x0003c76b
   2e910:	0003c780 	.word	0x0003c780
   2e914:	2002022c 	.word	0x2002022c
   2e918:	0003c798 	.word	0x0003c798
   2e91c:	0003c7af 	.word	0x0003c7af
   2e920:	0003ffd5 	.word	0x0003ffd5

0002e924 <z_abort_timeout>:
{
   2e924:	b538      	push	{r3, r4, r5, lr}
   2e926:	4604      	mov	r4, r0
	__asm__ volatile(
   2e928:	f04f 0320 	mov.w	r3, #32
   2e92c:	f3ef 8511 	mrs	r5, BASEPRI
   2e930:	f383 8811 	msr	BASEPRI, r3
   2e934:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2e938:	481a      	ldr	r0, [pc, #104]	; (2e9a4 <z_abort_timeout+0x80>)
   2e93a:	f7ff fdc7 	bl	2e4cc <z_spin_lock_valid>
   2e93e:	b968      	cbnz	r0, 2e95c <z_abort_timeout+0x38>
   2e940:	235c      	movs	r3, #92	; 0x5c
   2e942:	4a19      	ldr	r2, [pc, #100]	; (2e9a8 <z_abort_timeout+0x84>)
   2e944:	4919      	ldr	r1, [pc, #100]	; (2e9ac <z_abort_timeout+0x88>)
   2e946:	481a      	ldr	r0, [pc, #104]	; (2e9b0 <z_abort_timeout+0x8c>)
   2e948:	f004 fe33 	bl	335b2 <printk>
   2e94c:	4915      	ldr	r1, [pc, #84]	; (2e9a4 <z_abort_timeout+0x80>)
   2e94e:	4819      	ldr	r0, [pc, #100]	; (2e9b4 <z_abort_timeout+0x90>)
   2e950:	f004 fe2f 	bl	335b2 <printk>
   2e954:	215c      	movs	r1, #92	; 0x5c
   2e956:	4814      	ldr	r0, [pc, #80]	; (2e9a8 <z_abort_timeout+0x84>)
   2e958:	f005 f92c 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2e95c:	4811      	ldr	r0, [pc, #68]	; (2e9a4 <z_abort_timeout+0x80>)
   2e95e:	f7ff fdd3 	bl	2e508 <z_spin_lock_set_owner>
		if (sys_dnode_is_linked(&to->node)) {
   2e962:	6823      	ldr	r3, [r4, #0]
   2e964:	b1db      	cbz	r3, 2e99e <z_abort_timeout+0x7a>
			remove_timeout(to);
   2e966:	4620      	mov	r0, r4
   2e968:	f7ff ff20 	bl	2e7ac <remove_timeout>
			ret = 0;
   2e96c:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2e96e:	480d      	ldr	r0, [pc, #52]	; (2e9a4 <z_abort_timeout+0x80>)
   2e970:	f7ff fdba 	bl	2e4e8 <z_spin_unlock_valid>
   2e974:	b968      	cbnz	r0, 2e992 <z_abort_timeout+0x6e>
   2e976:	2384      	movs	r3, #132	; 0x84
   2e978:	4a0b      	ldr	r2, [pc, #44]	; (2e9a8 <z_abort_timeout+0x84>)
   2e97a:	490f      	ldr	r1, [pc, #60]	; (2e9b8 <z_abort_timeout+0x94>)
   2e97c:	480c      	ldr	r0, [pc, #48]	; (2e9b0 <z_abort_timeout+0x8c>)
   2e97e:	f004 fe18 	bl	335b2 <printk>
   2e982:	4908      	ldr	r1, [pc, #32]	; (2e9a4 <z_abort_timeout+0x80>)
   2e984:	480d      	ldr	r0, [pc, #52]	; (2e9bc <z_abort_timeout+0x98>)
   2e986:	f004 fe14 	bl	335b2 <printk>
   2e98a:	2184      	movs	r1, #132	; 0x84
   2e98c:	4806      	ldr	r0, [pc, #24]	; (2e9a8 <z_abort_timeout+0x84>)
   2e98e:	f005 f911 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   2e992:	f385 8811 	msr	BASEPRI, r5
   2e996:	f3bf 8f6f 	isb	sy
}
   2e99a:	4620      	mov	r0, r4
   2e99c:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   2e99e:	f06f 0415 	mvn.w	r4, #21
   2e9a2:	e7e4      	b.n	2e96e <z_abort_timeout+0x4a>
   2e9a4:	20027600 	.word	0x20027600
   2e9a8:	0003c745 	.word	0x0003c745
   2e9ac:	0003c76b 	.word	0x0003c76b
   2e9b0:	0003b773 	.word	0x0003b773
   2e9b4:	0003c780 	.word	0x0003c780
   2e9b8:	0003c798 	.word	0x0003c798
   2e9bc:	0003c7af 	.word	0x0003c7af

0002e9c0 <z_timeout_remaining>:

k_ticks_t z_timeout_remaining(struct _timeout *timeout)
{
   2e9c0:	b538      	push	{r3, r4, r5, lr}
   2e9c2:	4604      	mov	r4, r0
	__asm__ volatile(
   2e9c4:	f04f 0320 	mov.w	r3, #32
   2e9c8:	f3ef 8511 	mrs	r5, BASEPRI
   2e9cc:	f383 8811 	msr	BASEPRI, r3
   2e9d0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2e9d4:	4818      	ldr	r0, [pc, #96]	; (2ea38 <z_timeout_remaining+0x78>)
   2e9d6:	f7ff fd79 	bl	2e4cc <z_spin_lock_valid>
   2e9da:	b968      	cbnz	r0, 2e9f8 <z_timeout_remaining+0x38>
   2e9dc:	235c      	movs	r3, #92	; 0x5c
   2e9de:	4a17      	ldr	r2, [pc, #92]	; (2ea3c <z_timeout_remaining+0x7c>)
   2e9e0:	4917      	ldr	r1, [pc, #92]	; (2ea40 <z_timeout_remaining+0x80>)
   2e9e2:	4818      	ldr	r0, [pc, #96]	; (2ea44 <z_timeout_remaining+0x84>)
   2e9e4:	f004 fde5 	bl	335b2 <printk>
   2e9e8:	4913      	ldr	r1, [pc, #76]	; (2ea38 <z_timeout_remaining+0x78>)
   2e9ea:	4817      	ldr	r0, [pc, #92]	; (2ea48 <z_timeout_remaining+0x88>)
   2e9ec:	f004 fde1 	bl	335b2 <printk>
   2e9f0:	215c      	movs	r1, #92	; 0x5c
   2e9f2:	4812      	ldr	r0, [pc, #72]	; (2ea3c <z_timeout_remaining+0x7c>)
   2e9f4:	f005 f8de 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2e9f8:	480f      	ldr	r0, [pc, #60]	; (2ea38 <z_timeout_remaining+0x78>)
   2e9fa:	f7ff fd85 	bl	2e508 <z_spin_lock_set_owner>
	k_ticks_t ticks = 0;

	LOCKED(&timeout_lock) {
		ticks = timeout_rem(timeout);
   2e9fe:	4620      	mov	r0, r4
   2ea00:	f7ff feb6 	bl	2e770 <timeout_rem>
   2ea04:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2ea06:	480c      	ldr	r0, [pc, #48]	; (2ea38 <z_timeout_remaining+0x78>)
   2ea08:	f7ff fd6e 	bl	2e4e8 <z_spin_unlock_valid>
   2ea0c:	b968      	cbnz	r0, 2ea2a <z_timeout_remaining+0x6a>
   2ea0e:	2384      	movs	r3, #132	; 0x84
   2ea10:	4a0a      	ldr	r2, [pc, #40]	; (2ea3c <z_timeout_remaining+0x7c>)
   2ea12:	490e      	ldr	r1, [pc, #56]	; (2ea4c <z_timeout_remaining+0x8c>)
   2ea14:	480b      	ldr	r0, [pc, #44]	; (2ea44 <z_timeout_remaining+0x84>)
   2ea16:	f004 fdcc 	bl	335b2 <printk>
   2ea1a:	4907      	ldr	r1, [pc, #28]	; (2ea38 <z_timeout_remaining+0x78>)
   2ea1c:	480c      	ldr	r0, [pc, #48]	; (2ea50 <z_timeout_remaining+0x90>)
   2ea1e:	f004 fdc8 	bl	335b2 <printk>
   2ea22:	2184      	movs	r1, #132	; 0x84
   2ea24:	4805      	ldr	r0, [pc, #20]	; (2ea3c <z_timeout_remaining+0x7c>)
   2ea26:	f005 f8c5 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   2ea2a:	f385 8811 	msr	BASEPRI, r5
   2ea2e:	f3bf 8f6f 	isb	sy
	}

	return ticks;
}
   2ea32:	4620      	mov	r0, r4
   2ea34:	bd38      	pop	{r3, r4, r5, pc}
   2ea36:	bf00      	nop
   2ea38:	20027600 	.word	0x20027600
   2ea3c:	0003c745 	.word	0x0003c745
   2ea40:	0003c76b 	.word	0x0003c76b
   2ea44:	0003b773 	.word	0x0003b773
   2ea48:	0003c780 	.word	0x0003c780
   2ea4c:	0003c798 	.word	0x0003c798
   2ea50:	0003c7af 	.word	0x0003c7af

0002ea54 <z_get_next_timeout_expiry>:

	return ticks;
}

s32_t z_get_next_timeout_expiry(void)
{
   2ea54:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2ea56:	f04f 0320 	mov.w	r3, #32
   2ea5a:	f3ef 8511 	mrs	r5, BASEPRI
   2ea5e:	f383 8811 	msr	BASEPRI, r3
   2ea62:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2ea66:	4818      	ldr	r0, [pc, #96]	; (2eac8 <z_get_next_timeout_expiry+0x74>)
   2ea68:	f7ff fd30 	bl	2e4cc <z_spin_lock_valid>
   2ea6c:	b968      	cbnz	r0, 2ea8a <z_get_next_timeout_expiry+0x36>
   2ea6e:	235c      	movs	r3, #92	; 0x5c
   2ea70:	4a16      	ldr	r2, [pc, #88]	; (2eacc <z_get_next_timeout_expiry+0x78>)
   2ea72:	4917      	ldr	r1, [pc, #92]	; (2ead0 <z_get_next_timeout_expiry+0x7c>)
   2ea74:	4817      	ldr	r0, [pc, #92]	; (2ead4 <z_get_next_timeout_expiry+0x80>)
   2ea76:	f004 fd9c 	bl	335b2 <printk>
   2ea7a:	4913      	ldr	r1, [pc, #76]	; (2eac8 <z_get_next_timeout_expiry+0x74>)
   2ea7c:	4816      	ldr	r0, [pc, #88]	; (2ead8 <z_get_next_timeout_expiry+0x84>)
   2ea7e:	f004 fd98 	bl	335b2 <printk>
   2ea82:	215c      	movs	r1, #92	; 0x5c
   2ea84:	4811      	ldr	r0, [pc, #68]	; (2eacc <z_get_next_timeout_expiry+0x78>)
   2ea86:	f005 f895 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2ea8a:	480f      	ldr	r0, [pc, #60]	; (2eac8 <z_get_next_timeout_expiry+0x74>)
   2ea8c:	f7ff fd3c 	bl	2e508 <z_spin_lock_set_owner>
	s32_t ret = (s32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   2ea90:	f7ff fe52 	bl	2e738 <next_timeout>
   2ea94:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2ea96:	480c      	ldr	r0, [pc, #48]	; (2eac8 <z_get_next_timeout_expiry+0x74>)
   2ea98:	f7ff fd26 	bl	2e4e8 <z_spin_unlock_valid>
   2ea9c:	b968      	cbnz	r0, 2eaba <z_get_next_timeout_expiry+0x66>
   2ea9e:	2384      	movs	r3, #132	; 0x84
   2eaa0:	4a0a      	ldr	r2, [pc, #40]	; (2eacc <z_get_next_timeout_expiry+0x78>)
   2eaa2:	490e      	ldr	r1, [pc, #56]	; (2eadc <z_get_next_timeout_expiry+0x88>)
   2eaa4:	480b      	ldr	r0, [pc, #44]	; (2ead4 <z_get_next_timeout_expiry+0x80>)
   2eaa6:	f004 fd84 	bl	335b2 <printk>
   2eaaa:	4907      	ldr	r1, [pc, #28]	; (2eac8 <z_get_next_timeout_expiry+0x74>)
   2eaac:	480c      	ldr	r0, [pc, #48]	; (2eae0 <z_get_next_timeout_expiry+0x8c>)
   2eaae:	f004 fd80 	bl	335b2 <printk>
   2eab2:	2184      	movs	r1, #132	; 0x84
   2eab4:	4805      	ldr	r0, [pc, #20]	; (2eacc <z_get_next_timeout_expiry+0x78>)
   2eab6:	f005 f87d 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   2eaba:	f385 8811 	msr	BASEPRI, r5
   2eabe:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   2eac2:	4620      	mov	r0, r4
   2eac4:	bd38      	pop	{r3, r4, r5, pc}
   2eac6:	bf00      	nop
   2eac8:	20027600 	.word	0x20027600
   2eacc:	0003c745 	.word	0x0003c745
   2ead0:	0003c76b 	.word	0x0003c76b
   2ead4:	0003b773 	.word	0x0003b773
   2ead8:	0003c780 	.word	0x0003c780
   2eadc:	0003c798 	.word	0x0003c798
   2eae0:	0003c7af 	.word	0x0003c7af

0002eae4 <z_set_timeout_expiry>:

void z_set_timeout_expiry(s32_t ticks, bool idle)
{
   2eae4:	b570      	push	{r4, r5, r6, lr}
   2eae6:	4604      	mov	r4, r0
   2eae8:	460e      	mov	r6, r1
	__asm__ volatile(
   2eaea:	f04f 0320 	mov.w	r3, #32
   2eaee:	f3ef 8511 	mrs	r5, BASEPRI
   2eaf2:	f383 8811 	msr	BASEPRI, r3
   2eaf6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2eafa:	481b      	ldr	r0, [pc, #108]	; (2eb68 <z_set_timeout_expiry+0x84>)
   2eafc:	f7ff fce6 	bl	2e4cc <z_spin_lock_valid>
   2eb00:	b968      	cbnz	r0, 2eb1e <z_set_timeout_expiry+0x3a>
   2eb02:	235c      	movs	r3, #92	; 0x5c
   2eb04:	4a19      	ldr	r2, [pc, #100]	; (2eb6c <z_set_timeout_expiry+0x88>)
   2eb06:	491a      	ldr	r1, [pc, #104]	; (2eb70 <z_set_timeout_expiry+0x8c>)
   2eb08:	481a      	ldr	r0, [pc, #104]	; (2eb74 <z_set_timeout_expiry+0x90>)
   2eb0a:	f004 fd52 	bl	335b2 <printk>
   2eb0e:	4916      	ldr	r1, [pc, #88]	; (2eb68 <z_set_timeout_expiry+0x84>)
   2eb10:	4819      	ldr	r0, [pc, #100]	; (2eb78 <z_set_timeout_expiry+0x94>)
   2eb12:	f004 fd4e 	bl	335b2 <printk>
   2eb16:	215c      	movs	r1, #92	; 0x5c
   2eb18:	4814      	ldr	r0, [pc, #80]	; (2eb6c <z_set_timeout_expiry+0x88>)
   2eb1a:	f005 f84b 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2eb1e:	4812      	ldr	r0, [pc, #72]	; (2eb68 <z_set_timeout_expiry+0x84>)
   2eb20:	f7ff fcf2 	bl	2e508 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next = next_timeout();
   2eb24:	f7ff fe08 	bl	2e738 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   2eb28:	2801      	cmp	r0, #1
   2eb2a:	dd05      	ble.n	2eb38 <z_set_timeout_expiry+0x54>
   2eb2c:	42a0      	cmp	r0, r4
   2eb2e:	dd03      	ble.n	2eb38 <z_set_timeout_expiry+0x54>
			z_clock_set_timeout(ticks, idle);
   2eb30:	4631      	mov	r1, r6
   2eb32:	4620      	mov	r0, r4
   2eb34:	f7eb fc26 	bl	1a384 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2eb38:	480b      	ldr	r0, [pc, #44]	; (2eb68 <z_set_timeout_expiry+0x84>)
   2eb3a:	f7ff fcd5 	bl	2e4e8 <z_spin_unlock_valid>
   2eb3e:	b968      	cbnz	r0, 2eb5c <z_set_timeout_expiry+0x78>
   2eb40:	2384      	movs	r3, #132	; 0x84
   2eb42:	4a0a      	ldr	r2, [pc, #40]	; (2eb6c <z_set_timeout_expiry+0x88>)
   2eb44:	490d      	ldr	r1, [pc, #52]	; (2eb7c <z_set_timeout_expiry+0x98>)
   2eb46:	480b      	ldr	r0, [pc, #44]	; (2eb74 <z_set_timeout_expiry+0x90>)
   2eb48:	f004 fd33 	bl	335b2 <printk>
   2eb4c:	4906      	ldr	r1, [pc, #24]	; (2eb68 <z_set_timeout_expiry+0x84>)
   2eb4e:	480c      	ldr	r0, [pc, #48]	; (2eb80 <z_set_timeout_expiry+0x9c>)
   2eb50:	f004 fd2f 	bl	335b2 <printk>
   2eb54:	2184      	movs	r1, #132	; 0x84
   2eb56:	4805      	ldr	r0, [pc, #20]	; (2eb6c <z_set_timeout_expiry+0x88>)
   2eb58:	f005 f82c 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   2eb5c:	f385 8811 	msr	BASEPRI, r5
   2eb60:	f3bf 8f6f 	isb	sy
		}
	}
}
   2eb64:	bd70      	pop	{r4, r5, r6, pc}
   2eb66:	bf00      	nop
   2eb68:	20027600 	.word	0x20027600
   2eb6c:	0003c745 	.word	0x0003c745
   2eb70:	0003c76b 	.word	0x0003c76b
   2eb74:	0003b773 	.word	0x0003b773
   2eb78:	0003c780 	.word	0x0003c780
   2eb7c:	0003c798 	.word	0x0003c798
   2eb80:	0003c7af 	.word	0x0003c7af

0002eb84 <z_clock_announce>:

void z_clock_announce(s32_t ticks)
{
   2eb84:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   2eb88:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   2eb8a:	f7fe fce3 	bl	2d554 <z_time_slice>
	__asm__ volatile(
   2eb8e:	f04f 0320 	mov.w	r3, #32
   2eb92:	f3ef 8511 	mrs	r5, BASEPRI
   2eb96:	f383 8811 	msr	BASEPRI, r3
   2eb9a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2eb9e:	4848      	ldr	r0, [pc, #288]	; (2ecc0 <z_clock_announce+0x13c>)
   2eba0:	f7ff fc94 	bl	2e4cc <z_spin_lock_valid>
   2eba4:	b968      	cbnz	r0, 2ebc2 <z_clock_announce+0x3e>
   2eba6:	235c      	movs	r3, #92	; 0x5c
   2eba8:	4a46      	ldr	r2, [pc, #280]	; (2ecc4 <z_clock_announce+0x140>)
   2ebaa:	4947      	ldr	r1, [pc, #284]	; (2ecc8 <z_clock_announce+0x144>)
   2ebac:	4847      	ldr	r0, [pc, #284]	; (2eccc <z_clock_announce+0x148>)
   2ebae:	f004 fd00 	bl	335b2 <printk>
   2ebb2:	4943      	ldr	r1, [pc, #268]	; (2ecc0 <z_clock_announce+0x13c>)
   2ebb4:	4846      	ldr	r0, [pc, #280]	; (2ecd0 <z_clock_announce+0x14c>)
   2ebb6:	f004 fcfc 	bl	335b2 <printk>
   2ebba:	215c      	movs	r1, #92	; 0x5c
   2ebbc:	4841      	ldr	r0, [pc, #260]	; (2ecc4 <z_clock_announce+0x140>)
   2ebbe:	f004 fff9 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2ebc2:	4f44      	ldr	r7, [pc, #272]	; (2ecd4 <z_clock_announce+0x150>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   2ebc4:	4e44      	ldr	r6, [pc, #272]	; (2ecd8 <z_clock_announce+0x154>)
   2ebc6:	46b9      	mov	r9, r7
   2ebc8:	483d      	ldr	r0, [pc, #244]	; (2ecc0 <z_clock_announce+0x13c>)
	return list->head == list;
   2ebca:	f8df 8118 	ldr.w	r8, [pc, #280]	; 2ece4 <z_clock_announce+0x160>
   2ebce:	f7ff fc9b 	bl	2e508 <z_spin_lock_set_owner>
   2ebd2:	6034      	str	r4, [r6, #0]
   2ebd4:	f8d8 4000 	ldr.w	r4, [r8]
   2ebd8:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ebda:	4544      	cmp	r4, r8
   2ebdc:	e9d7 bc00 	ldrd	fp, ip, [r7]
   2ebe0:	d005      	beq.n	2ebee <z_clock_announce+0x6a>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   2ebe2:	b124      	cbz	r4, 2ebee <z_clock_announce+0x6a>
   2ebe4:	68a3      	ldr	r3, [r4, #8]
   2ebe6:	4293      	cmp	r3, r2
   2ebe8:	dd26      	ble.n	2ec38 <z_clock_announce+0xb4>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   2ebea:	1a9b      	subs	r3, r3, r2
   2ebec:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   2ebee:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   2ebf0:	eb1b 0002 	adds.w	r0, fp, r2
   2ebf4:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
   2ebf8:	e9c9 0100 	strd	r0, r1, [r9]
	announce_remaining = 0;
   2ebfc:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   2ebfe:	f7ff fd9b 	bl	2e738 <next_timeout>
   2ec02:	4621      	mov	r1, r4
   2ec04:	f7eb fbbe 	bl	1a384 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2ec08:	482d      	ldr	r0, [pc, #180]	; (2ecc0 <z_clock_announce+0x13c>)
   2ec0a:	f7ff fc6d 	bl	2e4e8 <z_spin_unlock_valid>
   2ec0e:	b968      	cbnz	r0, 2ec2c <z_clock_announce+0xa8>
   2ec10:	2384      	movs	r3, #132	; 0x84
   2ec12:	4a2c      	ldr	r2, [pc, #176]	; (2ecc4 <z_clock_announce+0x140>)
   2ec14:	4931      	ldr	r1, [pc, #196]	; (2ecdc <z_clock_announce+0x158>)
   2ec16:	482d      	ldr	r0, [pc, #180]	; (2eccc <z_clock_announce+0x148>)
   2ec18:	f004 fccb 	bl	335b2 <printk>
   2ec1c:	4928      	ldr	r1, [pc, #160]	; (2ecc0 <z_clock_announce+0x13c>)
   2ec1e:	4830      	ldr	r0, [pc, #192]	; (2ece0 <z_clock_announce+0x15c>)
   2ec20:	f004 fcc7 	bl	335b2 <printk>
   2ec24:	2184      	movs	r1, #132	; 0x84
   2ec26:	4827      	ldr	r0, [pc, #156]	; (2ecc4 <z_clock_announce+0x140>)
   2ec28:	f004 ffc4 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   2ec2c:	f385 8811 	msr	BASEPRI, r5
   2ec30:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   2ec34:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
   2ec38:	eb1b 0003 	adds.w	r0, fp, r3
   2ec3c:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
   2ec40:	1ad3      	subs	r3, r2, r3
   2ec42:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   2ec44:	2300      	movs	r3, #0
		curr_tick += dt;
   2ec46:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
   2ec4a:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
   2ec4c:	4620      	mov	r0, r4
   2ec4e:	f7ff fdad 	bl	2e7ac <remove_timeout>
   2ec52:	481b      	ldr	r0, [pc, #108]	; (2ecc0 <z_clock_announce+0x13c>)
   2ec54:	f7ff fc48 	bl	2e4e8 <z_spin_unlock_valid>
   2ec58:	b968      	cbnz	r0, 2ec76 <z_clock_announce+0xf2>
   2ec5a:	2384      	movs	r3, #132	; 0x84
   2ec5c:	4a19      	ldr	r2, [pc, #100]	; (2ecc4 <z_clock_announce+0x140>)
   2ec5e:	491f      	ldr	r1, [pc, #124]	; (2ecdc <z_clock_announce+0x158>)
   2ec60:	481a      	ldr	r0, [pc, #104]	; (2eccc <z_clock_announce+0x148>)
   2ec62:	f004 fca6 	bl	335b2 <printk>
   2ec66:	4916      	ldr	r1, [pc, #88]	; (2ecc0 <z_clock_announce+0x13c>)
   2ec68:	481d      	ldr	r0, [pc, #116]	; (2ece0 <z_clock_announce+0x15c>)
   2ec6a:	f004 fca2 	bl	335b2 <printk>
   2ec6e:	2184      	movs	r1, #132	; 0x84
   2ec70:	4814      	ldr	r0, [pc, #80]	; (2ecc4 <z_clock_announce+0x140>)
   2ec72:	f004 ff9f 	bl	33bb4 <assert_post_action>
   2ec76:	f385 8811 	msr	BASEPRI, r5
   2ec7a:	f3bf 8f6f 	isb	sy
		t->fn(t);
   2ec7e:	68e3      	ldr	r3, [r4, #12]
   2ec80:	4620      	mov	r0, r4
   2ec82:	4798      	blx	r3
	__asm__ volatile(
   2ec84:	f04f 0320 	mov.w	r3, #32
   2ec88:	f3ef 8511 	mrs	r5, BASEPRI
   2ec8c:	f383 8811 	msr	BASEPRI, r3
   2ec90:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2ec94:	480a      	ldr	r0, [pc, #40]	; (2ecc0 <z_clock_announce+0x13c>)
   2ec96:	f7ff fc19 	bl	2e4cc <z_spin_lock_valid>
   2ec9a:	b968      	cbnz	r0, 2ecb8 <z_clock_announce+0x134>
   2ec9c:	235c      	movs	r3, #92	; 0x5c
   2ec9e:	4a09      	ldr	r2, [pc, #36]	; (2ecc4 <z_clock_announce+0x140>)
   2eca0:	4909      	ldr	r1, [pc, #36]	; (2ecc8 <z_clock_announce+0x144>)
   2eca2:	480a      	ldr	r0, [pc, #40]	; (2eccc <z_clock_announce+0x148>)
   2eca4:	f004 fc85 	bl	335b2 <printk>
   2eca8:	4905      	ldr	r1, [pc, #20]	; (2ecc0 <z_clock_announce+0x13c>)
   2ecaa:	4809      	ldr	r0, [pc, #36]	; (2ecd0 <z_clock_announce+0x14c>)
   2ecac:	f004 fc81 	bl	335b2 <printk>
   2ecb0:	215c      	movs	r1, #92	; 0x5c
   2ecb2:	4804      	ldr	r0, [pc, #16]	; (2ecc4 <z_clock_announce+0x140>)
   2ecb4:	f004 ff7e 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2ecb8:	4801      	ldr	r0, [pc, #4]	; (2ecc0 <z_clock_announce+0x13c>)
   2ecba:	f7ff fc25 	bl	2e508 <z_spin_lock_set_owner>
	return k;
   2ecbe:	e789      	b.n	2ebd4 <z_clock_announce+0x50>
   2ecc0:	20027600 	.word	0x20027600
   2ecc4:	0003c745 	.word	0x0003c745
   2ecc8:	0003c76b 	.word	0x0003c76b
   2eccc:	0003b773 	.word	0x0003b773
   2ecd0:	0003c780 	.word	0x0003c780
   2ecd4:	20020a08 	.word	0x20020a08
   2ecd8:	200275fc 	.word	0x200275fc
   2ecdc:	0003c798 	.word	0x0003c798
   2ece0:	0003c7af 	.word	0x0003c7af
   2ece4:	2002022c 	.word	0x2002022c

0002ece8 <z_tick_get>:

s64_t z_tick_get(void)
{
   2ece8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ecec:	f04f 0320 	mov.w	r3, #32
   2ecf0:	f3ef 8611 	mrs	r6, BASEPRI
   2ecf4:	f383 8811 	msr	BASEPRI, r3
   2ecf8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2ecfc:	481b      	ldr	r0, [pc, #108]	; (2ed6c <z_tick_get+0x84>)
   2ecfe:	f7ff fbe5 	bl	2e4cc <z_spin_lock_valid>
   2ed02:	b968      	cbnz	r0, 2ed20 <z_tick_get+0x38>
   2ed04:	235c      	movs	r3, #92	; 0x5c
   2ed06:	4a1a      	ldr	r2, [pc, #104]	; (2ed70 <z_tick_get+0x88>)
   2ed08:	491a      	ldr	r1, [pc, #104]	; (2ed74 <z_tick_get+0x8c>)
   2ed0a:	481b      	ldr	r0, [pc, #108]	; (2ed78 <z_tick_get+0x90>)
   2ed0c:	f004 fc51 	bl	335b2 <printk>
   2ed10:	4916      	ldr	r1, [pc, #88]	; (2ed6c <z_tick_get+0x84>)
   2ed12:	481a      	ldr	r0, [pc, #104]	; (2ed7c <z_tick_get+0x94>)
   2ed14:	f004 fc4d 	bl	335b2 <printk>
   2ed18:	215c      	movs	r1, #92	; 0x5c
   2ed1a:	4815      	ldr	r0, [pc, #84]	; (2ed70 <z_tick_get+0x88>)
   2ed1c:	f004 ff4a 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2ed20:	4812      	ldr	r0, [pc, #72]	; (2ed6c <z_tick_get+0x84>)
   2ed22:	f7ff fbf1 	bl	2e508 <z_spin_lock_set_owner>
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   2ed26:	f7eb fb91 	bl	1a44c <z_clock_elapsed>
   2ed2a:	4b15      	ldr	r3, [pc, #84]	; (2ed80 <z_tick_get+0x98>)
   2ed2c:	e9d3 4500 	ldrd	r4, r5, [r3]
   2ed30:	1827      	adds	r7, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2ed32:	480e      	ldr	r0, [pc, #56]	; (2ed6c <z_tick_get+0x84>)
   2ed34:	f145 0800 	adc.w	r8, r5, #0
   2ed38:	f7ff fbd6 	bl	2e4e8 <z_spin_unlock_valid>
   2ed3c:	b968      	cbnz	r0, 2ed5a <z_tick_get+0x72>
   2ed3e:	2384      	movs	r3, #132	; 0x84
   2ed40:	4a0b      	ldr	r2, [pc, #44]	; (2ed70 <z_tick_get+0x88>)
   2ed42:	4910      	ldr	r1, [pc, #64]	; (2ed84 <z_tick_get+0x9c>)
   2ed44:	480c      	ldr	r0, [pc, #48]	; (2ed78 <z_tick_get+0x90>)
   2ed46:	f004 fc34 	bl	335b2 <printk>
   2ed4a:	4908      	ldr	r1, [pc, #32]	; (2ed6c <z_tick_get+0x84>)
   2ed4c:	480e      	ldr	r0, [pc, #56]	; (2ed88 <z_tick_get+0xa0>)
   2ed4e:	f004 fc30 	bl	335b2 <printk>
   2ed52:	2184      	movs	r1, #132	; 0x84
   2ed54:	4806      	ldr	r0, [pc, #24]	; (2ed70 <z_tick_get+0x88>)
   2ed56:	f004 ff2d 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   2ed5a:	f386 8811 	msr	BASEPRI, r6
   2ed5e:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   2ed62:	4638      	mov	r0, r7
   2ed64:	4641      	mov	r1, r8
   2ed66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2ed6a:	bf00      	nop
   2ed6c:	20027600 	.word	0x20027600
   2ed70:	0003c745 	.word	0x0003c745
   2ed74:	0003c76b 	.word	0x0003c76b
   2ed78:	0003b773 	.word	0x0003b773
   2ed7c:	0003c780 	.word	0x0003c780
   2ed80:	20020a08 	.word	0x20020a08
   2ed84:	0003c798 	.word	0x0003c798
   2ed88:	0003c7af 	.word	0x0003c7af

0002ed8c <z_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   2ed8c:	6a02      	ldr	r2, [r0, #32]
{
   2ed8e:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   2ed90:	1c53      	adds	r3, r2, #1
   2ed92:	2b01      	cmp	r3, #1
{
   2ed94:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   2ed96:	d902      	bls.n	2ed9e <z_timer_expiration_handler+0x12>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2ed98:	490b      	ldr	r1, [pc, #44]	; (2edc8 <z_timer_expiration_handler+0x3c>)
   2ed9a:	f7ff fd1b 	bl	2e7d4 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   2ed9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2eda0:	3301      	adds	r3, #1
   2eda2:	6263      	str	r3, [r4, #36]	; 0x24

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   2eda4:	69a3      	ldr	r3, [r4, #24]
   2eda6:	b10b      	cbz	r3, 2edac <z_timer_expiration_handler+0x20>
		timer->expiry_fn(timer);
   2eda8:	4620      	mov	r0, r4
   2edaa:	4798      	blx	r3
	return list->head == list;
   2edac:	f854 5f10 	ldr.w	r5, [r4, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2edb0:	42a5      	cmp	r5, r4
   2edb2:	d008      	beq.n	2edc6 <z_timer_expiration_handler+0x3a>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   2edb4:	b13d      	cbz	r5, 2edc6 <z_timer_expiration_handler+0x3a>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   2edb6:	4628      	mov	r0, r5
   2edb8:	f7fd ffca 	bl	2cd50 <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
   2edbc:	4628      	mov	r0, r5
   2edbe:	f7fe fa3b 	bl	2d238 <z_ready_thread>
   2edc2:	2300      	movs	r3, #0
   2edc4:	672b      	str	r3, [r5, #112]	; 0x70

	arch_thread_return_value_set(thread, 0);
}
   2edc6:	bd38      	pop	{r3, r4, r5, pc}
   2edc8:	0002ed8d 	.word	0x0002ed8d

0002edcc <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   2edcc:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   2edd0:	f240 36e7 	movw	r6, #999	; 0x3e7
   2edd4:	2700      	movs	r7, #0
   2edd6:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   2edda:	46b3      	mov	fp, r6
   2eddc:	46bc      	mov	ip, r7
   2edde:	fbe5 bc01 	umlal	fp, ip, r5, r1
   2ede2:	4604      	mov	r4, r0
   2ede4:	4691      	mov	r9, r2
   2ede6:	4661      	mov	r1, ip
   2ede8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2edec:	2300      	movs	r3, #0
   2edee:	4658      	mov	r0, fp
   2edf0:	f7de fcbe 	bl	d770 <__aeabi_uldivmod>
   2edf4:	4639      	mov	r1, r7
   2edf6:	4680      	mov	r8, r0
   2edf8:	4630      	mov	r0, r6
   2edfa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2edfe:	2300      	movs	r3, #0
   2ee00:	fbe5 0109 	umlal	r0, r1, r5, r9
   2ee04:	f7de fcb4 	bl	d770 <__aeabi_uldivmod>
   2ee08:	4605      	mov	r5, r0
	if (Z_TICK_ABS(duration.ticks) < 0) {
		duration.ticks = MAX(duration.ticks - 1, 0);
	}
#endif

	(void)z_abort_timeout(&timer->timeout);
   2ee0a:	4620      	mov	r0, r4
   2ee0c:	f7ff fd8a 	bl	2e924 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   2ee10:	2300      	movs	r3, #0
	period = k_ms_to_ticks_ceil32(period);
   2ee12:	6225      	str	r5, [r4, #32]
	timer->status = 0U;
   2ee14:	6263      	str	r3, [r4, #36]	; 0x24

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2ee16:	4642      	mov	r2, r8
   2ee18:	4620      	mov	r0, r4
		     duration);
}
   2ee1a:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2ee1e:	4901      	ldr	r1, [pc, #4]	; (2ee24 <z_impl_k_timer_start+0x58>)
   2ee20:	f7ff bcd8 	b.w	2e7d4 <z_add_timeout>
   2ee24:	0002ed8d 	.word	0x0002ed8d

0002ee28 <k_poll_poller_cb>:

	return events_registered;
}

static int k_poll_poller_cb(struct k_poll_event *event, u32_t state)
{
   2ee28:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   2ee2a:	6883      	ldr	r3, [r0, #8]
{
   2ee2c:	460d      	mov	r5, r1
	struct k_thread *thread = event->poller->thread;
   2ee2e:	685c      	ldr	r4, [r3, #4]

	__ASSERT(thread != NULL, "poller should have a thread\n");
   2ee30:	b964      	cbnz	r4, 2ee4c <k_poll_poller_cb+0x24>
   2ee32:	4915      	ldr	r1, [pc, #84]	; (2ee88 <k_poll_poller_cb+0x60>)
   2ee34:	23e0      	movs	r3, #224	; 0xe0
   2ee36:	4a15      	ldr	r2, [pc, #84]	; (2ee8c <k_poll_poller_cb+0x64>)
   2ee38:	4815      	ldr	r0, [pc, #84]	; (2ee90 <k_poll_poller_cb+0x68>)
   2ee3a:	f004 fbba 	bl	335b2 <printk>
   2ee3e:	4815      	ldr	r0, [pc, #84]	; (2ee94 <k_poll_poller_cb+0x6c>)
   2ee40:	f004 fbb7 	bl	335b2 <printk>
   2ee44:	21e0      	movs	r1, #224	; 0xe0
   2ee46:	4811      	ldr	r0, [pc, #68]	; (2ee8c <k_poll_poller_cb+0x64>)
   2ee48:	f004 feb4 	bl	33bb4 <assert_post_action>

	if (!z_is_thread_pending(thread)) {
   2ee4c:	7b63      	ldrb	r3, [r4, #13]
   2ee4e:	079a      	lsls	r2, r3, #30
   2ee50:	d401      	bmi.n	2ee56 <k_poll_poller_cb+0x2e>
		return 0;
   2ee52:	2000      	movs	r0, #0
	}

	z_ready_thread(thread);

	return 0;
}
   2ee54:	bd38      	pop	{r3, r4, r5, pc}
	if (z_is_thread_timeout_expired(thread)) {
   2ee56:	6a23      	ldr	r3, [r4, #32]
   2ee58:	3302      	adds	r3, #2
   2ee5a:	d012      	beq.n	2ee82 <k_poll_poller_cb+0x5a>
	z_unpend_thread(thread);
   2ee5c:	4620      	mov	r0, r4
   2ee5e:	f7fe f8ab 	bl	2cfb8 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2ee62:	2d08      	cmp	r5, #8
   2ee64:	bf0c      	ite	eq
   2ee66:	f06f 0303 	mvneq.w	r3, #3
   2ee6a:	2300      	movne	r3, #0
   2ee6c:	6723      	str	r3, [r4, #112]	; 0x70
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2ee6e:	7b63      	ldrb	r3, [r4, #13]
   2ee70:	06db      	lsls	r3, r3, #27
   2ee72:	d1ee      	bne.n	2ee52 <k_poll_poller_cb+0x2a>
	if (!z_is_thread_ready(thread)) {
   2ee74:	69a5      	ldr	r5, [r4, #24]
   2ee76:	2d00      	cmp	r5, #0
   2ee78:	d1eb      	bne.n	2ee52 <k_poll_poller_cb+0x2a>
	z_ready_thread(thread);
   2ee7a:	4620      	mov	r0, r4
   2ee7c:	f7fe f9dc 	bl	2d238 <z_ready_thread>
	return 0;
   2ee80:	e7e7      	b.n	2ee52 <k_poll_poller_cb+0x2a>
		return -EAGAIN;
   2ee82:	f06f 000a 	mvn.w	r0, #10
   2ee86:	e7e5      	b.n	2ee54 <k_poll_poller_cb+0x2c>
   2ee88:	000400ab 	.word	0x000400ab
   2ee8c:	0004008a 	.word	0x0004008a
   2ee90:	0003b773 	.word	0x0003b773
   2ee94:	000400c1 	.word	0x000400c1

0002ee98 <clear_event_registrations>:
{
   2ee98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2ee9c:	2414      	movs	r4, #20
   2ee9e:	4680      	mov	r8, r0
   2eea0:	4617      	mov	r7, r2
	while (num_events--) {
   2eea2:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   2eea6:	4d48      	ldr	r5, [pc, #288]	; (2efc8 <clear_event_registrations+0x130>)
   2eea8:	f8df 9158 	ldr.w	r9, [pc, #344]	; 2f004 <clear_event_registrations+0x16c>
   2eeac:	4e47      	ldr	r6, [pc, #284]	; (2efcc <clear_event_registrations+0x134>)
	while (num_events--) {
   2eeae:	4544      	cmp	r4, r8
   2eeb0:	d101      	bne.n	2eeb6 <clear_event_registrations+0x1e>
}
   2eeb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   2eeb6:	2300      	movs	r3, #0
   2eeb8:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   2eebc:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   2eec0:	f003 030f 	and.w	r3, r3, #15
   2eec4:	2b04      	cmp	r3, #4
   2eec6:	d83d      	bhi.n	2ef44 <clear_event_registrations+0xac>
   2eec8:	e8df f003 	tbb	[pc, r3]
   2eecc:	3c032d49 	.word	0x3c032d49
   2eed0:	1e          	.byte	0x1e
   2eed1:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   2eed2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2eed6:	b963      	cbnz	r3, 2eef2 <clear_event_registrations+0x5a>
   2eed8:	493d      	ldr	r1, [pc, #244]	; (2efd0 <clear_event_registrations+0x138>)
   2eeda:	2396      	movs	r3, #150	; 0x96
   2eedc:	462a      	mov	r2, r5
   2eede:	4630      	mov	r0, r6
   2eee0:	f004 fb67 	bl	335b2 <printk>
   2eee4:	483b      	ldr	r0, [pc, #236]	; (2efd4 <clear_event_registrations+0x13c>)
   2eee6:	f004 fb64 	bl	335b2 <printk>
   2eeea:	2196      	movs	r1, #150	; 0x96
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   2eeec:	4628      	mov	r0, r5
   2eeee:	f004 fe61 	bl	33bb4 <assert_post_action>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   2eef2:	f854 3c14 	ldr.w	r3, [r4, #-20]
   2eef6:	b393      	cbz	r3, 2ef5e <clear_event_registrations+0xc6>
	node->prev->next = node->next;
   2eef8:	f854 2c10 	ldr.w	r2, [r4, #-16]
   2eefc:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   2eefe:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2ef00:	2300      	movs	r3, #0
	node->prev = NULL;
   2ef02:	e944 3305 	strd	r3, r3, [r4, #-20]
   2ef06:	e02a      	b.n	2ef5e <clear_event_registrations+0xc6>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   2ef08:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2ef0c:	2b00      	cmp	r3, #0
   2ef0e:	d1f0      	bne.n	2eef2 <clear_event_registrations+0x5a>
   2ef10:	4931      	ldr	r1, [pc, #196]	; (2efd8 <clear_event_registrations+0x140>)
   2ef12:	239a      	movs	r3, #154	; 0x9a
   2ef14:	462a      	mov	r2, r5
   2ef16:	4630      	mov	r0, r6
   2ef18:	f004 fb4b 	bl	335b2 <printk>
   2ef1c:	482f      	ldr	r0, [pc, #188]	; (2efdc <clear_event_registrations+0x144>)
   2ef1e:	f004 fb48 	bl	335b2 <printk>
   2ef22:	219a      	movs	r1, #154	; 0x9a
   2ef24:	e7e2      	b.n	2eeec <clear_event_registrations+0x54>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   2ef26:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2ef2a:	2b00      	cmp	r3, #0
   2ef2c:	d1e1      	bne.n	2eef2 <clear_event_registrations+0x5a>
   2ef2e:	492c      	ldr	r1, [pc, #176]	; (2efe0 <clear_event_registrations+0x148>)
   2ef30:	239e      	movs	r3, #158	; 0x9e
   2ef32:	462a      	mov	r2, r5
   2ef34:	4630      	mov	r0, r6
   2ef36:	f004 fb3c 	bl	335b2 <printk>
   2ef3a:	482a      	ldr	r0, [pc, #168]	; (2efe4 <clear_event_registrations+0x14c>)
   2ef3c:	f004 fb39 	bl	335b2 <printk>
   2ef40:	219e      	movs	r1, #158	; 0x9e
   2ef42:	e7d3      	b.n	2eeec <clear_event_registrations+0x54>
		__ASSERT(false, "invalid event type\n");
   2ef44:	4649      	mov	r1, r9
   2ef46:	23a5      	movs	r3, #165	; 0xa5
   2ef48:	462a      	mov	r2, r5
   2ef4a:	4630      	mov	r0, r6
   2ef4c:	f004 fb31 	bl	335b2 <printk>
   2ef50:	4825      	ldr	r0, [pc, #148]	; (2efe8 <clear_event_registrations+0x150>)
   2ef52:	f004 fb2e 	bl	335b2 <printk>
   2ef56:	21a5      	movs	r1, #165	; 0xa5
   2ef58:	4628      	mov	r0, r5
   2ef5a:	f004 fe2b 	bl	33bb4 <assert_post_action>
   2ef5e:	4823      	ldr	r0, [pc, #140]	; (2efec <clear_event_registrations+0x154>)
   2ef60:	f7ff fac2 	bl	2e4e8 <z_spin_unlock_valid>
   2ef64:	b968      	cbnz	r0, 2ef82 <clear_event_registrations+0xea>
   2ef66:	2384      	movs	r3, #132	; 0x84
   2ef68:	4a21      	ldr	r2, [pc, #132]	; (2eff0 <clear_event_registrations+0x158>)
   2ef6a:	4922      	ldr	r1, [pc, #136]	; (2eff4 <clear_event_registrations+0x15c>)
   2ef6c:	4630      	mov	r0, r6
   2ef6e:	f004 fb20 	bl	335b2 <printk>
   2ef72:	491e      	ldr	r1, [pc, #120]	; (2efec <clear_event_registrations+0x154>)
   2ef74:	4820      	ldr	r0, [pc, #128]	; (2eff8 <clear_event_registrations+0x160>)
   2ef76:	f004 fb1c 	bl	335b2 <printk>
   2ef7a:	2184      	movs	r1, #132	; 0x84
   2ef7c:	481c      	ldr	r0, [pc, #112]	; (2eff0 <clear_event_registrations+0x158>)
   2ef7e:	f004 fe19 	bl	33bb4 <assert_post_action>
   2ef82:	f387 8811 	msr	BASEPRI, r7
   2ef86:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2ef8a:	f04f 0320 	mov.w	r3, #32
   2ef8e:	f3ef 8711 	mrs	r7, BASEPRI
   2ef92:	f383 8811 	msr	BASEPRI, r3
   2ef96:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2ef9a:	4814      	ldr	r0, [pc, #80]	; (2efec <clear_event_registrations+0x154>)
   2ef9c:	f7ff fa96 	bl	2e4cc <z_spin_lock_valid>
   2efa0:	b968      	cbnz	r0, 2efbe <clear_event_registrations+0x126>
   2efa2:	235c      	movs	r3, #92	; 0x5c
   2efa4:	4a12      	ldr	r2, [pc, #72]	; (2eff0 <clear_event_registrations+0x158>)
   2efa6:	4915      	ldr	r1, [pc, #84]	; (2effc <clear_event_registrations+0x164>)
   2efa8:	4630      	mov	r0, r6
   2efaa:	f004 fb02 	bl	335b2 <printk>
   2efae:	490f      	ldr	r1, [pc, #60]	; (2efec <clear_event_registrations+0x154>)
   2efb0:	4813      	ldr	r0, [pc, #76]	; (2f000 <clear_event_registrations+0x168>)
   2efb2:	f004 fafe 	bl	335b2 <printk>
   2efb6:	215c      	movs	r1, #92	; 0x5c
   2efb8:	480d      	ldr	r0, [pc, #52]	; (2eff0 <clear_event_registrations+0x158>)
   2efba:	f004 fdfb 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2efbe:	480b      	ldr	r0, [pc, #44]	; (2efec <clear_event_registrations+0x154>)
   2efc0:	f7ff faa2 	bl	2e508 <z_spin_lock_set_owner>
	return k;
   2efc4:	3c14      	subs	r4, #20
   2efc6:	e772      	b.n	2eeae <clear_event_registrations+0x16>
   2efc8:	0004008a 	.word	0x0004008a
   2efcc:	0003b773 	.word	0x0003b773
   2efd0:	0003ffe4 	.word	0x0003ffe4
   2efd4:	0003fffe 	.word	0x0003fffe
   2efd8:	00040013 	.word	0x00040013
   2efdc:	0004002f 	.word	0x0004002f
   2efe0:	00040040 	.word	0x00040040
   2efe4:	0004005d 	.word	0x0004005d
   2efe8:	00040074 	.word	0x00040074
   2efec:	20027604 	.word	0x20027604
   2eff0:	0003c745 	.word	0x0003c745
   2eff4:	0003c798 	.word	0x0003c798
   2eff8:	0003c7af 	.word	0x0003c7af
   2effc:	0003c76b 	.word	0x0003c76b
   2f000:	0003c780 	.word	0x0003c780
   2f004:	0003fd2f 	.word	0x0003fd2f

0002f008 <register_events>:
{
   2f008:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   2f00c:	2700      	movs	r7, #0
{
   2f00e:	468a      	mov	sl, r1
   2f010:	4615      	mov	r5, r2
   2f012:	4604      	mov	r4, r0
	int events_registered = 0;
   2f014:	46b9      	mov	r9, r7
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2f016:	4e69      	ldr	r6, [pc, #420]	; (2f1bc <register_events+0x1b4>)
   2f018:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 2f1fc <register_events+0x1f4>
{
   2f01c:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   2f01e:	4557      	cmp	r7, sl
   2f020:	db03      	blt.n	2f02a <register_events+0x22>
}
   2f022:	4648      	mov	r0, r9
   2f024:	b003      	add	sp, #12
   2f026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f02a:	f04f 0320 	mov.w	r3, #32
   2f02e:	f3ef 8b11 	mrs	fp, BASEPRI
   2f032:	f383 8811 	msr	BASEPRI, r3
   2f036:	f3bf 8f6f 	isb	sy
   2f03a:	4630      	mov	r0, r6
   2f03c:	f7ff fa46 	bl	2e4cc <z_spin_lock_valid>
   2f040:	b968      	cbnz	r0, 2f05e <register_events+0x56>
   2f042:	235c      	movs	r3, #92	; 0x5c
   2f044:	4642      	mov	r2, r8
   2f046:	495e      	ldr	r1, [pc, #376]	; (2f1c0 <register_events+0x1b8>)
   2f048:	485e      	ldr	r0, [pc, #376]	; (2f1c4 <register_events+0x1bc>)
   2f04a:	f004 fab2 	bl	335b2 <printk>
   2f04e:	4631      	mov	r1, r6
   2f050:	485d      	ldr	r0, [pc, #372]	; (2f1c8 <register_events+0x1c0>)
   2f052:	f004 faae 	bl	335b2 <printk>
   2f056:	215c      	movs	r1, #92	; 0x5c
   2f058:	4640      	mov	r0, r8
   2f05a:	f004 fdab 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2f05e:	4630      	mov	r0, r6
   2f060:	f7ff fa52 	bl	2e508 <z_spin_lock_set_owner>
	switch (event->type) {
   2f064:	7b63      	ldrb	r3, [r4, #13]
   2f066:	f003 030f 	and.w	r3, r3, #15
   2f06a:	2b04      	cmp	r3, #4
   2f06c:	d844      	bhi.n	2f0f8 <register_events+0xf0>
   2f06e:	e8df f003 	tbb	[pc, r3]
   2f072:	3d2d      	.short	0x3d2d
   2f074:	4303      	.short	0x4303
   2f076:	2a          	.byte	0x2a
   2f077:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0) {
   2f078:	6923      	ldr	r3, [r4, #16]
   2f07a:	689b      	ldr	r3, [r3, #8]
   2f07c:	b333      	cbz	r3, 2f0cc <register_events+0xc4>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   2f07e:	2202      	movs	r2, #2
	event->poller = NULL;
   2f080:	2100      	movs	r1, #0
	event->state |= state;
   2f082:	68e3      	ldr	r3, [r4, #12]
	event->poller = NULL;
   2f084:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   2f086:	f3c3 3004 	ubfx	r0, r3, #12, #5
   2f08a:	4302      	orrs	r2, r0
   2f08c:	f362 3310 	bfi	r3, r2, #12, #5
   2f090:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   2f092:	7029      	strb	r1, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2f094:	4630      	mov	r0, r6
   2f096:	f7ff fa27 	bl	2e4e8 <z_spin_unlock_valid>
   2f09a:	b968      	cbnz	r0, 2f0b8 <register_events+0xb0>
   2f09c:	2384      	movs	r3, #132	; 0x84
   2f09e:	4642      	mov	r2, r8
   2f0a0:	494a      	ldr	r1, [pc, #296]	; (2f1cc <register_events+0x1c4>)
   2f0a2:	4848      	ldr	r0, [pc, #288]	; (2f1c4 <register_events+0x1bc>)
   2f0a4:	f004 fa85 	bl	335b2 <printk>
   2f0a8:	4631      	mov	r1, r6
   2f0aa:	4849      	ldr	r0, [pc, #292]	; (2f1d0 <register_events+0x1c8>)
   2f0ac:	f004 fa81 	bl	335b2 <printk>
   2f0b0:	2184      	movs	r1, #132	; 0x84
   2f0b2:	4640      	mov	r0, r8
   2f0b4:	f004 fd7e 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   2f0b8:	f38b 8811 	msr	BASEPRI, fp
   2f0bc:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2f0c0:	3701      	adds	r7, #1
   2f0c2:	3414      	adds	r4, #20
   2f0c4:	e7ab      	b.n	2f01e <register_events+0x16>
		if (!k_queue_is_empty(event->queue)) {
   2f0c6:	6923      	ldr	r3, [r4, #16]
   2f0c8:	681b      	ldr	r3, [r3, #0]
   2f0ca:	bb33      	cbnz	r3, 2f11a <register_events+0x112>
		} else if (!just_check && poller->is_polling) {
   2f0cc:	9b01      	ldr	r3, [sp, #4]
   2f0ce:	2b00      	cmp	r3, #0
   2f0d0:	d1e0      	bne.n	2f094 <register_events+0x8c>
   2f0d2:	782b      	ldrb	r3, [r5, #0]
   2f0d4:	2b00      	cmp	r3, #0
   2f0d6:	d0dd      	beq.n	2f094 <register_events+0x8c>
	switch (event->type) {
   2f0d8:	7b63      	ldrb	r3, [r4, #13]
   2f0da:	f003 030f 	and.w	r3, r3, #15
   2f0de:	2b04      	cmp	r3, #4
   2f0e0:	d85d      	bhi.n	2f19e <register_events+0x196>
   2f0e2:	e8df f003 	tbb	[pc, r3]
   2f0e6:	4931      	.short	0x4931
   2f0e8:	5c1c      	.short	0x5c1c
   2f0ea:	35          	.byte	0x35
   2f0eb:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   2f0ec:	6923      	ldr	r3, [r4, #16]
   2f0ee:	689b      	ldr	r3, [r3, #8]
   2f0f0:	2b00      	cmp	r3, #0
   2f0f2:	d0eb      	beq.n	2f0cc <register_events+0xc4>
			*state = K_POLL_STATE_SIGNALED;
   2f0f4:	2201      	movs	r2, #1
   2f0f6:	e7c3      	b.n	2f080 <register_events+0x78>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   2f0f8:	2350      	movs	r3, #80	; 0x50
   2f0fa:	4a36      	ldr	r2, [pc, #216]	; (2f1d4 <register_events+0x1cc>)
   2f0fc:	4936      	ldr	r1, [pc, #216]	; (2f1d8 <register_events+0x1d0>)
   2f0fe:	4831      	ldr	r0, [pc, #196]	; (2f1c4 <register_events+0x1bc>)
   2f100:	f004 fa57 	bl	335b2 <printk>
   2f104:	7b61      	ldrb	r1, [r4, #13]
   2f106:	4835      	ldr	r0, [pc, #212]	; (2f1dc <register_events+0x1d4>)
   2f108:	f001 010f 	and.w	r1, r1, #15
   2f10c:	f004 fa51 	bl	335b2 <printk>
   2f110:	2150      	movs	r1, #80	; 0x50
   2f112:	4830      	ldr	r0, [pc, #192]	; (2f1d4 <register_events+0x1cc>)
   2f114:	f004 fd4e 	bl	33bb4 <assert_post_action>
		break;
   2f118:	e7d8      	b.n	2f0cc <register_events+0xc4>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2f11a:	2204      	movs	r2, #4
   2f11c:	e7b0      	b.n	2f080 <register_events+0x78>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   2f11e:	6923      	ldr	r3, [r4, #16]
   2f120:	b963      	cbnz	r3, 2f13c <register_events+0x134>
   2f122:	492f      	ldr	r1, [pc, #188]	; (2f1e0 <register_events+0x1d8>)
   2f124:	2375      	movs	r3, #117	; 0x75
   2f126:	4a2b      	ldr	r2, [pc, #172]	; (2f1d4 <register_events+0x1cc>)
   2f128:	4826      	ldr	r0, [pc, #152]	; (2f1c4 <register_events+0x1bc>)
   2f12a:	f004 fa42 	bl	335b2 <printk>
   2f12e:	482d      	ldr	r0, [pc, #180]	; (2f1e4 <register_events+0x1dc>)
   2f130:	f004 fa3f 	bl	335b2 <printk>
   2f134:	2175      	movs	r1, #117	; 0x75
   2f136:	4827      	ldr	r0, [pc, #156]	; (2f1d4 <register_events+0x1cc>)
   2f138:	f004 fd3c 	bl	33bb4 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   2f13c:	462a      	mov	r2, r5
   2f13e:	4621      	mov	r1, r4
   2f140:	6920      	ldr	r0, [r4, #16]
   2f142:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   2f144:	f009 fee0 	bl	38f08 <add_event>
	event->poller = poller;
   2f148:	60a5      	str	r5, [r4, #8]
				events_registered += 1;
   2f14a:	f109 0901 	add.w	r9, r9, #1
   2f14e:	e7a1      	b.n	2f094 <register_events+0x8c>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   2f150:	6923      	ldr	r3, [r4, #16]
   2f152:	b963      	cbnz	r3, 2f16e <register_events+0x166>
   2f154:	4924      	ldr	r1, [pc, #144]	; (2f1e8 <register_events+0x1e0>)
   2f156:	2379      	movs	r3, #121	; 0x79
   2f158:	4a1e      	ldr	r2, [pc, #120]	; (2f1d4 <register_events+0x1cc>)
   2f15a:	481a      	ldr	r0, [pc, #104]	; (2f1c4 <register_events+0x1bc>)
   2f15c:	f004 fa29 	bl	335b2 <printk>
   2f160:	4822      	ldr	r0, [pc, #136]	; (2f1ec <register_events+0x1e4>)
   2f162:	f004 fa26 	bl	335b2 <printk>
   2f166:	2179      	movs	r1, #121	; 0x79
   2f168:	481a      	ldr	r0, [pc, #104]	; (2f1d4 <register_events+0x1cc>)
   2f16a:	f004 fd23 	bl	33bb4 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   2f16e:	6920      	ldr	r0, [r4, #16]
   2f170:	462a      	mov	r2, r5
   2f172:	4621      	mov	r1, r4
   2f174:	3014      	adds	r0, #20
   2f176:	e7e5      	b.n	2f144 <register_events+0x13c>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   2f178:	6923      	ldr	r3, [r4, #16]
   2f17a:	b963      	cbnz	r3, 2f196 <register_events+0x18e>
   2f17c:	491c      	ldr	r1, [pc, #112]	; (2f1f0 <register_events+0x1e8>)
   2f17e:	237d      	movs	r3, #125	; 0x7d
   2f180:	4a14      	ldr	r2, [pc, #80]	; (2f1d4 <register_events+0x1cc>)
   2f182:	4810      	ldr	r0, [pc, #64]	; (2f1c4 <register_events+0x1bc>)
   2f184:	f004 fa15 	bl	335b2 <printk>
   2f188:	481a      	ldr	r0, [pc, #104]	; (2f1f4 <register_events+0x1ec>)
   2f18a:	f004 fa12 	bl	335b2 <printk>
   2f18e:	217d      	movs	r1, #125	; 0x7d
   2f190:	4810      	ldr	r0, [pc, #64]	; (2f1d4 <register_events+0x1cc>)
   2f192:	f004 fd0f 	bl	33bb4 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   2f196:	462a      	mov	r2, r5
   2f198:	4621      	mov	r1, r4
   2f19a:	6920      	ldr	r0, [r4, #16]
   2f19c:	e7d2      	b.n	2f144 <register_events+0x13c>
		__ASSERT(false, "invalid event type\n");
   2f19e:	2384      	movs	r3, #132	; 0x84
   2f1a0:	4a0c      	ldr	r2, [pc, #48]	; (2f1d4 <register_events+0x1cc>)
   2f1a2:	490d      	ldr	r1, [pc, #52]	; (2f1d8 <register_events+0x1d0>)
   2f1a4:	4807      	ldr	r0, [pc, #28]	; (2f1c4 <register_events+0x1bc>)
   2f1a6:	f004 fa04 	bl	335b2 <printk>
   2f1aa:	4813      	ldr	r0, [pc, #76]	; (2f1f8 <register_events+0x1f0>)
   2f1ac:	f004 fa01 	bl	335b2 <printk>
   2f1b0:	2184      	movs	r1, #132	; 0x84
   2f1b2:	4808      	ldr	r0, [pc, #32]	; (2f1d4 <register_events+0x1cc>)
   2f1b4:	f004 fcfe 	bl	33bb4 <assert_post_action>
		break;
   2f1b8:	e7c6      	b.n	2f148 <register_events+0x140>
   2f1ba:	bf00      	nop
   2f1bc:	20027604 	.word	0x20027604
   2f1c0:	0003c76b 	.word	0x0003c76b
   2f1c4:	0003b773 	.word	0x0003b773
   2f1c8:	0003c780 	.word	0x0003c780
   2f1cc:	0003c798 	.word	0x0003c798
   2f1d0:	0003c7af 	.word	0x0003c7af
   2f1d4:	0004008a 	.word	0x0004008a
   2f1d8:	0003fd2f 	.word	0x0003fd2f
   2f1dc:	000400e0 	.word	0x000400e0
   2f1e0:	0003ffe4 	.word	0x0003ffe4
   2f1e4:	0003fffe 	.word	0x0003fffe
   2f1e8:	00040013 	.word	0x00040013
   2f1ec:	0004002f 	.word	0x0004002f
   2f1f0:	00040040 	.word	0x00040040
   2f1f4:	0004005d 	.word	0x0004005d
   2f1f8:	00040074 	.word	0x00040074
   2f1fc:	0003c745 	.word	0x0003c745

0002f200 <z_impl_k_poll>:
int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   2f200:	2301      	movs	r3, #1
{
   2f202:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f204:	b087      	sub	sp, #28
	struct _poller poller = { .is_polling = true,
   2f206:	f88d 300c 	strb.w	r3, [sp, #12]
				  .thread     = _current,
   2f20a:	4b71      	ldr	r3, [pc, #452]	; (2f3d0 <z_impl_k_poll+0x1d0>)
{
   2f20c:	4604      	mov	r4, r0
	struct _poller poller = { .is_polling = true,
   2f20e:	689b      	ldr	r3, [r3, #8]
{
   2f210:	460d      	mov	r5, r1
	struct _poller poller = { .is_polling = true,
   2f212:	9304      	str	r3, [sp, #16]
   2f214:	4b6f      	ldr	r3, [pc, #444]	; (2f3d4 <z_impl_k_poll+0x1d4>)
{
   2f216:	4616      	mov	r6, r2
	struct _poller poller = { .is_polling = true,
   2f218:	9305      	str	r3, [sp, #20]
   2f21a:	f3ef 8305 	mrs	r3, IPSR
				  .cb         = k_poll_poller_cb };

	__ASSERT(!arch_is_in_isr(), "");
   2f21e:	b173      	cbz	r3, 2f23e <z_impl_k_poll+0x3e>
   2f220:	496d      	ldr	r1, [pc, #436]	; (2f3d8 <z_impl_k_poll+0x1d8>)
   2f222:	f44f 7380 	mov.w	r3, #256	; 0x100
   2f226:	4a6d      	ldr	r2, [pc, #436]	; (2f3dc <z_impl_k_poll+0x1dc>)
   2f228:	486d      	ldr	r0, [pc, #436]	; (2f3e0 <z_impl_k_poll+0x1e0>)
   2f22a:	f004 f9c2 	bl	335b2 <printk>
   2f22e:	486d      	ldr	r0, [pc, #436]	; (2f3e4 <z_impl_k_poll+0x1e4>)
   2f230:	f004 f9bf 	bl	335b2 <printk>
   2f234:	f44f 7180 	mov.w	r1, #256	; 0x100
   2f238:	4868      	ldr	r0, [pc, #416]	; (2f3dc <z_impl_k_poll+0x1dc>)
   2f23a:	f004 fcbb 	bl	33bb4 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   2f23e:	b974      	cbnz	r4, 2f25e <z_impl_k_poll+0x5e>
   2f240:	4969      	ldr	r1, [pc, #420]	; (2f3e8 <z_impl_k_poll+0x1e8>)
   2f242:	f240 1301 	movw	r3, #257	; 0x101
   2f246:	4a65      	ldr	r2, [pc, #404]	; (2f3dc <z_impl_k_poll+0x1dc>)
   2f248:	4865      	ldr	r0, [pc, #404]	; (2f3e0 <z_impl_k_poll+0x1e0>)
   2f24a:	f004 f9b2 	bl	335b2 <printk>
   2f24e:	4867      	ldr	r0, [pc, #412]	; (2f3ec <z_impl_k_poll+0x1ec>)
   2f250:	f004 f9af 	bl	335b2 <printk>
   2f254:	f240 1101 	movw	r1, #257	; 0x101
   2f258:	4860      	ldr	r0, [pc, #384]	; (2f3dc <z_impl_k_poll+0x1dc>)
   2f25a:	f004 fcab 	bl	33bb4 <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   2f25e:	2d00      	cmp	r5, #0
   2f260:	da0e      	bge.n	2f280 <z_impl_k_poll+0x80>
   2f262:	4963      	ldr	r1, [pc, #396]	; (2f3f0 <z_impl_k_poll+0x1f0>)
   2f264:	f44f 7381 	mov.w	r3, #258	; 0x102
   2f268:	4a5c      	ldr	r2, [pc, #368]	; (2f3dc <z_impl_k_poll+0x1dc>)
   2f26a:	485d      	ldr	r0, [pc, #372]	; (2f3e0 <z_impl_k_poll+0x1e0>)
   2f26c:	f004 f9a1 	bl	335b2 <printk>
   2f270:	4860      	ldr	r0, [pc, #384]	; (2f3f4 <z_impl_k_poll+0x1f4>)
   2f272:	f004 f99e 	bl	335b2 <printk>
   2f276:	f44f 7181 	mov.w	r1, #258	; 0x102
   2f27a:	4858      	ldr	r0, [pc, #352]	; (2f3dc <z_impl_k_poll+0x1dc>)
   2f27c:	f004 fc9a 	bl	33bb4 <assert_post_action>

	events_registered = register_events(events, num_events, &poller,
   2f280:	fab6 f386 	clz	r3, r6
   2f284:	aa03      	add	r2, sp, #12
   2f286:	095b      	lsrs	r3, r3, #5
   2f288:	4629      	mov	r1, r5
   2f28a:	4620      	mov	r0, r4
   2f28c:	f7ff febc 	bl	2f008 <register_events>
   2f290:	4607      	mov	r7, r0
	__asm__ volatile(
   2f292:	f04f 0320 	mov.w	r3, #32
   2f296:	f3ef 8511 	mrs	r5, BASEPRI
   2f29a:	f383 8811 	msr	BASEPRI, r3
   2f29e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2f2a2:	4855      	ldr	r0, [pc, #340]	; (2f3f8 <z_impl_k_poll+0x1f8>)
   2f2a4:	f7ff f912 	bl	2e4cc <z_spin_lock_valid>
   2f2a8:	b968      	cbnz	r0, 2f2c6 <z_impl_k_poll+0xc6>
   2f2aa:	235c      	movs	r3, #92	; 0x5c
   2f2ac:	4a53      	ldr	r2, [pc, #332]	; (2f3fc <z_impl_k_poll+0x1fc>)
   2f2ae:	4954      	ldr	r1, [pc, #336]	; (2f400 <z_impl_k_poll+0x200>)
   2f2b0:	484b      	ldr	r0, [pc, #300]	; (2f3e0 <z_impl_k_poll+0x1e0>)
   2f2b2:	f004 f97e 	bl	335b2 <printk>
   2f2b6:	4950      	ldr	r1, [pc, #320]	; (2f3f8 <z_impl_k_poll+0x1f8>)
   2f2b8:	4852      	ldr	r0, [pc, #328]	; (2f404 <z_impl_k_poll+0x204>)
   2f2ba:	f004 f97a 	bl	335b2 <printk>
   2f2be:	215c      	movs	r1, #92	; 0x5c
   2f2c0:	484e      	ldr	r0, [pc, #312]	; (2f3fc <z_impl_k_poll+0x1fc>)
   2f2c2:	f004 fc77 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2f2c6:	484c      	ldr	r0, [pc, #304]	; (2f3f8 <z_impl_k_poll+0x1f8>)
   2f2c8:	f7ff f91e 	bl	2e508 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   2f2cc:	f89d 300c 	ldrb.w	r3, [sp, #12]
   2f2d0:	b9f3      	cbnz	r3, 2f310 <z_impl_k_poll+0x110>
		clear_event_registrations(events, events_registered, key);
   2f2d2:	4620      	mov	r0, r4
   2f2d4:	462a      	mov	r2, r5
   2f2d6:	4639      	mov	r1, r7
   2f2d8:	f7ff fdde 	bl	2ee98 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2f2dc:	4846      	ldr	r0, [pc, #280]	; (2f3f8 <z_impl_k_poll+0x1f8>)
   2f2de:	f7ff f903 	bl	2e4e8 <z_spin_unlock_valid>
   2f2e2:	b968      	cbnz	r0, 2f300 <z_impl_k_poll+0x100>
   2f2e4:	2384      	movs	r3, #132	; 0x84
   2f2e6:	4a45      	ldr	r2, [pc, #276]	; (2f3fc <z_impl_k_poll+0x1fc>)
   2f2e8:	4947      	ldr	r1, [pc, #284]	; (2f408 <z_impl_k_poll+0x208>)
   2f2ea:	483d      	ldr	r0, [pc, #244]	; (2f3e0 <z_impl_k_poll+0x1e0>)
   2f2ec:	f004 f961 	bl	335b2 <printk>
   2f2f0:	4941      	ldr	r1, [pc, #260]	; (2f3f8 <z_impl_k_poll+0x1f8>)
   2f2f2:	4846      	ldr	r0, [pc, #280]	; (2f40c <z_impl_k_poll+0x20c>)
   2f2f4:	f004 f95d 	bl	335b2 <printk>
   2f2f8:	2184      	movs	r1, #132	; 0x84
   2f2fa:	4840      	ldr	r0, [pc, #256]	; (2f3fc <z_impl_k_poll+0x1fc>)
   2f2fc:	f004 fc5a 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   2f300:	f385 8811 	msr	BASEPRI, r5
   2f304:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		return 0;
   2f308:	2500      	movs	r5, #0
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   2f30a:	4628      	mov	r0, r5
   2f30c:	b007      	add	sp, #28
   2f30e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	poller.is_polling = false;
   2f310:	2300      	movs	r3, #0
   2f312:	f88d 300c 	strb.w	r3, [sp, #12]
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2f316:	b9c6      	cbnz	r6, 2f34a <z_impl_k_poll+0x14a>
   2f318:	4837      	ldr	r0, [pc, #220]	; (2f3f8 <z_impl_k_poll+0x1f8>)
   2f31a:	f7ff f8e5 	bl	2e4e8 <z_spin_unlock_valid>
   2f31e:	b968      	cbnz	r0, 2f33c <z_impl_k_poll+0x13c>
   2f320:	2384      	movs	r3, #132	; 0x84
   2f322:	4a36      	ldr	r2, [pc, #216]	; (2f3fc <z_impl_k_poll+0x1fc>)
   2f324:	4938      	ldr	r1, [pc, #224]	; (2f408 <z_impl_k_poll+0x208>)
   2f326:	482e      	ldr	r0, [pc, #184]	; (2f3e0 <z_impl_k_poll+0x1e0>)
   2f328:	f004 f943 	bl	335b2 <printk>
   2f32c:	4932      	ldr	r1, [pc, #200]	; (2f3f8 <z_impl_k_poll+0x1f8>)
   2f32e:	4837      	ldr	r0, [pc, #220]	; (2f40c <z_impl_k_poll+0x20c>)
   2f330:	f004 f93f 	bl	335b2 <printk>
   2f334:	2184      	movs	r1, #132	; 0x84
   2f336:	4831      	ldr	r0, [pc, #196]	; (2f3fc <z_impl_k_poll+0x1fc>)
   2f338:	f004 fc3c 	bl	33bb4 <assert_post_action>
   2f33c:	f385 8811 	msr	BASEPRI, r5
   2f340:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   2f344:	f06f 050a 	mvn.w	r5, #10
   2f348:	e7df      	b.n	2f30a <z_impl_k_poll+0x10a>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   2f34a:	aa01      	add	r2, sp, #4
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   2f34c:	4629      	mov	r1, r5
   2f34e:	4633      	mov	r3, r6
   2f350:	4829      	ldr	r0, [pc, #164]	; (2f3f8 <z_impl_k_poll+0x1f8>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   2f352:	e9cd 2201 	strd	r2, r2, [sp, #4]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   2f356:	f7fe fb61 	bl	2da1c <z_pend_curr>
   2f35a:	4605      	mov	r5, r0
	__asm__ volatile(
   2f35c:	f04f 0320 	mov.w	r3, #32
   2f360:	f3ef 8611 	mrs	r6, BASEPRI
   2f364:	f383 8811 	msr	BASEPRI, r3
   2f368:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2f36c:	4822      	ldr	r0, [pc, #136]	; (2f3f8 <z_impl_k_poll+0x1f8>)
   2f36e:	f7ff f8ad 	bl	2e4cc <z_spin_lock_valid>
   2f372:	b968      	cbnz	r0, 2f390 <z_impl_k_poll+0x190>
   2f374:	235c      	movs	r3, #92	; 0x5c
   2f376:	4a21      	ldr	r2, [pc, #132]	; (2f3fc <z_impl_k_poll+0x1fc>)
   2f378:	4921      	ldr	r1, [pc, #132]	; (2f400 <z_impl_k_poll+0x200>)
   2f37a:	4819      	ldr	r0, [pc, #100]	; (2f3e0 <z_impl_k_poll+0x1e0>)
   2f37c:	f004 f919 	bl	335b2 <printk>
   2f380:	491d      	ldr	r1, [pc, #116]	; (2f3f8 <z_impl_k_poll+0x1f8>)
   2f382:	4820      	ldr	r0, [pc, #128]	; (2f404 <z_impl_k_poll+0x204>)
   2f384:	f004 f915 	bl	335b2 <printk>
   2f388:	215c      	movs	r1, #92	; 0x5c
   2f38a:	481c      	ldr	r0, [pc, #112]	; (2f3fc <z_impl_k_poll+0x1fc>)
   2f38c:	f004 fc12 	bl	33bb4 <assert_post_action>
	z_spin_lock_set_owner(l);
   2f390:	4819      	ldr	r0, [pc, #100]	; (2f3f8 <z_impl_k_poll+0x1f8>)
   2f392:	f7ff f8b9 	bl	2e508 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   2f396:	4620      	mov	r0, r4
   2f398:	4632      	mov	r2, r6
   2f39a:	4639      	mov	r1, r7
   2f39c:	f7ff fd7c 	bl	2ee98 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2f3a0:	4815      	ldr	r0, [pc, #84]	; (2f3f8 <z_impl_k_poll+0x1f8>)
   2f3a2:	f7ff f8a1 	bl	2e4e8 <z_spin_unlock_valid>
   2f3a6:	b968      	cbnz	r0, 2f3c4 <z_impl_k_poll+0x1c4>
   2f3a8:	2384      	movs	r3, #132	; 0x84
   2f3aa:	4a14      	ldr	r2, [pc, #80]	; (2f3fc <z_impl_k_poll+0x1fc>)
   2f3ac:	4916      	ldr	r1, [pc, #88]	; (2f408 <z_impl_k_poll+0x208>)
   2f3ae:	480c      	ldr	r0, [pc, #48]	; (2f3e0 <z_impl_k_poll+0x1e0>)
   2f3b0:	f004 f8ff 	bl	335b2 <printk>
   2f3b4:	4910      	ldr	r1, [pc, #64]	; (2f3f8 <z_impl_k_poll+0x1f8>)
   2f3b6:	4815      	ldr	r0, [pc, #84]	; (2f40c <z_impl_k_poll+0x20c>)
   2f3b8:	f004 f8fb 	bl	335b2 <printk>
   2f3bc:	2184      	movs	r1, #132	; 0x84
   2f3be:	480f      	ldr	r0, [pc, #60]	; (2f3fc <z_impl_k_poll+0x1fc>)
   2f3c0:	f004 fbf8 	bl	33bb4 <assert_post_action>
	__asm__ volatile(
   2f3c4:	f386 8811 	msr	BASEPRI, r6
   2f3c8:	f3bf 8f6f 	isb	sy
	return swap_rc;
   2f3cc:	e79d      	b.n	2f30a <z_impl_k_poll+0x10a>
   2f3ce:	bf00      	nop
   2f3d0:	200274dc 	.word	0x200274dc
   2f3d4:	0002ee29 	.word	0x0002ee29
   2f3d8:	0003fcbf 	.word	0x0003fcbf
   2f3dc:	0004008a 	.word	0x0004008a
   2f3e0:	0003b773 	.word	0x0003b773
   2f3e4:	0003cb7f 	.word	0x0003cb7f
   2f3e8:	000400fd 	.word	0x000400fd
   2f3ec:	00040113 	.word	0x00040113
   2f3f0:	00040122 	.word	0x00040122
   2f3f4:	00040132 	.word	0x00040132
   2f3f8:	20027604 	.word	0x20027604
   2f3fc:	0003c745 	.word	0x0003c745
   2f400:	0003c76b 	.word	0x0003c76b
   2f404:	0003c780 	.word	0x0003c780
   2f408:	0003c798 	.word	0x0003c798
   2f40c:	0003c7af 	.word	0x0003c7af

0002f410 <fabs>:
   2f410:	ec51 0b10 	vmov	r0, r1, d0
   2f414:	ee10 2a10 	vmov	r2, s0
   2f418:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   2f41c:	ec43 2b10 	vmov	d0, r2, r3
   2f420:	4770      	bx	lr
   2f422:	bf00      	nop

0002f424 <fabsf>:
   2f424:	ee10 3a10 	vmov	r3, s0
   2f428:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   2f42c:	ee00 3a10 	vmov	s0, r3
   2f430:	4770      	bx	lr
   2f432:	bf00      	nop

0002f434 <floorf>:
   2f434:	febb 0a40 	vrintm.f32	s0, s0
   2f438:	4770      	bx	lr
   2f43a:	bf00      	nop

0002f43c <fmaxf>:
   2f43c:	b508      	push	{r3, lr}
   2f43e:	ed2d 8b02 	vpush	{d8}
   2f442:	eeb0 8a60 	vmov.f32	s16, s1
   2f446:	eef0 8a40 	vmov.f32	s17, s0
   2f44a:	f000 f833 	bl	2f4b4 <__fpclassifyf>
   2f44e:	b920      	cbnz	r0, 2f45a <fmaxf+0x1e>
   2f450:	eeb0 0a48 	vmov.f32	s0, s16
   2f454:	ecbd 8b02 	vpop	{d8}
   2f458:	bd08      	pop	{r3, pc}
   2f45a:	eeb0 0a48 	vmov.f32	s0, s16
   2f45e:	f000 f829 	bl	2f4b4 <__fpclassifyf>
   2f462:	b120      	cbz	r0, 2f46e <fmaxf+0x32>
   2f464:	eef4 8ac8 	vcmpe.f32	s17, s16
   2f468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2f46c:	ddf0      	ble.n	2f450 <fmaxf+0x14>
   2f46e:	eeb0 0a68 	vmov.f32	s0, s17
   2f472:	ecbd 8b02 	vpop	{d8}
   2f476:	bd08      	pop	{r3, pc}

0002f478 <fminf>:
   2f478:	b508      	push	{r3, lr}
   2f47a:	ed2d 8b02 	vpush	{d8}
   2f47e:	eeb0 8a60 	vmov.f32	s16, s1
   2f482:	eef0 8a40 	vmov.f32	s17, s0
   2f486:	f000 f815 	bl	2f4b4 <__fpclassifyf>
   2f48a:	b920      	cbnz	r0, 2f496 <fminf+0x1e>
   2f48c:	eeb0 0a48 	vmov.f32	s0, s16
   2f490:	ecbd 8b02 	vpop	{d8}
   2f494:	bd08      	pop	{r3, pc}
   2f496:	eeb0 0a48 	vmov.f32	s0, s16
   2f49a:	f000 f80b 	bl	2f4b4 <__fpclassifyf>
   2f49e:	b120      	cbz	r0, 2f4aa <fminf+0x32>
   2f4a0:	eef4 8ac8 	vcmpe.f32	s17, s16
   2f4a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2f4a8:	d5f0      	bpl.n	2f48c <fminf+0x14>
   2f4aa:	eeb0 0a68 	vmov.f32	s0, s17
   2f4ae:	ecbd 8b02 	vpop	{d8}
   2f4b2:	bd08      	pop	{r3, pc}

0002f4b4 <__fpclassifyf>:
   2f4b4:	ee10 3a10 	vmov	r3, s0
   2f4b8:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
   2f4bc:	d00e      	beq.n	2f4dc <__fpclassifyf+0x28>
   2f4be:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
   2f4c2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
   2f4c6:	d30d      	bcc.n	2f4e4 <__fpclassifyf+0x30>
   2f4c8:	1e42      	subs	r2, r0, #1
   2f4ca:	4b07      	ldr	r3, [pc, #28]	; (2f4e8 <__fpclassifyf+0x34>)
   2f4cc:	429a      	cmp	r2, r3
   2f4ce:	d907      	bls.n	2f4e0 <__fpclassifyf+0x2c>
   2f4d0:	f1a0 40ff 	sub.w	r0, r0, #2139095040	; 0x7f800000
   2f4d4:	fab0 f080 	clz	r0, r0
   2f4d8:	0940      	lsrs	r0, r0, #5
   2f4da:	4770      	bx	lr
   2f4dc:	2002      	movs	r0, #2
   2f4de:	4770      	bx	lr
   2f4e0:	2003      	movs	r0, #3
   2f4e2:	4770      	bx	lr
   2f4e4:	2004      	movs	r0, #4
   2f4e6:	4770      	bx	lr
   2f4e8:	007ffffe 	.word	0x007ffffe

0002f4ec <roundf>:
   2f4ec:	feb8 0a40 	vrinta.f32	s0, s0
   2f4f0:	4770      	bx	lr
   2f4f2:	bf00      	nop

0002f4f4 <sinf>:
   2f4f4:	ee10 3a10 	vmov	r3, s0
   2f4f8:	4a21      	ldr	r2, [pc, #132]	; (2f580 <sinf+0x8c>)
   2f4fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   2f4fe:	4293      	cmp	r3, r2
   2f500:	b500      	push	{lr}
   2f502:	b083      	sub	sp, #12
   2f504:	dd1a      	ble.n	2f53c <sinf+0x48>
   2f506:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   2f50a:	db04      	blt.n	2f516 <sinf+0x22>
   2f50c:	ee30 0a40 	vsub.f32	s0, s0, s0
   2f510:	b003      	add	sp, #12
   2f512:	f85d fb04 	ldr.w	pc, [sp], #4
   2f516:	4668      	mov	r0, sp
   2f518:	f000 ffc0 	bl	3049c <__ieee754_rem_pio2f>
   2f51c:	f000 0003 	and.w	r0, r0, #3
   2f520:	2801      	cmp	r0, #1
   2f522:	d013      	beq.n	2f54c <sinf+0x58>
   2f524:	2802      	cmp	r0, #2
   2f526:	d020      	beq.n	2f56a <sinf+0x76>
   2f528:	b1b8      	cbz	r0, 2f55a <sinf+0x66>
   2f52a:	eddd 0a01 	vldr	s1, [sp, #4]
   2f52e:	ed9d 0a00 	vldr	s0, [sp]
   2f532:	f001 f8ed 	bl	30710 <__kernel_cosf>
   2f536:	eeb1 0a40 	vneg.f32	s0, s0
   2f53a:	e7e9      	b.n	2f510 <sinf+0x1c>
   2f53c:	2000      	movs	r0, #0
   2f53e:	eddf 0a11 	vldr	s1, [pc, #68]	; 2f584 <sinf+0x90>
   2f542:	f001 fcb9 	bl	30eb8 <__kernel_sinf>
   2f546:	b003      	add	sp, #12
   2f548:	f85d fb04 	ldr.w	pc, [sp], #4
   2f54c:	eddd 0a01 	vldr	s1, [sp, #4]
   2f550:	ed9d 0a00 	vldr	s0, [sp]
   2f554:	f001 f8dc 	bl	30710 <__kernel_cosf>
   2f558:	e7da      	b.n	2f510 <sinf+0x1c>
   2f55a:	2001      	movs	r0, #1
   2f55c:	eddd 0a01 	vldr	s1, [sp, #4]
   2f560:	ed9d 0a00 	vldr	s0, [sp]
   2f564:	f001 fca8 	bl	30eb8 <__kernel_sinf>
   2f568:	e7d2      	b.n	2f510 <sinf+0x1c>
   2f56a:	2001      	movs	r0, #1
   2f56c:	eddd 0a01 	vldr	s1, [sp, #4]
   2f570:	ed9d 0a00 	vldr	s0, [sp]
   2f574:	f001 fca0 	bl	30eb8 <__kernel_sinf>
   2f578:	eeb1 0a40 	vneg.f32	s0, s0
   2f57c:	e7c8      	b.n	2f510 <sinf+0x1c>
   2f57e:	bf00      	nop
   2f580:	3f490fd8 	.word	0x3f490fd8
   2f584:	00000000 	.word	0x00000000

0002f588 <expf>:
   2f588:	b508      	push	{r3, lr}
   2f58a:	ed2d 8b02 	vpush	{d8}
   2f58e:	eeb0 8a40 	vmov.f32	s16, s0
   2f592:	f000 fa37 	bl	2fa04 <__ieee754_expf>
   2f596:	4b16      	ldr	r3, [pc, #88]	; (2f5f0 <expf+0x68>)
   2f598:	eef0 8a40 	vmov.f32	s17, s0
   2f59c:	f993 3000 	ldrsb.w	r3, [r3]
   2f5a0:	3301      	adds	r3, #1
   2f5a2:	d012      	beq.n	2f5ca <expf+0x42>
   2f5a4:	eeb0 0a48 	vmov.f32	s0, s16
   2f5a8:	f001 fd6e 	bl	31088 <finitef>
   2f5ac:	b168      	cbz	r0, 2f5ca <expf+0x42>
   2f5ae:	eddf 7a11 	vldr	s15, [pc, #68]	; 2f5f4 <expf+0x6c>
   2f5b2:	eeb4 8ae7 	vcmpe.f32	s16, s15
   2f5b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2f5ba:	dc12      	bgt.n	2f5e2 <expf+0x5a>
   2f5bc:	eddf 7a0e 	vldr	s15, [pc, #56]	; 2f5f8 <expf+0x70>
   2f5c0:	eeb4 8ae7 	vcmpe.f32	s16, s15
   2f5c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2f5c8:	d404      	bmi.n	2f5d4 <expf+0x4c>
   2f5ca:	eeb0 0a68 	vmov.f32	s0, s17
   2f5ce:	ecbd 8b02 	vpop	{d8}
   2f5d2:	bd08      	pop	{r3, pc}
   2f5d4:	f005 ff7d 	bl	354d2 <__errno>
   2f5d8:	2322      	movs	r3, #34	; 0x22
   2f5da:	eddf 8a08 	vldr	s17, [pc, #32]	; 2f5fc <expf+0x74>
   2f5de:	6003      	str	r3, [r0, #0]
   2f5e0:	e7f3      	b.n	2f5ca <expf+0x42>
   2f5e2:	f005 ff76 	bl	354d2 <__errno>
   2f5e6:	2322      	movs	r3, #34	; 0x22
   2f5e8:	eddf 8a05 	vldr	s17, [pc, #20]	; 2f600 <expf+0x78>
   2f5ec:	6003      	str	r3, [r0, #0]
   2f5ee:	e7ec      	b.n	2f5ca <expf+0x42>
   2f5f0:	20020502 	.word	0x20020502
   2f5f4:	42b17180 	.word	0x42b17180
   2f5f8:	c2cff1b5 	.word	0xc2cff1b5
   2f5fc:	00000000 	.word	0x00000000
   2f600:	7f800000 	.word	0x7f800000

0002f604 <logf>:
   2f604:	b508      	push	{r3, lr}
   2f606:	ed2d 8b02 	vpush	{d8}
   2f60a:	eeb0 8a40 	vmov.f32	s16, s0
   2f60e:	f000 faf1 	bl	2fbf4 <__ieee754_logf>
   2f612:	4b14      	ldr	r3, [pc, #80]	; (2f664 <logf+0x60>)
   2f614:	f993 3000 	ldrsb.w	r3, [r3]
   2f618:	3301      	adds	r3, #1
   2f61a:	d014      	beq.n	2f646 <logf+0x42>
   2f61c:	eeb4 8a48 	vcmp.f32	s16, s16
   2f620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2f624:	d60f      	bvs.n	2f646 <logf+0x42>
   2f626:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   2f62a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2f62e:	dc0a      	bgt.n	2f646 <logf+0x42>
   2f630:	eeb5 8a40 	vcmp.f32	s16, #0.0
   2f634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2f638:	d108      	bne.n	2f64c <logf+0x48>
   2f63a:	f005 ff4a 	bl	354d2 <__errno>
   2f63e:	2322      	movs	r3, #34	; 0x22
   2f640:	ed9f 0a09 	vldr	s0, [pc, #36]	; 2f668 <logf+0x64>
   2f644:	6003      	str	r3, [r0, #0]
   2f646:	ecbd 8b02 	vpop	{d8}
   2f64a:	bd08      	pop	{r3, pc}
   2f64c:	f005 ff41 	bl	354d2 <__errno>
   2f650:	2321      	movs	r3, #33	; 0x21
   2f652:	ecbd 8b02 	vpop	{d8}
   2f656:	6003      	str	r3, [r0, #0]
   2f658:	4804      	ldr	r0, [pc, #16]	; (2f66c <logf+0x68>)
   2f65a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2f65e:	f001 bd1d 	b.w	3109c <nanf>
   2f662:	bf00      	nop
   2f664:	20020502 	.word	0x20020502
   2f668:	ff800000 	.word	0xff800000
   2f66c:	0003aa08 	.word	0x0003aa08

0002f670 <log10f>:
   2f670:	b508      	push	{r3, lr}
   2f672:	ed2d 8b02 	vpush	{d8}
   2f676:	eeb0 8a40 	vmov.f32	s16, s0
   2f67a:	f000 fbb7 	bl	2fdec <__ieee754_log10f>
   2f67e:	4b14      	ldr	r3, [pc, #80]	; (2f6d0 <log10f+0x60>)
   2f680:	f993 3000 	ldrsb.w	r3, [r3]
   2f684:	3301      	adds	r3, #1
   2f686:	d014      	beq.n	2f6b2 <log10f+0x42>
   2f688:	eeb4 8a48 	vcmp.f32	s16, s16
   2f68c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2f690:	d60f      	bvs.n	2f6b2 <log10f+0x42>
   2f692:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   2f696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2f69a:	d80a      	bhi.n	2f6b2 <log10f+0x42>
   2f69c:	eeb5 8a40 	vcmp.f32	s16, #0.0
   2f6a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2f6a4:	d108      	bne.n	2f6b8 <log10f+0x48>
   2f6a6:	f005 ff14 	bl	354d2 <__errno>
   2f6aa:	2322      	movs	r3, #34	; 0x22
   2f6ac:	ed9f 0a09 	vldr	s0, [pc, #36]	; 2f6d4 <log10f+0x64>
   2f6b0:	6003      	str	r3, [r0, #0]
   2f6b2:	ecbd 8b02 	vpop	{d8}
   2f6b6:	bd08      	pop	{r3, pc}
   2f6b8:	f005 ff0b 	bl	354d2 <__errno>
   2f6bc:	2321      	movs	r3, #33	; 0x21
   2f6be:	ecbd 8b02 	vpop	{d8}
   2f6c2:	6003      	str	r3, [r0, #0]
   2f6c4:	4804      	ldr	r0, [pc, #16]	; (2f6d8 <log10f+0x68>)
   2f6c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2f6ca:	f001 bce7 	b.w	3109c <nanf>
   2f6ce:	bf00      	nop
   2f6d0:	20020502 	.word	0x20020502
   2f6d4:	ff800000 	.word	0xff800000
   2f6d8:	0003aa08 	.word	0x0003aa08

0002f6dc <powf>:
   2f6dc:	b508      	push	{r3, lr}
   2f6de:	ed2d 8b04 	vpush	{d8-d9}
   2f6e2:	eef0 8a40 	vmov.f32	s17, s0
   2f6e6:	eeb0 8a60 	vmov.f32	s16, s1
   2f6ea:	f000 fbdf 	bl	2feac <__ieee754_powf>
   2f6ee:	4b47      	ldr	r3, [pc, #284]	; (2f80c <powf+0x130>)
   2f6f0:	eeb0 9a40 	vmov.f32	s18, s0
   2f6f4:	f993 3000 	ldrsb.w	r3, [r3]
   2f6f8:	3301      	adds	r3, #1
   2f6fa:	d01f      	beq.n	2f73c <powf+0x60>
   2f6fc:	eeb4 8a48 	vcmp.f32	s16, s16
   2f700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2f704:	d61a      	bvs.n	2f73c <powf+0x60>
   2f706:	eef4 8a68 	vcmp.f32	s17, s17
   2f70a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2f70e:	d659      	bvs.n	2f7c4 <powf+0xe8>
   2f710:	eddf 9a3f 	vldr	s19, [pc, #252]	; 2f810 <powf+0x134>
   2f714:	eef4 8a69 	vcmp.f32	s17, s19
   2f718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2f71c:	d113      	bne.n	2f746 <powf+0x6a>
   2f71e:	eeb4 8a69 	vcmp.f32	s16, s19
   2f722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2f726:	d029      	beq.n	2f77c <powf+0xa0>
   2f728:	eeb0 0a48 	vmov.f32	s0, s16
   2f72c:	f001 fcac 	bl	31088 <finitef>
   2f730:	b120      	cbz	r0, 2f73c <powf+0x60>
   2f732:	eeb4 8ae9 	vcmpe.f32	s16, s19
   2f736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2f73a:	d44c      	bmi.n	2f7d6 <powf+0xfa>
   2f73c:	eeb0 0a49 	vmov.f32	s0, s18
   2f740:	ecbd 8b04 	vpop	{d8-d9}
   2f744:	bd08      	pop	{r3, pc}
   2f746:	f001 fc9f 	bl	31088 <finitef>
   2f74a:	b1f0      	cbz	r0, 2f78a <powf+0xae>
   2f74c:	eeb5 9a40 	vcmp.f32	s18, #0.0
   2f750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2f754:	d1f2      	bne.n	2f73c <powf+0x60>
   2f756:	eeb0 0a68 	vmov.f32	s0, s17
   2f75a:	f001 fc95 	bl	31088 <finitef>
   2f75e:	2800      	cmp	r0, #0
   2f760:	d0ec      	beq.n	2f73c <powf+0x60>
   2f762:	eeb0 0a48 	vmov.f32	s0, s16
   2f766:	f001 fc8f 	bl	31088 <finitef>
   2f76a:	2800      	cmp	r0, #0
   2f76c:	d0e6      	beq.n	2f73c <powf+0x60>
   2f76e:	f005 feb0 	bl	354d2 <__errno>
   2f772:	2322      	movs	r3, #34	; 0x22
   2f774:	ed9f 9a26 	vldr	s18, [pc, #152]	; 2f810 <powf+0x134>
   2f778:	6003      	str	r3, [r0, #0]
   2f77a:	e7df      	b.n	2f73c <powf+0x60>
   2f77c:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
   2f780:	eeb0 0a49 	vmov.f32	s0, s18
   2f784:	ecbd 8b04 	vpop	{d8-d9}
   2f788:	bd08      	pop	{r3, pc}
   2f78a:	eeb0 0a68 	vmov.f32	s0, s17
   2f78e:	f001 fc7b 	bl	31088 <finitef>
   2f792:	2800      	cmp	r0, #0
   2f794:	d0da      	beq.n	2f74c <powf+0x70>
   2f796:	eeb0 0a48 	vmov.f32	s0, s16
   2f79a:	f001 fc75 	bl	31088 <finitef>
   2f79e:	2800      	cmp	r0, #0
   2f7a0:	d0d4      	beq.n	2f74c <powf+0x70>
   2f7a2:	eeb4 9a49 	vcmp.f32	s18, s18
   2f7a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2f7aa:	d627      	bvs.n	2f7fc <powf+0x120>
   2f7ac:	f005 fe91 	bl	354d2 <__errno>
   2f7b0:	eef5 8ac0 	vcmpe.f32	s17, #0.0
   2f7b4:	2322      	movs	r3, #34	; 0x22
   2f7b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2f7ba:	6003      	str	r3, [r0, #0]
   2f7bc:	d412      	bmi.n	2f7e4 <powf+0x108>
   2f7be:	ed9f 9a15 	vldr	s18, [pc, #84]	; 2f814 <powf+0x138>
   2f7c2:	e7bb      	b.n	2f73c <powf+0x60>
   2f7c4:	eeb5 8a40 	vcmp.f32	s16, #0.0
   2f7c8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   2f7cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2f7d0:	fe07 9a80 	vseleq.f32	s18, s15, s0
   2f7d4:	e7b2      	b.n	2f73c <powf+0x60>
   2f7d6:	f005 fe7c 	bl	354d2 <__errno>
   2f7da:	2321      	movs	r3, #33	; 0x21
   2f7dc:	ed9f 9a0e 	vldr	s18, [pc, #56]	; 2f818 <powf+0x13c>
   2f7e0:	6003      	str	r3, [r0, #0]
   2f7e2:	e7ab      	b.n	2f73c <powf+0x60>
   2f7e4:	eeb0 0a48 	vmov.f32	s0, s16
   2f7e8:	f001 fc5e 	bl	310a8 <rintf>
   2f7ec:	eeb4 0a48 	vcmp.f32	s0, s16
   2f7f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2f7f4:	d0e3      	beq.n	2f7be <powf+0xe2>
   2f7f6:	ed9f 9a08 	vldr	s18, [pc, #32]	; 2f818 <powf+0x13c>
   2f7fa:	e79f      	b.n	2f73c <powf+0x60>
   2f7fc:	f005 fe69 	bl	354d2 <__errno>
   2f800:	2321      	movs	r3, #33	; 0x21
   2f802:	ee89 9aa9 	vdiv.f32	s18, s19, s19
   2f806:	6003      	str	r3, [r0, #0]
   2f808:	e798      	b.n	2f73c <powf+0x60>
   2f80a:	bf00      	nop
   2f80c:	20020502 	.word	0x20020502
   2f810:	00000000 	.word	0x00000000
   2f814:	7f800000 	.word	0x7f800000
   2f818:	ff800000 	.word	0xff800000

0002f81c <sqrtf>:
   2f81c:	b508      	push	{r3, lr}
   2f81e:	ed2d 8b02 	vpush	{d8}
   2f822:	eeb0 8a40 	vmov.f32	s16, s0
   2f826:	f000 ff6f 	bl	30708 <__ieee754_sqrtf>
   2f82a:	4b0e      	ldr	r3, [pc, #56]	; (2f864 <sqrtf+0x48>)
   2f82c:	f993 3000 	ldrsb.w	r3, [r3]
   2f830:	3301      	adds	r3, #1
   2f832:	d00b      	beq.n	2f84c <sqrtf+0x30>
   2f834:	eeb4 8a48 	vcmp.f32	s16, s16
   2f838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2f83c:	d606      	bvs.n	2f84c <sqrtf+0x30>
   2f83e:	eddf 8a0a 	vldr	s17, [pc, #40]	; 2f868 <sqrtf+0x4c>
   2f842:	eeb4 8ae8 	vcmpe.f32	s16, s17
   2f846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2f84a:	d402      	bmi.n	2f852 <sqrtf+0x36>
   2f84c:	ecbd 8b02 	vpop	{d8}
   2f850:	bd08      	pop	{r3, pc}
   2f852:	f005 fe3e 	bl	354d2 <__errno>
   2f856:	ee88 0aa8 	vdiv.f32	s0, s17, s17
   2f85a:	2321      	movs	r3, #33	; 0x21
   2f85c:	6003      	str	r3, [r0, #0]
   2f85e:	ecbd 8b02 	vpop	{d8}
   2f862:	bd08      	pop	{r3, pc}
   2f864:	20020502 	.word	0x20020502
   2f868:	00000000 	.word	0x00000000

0002f86c <__ieee754_sqrt>:
   2f86c:	4a63      	ldr	r2, [pc, #396]	; (2f9fc <__ieee754_sqrt+0x190>)
   2f86e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f872:	ec55 4b10 	vmov	r4, r5, d0
   2f876:	43aa      	bics	r2, r5
   2f878:	f000 8098 	beq.w	2f9ac <__ieee754_sqrt+0x140>
   2f87c:	2d00      	cmp	r5, #0
   2f87e:	462b      	mov	r3, r5
   2f880:	ee10 0a10 	vmov	r0, s0
   2f884:	dd5a      	ble.n	2f93c <__ieee754_sqrt+0xd0>
   2f886:	ea5f 5e25 	movs.w	lr, r5, asr #20
   2f88a:	f000 80ab 	beq.w	2f9e4 <__ieee754_sqrt+0x178>
   2f88e:	f3c3 0113 	ubfx	r1, r3, #0, #20
   2f892:	f2ae 3eff 	subw	lr, lr, #1023	; 0x3ff
   2f896:	0fc3      	lsrs	r3, r0, #31
   2f898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   2f89c:	f01e 0f01 	tst.w	lr, #1
   2f8a0:	ea4f 0240 	mov.w	r2, r0, lsl #1
   2f8a4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   2f8a8:	d003      	beq.n	2f8b2 <__ieee754_sqrt+0x46>
   2f8aa:	0fd1      	lsrs	r1, r2, #31
   2f8ac:	0082      	lsls	r2, r0, #2
   2f8ae:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   2f8b2:	f04f 0c00 	mov.w	ip, #0
   2f8b6:	ea4f 0e6e 	mov.w	lr, lr, asr #1
   2f8ba:	2416      	movs	r4, #22
   2f8bc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   2f8c0:	4665      	mov	r5, ip
   2f8c2:	1868      	adds	r0, r5, r1
   2f8c4:	4298      	cmp	r0, r3
   2f8c6:	dc02      	bgt.n	2f8ce <__ieee754_sqrt+0x62>
   2f8c8:	1a1b      	subs	r3, r3, r0
   2f8ca:	1845      	adds	r5, r0, r1
   2f8cc:	448c      	add	ip, r1
   2f8ce:	005b      	lsls	r3, r3, #1
   2f8d0:	3c01      	subs	r4, #1
   2f8d2:	ea4f 0151 	mov.w	r1, r1, lsr #1
   2f8d6:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   2f8da:	ea4f 0242 	mov.w	r2, r2, lsl #1
   2f8de:	d1f0      	bne.n	2f8c2 <__ieee754_sqrt+0x56>
   2f8e0:	4627      	mov	r7, r4
   2f8e2:	2620      	movs	r6, #32
   2f8e4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   2f8e8:	e014      	b.n	2f914 <__ieee754_sqrt+0xa8>
   2f8ea:	d10a      	bne.n	2f902 <__ieee754_sqrt+0x96>
   2f8ec:	4290      	cmp	r0, r2
   2f8ee:	d808      	bhi.n	2f902 <__ieee754_sqrt+0x96>
   2f8f0:	2800      	cmp	r0, #0
   2f8f2:	eb00 0401 	add.w	r4, r0, r1
   2f8f6:	db1c      	blt.n	2f932 <__ieee754_sqrt+0xc6>
   2f8f8:	46a8      	mov	r8, r5
   2f8fa:	2300      	movs	r3, #0
   2f8fc:	1a12      	subs	r2, r2, r0
   2f8fe:	440f      	add	r7, r1
   2f900:	4645      	mov	r5, r8
   2f902:	0fd0      	lsrs	r0, r2, #31
   2f904:	3e01      	subs	r6, #1
   2f906:	ea4f 0151 	mov.w	r1, r1, lsr #1
   2f90a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   2f90e:	ea4f 0242 	mov.w	r2, r2, lsl #1
   2f912:	d034      	beq.n	2f97e <__ieee754_sqrt+0x112>
   2f914:	42ab      	cmp	r3, r5
   2f916:	eb01 0004 	add.w	r0, r1, r4
   2f91a:	dde6      	ble.n	2f8ea <__ieee754_sqrt+0x7e>
   2f91c:	2800      	cmp	r0, #0
   2f91e:	eb00 0401 	add.w	r4, r0, r1
   2f922:	db06      	blt.n	2f932 <__ieee754_sqrt+0xc6>
   2f924:	46a8      	mov	r8, r5
   2f926:	1b5b      	subs	r3, r3, r5
   2f928:	4290      	cmp	r0, r2
   2f92a:	bf88      	it	hi
   2f92c:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   2f930:	e7e4      	b.n	2f8fc <__ieee754_sqrt+0x90>
   2f932:	2c00      	cmp	r4, #0
   2f934:	dbf6      	blt.n	2f924 <__ieee754_sqrt+0xb8>
   2f936:	f105 0801 	add.w	r8, r5, #1
   2f93a:	e7f4      	b.n	2f926 <__ieee754_sqrt+0xba>
   2f93c:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   2f940:	4322      	orrs	r2, r4
   2f942:	d02c      	beq.n	2f99e <__ieee754_sqrt+0x132>
   2f944:	2d00      	cmp	r5, #0
   2f946:	d141      	bne.n	2f9cc <__ieee754_sqrt+0x160>
   2f948:	0ac4      	lsrs	r4, r0, #11
   2f94a:	3b15      	subs	r3, #21
   2f94c:	0540      	lsls	r0, r0, #21
   2f94e:	4622      	mov	r2, r4
   2f950:	2c00      	cmp	r4, #0
   2f952:	d0f9      	beq.n	2f948 <__ieee754_sqrt+0xdc>
   2f954:	02e5      	lsls	r5, r4, #11
   2f956:	d44b      	bmi.n	2f9f0 <__ieee754_sqrt+0x184>
   2f958:	2100      	movs	r1, #0
   2f95a:	e000      	b.n	2f95e <__ieee754_sqrt+0xf2>
   2f95c:	4629      	mov	r1, r5
   2f95e:	0052      	lsls	r2, r2, #1
   2f960:	1c4d      	adds	r5, r1, #1
   2f962:	02d4      	lsls	r4, r2, #11
   2f964:	d5fa      	bpl.n	2f95c <__ieee754_sqrt+0xf0>
   2f966:	4614      	mov	r4, r2
   2f968:	4602      	mov	r2, r0
   2f96a:	40a8      	lsls	r0, r5
   2f96c:	f1c5 0520 	rsb	r5, r5, #32
   2f970:	fa22 f505 	lsr.w	r5, r2, r5
   2f974:	eba3 0e01 	sub.w	lr, r3, r1
   2f978:	ea45 0304 	orr.w	r3, r5, r4
   2f97c:	e787      	b.n	2f88e <__ieee754_sqrt+0x22>
   2f97e:	4313      	orrs	r3, r2
   2f980:	d10f      	bne.n	2f9a2 <__ieee754_sqrt+0x136>
   2f982:	087e      	lsrs	r6, r7, #1
   2f984:	491e      	ldr	r1, [pc, #120]	; (2fa00 <__ieee754_sqrt+0x194>)
   2f986:	f01c 0f01 	tst.w	ip, #1
   2f98a:	eb01 016c 	add.w	r1, r1, ip, asr #1
   2f98e:	bf18      	it	ne
   2f990:	f046 4600 	orrne.w	r6, r6, #2147483648	; 0x80000000
   2f994:	eb01 530e 	add.w	r3, r1, lr, lsl #20
   2f998:	4632      	mov	r2, r6
   2f99a:	ec43 2b10 	vmov	d0, r2, r3
   2f99e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2f9a2:	1c7b      	adds	r3, r7, #1
   2f9a4:	d021      	beq.n	2f9ea <__ieee754_sqrt+0x17e>
   2f9a6:	1c7e      	adds	r6, r7, #1
   2f9a8:	0876      	lsrs	r6, r6, #1
   2f9aa:	e7eb      	b.n	2f984 <__ieee754_sqrt+0x118>
   2f9ac:	ee10 2a10 	vmov	r2, s0
   2f9b0:	462b      	mov	r3, r5
   2f9b2:	ee10 0a10 	vmov	r0, s0
   2f9b6:	4629      	mov	r1, r5
   2f9b8:	f7dd fb78 	bl	d0ac <__aeabi_dmul>
   2f9bc:	4622      	mov	r2, r4
   2f9be:	462b      	mov	r3, r5
   2f9c0:	f7dd f9be 	bl	cd40 <__adddf3>
   2f9c4:	ec41 0b10 	vmov	d0, r0, r1
   2f9c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2f9cc:	ee10 2a10 	vmov	r2, s0
   2f9d0:	4629      	mov	r1, r5
   2f9d2:	f7dd f9b3 	bl	cd3c <__aeabi_dsub>
   2f9d6:	4602      	mov	r2, r0
   2f9d8:	460b      	mov	r3, r1
   2f9da:	f7dd fc91 	bl	d300 <__aeabi_ddiv>
   2f9de:	ec41 0b10 	vmov	d0, r0, r1
   2f9e2:	e7dc      	b.n	2f99e <__ieee754_sqrt+0x132>
   2f9e4:	462a      	mov	r2, r5
   2f9e6:	4673      	mov	r3, lr
   2f9e8:	e7b6      	b.n	2f958 <__ieee754_sqrt+0xec>
   2f9ea:	f10c 0c01 	add.w	ip, ip, #1
   2f9ee:	e7c9      	b.n	2f984 <__ieee754_sqrt+0x118>
   2f9f0:	4602      	mov	r2, r0
   2f9f2:	2520      	movs	r5, #32
   2f9f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2f9f8:	e7ba      	b.n	2f970 <__ieee754_sqrt+0x104>
   2f9fa:	bf00      	nop
   2f9fc:	7ff00000 	.word	0x7ff00000
   2fa00:	3fe00000 	.word	0x3fe00000

0002fa04 <__ieee754_expf>:
   2fa04:	ee10 3a10 	vmov	r3, s0
   2fa08:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   2fa0c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   2fa10:	d85d      	bhi.n	2face <__ieee754_expf+0xca>
   2fa12:	ea4f 71d3 	mov.w	r1, r3, lsr #31
   2fa16:	f000 8099 	beq.w	2fb4c <__ieee754_expf+0x148>
   2fa1a:	4864      	ldr	r0, [pc, #400]	; (2fbac <__ieee754_expf+0x1a8>)
   2fa1c:	4283      	cmp	r3, r0
   2fa1e:	dc59      	bgt.n	2fad4 <__ieee754_expf+0xd0>
   2fa20:	b129      	cbz	r1, 2fa2e <__ieee754_expf+0x2a>
   2fa22:	4b63      	ldr	r3, [pc, #396]	; (2fbb0 <__ieee754_expf+0x1ac>)
   2fa24:	429a      	cmp	r2, r3
   2fa26:	d902      	bls.n	2fa2e <__ieee754_expf+0x2a>
   2fa28:	ed9f 0a62 	vldr	s0, [pc, #392]	; 2fbb4 <__ieee754_expf+0x1b0>
   2fa2c:	4770      	bx	lr
   2fa2e:	4b62      	ldr	r3, [pc, #392]	; (2fbb8 <__ieee754_expf+0x1b4>)
   2fa30:	429a      	cmp	r2, r3
   2fa32:	b410      	push	{r4}
   2fa34:	d953      	bls.n	2fade <__ieee754_expf+0xda>
   2fa36:	4b61      	ldr	r3, [pc, #388]	; (2fbbc <__ieee754_expf+0x1b8>)
   2fa38:	429a      	cmp	r2, r3
   2fa3a:	f200 8099 	bhi.w	2fb70 <__ieee754_expf+0x16c>
   2fa3e:	008c      	lsls	r4, r1, #2
   2fa40:	485f      	ldr	r0, [pc, #380]	; (2fbc0 <__ieee754_expf+0x1bc>)
   2fa42:	4a60      	ldr	r2, [pc, #384]	; (2fbc4 <__ieee754_expf+0x1c0>)
   2fa44:	f1c1 0301 	rsb	r3, r1, #1
   2fa48:	4420      	add	r0, r4
   2fa4a:	4422      	add	r2, r4
   2fa4c:	1a59      	subs	r1, r3, r1
   2fa4e:	edd0 4a00 	vldr	s9, [r0]
   2fa52:	edd2 7a00 	vldr	s15, [r2]
   2fa56:	ee70 4a64 	vsub.f32	s9, s0, s9
   2fa5a:	ee34 0ae7 	vsub.f32	s0, s9, s15
   2fa5e:	ed9f 4a5a 	vldr	s8, [pc, #360]	; 2fbc8 <__ieee754_expf+0x1c4>
   2fa62:	ed9f 5a5a 	vldr	s10, [pc, #360]	; 2fbcc <__ieee754_expf+0x1c8>
   2fa66:	eddf 5a5a 	vldr	s11, [pc, #360]	; 2fbd0 <__ieee754_expf+0x1cc>
   2fa6a:	ee20 7a00 	vmul.f32	s14, s0, s0
   2fa6e:	ed9f 6a59 	vldr	s12, [pc, #356]	; 2fbd4 <__ieee754_expf+0x1d0>
   2fa72:	eddf 6a59 	vldr	s13, [pc, #356]	; 2fbd8 <__ieee754_expf+0x1d4>
   2fa76:	eea7 5a04 	vfma.f32	s10, s14, s8
   2fa7a:	eee5 5a07 	vfma.f32	s11, s10, s14
   2fa7e:	eea5 6a87 	vfma.f32	s12, s11, s14
   2fa82:	eee6 6a07 	vfma.f32	s13, s12, s14
   2fa86:	eeb0 6a40 	vmov.f32	s12, s0
   2fa8a:	eea6 6ac7 	vfms.f32	s12, s13, s14
   2fa8e:	eeb0 7a46 	vmov.f32	s14, s12
   2fa92:	ee20 6a06 	vmul.f32	s12, s0, s12
   2fa96:	2900      	cmp	r1, #0
   2fa98:	d04b      	beq.n	2fb32 <__ieee754_expf+0x12e>
   2fa9a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
   2fa9e:	f111 0f7d 	cmn.w	r1, #125	; 0x7d
   2faa2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   2faa6:	ee36 7ac7 	vsub.f32	s14, s13, s14
   2faaa:	eec6 6a07 	vdiv.f32	s13, s12, s14
   2faae:	ee77 7ae6 	vsub.f32	s15, s15, s13
   2fab2:	ee77 7ae4 	vsub.f32	s15, s15, s9
   2fab6:	ee30 0a67 	vsub.f32	s0, s0, s15
   2faba:	db4d      	blt.n	2fb58 <__ieee754_expf+0x154>
   2fabc:	ee10 3a10 	vmov	r3, s0
   2fac0:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
   2fac4:	ee00 3a10 	vmov	s0, r3
   2fac8:	f85d 4b04 	ldr.w	r4, [sp], #4
   2facc:	4770      	bx	lr
   2face:	ee30 0a00 	vadd.f32	s0, s0, s0
   2fad2:	4770      	bx	lr
   2fad4:	ed9f 0a41 	vldr	s0, [pc, #260]	; 2fbdc <__ieee754_expf+0x1d8>
   2fad8:	ee20 0a00 	vmul.f32	s0, s0, s0
   2fadc:	4770      	bx	lr
   2fade:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
   2fae2:	d20a      	bcs.n	2fafa <__ieee754_expf+0xf6>
   2fae4:	eddf 7a3d 	vldr	s15, [pc, #244]	; 2fbdc <__ieee754_expf+0x1d8>
   2fae8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   2faec:	ee70 7a27 	vadd.f32	s15, s0, s15
   2faf0:	eef4 7ac7 	vcmpe.f32	s15, s14
   2faf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2faf8:	dc54      	bgt.n	2fba4 <__ieee754_expf+0x1a0>
   2fafa:	ee60 7a00 	vmul.f32	s15, s0, s0
   2fafe:	ed9f 7a32 	vldr	s14, [pc, #200]	; 2fbc8 <__ieee754_expf+0x1c4>
   2fb02:	eddf 5a32 	vldr	s11, [pc, #200]	; 2fbcc <__ieee754_expf+0x1c8>
   2fb06:	ed9f 6a32 	vldr	s12, [pc, #200]	; 2fbd0 <__ieee754_expf+0x1cc>
   2fb0a:	eee7 5a87 	vfma.f32	s11, s15, s14
   2fb0e:	eddf 6a31 	vldr	s13, [pc, #196]	; 2fbd4 <__ieee754_expf+0x1d0>
   2fb12:	ed9f 7a31 	vldr	s14, [pc, #196]	; 2fbd8 <__ieee754_expf+0x1d4>
   2fb16:	eea7 6aa5 	vfma.f32	s12, s15, s11
   2fb1a:	eee7 6a86 	vfma.f32	s13, s15, s12
   2fb1e:	eea7 7aa6 	vfma.f32	s14, s15, s13
   2fb22:	eef0 6a40 	vmov.f32	s13, s0
   2fb26:	eee7 6ac7 	vfms.f32	s13, s15, s14
   2fb2a:	eeb0 7a66 	vmov.f32	s14, s13
   2fb2e:	ee20 6a26 	vmul.f32	s12, s0, s13
   2fb32:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   2fb36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   2fb3a:	ee37 7a67 	vsub.f32	s14, s14, s15
   2fb3e:	eec6 7a07 	vdiv.f32	s15, s12, s14
   2fb42:	ee37 0ac0 	vsub.f32	s0, s15, s0
   2fb46:	ee36 0ac0 	vsub.f32	s0, s13, s0
   2fb4a:	e7bd      	b.n	2fac8 <__ieee754_expf+0xc4>
   2fb4c:	2900      	cmp	r1, #0
   2fb4e:	eddf 7a19 	vldr	s15, [pc, #100]	; 2fbb4 <__ieee754_expf+0x1b0>
   2fb52:	fe00 0a27 	vseleq.f32	s0, s0, s15
   2fb56:	4770      	bx	lr
   2fb58:	ee10 3a10 	vmov	r3, s0
   2fb5c:	3164      	adds	r1, #100	; 0x64
   2fb5e:	eddf 7a20 	vldr	s15, [pc, #128]	; 2fbe0 <__ieee754_expf+0x1dc>
   2fb62:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
   2fb66:	ee00 3a10 	vmov	s0, r3
   2fb6a:	ee20 0a27 	vmul.f32	s0, s0, s15
   2fb6e:	e7ab      	b.n	2fac8 <__ieee754_expf+0xc4>
   2fb70:	4b1c      	ldr	r3, [pc, #112]	; (2fbe4 <__ieee754_expf+0x1e0>)
   2fb72:	eef0 4a40 	vmov.f32	s9, s0
   2fb76:	eddf 7a1c 	vldr	s15, [pc, #112]	; 2fbe8 <__ieee754_expf+0x1e4>
   2fb7a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   2fb7e:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 2fbec <__ieee754_expf+0x1e8>
   2fb82:	eddf 6a1b 	vldr	s13, [pc, #108]	; 2fbf0 <__ieee754_expf+0x1ec>
   2fb86:	ed91 7a00 	vldr	s14, [r1]
   2fb8a:	eea0 7a27 	vfma.f32	s14, s0, s15
   2fb8e:	eefd 7ac7 	vcvt.s32.f32	s15, s14
   2fb92:	ee17 1a90 	vmov	r1, s15
   2fb96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   2fb9a:	eee7 4ac6 	vfms.f32	s9, s15, s12
   2fb9e:	ee67 7aa6 	vmul.f32	s15, s15, s13
   2fba2:	e75a      	b.n	2fa5a <__ieee754_expf+0x56>
   2fba4:	ee30 0a07 	vadd.f32	s0, s0, s14
   2fba8:	e78e      	b.n	2fac8 <__ieee754_expf+0xc4>
   2fbaa:	bf00      	nop
   2fbac:	42b17217 	.word	0x42b17217
   2fbb0:	42cff1b5 	.word	0x42cff1b5
   2fbb4:	00000000 	.word	0x00000000
   2fbb8:	3eb17218 	.word	0x3eb17218
   2fbbc:	3f851591 	.word	0x3f851591
   2fbc0:	0003af90 	.word	0x0003af90
   2fbc4:	0003af98 	.word	0x0003af98
   2fbc8:	3331bb4c 	.word	0x3331bb4c
   2fbcc:	b5ddea0e 	.word	0xb5ddea0e
   2fbd0:	388ab355 	.word	0x388ab355
   2fbd4:	bb360b61 	.word	0xbb360b61
   2fbd8:	3e2aaaab 	.word	0x3e2aaaab
   2fbdc:	7149f2ca 	.word	0x7149f2ca
   2fbe0:	0d800000 	.word	0x0d800000
   2fbe4:	0003af88 	.word	0x0003af88
   2fbe8:	3fb8aa3b 	.word	0x3fb8aa3b
   2fbec:	3f317180 	.word	0x3f317180
   2fbf0:	3717f7d1 	.word	0x3717f7d1

0002fbf4 <__ieee754_logf>:
   2fbf4:	ee10 3a10 	vmov	r3, s0
   2fbf8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   2fbfc:	d02e      	beq.n	2fc5c <__ieee754_logf+0x68>
   2fbfe:	2b00      	cmp	r3, #0
   2fc00:	db33      	blt.n	2fc6a <__ieee754_logf+0x76>
   2fc02:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   2fc06:	da40      	bge.n	2fc8a <__ieee754_logf+0x96>
   2fc08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   2fc0c:	b430      	push	{r4, r5}
   2fc0e:	db33      	blt.n	2fc78 <__ieee754_logf+0x84>
   2fc10:	2500      	movs	r5, #0
   2fc12:	f3c3 0416 	ubfx	r4, r3, #0, #23
   2fc16:	4a64      	ldr	r2, [pc, #400]	; (2fda8 <__ieee754_logf+0x1b4>)
   2fc18:	15db      	asrs	r3, r3, #23
   2fc1a:	4964      	ldr	r1, [pc, #400]	; (2fdac <__ieee754_logf+0x1b8>)
   2fc1c:	4422      	add	r2, r4
   2fc1e:	f104 000f 	add.w	r0, r4, #15
   2fc22:	3b7f      	subs	r3, #127	; 0x7f
   2fc24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   2fc28:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
   2fc2c:	4001      	ands	r1, r0
   2fc2e:	442b      	add	r3, r5
   2fc30:	f082 507e 	eor.w	r0, r2, #1065353216	; 0x3f800000
   2fc34:	eb03 53d2 	add.w	r3, r3, r2, lsr #23
   2fc38:	ea40 0204 	orr.w	r2, r0, r4
   2fc3c:	ee00 2a10 	vmov	s0, r2
   2fc40:	ee30 7a47 	vsub.f32	s14, s0, s14
   2fc44:	bb21      	cbnz	r1, 2fc90 <__ieee754_logf+0x9c>
   2fc46:	eeb5 7a40 	vcmp.f32	s14, #0.0
   2fc4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2fc4e:	d160      	bne.n	2fd12 <__ieee754_logf+0x11e>
   2fc50:	2b00      	cmp	r3, #0
   2fc52:	f040 808d 	bne.w	2fd70 <__ieee754_logf+0x17c>
   2fc56:	ed9f 0a56 	vldr	s0, [pc, #344]	; 2fdb0 <__ieee754_logf+0x1bc>
   2fc5a:	e069      	b.n	2fd30 <__ieee754_logf+0x13c>
   2fc5c:	ed9f 7a55 	vldr	s14, [pc, #340]	; 2fdb4 <__ieee754_logf+0x1c0>
   2fc60:	eddf 7a53 	vldr	s15, [pc, #332]	; 2fdb0 <__ieee754_logf+0x1bc>
   2fc64:	ee87 0a27 	vdiv.f32	s0, s14, s15
   2fc68:	4770      	bx	lr
   2fc6a:	ee70 7a40 	vsub.f32	s15, s0, s0
   2fc6e:	ed9f 7a50 	vldr	s14, [pc, #320]	; 2fdb0 <__ieee754_logf+0x1bc>
   2fc72:	ee87 0a87 	vdiv.f32	s0, s15, s14
   2fc76:	4770      	bx	lr
   2fc78:	eddf 7a4f 	vldr	s15, [pc, #316]	; 2fdb8 <__ieee754_logf+0x1c4>
   2fc7c:	f06f 0518 	mvn.w	r5, #24
   2fc80:	ee60 7a27 	vmul.f32	s15, s0, s15
   2fc84:	ee17 3a90 	vmov	r3, s15
   2fc88:	e7c3      	b.n	2fc12 <__ieee754_logf+0x1e>
   2fc8a:	ee30 0a00 	vadd.f32	s0, s0, s0
   2fc8e:	4770      	bx	lr
   2fc90:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   2fc94:	eddf 2a49 	vldr	s5, [pc, #292]	; 2fdbc <__ieee754_logf+0x1c8>
   2fc98:	eddf 4a49 	vldr	s9, [pc, #292]	; 2fdc0 <__ieee754_logf+0x1cc>
   2fc9c:	ee06 3a90 	vmov	s13, r3
   2fca0:	eddf 5a48 	vldr	s11, [pc, #288]	; 2fdc4 <__ieee754_logf+0x1d0>
   2fca4:	ee77 7a27 	vadd.f32	s15, s14, s15
   2fca8:	eddf 3a47 	vldr	s7, [pc, #284]	; 2fdc8 <__ieee754_logf+0x1d4>
   2fcac:	ed9f 5a47 	vldr	s10, [pc, #284]	; 2fdcc <__ieee754_logf+0x1d8>
   2fcb0:	eeb8 3ae6 	vcvt.f32.s32	s6, s13
   2fcb4:	ed9f 0a46 	vldr	s0, [pc, #280]	; 2fdd0 <__ieee754_logf+0x1dc>
   2fcb8:	ee87 4a27 	vdiv.f32	s8, s14, s15
   2fcbc:	eddf 6a45 	vldr	s13, [pc, #276]	; 2fdd4 <__ieee754_logf+0x1e0>
   2fcc0:	4945      	ldr	r1, [pc, #276]	; (2fdd8 <__ieee754_logf+0x1e4>)
   2fcc2:	4a46      	ldr	r2, [pc, #280]	; (2fddc <__ieee754_logf+0x1e8>)
   2fcc4:	4421      	add	r1, r4
   2fcc6:	1b12      	subs	r2, r2, r4
   2fcc8:	430a      	orrs	r2, r1
   2fcca:	2a00      	cmp	r2, #0
   2fccc:	ee24 6a04 	vmul.f32	s12, s8, s8
   2fcd0:	ee66 7a06 	vmul.f32	s15, s12, s12
   2fcd4:	eee7 4aa2 	vfma.f32	s9, s15, s5
   2fcd8:	eea7 5aa3 	vfma.f32	s10, s15, s7
   2fcdc:	eee4 5aa7 	vfma.f32	s11, s9, s15
   2fce0:	eee5 6a27 	vfma.f32	s13, s10, s15
   2fce4:	eea5 0aa7 	vfma.f32	s0, s11, s15
   2fce8:	ee20 0a06 	vmul.f32	s0, s0, s12
   2fcec:	eea6 0aa7 	vfma.f32	s0, s13, s15
   2fcf0:	dd20      	ble.n	2fd34 <__ieee754_logf+0x140>
   2fcf2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   2fcf6:	ee67 7a27 	vmul.f32	s15, s14, s15
   2fcfa:	ee67 7a87 	vmul.f32	s15, s15, s14
   2fcfe:	ee30 0a27 	vadd.f32	s0, s0, s15
   2fd02:	ee20 0a04 	vmul.f32	s0, s0, s8
   2fd06:	bb33      	cbnz	r3, 2fd56 <__ieee754_logf+0x162>
   2fd08:	ee37 0ac0 	vsub.f32	s0, s15, s0
   2fd0c:	ee37 0a40 	vsub.f32	s0, s14, s0
   2fd10:	e00e      	b.n	2fd30 <__ieee754_logf+0x13c>
   2fd12:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
   2fd16:	eddf 7a32 	vldr	s15, [pc, #200]	; 2fde0 <__ieee754_logf+0x1ec>
   2fd1a:	ee67 6a07 	vmul.f32	s13, s14, s14
   2fd1e:	eea7 0a67 	vfms.f32	s0, s14, s15
   2fd22:	eef0 7a40 	vmov.f32	s15, s0
   2fd26:	ee27 0aa6 	vmul.f32	s0, s15, s13
   2fd2a:	bb73      	cbnz	r3, 2fd8a <__ieee754_logf+0x196>
   2fd2c:	ee37 0a40 	vsub.f32	s0, s14, s0
   2fd30:	bc30      	pop	{r4, r5}
   2fd32:	4770      	bx	lr
   2fd34:	ee37 0a40 	vsub.f32	s0, s14, s0
   2fd38:	ee20 0a04 	vmul.f32	s0, s0, s8
   2fd3c:	2b00      	cmp	r3, #0
   2fd3e:	d0f5      	beq.n	2fd2c <__ieee754_logf+0x138>
   2fd40:	eddf 6a28 	vldr	s13, [pc, #160]	; 2fde4 <__ieee754_logf+0x1f0>
   2fd44:	eddf 7a28 	vldr	s15, [pc, #160]	; 2fde8 <__ieee754_logf+0x1f4>
   2fd48:	eea3 0a66 	vfms.f32	s0, s6, s13
   2fd4c:	ee30 0a47 	vsub.f32	s0, s0, s14
   2fd50:	ee93 0a27 	vfnms.f32	s0, s6, s15
   2fd54:	e7ec      	b.n	2fd30 <__ieee754_logf+0x13c>
   2fd56:	ed9f 6a23 	vldr	s12, [pc, #140]	; 2fde4 <__ieee754_logf+0x1f0>
   2fd5a:	eddf 6a23 	vldr	s13, [pc, #140]	; 2fde8 <__ieee754_logf+0x1f4>
   2fd5e:	eea3 0a06 	vfma.f32	s0, s6, s12
   2fd62:	ee37 0ac0 	vsub.f32	s0, s15, s0
   2fd66:	ee30 0a47 	vsub.f32	s0, s0, s14
   2fd6a:	ee93 0a26 	vfnms.f32	s0, s6, s13
   2fd6e:	e7df      	b.n	2fd30 <__ieee754_logf+0x13c>
   2fd70:	ee07 3a90 	vmov	s15, r3
   2fd74:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 2fde4 <__ieee754_logf+0x1f0>
   2fd78:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 2fde8 <__ieee754_logf+0x1f4>
   2fd7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   2fd80:	ee27 0a80 	vmul.f32	s0, s15, s0
   2fd84:	eea7 0a87 	vfma.f32	s0, s15, s14
   2fd88:	e7d2      	b.n	2fd30 <__ieee754_logf+0x13c>
   2fd8a:	ee07 3a90 	vmov	s15, r3
   2fd8e:	ed9f 6a15 	vldr	s12, [pc, #84]	; 2fde4 <__ieee754_logf+0x1f0>
   2fd92:	eddf 6a15 	vldr	s13, [pc, #84]	; 2fde8 <__ieee754_logf+0x1f4>
   2fd96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   2fd9a:	eea7 0ac6 	vfms.f32	s0, s15, s12
   2fd9e:	ee30 0a47 	vsub.f32	s0, s0, s14
   2fda2:	ee97 0aa6 	vfnms.f32	s0, s15, s13
   2fda6:	e7c3      	b.n	2fd30 <__ieee754_logf+0x13c>
   2fda8:	004afb20 	.word	0x004afb20
   2fdac:	007ffff0 	.word	0x007ffff0
   2fdb0:	00000000 	.word	0x00000000
   2fdb4:	cc000000 	.word	0xcc000000
   2fdb8:	4c000000 	.word	0x4c000000
   2fdbc:	3e178897 	.word	0x3e178897
   2fdc0:	3e3a3325 	.word	0x3e3a3325
   2fdc4:	3e924925 	.word	0x3e924925
   2fdc8:	3e1cd04f 	.word	0x3e1cd04f
   2fdcc:	3e638e29 	.word	0x3e638e29
   2fdd0:	3f2aaaab 	.word	0x3f2aaaab
   2fdd4:	3ecccccd 	.word	0x3ecccccd
   2fdd8:	ffcf5c30 	.word	0xffcf5c30
   2fddc:	0035c288 	.word	0x0035c288
   2fde0:	3eaaaaab 	.word	0x3eaaaaab
   2fde4:	3717f7d1 	.word	0x3717f7d1
   2fde8:	3f317180 	.word	0x3f317180

0002fdec <__ieee754_log10f>:
   2fdec:	b508      	push	{r3, lr}
   2fdee:	ee10 3a10 	vmov	r3, s0
   2fdf2:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   2fdf6:	ed2d 8b02 	vpush	{d8}
   2fdfa:	d02a      	beq.n	2fe52 <__ieee754_log10f+0x66>
   2fdfc:	2b00      	cmp	r3, #0
   2fdfe:	db31      	blt.n	2fe64 <__ieee754_log10f+0x78>
   2fe00:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   2fe04:	da40      	bge.n	2fe88 <__ieee754_log10f+0x9c>
   2fe06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   2fe0a:	db34      	blt.n	2fe76 <__ieee754_log10f+0x8a>
   2fe0c:	2100      	movs	r1, #0
   2fe0e:	15da      	asrs	r2, r3, #23
   2fe10:	f3c3 0316 	ubfx	r3, r3, #0, #23
   2fe14:	3a7f      	subs	r2, #127	; 0x7f
   2fe16:	440a      	add	r2, r1
   2fe18:	0fd1      	lsrs	r1, r2, #31
   2fe1a:	f1c1 007f 	rsb	r0, r1, #127	; 0x7f
   2fe1e:	440a      	add	r2, r1
   2fe20:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
   2fe24:	ee07 2a90 	vmov	s15, r2
   2fe28:	ee00 3a10 	vmov	s0, r3
   2fe2c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
   2fe30:	f7ff fee0 	bl	2fbf4 <__ieee754_logf>
   2fe34:	eddf 7a17 	vldr	s15, [pc, #92]	; 2fe94 <__ieee754_log10f+0xa8>
   2fe38:	ed9f 7a17 	vldr	s14, [pc, #92]	; 2fe98 <__ieee754_log10f+0xac>
   2fe3c:	ee20 0a27 	vmul.f32	s0, s0, s15
   2fe40:	eddf 7a16 	vldr	s15, [pc, #88]	; 2fe9c <__ieee754_log10f+0xb0>
   2fe44:	eea8 0a07 	vfma.f32	s0, s16, s14
   2fe48:	eea8 0a27 	vfma.f32	s0, s16, s15
   2fe4c:	ecbd 8b02 	vpop	{d8}
   2fe50:	bd08      	pop	{r3, pc}
   2fe52:	ed9f 7a13 	vldr	s14, [pc, #76]	; 2fea0 <__ieee754_log10f+0xb4>
   2fe56:	eddf 7a13 	vldr	s15, [pc, #76]	; 2fea4 <__ieee754_log10f+0xb8>
   2fe5a:	ecbd 8b02 	vpop	{d8}
   2fe5e:	ee87 0a27 	vdiv.f32	s0, s14, s15
   2fe62:	bd08      	pop	{r3, pc}
   2fe64:	ee70 7a40 	vsub.f32	s15, s0, s0
   2fe68:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 2fea4 <__ieee754_log10f+0xb8>
   2fe6c:	ecbd 8b02 	vpop	{d8}
   2fe70:	ee87 0a87 	vdiv.f32	s0, s15, s14
   2fe74:	bd08      	pop	{r3, pc}
   2fe76:	eddf 7a0c 	vldr	s15, [pc, #48]	; 2fea8 <__ieee754_log10f+0xbc>
   2fe7a:	f06f 0118 	mvn.w	r1, #24
   2fe7e:	ee60 7a27 	vmul.f32	s15, s0, s15
   2fe82:	ee17 3a90 	vmov	r3, s15
   2fe86:	e7c2      	b.n	2fe0e <__ieee754_log10f+0x22>
   2fe88:	ecbd 8b02 	vpop	{d8}
   2fe8c:	ee30 0a00 	vadd.f32	s0, s0, s0
   2fe90:	bd08      	pop	{r3, pc}
   2fe92:	bf00      	nop
   2fe94:	3ede5bd9 	.word	0x3ede5bd9
   2fe98:	355427db 	.word	0x355427db
   2fe9c:	3e9a2080 	.word	0x3e9a2080
   2fea0:	cc000000 	.word	0xcc000000
   2fea4:	00000000 	.word	0x00000000
   2fea8:	4c000000 	.word	0x4c000000

0002feac <__ieee754_powf>:
   2feac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2feb0:	ed2d 8b06 	vpush	{d8-d10}
   2feb4:	b082      	sub	sp, #8
   2feb6:	edcd 0a00 	vstr	s1, [sp]
   2feba:	9c00      	ldr	r4, [sp, #0]
   2febc:	ed8d 0a01 	vstr	s0, [sp, #4]
   2fec0:	f034 4600 	bics.w	r6, r4, #2147483648	; 0x80000000
   2fec4:	f000 8109 	beq.w	300da <__ieee754_powf+0x22e>
   2fec8:	9f01      	ldr	r7, [sp, #4]
   2feca:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   2fece:	f1ba 4fff 	cmp.w	sl, #2139095040	; 0x7f800000
   2fed2:	f300 80ff 	bgt.w	300d4 <__ieee754_powf+0x228>
   2fed6:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
   2feda:	bfd4      	ite	le
   2fedc:	2300      	movle	r3, #0
   2fede:	2301      	movgt	r3, #1
   2fee0:	2b00      	cmp	r3, #0
   2fee2:	f040 80f7 	bne.w	300d4 <__ieee754_powf+0x228>
   2fee6:	2f00      	cmp	r7, #0
   2fee8:	f2c0 8106 	blt.w	300f8 <__ieee754_powf+0x24c>
   2feec:	4698      	mov	r8, r3
   2feee:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
   2fef2:	f000 8117 	beq.w	30124 <__ieee754_powf+0x278>
   2fef6:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
   2fefa:	f000 811c 	beq.w	30136 <__ieee754_powf+0x28a>
   2fefe:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   2ff02:	f000 814f 	beq.w	301a4 <__ieee754_powf+0x2f8>
   2ff06:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
   2ff0a:	d102      	bne.n	2ff12 <__ieee754_powf+0x66>
   2ff0c:	2f00      	cmp	r7, #0
   2ff0e:	f280 812d 	bge.w	3016c <__ieee754_powf+0x2c0>
   2ff12:	f8dd 9004 	ldr.w	r9, [sp, #4]
   2ff16:	9d00      	ldr	r5, [sp, #0]
   2ff18:	ee00 9a10 	vmov	s0, r9
   2ff1c:	f7ff fa82 	bl	2f424 <fabsf>
   2ff20:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
   2ff24:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
   2ff28:	f000 8129 	beq.w	3017e <__ieee754_powf+0x2d2>
   2ff2c:	faba f38a 	clz	r3, sl
   2ff30:	095b      	lsrs	r3, r3, #5
   2ff32:	2b00      	cmp	r3, #0
   2ff34:	f040 8123 	bne.w	3017e <__ieee754_powf+0x2d2>
   2ff38:	0ffa      	lsrs	r2, r7, #31
   2ff3a:	3a01      	subs	r2, #1
   2ff3c:	ea58 0102 	orrs.w	r1, r8, r2
   2ff40:	f000 810d 	beq.w	3015e <__ieee754_powf+0x2b2>
   2ff44:	f1b6 4f9a 	cmp.w	r6, #1291845632	; 0x4d000000
   2ff48:	f340 8158 	ble.w	301fc <__ieee754_powf+0x350>
   2ff4c:	4b9a      	ldr	r3, [pc, #616]	; (301b8 <__ieee754_powf+0x30c>)
   2ff4e:	459a      	cmp	sl, r3
   2ff50:	f340 825e 	ble.w	30410 <__ieee754_powf+0x564>
   2ff54:	4b99      	ldr	r3, [pc, #612]	; (301bc <__ieee754_powf+0x310>)
   2ff56:	459a      	cmp	sl, r3
   2ff58:	f300 8272 	bgt.w	30440 <__ieee754_powf+0x594>
   2ff5c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   2ff60:	eddf 6a97 	vldr	s13, [pc, #604]	; 301c0 <__ieee754_powf+0x314>
   2ff64:	eeb5 4a00 	vmov.f32	s8, #80	; 0x3e800000  0.250
   2ff68:	eddf 7a96 	vldr	s15, [pc, #600]	; 301c4 <__ieee754_powf+0x318>
   2ff6c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   2ff70:	ed9f 6a95 	vldr	s12, [pc, #596]	; 301c8 <__ieee754_powf+0x31c>
   2ff74:	ee30 0a65 	vsub.f32	s0, s0, s11
   2ff78:	eddf 5a94 	vldr	s11, [pc, #592]	; 301cc <__ieee754_powf+0x320>
   2ff7c:	eeb1 5a40 	vneg.f32	s10, s0
   2ff80:	ee60 4a00 	vmul.f32	s9, s0, s0
   2ff84:	eee5 6a04 	vfma.f32	s13, s10, s8
   2ff88:	eea6 7ac0 	vfms.f32	s14, s13, s0
   2ff8c:	ee27 7a24 	vmul.f32	s14, s14, s9
   2ff90:	ee67 7ac7 	vnmul.f32	s15, s15, s14
   2ff94:	eee0 7a06 	vfma.f32	s15, s0, s12
   2ff98:	eeb0 6a67 	vmov.f32	s12, s15
   2ff9c:	eea0 6a25 	vfma.f32	s12, s0, s11
   2ffa0:	ee16 3a10 	vmov	r3, s12
   2ffa4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   2ffa8:	f023 030f 	bic.w	r3, r3, #15
   2ffac:	ee07 3a10 	vmov	s14, r3
   2ffb0:	ee06 3a10 	vmov	s12, r3
   2ffb4:	eea5 7a25 	vfma.f32	s14, s10, s11
   2ffb8:	ee77 7ac7 	vsub.f32	s15, s15, s14
   2ffbc:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
   2ffc0:	ee07 5a10 	vmov	s14, r5
   2ffc4:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   2ffc8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   2ffcc:	f024 040f 	bic.w	r4, r4, #15
   2ffd0:	ee67 7a87 	vmul.f32	s15, s15, s14
   2ffd4:	eeff 5a00 	vmov.f32	s11, #240	; 0xbf800000 -1.0
   2ffd8:	4313      	orrs	r3, r2
   2ffda:	ee06 4a90 	vmov	s13, r4
   2ffde:	ee77 6a66 	vsub.f32	s13, s14, s13
   2ffe2:	ee07 4a10 	vmov	s14, r4
   2ffe6:	fe05 8a80 	vseleq.f32	s16, s11, s0
   2ffea:	ee26 7a07 	vmul.f32	s14, s12, s14
   2ffee:	eee6 7a86 	vfma.f32	s15, s13, s12
   2fff2:	ee77 6a87 	vadd.f32	s13, s15, s14
   2fff6:	ee16 3a90 	vmov	r3, s13
   2fffa:	2b00      	cmp	r3, #0
   2fffc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   30000:	f340 81b3 	ble.w	3036a <__ieee754_powf+0x4be>
   30004:	f1b2 4f86 	cmp.w	r2, #1124073472	; 0x43000000
   30008:	f300 81fb 	bgt.w	30402 <__ieee754_powf+0x556>
   3000c:	f000 81ee 	beq.w	303ec <__ieee754_powf+0x540>
   30010:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
   30014:	f300 81b5 	bgt.w	30382 <__ieee754_powf+0x4d6>
   30018:	2200      	movs	r2, #0
   3001a:	4610      	mov	r0, r2
   3001c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   30020:	eddf 6a6b 	vldr	s13, [pc, #428]	; 301d0 <__ieee754_powf+0x324>
   30024:	ed9f 2a6b 	vldr	s4, [pc, #428]	; 301d4 <__ieee754_powf+0x328>
   30028:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
   3002c:	f023 030f 	bic.w	r3, r3, #15
   30030:	eddf 3a69 	vldr	s7, [pc, #420]	; 301d8 <__ieee754_powf+0x32c>
   30034:	ed9f 4a69 	vldr	s8, [pc, #420]	; 301dc <__ieee754_powf+0x330>
   30038:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   3003c:	ee06 3a10 	vmov	s12, r3
   30040:	eddf 2a67 	vldr	s5, [pc, #412]	; 301e0 <__ieee754_powf+0x334>
   30044:	eddf 4a67 	vldr	s9, [pc, #412]	; 301e4 <__ieee754_powf+0x338>
   30048:	ee36 7a47 	vsub.f32	s14, s12, s14
   3004c:	ed9f 5a66 	vldr	s10, [pc, #408]	; 301e8 <__ieee754_powf+0x33c>
   30050:	ee66 6a26 	vmul.f32	s13, s12, s13
   30054:	eddf 5a65 	vldr	s11, [pc, #404]	; 301ec <__ieee754_powf+0x340>
   30058:	ee77 7ac7 	vsub.f32	s15, s15, s14
   3005c:	eee7 6a82 	vfma.f32	s13, s15, s4
   30060:	eeb0 7a66 	vmov.f32	s14, s13
   30064:	eef0 7a66 	vmov.f32	s15, s13
   30068:	eea6 7a23 	vfma.f32	s14, s12, s7
   3006c:	eeb0 2a47 	vmov.f32	s4, s14
   30070:	ee67 6a07 	vmul.f32	s13, s14, s14
   30074:	eea6 2a63 	vfms.f32	s4, s12, s7
   30078:	eeb0 6a44 	vmov.f32	s12, s8
   3007c:	eea6 6aa2 	vfma.f32	s12, s13, s5
   30080:	ee77 7ac2 	vsub.f32	s15, s15, s4
   30084:	eee7 7a27 	vfma.f32	s15, s14, s15
   30088:	eee6 4a26 	vfma.f32	s9, s12, s13
   3008c:	eea4 5aa6 	vfma.f32	s10, s9, s13
   30090:	eee5 5a26 	vfma.f32	s11, s10, s13
   30094:	eeb0 6a65 	vmov.f32	s12, s11
   30098:	eef0 5a47 	vmov.f32	s11, s14
   3009c:	eee6 5a66 	vfms.f32	s11, s12, s13
   300a0:	eef0 6a65 	vmov.f32	s13, s11
   300a4:	ee67 5a25 	vmul.f32	s11, s14, s11
   300a8:	ee36 6ac3 	vsub.f32	s12, s13, s6
   300ac:	eec5 6a86 	vdiv.f32	s13, s11, s12
   300b0:	ee76 7ae7 	vsub.f32	s15, s13, s15
   300b4:	ee37 7ac7 	vsub.f32	s14, s15, s14
   300b8:	ee30 0a47 	vsub.f32	s0, s0, s14
   300bc:	ee10 3a10 	vmov	r3, s0
   300c0:	4413      	add	r3, r2
   300c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   300c6:	f2c0 81be 	blt.w	30446 <__ieee754_powf+0x59a>
   300ca:	ee00 3a10 	vmov	s0, r3
   300ce:	ee20 0a08 	vmul.f32	s0, s0, s16
   300d2:	e004      	b.n	300de <__ieee754_powf+0x232>
   300d4:	f1ba 5f7e 	cmp.w	sl, #1065353216	; 0x3f800000
   300d8:	d106      	bne.n	300e8 <__ieee754_powf+0x23c>
   300da:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   300de:	b002      	add	sp, #8
   300e0:	ecbd 8b06 	vpop	{d8-d10}
   300e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   300e8:	4841      	ldr	r0, [pc, #260]	; (301f0 <__ieee754_powf+0x344>)
   300ea:	b002      	add	sp, #8
   300ec:	ecbd 8b06 	vpop	{d8-d10}
   300f0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   300f4:	f000 bfd2 	b.w	3109c <nanf>
   300f8:	f1b6 4f97 	cmp.w	r6, #1266679808	; 0x4b800000
   300fc:	da20      	bge.n	30140 <__ieee754_powf+0x294>
   300fe:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
   30102:	db0d      	blt.n	30120 <__ieee754_powf+0x274>
   30104:	15f2      	asrs	r2, r6, #23
   30106:	f1c2 0296 	rsb	r2, r2, #150	; 0x96
   3010a:	fa46 f102 	asr.w	r1, r6, r2
   3010e:	fa01 f202 	lsl.w	r2, r1, r2
   30112:	42b2      	cmp	r2, r6
   30114:	d104      	bne.n	30120 <__ieee754_powf+0x274>
   30116:	f001 0301 	and.w	r3, r1, #1
   3011a:	f1c3 0802 	rsb	r8, r3, #2
   3011e:	e6ea      	b.n	2fef6 <__ieee754_powf+0x4a>
   30120:	4698      	mov	r8, r3
   30122:	e6e8      	b.n	2fef6 <__ieee754_powf+0x4a>
   30124:	f1ba 5f7e 	cmp.w	sl, #1065353216	; 0x3f800000
   30128:	d0d7      	beq.n	300da <__ieee754_powf+0x22e>
   3012a:	dd0c      	ble.n	30146 <__ieee754_powf+0x29a>
   3012c:	2c00      	cmp	r4, #0
   3012e:	db0c      	blt.n	3014a <__ieee754_powf+0x29e>
   30130:	ed9d 0a00 	vldr	s0, [sp]
   30134:	e7d3      	b.n	300de <__ieee754_powf+0x232>
   30136:	2c00      	cmp	r4, #0
   30138:	db0a      	blt.n	30150 <__ieee754_powf+0x2a4>
   3013a:	ed9d 0a01 	vldr	s0, [sp, #4]
   3013e:	e7ce      	b.n	300de <__ieee754_powf+0x232>
   30140:	f04f 0802 	mov.w	r8, #2
   30144:	e6d3      	b.n	2feee <__ieee754_powf+0x42>
   30146:	2c00      	cmp	r4, #0
   30148:	db31      	blt.n	301ae <__ieee754_powf+0x302>
   3014a:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 301f4 <__ieee754_powf+0x348>
   3014e:	e7c6      	b.n	300de <__ieee754_powf+0x232>
   30150:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   30154:	ed9d 7a01 	vldr	s14, [sp, #4]
   30158:	ee87 0a87 	vdiv.f32	s0, s15, s14
   3015c:	e7bf      	b.n	300de <__ieee754_powf+0x232>
   3015e:	ee07 9a90 	vmov	s15, r9
   30162:	ee77 7ae7 	vsub.f32	s15, s15, s15
   30166:	ee87 0aa7 	vdiv.f32	s0, s15, s15
   3016a:	e7b8      	b.n	300de <__ieee754_powf+0x232>
   3016c:	ed9d 0a01 	vldr	s0, [sp, #4]
   30170:	b002      	add	sp, #8
   30172:	ecbd 8b06 	vpop	{d8-d10}
   30176:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3017a:	f000 bac5 	b.w	30708 <__ieee754_sqrtf>
   3017e:	2c00      	cmp	r4, #0
   30180:	da03      	bge.n	3018a <__ieee754_powf+0x2de>
   30182:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   30186:	ee87 0a80 	vdiv.f32	s0, s15, s0
   3018a:	2f00      	cmp	r7, #0
   3018c:	daa7      	bge.n	300de <__ieee754_powf+0x232>
   3018e:	f1aa 5a7e 	sub.w	sl, sl, #1065353216	; 0x3f800000
   30192:	ea5a 0308 	orrs.w	r3, sl, r8
   30196:	f040 811a 	bne.w	303ce <__ieee754_powf+0x522>
   3019a:	ee70 7a40 	vsub.f32	s15, s0, s0
   3019e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
   301a2:	e79c      	b.n	300de <__ieee754_powf+0x232>
   301a4:	eddd 7a01 	vldr	s15, [sp, #4]
   301a8:	ee27 0aa7 	vmul.f32	s0, s15, s15
   301ac:	e797      	b.n	300de <__ieee754_powf+0x232>
   301ae:	eddd 7a00 	vldr	s15, [sp]
   301b2:	eeb1 0a67 	vneg.f32	s0, s15
   301b6:	e792      	b.n	300de <__ieee754_powf+0x232>
   301b8:	3f7ffff7 	.word	0x3f7ffff7
   301bc:	3f800007 	.word	0x3f800007
   301c0:	3eaaaaab 	.word	0x3eaaaaab
   301c4:	3fb8aa3b 	.word	0x3fb8aa3b
   301c8:	36eca570 	.word	0x36eca570
   301cc:	3fb8aa00 	.word	0x3fb8aa00
   301d0:	35bfbe8c 	.word	0x35bfbe8c
   301d4:	3f317218 	.word	0x3f317218
   301d8:	3f317200 	.word	0x3f317200
   301dc:	b5ddea0e 	.word	0xb5ddea0e
   301e0:	3331bb4c 	.word	0x3331bb4c
   301e4:	388ab355 	.word	0x388ab355
   301e8:	bb360b61 	.word	0xbb360b61
   301ec:	3e2aaaab 	.word	0x3e2aaaab
   301f0:	0003aa08 	.word	0x0003aa08
   301f4:	00000000 	.word	0x00000000
   301f8:	4b800000 	.word	0x4b800000
   301fc:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
   30200:	d107      	bne.n	30212 <__ieee754_powf+0x366>
   30202:	ed5f 7a03 	vldr	s15, [pc, #-12]	; 301f8 <__ieee754_powf+0x34c>
   30206:	f06f 0317 	mvn.w	r3, #23
   3020a:	ee60 7a27 	vmul.f32	s15, s0, s15
   3020e:	ee17 aa90 	vmov	sl, s15
   30212:	ea4f 50ea 	mov.w	r0, sl, asr #23
   30216:	4e8d      	ldr	r6, [pc, #564]	; (3044c <__ieee754_powf+0x5a0>)
   30218:	f3ca 0a16 	ubfx	sl, sl, #0, #23
   3021c:	387f      	subs	r0, #127	; 0x7f
   3021e:	45b2      	cmp	sl, r6
   30220:	f04a 517e 	orr.w	r1, sl, #1065353216	; 0x3f800000
   30224:	4403      	add	r3, r0
   30226:	f340 80d9 	ble.w	303dc <__ieee754_powf+0x530>
   3022a:	4889      	ldr	r0, [pc, #548]	; (30450 <__ieee754_powf+0x5a4>)
   3022c:	4582      	cmp	sl, r0
   3022e:	f340 80f7 	ble.w	30420 <__ieee754_powf+0x574>
   30232:	ed9f 3a88 	vldr	s6, [pc, #544]	; 30454 <__ieee754_powf+0x5a8>
   30236:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   3023a:	3301      	adds	r3, #1
   3023c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
   30240:	eeb0 2a43 	vmov.f32	s4, s6
   30244:	2600      	movs	r6, #0
   30246:	ee07 1a90 	vmov	s15, r1
   3024a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   3024e:	1048      	asrs	r0, r1, #1
   30250:	ed9f aa81 	vldr	s20, [pc, #516]	; 30458 <__ieee754_powf+0x5ac>
   30254:	ee77 6a87 	vadd.f32	s13, s15, s14
   30258:	ed9f 9a80 	vldr	s18, [pc, #512]	; 3045c <__ieee754_powf+0x5b0>
   3025c:	ee77 5ac7 	vsub.f32	s11, s15, s14
   30260:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
   30264:	497e      	ldr	r1, [pc, #504]	; (30460 <__ieee754_powf+0x5b4>)
   30266:	eeb0 4a08 	vmov.f32	s8, #8	; 0x40400000  3.0
   3026a:	eec6 9a26 	vdiv.f32	s19, s12, s13
   3026e:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
   30272:	eddf 8a7c 	vldr	s17, [pc, #496]	; 30464 <__ieee754_powf+0x5b8>
   30276:	4430      	add	r0, r6
   30278:	ed9f 8a7b 	vldr	s16, [pc, #492]	; 30468 <__ieee754_powf+0x5bc>
   3027c:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 3046c <__ieee754_powf+0x5c0>
   30280:	ee06 0a10 	vmov	s12, r0
   30284:	eddf 0a7a 	vldr	s1, [pc, #488]	; 30470 <__ieee754_powf+0x5c4>
   30288:	ed9f 1a7a 	vldr	s2, [pc, #488]	; 30474 <__ieee754_powf+0x5c8>
   3028c:	ee36 7a47 	vsub.f32	s14, s12, s14
   30290:	eddf 1a79 	vldr	s3, [pc, #484]	; 30478 <__ieee754_powf+0x5cc>
   30294:	eddf 3a79 	vldr	s7, [pc, #484]	; 3047c <__ieee754_powf+0x5d0>
   30298:	ee77 7ac7 	vsub.f32	s15, s15, s14
   3029c:	ee07 3a10 	vmov	s14, r3
   302a0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
   302a4:	ee65 2aa9 	vmul.f32	s5, s11, s19
   302a8:	ee22 5aa2 	vmul.f32	s10, s5, s5
   302ac:	ee12 3a90 	vmov	r3, s5
   302b0:	400b      	ands	r3, r1
   302b2:	eea5 9a0a 	vfma.f32	s18, s10, s20
   302b6:	ee04 3a90 	vmov	s9, r3
   302ba:	eeb1 7a64 	vneg.f32	s14, s9
   302be:	eee9 8a05 	vfma.f32	s17, s18, s10
   302c2:	eee7 5a06 	vfma.f32	s11, s14, s12
   302c6:	eea8 8a85 	vfma.f32	s16, s17, s10
   302ca:	eee7 5a27 	vfma.f32	s11, s14, s15
   302ce:	ee72 7aa4 	vadd.f32	s15, s5, s9
   302d2:	ee65 8a05 	vmul.f32	s17, s10, s10
   302d6:	eea8 0a05 	vfma.f32	s0, s16, s10
   302da:	ee25 6aa9 	vmul.f32	s12, s11, s19
   302de:	eef0 5a44 	vmov.f32	s11, s8
   302e2:	ee67 7a86 	vmul.f32	s15, s15, s12
   302e6:	eee4 5aa4 	vfma.f32	s11, s9, s9
   302ea:	eee0 0a05 	vfma.f32	s1, s0, s10
   302ee:	eee8 7aa0 	vfma.f32	s15, s17, s1
   302f2:	ee75 5aa7 	vadd.f32	s11, s11, s15
   302f6:	ee15 3a90 	vmov	r3, s11
   302fa:	400b      	ands	r3, r1
   302fc:	ee05 3a90 	vmov	s11, r3
   30300:	ee35 5ac4 	vsub.f32	s10, s11, s8
   30304:	eea7 5a24 	vfma.f32	s10, s14, s9
   30308:	ee77 7ac5 	vsub.f32	s15, s15, s10
   3030c:	ee67 7aa2 	vmul.f32	s15, s15, s5
   30310:	eee6 7a25 	vfma.f32	s15, s12, s11
   30314:	eeb0 5a67 	vmov.f32	s10, s15
   30318:	eea4 5aa5 	vfma.f32	s10, s9, s11
   3031c:	ee15 3a10 	vmov	r3, s10
   30320:	400b      	ands	r3, r1
   30322:	ee06 3a10 	vmov	s12, r3
   30326:	ee05 3a10 	vmov	s10, r3
   3032a:	eea7 6a25 	vfma.f32	s12, s14, s11
   3032e:	ee37 7ac6 	vsub.f32	s14, s15, s12
   30332:	ee27 7a01 	vmul.f32	s14, s14, s2
   30336:	eea5 7a21 	vfma.f32	s14, s10, s3
   3033a:	ee37 7a02 	vadd.f32	s14, s14, s4
   3033e:	eeb0 6a47 	vmov.f32	s12, s14
   30342:	eea5 6a23 	vfma.f32	s12, s10, s7
   30346:	ee36 6a03 	vadd.f32	s12, s12, s6
   3034a:	ee36 6a26 	vadd.f32	s12, s12, s13
   3034e:	ee16 3a10 	vmov	r3, s12
   30352:	400b      	ands	r3, r1
   30354:	ee06 3a10 	vmov	s12, r3
   30358:	ee76 7a66 	vsub.f32	s15, s12, s13
   3035c:	ee77 7ac3 	vsub.f32	s15, s15, s6
   30360:	eee5 7a63 	vfms.f32	s15, s10, s7
   30364:	ee77 7a67 	vsub.f32	s15, s14, s15
   30368:	e628      	b.n	2ffbc <__ieee754_powf+0x110>
   3036a:	4945      	ldr	r1, [pc, #276]	; (30480 <__ieee754_powf+0x5d4>)
   3036c:	428a      	cmp	r2, r1
   3036e:	dc60      	bgt.n	30432 <__ieee754_powf+0x586>
   30370:	f47f ae4e 	bne.w	30010 <__ieee754_powf+0x164>
   30374:	ee76 6ac7 	vsub.f32	s13, s13, s14
   30378:	eef4 6ae7 	vcmpe.f32	s13, s15
   3037c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   30380:	da57      	bge.n	30432 <__ieee754_powf+0x586>
   30382:	15d2      	asrs	r2, r2, #23
   30384:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   30388:	4c3e      	ldr	r4, [pc, #248]	; (30484 <__ieee754_powf+0x5d8>)
   3038a:	2b00      	cmp	r3, #0
   3038c:	f1a2 027e 	sub.w	r2, r2, #126	; 0x7e
   30390:	fa41 f202 	asr.w	r2, r1, r2
   30394:	441a      	add	r2, r3
   30396:	f3c2 51c7 	ubfx	r1, r2, #23, #8
   3039a:	f3c2 0016 	ubfx	r0, r2, #0, #23
   3039e:	f1a1 017f 	sub.w	r1, r1, #127	; 0x7f
   303a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   303a6:	fa44 f401 	asr.w	r4, r4, r1
   303aa:	f1c1 0117 	rsb	r1, r1, #23
   303ae:	ea22 0204 	bic.w	r2, r2, r4
   303b2:	fa40 f001 	asr.w	r0, r0, r1
   303b6:	ee06 2a90 	vmov	s13, r2
   303ba:	bfb8      	it	lt
   303bc:	4240      	neglt	r0, r0
   303be:	ee37 7a66 	vsub.f32	s14, s14, s13
   303c2:	05c2      	lsls	r2, r0, #23
   303c4:	ee77 6a87 	vadd.f32	s13, s15, s14
   303c8:	ee16 3a90 	vmov	r3, s13
   303cc:	e626      	b.n	3001c <__ieee754_powf+0x170>
   303ce:	f1b8 0f01 	cmp.w	r8, #1
   303d2:	f47f ae84 	bne.w	300de <__ieee754_powf+0x232>
   303d6:	eeb1 0a40 	vneg.f32	s0, s0
   303da:	e680      	b.n	300de <__ieee754_powf+0x232>
   303dc:	ed9f 3a1d 	vldr	s6, [pc, #116]	; 30454 <__ieee754_powf+0x5a8>
   303e0:	2600      	movs	r6, #0
   303e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   303e6:	eeb0 2a43 	vmov.f32	s4, s6
   303ea:	e72c      	b.n	30246 <__ieee754_powf+0x39a>
   303ec:	ed9f 6a26 	vldr	s12, [pc, #152]	; 30488 <__ieee754_powf+0x5dc>
   303f0:	ee76 6ac7 	vsub.f32	s13, s13, s14
   303f4:	ee37 6a86 	vadd.f32	s12, s15, s12
   303f8:	eeb4 6ae6 	vcmpe.f32	s12, s13
   303fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   30400:	ddbf      	ble.n	30382 <__ieee754_powf+0x4d6>
   30402:	eddf 7a22 	vldr	s15, [pc, #136]	; 3048c <__ieee754_powf+0x5e0>
   30406:	ee28 0a27 	vmul.f32	s0, s16, s15
   3040a:	ee20 0a27 	vmul.f32	s0, s0, s15
   3040e:	e666      	b.n	300de <__ieee754_powf+0x232>
   30410:	2c00      	cmp	r4, #0
   30412:	f6bf ae9a 	bge.w	3014a <__ieee754_powf+0x29e>
   30416:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 3048c <__ieee754_powf+0x5e0>
   3041a:	ee20 0a00 	vmul.f32	s0, s0, s0
   3041e:	e65e      	b.n	300de <__ieee754_powf+0x232>
   30420:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
   30424:	ed9f 3a1a 	vldr	s6, [pc, #104]	; 30490 <__ieee754_powf+0x5e4>
   30428:	ed9f 2a1a 	vldr	s4, [pc, #104]	; 30494 <__ieee754_powf+0x5e8>
   3042c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
   30430:	e709      	b.n	30246 <__ieee754_powf+0x39a>
   30432:	eddf 7a19 	vldr	s15, [pc, #100]	; 30498 <__ieee754_powf+0x5ec>
   30436:	ee28 0a27 	vmul.f32	s0, s16, s15
   3043a:	ee20 0a27 	vmul.f32	s0, s0, s15
   3043e:	e64e      	b.n	300de <__ieee754_powf+0x232>
   30440:	2c00      	cmp	r4, #0
   30442:	dce8      	bgt.n	30416 <__ieee754_powf+0x56a>
   30444:	e681      	b.n	3014a <__ieee754_powf+0x29e>
   30446:	f000 fe33 	bl	310b0 <scalbnf>
   3044a:	e640      	b.n	300ce <__ieee754_powf+0x222>
   3044c:	001cc471 	.word	0x001cc471
   30450:	005db3d6 	.word	0x005db3d6
   30454:	00000000 	.word	0x00000000
   30458:	3e53f142 	.word	0x3e53f142
   3045c:	3e6c3255 	.word	0x3e6c3255
   30460:	fffff000 	.word	0xfffff000
   30464:	3e8ba305 	.word	0x3e8ba305
   30468:	3eaaaaab 	.word	0x3eaaaaab
   3046c:	3edb6db7 	.word	0x3edb6db7
   30470:	3f19999a 	.word	0x3f19999a
   30474:	3f76384f 	.word	0x3f76384f
   30478:	369dc3a0 	.word	0x369dc3a0
   3047c:	3f763800 	.word	0x3f763800
   30480:	43160000 	.word	0x43160000
   30484:	007fffff 	.word	0x007fffff
   30488:	3338aa3c 	.word	0x3338aa3c
   3048c:	7149f2ca 	.word	0x7149f2ca
   30490:	3f15c000 	.word	0x3f15c000
   30494:	35d1cfdc 	.word	0x35d1cfdc
   30498:	0da24260 	.word	0x0da24260

0003049c <__ieee754_rem_pio2f>:
   3049c:	ee10 3a10 	vmov	r3, s0
   304a0:	4a8b      	ldr	r2, [pc, #556]	; (306d0 <__ieee754_rem_pio2f+0x234>)
   304a2:	b570      	push	{r4, r5, r6, lr}
   304a4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   304a8:	b086      	sub	sp, #24
   304aa:	4605      	mov	r5, r0
   304ac:	4294      	cmp	r4, r2
   304ae:	dd68      	ble.n	30582 <__ieee754_rem_pio2f+0xe6>
   304b0:	4a88      	ldr	r2, [pc, #544]	; (306d4 <__ieee754_rem_pio2f+0x238>)
   304b2:	ee10 6a10 	vmov	r6, s0
   304b6:	4294      	cmp	r4, r2
   304b8:	dc1a      	bgt.n	304f0 <__ieee754_rem_pio2f+0x54>
   304ba:	2b00      	cmp	r3, #0
   304bc:	f024 040f 	bic.w	r4, r4, #15
   304c0:	eddf 7a85 	vldr	s15, [pc, #532]	; 306d8 <__ieee754_rem_pio2f+0x23c>
   304c4:	4a85      	ldr	r2, [pc, #532]	; (306dc <__ieee754_rem_pio2f+0x240>)
   304c6:	f340 80e7 	ble.w	30698 <__ieee754_rem_pio2f+0x1fc>
   304ca:	4294      	cmp	r4, r2
   304cc:	ee70 7a67 	vsub.f32	s15, s0, s15
   304d0:	d066      	beq.n	305a0 <__ieee754_rem_pio2f+0x104>
   304d2:	ed9f 7a83 	vldr	s14, [pc, #524]	; 306e0 <__ieee754_rem_pio2f+0x244>
   304d6:	2001      	movs	r0, #1
   304d8:	ee77 6ac7 	vsub.f32	s13, s15, s14
   304dc:	ee77 7ae6 	vsub.f32	s15, s15, s13
   304e0:	edc5 6a00 	vstr	s13, [r5]
   304e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
   304e8:	edc5 7a01 	vstr	s15, [r5, #4]
   304ec:	b006      	add	sp, #24
   304ee:	bd70      	pop	{r4, r5, r6, pc}
   304f0:	4a7c      	ldr	r2, [pc, #496]	; (306e4 <__ieee754_rem_pio2f+0x248>)
   304f2:	4294      	cmp	r4, r2
   304f4:	dd5c      	ble.n	305b0 <__ieee754_rem_pio2f+0x114>
   304f6:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   304fa:	da49      	bge.n	30590 <__ieee754_rem_pio2f+0xf4>
   304fc:	15e2      	asrs	r2, r4, #23
   304fe:	eddf 6a7a 	vldr	s13, [pc, #488]	; 306e8 <__ieee754_rem_pio2f+0x24c>
   30502:	3a86      	subs	r2, #134	; 0x86
   30504:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
   30508:	ee07 3a90 	vmov	s15, r3
   3050c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   30510:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   30514:	ee77 7ac7 	vsub.f32	s15, s15, s14
   30518:	ed8d 7a03 	vstr	s14, [sp, #12]
   3051c:	ee67 7aa6 	vmul.f32	s15, s15, s13
   30520:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   30524:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   30528:	ee77 7ac7 	vsub.f32	s15, s15, s14
   3052c:	ed8d 7a04 	vstr	s14, [sp, #16]
   30530:	ee67 7aa6 	vmul.f32	s15, s15, s13
   30534:	eef5 7a40 	vcmp.f32	s15, #0.0
   30538:	edcd 7a05 	vstr	s15, [sp, #20]
   3053c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   30540:	f040 8097 	bne.w	30672 <__ieee754_rem_pio2f+0x1d6>
   30544:	eeb5 7a40 	vcmp.f32	s14, #0.0
   30548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   3054c:	bf14      	ite	ne
   3054e:	2302      	movne	r3, #2
   30550:	2301      	moveq	r3, #1
   30552:	4966      	ldr	r1, [pc, #408]	; (306ec <__ieee754_rem_pio2f+0x250>)
   30554:	2002      	movs	r0, #2
   30556:	9101      	str	r1, [sp, #4]
   30558:	4629      	mov	r1, r5
   3055a:	9000      	str	r0, [sp, #0]
   3055c:	a803      	add	r0, sp, #12
   3055e:	f000 f959 	bl	30814 <__kernel_rem_pio2f>
   30562:	2e00      	cmp	r6, #0
   30564:	dac2      	bge.n	304ec <__ieee754_rem_pio2f+0x50>
   30566:	ed95 7a00 	vldr	s14, [r5]
   3056a:	4240      	negs	r0, r0
   3056c:	edd5 7a01 	vldr	s15, [r5, #4]
   30570:	eeb1 7a47 	vneg.f32	s14, s14
   30574:	eef1 7a67 	vneg.f32	s15, s15
   30578:	ed85 7a00 	vstr	s14, [r5]
   3057c:	edc5 7a01 	vstr	s15, [r5, #4]
   30580:	e7b4      	b.n	304ec <__ieee754_rem_pio2f+0x50>
   30582:	2200      	movs	r2, #0
   30584:	2000      	movs	r0, #0
   30586:	ed85 0a00 	vstr	s0, [r5]
   3058a:	606a      	str	r2, [r5, #4]
   3058c:	b006      	add	sp, #24
   3058e:	bd70      	pop	{r4, r5, r6, pc}
   30590:	ee70 7a40 	vsub.f32	s15, s0, s0
   30594:	2000      	movs	r0, #0
   30596:	edc5 7a01 	vstr	s15, [r5, #4]
   3059a:	edc5 7a00 	vstr	s15, [r5]
   3059e:	e7a5      	b.n	304ec <__ieee754_rem_pio2f+0x50>
   305a0:	eddf 6a53 	vldr	s13, [pc, #332]	; 306f0 <__ieee754_rem_pio2f+0x254>
   305a4:	2001      	movs	r0, #1
   305a6:	ed9f 7a53 	vldr	s14, [pc, #332]	; 306f4 <__ieee754_rem_pio2f+0x258>
   305aa:	ee77 7ae6 	vsub.f32	s15, s15, s13
   305ae:	e793      	b.n	304d8 <__ieee754_rem_pio2f+0x3c>
   305b0:	f7fe ff38 	bl	2f424 <fabsf>
   305b4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   305b8:	eddf 6a4f 	vldr	s13, [pc, #316]	; 306f8 <__ieee754_rem_pio2f+0x25c>
   305bc:	eddf 5a46 	vldr	s11, [pc, #280]	; 306d8 <__ieee754_rem_pio2f+0x23c>
   305c0:	eea0 7a26 	vfma.f32	s14, s0, s13
   305c4:	eddf 7a46 	vldr	s15, [pc, #280]	; 306e0 <__ieee754_rem_pio2f+0x244>
   305c8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   305cc:	eef8 6ac7 	vcvt.f32.s32	s13, s14
   305d0:	ee17 0a10 	vmov	r0, s14
   305d4:	281f      	cmp	r0, #31
   305d6:	eeb1 6a66 	vneg.f32	s12, s13
   305da:	ee66 7aa7 	vmul.f32	s15, s13, s15
   305de:	eea6 0a25 	vfma.f32	s0, s12, s11
   305e2:	dc1e      	bgt.n	30622 <__ieee754_rem_pio2f+0x186>
   305e4:	4a45      	ldr	r2, [pc, #276]	; (306fc <__ieee754_rem_pio2f+0x260>)
   305e6:	1e41      	subs	r1, r0, #1
   305e8:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
   305ec:	ee30 7a67 	vsub.f32	s14, s0, s15
   305f0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   305f4:	4293      	cmp	r3, r2
   305f6:	d016      	beq.n	30626 <__ieee754_rem_pio2f+0x18a>
   305f8:	ed85 7a00 	vstr	s14, [r5]
   305fc:	ee30 0a47 	vsub.f32	s0, s0, s14
   30600:	2e00      	cmp	r6, #0
   30602:	ee30 0a67 	vsub.f32	s0, s0, s15
   30606:	ed85 0a01 	vstr	s0, [r5, #4]
   3060a:	f6bf af6f 	bge.w	304ec <__ieee754_rem_pio2f+0x50>
   3060e:	eeb1 7a47 	vneg.f32	s14, s14
   30612:	4240      	negs	r0, r0
   30614:	eeb1 0a40 	vneg.f32	s0, s0
   30618:	ed85 7a00 	vstr	s14, [r5]
   3061c:	ed85 0a01 	vstr	s0, [r5, #4]
   30620:	e764      	b.n	304ec <__ieee754_rem_pio2f+0x50>
   30622:	ee30 7a67 	vsub.f32	s14, s0, s15
   30626:	ee17 3a10 	vmov	r3, s14
   3062a:	15e4      	asrs	r4, r4, #23
   3062c:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   30630:	1ae3      	subs	r3, r4, r3
   30632:	2b08      	cmp	r3, #8
   30634:	dde0      	ble.n	305f8 <__ieee754_rem_pio2f+0x15c>
   30636:	eef0 5a40 	vmov.f32	s11, s0
   3063a:	eddf 7a2d 	vldr	s15, [pc, #180]	; 306f0 <__ieee754_rem_pio2f+0x254>
   3063e:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 306f4 <__ieee754_rem_pio2f+0x258>
   30642:	eee6 5a27 	vfma.f32	s11, s12, s15
   30646:	ee30 0a65 	vsub.f32	s0, s0, s11
   3064a:	eea6 0a27 	vfma.f32	s0, s12, s15
   3064e:	eef0 7a40 	vmov.f32	s15, s0
   30652:	eed6 7a87 	vfnms.f32	s15, s13, s14
   30656:	ee35 7ae7 	vsub.f32	s14, s11, s15
   3065a:	ee17 3a10 	vmov	r3, s14
   3065e:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   30662:	1ae4      	subs	r4, r4, r3
   30664:	2c19      	cmp	r4, #25
   30666:	dc06      	bgt.n	30676 <__ieee754_rem_pio2f+0x1da>
   30668:	ed85 7a00 	vstr	s14, [r5]
   3066c:	eeb0 0a65 	vmov.f32	s0, s11
   30670:	e7c4      	b.n	305fc <__ieee754_rem_pio2f+0x160>
   30672:	2303      	movs	r3, #3
   30674:	e76d      	b.n	30552 <__ieee754_rem_pio2f+0xb6>
   30676:	eeb0 0a65 	vmov.f32	s0, s11
   3067a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 30700 <__ieee754_rem_pio2f+0x264>
   3067e:	ed9f 5a21 	vldr	s10, [pc, #132]	; 30704 <__ieee754_rem_pio2f+0x268>
   30682:	eea6 0a07 	vfma.f32	s0, s12, s14
   30686:	ee75 7ac0 	vsub.f32	s15, s11, s0
   3068a:	eee6 7a07 	vfma.f32	s15, s12, s14
   3068e:	eed6 7a85 	vfnms.f32	s15, s13, s10
   30692:	ee30 7a67 	vsub.f32	s14, s0, s15
   30696:	e7af      	b.n	305f8 <__ieee754_rem_pio2f+0x15c>
   30698:	4294      	cmp	r4, r2
   3069a:	ee70 7a27 	vadd.f32	s15, s0, s15
   3069e:	d00e      	beq.n	306be <__ieee754_rem_pio2f+0x222>
   306a0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 306e0 <__ieee754_rem_pio2f+0x244>
   306a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   306a8:	ee77 6a87 	vadd.f32	s13, s15, s14
   306ac:	ee77 7ae6 	vsub.f32	s15, s15, s13
   306b0:	edc5 6a00 	vstr	s13, [r5]
   306b4:	ee77 7a87 	vadd.f32	s15, s15, s14
   306b8:	edc5 7a01 	vstr	s15, [r5, #4]
   306bc:	e716      	b.n	304ec <__ieee754_rem_pio2f+0x50>
   306be:	eddf 6a0c 	vldr	s13, [pc, #48]	; 306f0 <__ieee754_rem_pio2f+0x254>
   306c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   306c6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 306f4 <__ieee754_rem_pio2f+0x258>
   306ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
   306ce:	e7eb      	b.n	306a8 <__ieee754_rem_pio2f+0x20c>
   306d0:	3f490fd8 	.word	0x3f490fd8
   306d4:	4016cbe3 	.word	0x4016cbe3
   306d8:	3fc90f80 	.word	0x3fc90f80
   306dc:	3fc90fd0 	.word	0x3fc90fd0
   306e0:	37354443 	.word	0x37354443
   306e4:	43490f80 	.word	0x43490f80
   306e8:	43800000 	.word	0x43800000
   306ec:	0003b020 	.word	0x0003b020
   306f0:	37354400 	.word	0x37354400
   306f4:	2e85a308 	.word	0x2e85a308
   306f8:	3f22f984 	.word	0x3f22f984
   306fc:	0003afa0 	.word	0x0003afa0
   30700:	2e85a300 	.word	0x2e85a300
   30704:	248d3132 	.word	0x248d3132

00030708 <__ieee754_sqrtf>:
   30708:	eeb1 0ac0 	vsqrt.f32	s0, s0
   3070c:	4770      	bx	lr
   3070e:	bf00      	nop

00030710 <__kernel_cosf>:
   30710:	ee10 3a10 	vmov	r3, s0
   30714:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   30718:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   3071c:	da2c      	bge.n	30778 <__kernel_cosf+0x68>
   3071e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   30722:	ee17 3a90 	vmov	r3, s15
   30726:	2b00      	cmp	r3, #0
   30728:	d060      	beq.n	307ec <__kernel_cosf+0xdc>
   3072a:	ee20 7a00 	vmul.f32	s14, s0, s0
   3072e:	eddf 7a31 	vldr	s15, [pc, #196]	; 307f4 <__kernel_cosf+0xe4>
   30732:	ed9f 5a31 	vldr	s10, [pc, #196]	; 307f8 <__kernel_cosf+0xe8>
   30736:	eddf 5a31 	vldr	s11, [pc, #196]	; 307fc <__kernel_cosf+0xec>
   3073a:	eea7 5a27 	vfma.f32	s10, s14, s15
   3073e:	ed9f 6a30 	vldr	s12, [pc, #192]	; 30800 <__kernel_cosf+0xf0>
   30742:	eddf 7a30 	vldr	s15, [pc, #192]	; 30804 <__kernel_cosf+0xf4>
   30746:	eddf 6a30 	vldr	s13, [pc, #192]	; 30808 <__kernel_cosf+0xf8>
   3074a:	eee7 5a05 	vfma.f32	s11, s14, s10
   3074e:	eea7 6a25 	vfma.f32	s12, s14, s11
   30752:	eee7 7a06 	vfma.f32	s15, s14, s12
   30756:	eee7 6a27 	vfma.f32	s13, s14, s15
   3075a:	ee66 6a87 	vmul.f32	s13, s13, s14
   3075e:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   30762:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
   30766:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   3076a:	eee7 0a26 	vfma.f32	s1, s14, s13
   3076e:	eed7 0a06 	vfnms.f32	s1, s14, s12
   30772:	ee37 0ae0 	vsub.f32	s0, s15, s1
   30776:	4770      	bx	lr
   30778:	ee20 7a00 	vmul.f32	s14, s0, s0
   3077c:	eddf 7a1d 	vldr	s15, [pc, #116]	; 307f4 <__kernel_cosf+0xe4>
   30780:	ed9f 5a1d 	vldr	s10, [pc, #116]	; 307f8 <__kernel_cosf+0xe8>
   30784:	eddf 5a1d 	vldr	s11, [pc, #116]	; 307fc <__kernel_cosf+0xec>
   30788:	eea7 5a27 	vfma.f32	s10, s14, s15
   3078c:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 30800 <__kernel_cosf+0xf0>
   30790:	eddf 7a1c 	vldr	s15, [pc, #112]	; 30804 <__kernel_cosf+0xf4>
   30794:	eddf 6a1c 	vldr	s13, [pc, #112]	; 30808 <__kernel_cosf+0xf8>
   30798:	4a1c      	ldr	r2, [pc, #112]	; (3080c <__kernel_cosf+0xfc>)
   3079a:	4293      	cmp	r3, r2
   3079c:	eee5 5a07 	vfma.f32	s11, s10, s14
   307a0:	eea5 6a87 	vfma.f32	s12, s11, s14
   307a4:	eee6 7a07 	vfma.f32	s15, s12, s14
   307a8:	eee7 6a87 	vfma.f32	s13, s15, s14
   307ac:	ee66 6a87 	vmul.f32	s13, s13, s14
   307b0:	ddd5      	ble.n	3075e <__kernel_cosf+0x4e>
   307b2:	4a17      	ldr	r2, [pc, #92]	; (30810 <__kernel_cosf+0x100>)
   307b4:	4293      	cmp	r3, r2
   307b6:	dc14      	bgt.n	307e2 <__kernel_cosf+0xd2>
   307b8:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
   307bc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   307c0:	ee07 3a90 	vmov	s15, r3
   307c4:	ee36 6a67 	vsub.f32	s12, s12, s15
   307c8:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   307cc:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
   307d0:	eee7 0a26 	vfma.f32	s1, s14, s13
   307d4:	eed7 7a25 	vfnms.f32	s15, s14, s11
   307d8:	ee77 7ae0 	vsub.f32	s15, s15, s1
   307dc:	ee36 0a67 	vsub.f32	s0, s12, s15
   307e0:	4770      	bx	lr
   307e2:	eeb6 6a07 	vmov.f32	s12, #103	; 0x3f380000  0.7187500
   307e6:	eef5 7a02 	vmov.f32	s15, #82	; 0x3e900000  0.2812500
   307ea:	e7ed      	b.n	307c8 <__kernel_cosf+0xb8>
   307ec:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   307f0:	4770      	bx	lr
   307f2:	bf00      	nop
   307f4:	ad47d74e 	.word	0xad47d74e
   307f8:	310f74f6 	.word	0x310f74f6
   307fc:	b493f27c 	.word	0xb493f27c
   30800:	37d00d01 	.word	0x37d00d01
   30804:	bab60b61 	.word	0xbab60b61
   30808:	3d2aaaab 	.word	0x3d2aaaab
   3080c:	3e999999 	.word	0x3e999999
   30810:	3f480000 	.word	0x3f480000

00030814 <__kernel_rem_pio2f>:
   30814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30818:	ed2d 8b04 	vpush	{d8-d9}
   3081c:	b0db      	sub	sp, #364	; 0x16c
   3081e:	461c      	mov	r4, r3
   30820:	4681      	mov	r9, r0
   30822:	9304      	str	r3, [sp, #16]
   30824:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   30828:	4bd4      	ldr	r3, [pc, #848]	; (30b7c <__kernel_rem_pio2f+0x368>)
   3082a:	9107      	str	r1, [sp, #28]
   3082c:	9968      	ldr	r1, [sp, #416]	; 0x1a0
   3082e:	9209      	str	r2, [sp, #36]	; 0x24
   30830:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
   30834:	1d11      	adds	r1, r2, #4
   30836:	f2c0 8274 	blt.w	30d22 <__kernel_rem_pio2f+0x50e>
   3083a:	1ed3      	subs	r3, r2, #3
   3083c:	f100 82f1 	bmi.w	30e22 <__kernel_rem_pio2f+0x60e>
   30840:	10db      	asrs	r3, r3, #3
   30842:	9303      	str	r3, [sp, #12]
   30844:	3301      	adds	r3, #1
   30846:	00db      	lsls	r3, r3, #3
   30848:	9308      	str	r3, [sp, #32]
   3084a:	eb15 0108 	adds.w	r1, r5, r8
   3084e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   30852:	eba3 0302 	sub.w	r3, r3, r2
   30856:	9306      	str	r3, [sp, #24]
   30858:	9b03      	ldr	r3, [sp, #12]
   3085a:	eba3 0308 	sub.w	r3, r3, r8
   3085e:	d414      	bmi.n	3088a <__kernel_rem_pio2f+0x76>
   30860:	3101      	adds	r1, #1
   30862:	aa1e      	add	r2, sp, #120	; 0x78
   30864:	ed9f 7ac8 	vldr	s14, [pc, #800]	; 30b88 <__kernel_rem_pio2f+0x374>
   30868:	4419      	add	r1, r3
   3086a:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   3086c:	2b00      	cmp	r3, #0
   3086e:	eef0 7a47 	vmov.f32	s15, s14
   30872:	db05      	blt.n	30880 <__kernel_rem_pio2f+0x6c>
   30874:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   30878:	ee07 4a90 	vmov	s15, r4
   3087c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   30880:	3301      	adds	r3, #1
   30882:	ece2 7a01 	vstmia	r2!, {s15}
   30886:	428b      	cmp	r3, r1
   30888:	d1f0      	bne.n	3086c <__kernel_rem_pio2f+0x58>
   3088a:	9b04      	ldr	r3, [sp, #16]
   3088c:	2d00      	cmp	r5, #0
   3088e:	ea4f 0a85 	mov.w	sl, r5, lsl #2
   30892:	ea4f 0483 	mov.w	r4, r3, lsl #2
   30896:	db1d      	blt.n	308d4 <__kernel_rem_pio2f+0xc0>
   30898:	ab1e      	add	r3, sp, #120	; 0x78
   3089a:	eb09 0104 	add.w	r1, r9, r4
   3089e:	a846      	add	r0, sp, #280	; 0x118
   308a0:	191e      	adds	r6, r3, r4
   308a2:	ab47      	add	r3, sp, #284	; 0x11c
   308a4:	eb03 070a 	add.w	r7, r3, sl
   308a8:	f1b8 0f00 	cmp.w	r8, #0
   308ac:	f2c0 8187 	blt.w	30bbe <__kernel_rem_pio2f+0x3aa>
   308b0:	4632      	mov	r2, r6
   308b2:	464b      	mov	r3, r9
   308b4:	eddf 7ab4 	vldr	s15, [pc, #720]	; 30b88 <__kernel_rem_pio2f+0x374>
   308b8:	ecf3 6a01 	vldmia	r3!, {s13}
   308bc:	ed32 7a01 	vldmdb	r2!, {s14}
   308c0:	428b      	cmp	r3, r1
   308c2:	eee6 7a87 	vfma.f32	s15, s13, s14
   308c6:	d1f7      	bne.n	308b8 <__kernel_rem_pio2f+0xa4>
   308c8:	ece0 7a01 	vstmia	r0!, {s15}
   308cc:	42b8      	cmp	r0, r7
   308ce:	f106 0604 	add.w	r6, r6, #4
   308d2:	d1e9      	bne.n	308a8 <__kernel_rem_pio2f+0x94>
   308d4:	f1aa 0308 	sub.w	r3, sl, #8
   308d8:	af0a      	add	r7, sp, #40	; 0x28
   308da:	aa09      	add	r2, sp, #36	; 0x24
   308dc:	9500      	str	r5, [sp, #0]
   308de:	18fb      	adds	r3, r7, r3
   308e0:	444c      	add	r4, r9
   308e2:	4492      	add	sl, r2
   308e4:	ae46      	add	r6, sp, #280	; 0x118
   308e6:	9305      	str	r3, [sp, #20]
   308e8:	462b      	mov	r3, r5
   308ea:	ed9f 9aa5 	vldr	s18, [pc, #660]	; 30b80 <__kernel_rem_pio2f+0x36c>
   308ee:	eddf 8aa5 	vldr	s17, [pc, #660]	; 30b84 <__kernel_rem_pio2f+0x370>
   308f2:	9d06      	ldr	r5, [sp, #24]
   308f4:	0099      	lsls	r1, r3, #2
   308f6:	aa5a      	add	r2, sp, #360	; 0x168
   308f8:	2b00      	cmp	r3, #0
   308fa:	440a      	add	r2, r1
   308fc:	ed12 0a14 	vldr	s0, [r2, #-80]	; 0xffffffb0
   30900:	dd16      	ble.n	30930 <__kernel_rem_pio2f+0x11c>
   30902:	eb06 0283 	add.w	r2, r6, r3, lsl #2
   30906:	4638      	mov	r0, r7
   30908:	ee60 7a09 	vmul.f32	s15, s0, s18
   3090c:	ed72 6a01 	vldmdb	r2!, {s13}
   30910:	eeb0 7a40 	vmov.f32	s14, s0
   30914:	42b2      	cmp	r2, r6
   30916:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   3091a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   3091e:	eea7 7ae8 	vfms.f32	s14, s15, s17
   30922:	ee37 0aa6 	vadd.f32	s0, s15, s13
   30926:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   3092a:	eca0 7a01 	vstmia	r0!, {s14}
   3092e:	d1eb      	bne.n	30908 <__kernel_rem_pio2f+0xf4>
   30930:	4628      	mov	r0, r5
   30932:	e9cd 1301 	strd	r1, r3, [sp, #4]
   30936:	f000 fbbb 	bl	310b0 <scalbnf>
   3093a:	eeb0 8a40 	vmov.f32	s16, s0
   3093e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
   30942:	ee28 0a00 	vmul.f32	s0, s16, s0
   30946:	f7fe fd75 	bl	2f434 <floorf>
   3094a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   3094e:	2d00      	cmp	r5, #0
   30950:	eea0 8a67 	vfms.f32	s16, s0, s15
   30954:	e9dd 1301 	ldrd	r1, r3, [sp, #4]
   30958:	eefd 9ac8 	vcvt.s32.f32	s19, s16
   3095c:	eef8 7ae9 	vcvt.f32.s32	s15, s19
   30960:	ee38 8a67 	vsub.f32	s16, s16, s15
   30964:	f340 8081 	ble.w	30a6a <__kernel_rem_pio2f+0x256>
   30968:	1e58      	subs	r0, r3, #1
   3096a:	f1c5 0208 	rsb	r2, r5, #8
   3096e:	f1c5 0b07 	rsb	fp, r5, #7
   30972:	f857 c020 	ldr.w	ip, [r7, r0, lsl #2]
   30976:	fa4c fe02 	asr.w	lr, ip, r2
   3097a:	fa0e f202 	lsl.w	r2, lr, r2
   3097e:	9201      	str	r2, [sp, #4]
   30980:	ee19 2a90 	vmov	r2, s19
   30984:	4472      	add	r2, lr
   30986:	ee09 2a90 	vmov	s19, r2
   3098a:	9a01      	ldr	r2, [sp, #4]
   3098c:	ebac 0202 	sub.w	r2, ip, r2
   30990:	fa42 fb0b 	asr.w	fp, r2, fp
   30994:	f847 2020 	str.w	r2, [r7, r0, lsl #2]
   30998:	f1bb 0f00 	cmp.w	fp, #0
   3099c:	dc6f      	bgt.n	30a7e <__kernel_rem_pio2f+0x26a>
   3099e:	eeb5 8a40 	vcmp.f32	s16, #0.0
   309a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   309a6:	f040 80aa 	bne.w	30afe <__kernel_rem_pio2f+0x2ea>
   309aa:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
   309ae:	9a00      	ldr	r2, [sp, #0]
   309b0:	4562      	cmp	r2, ip
   309b2:	dc0e      	bgt.n	309d2 <__kernel_rem_pio2f+0x1be>
   309b4:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
   309b8:	2100      	movs	r1, #0
   309ba:	441a      	add	r2, r3
   309bc:	eb07 0282 	add.w	r2, r7, r2, lsl #2
   309c0:	f852 0904 	ldr.w	r0, [r2], #-4
   309c4:	4552      	cmp	r2, sl
   309c6:	ea41 0100 	orr.w	r1, r1, r0
   309ca:	d1f9      	bne.n	309c0 <__kernel_rem_pio2f+0x1ac>
   309cc:	2900      	cmp	r1, #0
   309ce:	f040 80ff 	bne.w	30bd0 <__kernel_rem_pio2f+0x3bc>
   309d2:	9a00      	ldr	r2, [sp, #0]
   309d4:	3a01      	subs	r2, #1
   309d6:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
   309da:	2a00      	cmp	r2, #0
   309dc:	f040 80ea 	bne.w	30bb4 <__kernel_rem_pio2f+0x3a0>
   309e0:	9a05      	ldr	r2, [sp, #20]
   309e2:	2001      	movs	r0, #1
   309e4:	f852 1904 	ldr.w	r1, [r2], #-4
   309e8:	3001      	adds	r0, #1
   309ea:	2900      	cmp	r1, #0
   309ec:	d0fa      	beq.n	309e4 <__kernel_rem_pio2f+0x1d0>
   309ee:	f103 0e01 	add.w	lr, r3, #1
   309f2:	4418      	add	r0, r3
   309f4:	46f4      	mov	ip, lr
   309f6:	9a03      	ldr	r2, [sp, #12]
   309f8:	f06f 4b40 	mvn.w	fp, #3221225472	; 0xc0000000
   309fc:	9904      	ldr	r1, [sp, #16]
   309fe:	4472      	add	r2, lr
   30a00:	eb06 0e8e 	add.w	lr, r6, lr, lsl #2
   30a04:	440b      	add	r3, r1
   30a06:	4493      	add	fp, r2
   30a08:	aa1e      	add	r2, sp, #120	; 0x78
   30a0a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   30a0e:	9b69      	ldr	r3, [sp, #420]	; 0x1a4
   30a10:	eb03 0b8b 	add.w	fp, r3, fp, lsl #2
   30a14:	f85b 3f04 	ldr.w	r3, [fp, #4]!
   30a18:	4611      	mov	r1, r2
   30a1a:	f1b8 0f00 	cmp.w	r8, #0
   30a1e:	ee07 3a90 	vmov	s15, r3
   30a22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   30a26:	ece1 7a01 	vstmia	r1!, {s15}
   30a2a:	db14      	blt.n	30a56 <__kernel_rem_pio2f+0x242>
   30a2c:	464b      	mov	r3, r9
   30a2e:	ed9f 7a56 	vldr	s14, [pc, #344]	; 30b88 <__kernel_rem_pio2f+0x374>
   30a32:	e001      	b.n	30a38 <__kernel_rem_pio2f+0x224>
   30a34:	ed72 7a01 	vldmdb	r2!, {s15}
   30a38:	ecf3 6a01 	vldmia	r3!, {s13}
   30a3c:	42a3      	cmp	r3, r4
   30a3e:	eea6 7aa7 	vfma.f32	s14, s13, s15
   30a42:	d1f7      	bne.n	30a34 <__kernel_rem_pio2f+0x220>
   30a44:	f10c 0c01 	add.w	ip, ip, #1
   30a48:	ecae 7a01 	vstmia	lr!, {s14}
   30a4c:	460a      	mov	r2, r1
   30a4e:	4584      	cmp	ip, r0
   30a50:	dde0      	ble.n	30a14 <__kernel_rem_pio2f+0x200>
   30a52:	4603      	mov	r3, r0
   30a54:	e74e      	b.n	308f4 <__kernel_rem_pio2f+0xe0>
   30a56:	f10c 0c01 	add.w	ip, ip, #1
   30a5a:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 30b88 <__kernel_rem_pio2f+0x374>
   30a5e:	460a      	mov	r2, r1
   30a60:	4584      	cmp	ip, r0
   30a62:	ecae 7a01 	vstmia	lr!, {s14}
   30a66:	ddd5      	ble.n	30a14 <__kernel_rem_pio2f+0x200>
   30a68:	e7f3      	b.n	30a52 <__kernel_rem_pio2f+0x23e>
   30a6a:	f040 8098 	bne.w	30b9e <__kernel_rem_pio2f+0x38a>
   30a6e:	1e5a      	subs	r2, r3, #1
   30a70:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
   30a74:	ea4f 2b22 	mov.w	fp, r2, asr #8
   30a78:	f1bb 0f00 	cmp.w	fp, #0
   30a7c:	dd8f      	ble.n	3099e <__kernel_rem_pio2f+0x18a>
   30a7e:	ee19 2a90 	vmov	r2, s19
   30a82:	2b00      	cmp	r3, #0
   30a84:	f102 0201 	add.w	r2, r2, #1
   30a88:	ee09 2a90 	vmov	s19, r2
   30a8c:	f340 81cc 	ble.w	30e28 <__kernel_rem_pio2f+0x614>
   30a90:	6838      	ldr	r0, [r7, #0]
   30a92:	2800      	cmp	r0, #0
   30a94:	d162      	bne.n	30b5c <__kernel_rem_pio2f+0x348>
   30a96:	2b01      	cmp	r3, #1
   30a98:	d00b      	beq.n	30ab2 <__kernel_rem_pio2f+0x29e>
   30a9a:	46be      	mov	lr, r7
   30a9c:	f04f 0c01 	mov.w	ip, #1
   30aa0:	f85e 0f04 	ldr.w	r0, [lr, #4]!
   30aa4:	f10c 0201 	add.w	r2, ip, #1
   30aa8:	2800      	cmp	r0, #0
   30aaa:	d15a      	bne.n	30b62 <__kernel_rem_pio2f+0x34e>
   30aac:	4293      	cmp	r3, r2
   30aae:	4694      	mov	ip, r2
   30ab0:	d1f6      	bne.n	30aa0 <__kernel_rem_pio2f+0x28c>
   30ab2:	2d00      	cmp	r5, #0
   30ab4:	dd0b      	ble.n	30ace <__kernel_rem_pio2f+0x2ba>
   30ab6:	2d01      	cmp	r5, #1
   30ab8:	f000 811f 	beq.w	30cfa <__kernel_rem_pio2f+0x4e6>
   30abc:	2d02      	cmp	r5, #2
   30abe:	d106      	bne.n	30ace <__kernel_rem_pio2f+0x2ba>
   30ac0:	1e59      	subs	r1, r3, #1
   30ac2:	f857 2021 	ldr.w	r2, [r7, r1, lsl #2]
   30ac6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   30aca:	f847 2021 	str.w	r2, [r7, r1, lsl #2]
   30ace:	f1bb 0f02 	cmp.w	fp, #2
   30ad2:	f47f af64 	bne.w	3099e <__kernel_rem_pio2f+0x18a>
   30ad6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   30ada:	ee30 8a48 	vsub.f32	s16, s0, s16
   30ade:	2800      	cmp	r0, #0
   30ae0:	f43f af5d 	beq.w	3099e <__kernel_rem_pio2f+0x18a>
   30ae4:	4628      	mov	r0, r5
   30ae6:	9301      	str	r3, [sp, #4]
   30ae8:	f000 fae2 	bl	310b0 <scalbnf>
   30aec:	ee38 8a40 	vsub.f32	s16, s16, s0
   30af0:	9b01      	ldr	r3, [sp, #4]
   30af2:	eeb5 8a40 	vcmp.f32	s16, #0.0
   30af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   30afa:	f43f af56 	beq.w	309aa <__kernel_rem_pio2f+0x196>
   30afe:	9301      	str	r3, [sp, #4]
   30b00:	eeb0 0a48 	vmov.f32	s0, s16
   30b04:	9d00      	ldr	r5, [sp, #0]
   30b06:	46d8      	mov	r8, fp
   30b08:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   30b0c:	1a98      	subs	r0, r3, r2
   30b0e:	f000 facf 	bl	310b0 <scalbnf>
   30b12:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 30b84 <__kernel_rem_pio2f+0x370>
   30b16:	9b01      	ldr	r3, [sp, #4]
   30b18:	eeb4 0ac7 	vcmpe.f32	s0, s14
   30b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   30b20:	f2c0 8184 	blt.w	30e2c <__kernel_rem_pio2f+0x618>
   30b24:	eddf 7a16 	vldr	s15, [pc, #88]	; 30b80 <__kernel_rem_pio2f+0x36c>
   30b28:	f103 0b01 	add.w	fp, r3, #1
   30b2c:	9a06      	ldr	r2, [sp, #24]
   30b2e:	ee60 7a27 	vmul.f32	s15, s0, s15
   30b32:	3208      	adds	r2, #8
   30b34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   30b38:	9206      	str	r2, [sp, #24]
   30b3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   30b3e:	eea7 0ac7 	vfms.f32	s0, s15, s14
   30b42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   30b46:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   30b4a:	ee10 2a10 	vmov	r2, s0
   30b4e:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
   30b52:	ee17 3a90 	vmov	r3, s15
   30b56:	f847 302b 	str.w	r3, [r7, fp, lsl #2]
   30b5a:	e04f      	b.n	30bfc <__kernel_rem_pio2f+0x3e8>
   30b5c:	2201      	movs	r2, #1
   30b5e:	f04f 0c00 	mov.w	ip, #0
   30b62:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
   30b66:	4293      	cmp	r3, r2
   30b68:	f847 002c 	str.w	r0, [r7, ip, lsl #2]
   30b6c:	dd15      	ble.n	30b9a <__kernel_rem_pio2f+0x386>
   30b6e:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
   30b72:	4439      	add	r1, r7
   30b74:	eb07 0282 	add.w	r2, r7, r2, lsl #2
   30b78:	e009      	b.n	30b8e <__kernel_rem_pio2f+0x37a>
   30b7a:	bf00      	nop
   30b7c:	0003b364 	.word	0x0003b364
   30b80:	3b800000 	.word	0x3b800000
   30b84:	43800000 	.word	0x43800000
   30b88:	00000000 	.word	0x00000000
   30b8c:	6810      	ldr	r0, [r2, #0]
   30b8e:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
   30b92:	f842 0b04 	str.w	r0, [r2], #4
   30b96:	428a      	cmp	r2, r1
   30b98:	d1f8      	bne.n	30b8c <__kernel_rem_pio2f+0x378>
   30b9a:	2001      	movs	r0, #1
   30b9c:	e789      	b.n	30ab2 <__kernel_rem_pio2f+0x29e>
   30b9e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   30ba2:	eeb4 8ae7 	vcmpe.f32	s16, s15
   30ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   30baa:	f280 80ae 	bge.w	30d0a <__kernel_rem_pio2f+0x4f6>
   30bae:	f04f 0b00 	mov.w	fp, #0
   30bb2:	e6f4      	b.n	3099e <__kernel_rem_pio2f+0x18a>
   30bb4:	f103 0e01 	add.w	lr, r3, #1
   30bb8:	46f4      	mov	ip, lr
   30bba:	4670      	mov	r0, lr
   30bbc:	e71b      	b.n	309f6 <__kernel_rem_pio2f+0x1e2>
   30bbe:	ed5f 7a0e 	vldr	s15, [pc, #-56]	; 30b88 <__kernel_rem_pio2f+0x374>
   30bc2:	3604      	adds	r6, #4
   30bc4:	ece0 7a01 	vstmia	r0!, {s15}
   30bc8:	42b8      	cmp	r0, r7
   30bca:	f47f ae6d 	bne.w	308a8 <__kernel_rem_pio2f+0x94>
   30bce:	e681      	b.n	308d4 <__kernel_rem_pio2f+0xc0>
   30bd0:	9906      	ldr	r1, [sp, #24]
   30bd2:	46d8      	mov	r8, fp
   30bd4:	f857 202c 	ldr.w	r2, [r7, ip, lsl #2]
   30bd8:	46e3      	mov	fp, ip
   30bda:	3908      	subs	r1, #8
   30bdc:	9d00      	ldr	r5, [sp, #0]
   30bde:	9106      	str	r1, [sp, #24]
   30be0:	b962      	cbnz	r2, 30bfc <__kernel_rem_pio2f+0x3e8>
   30be2:	4ab0      	ldr	r2, [pc, #704]	; (30ea4 <__kernel_rem_pio2f+0x690>)
   30be4:	441a      	add	r2, r3
   30be6:	eb07 0382 	add.w	r3, r7, r2, lsl #2
   30bea:	460a      	mov	r2, r1
   30bec:	f853 1904 	ldr.w	r1, [r3], #-4
   30bf0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   30bf4:	3a08      	subs	r2, #8
   30bf6:	2900      	cmp	r1, #0
   30bf8:	d0f8      	beq.n	30bec <__kernel_rem_pio2f+0x3d8>
   30bfa:	9206      	str	r2, [sp, #24]
   30bfc:	9806      	ldr	r0, [sp, #24]
   30bfe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   30c02:	f000 fa55 	bl	310b0 <scalbnf>
   30c06:	f1bb 0f00 	cmp.w	fp, #0
   30c0a:	f2c0 8136 	blt.w	30e7a <__kernel_rem_pio2f+0x666>
   30c0e:	ea4f 048b 	mov.w	r4, fp, lsl #2
   30c12:	ab46      	add	r3, sp, #280	; 0x118
   30c14:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 30ea8 <__kernel_rem_pio2f+0x694>
   30c18:	1d26      	adds	r6, r4, #4
   30c1a:	441c      	add	r4, r3
   30c1c:	19bb      	adds	r3, r7, r6
   30c1e:	1d22      	adds	r2, r4, #4
   30c20:	ed73 7a01 	vldmdb	r3!, {s15}
   30c24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   30c28:	42bb      	cmp	r3, r7
   30c2a:	ee67 7a80 	vmul.f32	s15, s15, s0
   30c2e:	ee20 0a07 	vmul.f32	s0, s0, s14
   30c32:	ed62 7a01 	vstmdb	r2!, {s15}
   30c36:	d1f3      	bne.n	30c20 <__kernel_rem_pio2f+0x40c>
   30c38:	f10d 0cc8 	add.w	ip, sp, #200	; 0xc8
   30c3c:	2d00      	cmp	r5, #0
   30c3e:	f04f 0000 	mov.w	r0, #0
   30c42:	ed9f 6a9a 	vldr	s12, [pc, #616]	; 30eac <__kernel_rem_pio2f+0x698>
   30c46:	4667      	mov	r7, ip
   30c48:	db1d      	blt.n	30c86 <__kernel_rem_pio2f+0x472>
   30c4a:	4999      	ldr	r1, [pc, #612]	; (30eb0 <__kernel_rem_pio2f+0x69c>)
   30c4c:	4622      	mov	r2, r4
   30c4e:	eeb0 7a46 	vmov.f32	s14, s12
   30c52:	eddf 7a98 	vldr	s15, [pc, #608]	; 30eb4 <__kernel_rem_pio2f+0x6a0>
   30c56:	2300      	movs	r3, #0
   30c58:	e003      	b.n	30c62 <__kernel_rem_pio2f+0x44e>
   30c5a:	4283      	cmp	r3, r0
   30c5c:	dc08      	bgt.n	30c70 <__kernel_rem_pio2f+0x45c>
   30c5e:	ecb1 7a01 	vldmia	r1!, {s14}
   30c62:	3301      	adds	r3, #1
   30c64:	ecf2 6a01 	vldmia	r2!, {s13}
   30c68:	429d      	cmp	r5, r3
   30c6a:	eee6 7a87 	vfma.f32	s15, s13, s14
   30c6e:	daf4      	bge.n	30c5a <__kernel_rem_pio2f+0x446>
   30c70:	4558      	cmp	r0, fp
   30c72:	ece7 7a01 	vstmia	r7!, {s15}
   30c76:	f1a4 0404 	sub.w	r4, r4, #4
   30c7a:	f100 0301 	add.w	r3, r0, #1
   30c7e:	d00c      	beq.n	30c9a <__kernel_rem_pio2f+0x486>
   30c80:	2d00      	cmp	r5, #0
   30c82:	4618      	mov	r0, r3
   30c84:	dae1      	bge.n	30c4a <__kernel_rem_pio2f+0x436>
   30c86:	eddf 7a8b 	vldr	s15, [pc, #556]	; 30eb4 <__kernel_rem_pio2f+0x6a0>
   30c8a:	4558      	cmp	r0, fp
   30c8c:	f1a4 0404 	sub.w	r4, r4, #4
   30c90:	f100 0301 	add.w	r3, r0, #1
   30c94:	ece7 7a01 	vstmia	r7!, {s15}
   30c98:	d1f2      	bne.n	30c80 <__kernel_rem_pio2f+0x46c>
   30c9a:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   30c9c:	2b03      	cmp	r3, #3
   30c9e:	d823      	bhi.n	30ce8 <__kernel_rem_pio2f+0x4d4>
   30ca0:	e8df f003 	tbb	[pc, r3]
   30ca4:	449c9cae 	.word	0x449c9cae
   30ca8:	eddf 7a82 	vldr	s15, [pc, #520]	; 30eb4 <__kernel_rem_pio2f+0x6a0>
   30cac:	4643      	mov	r3, r8
   30cae:	ed9d 7a32 	vldr	s14, [sp, #200]	; 0xc8
   30cb2:	ee37 7a67 	vsub.f32	s14, s14, s15
   30cb6:	2b00      	cmp	r3, #0
   30cb8:	f040 80c0 	bne.w	30e3c <__kernel_rem_pio2f+0x628>
   30cbc:	9b07      	ldr	r3, [sp, #28]
   30cbe:	f1bb 0f00 	cmp.w	fp, #0
   30cc2:	edc3 7a00 	vstr	s15, [r3]
   30cc6:	dd0c      	ble.n	30ce2 <__kernel_rem_pio2f+0x4ce>
   30cc8:	aa33      	add	r2, sp, #204	; 0xcc
   30cca:	2301      	movs	r3, #1
   30ccc:	3301      	adds	r3, #1
   30cce:	ecf2 7a01 	vldmia	r2!, {s15}
   30cd2:	459b      	cmp	fp, r3
   30cd4:	ee37 7a27 	vadd.f32	s14, s14, s15
   30cd8:	daf8      	bge.n	30ccc <__kernel_rem_pio2f+0x4b8>
   30cda:	4643      	mov	r3, r8
   30cdc:	b10b      	cbz	r3, 30ce2 <__kernel_rem_pio2f+0x4ce>
   30cde:	eeb1 7a47 	vneg.f32	s14, s14
   30ce2:	9b07      	ldr	r3, [sp, #28]
   30ce4:	ed83 7a01 	vstr	s14, [r3, #4]
   30ce8:	ee19 3a90 	vmov	r3, s19
   30cec:	f003 0007 	and.w	r0, r3, #7
   30cf0:	b05b      	add	sp, #364	; 0x16c
   30cf2:	ecbd 8b04 	vpop	{d8-d9}
   30cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30cfa:	1e59      	subs	r1, r3, #1
   30cfc:	f857 2021 	ldr.w	r2, [r7, r1, lsl #2]
   30d00:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   30d04:	f847 2021 	str.w	r2, [r7, r1, lsl #2]
   30d08:	e6e1      	b.n	30ace <__kernel_rem_pio2f+0x2ba>
   30d0a:	ee19 2a90 	vmov	r2, s19
   30d0e:	2b00      	cmp	r3, #0
   30d10:	f102 0201 	add.w	r2, r2, #1
   30d14:	ee09 2a90 	vmov	s19, r2
   30d18:	f340 80a8 	ble.w	30e6c <__kernel_rem_pio2f+0x658>
   30d1c:	f04f 0b02 	mov.w	fp, #2
   30d20:	e6b6      	b.n	30a90 <__kernel_rem_pio2f+0x27c>
   30d22:	2308      	movs	r3, #8
   30d24:	9308      	str	r3, [sp, #32]
   30d26:	2300      	movs	r3, #0
   30d28:	9303      	str	r3, [sp, #12]
   30d2a:	e58e      	b.n	3084a <__kernel_rem_pio2f+0x36>
   30d2c:	f1bb 0f00 	cmp.w	fp, #0
   30d30:	f340 80b5 	ble.w	30e9e <__kernel_rem_pio2f+0x68a>
   30d34:	ab5a      	add	r3, sp, #360	; 0x168
   30d36:	ea4f 028b 	mov.w	r2, fp, lsl #2
   30d3a:	f10d 0cc8 	add.w	ip, sp, #200	; 0xc8
   30d3e:	1899      	adds	r1, r3, r2
   30d40:	eb0c 038b 	add.w	r3, ip, fp, lsl #2
   30d44:	ed51 6a28 	vldr	s13, [r1, #-160]	; 0xffffff60
   30d48:	ed73 7a01 	vldmdb	r3!, {s15}
   30d4c:	ee37 7aa6 	vadd.f32	s14, s15, s13
   30d50:	459c      	cmp	ip, r3
   30d52:	ee77 7ac7 	vsub.f32	s15, s15, s14
   30d56:	ed83 7a00 	vstr	s14, [r3]
   30d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
   30d5e:	eef0 6a47 	vmov.f32	s13, s14
   30d62:	edc3 7a01 	vstr	s15, [r3, #4]
   30d66:	d1ef      	bne.n	30d48 <__kernel_rem_pio2f+0x534>
   30d68:	f1bb 0f01 	cmp.w	fp, #1
   30d6c:	f340 8097 	ble.w	30e9e <__kernel_rem_pio2f+0x68a>
   30d70:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
   30d74:	a95a      	add	r1, sp, #360	; 0x168
   30d76:	445b      	add	r3, fp
   30d78:	440a      	add	r2, r1
   30d7a:	a933      	add	r1, sp, #204	; 0xcc
   30d7c:	009b      	lsls	r3, r3, #2
   30d7e:	ed52 6a28 	vldr	s13, [r2, #-160]	; 0xffffff60
   30d82:	1d1a      	adds	r2, r3, #4
   30d84:	4462      	add	r2, ip
   30d86:	ed72 7a01 	vldmdb	r2!, {s15}
   30d8a:	ee37 7aa6 	vadd.f32	s14, s15, s13
   30d8e:	4291      	cmp	r1, r2
   30d90:	ee77 7ac7 	vsub.f32	s15, s15, s14
   30d94:	ed82 7a00 	vstr	s14, [r2]
   30d98:	ee77 7aa6 	vadd.f32	s15, s15, s13
   30d9c:	eef0 6a47 	vmov.f32	s13, s14
   30da0:	edc2 7a01 	vstr	s15, [r2, #4]
   30da4:	d1ef      	bne.n	30d86 <__kernel_rem_pio2f+0x572>
   30da6:	3308      	adds	r3, #8
   30da8:	f10c 0208 	add.w	r2, ip, #8
   30dac:	eddf 7a41 	vldr	s15, [pc, #260]	; 30eb4 <__kernel_rem_pio2f+0x6a0>
   30db0:	449c      	add	ip, r3
   30db2:	ed3c 7a01 	vldmdb	ip!, {s14}
   30db6:	4562      	cmp	r2, ip
   30db8:	ee77 7a87 	vadd.f32	s15, s15, s14
   30dbc:	d1f9      	bne.n	30db2 <__kernel_rem_pio2f+0x59e>
   30dbe:	4643      	mov	r3, r8
   30dc0:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
   30dc4:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
   30dc8:	2b00      	cmp	r3, #0
   30dca:	d141      	bne.n	30e50 <__kernel_rem_pio2f+0x63c>
   30dcc:	9b07      	ldr	r3, [sp, #28]
   30dce:	edc3 6a00 	vstr	s13, [r3]
   30dd2:	ed83 7a01 	vstr	s14, [r3, #4]
   30dd6:	edc3 7a02 	vstr	s15, [r3, #8]
   30dda:	e785      	b.n	30ce8 <__kernel_rem_pio2f+0x4d4>
   30ddc:	4466      	add	r6, ip
   30dde:	eddf 7a35 	vldr	s15, [pc, #212]	; 30eb4 <__kernel_rem_pio2f+0x6a0>
   30de2:	ed36 7a01 	vldmdb	r6!, {s14}
   30de6:	45b4      	cmp	ip, r6
   30de8:	ee77 7a87 	vadd.f32	s15, s15, s14
   30dec:	d1f9      	bne.n	30de2 <__kernel_rem_pio2f+0x5ce>
   30dee:	ed9d 7a32 	vldr	s14, [sp, #200]	; 0xc8
   30df2:	4643      	mov	r3, r8
   30df4:	ee37 7a67 	vsub.f32	s14, s14, s15
   30df8:	2b00      	cmp	r3, #0
   30dfa:	f43f af5f 	beq.w	30cbc <__kernel_rem_pio2f+0x4a8>
   30dfe:	e01d      	b.n	30e3c <__kernel_rem_pio2f+0x628>
   30e00:	4466      	add	r6, ip
   30e02:	eddf 7a2c 	vldr	s15, [pc, #176]	; 30eb4 <__kernel_rem_pio2f+0x6a0>
   30e06:	ed36 7a01 	vldmdb	r6!, {s14}
   30e0a:	45b4      	cmp	ip, r6
   30e0c:	ee77 7a87 	vadd.f32	s15, s15, s14
   30e10:	d1f9      	bne.n	30e06 <__kernel_rem_pio2f+0x5f2>
   30e12:	4643      	mov	r3, r8
   30e14:	b10b      	cbz	r3, 30e1a <__kernel_rem_pio2f+0x606>
   30e16:	eef1 7a67 	vneg.f32	s15, s15
   30e1a:	9b07      	ldr	r3, [sp, #28]
   30e1c:	edc3 7a00 	vstr	s15, [r3]
   30e20:	e762      	b.n	30ce8 <__kernel_rem_pio2f+0x4d4>
   30e22:	4613      	mov	r3, r2
   30e24:	3304      	adds	r3, #4
   30e26:	e50b      	b.n	30840 <__kernel_rem_pio2f+0x2c>
   30e28:	2000      	movs	r0, #0
   30e2a:	e642      	b.n	30ab2 <__kernel_rem_pio2f+0x29e>
   30e2c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   30e30:	469b      	mov	fp, r3
   30e32:	ee10 2a10 	vmov	r2, s0
   30e36:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
   30e3a:	e6df      	b.n	30bfc <__kernel_rem_pio2f+0x3e8>
   30e3c:	eef1 7a67 	vneg.f32	s15, s15
   30e40:	9b07      	ldr	r3, [sp, #28]
   30e42:	f1bb 0f00 	cmp.w	fp, #0
   30e46:	edc3 7a00 	vstr	s15, [r3]
   30e4a:	f73f af3d 	bgt.w	30cc8 <__kernel_rem_pio2f+0x4b4>
   30e4e:	e746      	b.n	30cde <__kernel_rem_pio2f+0x4ca>
   30e50:	eef1 6a66 	vneg.f32	s13, s13
   30e54:	9b07      	ldr	r3, [sp, #28]
   30e56:	eeb1 7a47 	vneg.f32	s14, s14
   30e5a:	eef1 7a67 	vneg.f32	s15, s15
   30e5e:	edc3 6a00 	vstr	s13, [r3]
   30e62:	ed83 7a01 	vstr	s14, [r3, #4]
   30e66:	edc3 7a02 	vstr	s15, [r3, #8]
   30e6a:	e73d      	b.n	30ce8 <__kernel_rem_pio2f+0x4d4>
   30e6c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   30e70:	f04f 0b02 	mov.w	fp, #2
   30e74:	ee37 8ac8 	vsub.f32	s16, s15, s16
   30e78:	e591      	b.n	3099e <__kernel_rem_pio2f+0x18a>
   30e7a:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   30e7c:	2b03      	cmp	r3, #3
   30e7e:	f63f af33 	bhi.w	30ce8 <__kernel_rem_pio2f+0x4d4>
   30e82:	a201      	add	r2, pc, #4	; (adr r2, 30e88 <__kernel_rem_pio2f+0x674>)
   30e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   30e88:	00030e99 	.word	0x00030e99
   30e8c:	00030ca9 	.word	0x00030ca9
   30e90:	00030ca9 	.word	0x00030ca9
   30e94:	00030d2d 	.word	0x00030d2d
   30e98:	eddf 7a06 	vldr	s15, [pc, #24]	; 30eb4 <__kernel_rem_pio2f+0x6a0>
   30e9c:	e7b9      	b.n	30e12 <__kernel_rem_pio2f+0x5fe>
   30e9e:	eddf 7a05 	vldr	s15, [pc, #20]	; 30eb4 <__kernel_rem_pio2f+0x6a0>
   30ea2:	e78c      	b.n	30dbe <__kernel_rem_pio2f+0x5aa>
   30ea4:	3ffffffe 	.word	0x3ffffffe
   30ea8:	3b800000 	.word	0x3b800000
   30eac:	3fc90000 	.word	0x3fc90000
   30eb0:	0003b33c 	.word	0x0003b33c
   30eb4:	00000000 	.word	0x00000000

00030eb8 <__kernel_sinf>:
   30eb8:	ee10 3a10 	vmov	r3, s0
   30ebc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   30ec0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   30ec4:	da04      	bge.n	30ed0 <__kernel_sinf+0x18>
   30ec6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   30eca:	ee17 3a90 	vmov	r3, s15
   30ece:	b35b      	cbz	r3, 30f28 <__kernel_sinf+0x70>
   30ed0:	ee60 7a00 	vmul.f32	s15, s0, s0
   30ed4:	ed9f 7a15 	vldr	s14, [pc, #84]	; 30f2c <__kernel_sinf+0x74>
   30ed8:	eddf 5a15 	vldr	s11, [pc, #84]	; 30f30 <__kernel_sinf+0x78>
   30edc:	ed9f 6a15 	vldr	s12, [pc, #84]	; 30f34 <__kernel_sinf+0x7c>
   30ee0:	eee7 5a87 	vfma.f32	s11, s15, s14
   30ee4:	eddf 6a14 	vldr	s13, [pc, #80]	; 30f38 <__kernel_sinf+0x80>
   30ee8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 30f3c <__kernel_sinf+0x84>
   30eec:	ee20 5a27 	vmul.f32	s10, s0, s15
   30ef0:	eea5 6aa7 	vfma.f32	s12, s11, s15
   30ef4:	eee6 6a27 	vfma.f32	s13, s12, s15
   30ef8:	eea6 7aa7 	vfma.f32	s14, s13, s15
   30efc:	b930      	cbnz	r0, 30f0c <__kernel_sinf+0x54>
   30efe:	eddf 6a10 	vldr	s13, [pc, #64]	; 30f40 <__kernel_sinf+0x88>
   30f02:	eee7 6a87 	vfma.f32	s13, s15, s14
   30f06:	eea6 0a85 	vfma.f32	s0, s13, s10
   30f0a:	4770      	bx	lr
   30f0c:	ee27 7a45 	vnmul.f32	s14, s14, s10
   30f10:	eddf 6a0c 	vldr	s13, [pc, #48]	; 30f44 <__kernel_sinf+0x8c>
   30f14:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
   30f18:	eea0 7a86 	vfma.f32	s14, s1, s12
   30f1c:	eed7 0a27 	vfnms.f32	s1, s14, s15
   30f20:	eee5 0a26 	vfma.f32	s1, s10, s13
   30f24:	ee30 0a60 	vsub.f32	s0, s0, s1
   30f28:	4770      	bx	lr
   30f2a:	bf00      	nop
   30f2c:	2f2ec9d3 	.word	0x2f2ec9d3
   30f30:	b2d72f34 	.word	0xb2d72f34
   30f34:	3638ef1b 	.word	0x3638ef1b
   30f38:	b9500d01 	.word	0xb9500d01
   30f3c:	3c088889 	.word	0x3c088889
   30f40:	be2aaaab 	.word	0xbe2aaaab
   30f44:	3e2aaaab 	.word	0x3e2aaaab

00030f48 <finite>:
   30f48:	ee10 3a90 	vmov	r3, s1
   30f4c:	4802      	ldr	r0, [pc, #8]	; (30f58 <finite+0x10>)
   30f4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   30f52:	4418      	add	r0, r3
   30f54:	0fc0      	lsrs	r0, r0, #31
   30f56:	4770      	bx	lr
   30f58:	80100000 	.word	0x80100000

00030f5c <rint>:
   30f5c:	ec53 2b10 	vmov	r2, r3, d0
   30f60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   30f64:	f3c3 560a 	ubfx	r6, r3, #20, #11
   30f68:	b083      	sub	sp, #12
   30f6a:	4619      	mov	r1, r3
   30f6c:	ee10 5a10 	vmov	r5, s0
   30f70:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   30f74:	0fdc      	lsrs	r4, r3, #31
   30f76:	2813      	cmp	r0, #19
   30f78:	dc38      	bgt.n	30fec <rint+0x90>
   30f7a:	2800      	cmp	r0, #0
   30f7c:	db2d      	blt.n	30fda <rint+0x7e>
   30f7e:	4e3f      	ldr	r6, [pc, #252]	; (3107c <rint+0x120>)
   30f80:	4106      	asrs	r6, r0
   30f82:	ea03 0706 	and.w	r7, r3, r6
   30f86:	4317      	orrs	r7, r2
   30f88:	d02b      	beq.n	30fe2 <rint+0x86>
   30f8a:	0876      	lsrs	r6, r6, #1
   30f8c:	4033      	ands	r3, r6
   30f8e:	431d      	orrs	r5, r3
   30f90:	d00b      	beq.n	30faa <rint+0x4e>
   30f92:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   30f96:	2813      	cmp	r0, #19
   30f98:	ea21 0606 	bic.w	r6, r1, r6
   30f9c:	fa43 f100 	asr.w	r1, r3, r0
   30fa0:	bf0c      	ite	eq
   30fa2:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   30fa6:	2500      	movne	r5, #0
   30fa8:	4331      	orrs	r1, r6
   30faa:	4835      	ldr	r0, [pc, #212]	; (31080 <rint+0x124>)
   30fac:	462a      	mov	r2, r5
   30fae:	460b      	mov	r3, r1
   30fb0:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   30fb4:	e9d4 4500 	ldrd	r4, r5, [r4]
   30fb8:	4620      	mov	r0, r4
   30fba:	4629      	mov	r1, r5
   30fbc:	f7db fec0 	bl	cd40 <__adddf3>
   30fc0:	4622      	mov	r2, r4
   30fc2:	462b      	mov	r3, r5
   30fc4:	e9cd 0100 	strd	r0, r1, [sp]
   30fc8:	e9dd 0100 	ldrd	r0, r1, [sp]
   30fcc:	f7db feb6 	bl	cd3c <__aeabi_dsub>
   30fd0:	ec41 0b10 	vmov	d0, r0, r1
   30fd4:	b003      	add	sp, #12
   30fd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   30fda:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   30fde:	4310      	orrs	r0, r2
   30fe0:	d123      	bne.n	3102a <rint+0xce>
   30fe2:	ec43 2b10 	vmov	d0, r2, r3
   30fe6:	b003      	add	sp, #12
   30fe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   30fec:	2833      	cmp	r0, #51	; 0x33
   30fee:	dd09      	ble.n	31004 <rint+0xa8>
   30ff0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   30ff4:	d1f5      	bne.n	30fe2 <rint+0x86>
   30ff6:	ee10 0a10 	vmov	r0, s0
   30ffa:	f7db fea1 	bl	cd40 <__adddf3>
   30ffe:	ec41 0b10 	vmov	d0, r0, r1
   31002:	e7f0      	b.n	30fe6 <rint+0x8a>
   31004:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   31008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3100c:	40f0      	lsrs	r0, r6
   3100e:	4202      	tst	r2, r0
   31010:	d0e7      	beq.n	30fe2 <rint+0x86>
   31012:	0840      	lsrs	r0, r0, #1
   31014:	4202      	tst	r2, r0
   31016:	d0c8      	beq.n	30faa <rint+0x4e>
   31018:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3101c:	ea25 0000 	bic.w	r0, r5, r0
   31020:	fa43 f606 	asr.w	r6, r3, r6
   31024:	ea40 0506 	orr.w	r5, r0, r6
   31028:	e7bf      	b.n	30faa <rint+0x4e>
   3102a:	f3c3 0613 	ubfx	r6, r3, #0, #20
   3102e:	4815      	ldr	r0, [pc, #84]	; (31084 <rint+0x128>)
   31030:	4a13      	ldr	r2, [pc, #76]	; (31080 <rint+0x124>)
   31032:	4335      	orrs	r5, r6
   31034:	4018      	ands	r0, r3
   31036:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   3103a:	426b      	negs	r3, r5
   3103c:	432b      	orrs	r3, r5
   3103e:	0b1b      	lsrs	r3, r3, #12
   31040:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   31044:	e9d2 6700 	ldrd	r6, r7, [r2]
   31048:	ea43 0900 	orr.w	r9, r3, r0
   3104c:	ee10 2a10 	vmov	r2, s0
   31050:	4630      	mov	r0, r6
   31052:	4639      	mov	r1, r7
   31054:	464b      	mov	r3, r9
   31056:	f7db fe73 	bl	cd40 <__adddf3>
   3105a:	463b      	mov	r3, r7
   3105c:	4632      	mov	r2, r6
   3105e:	e9cd 0100 	strd	r0, r1, [sp]
   31062:	e9dd 0100 	ldrd	r0, r1, [sp]
   31066:	f7db fe69 	bl	cd3c <__aeabi_dsub>
   3106a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   3106e:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   31072:	ec41 0b10 	vmov	d0, r0, r1
   31076:	b003      	add	sp, #12
   31078:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3107c:	000fffff 	.word	0x000fffff
   31080:	0003a128 	.word	0x0003a128
   31084:	fffe0000 	.word	0xfffe0000

00031088 <finitef>:
   31088:	ee10 3a10 	vmov	r3, s0
   3108c:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   31090:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
   31094:	bfac      	ite	ge
   31096:	2000      	movge	r0, #0
   31098:	2001      	movlt	r0, #1
   3109a:	4770      	bx	lr

0003109c <nanf>:
   3109c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 310a4 <nanf+0x8>
   310a0:	4770      	bx	lr
   310a2:	bf00      	nop
   310a4:	7fc00000 	.word	0x7fc00000

000310a8 <rintf>:
   310a8:	eeb7 0a40 	vrintx.f32	s0, s0
   310ac:	4770      	bx	lr
   310ae:	bf00      	nop

000310b0 <scalbnf>:
   310b0:	b082      	sub	sp, #8
   310b2:	ed8d 0a01 	vstr	s0, [sp, #4]
   310b6:	9b01      	ldr	r3, [sp, #4]
   310b8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   310bc:	d029      	beq.n	31112 <scalbnf+0x62>
   310be:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   310c2:	d222      	bcs.n	3110a <scalbnf+0x5a>
   310c4:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
   310c8:	d127      	bne.n	3111a <scalbnf+0x6a>
   310ca:	ed9d 7a01 	vldr	s14, [sp, #4]
   310ce:	eddf 7a2d 	vldr	s15, [pc, #180]	; 31184 <scalbnf+0xd4>
   310d2:	4b2d      	ldr	r3, [pc, #180]	; (31188 <scalbnf+0xd8>)
   310d4:	ee67 7a27 	vmul.f32	s15, s14, s15
   310d8:	4298      	cmp	r0, r3
   310da:	edcd 7a01 	vstr	s15, [sp, #4]
   310de:	db3e      	blt.n	3115e <scalbnf+0xae>
   310e0:	9b01      	ldr	r3, [sp, #4]
   310e2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   310e6:	3a19      	subs	r2, #25
   310e8:	4402      	add	r2, r0
   310ea:	2afe      	cmp	r2, #254	; 0xfe
   310ec:	dd19      	ble.n	31122 <scalbnf+0x72>
   310ee:	9b01      	ldr	r3, [sp, #4]
   310f0:	ed9f 0a26 	vldr	s0, [pc, #152]	; 3118c <scalbnf+0xdc>
   310f4:	2b00      	cmp	r3, #0
   310f6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 31190 <scalbnf+0xe0>
   310fa:	eef0 7a40 	vmov.f32	s15, s0
   310fe:	fe20 0a07 	vselge.f32	s0, s0, s14
   31102:	ee20 0a27 	vmul.f32	s0, s0, s15
   31106:	b002      	add	sp, #8
   31108:	4770      	bx	lr
   3110a:	ee30 0a00 	vadd.f32	s0, s0, s0
   3110e:	b002      	add	sp, #8
   31110:	4770      	bx	lr
   31112:	ed9d 0a01 	vldr	s0, [sp, #4]
   31116:	b002      	add	sp, #8
   31118:	4770      	bx	lr
   3111a:	0dd2      	lsrs	r2, r2, #23
   3111c:	4402      	add	r2, r0
   3111e:	2afe      	cmp	r2, #254	; 0xfe
   31120:	dce5      	bgt.n	310ee <scalbnf+0x3e>
   31122:	2a00      	cmp	r2, #0
   31124:	dc13      	bgt.n	3114e <scalbnf+0x9e>
   31126:	f112 0f16 	cmn.w	r2, #22
   3112a:	da1f      	bge.n	3116c <scalbnf+0xbc>
   3112c:	f24c 3350 	movw	r3, #50000	; 0xc350
   31130:	4298      	cmp	r0, r3
   31132:	9b01      	ldr	r3, [sp, #4]
   31134:	dcdc      	bgt.n	310f0 <scalbnf+0x40>
   31136:	ed9f 0a17 	vldr	s0, [pc, #92]	; 31194 <scalbnf+0xe4>
   3113a:	2b00      	cmp	r3, #0
   3113c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 31198 <scalbnf+0xe8>
   31140:	eef0 7a40 	vmov.f32	s15, s0
   31144:	fe20 0a07 	vselge.f32	s0, s0, s14
   31148:	ee20 0a27 	vmul.f32	s0, s0, s15
   3114c:	e7df      	b.n	3110e <scalbnf+0x5e>
   3114e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   31152:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   31156:	ee00 3a10 	vmov	s0, r3
   3115a:	b002      	add	sp, #8
   3115c:	4770      	bx	lr
   3115e:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 31194 <scalbnf+0xe4>
   31162:	eddd 7a01 	vldr	s15, [sp, #4]
   31166:	ee27 0a80 	vmul.f32	s0, s15, s0
   3116a:	e7d0      	b.n	3110e <scalbnf+0x5e>
   3116c:	3219      	adds	r2, #25
   3116e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   31172:	eddf 7a0a 	vldr	s15, [pc, #40]	; 3119c <scalbnf+0xec>
   31176:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   3117a:	ee07 3a10 	vmov	s14, r3
   3117e:	ee27 0a27 	vmul.f32	s0, s14, s15
   31182:	e7c4      	b.n	3110e <scalbnf+0x5e>
   31184:	4c000000 	.word	0x4c000000
   31188:	ffff3cb0 	.word	0xffff3cb0
   3118c:	7149f2ca 	.word	0x7149f2ca
   31190:	f149f2ca 	.word	0xf149f2ca
   31194:	0da24260 	.word	0x0da24260
   31198:	8da24260 	.word	0x8da24260
   3119c:	33000000 	.word	0x33000000

000311a0 <__assert_func>:
   311a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   311a2:	461c      	mov	r4, r3
   311a4:	4b09      	ldr	r3, [pc, #36]	; (311cc <__assert_func+0x2c>)
   311a6:	4605      	mov	r5, r0
   311a8:	681b      	ldr	r3, [r3, #0]
   311aa:	68d8      	ldr	r0, [r3, #12]
   311ac:	b152      	cbz	r2, 311c4 <__assert_func+0x24>
   311ae:	4b08      	ldr	r3, [pc, #32]	; (311d0 <__assert_func+0x30>)
   311b0:	9100      	str	r1, [sp, #0]
   311b2:	4908      	ldr	r1, [pc, #32]	; (311d4 <__assert_func+0x34>)
   311b4:	e9cd 3201 	strd	r3, r2, [sp, #4]
   311b8:	462b      	mov	r3, r5
   311ba:	4622      	mov	r2, r4
   311bc:	f000 f816 	bl	311ec <fiprintf>
   311c0:	f008 f8c0 	bl	39344 <abort>
   311c4:	4b04      	ldr	r3, [pc, #16]	; (311d8 <__assert_func+0x38>)
   311c6:	461a      	mov	r2, r3
   311c8:	e7f2      	b.n	311b0 <__assert_func+0x10>
   311ca:	bf00      	nop
   311cc:	20020234 	.word	0x20020234
   311d0:	0004013f 	.word	0x0004013f
   311d4:	0004014c 	.word	0x0004014c
   311d8:	0003c514 	.word	0x0003c514

000311dc <calloc>:
   311dc:	4b02      	ldr	r3, [pc, #8]	; (311e8 <calloc+0xc>)
   311de:	460a      	mov	r2, r1
   311e0:	4601      	mov	r1, r0
   311e2:	6818      	ldr	r0, [r3, #0]
   311e4:	f007 bf2f 	b.w	39046 <_calloc_r>
   311e8:	20020234 	.word	0x20020234

000311ec <fiprintf>:
   311ec:	b40e      	push	{r1, r2, r3}
   311ee:	b503      	push	{r0, r1, lr}
   311f0:	ab03      	add	r3, sp, #12
   311f2:	4601      	mov	r1, r0
   311f4:	4805      	ldr	r0, [pc, #20]	; (3120c <fiprintf+0x20>)
   311f6:	f853 2b04 	ldr.w	r2, [r3], #4
   311fa:	6800      	ldr	r0, [r0, #0]
   311fc:	9301      	str	r3, [sp, #4]
   311fe:	f000 f8bf 	bl	31380 <_vfiprintf_r>
   31202:	b002      	add	sp, #8
   31204:	f85d eb04 	ldr.w	lr, [sp], #4
   31208:	b003      	add	sp, #12
   3120a:	4770      	bx	lr
   3120c:	20020234 	.word	0x20020234

00031210 <malloc>:
   31210:	4b02      	ldr	r3, [pc, #8]	; (3121c <malloc+0xc>)
   31212:	4601      	mov	r1, r0
   31214:	6818      	ldr	r0, [r3, #0]
   31216:	f000 b859 	b.w	312cc <_malloc_r>
   3121a:	bf00      	nop
   3121c:	20020234 	.word	0x20020234

00031220 <free>:
   31220:	4b02      	ldr	r3, [pc, #8]	; (3122c <free+0xc>)
   31222:	4601      	mov	r1, r0
   31224:	6818      	ldr	r0, [r3, #0]
   31226:	f000 b803 	b.w	31230 <_free_r>
   3122a:	bf00      	nop
   3122c:	20020234 	.word	0x20020234

00031230 <_free_r>:
   31230:	b538      	push	{r3, r4, r5, lr}
   31232:	4605      	mov	r5, r0
   31234:	2900      	cmp	r1, #0
   31236:	d045      	beq.n	312c4 <_free_r+0x94>
   31238:	f851 3c04 	ldr.w	r3, [r1, #-4]
   3123c:	1f0c      	subs	r4, r1, #4
   3123e:	2b00      	cmp	r3, #0
   31240:	bfb8      	it	lt
   31242:	18e4      	addlt	r4, r4, r3
   31244:	f001 fafe 	bl	32844 <__malloc_lock>
   31248:	4a1f      	ldr	r2, [pc, #124]	; (312c8 <_free_r+0x98>)
   3124a:	6813      	ldr	r3, [r2, #0]
   3124c:	4610      	mov	r0, r2
   3124e:	b933      	cbnz	r3, 3125e <_free_r+0x2e>
   31250:	6063      	str	r3, [r4, #4]
   31252:	6014      	str	r4, [r2, #0]
   31254:	4628      	mov	r0, r5
   31256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3125a:	f001 baf9 	b.w	32850 <__malloc_unlock>
   3125e:	42a3      	cmp	r3, r4
   31260:	d90c      	bls.n	3127c <_free_r+0x4c>
   31262:	6821      	ldr	r1, [r4, #0]
   31264:	1862      	adds	r2, r4, r1
   31266:	4293      	cmp	r3, r2
   31268:	bf02      	ittt	eq
   3126a:	681a      	ldreq	r2, [r3, #0]
   3126c:	685b      	ldreq	r3, [r3, #4]
   3126e:	1852      	addeq	r2, r2, r1
   31270:	6063      	str	r3, [r4, #4]
   31272:	bf08      	it	eq
   31274:	6022      	streq	r2, [r4, #0]
   31276:	6004      	str	r4, [r0, #0]
   31278:	e7ec      	b.n	31254 <_free_r+0x24>
   3127a:	4613      	mov	r3, r2
   3127c:	685a      	ldr	r2, [r3, #4]
   3127e:	b10a      	cbz	r2, 31284 <_free_r+0x54>
   31280:	42a2      	cmp	r2, r4
   31282:	d9fa      	bls.n	3127a <_free_r+0x4a>
   31284:	6819      	ldr	r1, [r3, #0]
   31286:	1858      	adds	r0, r3, r1
   31288:	42a0      	cmp	r0, r4
   3128a:	d10b      	bne.n	312a4 <_free_r+0x74>
   3128c:	6820      	ldr	r0, [r4, #0]
   3128e:	4401      	add	r1, r0
   31290:	1858      	adds	r0, r3, r1
   31292:	6019      	str	r1, [r3, #0]
   31294:	4282      	cmp	r2, r0
   31296:	d1dd      	bne.n	31254 <_free_r+0x24>
   31298:	6810      	ldr	r0, [r2, #0]
   3129a:	6852      	ldr	r2, [r2, #4]
   3129c:	4401      	add	r1, r0
   3129e:	605a      	str	r2, [r3, #4]
   312a0:	6019      	str	r1, [r3, #0]
   312a2:	e7d7      	b.n	31254 <_free_r+0x24>
   312a4:	d902      	bls.n	312ac <_free_r+0x7c>
   312a6:	230c      	movs	r3, #12
   312a8:	602b      	str	r3, [r5, #0]
   312aa:	e7d3      	b.n	31254 <_free_r+0x24>
   312ac:	6820      	ldr	r0, [r4, #0]
   312ae:	1821      	adds	r1, r4, r0
   312b0:	428a      	cmp	r2, r1
   312b2:	bf02      	ittt	eq
   312b4:	6811      	ldreq	r1, [r2, #0]
   312b6:	6852      	ldreq	r2, [r2, #4]
   312b8:	1809      	addeq	r1, r1, r0
   312ba:	6062      	str	r2, [r4, #4]
   312bc:	bf08      	it	eq
   312be:	6021      	streq	r1, [r4, #0]
   312c0:	605c      	str	r4, [r3, #4]
   312c2:	e7c7      	b.n	31254 <_free_r+0x24>
   312c4:	bd38      	pop	{r3, r4, r5, pc}
   312c6:	bf00      	nop
   312c8:	20027608 	.word	0x20027608

000312cc <_malloc_r>:
   312cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   312ce:	1ccd      	adds	r5, r1, #3
   312d0:	4606      	mov	r6, r0
   312d2:	f025 0503 	bic.w	r5, r5, #3
   312d6:	3508      	adds	r5, #8
   312d8:	2d0c      	cmp	r5, #12
   312da:	bf38      	it	cc
   312dc:	250c      	movcc	r5, #12
   312de:	2d00      	cmp	r5, #0
   312e0:	db01      	blt.n	312e6 <_malloc_r+0x1a>
   312e2:	42a9      	cmp	r1, r5
   312e4:	d903      	bls.n	312ee <_malloc_r+0x22>
   312e6:	230c      	movs	r3, #12
   312e8:	6033      	str	r3, [r6, #0]
   312ea:	2000      	movs	r0, #0
   312ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   312ee:	f001 faa9 	bl	32844 <__malloc_lock>
   312f2:	4921      	ldr	r1, [pc, #132]	; (31378 <_malloc_r+0xac>)
   312f4:	680a      	ldr	r2, [r1, #0]
   312f6:	4614      	mov	r4, r2
   312f8:	b99c      	cbnz	r4, 31322 <_malloc_r+0x56>
   312fa:	4f20      	ldr	r7, [pc, #128]	; (3137c <_malloc_r+0xb0>)
   312fc:	683b      	ldr	r3, [r7, #0]
   312fe:	b923      	cbnz	r3, 3130a <_malloc_r+0x3e>
   31300:	4621      	mov	r1, r4
   31302:	4630      	mov	r0, r6
   31304:	f000 fca2 	bl	31c4c <_sbrk_r>
   31308:	6038      	str	r0, [r7, #0]
   3130a:	4629      	mov	r1, r5
   3130c:	4630      	mov	r0, r6
   3130e:	f000 fc9d 	bl	31c4c <_sbrk_r>
   31312:	1c43      	adds	r3, r0, #1
   31314:	d123      	bne.n	3135e <_malloc_r+0x92>
   31316:	230c      	movs	r3, #12
   31318:	4630      	mov	r0, r6
   3131a:	6033      	str	r3, [r6, #0]
   3131c:	f001 fa98 	bl	32850 <__malloc_unlock>
   31320:	e7e3      	b.n	312ea <_malloc_r+0x1e>
   31322:	6823      	ldr	r3, [r4, #0]
   31324:	1b5b      	subs	r3, r3, r5
   31326:	d417      	bmi.n	31358 <_malloc_r+0x8c>
   31328:	2b0b      	cmp	r3, #11
   3132a:	d903      	bls.n	31334 <_malloc_r+0x68>
   3132c:	6023      	str	r3, [r4, #0]
   3132e:	441c      	add	r4, r3
   31330:	6025      	str	r5, [r4, #0]
   31332:	e004      	b.n	3133e <_malloc_r+0x72>
   31334:	6863      	ldr	r3, [r4, #4]
   31336:	42a2      	cmp	r2, r4
   31338:	bf0c      	ite	eq
   3133a:	600b      	streq	r3, [r1, #0]
   3133c:	6053      	strne	r3, [r2, #4]
   3133e:	4630      	mov	r0, r6
   31340:	f001 fa86 	bl	32850 <__malloc_unlock>
   31344:	f104 000b 	add.w	r0, r4, #11
   31348:	1d23      	adds	r3, r4, #4
   3134a:	f020 0007 	bic.w	r0, r0, #7
   3134e:	1ac2      	subs	r2, r0, r3
   31350:	d0cc      	beq.n	312ec <_malloc_r+0x20>
   31352:	1a1b      	subs	r3, r3, r0
   31354:	50a3      	str	r3, [r4, r2]
   31356:	e7c9      	b.n	312ec <_malloc_r+0x20>
   31358:	4622      	mov	r2, r4
   3135a:	6864      	ldr	r4, [r4, #4]
   3135c:	e7cc      	b.n	312f8 <_malloc_r+0x2c>
   3135e:	1cc4      	adds	r4, r0, #3
   31360:	f024 0403 	bic.w	r4, r4, #3
   31364:	42a0      	cmp	r0, r4
   31366:	d0e3      	beq.n	31330 <_malloc_r+0x64>
   31368:	1a21      	subs	r1, r4, r0
   3136a:	4630      	mov	r0, r6
   3136c:	f000 fc6e 	bl	31c4c <_sbrk_r>
   31370:	3001      	adds	r0, #1
   31372:	d1dd      	bne.n	31330 <_malloc_r+0x64>
   31374:	e7cf      	b.n	31316 <_malloc_r+0x4a>
   31376:	bf00      	nop
   31378:	20027608 	.word	0x20027608
   3137c:	2002760c 	.word	0x2002760c

00031380 <_vfiprintf_r>:
   31380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31384:	460d      	mov	r5, r1
   31386:	b09d      	sub	sp, #116	; 0x74
   31388:	4614      	mov	r4, r2
   3138a:	461e      	mov	r6, r3
   3138c:	4607      	mov	r7, r0
   3138e:	b118      	cbz	r0, 31398 <_vfiprintf_r+0x18>
   31390:	6983      	ldr	r3, [r0, #24]
   31392:	b90b      	cbnz	r3, 31398 <_vfiprintf_r+0x18>
   31394:	f001 f994 	bl	326c0 <__sinit>
   31398:	4b85      	ldr	r3, [pc, #532]	; (315b0 <_vfiprintf_r+0x230>)
   3139a:	429d      	cmp	r5, r3
   3139c:	d11b      	bne.n	313d6 <_vfiprintf_r+0x56>
   3139e:	687d      	ldr	r5, [r7, #4]
   313a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   313a2:	07d9      	lsls	r1, r3, #31
   313a4:	d405      	bmi.n	313b2 <_vfiprintf_r+0x32>
   313a6:	89ab      	ldrh	r3, [r5, #12]
   313a8:	059a      	lsls	r2, r3, #22
   313aa:	d402      	bmi.n	313b2 <_vfiprintf_r+0x32>
   313ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
   313ae:	f008 f893 	bl	394d8 <__retarget_lock_acquire_recursive>
   313b2:	89ab      	ldrh	r3, [r5, #12]
   313b4:	071b      	lsls	r3, r3, #28
   313b6:	d501      	bpl.n	313bc <_vfiprintf_r+0x3c>
   313b8:	692b      	ldr	r3, [r5, #16]
   313ba:	b9eb      	cbnz	r3, 313f8 <_vfiprintf_r+0x78>
   313bc:	4629      	mov	r1, r5
   313be:	4638      	mov	r0, r7
   313c0:	f000 ffea 	bl	32398 <__swsetup_r>
   313c4:	b1c0      	cbz	r0, 313f8 <_vfiprintf_r+0x78>
   313c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   313c8:	07d8      	lsls	r0, r3, #31
   313ca:	d50e      	bpl.n	313ea <_vfiprintf_r+0x6a>
   313cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   313d0:	b01d      	add	sp, #116	; 0x74
   313d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   313d6:	4b77      	ldr	r3, [pc, #476]	; (315b4 <_vfiprintf_r+0x234>)
   313d8:	429d      	cmp	r5, r3
   313da:	d101      	bne.n	313e0 <_vfiprintf_r+0x60>
   313dc:	68bd      	ldr	r5, [r7, #8]
   313de:	e7df      	b.n	313a0 <_vfiprintf_r+0x20>
   313e0:	4b75      	ldr	r3, [pc, #468]	; (315b8 <_vfiprintf_r+0x238>)
   313e2:	429d      	cmp	r5, r3
   313e4:	bf08      	it	eq
   313e6:	68fd      	ldreq	r5, [r7, #12]
   313e8:	e7da      	b.n	313a0 <_vfiprintf_r+0x20>
   313ea:	89ab      	ldrh	r3, [r5, #12]
   313ec:	0599      	lsls	r1, r3, #22
   313ee:	d4ed      	bmi.n	313cc <_vfiprintf_r+0x4c>
   313f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
   313f2:	f008 f872 	bl	394da <__retarget_lock_release_recursive>
   313f6:	e7e9      	b.n	313cc <_vfiprintf_r+0x4c>
   313f8:	2300      	movs	r3, #0
   313fa:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 315bc <_vfiprintf_r+0x23c>
   313fe:	f04f 0a01 	mov.w	sl, #1
   31402:	9603      	str	r6, [sp, #12]
   31404:	9309      	str	r3, [sp, #36]	; 0x24
   31406:	2320      	movs	r3, #32
   31408:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   3140c:	2330      	movs	r3, #48	; 0x30
   3140e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   31412:	4623      	mov	r3, r4
   31414:	461e      	mov	r6, r3
   31416:	f813 2b01 	ldrb.w	r2, [r3], #1
   3141a:	b10a      	cbz	r2, 31420 <_vfiprintf_r+0xa0>
   3141c:	2a25      	cmp	r2, #37	; 0x25
   3141e:	d1f9      	bne.n	31414 <_vfiprintf_r+0x94>
   31420:	ebb6 0b04 	subs.w	fp, r6, r4
   31424:	d00b      	beq.n	3143e <_vfiprintf_r+0xbe>
   31426:	465b      	mov	r3, fp
   31428:	4622      	mov	r2, r4
   3142a:	4629      	mov	r1, r5
   3142c:	4638      	mov	r0, r7
   3142e:	f007 fe2f 	bl	39090 <__sfputs_r>
   31432:	3001      	adds	r0, #1
   31434:	f000 80a3 	beq.w	3157e <_vfiprintf_r+0x1fe>
   31438:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3143a:	445b      	add	r3, fp
   3143c:	9309      	str	r3, [sp, #36]	; 0x24
   3143e:	7833      	ldrb	r3, [r6, #0]
   31440:	2b00      	cmp	r3, #0
   31442:	f000 809c 	beq.w	3157e <_vfiprintf_r+0x1fe>
   31446:	2300      	movs	r3, #0
   31448:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3144c:	3601      	adds	r6, #1
   3144e:	9304      	str	r3, [sp, #16]
   31450:	9307      	str	r3, [sp, #28]
   31452:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   31456:	931a      	str	r3, [sp, #104]	; 0x68
   31458:	e9cd 2305 	strd	r2, r3, [sp, #20]
   3145c:	4634      	mov	r4, r6
   3145e:	2205      	movs	r2, #5
   31460:	4856      	ldr	r0, [pc, #344]	; (315bc <_vfiprintf_r+0x23c>)
   31462:	f814 1b01 	ldrb.w	r1, [r4], #1
   31466:	f007 fd90 	bl	38f8a <memchr>
   3146a:	9b04      	ldr	r3, [sp, #16]
   3146c:	b9c0      	cbnz	r0, 314a0 <_vfiprintf_r+0x120>
   3146e:	06da      	lsls	r2, r3, #27
   31470:	bf44      	itt	mi
   31472:	2220      	movmi	r2, #32
   31474:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   31478:	0718      	lsls	r0, r3, #28
   3147a:	bf44      	itt	mi
   3147c:	222b      	movmi	r2, #43	; 0x2b
   3147e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   31482:	7832      	ldrb	r2, [r6, #0]
   31484:	2a2a      	cmp	r2, #42	; 0x2a
   31486:	d013      	beq.n	314b0 <_vfiprintf_r+0x130>
   31488:	4634      	mov	r4, r6
   3148a:	9a07      	ldr	r2, [sp, #28]
   3148c:	2000      	movs	r0, #0
   3148e:	260a      	movs	r6, #10
   31490:	4621      	mov	r1, r4
   31492:	f811 3b01 	ldrb.w	r3, [r1], #1
   31496:	3b30      	subs	r3, #48	; 0x30
   31498:	2b09      	cmp	r3, #9
   3149a:	d94b      	bls.n	31534 <_vfiprintf_r+0x1b4>
   3149c:	b970      	cbnz	r0, 314bc <_vfiprintf_r+0x13c>
   3149e:	e014      	b.n	314ca <_vfiprintf_r+0x14a>
   314a0:	eba0 0009 	sub.w	r0, r0, r9
   314a4:	4626      	mov	r6, r4
   314a6:	fa0a f000 	lsl.w	r0, sl, r0
   314aa:	4318      	orrs	r0, r3
   314ac:	9004      	str	r0, [sp, #16]
   314ae:	e7d5      	b.n	3145c <_vfiprintf_r+0xdc>
   314b0:	9a03      	ldr	r2, [sp, #12]
   314b2:	1d11      	adds	r1, r2, #4
   314b4:	6812      	ldr	r2, [r2, #0]
   314b6:	2a00      	cmp	r2, #0
   314b8:	9103      	str	r1, [sp, #12]
   314ba:	db01      	blt.n	314c0 <_vfiprintf_r+0x140>
   314bc:	9207      	str	r2, [sp, #28]
   314be:	e004      	b.n	314ca <_vfiprintf_r+0x14a>
   314c0:	4252      	negs	r2, r2
   314c2:	f043 0302 	orr.w	r3, r3, #2
   314c6:	9207      	str	r2, [sp, #28]
   314c8:	9304      	str	r3, [sp, #16]
   314ca:	7823      	ldrb	r3, [r4, #0]
   314cc:	2b2e      	cmp	r3, #46	; 0x2e
   314ce:	d10c      	bne.n	314ea <_vfiprintf_r+0x16a>
   314d0:	7863      	ldrb	r3, [r4, #1]
   314d2:	2b2a      	cmp	r3, #42	; 0x2a
   314d4:	d133      	bne.n	3153e <_vfiprintf_r+0x1be>
   314d6:	9b03      	ldr	r3, [sp, #12]
   314d8:	3402      	adds	r4, #2
   314da:	1d1a      	adds	r2, r3, #4
   314dc:	681b      	ldr	r3, [r3, #0]
   314de:	2b00      	cmp	r3, #0
   314e0:	9203      	str	r2, [sp, #12]
   314e2:	bfb8      	it	lt
   314e4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   314e8:	9305      	str	r3, [sp, #20]
   314ea:	4e35      	ldr	r6, [pc, #212]	; (315c0 <_vfiprintf_r+0x240>)
   314ec:	2203      	movs	r2, #3
   314ee:	7821      	ldrb	r1, [r4, #0]
   314f0:	4630      	mov	r0, r6
   314f2:	f007 fd4a 	bl	38f8a <memchr>
   314f6:	b138      	cbz	r0, 31508 <_vfiprintf_r+0x188>
   314f8:	2340      	movs	r3, #64	; 0x40
   314fa:	1b80      	subs	r0, r0, r6
   314fc:	3401      	adds	r4, #1
   314fe:	fa03 f000 	lsl.w	r0, r3, r0
   31502:	9b04      	ldr	r3, [sp, #16]
   31504:	4303      	orrs	r3, r0
   31506:	9304      	str	r3, [sp, #16]
   31508:	f814 1b01 	ldrb.w	r1, [r4], #1
   3150c:	2206      	movs	r2, #6
   3150e:	482d      	ldr	r0, [pc, #180]	; (315c4 <_vfiprintf_r+0x244>)
   31510:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   31514:	f007 fd39 	bl	38f8a <memchr>
   31518:	2800      	cmp	r0, #0
   3151a:	d03f      	beq.n	3159c <_vfiprintf_r+0x21c>
   3151c:	4b2a      	ldr	r3, [pc, #168]	; (315c8 <_vfiprintf_r+0x248>)
   3151e:	bb13      	cbnz	r3, 31566 <_vfiprintf_r+0x1e6>
   31520:	9b03      	ldr	r3, [sp, #12]
   31522:	3307      	adds	r3, #7
   31524:	f023 0307 	bic.w	r3, r3, #7
   31528:	3308      	adds	r3, #8
   3152a:	9303      	str	r3, [sp, #12]
   3152c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3152e:	4443      	add	r3, r8
   31530:	9309      	str	r3, [sp, #36]	; 0x24
   31532:	e76e      	b.n	31412 <_vfiprintf_r+0x92>
   31534:	fb06 3202 	mla	r2, r6, r2, r3
   31538:	2001      	movs	r0, #1
   3153a:	460c      	mov	r4, r1
   3153c:	e7a8      	b.n	31490 <_vfiprintf_r+0x110>
   3153e:	2300      	movs	r3, #0
   31540:	3401      	adds	r4, #1
   31542:	260a      	movs	r6, #10
   31544:	4619      	mov	r1, r3
   31546:	9305      	str	r3, [sp, #20]
   31548:	4620      	mov	r0, r4
   3154a:	f810 2b01 	ldrb.w	r2, [r0], #1
   3154e:	3a30      	subs	r2, #48	; 0x30
   31550:	2a09      	cmp	r2, #9
   31552:	d903      	bls.n	3155c <_vfiprintf_r+0x1dc>
   31554:	2b00      	cmp	r3, #0
   31556:	d0c8      	beq.n	314ea <_vfiprintf_r+0x16a>
   31558:	9105      	str	r1, [sp, #20]
   3155a:	e7c6      	b.n	314ea <_vfiprintf_r+0x16a>
   3155c:	fb06 2101 	mla	r1, r6, r1, r2
   31560:	2301      	movs	r3, #1
   31562:	4604      	mov	r4, r0
   31564:	e7f0      	b.n	31548 <_vfiprintf_r+0x1c8>
   31566:	ab03      	add	r3, sp, #12
   31568:	462a      	mov	r2, r5
   3156a:	a904      	add	r1, sp, #16
   3156c:	4638      	mov	r0, r7
   3156e:	9300      	str	r3, [sp, #0]
   31570:	4b16      	ldr	r3, [pc, #88]	; (315cc <_vfiprintf_r+0x24c>)
   31572:	f000 f82d 	bl	315d0 <_printf_float>
   31576:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   3157a:	4680      	mov	r8, r0
   3157c:	d1d6      	bne.n	3152c <_vfiprintf_r+0x1ac>
   3157e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   31580:	07d9      	lsls	r1, r3, #31
   31582:	d405      	bmi.n	31590 <_vfiprintf_r+0x210>
   31584:	89ab      	ldrh	r3, [r5, #12]
   31586:	059a      	lsls	r2, r3, #22
   31588:	d402      	bmi.n	31590 <_vfiprintf_r+0x210>
   3158a:	6da8      	ldr	r0, [r5, #88]	; 0x58
   3158c:	f007 ffa5 	bl	394da <__retarget_lock_release_recursive>
   31590:	89ab      	ldrh	r3, [r5, #12]
   31592:	065b      	lsls	r3, r3, #25
   31594:	f53f af1a 	bmi.w	313cc <_vfiprintf_r+0x4c>
   31598:	9809      	ldr	r0, [sp, #36]	; 0x24
   3159a:	e719      	b.n	313d0 <_vfiprintf_r+0x50>
   3159c:	ab03      	add	r3, sp, #12
   3159e:	462a      	mov	r2, r5
   315a0:	a904      	add	r1, sp, #16
   315a2:	4638      	mov	r0, r7
   315a4:	9300      	str	r3, [sp, #0]
   315a6:	4b09      	ldr	r3, [pc, #36]	; (315cc <_vfiprintf_r+0x24c>)
   315a8:	f000 fa3c 	bl	31a24 <_printf_i>
   315ac:	e7e3      	b.n	31576 <_vfiprintf_r+0x1f6>
   315ae:	bf00      	nop
   315b0:	0003b394 	.word	0x0003b394
   315b4:	0003b3b4 	.word	0x0003b3b4
   315b8:	0003b374 	.word	0x0003b374
   315bc:	0004027c 	.word	0x0004027c
   315c0:	00040282 	.word	0x00040282
   315c4:	00040286 	.word	0x00040286
   315c8:	000315d1 	.word	0x000315d1
   315cc:	00039091 	.word	0x00039091

000315d0 <_printf_float>:
   315d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   315d4:	b08d      	sub	sp, #52	; 0x34
   315d6:	460c      	mov	r4, r1
   315d8:	4616      	mov	r6, r2
   315da:	461f      	mov	r7, r3
   315dc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   315e0:	4605      	mov	r5, r0
   315e2:	f001 f8eb 	bl	327bc <_localeconv_r>
   315e6:	6803      	ldr	r3, [r0, #0]
   315e8:	4618      	mov	r0, r3
   315ea:	9306      	str	r3, [sp, #24]
   315ec:	f7e0 fd48 	bl	12080 <strlen>
   315f0:	2300      	movs	r3, #0
   315f2:	9007      	str	r0, [sp, #28]
   315f4:	930a      	str	r3, [sp, #40]	; 0x28
   315f6:	f8d8 3000 	ldr.w	r3, [r8]
   315fa:	f894 a018 	ldrb.w	sl, [r4, #24]
   315fe:	3307      	adds	r3, #7
   31600:	f8d4 b000 	ldr.w	fp, [r4]
   31604:	f023 0307 	bic.w	r3, r3, #7
   31608:	f103 0208 	add.w	r2, r3, #8
   3160c:	f8c8 2000 	str.w	r2, [r8]
   31610:	e9d3 2300 	ldrd	r2, r3, [r3]
   31614:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   31618:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
   3161c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   31620:	ed8d 7b04 	vstr	d7, [sp, #16]
   31624:	e9dd 8304 	ldrd	r8, r3, [sp, #16]
   31628:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
   3162c:	4640      	mov	r0, r8
   3162e:	4ba6      	ldr	r3, [pc, #664]	; (318c8 <_printf_float+0x2f8>)
   31630:	4649      	mov	r1, r9
   31632:	f7e0 fba1 	bl	11d78 <__aeabi_dcmpun>
   31636:	bb70      	cbnz	r0, 31696 <_printf_float+0xc6>
   31638:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3163c:	4ba2      	ldr	r3, [pc, #648]	; (318c8 <_printf_float+0x2f8>)
   3163e:	4640      	mov	r0, r8
   31640:	4649      	mov	r1, r9
   31642:	f7db ffaf 	bl	d5a4 <__aeabi_dcmple>
   31646:	bb30      	cbnz	r0, 31696 <_printf_float+0xc6>
   31648:	2200      	movs	r2, #0
   3164a:	2300      	movs	r3, #0
   3164c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   31650:	f7db ff9e 	bl	d590 <__aeabi_dcmplt>
   31654:	b110      	cbz	r0, 3165c <_printf_float+0x8c>
   31656:	232d      	movs	r3, #45	; 0x2d
   31658:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3165c:	4a9b      	ldr	r2, [pc, #620]	; (318cc <_printf_float+0x2fc>)
   3165e:	4b9c      	ldr	r3, [pc, #624]	; (318d0 <_printf_float+0x300>)
   31660:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   31664:	bf94      	ite	ls
   31666:	4690      	movls	r8, r2
   31668:	4698      	movhi	r8, r3
   3166a:	f04f 0900 	mov.w	r9, #0
   3166e:	2303      	movs	r3, #3
   31670:	f02b 0204 	bic.w	r2, fp, #4
   31674:	6123      	str	r3, [r4, #16]
   31676:	6022      	str	r2, [r4, #0]
   31678:	9700      	str	r7, [sp, #0]
   3167a:	4633      	mov	r3, r6
   3167c:	aa0b      	add	r2, sp, #44	; 0x2c
   3167e:	4621      	mov	r1, r4
   31680:	4628      	mov	r0, r5
   31682:	f007 fda7 	bl	391d4 <_printf_common>
   31686:	3001      	adds	r0, #1
   31688:	f040 808c 	bne.w	317a4 <_printf_float+0x1d4>
   3168c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   31690:	b00d      	add	sp, #52	; 0x34
   31692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31696:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   3169a:	4610      	mov	r0, r2
   3169c:	4619      	mov	r1, r3
   3169e:	f7e0 fb6b 	bl	11d78 <__aeabi_dcmpun>
   316a2:	b140      	cbz	r0, 316b6 <_printf_float+0xe6>
   316a4:	9b05      	ldr	r3, [sp, #20]
   316a6:	4a8b      	ldr	r2, [pc, #556]	; (318d4 <_printf_float+0x304>)
   316a8:	2b00      	cmp	r3, #0
   316aa:	bfbc      	itt	lt
   316ac:	232d      	movlt	r3, #45	; 0x2d
   316ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   316b2:	4b89      	ldr	r3, [pc, #548]	; (318d8 <_printf_float+0x308>)
   316b4:	e7d4      	b.n	31660 <_printf_float+0x90>
   316b6:	6863      	ldr	r3, [r4, #4]
   316b8:	f00a 09df 	and.w	r9, sl, #223	; 0xdf
   316bc:	1c5a      	adds	r2, r3, #1
   316be:	d13e      	bne.n	3173e <_printf_float+0x16e>
   316c0:	2306      	movs	r3, #6
   316c2:	6063      	str	r3, [r4, #4]
   316c4:	2300      	movs	r3, #0
   316c6:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
   316ca:	6861      	ldr	r1, [r4, #4]
   316cc:	4628      	mov	r0, r5
   316ce:	9303      	str	r3, [sp, #12]
   316d0:	ab0a      	add	r3, sp, #40	; 0x28
   316d2:	6022      	str	r2, [r4, #0]
   316d4:	e9cd a301 	strd	sl, r3, [sp, #4]
   316d8:	ab09      	add	r3, sp, #36	; 0x24
   316da:	ed9d 0b04 	vldr	d0, [sp, #16]
   316de:	9300      	str	r3, [sp, #0]
   316e0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   316e4:	f007 fce6 	bl	390b4 <__cvt>
   316e8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
   316ec:	4680      	mov	r8, r0
   316ee:	9909      	ldr	r1, [sp, #36]	; 0x24
   316f0:	d108      	bne.n	31704 <_printf_float+0x134>
   316f2:	1cc8      	adds	r0, r1, #3
   316f4:	db02      	blt.n	316fc <_printf_float+0x12c>
   316f6:	6863      	ldr	r3, [r4, #4]
   316f8:	4299      	cmp	r1, r3
   316fa:	dd41      	ble.n	31780 <_printf_float+0x1b0>
   316fc:	f1aa 0a02 	sub.w	sl, sl, #2
   31700:	fa5f fa8a 	uxtb.w	sl, sl
   31704:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   31708:	d820      	bhi.n	3174c <_printf_float+0x17c>
   3170a:	3901      	subs	r1, #1
   3170c:	4652      	mov	r2, sl
   3170e:	f104 0050 	add.w	r0, r4, #80	; 0x50
   31712:	9109      	str	r1, [sp, #36]	; 0x24
   31714:	f007 fd2b 	bl	3916e <__exponent>
   31718:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   3171a:	4681      	mov	r9, r0
   3171c:	1813      	adds	r3, r2, r0
   3171e:	2a01      	cmp	r2, #1
   31720:	6123      	str	r3, [r4, #16]
   31722:	dc02      	bgt.n	3172a <_printf_float+0x15a>
   31724:	6822      	ldr	r2, [r4, #0]
   31726:	07d2      	lsls	r2, r2, #31
   31728:	d501      	bpl.n	3172e <_printf_float+0x15e>
   3172a:	3301      	adds	r3, #1
   3172c:	6123      	str	r3, [r4, #16]
   3172e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   31732:	2b00      	cmp	r3, #0
   31734:	d0a0      	beq.n	31678 <_printf_float+0xa8>
   31736:	232d      	movs	r3, #45	; 0x2d
   31738:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3173c:	e79c      	b.n	31678 <_printf_float+0xa8>
   3173e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
   31742:	d1bf      	bne.n	316c4 <_printf_float+0xf4>
   31744:	2b00      	cmp	r3, #0
   31746:	d1bd      	bne.n	316c4 <_printf_float+0xf4>
   31748:	2301      	movs	r3, #1
   3174a:	e7ba      	b.n	316c2 <_printf_float+0xf2>
   3174c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
   31750:	d118      	bne.n	31784 <_printf_float+0x1b4>
   31752:	2900      	cmp	r1, #0
   31754:	6863      	ldr	r3, [r4, #4]
   31756:	dd0b      	ble.n	31770 <_printf_float+0x1a0>
   31758:	6121      	str	r1, [r4, #16]
   3175a:	b913      	cbnz	r3, 31762 <_printf_float+0x192>
   3175c:	6822      	ldr	r2, [r4, #0]
   3175e:	07d0      	lsls	r0, r2, #31
   31760:	d502      	bpl.n	31768 <_printf_float+0x198>
   31762:	3301      	adds	r3, #1
   31764:	440b      	add	r3, r1
   31766:	6123      	str	r3, [r4, #16]
   31768:	65a1      	str	r1, [r4, #88]	; 0x58
   3176a:	f04f 0900 	mov.w	r9, #0
   3176e:	e7de      	b.n	3172e <_printf_float+0x15e>
   31770:	b913      	cbnz	r3, 31778 <_printf_float+0x1a8>
   31772:	6822      	ldr	r2, [r4, #0]
   31774:	07d2      	lsls	r2, r2, #31
   31776:	d501      	bpl.n	3177c <_printf_float+0x1ac>
   31778:	3302      	adds	r3, #2
   3177a:	e7f4      	b.n	31766 <_printf_float+0x196>
   3177c:	2301      	movs	r3, #1
   3177e:	e7f2      	b.n	31766 <_printf_float+0x196>
   31780:	f04f 0a67 	mov.w	sl, #103	; 0x67
   31784:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   31786:	4299      	cmp	r1, r3
   31788:	db05      	blt.n	31796 <_printf_float+0x1c6>
   3178a:	6823      	ldr	r3, [r4, #0]
   3178c:	6121      	str	r1, [r4, #16]
   3178e:	07d8      	lsls	r0, r3, #31
   31790:	d5ea      	bpl.n	31768 <_printf_float+0x198>
   31792:	1c4b      	adds	r3, r1, #1
   31794:	e7e7      	b.n	31766 <_printf_float+0x196>
   31796:	2900      	cmp	r1, #0
   31798:	bfd4      	ite	le
   3179a:	f1c1 0202 	rsble	r2, r1, #2
   3179e:	2201      	movgt	r2, #1
   317a0:	4413      	add	r3, r2
   317a2:	e7e0      	b.n	31766 <_printf_float+0x196>
   317a4:	6823      	ldr	r3, [r4, #0]
   317a6:	055a      	lsls	r2, r3, #21
   317a8:	d407      	bmi.n	317ba <_printf_float+0x1ea>
   317aa:	6923      	ldr	r3, [r4, #16]
   317ac:	4642      	mov	r2, r8
   317ae:	4631      	mov	r1, r6
   317b0:	4628      	mov	r0, r5
   317b2:	47b8      	blx	r7
   317b4:	3001      	adds	r0, #1
   317b6:	d12b      	bne.n	31810 <_printf_float+0x240>
   317b8:	e768      	b.n	3168c <_printf_float+0xbc>
   317ba:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   317be:	f240 80dc 	bls.w	3197a <_printf_float+0x3aa>
   317c2:	2200      	movs	r2, #0
   317c4:	2300      	movs	r3, #0
   317c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   317ca:	f7db fed7 	bl	d57c <__aeabi_dcmpeq>
   317ce:	2800      	cmp	r0, #0
   317d0:	d033      	beq.n	3183a <_printf_float+0x26a>
   317d2:	2301      	movs	r3, #1
   317d4:	4a41      	ldr	r2, [pc, #260]	; (318dc <_printf_float+0x30c>)
   317d6:	4631      	mov	r1, r6
   317d8:	4628      	mov	r0, r5
   317da:	47b8      	blx	r7
   317dc:	3001      	adds	r0, #1
   317de:	f43f af55 	beq.w	3168c <_printf_float+0xbc>
   317e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   317e6:	429a      	cmp	r2, r3
   317e8:	db02      	blt.n	317f0 <_printf_float+0x220>
   317ea:	6823      	ldr	r3, [r4, #0]
   317ec:	07d8      	lsls	r0, r3, #31
   317ee:	d50f      	bpl.n	31810 <_printf_float+0x240>
   317f0:	4631      	mov	r1, r6
   317f2:	4628      	mov	r0, r5
   317f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   317f8:	47b8      	blx	r7
   317fa:	3001      	adds	r0, #1
   317fc:	f43f af46 	beq.w	3168c <_printf_float+0xbc>
   31800:	f04f 0800 	mov.w	r8, #0
   31804:	f104 091a 	add.w	r9, r4, #26
   31808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3180a:	3b01      	subs	r3, #1
   3180c:	4543      	cmp	r3, r8
   3180e:	dc09      	bgt.n	31824 <_printf_float+0x254>
   31810:	6823      	ldr	r3, [r4, #0]
   31812:	079b      	lsls	r3, r3, #30
   31814:	f100 8101 	bmi.w	31a1a <_printf_float+0x44a>
   31818:	68e0      	ldr	r0, [r4, #12]
   3181a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   3181c:	4298      	cmp	r0, r3
   3181e:	bfb8      	it	lt
   31820:	4618      	movlt	r0, r3
   31822:	e735      	b.n	31690 <_printf_float+0xc0>
   31824:	2301      	movs	r3, #1
   31826:	464a      	mov	r2, r9
   31828:	4631      	mov	r1, r6
   3182a:	4628      	mov	r0, r5
   3182c:	47b8      	blx	r7
   3182e:	3001      	adds	r0, #1
   31830:	f43f af2c 	beq.w	3168c <_printf_float+0xbc>
   31834:	f108 0801 	add.w	r8, r8, #1
   31838:	e7e6      	b.n	31808 <_printf_float+0x238>
   3183a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3183c:	2b00      	cmp	r3, #0
   3183e:	dc2b      	bgt.n	31898 <_printf_float+0x2c8>
   31840:	2301      	movs	r3, #1
   31842:	4a26      	ldr	r2, [pc, #152]	; (318dc <_printf_float+0x30c>)
   31844:	4631      	mov	r1, r6
   31846:	4628      	mov	r0, r5
   31848:	47b8      	blx	r7
   3184a:	3001      	adds	r0, #1
   3184c:	f43f af1e 	beq.w	3168c <_printf_float+0xbc>
   31850:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   31854:	4313      	orrs	r3, r2
   31856:	d102      	bne.n	3185e <_printf_float+0x28e>
   31858:	6823      	ldr	r3, [r4, #0]
   3185a:	07d9      	lsls	r1, r3, #31
   3185c:	d5d8      	bpl.n	31810 <_printf_float+0x240>
   3185e:	4631      	mov	r1, r6
   31860:	4628      	mov	r0, r5
   31862:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   31866:	47b8      	blx	r7
   31868:	3001      	adds	r0, #1
   3186a:	f43f af0f 	beq.w	3168c <_printf_float+0xbc>
   3186e:	f04f 0900 	mov.w	r9, #0
   31872:	f104 0a1a 	add.w	sl, r4, #26
   31876:	9b09      	ldr	r3, [sp, #36]	; 0x24
   31878:	425b      	negs	r3, r3
   3187a:	454b      	cmp	r3, r9
   3187c:	dc01      	bgt.n	31882 <_printf_float+0x2b2>
   3187e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   31880:	e794      	b.n	317ac <_printf_float+0x1dc>
   31882:	2301      	movs	r3, #1
   31884:	4652      	mov	r2, sl
   31886:	4631      	mov	r1, r6
   31888:	4628      	mov	r0, r5
   3188a:	47b8      	blx	r7
   3188c:	3001      	adds	r0, #1
   3188e:	f43f aefd 	beq.w	3168c <_printf_float+0xbc>
   31892:	f109 0901 	add.w	r9, r9, #1
   31896:	e7ee      	b.n	31876 <_printf_float+0x2a6>
   31898:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   3189a:	6da3      	ldr	r3, [r4, #88]	; 0x58
   3189c:	429a      	cmp	r2, r3
   3189e:	bfa8      	it	ge
   318a0:	461a      	movge	r2, r3
   318a2:	2a00      	cmp	r2, #0
   318a4:	4691      	mov	r9, r2
   318a6:	dd07      	ble.n	318b8 <_printf_float+0x2e8>
   318a8:	4613      	mov	r3, r2
   318aa:	4631      	mov	r1, r6
   318ac:	4642      	mov	r2, r8
   318ae:	4628      	mov	r0, r5
   318b0:	47b8      	blx	r7
   318b2:	3001      	adds	r0, #1
   318b4:	f43f aeea 	beq.w	3168c <_printf_float+0xbc>
   318b8:	f104 031a 	add.w	r3, r4, #26
   318bc:	f04f 0b00 	mov.w	fp, #0
   318c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   318c4:	9304      	str	r3, [sp, #16]
   318c6:	e015      	b.n	318f4 <_printf_float+0x324>
   318c8:	7fefffff 	.word	0x7fefffff
   318cc:	0004028d 	.word	0x0004028d
   318d0:	0003cadf 	.word	0x0003cadf
   318d4:	00040291 	.word	0x00040291
   318d8:	00040295 	.word	0x00040295
   318dc:	0003fd2f 	.word	0x0003fd2f
   318e0:	2301      	movs	r3, #1
   318e2:	9a04      	ldr	r2, [sp, #16]
   318e4:	4631      	mov	r1, r6
   318e6:	4628      	mov	r0, r5
   318e8:	47b8      	blx	r7
   318ea:	3001      	adds	r0, #1
   318ec:	f43f aece 	beq.w	3168c <_printf_float+0xbc>
   318f0:	f10b 0b01 	add.w	fp, fp, #1
   318f4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
   318f8:	ebaa 0309 	sub.w	r3, sl, r9
   318fc:	455b      	cmp	r3, fp
   318fe:	dcef      	bgt.n	318e0 <_printf_float+0x310>
   31900:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   31904:	429a      	cmp	r2, r3
   31906:	db1b      	blt.n	31940 <_printf_float+0x370>
   31908:	6823      	ldr	r3, [r4, #0]
   3190a:	07da      	lsls	r2, r3, #31
   3190c:	d418      	bmi.n	31940 <_printf_float+0x370>
   3190e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   31912:	4592      	cmp	sl, r2
   31914:	db1c      	blt.n	31950 <_printf_float+0x380>
   31916:	eba3 090a 	sub.w	r9, r3, sl
   3191a:	f1b9 0f00 	cmp.w	r9, #0
   3191e:	dd08      	ble.n	31932 <_printf_float+0x362>
   31920:	464b      	mov	r3, r9
   31922:	eb08 020a 	add.w	r2, r8, sl
   31926:	4631      	mov	r1, r6
   31928:	4628      	mov	r0, r5
   3192a:	47b8      	blx	r7
   3192c:	3001      	adds	r0, #1
   3192e:	f43f aead 	beq.w	3168c <_printf_float+0xbc>
   31932:	f04f 0800 	mov.w	r8, #0
   31936:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   3193a:	f104 0a1a 	add.w	sl, r4, #26
   3193e:	e014      	b.n	3196a <_printf_float+0x39a>
   31940:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   31944:	4631      	mov	r1, r6
   31946:	4628      	mov	r0, r5
   31948:	47b8      	blx	r7
   3194a:	3001      	adds	r0, #1
   3194c:	d1df      	bne.n	3190e <_printf_float+0x33e>
   3194e:	e69d      	b.n	3168c <_printf_float+0xbc>
   31950:	eba3 0902 	sub.w	r9, r3, r2
   31954:	e7e1      	b.n	3191a <_printf_float+0x34a>
   31956:	2301      	movs	r3, #1
   31958:	4652      	mov	r2, sl
   3195a:	4631      	mov	r1, r6
   3195c:	4628      	mov	r0, r5
   3195e:	47b8      	blx	r7
   31960:	3001      	adds	r0, #1
   31962:	f43f ae93 	beq.w	3168c <_printf_float+0xbc>
   31966:	f108 0801 	add.w	r8, r8, #1
   3196a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   3196e:	1a9b      	subs	r3, r3, r2
   31970:	eba3 0309 	sub.w	r3, r3, r9
   31974:	4543      	cmp	r3, r8
   31976:	dcee      	bgt.n	31956 <_printf_float+0x386>
   31978:	e74a      	b.n	31810 <_printf_float+0x240>
   3197a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   3197c:	2a01      	cmp	r2, #1
   3197e:	dc01      	bgt.n	31984 <_printf_float+0x3b4>
   31980:	07db      	lsls	r3, r3, #31
   31982:	d537      	bpl.n	319f4 <_printf_float+0x424>
   31984:	2301      	movs	r3, #1
   31986:	4642      	mov	r2, r8
   31988:	4631      	mov	r1, r6
   3198a:	4628      	mov	r0, r5
   3198c:	47b8      	blx	r7
   3198e:	3001      	adds	r0, #1
   31990:	f43f ae7c 	beq.w	3168c <_printf_float+0xbc>
   31994:	4631      	mov	r1, r6
   31996:	4628      	mov	r0, r5
   31998:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   3199c:	47b8      	blx	r7
   3199e:	3001      	adds	r0, #1
   319a0:	f43f ae74 	beq.w	3168c <_printf_float+0xbc>
   319a4:	2200      	movs	r2, #0
   319a6:	2300      	movs	r3, #0
   319a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   319ac:	f7db fde6 	bl	d57c <__aeabi_dcmpeq>
   319b0:	b9d8      	cbnz	r0, 319ea <_printf_float+0x41a>
   319b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   319b4:	f108 0201 	add.w	r2, r8, #1
   319b8:	3b01      	subs	r3, #1
   319ba:	4631      	mov	r1, r6
   319bc:	4628      	mov	r0, r5
   319be:	47b8      	blx	r7
   319c0:	3001      	adds	r0, #1
   319c2:	d10e      	bne.n	319e2 <_printf_float+0x412>
   319c4:	e662      	b.n	3168c <_printf_float+0xbc>
   319c6:	2301      	movs	r3, #1
   319c8:	4652      	mov	r2, sl
   319ca:	4631      	mov	r1, r6
   319cc:	4628      	mov	r0, r5
   319ce:	47b8      	blx	r7
   319d0:	3001      	adds	r0, #1
   319d2:	f43f ae5b 	beq.w	3168c <_printf_float+0xbc>
   319d6:	f108 0801 	add.w	r8, r8, #1
   319da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   319dc:	3b01      	subs	r3, #1
   319de:	4543      	cmp	r3, r8
   319e0:	dcf1      	bgt.n	319c6 <_printf_float+0x3f6>
   319e2:	464b      	mov	r3, r9
   319e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
   319e8:	e6e1      	b.n	317ae <_printf_float+0x1de>
   319ea:	f04f 0800 	mov.w	r8, #0
   319ee:	f104 0a1a 	add.w	sl, r4, #26
   319f2:	e7f2      	b.n	319da <_printf_float+0x40a>
   319f4:	2301      	movs	r3, #1
   319f6:	4642      	mov	r2, r8
   319f8:	e7df      	b.n	319ba <_printf_float+0x3ea>
   319fa:	2301      	movs	r3, #1
   319fc:	464a      	mov	r2, r9
   319fe:	4631      	mov	r1, r6
   31a00:	4628      	mov	r0, r5
   31a02:	47b8      	blx	r7
   31a04:	3001      	adds	r0, #1
   31a06:	f43f ae41 	beq.w	3168c <_printf_float+0xbc>
   31a0a:	f108 0801 	add.w	r8, r8, #1
   31a0e:	68e3      	ldr	r3, [r4, #12]
   31a10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   31a12:	1a9b      	subs	r3, r3, r2
   31a14:	4543      	cmp	r3, r8
   31a16:	dcf0      	bgt.n	319fa <_printf_float+0x42a>
   31a18:	e6fe      	b.n	31818 <_printf_float+0x248>
   31a1a:	f04f 0800 	mov.w	r8, #0
   31a1e:	f104 0919 	add.w	r9, r4, #25
   31a22:	e7f4      	b.n	31a0e <_printf_float+0x43e>

00031a24 <_printf_i>:
   31a24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   31a28:	4606      	mov	r6, r0
   31a2a:	460c      	mov	r4, r1
   31a2c:	f101 0043 	add.w	r0, r1, #67	; 0x43
   31a30:	7e09      	ldrb	r1, [r1, #24]
   31a32:	b085      	sub	sp, #20
   31a34:	4698      	mov	r8, r3
   31a36:	296e      	cmp	r1, #110	; 0x6e
   31a38:	4617      	mov	r7, r2
   31a3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   31a3c:	f000 80ba 	beq.w	31bb4 <_printf_i+0x190>
   31a40:	d824      	bhi.n	31a8c <_printf_i+0x68>
   31a42:	2963      	cmp	r1, #99	; 0x63
   31a44:	d039      	beq.n	31aba <_printf_i+0x96>
   31a46:	d80a      	bhi.n	31a5e <_printf_i+0x3a>
   31a48:	2900      	cmp	r1, #0
   31a4a:	f000 80c3 	beq.w	31bd4 <_printf_i+0x1b0>
   31a4e:	2958      	cmp	r1, #88	; 0x58
   31a50:	f000 8091 	beq.w	31b76 <_printf_i+0x152>
   31a54:	f104 0542 	add.w	r5, r4, #66	; 0x42
   31a58:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
   31a5c:	e035      	b.n	31aca <_printf_i+0xa6>
   31a5e:	2964      	cmp	r1, #100	; 0x64
   31a60:	d001      	beq.n	31a66 <_printf_i+0x42>
   31a62:	2969      	cmp	r1, #105	; 0x69
   31a64:	d1f6      	bne.n	31a54 <_printf_i+0x30>
   31a66:	6825      	ldr	r5, [r4, #0]
   31a68:	681a      	ldr	r2, [r3, #0]
   31a6a:	f015 0f80 	tst.w	r5, #128	; 0x80
   31a6e:	f102 0104 	add.w	r1, r2, #4
   31a72:	d02c      	beq.n	31ace <_printf_i+0xaa>
   31a74:	6812      	ldr	r2, [r2, #0]
   31a76:	6019      	str	r1, [r3, #0]
   31a78:	2a00      	cmp	r2, #0
   31a7a:	da03      	bge.n	31a84 <_printf_i+0x60>
   31a7c:	232d      	movs	r3, #45	; 0x2d
   31a7e:	4252      	negs	r2, r2
   31a80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   31a84:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 31c44 <_printf_i+0x220>
   31a88:	230a      	movs	r3, #10
   31a8a:	e03f      	b.n	31b0c <_printf_i+0xe8>
   31a8c:	2973      	cmp	r1, #115	; 0x73
   31a8e:	f000 80a5 	beq.w	31bdc <_printf_i+0x1b8>
   31a92:	d808      	bhi.n	31aa6 <_printf_i+0x82>
   31a94:	296f      	cmp	r1, #111	; 0x6f
   31a96:	d021      	beq.n	31adc <_printf_i+0xb8>
   31a98:	2970      	cmp	r1, #112	; 0x70
   31a9a:	d1db      	bne.n	31a54 <_printf_i+0x30>
   31a9c:	6822      	ldr	r2, [r4, #0]
   31a9e:	f042 0220 	orr.w	r2, r2, #32
   31aa2:	6022      	str	r2, [r4, #0]
   31aa4:	e003      	b.n	31aae <_printf_i+0x8a>
   31aa6:	2975      	cmp	r1, #117	; 0x75
   31aa8:	d018      	beq.n	31adc <_printf_i+0xb8>
   31aaa:	2978      	cmp	r1, #120	; 0x78
   31aac:	d1d2      	bne.n	31a54 <_printf_i+0x30>
   31aae:	2278      	movs	r2, #120	; 0x78
   31ab0:	f8df c194 	ldr.w	ip, [pc, #404]	; 31c48 <_printf_i+0x224>
   31ab4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
   31ab8:	e061      	b.n	31b7e <_printf_i+0x15a>
   31aba:	681a      	ldr	r2, [r3, #0]
   31abc:	f104 0542 	add.w	r5, r4, #66	; 0x42
   31ac0:	1d11      	adds	r1, r2, #4
   31ac2:	6019      	str	r1, [r3, #0]
   31ac4:	6813      	ldr	r3, [r2, #0]
   31ac6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   31aca:	2301      	movs	r3, #1
   31acc:	e093      	b.n	31bf6 <_printf_i+0x1d2>
   31ace:	6812      	ldr	r2, [r2, #0]
   31ad0:	f015 0f40 	tst.w	r5, #64	; 0x40
   31ad4:	6019      	str	r1, [r3, #0]
   31ad6:	bf18      	it	ne
   31ad8:	b212      	sxthne	r2, r2
   31ada:	e7cd      	b.n	31a78 <_printf_i+0x54>
   31adc:	f8d4 c000 	ldr.w	ip, [r4]
   31ae0:	681a      	ldr	r2, [r3, #0]
   31ae2:	f01c 0f80 	tst.w	ip, #128	; 0x80
   31ae6:	f102 0504 	add.w	r5, r2, #4
   31aea:	601d      	str	r5, [r3, #0]
   31aec:	d001      	beq.n	31af2 <_printf_i+0xce>
   31aee:	6812      	ldr	r2, [r2, #0]
   31af0:	e003      	b.n	31afa <_printf_i+0xd6>
   31af2:	f01c 0f40 	tst.w	ip, #64	; 0x40
   31af6:	d0fa      	beq.n	31aee <_printf_i+0xca>
   31af8:	8812      	ldrh	r2, [r2, #0]
   31afa:	296f      	cmp	r1, #111	; 0x6f
   31afc:	f8df c144 	ldr.w	ip, [pc, #324]	; 31c44 <_printf_i+0x220>
   31b00:	bf0c      	ite	eq
   31b02:	2308      	moveq	r3, #8
   31b04:	230a      	movne	r3, #10
   31b06:	2100      	movs	r1, #0
   31b08:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   31b0c:	6865      	ldr	r5, [r4, #4]
   31b0e:	2d00      	cmp	r5, #0
   31b10:	60a5      	str	r5, [r4, #8]
   31b12:	bfa2      	ittt	ge
   31b14:	6821      	ldrge	r1, [r4, #0]
   31b16:	f021 0104 	bicge.w	r1, r1, #4
   31b1a:	6021      	strge	r1, [r4, #0]
   31b1c:	b90a      	cbnz	r2, 31b22 <_printf_i+0xfe>
   31b1e:	2d00      	cmp	r5, #0
   31b20:	d046      	beq.n	31bb0 <_printf_i+0x18c>
   31b22:	4605      	mov	r5, r0
   31b24:	4293      	cmp	r3, r2
   31b26:	fbb2 f1f3 	udiv	r1, r2, r3
   31b2a:	fb03 2e11 	mls	lr, r3, r1, r2
   31b2e:	f81c e00e 	ldrb.w	lr, [ip, lr]
   31b32:	f805 ed01 	strb.w	lr, [r5, #-1]!
   31b36:	d939      	bls.n	31bac <_printf_i+0x188>
   31b38:	2b08      	cmp	r3, #8
   31b3a:	d10b      	bne.n	31b54 <_printf_i+0x130>
   31b3c:	6823      	ldr	r3, [r4, #0]
   31b3e:	07da      	lsls	r2, r3, #31
   31b40:	d508      	bpl.n	31b54 <_printf_i+0x130>
   31b42:	6923      	ldr	r3, [r4, #16]
   31b44:	6862      	ldr	r2, [r4, #4]
   31b46:	429a      	cmp	r2, r3
   31b48:	bfde      	ittt	le
   31b4a:	2330      	movle	r3, #48	; 0x30
   31b4c:	f805 3c01 	strble.w	r3, [r5, #-1]
   31b50:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
   31b54:	1b40      	subs	r0, r0, r5
   31b56:	6120      	str	r0, [r4, #16]
   31b58:	f8cd 8000 	str.w	r8, [sp]
   31b5c:	463b      	mov	r3, r7
   31b5e:	aa03      	add	r2, sp, #12
   31b60:	4621      	mov	r1, r4
   31b62:	4630      	mov	r0, r6
   31b64:	f007 fb36 	bl	391d4 <_printf_common>
   31b68:	3001      	adds	r0, #1
   31b6a:	d149      	bne.n	31c00 <_printf_i+0x1dc>
   31b6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   31b70:	b005      	add	sp, #20
   31b72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   31b76:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 31c44 <_printf_i+0x220>
   31b7a:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
   31b7e:	681d      	ldr	r5, [r3, #0]
   31b80:	6821      	ldr	r1, [r4, #0]
   31b82:	f855 2b04 	ldr.w	r2, [r5], #4
   31b86:	601d      	str	r5, [r3, #0]
   31b88:	060d      	lsls	r5, r1, #24
   31b8a:	d50b      	bpl.n	31ba4 <_printf_i+0x180>
   31b8c:	07cd      	lsls	r5, r1, #31
   31b8e:	bf44      	itt	mi
   31b90:	f041 0120 	orrmi.w	r1, r1, #32
   31b94:	6021      	strmi	r1, [r4, #0]
   31b96:	b91a      	cbnz	r2, 31ba0 <_printf_i+0x17c>
   31b98:	6823      	ldr	r3, [r4, #0]
   31b9a:	f023 0320 	bic.w	r3, r3, #32
   31b9e:	6023      	str	r3, [r4, #0]
   31ba0:	2310      	movs	r3, #16
   31ba2:	e7b0      	b.n	31b06 <_printf_i+0xe2>
   31ba4:	064b      	lsls	r3, r1, #25
   31ba6:	bf48      	it	mi
   31ba8:	b292      	uxthmi	r2, r2
   31baa:	e7ef      	b.n	31b8c <_printf_i+0x168>
   31bac:	460a      	mov	r2, r1
   31bae:	e7b9      	b.n	31b24 <_printf_i+0x100>
   31bb0:	4605      	mov	r5, r0
   31bb2:	e7c1      	b.n	31b38 <_printf_i+0x114>
   31bb4:	681a      	ldr	r2, [r3, #0]
   31bb6:	f8d4 c000 	ldr.w	ip, [r4]
   31bba:	1d15      	adds	r5, r2, #4
   31bbc:	6961      	ldr	r1, [r4, #20]
   31bbe:	f01c 0f80 	tst.w	ip, #128	; 0x80
   31bc2:	601d      	str	r5, [r3, #0]
   31bc4:	6813      	ldr	r3, [r2, #0]
   31bc6:	d001      	beq.n	31bcc <_printf_i+0x1a8>
   31bc8:	6019      	str	r1, [r3, #0]
   31bca:	e003      	b.n	31bd4 <_printf_i+0x1b0>
   31bcc:	f01c 0f40 	tst.w	ip, #64	; 0x40
   31bd0:	d0fa      	beq.n	31bc8 <_printf_i+0x1a4>
   31bd2:	8019      	strh	r1, [r3, #0]
   31bd4:	2300      	movs	r3, #0
   31bd6:	4605      	mov	r5, r0
   31bd8:	6123      	str	r3, [r4, #16]
   31bda:	e7bd      	b.n	31b58 <_printf_i+0x134>
   31bdc:	681a      	ldr	r2, [r3, #0]
   31bde:	1d11      	adds	r1, r2, #4
   31be0:	6019      	str	r1, [r3, #0]
   31be2:	2100      	movs	r1, #0
   31be4:	6815      	ldr	r5, [r2, #0]
   31be6:	6862      	ldr	r2, [r4, #4]
   31be8:	4628      	mov	r0, r5
   31bea:	f007 f9ce 	bl	38f8a <memchr>
   31bee:	b108      	cbz	r0, 31bf4 <_printf_i+0x1d0>
   31bf0:	1b40      	subs	r0, r0, r5
   31bf2:	6060      	str	r0, [r4, #4]
   31bf4:	6863      	ldr	r3, [r4, #4]
   31bf6:	6123      	str	r3, [r4, #16]
   31bf8:	2300      	movs	r3, #0
   31bfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   31bfe:	e7ab      	b.n	31b58 <_printf_i+0x134>
   31c00:	6923      	ldr	r3, [r4, #16]
   31c02:	462a      	mov	r2, r5
   31c04:	4639      	mov	r1, r7
   31c06:	4630      	mov	r0, r6
   31c08:	47c0      	blx	r8
   31c0a:	3001      	adds	r0, #1
   31c0c:	d0ae      	beq.n	31b6c <_printf_i+0x148>
   31c0e:	6823      	ldr	r3, [r4, #0]
   31c10:	079b      	lsls	r3, r3, #30
   31c12:	d413      	bmi.n	31c3c <_printf_i+0x218>
   31c14:	68e0      	ldr	r0, [r4, #12]
   31c16:	9b03      	ldr	r3, [sp, #12]
   31c18:	4298      	cmp	r0, r3
   31c1a:	bfb8      	it	lt
   31c1c:	4618      	movlt	r0, r3
   31c1e:	e7a7      	b.n	31b70 <_printf_i+0x14c>
   31c20:	2301      	movs	r3, #1
   31c22:	464a      	mov	r2, r9
   31c24:	4639      	mov	r1, r7
   31c26:	4630      	mov	r0, r6
   31c28:	47c0      	blx	r8
   31c2a:	3001      	adds	r0, #1
   31c2c:	d09e      	beq.n	31b6c <_printf_i+0x148>
   31c2e:	3501      	adds	r5, #1
   31c30:	68e3      	ldr	r3, [r4, #12]
   31c32:	9a03      	ldr	r2, [sp, #12]
   31c34:	1a9b      	subs	r3, r3, r2
   31c36:	42ab      	cmp	r3, r5
   31c38:	dcf2      	bgt.n	31c20 <_printf_i+0x1fc>
   31c3a:	e7eb      	b.n	31c14 <_printf_i+0x1f0>
   31c3c:	2500      	movs	r5, #0
   31c3e:	f104 0919 	add.w	r9, r4, #25
   31c42:	e7f5      	b.n	31c30 <_printf_i+0x20c>
   31c44:	00040299 	.word	0x00040299
   31c48:	000402aa 	.word	0x000402aa

00031c4c <_sbrk_r>:
   31c4c:	b538      	push	{r3, r4, r5, lr}
   31c4e:	2300      	movs	r3, #0
   31c50:	4c05      	ldr	r4, [pc, #20]	; (31c68 <_sbrk_r+0x1c>)
   31c52:	4605      	mov	r5, r0
   31c54:	4608      	mov	r0, r1
   31c56:	6023      	str	r3, [r4, #0]
   31c58:	f7e9 ff16 	bl	1ba88 <_sbrk>
   31c5c:	1c43      	adds	r3, r0, #1
   31c5e:	d102      	bne.n	31c66 <_sbrk_r+0x1a>
   31c60:	6823      	ldr	r3, [r4, #0]
   31c62:	b103      	cbz	r3, 31c66 <_sbrk_r+0x1a>
   31c64:	602b      	str	r3, [r5, #0]
   31c66:	bd38      	pop	{r3, r4, r5, pc}
   31c68:	200291f8 	.word	0x200291f8

00031c6c <sniprintf>:
   31c6c:	b40c      	push	{r2, r3}
   31c6e:	4b18      	ldr	r3, [pc, #96]	; (31cd0 <sniprintf+0x64>)
   31c70:	b530      	push	{r4, r5, lr}
   31c72:	1e0c      	subs	r4, r1, #0
   31c74:	b09d      	sub	sp, #116	; 0x74
   31c76:	681d      	ldr	r5, [r3, #0]
   31c78:	da08      	bge.n	31c8c <sniprintf+0x20>
   31c7a:	238b      	movs	r3, #139	; 0x8b
   31c7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   31c80:	602b      	str	r3, [r5, #0]
   31c82:	b01d      	add	sp, #116	; 0x74
   31c84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   31c88:	b002      	add	sp, #8
   31c8a:	4770      	bx	lr
   31c8c:	f44f 7302 	mov.w	r3, #520	; 0x208
   31c90:	9002      	str	r0, [sp, #8]
   31c92:	9006      	str	r0, [sp, #24]
   31c94:	a902      	add	r1, sp, #8
   31c96:	f8ad 3014 	strh.w	r3, [sp, #20]
   31c9a:	bf14      	ite	ne
   31c9c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
   31ca0:	4623      	moveq	r3, r4
   31ca2:	9a20      	ldr	r2, [sp, #128]	; 0x80
   31ca4:	4628      	mov	r0, r5
   31ca6:	9304      	str	r3, [sp, #16]
   31ca8:	9307      	str	r3, [sp, #28]
   31caa:	f64f 73ff 	movw	r3, #65535	; 0xffff
   31cae:	f8ad 3016 	strh.w	r3, [sp, #22]
   31cb2:	ab21      	add	r3, sp, #132	; 0x84
   31cb4:	9301      	str	r3, [sp, #4]
   31cb6:	f000 fe1f 	bl	328f8 <_svfiprintf_r>
   31cba:	1c43      	adds	r3, r0, #1
   31cbc:	bfbc      	itt	lt
   31cbe:	238b      	movlt	r3, #139	; 0x8b
   31cc0:	602b      	strlt	r3, [r5, #0]
   31cc2:	2c00      	cmp	r4, #0
   31cc4:	d0dd      	beq.n	31c82 <sniprintf+0x16>
   31cc6:	9b02      	ldr	r3, [sp, #8]
   31cc8:	2200      	movs	r2, #0
   31cca:	701a      	strb	r2, [r3, #0]
   31ccc:	e7d9      	b.n	31c82 <sniprintf+0x16>
   31cce:	bf00      	nop
   31cd0:	20020234 	.word	0x20020234

00031cd4 <siprintf>:
   31cd4:	b40e      	push	{r1, r2, r3}
   31cd6:	b500      	push	{lr}
   31cd8:	b09c      	sub	sp, #112	; 0x70
   31cda:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   31cde:	ab1d      	add	r3, sp, #116	; 0x74
   31ce0:	9002      	str	r0, [sp, #8]
   31ce2:	9006      	str	r0, [sp, #24]
   31ce4:	9107      	str	r1, [sp, #28]
   31ce6:	9104      	str	r1, [sp, #16]
   31ce8:	4808      	ldr	r0, [pc, #32]	; (31d0c <siprintf+0x38>)
   31cea:	4909      	ldr	r1, [pc, #36]	; (31d10 <siprintf+0x3c>)
   31cec:	f853 2b04 	ldr.w	r2, [r3], #4
   31cf0:	9105      	str	r1, [sp, #20]
   31cf2:	a902      	add	r1, sp, #8
   31cf4:	6800      	ldr	r0, [r0, #0]
   31cf6:	9301      	str	r3, [sp, #4]
   31cf8:	f000 fdfe 	bl	328f8 <_svfiprintf_r>
   31cfc:	9b02      	ldr	r3, [sp, #8]
   31cfe:	2200      	movs	r2, #0
   31d00:	701a      	strb	r2, [r3, #0]
   31d02:	b01c      	add	sp, #112	; 0x70
   31d04:	f85d eb04 	ldr.w	lr, [sp], #4
   31d08:	b003      	add	sp, #12
   31d0a:	4770      	bx	lr
   31d0c:	20020234 	.word	0x20020234
   31d10:	ffff0208 	.word	0xffff0208

00031d14 <_strerror_r>:
   31d14:	b510      	push	{r4, lr}
   31d16:	4604      	mov	r4, r0
   31d18:	4608      	mov	r0, r1
   31d1a:	4611      	mov	r1, r2
   31d1c:	288e      	cmp	r0, #142	; 0x8e
   31d1e:	f200 812f 	bhi.w	31f80 <_strerror_r+0x26c>
   31d22:	e8df f010 	tbh	[pc, r0, lsl #1]
   31d26:	0138      	.short	0x0138
   31d28:	0091008f 	.word	0x0091008f
   31d2c:	00950093 	.word	0x00950093
   31d30:	00990097 	.word	0x00990097
   31d34:	009d009b 	.word	0x009d009b
   31d38:	00a300a1 	.word	0x00a300a1
   31d3c:	00a900a7 	.word	0x00a900a7
   31d40:	00ad00ab 	.word	0x00ad00ab
   31d44:	00af012d 	.word	0x00af012d
   31d48:	00b300b1 	.word	0x00b300b1
   31d4c:	00b700b5 	.word	0x00b700b5
   31d50:	00bf00bd 	.word	0x00bf00bd
   31d54:	00c700c5 	.word	0x00c700c5
   31d58:	00cb00c9 	.word	0x00cb00c9
   31d5c:	00d100cd 	.word	0x00d100cd
   31d60:	00d700d5 	.word	0x00d700d5
   31d64:	00db00d9 	.word	0x00db00d9
   31d68:	00df00dd 	.word	0x00df00dd
   31d6c:	00e300e1 	.word	0x00e300e1
   31d70:	012d012d 	.word	0x012d012d
   31d74:	012d012d 	.word	0x012d012d
   31d78:	012d012d 	.word	0x012d012d
   31d7c:	012d012d 	.word	0x012d012d
   31d80:	00eb00e7 	.word	0x00eb00e7
   31d84:	012d012d 	.word	0x012d012d
   31d88:	012d012d 	.word	0x012d012d
   31d8c:	012d012d 	.word	0x012d012d
   31d90:	012d012d 	.word	0x012d012d
   31d94:	012d012d 	.word	0x012d012d
   31d98:	012d012d 	.word	0x012d012d
   31d9c:	00ed012d 	.word	0x00ed012d
   31da0:	00ef0107 	.word	0x00ef0107
   31da4:	012d00f1 	.word	0x012d00f1
   31da8:	012d012d 	.word	0x012d012d
   31dac:	012d00f3 	.word	0x012d00f3
   31db0:	012d012d 	.word	0x012d012d
   31db4:	012d00f5 	.word	0x012d00f5
   31db8:	00f9012d 	.word	0x00f9012d
   31dbc:	012d012d 	.word	0x012d012d
   31dc0:	012d00fb 	.word	0x012d00fb
   31dc4:	012d012d 	.word	0x012d012d
   31dc8:	012d012d 	.word	0x012d012d
   31dcc:	012d012d 	.word	0x012d012d
   31dd0:	012d012d 	.word	0x012d012d
   31dd4:	00fd012d 	.word	0x00fd012d
   31dd8:	00ff012d 	.word	0x00ff012d
   31ddc:	01030101 	.word	0x01030101
   31de0:	012d012d 	.word	0x012d012d
   31de4:	012d0125 	.word	0x012d0125
   31de8:	012d012d 	.word	0x012d012d
   31dec:	012d012d 	.word	0x012d012d
   31df0:	012d012d 	.word	0x012d012d
   31df4:	0113012d 	.word	0x0113012d
   31df8:	01090105 	.word	0x01090105
   31dfc:	010d010b 	.word	0x010d010b
   31e00:	012d010f 	.word	0x012d010f
   31e04:	01150111 	.word	0x01150111
   31e08:	00e90119 	.word	0x00e90119
   31e0c:	012b00c1 	.word	0x012b00c1
   31e10:	00cf00b9 	.word	0x00cf00b9
   31e14:	009f00bb 	.word	0x009f00bb
   31e18:	012900a5 	.word	0x012900a5
   31e1c:	012d00f7 	.word	0x012d00f7
   31e20:	00c30117 	.word	0x00c30117
   31e24:	011b011d 	.word	0x011b011d
   31e28:	012d012d 	.word	0x012d012d
   31e2c:	012d012d 	.word	0x012d012d
   31e30:	00d3012d 	.word	0x00d3012d
   31e34:	012d012d 	.word	0x012d012d
   31e38:	00e5012d 	.word	0x00e5012d
   31e3c:	011f0127 	.word	0x011f0127
   31e40:	01230121 	.word	0x01230121
   31e44:	4855      	ldr	r0, [pc, #340]	; (31f9c <_strerror_r+0x288>)
   31e46:	bd10      	pop	{r4, pc}
   31e48:	4855      	ldr	r0, [pc, #340]	; (31fa0 <_strerror_r+0x28c>)
   31e4a:	e7fc      	b.n	31e46 <_strerror_r+0x132>
   31e4c:	4855      	ldr	r0, [pc, #340]	; (31fa4 <_strerror_r+0x290>)
   31e4e:	e7fa      	b.n	31e46 <_strerror_r+0x132>
   31e50:	4855      	ldr	r0, [pc, #340]	; (31fa8 <_strerror_r+0x294>)
   31e52:	e7f8      	b.n	31e46 <_strerror_r+0x132>
   31e54:	4855      	ldr	r0, [pc, #340]	; (31fac <_strerror_r+0x298>)
   31e56:	e7f6      	b.n	31e46 <_strerror_r+0x132>
   31e58:	4855      	ldr	r0, [pc, #340]	; (31fb0 <_strerror_r+0x29c>)
   31e5a:	e7f4      	b.n	31e46 <_strerror_r+0x132>
   31e5c:	4855      	ldr	r0, [pc, #340]	; (31fb4 <_strerror_r+0x2a0>)
   31e5e:	e7f2      	b.n	31e46 <_strerror_r+0x132>
   31e60:	4855      	ldr	r0, [pc, #340]	; (31fb8 <_strerror_r+0x2a4>)
   31e62:	e7f0      	b.n	31e46 <_strerror_r+0x132>
   31e64:	4855      	ldr	r0, [pc, #340]	; (31fbc <_strerror_r+0x2a8>)
   31e66:	e7ee      	b.n	31e46 <_strerror_r+0x132>
   31e68:	4855      	ldr	r0, [pc, #340]	; (31fc0 <_strerror_r+0x2ac>)
   31e6a:	e7ec      	b.n	31e46 <_strerror_r+0x132>
   31e6c:	4855      	ldr	r0, [pc, #340]	; (31fc4 <_strerror_r+0x2b0>)
   31e6e:	e7ea      	b.n	31e46 <_strerror_r+0x132>
   31e70:	4855      	ldr	r0, [pc, #340]	; (31fc8 <_strerror_r+0x2b4>)
   31e72:	e7e8      	b.n	31e46 <_strerror_r+0x132>
   31e74:	4855      	ldr	r0, [pc, #340]	; (31fcc <_strerror_r+0x2b8>)
   31e76:	e7e6      	b.n	31e46 <_strerror_r+0x132>
   31e78:	4855      	ldr	r0, [pc, #340]	; (31fd0 <_strerror_r+0x2bc>)
   31e7a:	e7e4      	b.n	31e46 <_strerror_r+0x132>
   31e7c:	4855      	ldr	r0, [pc, #340]	; (31fd4 <_strerror_r+0x2c0>)
   31e7e:	e7e2      	b.n	31e46 <_strerror_r+0x132>
   31e80:	4855      	ldr	r0, [pc, #340]	; (31fd8 <_strerror_r+0x2c4>)
   31e82:	e7e0      	b.n	31e46 <_strerror_r+0x132>
   31e84:	4855      	ldr	r0, [pc, #340]	; (31fdc <_strerror_r+0x2c8>)
   31e86:	e7de      	b.n	31e46 <_strerror_r+0x132>
   31e88:	4855      	ldr	r0, [pc, #340]	; (31fe0 <_strerror_r+0x2cc>)
   31e8a:	e7dc      	b.n	31e46 <_strerror_r+0x132>
   31e8c:	4855      	ldr	r0, [pc, #340]	; (31fe4 <_strerror_r+0x2d0>)
   31e8e:	e7da      	b.n	31e46 <_strerror_r+0x132>
   31e90:	4855      	ldr	r0, [pc, #340]	; (31fe8 <_strerror_r+0x2d4>)
   31e92:	e7d8      	b.n	31e46 <_strerror_r+0x132>
   31e94:	4855      	ldr	r0, [pc, #340]	; (31fec <_strerror_r+0x2d8>)
   31e96:	e7d6      	b.n	31e46 <_strerror_r+0x132>
   31e98:	4855      	ldr	r0, [pc, #340]	; (31ff0 <_strerror_r+0x2dc>)
   31e9a:	e7d4      	b.n	31e46 <_strerror_r+0x132>
   31e9c:	4855      	ldr	r0, [pc, #340]	; (31ff4 <_strerror_r+0x2e0>)
   31e9e:	e7d2      	b.n	31e46 <_strerror_r+0x132>
   31ea0:	4855      	ldr	r0, [pc, #340]	; (31ff8 <_strerror_r+0x2e4>)
   31ea2:	e7d0      	b.n	31e46 <_strerror_r+0x132>
   31ea4:	4855      	ldr	r0, [pc, #340]	; (31ffc <_strerror_r+0x2e8>)
   31ea6:	e7ce      	b.n	31e46 <_strerror_r+0x132>
   31ea8:	4855      	ldr	r0, [pc, #340]	; (32000 <_strerror_r+0x2ec>)
   31eaa:	e7cc      	b.n	31e46 <_strerror_r+0x132>
   31eac:	4855      	ldr	r0, [pc, #340]	; (32004 <_strerror_r+0x2f0>)
   31eae:	e7ca      	b.n	31e46 <_strerror_r+0x132>
   31eb0:	4855      	ldr	r0, [pc, #340]	; (32008 <_strerror_r+0x2f4>)
   31eb2:	e7c8      	b.n	31e46 <_strerror_r+0x132>
   31eb4:	4855      	ldr	r0, [pc, #340]	; (3200c <_strerror_r+0x2f8>)
   31eb6:	e7c6      	b.n	31e46 <_strerror_r+0x132>
   31eb8:	4855      	ldr	r0, [pc, #340]	; (32010 <_strerror_r+0x2fc>)
   31eba:	e7c4      	b.n	31e46 <_strerror_r+0x132>
   31ebc:	4855      	ldr	r0, [pc, #340]	; (32014 <_strerror_r+0x300>)
   31ebe:	e7c2      	b.n	31e46 <_strerror_r+0x132>
   31ec0:	4855      	ldr	r0, [pc, #340]	; (32018 <_strerror_r+0x304>)
   31ec2:	e7c0      	b.n	31e46 <_strerror_r+0x132>
   31ec4:	4855      	ldr	r0, [pc, #340]	; (3201c <_strerror_r+0x308>)
   31ec6:	e7be      	b.n	31e46 <_strerror_r+0x132>
   31ec8:	4855      	ldr	r0, [pc, #340]	; (32020 <_strerror_r+0x30c>)
   31eca:	e7bc      	b.n	31e46 <_strerror_r+0x132>
   31ecc:	4855      	ldr	r0, [pc, #340]	; (32024 <_strerror_r+0x310>)
   31ece:	e7ba      	b.n	31e46 <_strerror_r+0x132>
   31ed0:	4855      	ldr	r0, [pc, #340]	; (32028 <_strerror_r+0x314>)
   31ed2:	e7b8      	b.n	31e46 <_strerror_r+0x132>
   31ed4:	4855      	ldr	r0, [pc, #340]	; (3202c <_strerror_r+0x318>)
   31ed6:	e7b6      	b.n	31e46 <_strerror_r+0x132>
   31ed8:	4855      	ldr	r0, [pc, #340]	; (32030 <_strerror_r+0x31c>)
   31eda:	e7b4      	b.n	31e46 <_strerror_r+0x132>
   31edc:	4855      	ldr	r0, [pc, #340]	; (32034 <_strerror_r+0x320>)
   31ede:	e7b2      	b.n	31e46 <_strerror_r+0x132>
   31ee0:	4855      	ldr	r0, [pc, #340]	; (32038 <_strerror_r+0x324>)
   31ee2:	e7b0      	b.n	31e46 <_strerror_r+0x132>
   31ee4:	4855      	ldr	r0, [pc, #340]	; (3203c <_strerror_r+0x328>)
   31ee6:	e7ae      	b.n	31e46 <_strerror_r+0x132>
   31ee8:	4855      	ldr	r0, [pc, #340]	; (32040 <_strerror_r+0x32c>)
   31eea:	e7ac      	b.n	31e46 <_strerror_r+0x132>
   31eec:	4855      	ldr	r0, [pc, #340]	; (32044 <_strerror_r+0x330>)
   31eee:	e7aa      	b.n	31e46 <_strerror_r+0x132>
   31ef0:	4855      	ldr	r0, [pc, #340]	; (32048 <_strerror_r+0x334>)
   31ef2:	e7a8      	b.n	31e46 <_strerror_r+0x132>
   31ef4:	4855      	ldr	r0, [pc, #340]	; (3204c <_strerror_r+0x338>)
   31ef6:	e7a6      	b.n	31e46 <_strerror_r+0x132>
   31ef8:	4855      	ldr	r0, [pc, #340]	; (32050 <_strerror_r+0x33c>)
   31efa:	e7a4      	b.n	31e46 <_strerror_r+0x132>
   31efc:	4855      	ldr	r0, [pc, #340]	; (32054 <_strerror_r+0x340>)
   31efe:	e7a2      	b.n	31e46 <_strerror_r+0x132>
   31f00:	4855      	ldr	r0, [pc, #340]	; (32058 <_strerror_r+0x344>)
   31f02:	e7a0      	b.n	31e46 <_strerror_r+0x132>
   31f04:	4855      	ldr	r0, [pc, #340]	; (3205c <_strerror_r+0x348>)
   31f06:	e79e      	b.n	31e46 <_strerror_r+0x132>
   31f08:	4855      	ldr	r0, [pc, #340]	; (32060 <_strerror_r+0x34c>)
   31f0a:	e79c      	b.n	31e46 <_strerror_r+0x132>
   31f0c:	4855      	ldr	r0, [pc, #340]	; (32064 <_strerror_r+0x350>)
   31f0e:	e79a      	b.n	31e46 <_strerror_r+0x132>
   31f10:	4855      	ldr	r0, [pc, #340]	; (32068 <_strerror_r+0x354>)
   31f12:	e798      	b.n	31e46 <_strerror_r+0x132>
   31f14:	4855      	ldr	r0, [pc, #340]	; (3206c <_strerror_r+0x358>)
   31f16:	e796      	b.n	31e46 <_strerror_r+0x132>
   31f18:	4855      	ldr	r0, [pc, #340]	; (32070 <_strerror_r+0x35c>)
   31f1a:	e794      	b.n	31e46 <_strerror_r+0x132>
   31f1c:	4855      	ldr	r0, [pc, #340]	; (32074 <_strerror_r+0x360>)
   31f1e:	e792      	b.n	31e46 <_strerror_r+0x132>
   31f20:	4855      	ldr	r0, [pc, #340]	; (32078 <_strerror_r+0x364>)
   31f22:	e790      	b.n	31e46 <_strerror_r+0x132>
   31f24:	4855      	ldr	r0, [pc, #340]	; (3207c <_strerror_r+0x368>)
   31f26:	e78e      	b.n	31e46 <_strerror_r+0x132>
   31f28:	4855      	ldr	r0, [pc, #340]	; (32080 <_strerror_r+0x36c>)
   31f2a:	e78c      	b.n	31e46 <_strerror_r+0x132>
   31f2c:	4855      	ldr	r0, [pc, #340]	; (32084 <_strerror_r+0x370>)
   31f2e:	e78a      	b.n	31e46 <_strerror_r+0x132>
   31f30:	4855      	ldr	r0, [pc, #340]	; (32088 <_strerror_r+0x374>)
   31f32:	e788      	b.n	31e46 <_strerror_r+0x132>
   31f34:	4855      	ldr	r0, [pc, #340]	; (3208c <_strerror_r+0x378>)
   31f36:	e786      	b.n	31e46 <_strerror_r+0x132>
   31f38:	4855      	ldr	r0, [pc, #340]	; (32090 <_strerror_r+0x37c>)
   31f3a:	e784      	b.n	31e46 <_strerror_r+0x132>
   31f3c:	4855      	ldr	r0, [pc, #340]	; (32094 <_strerror_r+0x380>)
   31f3e:	e782      	b.n	31e46 <_strerror_r+0x132>
   31f40:	4855      	ldr	r0, [pc, #340]	; (32098 <_strerror_r+0x384>)
   31f42:	e780      	b.n	31e46 <_strerror_r+0x132>
   31f44:	4855      	ldr	r0, [pc, #340]	; (3209c <_strerror_r+0x388>)
   31f46:	e77e      	b.n	31e46 <_strerror_r+0x132>
   31f48:	4855      	ldr	r0, [pc, #340]	; (320a0 <_strerror_r+0x38c>)
   31f4a:	e77c      	b.n	31e46 <_strerror_r+0x132>
   31f4c:	4855      	ldr	r0, [pc, #340]	; (320a4 <_strerror_r+0x390>)
   31f4e:	e77a      	b.n	31e46 <_strerror_r+0x132>
   31f50:	4855      	ldr	r0, [pc, #340]	; (320a8 <_strerror_r+0x394>)
   31f52:	e778      	b.n	31e46 <_strerror_r+0x132>
   31f54:	4855      	ldr	r0, [pc, #340]	; (320ac <_strerror_r+0x398>)
   31f56:	e776      	b.n	31e46 <_strerror_r+0x132>
   31f58:	4855      	ldr	r0, [pc, #340]	; (320b0 <_strerror_r+0x39c>)
   31f5a:	e774      	b.n	31e46 <_strerror_r+0x132>
   31f5c:	4855      	ldr	r0, [pc, #340]	; (320b4 <_strerror_r+0x3a0>)
   31f5e:	e772      	b.n	31e46 <_strerror_r+0x132>
   31f60:	4855      	ldr	r0, [pc, #340]	; (320b8 <_strerror_r+0x3a4>)
   31f62:	e770      	b.n	31e46 <_strerror_r+0x132>
   31f64:	4855      	ldr	r0, [pc, #340]	; (320bc <_strerror_r+0x3a8>)
   31f66:	e76e      	b.n	31e46 <_strerror_r+0x132>
   31f68:	4855      	ldr	r0, [pc, #340]	; (320c0 <_strerror_r+0x3ac>)
   31f6a:	e76c      	b.n	31e46 <_strerror_r+0x132>
   31f6c:	4855      	ldr	r0, [pc, #340]	; (320c4 <_strerror_r+0x3b0>)
   31f6e:	e76a      	b.n	31e46 <_strerror_r+0x132>
   31f70:	4855      	ldr	r0, [pc, #340]	; (320c8 <_strerror_r+0x3b4>)
   31f72:	e768      	b.n	31e46 <_strerror_r+0x132>
   31f74:	4855      	ldr	r0, [pc, #340]	; (320cc <_strerror_r+0x3b8>)
   31f76:	e766      	b.n	31e46 <_strerror_r+0x132>
   31f78:	4855      	ldr	r0, [pc, #340]	; (320d0 <_strerror_r+0x3bc>)
   31f7a:	e764      	b.n	31e46 <_strerror_r+0x132>
   31f7c:	4855      	ldr	r0, [pc, #340]	; (320d4 <_strerror_r+0x3c0>)
   31f7e:	e762      	b.n	31e46 <_strerror_r+0x132>
   31f80:	2b00      	cmp	r3, #0
   31f82:	bf14      	ite	ne
   31f84:	461a      	movne	r2, r3
   31f86:	4622      	moveq	r2, r4
   31f88:	f007 f9da 	bl	39340 <_user_strerror>
   31f8c:	4b52      	ldr	r3, [pc, #328]	; (320d8 <_strerror_r+0x3c4>)
   31f8e:	2800      	cmp	r0, #0
   31f90:	bf08      	it	eq
   31f92:	4618      	moveq	r0, r3
   31f94:	e757      	b.n	31e46 <_strerror_r+0x132>
   31f96:	4851      	ldr	r0, [pc, #324]	; (320dc <_strerror_r+0x3c8>)
   31f98:	e755      	b.n	31e46 <_strerror_r+0x132>
   31f9a:	bf00      	nop
   31f9c:	000402bb 	.word	0x000402bb
   31fa0:	000402c5 	.word	0x000402c5
   31fa4:	000402df 	.word	0x000402df
   31fa8:	000402ef 	.word	0x000402ef
   31fac:	00040307 	.word	0x00040307
   31fb0:	00040311 	.word	0x00040311
   31fb4:	0004032b 	.word	0x0004032b
   31fb8:	0004033d 	.word	0x0004033d
   31fbc:	0004034f 	.word	0x0004034f
   31fc0:	00040368 	.word	0x00040368
   31fc4:	00040378 	.word	0x00040378
   31fc8:	00040384 	.word	0x00040384
   31fcc:	000403a1 	.word	0x000403a1
   31fd0:	000403b3 	.word	0x000403b3
   31fd4:	000403c4 	.word	0x000403c4
   31fd8:	000403d6 	.word	0x000403d6
   31fdc:	000403e2 	.word	0x000403e2
   31fe0:	000403fa 	.word	0x000403fa
   31fe4:	00040406 	.word	0x00040406
   31fe8:	00040418 	.word	0x00040418
   31fec:	00040427 	.word	0x00040427
   31ff0:	00040437 	.word	0x00040437
   31ff4:	00040444 	.word	0x00040444
   31ff8:	00040463 	.word	0x00040463
   31ffc:	00040472 	.word	0x00040472
   32000:	00040483 	.word	0x00040483
   32004:	000404a7 	.word	0x000404a7
   32008:	000404c5 	.word	0x000404c5
   3200c:	000404e3 	.word	0x000404e3
   32010:	00040503 	.word	0x00040503
   32014:	0004051a 	.word	0x0004051a
   32018:	00040529 	.word	0x00040529
   3201c:	00040538 	.word	0x00040538
   32020:	0004054c 	.word	0x0004054c
   32024:	00040564 	.word	0x00040564
   32028:	00040572 	.word	0x00040572
   3202c:	0004057f 	.word	0x0004057f
   32030:	00040595 	.word	0x00040595
   32034:	000405a4 	.word	0x000405a4
   32038:	000405b0 	.word	0x000405b0
   3203c:	000405df 	.word	0x000405df
   32040:	000405f0 	.word	0x000405f0
   32044:	0004060b 	.word	0x0004060b
   32048:	0004061e 	.word	0x0004061e
   3204c:	00040634 	.word	0x00040634
   32050:	0004063d 	.word	0x0004063d
   32054:	00040654 	.word	0x00040654
   32058:	0004065c 	.word	0x0004065c
   3205c:	00040669 	.word	0x00040669
   32060:	0004067e 	.word	0x0004067e
   32064:	00040692 	.word	0x00040692
   32068:	000406aa 	.word	0x000406aa
   3206c:	000406b9 	.word	0x000406b9
   32070:	000406ca 	.word	0x000406ca
   32074:	000406dd 	.word	0x000406dd
   32078:	000406e9 	.word	0x000406e9
   3207c:	00040702 	.word	0x00040702
   32080:	00040716 	.word	0x00040716
   32084:	00040731 	.word	0x00040731
   32088:	00040749 	.word	0x00040749
   3208c:	00040763 	.word	0x00040763
   32090:	0004076b 	.word	0x0004076b
   32094:	0004079b 	.word	0x0004079b
   32098:	000407ba 	.word	0x000407ba
   3209c:	000407d9 	.word	0x000407d9
   320a0:	000407f0 	.word	0x000407f0
   320a4:	00040803 	.word	0x00040803
   320a8:	0004081c 	.word	0x0004081c
   320ac:	00040833 	.word	0x00040833
   320b0:	00040849 	.word	0x00040849
   320b4:	0004086a 	.word	0x0004086a
   320b8:	00040882 	.word	0x00040882
   320bc:	0004089e 	.word	0x0004089e
   320c0:	000408b1 	.word	0x000408b1
   320c4:	000408c7 	.word	0x000408c7
   320c8:	000408db 	.word	0x000408db
   320cc:	000408fd 	.word	0x000408fd
   320d0:	00040923 	.word	0x00040923
   320d4:	00040934 	.word	0x00040934
   320d8:	0003c514 	.word	0x0003c514
   320dc:	00040949 	.word	0x00040949

000320e0 <strerror>:
   320e0:	2300      	movs	r3, #0
   320e2:	4601      	mov	r1, r0
   320e4:	4802      	ldr	r0, [pc, #8]	; (320f0 <strerror+0x10>)
   320e6:	461a      	mov	r2, r3
   320e8:	6800      	ldr	r0, [r0, #0]
   320ea:	f7ff be13 	b.w	31d14 <_strerror_r>
   320ee:	bf00      	nop
   320f0:	20020234 	.word	0x20020234

000320f4 <_strtol_l.isra.0>:
   320f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   320f8:	4686      	mov	lr, r0
   320fa:	4f39      	ldr	r7, [pc, #228]	; (321e0 <_strtol_l.isra.0+0xec>)
   320fc:	4608      	mov	r0, r1
   320fe:	4605      	mov	r5, r0
   32100:	f815 4b01 	ldrb.w	r4, [r5], #1
   32104:	5de6      	ldrb	r6, [r4, r7]
   32106:	f016 0608 	ands.w	r6, r6, #8
   3210a:	d135      	bne.n	32178 <_strtol_l.isra.0+0x84>
   3210c:	2c2d      	cmp	r4, #45	; 0x2d
   3210e:	d135      	bne.n	3217c <_strtol_l.isra.0+0x88>
   32110:	782c      	ldrb	r4, [r5, #0]
   32112:	f04f 0801 	mov.w	r8, #1
   32116:	1c85      	adds	r5, r0, #2
   32118:	2b00      	cmp	r3, #0
   3211a:	d05c      	beq.n	321d6 <_strtol_l.isra.0+0xe2>
   3211c:	2b10      	cmp	r3, #16
   3211e:	d109      	bne.n	32134 <_strtol_l.isra.0+0x40>
   32120:	2c30      	cmp	r4, #48	; 0x30
   32122:	d107      	bne.n	32134 <_strtol_l.isra.0+0x40>
   32124:	7828      	ldrb	r0, [r5, #0]
   32126:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   3212a:	2858      	cmp	r0, #88	; 0x58
   3212c:	d14e      	bne.n	321cc <_strtol_l.isra.0+0xd8>
   3212e:	786c      	ldrb	r4, [r5, #1]
   32130:	2310      	movs	r3, #16
   32132:	3502      	adds	r5, #2
   32134:	f1b8 0f00 	cmp.w	r8, #0
   32138:	f04f 0700 	mov.w	r7, #0
   3213c:	bf14      	ite	ne
   3213e:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   32142:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   32146:	4638      	mov	r0, r7
   32148:	fbbc f9f3 	udiv	r9, ip, r3
   3214c:	fb03 ca19 	mls	sl, r3, r9, ip
   32150:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   32154:	2e09      	cmp	r6, #9
   32156:	d817      	bhi.n	32188 <_strtol_l.isra.0+0x94>
   32158:	4634      	mov	r4, r6
   3215a:	42a3      	cmp	r3, r4
   3215c:	dd23      	ble.n	321a6 <_strtol_l.isra.0+0xb2>
   3215e:	1c7e      	adds	r6, r7, #1
   32160:	d007      	beq.n	32172 <_strtol_l.isra.0+0x7e>
   32162:	4581      	cmp	r9, r0
   32164:	d31c      	bcc.n	321a0 <_strtol_l.isra.0+0xac>
   32166:	d101      	bne.n	3216c <_strtol_l.isra.0+0x78>
   32168:	45a2      	cmp	sl, r4
   3216a:	db19      	blt.n	321a0 <_strtol_l.isra.0+0xac>
   3216c:	fb00 4003 	mla	r0, r0, r3, r4
   32170:	2701      	movs	r7, #1
   32172:	f815 4b01 	ldrb.w	r4, [r5], #1
   32176:	e7eb      	b.n	32150 <_strtol_l.isra.0+0x5c>
   32178:	4628      	mov	r0, r5
   3217a:	e7c0      	b.n	320fe <_strtol_l.isra.0+0xa>
   3217c:	2c2b      	cmp	r4, #43	; 0x2b
   3217e:	46b0      	mov	r8, r6
   32180:	bf04      	itt	eq
   32182:	782c      	ldrbeq	r4, [r5, #0]
   32184:	1c85      	addeq	r5, r0, #2
   32186:	e7c7      	b.n	32118 <_strtol_l.isra.0+0x24>
   32188:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   3218c:	2e19      	cmp	r6, #25
   3218e:	d801      	bhi.n	32194 <_strtol_l.isra.0+0xa0>
   32190:	3c37      	subs	r4, #55	; 0x37
   32192:	e7e2      	b.n	3215a <_strtol_l.isra.0+0x66>
   32194:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   32198:	2e19      	cmp	r6, #25
   3219a:	d804      	bhi.n	321a6 <_strtol_l.isra.0+0xb2>
   3219c:	3c57      	subs	r4, #87	; 0x57
   3219e:	e7dc      	b.n	3215a <_strtol_l.isra.0+0x66>
   321a0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   321a4:	e7e5      	b.n	32172 <_strtol_l.isra.0+0x7e>
   321a6:	1c7b      	adds	r3, r7, #1
   321a8:	d106      	bne.n	321b8 <_strtol_l.isra.0+0xc4>
   321aa:	2322      	movs	r3, #34	; 0x22
   321ac:	4660      	mov	r0, ip
   321ae:	f8ce 3000 	str.w	r3, [lr]
   321b2:	b942      	cbnz	r2, 321c6 <_strtol_l.isra.0+0xd2>
   321b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   321b8:	f1b8 0f00 	cmp.w	r8, #0
   321bc:	d000      	beq.n	321c0 <_strtol_l.isra.0+0xcc>
   321be:	4240      	negs	r0, r0
   321c0:	2a00      	cmp	r2, #0
   321c2:	d0f7      	beq.n	321b4 <_strtol_l.isra.0+0xc0>
   321c4:	b107      	cbz	r7, 321c8 <_strtol_l.isra.0+0xd4>
   321c6:	1e69      	subs	r1, r5, #1
   321c8:	6011      	str	r1, [r2, #0]
   321ca:	e7f3      	b.n	321b4 <_strtol_l.isra.0+0xc0>
   321cc:	2430      	movs	r4, #48	; 0x30
   321ce:	2b00      	cmp	r3, #0
   321d0:	d1b0      	bne.n	32134 <_strtol_l.isra.0+0x40>
   321d2:	2308      	movs	r3, #8
   321d4:	e7ae      	b.n	32134 <_strtol_l.isra.0+0x40>
   321d6:	2c30      	cmp	r4, #48	; 0x30
   321d8:	d0a4      	beq.n	32124 <_strtol_l.isra.0+0x30>
   321da:	230a      	movs	r3, #10
   321dc:	e7aa      	b.n	32134 <_strtol_l.isra.0+0x40>
   321de:	bf00      	nop
   321e0:	0004017c 	.word	0x0004017c

000321e4 <strtol>:
   321e4:	4613      	mov	r3, r2
   321e6:	460a      	mov	r2, r1
   321e8:	4601      	mov	r1, r0
   321ea:	4802      	ldr	r0, [pc, #8]	; (321f4 <strtol+0x10>)
   321ec:	6800      	ldr	r0, [r0, #0]
   321ee:	f7ff bf81 	b.w	320f4 <_strtol_l.isra.0>
   321f2:	bf00      	nop
   321f4:	20020234 	.word	0x20020234

000321f8 <_strtoul_l.isra.0>:
   321f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   321fc:	4686      	mov	lr, r0
   321fe:	4f37      	ldr	r7, [pc, #220]	; (322dc <_strtoul_l.isra.0+0xe4>)
   32200:	4608      	mov	r0, r1
   32202:	4605      	mov	r5, r0
   32204:	f815 4b01 	ldrb.w	r4, [r5], #1
   32208:	5de6      	ldrb	r6, [r4, r7]
   3220a:	f016 0608 	ands.w	r6, r6, #8
   3220e:	d131      	bne.n	32274 <_strtoul_l.isra.0+0x7c>
   32210:	2c2d      	cmp	r4, #45	; 0x2d
   32212:	d131      	bne.n	32278 <_strtoul_l.isra.0+0x80>
   32214:	782c      	ldrb	r4, [r5, #0]
   32216:	f04f 0801 	mov.w	r8, #1
   3221a:	1c85      	adds	r5, r0, #2
   3221c:	2b00      	cmp	r3, #0
   3221e:	d059      	beq.n	322d4 <_strtoul_l.isra.0+0xdc>
   32220:	2b10      	cmp	r3, #16
   32222:	d109      	bne.n	32238 <_strtoul_l.isra.0+0x40>
   32224:	2c30      	cmp	r4, #48	; 0x30
   32226:	d107      	bne.n	32238 <_strtoul_l.isra.0+0x40>
   32228:	7828      	ldrb	r0, [r5, #0]
   3222a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   3222e:	2858      	cmp	r0, #88	; 0x58
   32230:	d14b      	bne.n	322ca <_strtoul_l.isra.0+0xd2>
   32232:	786c      	ldrb	r4, [r5, #1]
   32234:	2310      	movs	r3, #16
   32236:	3502      	adds	r5, #2
   32238:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   3223c:	2600      	movs	r6, #0
   3223e:	fbbc fcf3 	udiv	ip, ip, r3
   32242:	fb03 f90c 	mul.w	r9, r3, ip
   32246:	4630      	mov	r0, r6
   32248:	ea6f 0909 	mvn.w	r9, r9
   3224c:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
   32250:	2f09      	cmp	r7, #9
   32252:	d817      	bhi.n	32284 <_strtoul_l.isra.0+0x8c>
   32254:	463c      	mov	r4, r7
   32256:	42a3      	cmp	r3, r4
   32258:	dd23      	ble.n	322a2 <_strtoul_l.isra.0+0xaa>
   3225a:	2e00      	cmp	r6, #0
   3225c:	db1e      	blt.n	3229c <_strtoul_l.isra.0+0xa4>
   3225e:	4584      	cmp	ip, r0
   32260:	d31c      	bcc.n	3229c <_strtoul_l.isra.0+0xa4>
   32262:	d101      	bne.n	32268 <_strtoul_l.isra.0+0x70>
   32264:	45a1      	cmp	r9, r4
   32266:	db19      	blt.n	3229c <_strtoul_l.isra.0+0xa4>
   32268:	fb00 4003 	mla	r0, r0, r3, r4
   3226c:	2601      	movs	r6, #1
   3226e:	f815 4b01 	ldrb.w	r4, [r5], #1
   32272:	e7eb      	b.n	3224c <_strtoul_l.isra.0+0x54>
   32274:	4628      	mov	r0, r5
   32276:	e7c4      	b.n	32202 <_strtoul_l.isra.0+0xa>
   32278:	2c2b      	cmp	r4, #43	; 0x2b
   3227a:	46b0      	mov	r8, r6
   3227c:	bf04      	itt	eq
   3227e:	782c      	ldrbeq	r4, [r5, #0]
   32280:	1c85      	addeq	r5, r0, #2
   32282:	e7cb      	b.n	3221c <_strtoul_l.isra.0+0x24>
   32284:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
   32288:	2f19      	cmp	r7, #25
   3228a:	d801      	bhi.n	32290 <_strtoul_l.isra.0+0x98>
   3228c:	3c37      	subs	r4, #55	; 0x37
   3228e:	e7e2      	b.n	32256 <_strtoul_l.isra.0+0x5e>
   32290:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
   32294:	2f19      	cmp	r7, #25
   32296:	d804      	bhi.n	322a2 <_strtoul_l.isra.0+0xaa>
   32298:	3c57      	subs	r4, #87	; 0x57
   3229a:	e7dc      	b.n	32256 <_strtoul_l.isra.0+0x5e>
   3229c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   322a0:	e7e5      	b.n	3226e <_strtoul_l.isra.0+0x76>
   322a2:	2e00      	cmp	r6, #0
   322a4:	da07      	bge.n	322b6 <_strtoul_l.isra.0+0xbe>
   322a6:	2322      	movs	r3, #34	; 0x22
   322a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   322ac:	f8ce 3000 	str.w	r3, [lr]
   322b0:	b942      	cbnz	r2, 322c4 <_strtoul_l.isra.0+0xcc>
   322b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   322b6:	f1b8 0f00 	cmp.w	r8, #0
   322ba:	d000      	beq.n	322be <_strtoul_l.isra.0+0xc6>
   322bc:	4240      	negs	r0, r0
   322be:	2a00      	cmp	r2, #0
   322c0:	d0f7      	beq.n	322b2 <_strtoul_l.isra.0+0xba>
   322c2:	b106      	cbz	r6, 322c6 <_strtoul_l.isra.0+0xce>
   322c4:	1e69      	subs	r1, r5, #1
   322c6:	6011      	str	r1, [r2, #0]
   322c8:	e7f3      	b.n	322b2 <_strtoul_l.isra.0+0xba>
   322ca:	2430      	movs	r4, #48	; 0x30
   322cc:	2b00      	cmp	r3, #0
   322ce:	d1b3      	bne.n	32238 <_strtoul_l.isra.0+0x40>
   322d0:	2308      	movs	r3, #8
   322d2:	e7b1      	b.n	32238 <_strtoul_l.isra.0+0x40>
   322d4:	2c30      	cmp	r4, #48	; 0x30
   322d6:	d0a7      	beq.n	32228 <_strtoul_l.isra.0+0x30>
   322d8:	230a      	movs	r3, #10
   322da:	e7ad      	b.n	32238 <_strtoul_l.isra.0+0x40>
   322dc:	0004017c 	.word	0x0004017c

000322e0 <strtoul>:
   322e0:	4613      	mov	r3, r2
   322e2:	460a      	mov	r2, r1
   322e4:	4601      	mov	r1, r0
   322e6:	4802      	ldr	r0, [pc, #8]	; (322f0 <strtoul+0x10>)
   322e8:	6800      	ldr	r0, [r0, #0]
   322ea:	f7ff bf85 	b.w	321f8 <_strtoul_l.isra.0>
   322ee:	bf00      	nop
   322f0:	20020234 	.word	0x20020234

000322f4 <__swbuf_r>:
   322f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   322f6:	460e      	mov	r6, r1
   322f8:	4614      	mov	r4, r2
   322fa:	4605      	mov	r5, r0
   322fc:	b118      	cbz	r0, 32306 <__swbuf_r+0x12>
   322fe:	6983      	ldr	r3, [r0, #24]
   32300:	b90b      	cbnz	r3, 32306 <__swbuf_r+0x12>
   32302:	f000 f9dd 	bl	326c0 <__sinit>
   32306:	4b21      	ldr	r3, [pc, #132]	; (3238c <__swbuf_r+0x98>)
   32308:	429c      	cmp	r4, r3
   3230a:	d12b      	bne.n	32364 <__swbuf_r+0x70>
   3230c:	686c      	ldr	r4, [r5, #4]
   3230e:	69a3      	ldr	r3, [r4, #24]
   32310:	60a3      	str	r3, [r4, #8]
   32312:	89a3      	ldrh	r3, [r4, #12]
   32314:	071a      	lsls	r2, r3, #28
   32316:	d52f      	bpl.n	32378 <__swbuf_r+0x84>
   32318:	6923      	ldr	r3, [r4, #16]
   3231a:	b36b      	cbz	r3, 32378 <__swbuf_r+0x84>
   3231c:	6923      	ldr	r3, [r4, #16]
   3231e:	b2f6      	uxtb	r6, r6
   32320:	6820      	ldr	r0, [r4, #0]
   32322:	4637      	mov	r7, r6
   32324:	1ac0      	subs	r0, r0, r3
   32326:	6963      	ldr	r3, [r4, #20]
   32328:	4283      	cmp	r3, r0
   3232a:	dc04      	bgt.n	32336 <__swbuf_r+0x42>
   3232c:	4621      	mov	r1, r4
   3232e:	4628      	mov	r0, r5
   32330:	f000 f948 	bl	325c4 <_fflush_r>
   32334:	bb30      	cbnz	r0, 32384 <__swbuf_r+0x90>
   32336:	68a3      	ldr	r3, [r4, #8]
   32338:	3001      	adds	r0, #1
   3233a:	3b01      	subs	r3, #1
   3233c:	60a3      	str	r3, [r4, #8]
   3233e:	6823      	ldr	r3, [r4, #0]
   32340:	1c5a      	adds	r2, r3, #1
   32342:	6022      	str	r2, [r4, #0]
   32344:	701e      	strb	r6, [r3, #0]
   32346:	6963      	ldr	r3, [r4, #20]
   32348:	4283      	cmp	r3, r0
   3234a:	d004      	beq.n	32356 <__swbuf_r+0x62>
   3234c:	89a3      	ldrh	r3, [r4, #12]
   3234e:	07db      	lsls	r3, r3, #31
   32350:	d506      	bpl.n	32360 <__swbuf_r+0x6c>
   32352:	2e0a      	cmp	r6, #10
   32354:	d104      	bne.n	32360 <__swbuf_r+0x6c>
   32356:	4621      	mov	r1, r4
   32358:	4628      	mov	r0, r5
   3235a:	f000 f933 	bl	325c4 <_fflush_r>
   3235e:	b988      	cbnz	r0, 32384 <__swbuf_r+0x90>
   32360:	4638      	mov	r0, r7
   32362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   32364:	4b0a      	ldr	r3, [pc, #40]	; (32390 <__swbuf_r+0x9c>)
   32366:	429c      	cmp	r4, r3
   32368:	d101      	bne.n	3236e <__swbuf_r+0x7a>
   3236a:	68ac      	ldr	r4, [r5, #8]
   3236c:	e7cf      	b.n	3230e <__swbuf_r+0x1a>
   3236e:	4b09      	ldr	r3, [pc, #36]	; (32394 <__swbuf_r+0xa0>)
   32370:	429c      	cmp	r4, r3
   32372:	bf08      	it	eq
   32374:	68ec      	ldreq	r4, [r5, #12]
   32376:	e7ca      	b.n	3230e <__swbuf_r+0x1a>
   32378:	4621      	mov	r1, r4
   3237a:	4628      	mov	r0, r5
   3237c:	f000 f80c 	bl	32398 <__swsetup_r>
   32380:	2800      	cmp	r0, #0
   32382:	d0cb      	beq.n	3231c <__swbuf_r+0x28>
   32384:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   32388:	e7ea      	b.n	32360 <__swbuf_r+0x6c>
   3238a:	bf00      	nop
   3238c:	0003b394 	.word	0x0003b394
   32390:	0003b3b4 	.word	0x0003b3b4
   32394:	0003b374 	.word	0x0003b374

00032398 <__swsetup_r>:
   32398:	4b32      	ldr	r3, [pc, #200]	; (32464 <__swsetup_r+0xcc>)
   3239a:	b570      	push	{r4, r5, r6, lr}
   3239c:	681d      	ldr	r5, [r3, #0]
   3239e:	4606      	mov	r6, r0
   323a0:	460c      	mov	r4, r1
   323a2:	b125      	cbz	r5, 323ae <__swsetup_r+0x16>
   323a4:	69ab      	ldr	r3, [r5, #24]
   323a6:	b913      	cbnz	r3, 323ae <__swsetup_r+0x16>
   323a8:	4628      	mov	r0, r5
   323aa:	f000 f989 	bl	326c0 <__sinit>
   323ae:	4b2e      	ldr	r3, [pc, #184]	; (32468 <__swsetup_r+0xd0>)
   323b0:	429c      	cmp	r4, r3
   323b2:	d10f      	bne.n	323d4 <__swsetup_r+0x3c>
   323b4:	686c      	ldr	r4, [r5, #4]
   323b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   323ba:	b29a      	uxth	r2, r3
   323bc:	0715      	lsls	r5, r2, #28
   323be:	d42c      	bmi.n	3241a <__swsetup_r+0x82>
   323c0:	06d0      	lsls	r0, r2, #27
   323c2:	d411      	bmi.n	323e8 <__swsetup_r+0x50>
   323c4:	2209      	movs	r2, #9
   323c6:	6032      	str	r2, [r6, #0]
   323c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   323cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   323d0:	81a3      	strh	r3, [r4, #12]
   323d2:	e03e      	b.n	32452 <__swsetup_r+0xba>
   323d4:	4b25      	ldr	r3, [pc, #148]	; (3246c <__swsetup_r+0xd4>)
   323d6:	429c      	cmp	r4, r3
   323d8:	d101      	bne.n	323de <__swsetup_r+0x46>
   323da:	68ac      	ldr	r4, [r5, #8]
   323dc:	e7eb      	b.n	323b6 <__swsetup_r+0x1e>
   323de:	4b24      	ldr	r3, [pc, #144]	; (32470 <__swsetup_r+0xd8>)
   323e0:	429c      	cmp	r4, r3
   323e2:	bf08      	it	eq
   323e4:	68ec      	ldreq	r4, [r5, #12]
   323e6:	e7e6      	b.n	323b6 <__swsetup_r+0x1e>
   323e8:	0751      	lsls	r1, r2, #29
   323ea:	d512      	bpl.n	32412 <__swsetup_r+0x7a>
   323ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
   323ee:	b141      	cbz	r1, 32402 <__swsetup_r+0x6a>
   323f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
   323f4:	4299      	cmp	r1, r3
   323f6:	d002      	beq.n	323fe <__swsetup_r+0x66>
   323f8:	4630      	mov	r0, r6
   323fa:	f7fe ff19 	bl	31230 <_free_r>
   323fe:	2300      	movs	r3, #0
   32400:	6363      	str	r3, [r4, #52]	; 0x34
   32402:	89a3      	ldrh	r3, [r4, #12]
   32404:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   32408:	81a3      	strh	r3, [r4, #12]
   3240a:	2300      	movs	r3, #0
   3240c:	6063      	str	r3, [r4, #4]
   3240e:	6923      	ldr	r3, [r4, #16]
   32410:	6023      	str	r3, [r4, #0]
   32412:	89a3      	ldrh	r3, [r4, #12]
   32414:	f043 0308 	orr.w	r3, r3, #8
   32418:	81a3      	strh	r3, [r4, #12]
   3241a:	6923      	ldr	r3, [r4, #16]
   3241c:	b94b      	cbnz	r3, 32432 <__swsetup_r+0x9a>
   3241e:	89a3      	ldrh	r3, [r4, #12]
   32420:	f403 7320 	and.w	r3, r3, #640	; 0x280
   32424:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   32428:	d003      	beq.n	32432 <__swsetup_r+0x9a>
   3242a:	4621      	mov	r1, r4
   3242c:	4630      	mov	r0, r6
   3242e:	f000 f9c9 	bl	327c4 <__smakebuf_r>
   32432:	89a2      	ldrh	r2, [r4, #12]
   32434:	f012 0301 	ands.w	r3, r2, #1
   32438:	d00c      	beq.n	32454 <__swsetup_r+0xbc>
   3243a:	2300      	movs	r3, #0
   3243c:	60a3      	str	r3, [r4, #8]
   3243e:	6963      	ldr	r3, [r4, #20]
   32440:	425b      	negs	r3, r3
   32442:	61a3      	str	r3, [r4, #24]
   32444:	6923      	ldr	r3, [r4, #16]
   32446:	b953      	cbnz	r3, 3245e <__swsetup_r+0xc6>
   32448:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   3244c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   32450:	d1ba      	bne.n	323c8 <__swsetup_r+0x30>
   32452:	bd70      	pop	{r4, r5, r6, pc}
   32454:	0792      	lsls	r2, r2, #30
   32456:	bf58      	it	pl
   32458:	6963      	ldrpl	r3, [r4, #20]
   3245a:	60a3      	str	r3, [r4, #8]
   3245c:	e7f2      	b.n	32444 <__swsetup_r+0xac>
   3245e:	2000      	movs	r0, #0
   32460:	e7f7      	b.n	32452 <__swsetup_r+0xba>
   32462:	bf00      	nop
   32464:	20020234 	.word	0x20020234
   32468:	0003b394 	.word	0x0003b394
   3246c:	0003b3b4 	.word	0x0003b3b4
   32470:	0003b374 	.word	0x0003b374

00032474 <__chk_fail>:
   32474:	b500      	push	{lr}
   32476:	b08d      	sub	sp, #52	; 0x34
   32478:	4b0f      	ldr	r3, [pc, #60]	; (324b8 <__chk_fail+0x44>)
   3247a:	466a      	mov	r2, sp
   3247c:	f103 0628 	add.w	r6, r3, #40	; 0x28
   32480:	4615      	mov	r5, r2
   32482:	6818      	ldr	r0, [r3, #0]
   32484:	3308      	adds	r3, #8
   32486:	f853 1c04 	ldr.w	r1, [r3, #-4]
   3248a:	4614      	mov	r4, r2
   3248c:	42b3      	cmp	r3, r6
   3248e:	c403      	stmia	r4!, {r0, r1}
   32490:	4622      	mov	r2, r4
   32492:	d1f6      	bne.n	32482 <__chk_fail+0xe>
   32494:	6818      	ldr	r0, [r3, #0]
   32496:	889b      	ldrh	r3, [r3, #4]
   32498:	6020      	str	r0, [r4, #0]
   3249a:	4628      	mov	r0, r5
   3249c:	80a3      	strh	r3, [r4, #4]
   3249e:	f7df fdef 	bl	12080 <strlen>
   324a2:	4629      	mov	r1, r5
   324a4:	4602      	mov	r2, r0
   324a6:	2002      	movs	r0, #2
   324a8:	f002 ffff 	bl	354aa <_write>
   324ac:	2006      	movs	r0, #6
   324ae:	f000 fb1b 	bl	32ae8 <raise>
   324b2:	207f      	movs	r0, #127	; 0x7f
   324b4:	f7e9 fae0 	bl	1ba78 <_exit>
   324b8:	00040951 	.word	0x00040951

000324bc <__sflush_r>:
   324bc:	898a      	ldrh	r2, [r1, #12]
   324be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   324c2:	4605      	mov	r5, r0
   324c4:	0710      	lsls	r0, r2, #28
   324c6:	460c      	mov	r4, r1
   324c8:	d458      	bmi.n	3257c <__sflush_r+0xc0>
   324ca:	684b      	ldr	r3, [r1, #4]
   324cc:	2b00      	cmp	r3, #0
   324ce:	dc05      	bgt.n	324dc <__sflush_r+0x20>
   324d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   324d2:	2b00      	cmp	r3, #0
   324d4:	dc02      	bgt.n	324dc <__sflush_r+0x20>
   324d6:	2000      	movs	r0, #0
   324d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   324dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   324de:	2e00      	cmp	r6, #0
   324e0:	d0f9      	beq.n	324d6 <__sflush_r+0x1a>
   324e2:	2300      	movs	r3, #0
   324e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   324e8:	682f      	ldr	r7, [r5, #0]
   324ea:	602b      	str	r3, [r5, #0]
   324ec:	d032      	beq.n	32554 <__sflush_r+0x98>
   324ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
   324f0:	89a3      	ldrh	r3, [r4, #12]
   324f2:	075a      	lsls	r2, r3, #29
   324f4:	d505      	bpl.n	32502 <__sflush_r+0x46>
   324f6:	6863      	ldr	r3, [r4, #4]
   324f8:	1ac0      	subs	r0, r0, r3
   324fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
   324fc:	b10b      	cbz	r3, 32502 <__sflush_r+0x46>
   324fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
   32500:	1ac0      	subs	r0, r0, r3
   32502:	2300      	movs	r3, #0
   32504:	4602      	mov	r2, r0
   32506:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   32508:	4628      	mov	r0, r5
   3250a:	6a21      	ldr	r1, [r4, #32]
   3250c:	47b0      	blx	r6
   3250e:	1c43      	adds	r3, r0, #1
   32510:	89a3      	ldrh	r3, [r4, #12]
   32512:	d106      	bne.n	32522 <__sflush_r+0x66>
   32514:	6829      	ldr	r1, [r5, #0]
   32516:	291d      	cmp	r1, #29
   32518:	d82c      	bhi.n	32574 <__sflush_r+0xb8>
   3251a:	4a29      	ldr	r2, [pc, #164]	; (325c0 <__sflush_r+0x104>)
   3251c:	40ca      	lsrs	r2, r1
   3251e:	07d6      	lsls	r6, r2, #31
   32520:	d528      	bpl.n	32574 <__sflush_r+0xb8>
   32522:	2200      	movs	r2, #0
   32524:	04d9      	lsls	r1, r3, #19
   32526:	6062      	str	r2, [r4, #4]
   32528:	6922      	ldr	r2, [r4, #16]
   3252a:	6022      	str	r2, [r4, #0]
   3252c:	d504      	bpl.n	32538 <__sflush_r+0x7c>
   3252e:	1c42      	adds	r2, r0, #1
   32530:	d101      	bne.n	32536 <__sflush_r+0x7a>
   32532:	682b      	ldr	r3, [r5, #0]
   32534:	b903      	cbnz	r3, 32538 <__sflush_r+0x7c>
   32536:	6560      	str	r0, [r4, #84]	; 0x54
   32538:	6b61      	ldr	r1, [r4, #52]	; 0x34
   3253a:	602f      	str	r7, [r5, #0]
   3253c:	2900      	cmp	r1, #0
   3253e:	d0ca      	beq.n	324d6 <__sflush_r+0x1a>
   32540:	f104 0344 	add.w	r3, r4, #68	; 0x44
   32544:	4299      	cmp	r1, r3
   32546:	d002      	beq.n	3254e <__sflush_r+0x92>
   32548:	4628      	mov	r0, r5
   3254a:	f7fe fe71 	bl	31230 <_free_r>
   3254e:	2000      	movs	r0, #0
   32550:	6360      	str	r0, [r4, #52]	; 0x34
   32552:	e7c1      	b.n	324d8 <__sflush_r+0x1c>
   32554:	6a21      	ldr	r1, [r4, #32]
   32556:	2301      	movs	r3, #1
   32558:	4628      	mov	r0, r5
   3255a:	47b0      	blx	r6
   3255c:	1c41      	adds	r1, r0, #1
   3255e:	d1c7      	bne.n	324f0 <__sflush_r+0x34>
   32560:	682b      	ldr	r3, [r5, #0]
   32562:	2b00      	cmp	r3, #0
   32564:	d0c4      	beq.n	324f0 <__sflush_r+0x34>
   32566:	2b1d      	cmp	r3, #29
   32568:	d001      	beq.n	3256e <__sflush_r+0xb2>
   3256a:	2b16      	cmp	r3, #22
   3256c:	d101      	bne.n	32572 <__sflush_r+0xb6>
   3256e:	602f      	str	r7, [r5, #0]
   32570:	e7b1      	b.n	324d6 <__sflush_r+0x1a>
   32572:	89a3      	ldrh	r3, [r4, #12]
   32574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   32578:	81a3      	strh	r3, [r4, #12]
   3257a:	e7ad      	b.n	324d8 <__sflush_r+0x1c>
   3257c:	690f      	ldr	r7, [r1, #16]
   3257e:	2f00      	cmp	r7, #0
   32580:	d0a9      	beq.n	324d6 <__sflush_r+0x1a>
   32582:	0793      	lsls	r3, r2, #30
   32584:	680e      	ldr	r6, [r1, #0]
   32586:	600f      	str	r7, [r1, #0]
   32588:	bf0c      	ite	eq
   3258a:	694b      	ldreq	r3, [r1, #20]
   3258c:	2300      	movne	r3, #0
   3258e:	eba6 0807 	sub.w	r8, r6, r7
   32592:	608b      	str	r3, [r1, #8]
   32594:	f1b8 0f00 	cmp.w	r8, #0
   32598:	dd9d      	ble.n	324d6 <__sflush_r+0x1a>
   3259a:	4643      	mov	r3, r8
   3259c:	463a      	mov	r2, r7
   3259e:	6a21      	ldr	r1, [r4, #32]
   325a0:	4628      	mov	r0, r5
   325a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   325a4:	47b0      	blx	r6
   325a6:	2800      	cmp	r0, #0
   325a8:	dc06      	bgt.n	325b8 <__sflush_r+0xfc>
   325aa:	89a3      	ldrh	r3, [r4, #12]
   325ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   325b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   325b4:	81a3      	strh	r3, [r4, #12]
   325b6:	e78f      	b.n	324d8 <__sflush_r+0x1c>
   325b8:	4407      	add	r7, r0
   325ba:	eba8 0800 	sub.w	r8, r8, r0
   325be:	e7e9      	b.n	32594 <__sflush_r+0xd8>
   325c0:	20400001 	.word	0x20400001

000325c4 <_fflush_r>:
   325c4:	b538      	push	{r3, r4, r5, lr}
   325c6:	690b      	ldr	r3, [r1, #16]
   325c8:	4605      	mov	r5, r0
   325ca:	460c      	mov	r4, r1
   325cc:	b913      	cbnz	r3, 325d4 <_fflush_r+0x10>
   325ce:	2500      	movs	r5, #0
   325d0:	4628      	mov	r0, r5
   325d2:	bd38      	pop	{r3, r4, r5, pc}
   325d4:	b118      	cbz	r0, 325de <_fflush_r+0x1a>
   325d6:	6983      	ldr	r3, [r0, #24]
   325d8:	b90b      	cbnz	r3, 325de <_fflush_r+0x1a>
   325da:	f000 f871 	bl	326c0 <__sinit>
   325de:	4b14      	ldr	r3, [pc, #80]	; (32630 <_fflush_r+0x6c>)
   325e0:	429c      	cmp	r4, r3
   325e2:	d11b      	bne.n	3261c <_fflush_r+0x58>
   325e4:	686c      	ldr	r4, [r5, #4]
   325e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   325ea:	2b00      	cmp	r3, #0
   325ec:	d0ef      	beq.n	325ce <_fflush_r+0xa>
   325ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
   325f0:	07d0      	lsls	r0, r2, #31
   325f2:	d404      	bmi.n	325fe <_fflush_r+0x3a>
   325f4:	0599      	lsls	r1, r3, #22
   325f6:	d402      	bmi.n	325fe <_fflush_r+0x3a>
   325f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   325fa:	f006 ff6d 	bl	394d8 <__retarget_lock_acquire_recursive>
   325fe:	4628      	mov	r0, r5
   32600:	4621      	mov	r1, r4
   32602:	f7ff ff5b 	bl	324bc <__sflush_r>
   32606:	6e63      	ldr	r3, [r4, #100]	; 0x64
   32608:	4605      	mov	r5, r0
   3260a:	07da      	lsls	r2, r3, #31
   3260c:	d4e0      	bmi.n	325d0 <_fflush_r+0xc>
   3260e:	89a3      	ldrh	r3, [r4, #12]
   32610:	059b      	lsls	r3, r3, #22
   32612:	d4dd      	bmi.n	325d0 <_fflush_r+0xc>
   32614:	6da0      	ldr	r0, [r4, #88]	; 0x58
   32616:	f006 ff60 	bl	394da <__retarget_lock_release_recursive>
   3261a:	e7d9      	b.n	325d0 <_fflush_r+0xc>
   3261c:	4b05      	ldr	r3, [pc, #20]	; (32634 <_fflush_r+0x70>)
   3261e:	429c      	cmp	r4, r3
   32620:	d101      	bne.n	32626 <_fflush_r+0x62>
   32622:	68ac      	ldr	r4, [r5, #8]
   32624:	e7df      	b.n	325e6 <_fflush_r+0x22>
   32626:	4b04      	ldr	r3, [pc, #16]	; (32638 <_fflush_r+0x74>)
   32628:	429c      	cmp	r4, r3
   3262a:	bf08      	it	eq
   3262c:	68ec      	ldreq	r4, [r5, #12]
   3262e:	e7da      	b.n	325e6 <_fflush_r+0x22>
   32630:	0003b394 	.word	0x0003b394
   32634:	0003b3b4 	.word	0x0003b3b4
   32638:	0003b374 	.word	0x0003b374

0003263c <std>:
   3263c:	2300      	movs	r3, #0
   3263e:	b510      	push	{r4, lr}
   32640:	4604      	mov	r4, r0
   32642:	6083      	str	r3, [r0, #8]
   32644:	8181      	strh	r1, [r0, #12]
   32646:	4619      	mov	r1, r3
   32648:	6643      	str	r3, [r0, #100]	; 0x64
   3264a:	81c2      	strh	r2, [r0, #14]
   3264c:	2208      	movs	r2, #8
   3264e:	6183      	str	r3, [r0, #24]
   32650:	e9c0 3300 	strd	r3, r3, [r0]
   32654:	e9c0 3304 	strd	r3, r3, [r0, #16]
   32658:	305c      	adds	r0, #92	; 0x5c
   3265a:	f006 fcec 	bl	39036 <memset>
   3265e:	4b05      	ldr	r3, [pc, #20]	; (32674 <std+0x38>)
   32660:	6224      	str	r4, [r4, #32]
   32662:	6263      	str	r3, [r4, #36]	; 0x24
   32664:	4b04      	ldr	r3, [pc, #16]	; (32678 <std+0x3c>)
   32666:	62a3      	str	r3, [r4, #40]	; 0x28
   32668:	4b04      	ldr	r3, [pc, #16]	; (3267c <std+0x40>)
   3266a:	62e3      	str	r3, [r4, #44]	; 0x2c
   3266c:	4b04      	ldr	r3, [pc, #16]	; (32680 <std+0x44>)
   3266e:	6323      	str	r3, [r4, #48]	; 0x30
   32670:	bd10      	pop	{r4, pc}
   32672:	bf00      	nop
   32674:	00039b91 	.word	0x00039b91
   32678:	00039bb3 	.word	0x00039bb3
   3267c:	00039beb 	.word	0x00039beb
   32680:	00039c0f 	.word	0x00039c0f

00032684 <_cleanup_r>:
   32684:	4901      	ldr	r1, [pc, #4]	; (3268c <_cleanup_r+0x8>)
   32686:	f006 bf08 	b.w	3949a <_fwalk_reent>
   3268a:	bf00      	nop
   3268c:	000325c5 	.word	0x000325c5

00032690 <__sfp_lock_acquire>:
   32690:	4801      	ldr	r0, [pc, #4]	; (32698 <__sfp_lock_acquire+0x8>)
   32692:	f006 bf21 	b.w	394d8 <__retarget_lock_acquire_recursive>
   32696:	bf00      	nop
   32698:	20029204 	.word	0x20029204

0003269c <__sfp_lock_release>:
   3269c:	4801      	ldr	r0, [pc, #4]	; (326a4 <__sfp_lock_release+0x8>)
   3269e:	f006 bf1c 	b.w	394da <__retarget_lock_release_recursive>
   326a2:	bf00      	nop
   326a4:	20029204 	.word	0x20029204

000326a8 <__sinit_lock_acquire>:
   326a8:	4801      	ldr	r0, [pc, #4]	; (326b0 <__sinit_lock_acquire+0x8>)
   326aa:	f006 bf15 	b.w	394d8 <__retarget_lock_acquire_recursive>
   326ae:	bf00      	nop
   326b0:	200291ff 	.word	0x200291ff

000326b4 <__sinit_lock_release>:
   326b4:	4801      	ldr	r0, [pc, #4]	; (326bc <__sinit_lock_release+0x8>)
   326b6:	f006 bf10 	b.w	394da <__retarget_lock_release_recursive>
   326ba:	bf00      	nop
   326bc:	200291ff 	.word	0x200291ff

000326c0 <__sinit>:
   326c0:	b510      	push	{r4, lr}
   326c2:	4604      	mov	r4, r0
   326c4:	f7ff fff0 	bl	326a8 <__sinit_lock_acquire>
   326c8:	69a3      	ldr	r3, [r4, #24]
   326ca:	b11b      	cbz	r3, 326d4 <__sinit+0x14>
   326cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   326d0:	f7ff bff0 	b.w	326b4 <__sinit_lock_release>
   326d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   326d8:	6523      	str	r3, [r4, #80]	; 0x50
   326da:	4620      	mov	r0, r4
   326dc:	4b12      	ldr	r3, [pc, #72]	; (32728 <__sinit+0x68>)
   326de:	4a13      	ldr	r2, [pc, #76]	; (3272c <__sinit+0x6c>)
   326e0:	681b      	ldr	r3, [r3, #0]
   326e2:	62a2      	str	r2, [r4, #40]	; 0x28
   326e4:	42a3      	cmp	r3, r4
   326e6:	bf04      	itt	eq
   326e8:	2301      	moveq	r3, #1
   326ea:	61a3      	streq	r3, [r4, #24]
   326ec:	f000 f820 	bl	32730 <__sfp>
   326f0:	6060      	str	r0, [r4, #4]
   326f2:	4620      	mov	r0, r4
   326f4:	f000 f81c 	bl	32730 <__sfp>
   326f8:	60a0      	str	r0, [r4, #8]
   326fa:	4620      	mov	r0, r4
   326fc:	f000 f818 	bl	32730 <__sfp>
   32700:	2200      	movs	r2, #0
   32702:	60e0      	str	r0, [r4, #12]
   32704:	2104      	movs	r1, #4
   32706:	6860      	ldr	r0, [r4, #4]
   32708:	f7ff ff98 	bl	3263c <std>
   3270c:	2201      	movs	r2, #1
   3270e:	2109      	movs	r1, #9
   32710:	68a0      	ldr	r0, [r4, #8]
   32712:	f7ff ff93 	bl	3263c <std>
   32716:	2202      	movs	r2, #2
   32718:	2112      	movs	r1, #18
   3271a:	68e0      	ldr	r0, [r4, #12]
   3271c:	f7ff ff8e 	bl	3263c <std>
   32720:	2301      	movs	r3, #1
   32722:	61a3      	str	r3, [r4, #24]
   32724:	e7d2      	b.n	326cc <__sinit+0xc>
   32726:	bf00      	nop
   32728:	0003b370 	.word	0x0003b370
   3272c:	00032685 	.word	0x00032685

00032730 <__sfp>:
   32730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   32732:	4607      	mov	r7, r0
   32734:	f7ff ffac 	bl	32690 <__sfp_lock_acquire>
   32738:	4b1e      	ldr	r3, [pc, #120]	; (327b4 <__sfp+0x84>)
   3273a:	681e      	ldr	r6, [r3, #0]
   3273c:	69b3      	ldr	r3, [r6, #24]
   3273e:	b913      	cbnz	r3, 32746 <__sfp+0x16>
   32740:	4630      	mov	r0, r6
   32742:	f7ff ffbd 	bl	326c0 <__sinit>
   32746:	3648      	adds	r6, #72	; 0x48
   32748:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   3274c:	3b01      	subs	r3, #1
   3274e:	d503      	bpl.n	32758 <__sfp+0x28>
   32750:	6833      	ldr	r3, [r6, #0]
   32752:	b30b      	cbz	r3, 32798 <__sfp+0x68>
   32754:	6836      	ldr	r6, [r6, #0]
   32756:	e7f7      	b.n	32748 <__sfp+0x18>
   32758:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   3275c:	b9d5      	cbnz	r5, 32794 <__sfp+0x64>
   3275e:	4b16      	ldr	r3, [pc, #88]	; (327b8 <__sfp+0x88>)
   32760:	f104 0058 	add.w	r0, r4, #88	; 0x58
   32764:	6665      	str	r5, [r4, #100]	; 0x64
   32766:	60e3      	str	r3, [r4, #12]
   32768:	f006 feb5 	bl	394d6 <__retarget_lock_init_recursive>
   3276c:	f7ff ff96 	bl	3269c <__sfp_lock_release>
   32770:	6025      	str	r5, [r4, #0]
   32772:	61a5      	str	r5, [r4, #24]
   32774:	2208      	movs	r2, #8
   32776:	4629      	mov	r1, r5
   32778:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   3277c:	e9c4 5501 	strd	r5, r5, [r4, #4]
   32780:	e9c4 5504 	strd	r5, r5, [r4, #16]
   32784:	f006 fc57 	bl	39036 <memset>
   32788:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   3278c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   32790:	4620      	mov	r0, r4
   32792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   32794:	3468      	adds	r4, #104	; 0x68
   32796:	e7d9      	b.n	3274c <__sfp+0x1c>
   32798:	2104      	movs	r1, #4
   3279a:	4638      	mov	r0, r7
   3279c:	f006 fe67 	bl	3946e <__sfmoreglue>
   327a0:	4604      	mov	r4, r0
   327a2:	6030      	str	r0, [r6, #0]
   327a4:	2800      	cmp	r0, #0
   327a6:	d1d5      	bne.n	32754 <__sfp+0x24>
   327a8:	f7ff ff78 	bl	3269c <__sfp_lock_release>
   327ac:	230c      	movs	r3, #12
   327ae:	603b      	str	r3, [r7, #0]
   327b0:	e7ee      	b.n	32790 <__sfp+0x60>
   327b2:	bf00      	nop
   327b4:	0003b370 	.word	0x0003b370
   327b8:	ffff0001 	.word	0xffff0001

000327bc <_localeconv_r>:
   327bc:	4800      	ldr	r0, [pc, #0]	; (327c0 <_localeconv_r+0x4>)
   327be:	4770      	bx	lr
   327c0:	20020388 	.word	0x20020388

000327c4 <__smakebuf_r>:
   327c4:	898b      	ldrh	r3, [r1, #12]
   327c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   327c8:	079d      	lsls	r5, r3, #30
   327ca:	4606      	mov	r6, r0
   327cc:	460c      	mov	r4, r1
   327ce:	d507      	bpl.n	327e0 <__smakebuf_r+0x1c>
   327d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
   327d4:	6023      	str	r3, [r4, #0]
   327d6:	6123      	str	r3, [r4, #16]
   327d8:	2301      	movs	r3, #1
   327da:	6163      	str	r3, [r4, #20]
   327dc:	b002      	add	sp, #8
   327de:	bd70      	pop	{r4, r5, r6, pc}
   327e0:	ab01      	add	r3, sp, #4
   327e2:	466a      	mov	r2, sp
   327e4:	f006 fe7a 	bl	394dc <__swhatbuf_r>
   327e8:	9900      	ldr	r1, [sp, #0]
   327ea:	4605      	mov	r5, r0
   327ec:	4630      	mov	r0, r6
   327ee:	f7fe fd6d 	bl	312cc <_malloc_r>
   327f2:	b948      	cbnz	r0, 32808 <__smakebuf_r+0x44>
   327f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   327f8:	059a      	lsls	r2, r3, #22
   327fa:	d4ef      	bmi.n	327dc <__smakebuf_r+0x18>
   327fc:	f023 0303 	bic.w	r3, r3, #3
   32800:	f043 0302 	orr.w	r3, r3, #2
   32804:	81a3      	strh	r3, [r4, #12]
   32806:	e7e3      	b.n	327d0 <__smakebuf_r+0xc>
   32808:	4b0d      	ldr	r3, [pc, #52]	; (32840 <__smakebuf_r+0x7c>)
   3280a:	62b3      	str	r3, [r6, #40]	; 0x28
   3280c:	89a3      	ldrh	r3, [r4, #12]
   3280e:	6020      	str	r0, [r4, #0]
   32810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   32814:	6120      	str	r0, [r4, #16]
   32816:	81a3      	strh	r3, [r4, #12]
   32818:	9b00      	ldr	r3, [sp, #0]
   3281a:	6163      	str	r3, [r4, #20]
   3281c:	9b01      	ldr	r3, [sp, #4]
   3281e:	b15b      	cbz	r3, 32838 <__smakebuf_r+0x74>
   32820:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   32824:	4630      	mov	r0, r6
   32826:	f000 f9ad 	bl	32b84 <_isatty_r>
   3282a:	b128      	cbz	r0, 32838 <__smakebuf_r+0x74>
   3282c:	89a3      	ldrh	r3, [r4, #12]
   3282e:	f023 0303 	bic.w	r3, r3, #3
   32832:	f043 0301 	orr.w	r3, r3, #1
   32836:	81a3      	strh	r3, [r4, #12]
   32838:	89a3      	ldrh	r3, [r4, #12]
   3283a:	431d      	orrs	r5, r3
   3283c:	81a5      	strh	r5, [r4, #12]
   3283e:	e7cd      	b.n	327dc <__smakebuf_r+0x18>
   32840:	00032685 	.word	0x00032685

00032844 <__malloc_lock>:
   32844:	4801      	ldr	r0, [pc, #4]	; (3284c <__malloc_lock+0x8>)
   32846:	f006 be47 	b.w	394d8 <__retarget_lock_acquire_recursive>
   3284a:	bf00      	nop
   3284c:	20029200 	.word	0x20029200

00032850 <__malloc_unlock>:
   32850:	4801      	ldr	r0, [pc, #4]	; (32858 <__malloc_unlock+0x8>)
   32852:	f006 be42 	b.w	394da <__retarget_lock_release_recursive>
   32856:	bf00      	nop
   32858:	20029200 	.word	0x20029200

0003285c <__pow5mult>:
   3285c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   32860:	4615      	mov	r5, r2
   32862:	f012 0203 	ands.w	r2, r2, #3
   32866:	4606      	mov	r6, r0
   32868:	460f      	mov	r7, r1
   3286a:	d007      	beq.n	3287c <__pow5mult+0x20>
   3286c:	3a01      	subs	r2, #1
   3286e:	4c21      	ldr	r4, [pc, #132]	; (328f4 <__pow5mult+0x98>)
   32870:	2300      	movs	r3, #0
   32872:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   32876:	f006 fea0 	bl	395ba <__multadd>
   3287a:	4607      	mov	r7, r0
   3287c:	10ad      	asrs	r5, r5, #2
   3287e:	d035      	beq.n	328ec <__pow5mult+0x90>
   32880:	6a74      	ldr	r4, [r6, #36]	; 0x24
   32882:	b93c      	cbnz	r4, 32894 <__pow5mult+0x38>
   32884:	2010      	movs	r0, #16
   32886:	f7fe fcc3 	bl	31210 <malloc>
   3288a:	6270      	str	r0, [r6, #36]	; 0x24
   3288c:	6004      	str	r4, [r0, #0]
   3288e:	60c4      	str	r4, [r0, #12]
   32890:	e9c0 4401 	strd	r4, r4, [r0, #4]
   32894:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   32898:	f8d8 4008 	ldr.w	r4, [r8, #8]
   3289c:	b94c      	cbnz	r4, 328b2 <__pow5mult+0x56>
   3289e:	f240 2171 	movw	r1, #625	; 0x271
   328a2:	4630      	mov	r0, r6
   328a4:	f006 ff16 	bl	396d4 <__i2b>
   328a8:	2300      	movs	r3, #0
   328aa:	4604      	mov	r4, r0
   328ac:	f8c8 0008 	str.w	r0, [r8, #8]
   328b0:	6003      	str	r3, [r0, #0]
   328b2:	f04f 0800 	mov.w	r8, #0
   328b6:	07eb      	lsls	r3, r5, #31
   328b8:	d50a      	bpl.n	328d0 <__pow5mult+0x74>
   328ba:	4639      	mov	r1, r7
   328bc:	4622      	mov	r2, r4
   328be:	4630      	mov	r0, r6
   328c0:	f006 ff11 	bl	396e6 <__multiply>
   328c4:	4681      	mov	r9, r0
   328c6:	4639      	mov	r1, r7
   328c8:	4630      	mov	r0, r6
   328ca:	464f      	mov	r7, r9
   328cc:	f006 fe5e 	bl	3958c <_Bfree>
   328d0:	106d      	asrs	r5, r5, #1
   328d2:	d00b      	beq.n	328ec <__pow5mult+0x90>
   328d4:	6820      	ldr	r0, [r4, #0]
   328d6:	b938      	cbnz	r0, 328e8 <__pow5mult+0x8c>
   328d8:	4622      	mov	r2, r4
   328da:	4621      	mov	r1, r4
   328dc:	4630      	mov	r0, r6
   328de:	f006 ff02 	bl	396e6 <__multiply>
   328e2:	6020      	str	r0, [r4, #0]
   328e4:	f8c0 8000 	str.w	r8, [r0]
   328e8:	4604      	mov	r4, r0
   328ea:	e7e4      	b.n	328b6 <__pow5mult+0x5a>
   328ec:	4638      	mov	r0, r7
   328ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   328f2:	bf00      	nop
   328f4:	0003b3d4 	.word	0x0003b3d4

000328f8 <_svfiprintf_r>:
   328f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   328fc:	461e      	mov	r6, r3
   328fe:	898b      	ldrh	r3, [r1, #12]
   32900:	b09d      	sub	sp, #116	; 0x74
   32902:	4607      	mov	r7, r0
   32904:	061b      	lsls	r3, r3, #24
   32906:	460d      	mov	r5, r1
   32908:	4614      	mov	r4, r2
   3290a:	d50e      	bpl.n	3292a <_svfiprintf_r+0x32>
   3290c:	690b      	ldr	r3, [r1, #16]
   3290e:	b963      	cbnz	r3, 3292a <_svfiprintf_r+0x32>
   32910:	2140      	movs	r1, #64	; 0x40
   32912:	f7fe fcdb 	bl	312cc <_malloc_r>
   32916:	6028      	str	r0, [r5, #0]
   32918:	6128      	str	r0, [r5, #16]
   3291a:	b920      	cbnz	r0, 32926 <_svfiprintf_r+0x2e>
   3291c:	230c      	movs	r3, #12
   3291e:	603b      	str	r3, [r7, #0]
   32920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   32924:	e0c9      	b.n	32aba <_svfiprintf_r+0x1c2>
   32926:	2340      	movs	r3, #64	; 0x40
   32928:	616b      	str	r3, [r5, #20]
   3292a:	2300      	movs	r3, #0
   3292c:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 32ad4 <_svfiprintf_r+0x1dc>
   32930:	f04f 0a01 	mov.w	sl, #1
   32934:	9603      	str	r6, [sp, #12]
   32936:	9309      	str	r3, [sp, #36]	; 0x24
   32938:	2320      	movs	r3, #32
   3293a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   3293e:	2330      	movs	r3, #48	; 0x30
   32940:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   32944:	4623      	mov	r3, r4
   32946:	461e      	mov	r6, r3
   32948:	f813 2b01 	ldrb.w	r2, [r3], #1
   3294c:	b10a      	cbz	r2, 32952 <_svfiprintf_r+0x5a>
   3294e:	2a25      	cmp	r2, #37	; 0x25
   32950:	d1f9      	bne.n	32946 <_svfiprintf_r+0x4e>
   32952:	ebb6 0b04 	subs.w	fp, r6, r4
   32956:	d00b      	beq.n	32970 <_svfiprintf_r+0x78>
   32958:	465b      	mov	r3, fp
   3295a:	4622      	mov	r2, r4
   3295c:	4629      	mov	r1, r5
   3295e:	4638      	mov	r0, r7
   32960:	f007 f891 	bl	39a86 <__ssputs_r>
   32964:	3001      	adds	r0, #1
   32966:	f000 80a3 	beq.w	32ab0 <_svfiprintf_r+0x1b8>
   3296a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3296c:	445b      	add	r3, fp
   3296e:	9309      	str	r3, [sp, #36]	; 0x24
   32970:	7833      	ldrb	r3, [r6, #0]
   32972:	2b00      	cmp	r3, #0
   32974:	f000 809c 	beq.w	32ab0 <_svfiprintf_r+0x1b8>
   32978:	2300      	movs	r3, #0
   3297a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3297e:	3601      	adds	r6, #1
   32980:	9304      	str	r3, [sp, #16]
   32982:	9307      	str	r3, [sp, #28]
   32984:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   32988:	931a      	str	r3, [sp, #104]	; 0x68
   3298a:	e9cd 2305 	strd	r2, r3, [sp, #20]
   3298e:	4634      	mov	r4, r6
   32990:	2205      	movs	r2, #5
   32992:	4850      	ldr	r0, [pc, #320]	; (32ad4 <_svfiprintf_r+0x1dc>)
   32994:	f814 1b01 	ldrb.w	r1, [r4], #1
   32998:	f006 faf7 	bl	38f8a <memchr>
   3299c:	9b04      	ldr	r3, [sp, #16]
   3299e:	b9c0      	cbnz	r0, 329d2 <_svfiprintf_r+0xda>
   329a0:	06d9      	lsls	r1, r3, #27
   329a2:	bf44      	itt	mi
   329a4:	2220      	movmi	r2, #32
   329a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   329aa:	071a      	lsls	r2, r3, #28
   329ac:	bf44      	itt	mi
   329ae:	222b      	movmi	r2, #43	; 0x2b
   329b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   329b4:	7832      	ldrb	r2, [r6, #0]
   329b6:	2a2a      	cmp	r2, #42	; 0x2a
   329b8:	d013      	beq.n	329e2 <_svfiprintf_r+0xea>
   329ba:	4634      	mov	r4, r6
   329bc:	9a07      	ldr	r2, [sp, #28]
   329be:	2000      	movs	r0, #0
   329c0:	260a      	movs	r6, #10
   329c2:	4621      	mov	r1, r4
   329c4:	f811 3b01 	ldrb.w	r3, [r1], #1
   329c8:	3b30      	subs	r3, #48	; 0x30
   329ca:	2b09      	cmp	r3, #9
   329cc:	d94b      	bls.n	32a66 <_svfiprintf_r+0x16e>
   329ce:	b970      	cbnz	r0, 329ee <_svfiprintf_r+0xf6>
   329d0:	e014      	b.n	329fc <_svfiprintf_r+0x104>
   329d2:	eba0 0009 	sub.w	r0, r0, r9
   329d6:	4626      	mov	r6, r4
   329d8:	fa0a f000 	lsl.w	r0, sl, r0
   329dc:	4318      	orrs	r0, r3
   329de:	9004      	str	r0, [sp, #16]
   329e0:	e7d5      	b.n	3298e <_svfiprintf_r+0x96>
   329e2:	9a03      	ldr	r2, [sp, #12]
   329e4:	1d11      	adds	r1, r2, #4
   329e6:	6812      	ldr	r2, [r2, #0]
   329e8:	2a00      	cmp	r2, #0
   329ea:	9103      	str	r1, [sp, #12]
   329ec:	db01      	blt.n	329f2 <_svfiprintf_r+0xfa>
   329ee:	9207      	str	r2, [sp, #28]
   329f0:	e004      	b.n	329fc <_svfiprintf_r+0x104>
   329f2:	4252      	negs	r2, r2
   329f4:	f043 0302 	orr.w	r3, r3, #2
   329f8:	9207      	str	r2, [sp, #28]
   329fa:	9304      	str	r3, [sp, #16]
   329fc:	7823      	ldrb	r3, [r4, #0]
   329fe:	2b2e      	cmp	r3, #46	; 0x2e
   32a00:	d10c      	bne.n	32a1c <_svfiprintf_r+0x124>
   32a02:	7863      	ldrb	r3, [r4, #1]
   32a04:	2b2a      	cmp	r3, #42	; 0x2a
   32a06:	d133      	bne.n	32a70 <_svfiprintf_r+0x178>
   32a08:	9b03      	ldr	r3, [sp, #12]
   32a0a:	3402      	adds	r4, #2
   32a0c:	1d1a      	adds	r2, r3, #4
   32a0e:	681b      	ldr	r3, [r3, #0]
   32a10:	2b00      	cmp	r3, #0
   32a12:	9203      	str	r2, [sp, #12]
   32a14:	bfb8      	it	lt
   32a16:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   32a1a:	9305      	str	r3, [sp, #20]
   32a1c:	4e2e      	ldr	r6, [pc, #184]	; (32ad8 <_svfiprintf_r+0x1e0>)
   32a1e:	2203      	movs	r2, #3
   32a20:	7821      	ldrb	r1, [r4, #0]
   32a22:	4630      	mov	r0, r6
   32a24:	f006 fab1 	bl	38f8a <memchr>
   32a28:	b138      	cbz	r0, 32a3a <_svfiprintf_r+0x142>
   32a2a:	2340      	movs	r3, #64	; 0x40
   32a2c:	1b80      	subs	r0, r0, r6
   32a2e:	3401      	adds	r4, #1
   32a30:	fa03 f000 	lsl.w	r0, r3, r0
   32a34:	9b04      	ldr	r3, [sp, #16]
   32a36:	4303      	orrs	r3, r0
   32a38:	9304      	str	r3, [sp, #16]
   32a3a:	f814 1b01 	ldrb.w	r1, [r4], #1
   32a3e:	2206      	movs	r2, #6
   32a40:	4826      	ldr	r0, [pc, #152]	; (32adc <_svfiprintf_r+0x1e4>)
   32a42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   32a46:	f006 faa0 	bl	38f8a <memchr>
   32a4a:	2800      	cmp	r0, #0
   32a4c:	d038      	beq.n	32ac0 <_svfiprintf_r+0x1c8>
   32a4e:	4b24      	ldr	r3, [pc, #144]	; (32ae0 <_svfiprintf_r+0x1e8>)
   32a50:	bb13      	cbnz	r3, 32a98 <_svfiprintf_r+0x1a0>
   32a52:	9b03      	ldr	r3, [sp, #12]
   32a54:	3307      	adds	r3, #7
   32a56:	f023 0307 	bic.w	r3, r3, #7
   32a5a:	3308      	adds	r3, #8
   32a5c:	9303      	str	r3, [sp, #12]
   32a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   32a60:	4443      	add	r3, r8
   32a62:	9309      	str	r3, [sp, #36]	; 0x24
   32a64:	e76e      	b.n	32944 <_svfiprintf_r+0x4c>
   32a66:	fb06 3202 	mla	r2, r6, r2, r3
   32a6a:	2001      	movs	r0, #1
   32a6c:	460c      	mov	r4, r1
   32a6e:	e7a8      	b.n	329c2 <_svfiprintf_r+0xca>
   32a70:	2300      	movs	r3, #0
   32a72:	3401      	adds	r4, #1
   32a74:	260a      	movs	r6, #10
   32a76:	4619      	mov	r1, r3
   32a78:	9305      	str	r3, [sp, #20]
   32a7a:	4620      	mov	r0, r4
   32a7c:	f810 2b01 	ldrb.w	r2, [r0], #1
   32a80:	3a30      	subs	r2, #48	; 0x30
   32a82:	2a09      	cmp	r2, #9
   32a84:	d903      	bls.n	32a8e <_svfiprintf_r+0x196>
   32a86:	2b00      	cmp	r3, #0
   32a88:	d0c8      	beq.n	32a1c <_svfiprintf_r+0x124>
   32a8a:	9105      	str	r1, [sp, #20]
   32a8c:	e7c6      	b.n	32a1c <_svfiprintf_r+0x124>
   32a8e:	fb06 2101 	mla	r1, r6, r1, r2
   32a92:	2301      	movs	r3, #1
   32a94:	4604      	mov	r4, r0
   32a96:	e7f0      	b.n	32a7a <_svfiprintf_r+0x182>
   32a98:	ab03      	add	r3, sp, #12
   32a9a:	462a      	mov	r2, r5
   32a9c:	a904      	add	r1, sp, #16
   32a9e:	4638      	mov	r0, r7
   32aa0:	9300      	str	r3, [sp, #0]
   32aa2:	4b10      	ldr	r3, [pc, #64]	; (32ae4 <_svfiprintf_r+0x1ec>)
   32aa4:	f7fe fd94 	bl	315d0 <_printf_float>
   32aa8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   32aac:	4680      	mov	r8, r0
   32aae:	d1d6      	bne.n	32a5e <_svfiprintf_r+0x166>
   32ab0:	89ab      	ldrh	r3, [r5, #12]
   32ab2:	065b      	lsls	r3, r3, #25
   32ab4:	f53f af34 	bmi.w	32920 <_svfiprintf_r+0x28>
   32ab8:	9809      	ldr	r0, [sp, #36]	; 0x24
   32aba:	b01d      	add	sp, #116	; 0x74
   32abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32ac0:	ab03      	add	r3, sp, #12
   32ac2:	462a      	mov	r2, r5
   32ac4:	a904      	add	r1, sp, #16
   32ac6:	4638      	mov	r0, r7
   32ac8:	9300      	str	r3, [sp, #0]
   32aca:	4b06      	ldr	r3, [pc, #24]	; (32ae4 <_svfiprintf_r+0x1ec>)
   32acc:	f7fe ffaa 	bl	31a24 <_printf_i>
   32ad0:	e7ea      	b.n	32aa8 <_svfiprintf_r+0x1b0>
   32ad2:	bf00      	nop
   32ad4:	0004027c 	.word	0x0004027c
   32ad8:	00040282 	.word	0x00040282
   32adc:	00040286 	.word	0x00040286
   32ae0:	000315d1 	.word	0x000315d1
   32ae4:	00039a87 	.word	0x00039a87

00032ae8 <raise>:
   32ae8:	4b02      	ldr	r3, [pc, #8]	; (32af4 <raise+0xc>)
   32aea:	4601      	mov	r1, r0
   32aec:	6818      	ldr	r0, [r3, #0]
   32aee:	f007 b825 	b.w	39b3c <_raise_r>
   32af2:	bf00      	nop
   32af4:	20020234 	.word	0x20020234

00032af8 <_kill_r>:
   32af8:	b538      	push	{r3, r4, r5, lr}
   32afa:	2300      	movs	r3, #0
   32afc:	4c06      	ldr	r4, [pc, #24]	; (32b18 <_kill_r+0x20>)
   32afe:	4605      	mov	r5, r0
   32b00:	4608      	mov	r0, r1
   32b02:	4611      	mov	r1, r2
   32b04:	6023      	str	r3, [r4, #0]
   32b06:	f002 fcdb 	bl	354c0 <_kill>
   32b0a:	1c43      	adds	r3, r0, #1
   32b0c:	d102      	bne.n	32b14 <_kill_r+0x1c>
   32b0e:	6823      	ldr	r3, [r4, #0]
   32b10:	b103      	cbz	r3, 32b14 <_kill_r+0x1c>
   32b12:	602b      	str	r3, [r5, #0]
   32b14:	bd38      	pop	{r3, r4, r5, pc}
   32b16:	bf00      	nop
   32b18:	200291f8 	.word	0x200291f8

00032b1c <_write_r>:
   32b1c:	b538      	push	{r3, r4, r5, lr}
   32b1e:	4605      	mov	r5, r0
   32b20:	4c06      	ldr	r4, [pc, #24]	; (32b3c <_write_r+0x20>)
   32b22:	4608      	mov	r0, r1
   32b24:	4611      	mov	r1, r2
   32b26:	2200      	movs	r2, #0
   32b28:	6022      	str	r2, [r4, #0]
   32b2a:	461a      	mov	r2, r3
   32b2c:	f002 fcbd 	bl	354aa <_write>
   32b30:	1c43      	adds	r3, r0, #1
   32b32:	d102      	bne.n	32b3a <_write_r+0x1e>
   32b34:	6823      	ldr	r3, [r4, #0]
   32b36:	b103      	cbz	r3, 32b3a <_write_r+0x1e>
   32b38:	602b      	str	r3, [r5, #0]
   32b3a:	bd38      	pop	{r3, r4, r5, pc}
   32b3c:	200291f8 	.word	0x200291f8

00032b40 <_close_r>:
   32b40:	b538      	push	{r3, r4, r5, lr}
   32b42:	2300      	movs	r3, #0
   32b44:	4c05      	ldr	r4, [pc, #20]	; (32b5c <_close_r+0x1c>)
   32b46:	4605      	mov	r5, r0
   32b48:	4608      	mov	r0, r1
   32b4a:	6023      	str	r3, [r4, #0]
   32b4c:	f002 fcb1 	bl	354b2 <_close>
   32b50:	1c43      	adds	r3, r0, #1
   32b52:	d102      	bne.n	32b5a <_close_r+0x1a>
   32b54:	6823      	ldr	r3, [r4, #0]
   32b56:	b103      	cbz	r3, 32b5a <_close_r+0x1a>
   32b58:	602b      	str	r3, [r5, #0]
   32b5a:	bd38      	pop	{r3, r4, r5, pc}
   32b5c:	200291f8 	.word	0x200291f8

00032b60 <_fstat_r>:
   32b60:	b538      	push	{r3, r4, r5, lr}
   32b62:	2300      	movs	r3, #0
   32b64:	4c06      	ldr	r4, [pc, #24]	; (32b80 <_fstat_r+0x20>)
   32b66:	4605      	mov	r5, r0
   32b68:	4608      	mov	r0, r1
   32b6a:	4611      	mov	r1, r2
   32b6c:	6023      	str	r3, [r4, #0]
   32b6e:	f002 fcab 	bl	354c8 <_fstat>
   32b72:	1c43      	adds	r3, r0, #1
   32b74:	d102      	bne.n	32b7c <_fstat_r+0x1c>
   32b76:	6823      	ldr	r3, [r4, #0]
   32b78:	b103      	cbz	r3, 32b7c <_fstat_r+0x1c>
   32b7a:	602b      	str	r3, [r5, #0]
   32b7c:	bd38      	pop	{r3, r4, r5, pc}
   32b7e:	bf00      	nop
   32b80:	200291f8 	.word	0x200291f8

00032b84 <_isatty_r>:
   32b84:	b538      	push	{r3, r4, r5, lr}
   32b86:	2300      	movs	r3, #0
   32b88:	4c05      	ldr	r4, [pc, #20]	; (32ba0 <_isatty_r+0x1c>)
   32b8a:	4605      	mov	r5, r0
   32b8c:	4608      	mov	r0, r1
   32b8e:	6023      	str	r3, [r4, #0]
   32b90:	f002 fc94 	bl	354bc <_isatty>
   32b94:	1c43      	adds	r3, r0, #1
   32b96:	d102      	bne.n	32b9e <_isatty_r+0x1a>
   32b98:	6823      	ldr	r3, [r4, #0]
   32b9a:	b103      	cbz	r3, 32b9e <_isatty_r+0x1a>
   32b9c:	602b      	str	r3, [r5, #0]
   32b9e:	bd38      	pop	{r3, r4, r5, pc}
   32ba0:	200291f8 	.word	0x200291f8

00032ba4 <_lseek_r>:
   32ba4:	b538      	push	{r3, r4, r5, lr}
   32ba6:	4605      	mov	r5, r0
   32ba8:	4c06      	ldr	r4, [pc, #24]	; (32bc4 <_lseek_r+0x20>)
   32baa:	4608      	mov	r0, r1
   32bac:	4611      	mov	r1, r2
   32bae:	2200      	movs	r2, #0
   32bb0:	6022      	str	r2, [r4, #0]
   32bb2:	461a      	mov	r2, r3
   32bb4:	f002 fc80 	bl	354b8 <_lseek>
   32bb8:	1c43      	adds	r3, r0, #1
   32bba:	d102      	bne.n	32bc2 <_lseek_r+0x1e>
   32bbc:	6823      	ldr	r3, [r4, #0]
   32bbe:	b103      	cbz	r3, 32bc2 <_lseek_r+0x1e>
   32bc0:	602b      	str	r3, [r5, #0]
   32bc2:	bd38      	pop	{r3, r4, r5, pc}
   32bc4:	200291f8 	.word	0x200291f8

00032bc8 <_read_r>:
   32bc8:	b538      	push	{r3, r4, r5, lr}
   32bca:	4605      	mov	r5, r0
   32bcc:	4c06      	ldr	r4, [pc, #24]	; (32be8 <_read_r+0x20>)
   32bce:	4608      	mov	r0, r1
   32bd0:	4611      	mov	r1, r2
   32bd2:	2200      	movs	r2, #0
   32bd4:	6022      	str	r2, [r4, #0]
   32bd6:	461a      	mov	r2, r3
   32bd8:	f002 fc63 	bl	354a2 <_read>
   32bdc:	1c43      	adds	r3, r0, #1
   32bde:	d102      	bne.n	32be6 <_read_r+0x1e>
   32be0:	6823      	ldr	r3, [r4, #0]
   32be2:	b103      	cbz	r3, 32be6 <_read_r+0x1e>
   32be4:	602b      	str	r3, [r5, #0]
   32be6:	bd38      	pop	{r3, r4, r5, pc}
   32be8:	200291f8 	.word	0x200291f8

00032bec <received_config_handler>:
void received_config_handler(const struct mqtt_publish_message *message) {
   32bec:	b508      	push	{r3, lr}
	cJSON * data_json = cJSON_Parse(message->payload.data);
   32bee:	68c0      	ldr	r0, [r0, #12]
   32bf0:	f000 f8cc 	bl	32d8c <cJSON_Parse>
}
   32bf4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	cJSON_Delete(data_json);
   32bf8:	f7e4 b9bc 	b.w	16f74 <cJSON_Delete>

00032bfc <calculate_avg_val>:
{
   32bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    for(s32_t i=0; i<sz; i++) {
   32bfe:	2400      	movs	r4, #0
        } else if (is_qual && a[i] != EXCLUDE) {
   32c00:	f240 37e7 	movw	r7, #999	; 0x3e7
    s32_t excl_cnt = 0;
   32c04:	4625      	mov	r5, r4
    s32_t sum = 0;
   32c06:	4623      	mov	r3, r4
    for(s32_t i=0; i<sz; i++) {
   32c08:	428c      	cmp	r4, r1
   32c0a:	db07      	blt.n	32c1c <calculate_avg_val+0x20>
    if (excl_cnt == sz) {
   32c0c:	428d      	cmp	r5, r1
        return (sum/(sz-excl_cnt));
   32c0e:	bf1a      	itte	ne
   32c10:	1b48      	subne	r0, r1, r5
   32c12:	fb93 f0f0 	sdivne	r0, r3, r0
        return (EXCLUDE);
   32c16:	f240 30e7 	movweq	r0, #999	; 0x3e7
}
   32c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (!is_qual) {
   32c1c:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
   32c20:	b912      	cbnz	r2, 32c28 <calculate_avg_val+0x2c>
            sum += a[i];
   32c22:	4433      	add	r3, r6
    for(s32_t i=0; i<sz; i++) {
   32c24:	3401      	adds	r4, #1
   32c26:	e7ef      	b.n	32c08 <calculate_avg_val+0xc>
        } else if (is_qual && a[i] != EXCLUDE) {
   32c28:	42be      	cmp	r6, r7
   32c2a:	d1fa      	bne.n	32c22 <calculate_avg_val+0x26>
            excl_cnt += 1;
   32c2c:	3501      	adds	r5, #1
   32c2e:	e7f9      	b.n	32c24 <calculate_avg_val+0x28>

00032c30 <calculate_min_val>:
    for(i=1; i<sz; i++) {
   32c30:	2301      	movs	r3, #1
{
   32c32:	b510      	push	{r4, lr}
 	min=a[0];
   32c34:	6802      	ldr	r2, [r0, #0]
    for(i=1; i<sz; i++) {
   32c36:	428b      	cmp	r3, r1
   32c38:	db01      	blt.n	32c3e <calculate_min_val+0xe>
}
   32c3a:	4610      	mov	r0, r2
   32c3c:	bd10      	pop	{r4, pc}
        if(min>a[i]) {
   32c3e:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    for(i=1; i<sz; i++) {
   32c42:	3301      	adds	r3, #1
   32c44:	42a2      	cmp	r2, r4
   32c46:	bfa8      	it	ge
   32c48:	4622      	movge	r2, r4
   32c4a:	e7f4      	b.n	32c36 <calculate_min_val+0x6>

00032c4c <calculate_max_val>:
{
   32c4c:	b570      	push	{r4, r5, r6, lr}
    for(i=1; i<sz; i++) 
   32c4e:	2501      	movs	r5, #1
            if(max==EXCLUDE || max<a[i]) {
   32c50:	f240 36e7 	movw	r6, #999	; 0x3e7
    max=a[0];
   32c54:	6803      	ldr	r3, [r0, #0]
    for(i=1; i<sz; i++) 
   32c56:	428d      	cmp	r5, r1
   32c58:	db01      	blt.n	32c5e <calculate_max_val+0x12>
}
   32c5a:	4618      	mov	r0, r3
   32c5c:	bd70      	pop	{r4, r5, r6, pc}
        if (is_qual) {
   32c5e:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
   32c62:	b10a      	cbz	r2, 32c68 <calculate_max_val+0x1c>
            if(max==EXCLUDE || max<a[i]) {
   32c64:	42b3      	cmp	r3, r6
   32c66:	d002      	beq.n	32c6e <calculate_max_val+0x22>
            if(max<a[i]) {
   32c68:	429c      	cmp	r4, r3
   32c6a:	bfb8      	it	lt
   32c6c:	461c      	movlt	r4, r3
    for(i=1; i<sz; i++) 
   32c6e:	3501      	adds	r5, #1
   32c70:	4623      	mov	r3, r4
   32c72:	e7f0      	b.n	32c56 <calculate_max_val+0xa>

00032c74 <k_msgq_get_atomic>:
int k_msgq_get_atomic(struct k_msgq *q, void *data, k_timeout_t timeout){
   32c74:	b510      	push	{r4, lr}
	__asm__ volatile(
   32c76:	f04f 0320 	mov.w	r3, #32
   32c7a:	f3ef 8411 	mrs	r4, BASEPRI
   32c7e:	f383 8811 	msr	BASEPRI, r3
   32c82:	f3bf 8f6f 	isb	sy
	return z_impl_k_msgq_get(msgq, data, timeout);
   32c86:	f7f9 fbd3 	bl	2c430 <z_impl_k_msgq_get>
	__asm__ volatile(
   32c8a:	f384 8811 	msr	BASEPRI, r4
   32c8e:	f3bf 8f6f 	isb	sy
}
   32c92:	bd10      	pop	{r4, pc}

00032c94 <k_msgq_put_atomic>:
int k_msgq_put_atomic(struct k_msgq *q, void *data, k_timeout_t timeout){
   32c94:	b510      	push	{r4, lr}
	__asm__ volatile(
   32c96:	f04f 0320 	mov.w	r3, #32
   32c9a:	f3ef 8411 	mrs	r4, BASEPRI
   32c9e:	f383 8811 	msr	BASEPRI, r3
   32ca2:	f3bf 8f6f 	isb	sy
	return z_impl_k_msgq_put(msgq, data, timeout);
   32ca6:	f7f9 fb29 	bl	2c2fc <z_impl_k_msgq_put>
	__asm__ volatile(
   32caa:	f384 8811 	msr	BASEPRI, r4
   32cae:	f3bf 8f6f 	isb	sy
}
   32cb2:	bd10      	pop	{r4, pc}

00032cb4 <parse_hex4>:
{
   32cb4:	b510      	push	{r4, lr}
	if (*str >= '0' && *str <= '9')
   32cb6:	7802      	ldrb	r2, [r0, #0]
   32cb8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   32cbc:	b2d9      	uxtb	r1, r3
   32cbe:	2909      	cmp	r1, #9
   32cc0:	d905      	bls.n	32cce <parse_hex4+0x1a>
	else if (*str >= 'A' && *str <= 'F')
   32cc2:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
   32cc6:	2b05      	cmp	r3, #5
   32cc8:	d81a      	bhi.n	32d00 <parse_hex4+0x4c>
		h += 10 + (*str) - 'A';
   32cca:	f1a2 0337 	sub.w	r3, r2, #55	; 0x37
	if (*str >= '0' && *str <= '9')
   32cce:	7842      	ldrb	r2, [r0, #1]
	h = h << 4;
   32cd0:	011b      	lsls	r3, r3, #4
	if (*str >= '0' && *str <= '9')
   32cd2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   32cd6:	b2cc      	uxtb	r4, r1
   32cd8:	2c09      	cmp	r4, #9
   32cda:	d818      	bhi.n	32d0e <parse_hex4+0x5a>
		h += (*str) - '0';
   32cdc:	440b      	add	r3, r1
	if (*str >= '0' && *str <= '9')
   32cde:	7882      	ldrb	r2, [r0, #2]
	h = h << 4;
   32ce0:	011b      	lsls	r3, r3, #4
	if (*str >= '0' && *str <= '9')
   32ce2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   32ce6:	b2cc      	uxtb	r4, r1
   32ce8:	2c09      	cmp	r4, #9
   32cea:	d81d      	bhi.n	32d28 <parse_hex4+0x74>
		h += (*str) - '0';
   32cec:	440b      	add	r3, r1
	if (*str >= '0' && *str <= '9')
   32cee:	78c0      	ldrb	r0, [r0, #3]
	h = h << 4;
   32cf0:	011b      	lsls	r3, r3, #4
	if (*str >= '0' && *str <= '9')
   32cf2:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
   32cf6:	b2d1      	uxtb	r1, r2
   32cf8:	2909      	cmp	r1, #9
   32cfa:	d822      	bhi.n	32d42 <parse_hex4+0x8e>
		h += (*str) - '0';
   32cfc:	18d0      	adds	r0, r2, r3
}
   32cfe:	bd10      	pop	{r4, pc}
	else if (*str >= 'a' && *str <= 'f')
   32d00:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
   32d04:	2b05      	cmp	r3, #5
   32d06:	d829      	bhi.n	32d5c <parse_hex4+0xa8>
		h += 10 + (*str) - 'a';
   32d08:	f1a2 0357 	sub.w	r3, r2, #87	; 0x57
   32d0c:	e7df      	b.n	32cce <parse_hex4+0x1a>
	else if (*str >= 'A' && *str <= 'F')
   32d0e:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   32d12:	2905      	cmp	r1, #5
   32d14:	d802      	bhi.n	32d1c <parse_hex4+0x68>
		h += 10 + (*str) - 'A';
   32d16:	3a37      	subs	r2, #55	; 0x37
		h += 10 + (*str) - 'a';
   32d18:	4413      	add	r3, r2
   32d1a:	e7e0      	b.n	32cde <parse_hex4+0x2a>
	else if (*str >= 'a' && *str <= 'f')
   32d1c:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
   32d20:	2905      	cmp	r1, #5
   32d22:	d81b      	bhi.n	32d5c <parse_hex4+0xa8>
		h += 10 + (*str) - 'a';
   32d24:	3a57      	subs	r2, #87	; 0x57
   32d26:	e7f7      	b.n	32d18 <parse_hex4+0x64>
	else if (*str >= 'A' && *str <= 'F')
   32d28:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   32d2c:	2905      	cmp	r1, #5
   32d2e:	d802      	bhi.n	32d36 <parse_hex4+0x82>
		h += 10 + (*str) - 'A';
   32d30:	3a37      	subs	r2, #55	; 0x37
		h += 10 + (*str) - 'a';
   32d32:	4413      	add	r3, r2
   32d34:	e7db      	b.n	32cee <parse_hex4+0x3a>
	else if (*str >= 'a' && *str <= 'f')
   32d36:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
   32d3a:	2905      	cmp	r1, #5
   32d3c:	d80e      	bhi.n	32d5c <parse_hex4+0xa8>
		h += 10 + (*str) - 'a';
   32d3e:	3a57      	subs	r2, #87	; 0x57
   32d40:	e7f7      	b.n	32d32 <parse_hex4+0x7e>
	else if (*str >= 'A' && *str <= 'F')
   32d42:	f1a0 0241 	sub.w	r2, r0, #65	; 0x41
   32d46:	2a05      	cmp	r2, #5
   32d48:	d802      	bhi.n	32d50 <parse_hex4+0x9c>
		h += 10 + (*str) - 'A';
   32d4a:	3837      	subs	r0, #55	; 0x37
		h += 10 + (*str) - 'a';
   32d4c:	4418      	add	r0, r3
   32d4e:	e7d6      	b.n	32cfe <parse_hex4+0x4a>
	else if (*str >= 'a' && *str <= 'f')
   32d50:	f1a0 0261 	sub.w	r2, r0, #97	; 0x61
   32d54:	2a05      	cmp	r2, #5
   32d56:	d801      	bhi.n	32d5c <parse_hex4+0xa8>
		h += 10 + (*str) - 'a';
   32d58:	3857      	subs	r0, #87	; 0x57
   32d5a:	e7f7      	b.n	32d4c <parse_hex4+0x98>
		return 0;
   32d5c:	2000      	movs	r0, #0
   32d5e:	e7ce      	b.n	32cfe <parse_hex4+0x4a>

00032d60 <skip>:
{
   32d60:	4603      	mov	r3, r0
	while (in && *in && (unsigned char)*in <= 32)
   32d62:	4618      	mov	r0, r3
   32d64:	b123      	cbz	r3, 32d70 <skip+0x10>
   32d66:	7802      	ldrb	r2, [r0, #0]
   32d68:	3301      	adds	r3, #1
   32d6a:	3a01      	subs	r2, #1
   32d6c:	2a1f      	cmp	r2, #31
   32d6e:	d9f8      	bls.n	32d62 <skip+0x2>
}
   32d70:	4770      	bx	lr

00032d72 <update>:
{
   32d72:	b510      	push	{r4, lr}
	if (!p || !p->buffer)
   32d74:	b138      	cbz	r0, 32d86 <update+0x14>
   32d76:	6803      	ldr	r3, [r0, #0]
   32d78:	b133      	cbz	r3, 32d88 <update+0x16>
	str = p->buffer + p->offset;
   32d7a:	6884      	ldr	r4, [r0, #8]
	return p->offset + strlens(str);
   32d7c:	1918      	adds	r0, r3, r4
   32d7e:	d001      	beq.n	32d84 <update+0x12>
   32d80:	f7df f97e 	bl	12080 <strlen>
   32d84:	4420      	add	r0, r4
}
   32d86:	bd10      	pop	{r4, pc}
		return 0;
   32d88:	4618      	mov	r0, r3
   32d8a:	e7fc      	b.n	32d86 <update+0x14>

00032d8c <cJSON_Parse>:
	return cJSON_ParseWithOpts(value, 0, 0);
   32d8c:	2200      	movs	r2, #0
   32d8e:	4611      	mov	r1, r2
   32d90:	f7e4 b914 	b.w	16fbc <cJSON_ParseWithOpts>

00032d94 <cJSON_Print>:
char *cJSON_Print(cJSON *item) { return print_value(item, 0, 1, 0); }
   32d94:	2300      	movs	r3, #0
   32d96:	2201      	movs	r2, #1
   32d98:	4619      	mov	r1, r3
   32d9a:	f7e3 be9b 	b.w	16ad4 <print_value>

00032d9e <cJSON_AddItemToArray>:
	if (!item)
   32d9e:	b149      	cbz	r1, 32db4 <cJSON_AddItemToArray+0x16>
	cJSON *c = array->child;
   32da0:	6883      	ldr	r3, [r0, #8]
	if (!c) {
   32da2:	b913      	cbnz	r3, 32daa <cJSON_AddItemToArray+0xc>
		array->child = item;
   32da4:	6081      	str	r1, [r0, #8]
   32da6:	4770      	bx	lr
   32da8:	4613      	mov	r3, r2
		while (c && c->next)
   32daa:	681a      	ldr	r2, [r3, #0]
   32dac:	2a00      	cmp	r2, #0
   32dae:	d1fb      	bne.n	32da8 <cJSON_AddItemToArray+0xa>
	prev->next = item;
   32db0:	6019      	str	r1, [r3, #0]
	item->prev = prev;
   32db2:	604b      	str	r3, [r1, #4]
}
   32db4:	4770      	bx	lr

00032db6 <cJSON_CreateNumber>:
	if (item)
		item->type = b ? cJSON_True : cJSON_False;
	return item;
}
cJSON *cJSON_CreateNumber(double num)
{
   32db6:	b513      	push	{r0, r1, r4, lr}
   32db8:	ed8d 0b00 	vstr	d0, [sp]
	cJSON *item = cJSON_New_Item();
   32dbc:	f7e3 fb78 	bl	164b0 <cJSON_New_Item>
	if (item) {
   32dc0:	4604      	mov	r4, r0
   32dc2:	b150      	cbz	r0, 32dda <cJSON_CreateNumber+0x24>
		item->type = cJSON_Number;
		item->valuedouble = num;
   32dc4:	ed9d 0b00 	vldr	d0, [sp]
		item->type = cJSON_Number;
   32dc8:	2303      	movs	r3, #3
		item->valuedouble = num;
   32dca:	ed80 0b06 	vstr	d0, [r0, #24]
		item->type = cJSON_Number;
   32dce:	60c3      	str	r3, [r0, #12]
		item->valueint = (int)num;
   32dd0:	ec51 0b10 	vmov	r0, r1, d0
   32dd4:	f7da fc04 	bl	d5e0 <__aeabi_d2iz>
   32dd8:	6160      	str	r0, [r4, #20]
	}
	return item;
}
   32dda:	4620      	mov	r0, r4
   32ddc:	b002      	add	sp, #8
   32dde:	bd10      	pop	{r4, pc}

00032de0 <cJSON_CreateString>:
cJSON *cJSON_CreateString(const char *string)
{
   32de0:	b538      	push	{r3, r4, r5, lr}
   32de2:	4605      	mov	r5, r0
	cJSON *item = cJSON_New_Item();
   32de4:	f7e3 fb64 	bl	164b0 <cJSON_New_Item>
	if (item) {
   32de8:	4604      	mov	r4, r0
   32dea:	b128      	cbz	r0, 32df8 <cJSON_CreateString+0x18>
		item->type = cJSON_String;
   32dec:	2304      	movs	r3, #4
   32dee:	60c3      	str	r3, [r0, #12]
		item->valuestring = cJSON_strdup(string);
   32df0:	4628      	mov	r0, r5
   32df2:	f7e3 fc9f 	bl	16734 <cJSON_strdup>
   32df6:	6120      	str	r0, [r4, #16]
	}
	return item;
}
   32df8:	4620      	mov	r0, r4
   32dfa:	bd38      	pop	{r3, r4, r5, pc}

00032dfc <cJSON_CreateObject>:
	if (item)
		item->type = cJSON_Array;
	return item;
}
cJSON *cJSON_CreateObject(void)
{
   32dfc:	b508      	push	{r3, lr}
	cJSON *item = cJSON_New_Item();
   32dfe:	f7e3 fb57 	bl	164b0 <cJSON_New_Item>
	if (item)
   32e02:	b108      	cbz	r0, 32e08 <cJSON_CreateObject+0xc>
		item->type = cJSON_Object;
   32e04:	2306      	movs	r3, #6
   32e06:	60c3      	str	r3, [r0, #12]
	return item;
}
   32e08:	bd08      	pop	{r3, pc}

00032e0a <config_load>:
}
   32e0a:	2000      	movs	r0, #0
   32e0c:	4770      	bx	lr

00032e0e <get_timestamp_us>:
{
   32e0e:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_uptime_ticks();
   32e10:	f006 f809 	bl	38e26 <z_impl_k_uptime_ticks>
			return (t * to_hz + off) / from_hz;
   32e14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   32e18:	fba0 4502 	umull	r4, r5, r0, r2
   32e1c:	fb02 5501 	mla	r5, r2, r1, r5
   32e20:	0be3      	lsrs	r3, r4, #15
   32e22:	ea43 4345 	orr.w	r3, r3, r5, lsl #17
	return k_uptime_get()*1000;
   32e26:	fba3 0102 	umull	r0, r1, r3, r2
   32e2a:	0bec      	lsrs	r4, r5, #15
   32e2c:	fb02 1104 	mla	r1, r2, r4, r1
}
   32e30:	bd38      	pop	{r3, r4, r5, pc}

00032e32 <k_sleep>:
	return z_impl_k_sleep(timeout);
   32e32:	f7fb b88f 	b.w	2df54 <z_impl_k_sleep>

00032e36 <delay_ms>:
	k_sleep(K_MSEC(period));
   32e36:	f7ff bffc 	b.w	32e32 <k_sleep>

00032e3a <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
   32e3a:	b148      	cbz	r0, 32e50 <null_ptr_check+0x16>
   32e3c:	6c83      	ldr	r3, [r0, #72]	; 0x48
   32e3e:	b13b      	cbz	r3, 32e50 <null_ptr_check+0x16>
   32e40:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   32e42:	b12b      	cbz	r3, 32e50 <null_ptr_check+0x16>
   32e44:	6d00      	ldr	r0, [r0, #80]	; 0x50
   32e46:	fab0 f080 	clz	r0, r0
   32e4a:	0940      	lsrs	r0, r0, #5
   32e4c:	4240      	negs	r0, r0
   32e4e:	4770      	bx	lr
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
   32e50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		/* Device structure is fine */
		rslt = BME680_OK;
	}

	return rslt;
}
   32e54:	4770      	bx	lr

00032e56 <set_mem_page>:
{
   32e56:	b573      	push	{r0, r1, r4, r5, r6, lr}
   32e58:	4602      	mov	r2, r0
	rslt = null_ptr_check(dev);
   32e5a:	4608      	mov	r0, r1
{
   32e5c:	460c      	mov	r4, r1
	rslt = null_ptr_check(dev);
   32e5e:	f7ff ffec 	bl	32e3a <null_ptr_check>
	if (rslt == BME680_OK) {
   32e62:	4605      	mov	r5, r0
   32e64:	bb40      	cbnz	r0, 32eb8 <set_mem_page+0x62>
			mem_page = BME680_MEM_PAGE0;
   32e66:	f012 0f80 	tst.w	r2, #128	; 0x80
   32e6a:	bf14      	ite	ne
   32e6c:	2300      	movne	r3, #0
   32e6e:	2310      	moveq	r3, #16
		if (mem_page != dev->mem_page) {
   32e70:	78ca      	ldrb	r2, [r1, #3]
   32e72:	429a      	cmp	r2, r3
   32e74:	d020      	beq.n	32eb8 <set_mem_page+0x62>
			dev->mem_page = mem_page;
   32e76:	70cb      	strb	r3, [r1, #3]
			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
   32e78:	6c8e      	ldr	r6, [r1, #72]	; 0x48
   32e7a:	2301      	movs	r3, #1
   32e7c:	f10d 0207 	add.w	r2, sp, #7
   32e80:	21f3      	movs	r1, #243	; 0xf3
   32e82:	7860      	ldrb	r0, [r4, #1]
   32e84:	47b0      	blx	r6
   32e86:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
			if (dev->com_rslt != 0)
   32e8a:	b998      	cbnz	r0, 32eb4 <set_mem_page+0x5e>
				reg = reg & (~BME680_MEM_PAGE_MSK);
   32e8c:	f89d 2007 	ldrb.w	r2, [sp, #7]
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
   32e90:	78e3      	ldrb	r3, [r4, #3]
				reg = reg & (~BME680_MEM_PAGE_MSK);
   32e92:	f022 0210 	bic.w	r2, r2, #16
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
   32e96:	f003 0310 	and.w	r3, r3, #16
   32e9a:	4313      	orrs	r3, r2
   32e9c:	f88d 3007 	strb.w	r3, [sp, #7]
				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
   32ea0:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
   32ea2:	2301      	movs	r3, #1
   32ea4:	f10d 0207 	add.w	r2, sp, #7
   32ea8:	2173      	movs	r1, #115	; 0x73
   32eaa:	7860      	ldrb	r0, [r4, #1]
   32eac:	47b0      	blx	r6
   32eae:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
				if (dev->com_rslt != 0)
   32eb2:	b108      	cbz	r0, 32eb8 <set_mem_page+0x62>
					rslt = BME680_E_COM_FAIL;
   32eb4:	f06f 0501 	mvn.w	r5, #1
}
   32eb8:	4628      	mov	r0, r5
   32eba:	b002      	add	sp, #8
   32ebc:	bd70      	pop	{r4, r5, r6, pc}

00032ebe <get_mem_page.part.3>:
static int8_t get_mem_page(struct bme680_dev *dev)
   32ebe:	b537      	push	{r0, r1, r2, r4, r5, lr}
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
   32ec0:	2301      	movs	r3, #1
static int8_t get_mem_page(struct bme680_dev *dev)
   32ec2:	4604      	mov	r4, r0
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
   32ec4:	6c85      	ldr	r5, [r0, #72]	; 0x48
   32ec6:	f10d 0207 	add.w	r2, sp, #7
   32eca:	21f3      	movs	r1, #243	; 0xf3
   32ecc:	7840      	ldrb	r0, [r0, #1]
   32ece:	47a8      	blx	r5
   32ed0:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
		if (dev->com_rslt != 0)
   32ed4:	b930      	cbnz	r0, 32ee4 <get_mem_page.part.3+0x26>
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
   32ed6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   32eda:	f003 0310 	and.w	r3, r3, #16
   32ede:	70e3      	strb	r3, [r4, #3]
}
   32ee0:	b003      	add	sp, #12
   32ee2:	bd30      	pop	{r4, r5, pc}
			rslt = BME680_E_COM_FAIL;
   32ee4:	f06f 0001 	mvn.w	r0, #1
   32ee8:	e7fa      	b.n	32ee0 <get_mem_page.part.3+0x22>

00032eea <boundary_check.isra.1.constprop.6>:
		if (*value > max) {
   32eea:	7803      	ldrb	r3, [r0, #0]
   32eec:	428b      	cmp	r3, r1
			*value = max;
   32eee:	bf84      	itt	hi
   32ef0:	7001      	strbhi	r1, [r0, #0]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
   32ef2:	7813      	ldrbhi	r3, [r2, #0]
}
   32ef4:	f04f 0000 	mov.w	r0, #0
			dev->info_msg |= BME680_I_MAX_CORRECTION;
   32ef8:	bf84      	itt	hi
   32efa:	f043 0302 	orrhi.w	r3, r3, #2
   32efe:	7013      	strbhi	r3, [r2, #0]
}
   32f00:	4770      	bx	lr

00032f02 <bme680_get_regs>:
{
   32f02:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   32f06:	4606      	mov	r6, r0
	rslt = null_ptr_check(dev);
   32f08:	4618      	mov	r0, r3
{
   32f0a:	4688      	mov	r8, r1
   32f0c:	4691      	mov	r9, r2
   32f0e:	461d      	mov	r5, r3
	rslt = null_ptr_check(dev);
   32f10:	f7ff ff93 	bl	32e3a <null_ptr_check>
	if (rslt == BME680_OK) {
   32f14:	4604      	mov	r4, r0
   32f16:	b9a8      	cbnz	r0, 32f44 <bme680_get_regs+0x42>
		if (dev->intf == BME680_SPI_INTF) {
   32f18:	78ab      	ldrb	r3, [r5, #2]
   32f1a:	b93b      	cbnz	r3, 32f2c <bme680_get_regs+0x2a>
			rslt = set_mem_page(reg_addr, dev);
   32f1c:	4629      	mov	r1, r5
   32f1e:	4630      	mov	r0, r6
   32f20:	f7ff ff99 	bl	32e56 <set_mem_page>
			if (rslt == BME680_OK)
   32f24:	4604      	mov	r4, r0
   32f26:	b908      	cbnz	r0, 32f2c <bme680_get_regs+0x2a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
   32f28:	f046 0680 	orr.w	r6, r6, #128	; 0x80
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
   32f2c:	6caf      	ldr	r7, [r5, #72]	; 0x48
   32f2e:	464b      	mov	r3, r9
   32f30:	4642      	mov	r2, r8
   32f32:	4631      	mov	r1, r6
   32f34:	7868      	ldrb	r0, [r5, #1]
   32f36:	47b8      	blx	r7
		if (dev->com_rslt != 0)
   32f38:	2800      	cmp	r0, #0
			rslt = BME680_E_COM_FAIL;
   32f3a:	bf18      	it	ne
   32f3c:	f06f 0401 	mvnne.w	r4, #1
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
   32f40:	f885 0054 	strb.w	r0, [r5, #84]	; 0x54
}
   32f44:	4620      	mov	r0, r4
   32f46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00032f4a <bme680_set_regs>:
{
   32f4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   32f4e:	461e      	mov	r6, r3
   32f50:	b08a      	sub	sp, #40	; 0x28
   32f52:	4680      	mov	r8, r0
   32f54:	4689      	mov	r9, r1
   32f56:	4615      	mov	r5, r2
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
   32f58:	2100      	movs	r1, #0
   32f5a:	2228      	movs	r2, #40	; 0x28
   32f5c:	4668      	mov	r0, sp
   32f5e:	f006 f86a 	bl	39036 <memset>
	rslt = null_ptr_check(dev);
   32f62:	4630      	mov	r0, r6
   32f64:	f7ff ff69 	bl	32e3a <null_ptr_check>
	if (rslt == BME680_OK) {
   32f68:	bb68      	cbnz	r0, 32fc6 <bme680_set_regs+0x7c>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
   32f6a:	1e6b      	subs	r3, r5, #1
   32f6c:	2b12      	cmp	r3, #18
   32f6e:	d82d      	bhi.n	32fcc <bme680_set_regs+0x82>
   32f70:	466c      	mov	r4, sp
   32f72:	4607      	mov	r7, r0
			for (index = 0; index < len; index++) {
   32f74:	fa1f fa85 	uxth.w	sl, r5
				if (dev->intf == BME680_SPI_INTF) {
   32f78:	78b2      	ldrb	r2, [r6, #2]
   32f7a:	f818 3007 	ldrb.w	r3, [r8, r7]
   32f7e:	b93a      	cbnz	r2, 32f90 <bme680_set_regs+0x46>
					rslt = set_mem_page(reg_addr[index], dev);
   32f80:	4618      	mov	r0, r3
   32f82:	4631      	mov	r1, r6
   32f84:	f7ff ff67 	bl	32e56 <set_mem_page>
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
   32f88:	f818 3007 	ldrb.w	r3, [r8, r7]
   32f8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
					tmp_buff[(2 * index)] = reg_addr[index];
   32f90:	7023      	strb	r3, [r4, #0]
				tmp_buff[(2 * index) + 1] = reg_data[index];
   32f92:	f819 3007 	ldrb.w	r3, [r9, r7]
   32f96:	3701      	adds	r7, #1
   32f98:	7063      	strb	r3, [r4, #1]
			for (index = 0; index < len; index++) {
   32f9a:	b2bb      	uxth	r3, r7
   32f9c:	4553      	cmp	r3, sl
   32f9e:	f104 0402 	add.w	r4, r4, #2
   32fa2:	d3e9      	bcc.n	32f78 <bme680_set_regs+0x2e>
			if (rslt == BME680_OK) {
   32fa4:	b978      	cbnz	r0, 32fc6 <bme680_set_regs+0x7c>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
   32fa6:	006b      	lsls	r3, r5, #1
   32fa8:	3b01      	subs	r3, #1
   32faa:	6cf4      	ldr	r4, [r6, #76]	; 0x4c
   32fac:	b29b      	uxth	r3, r3
   32fae:	f10d 0201 	add.w	r2, sp, #1
   32fb2:	f89d 1000 	ldrb.w	r1, [sp]
   32fb6:	7870      	ldrb	r0, [r6, #1]
   32fb8:	47a0      	blx	r4
					rslt = BME680_E_COM_FAIL;
   32fba:	2800      	cmp	r0, #0
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
   32fbc:	f886 0054 	strb.w	r0, [r6, #84]	; 0x54
					rslt = BME680_E_COM_FAIL;
   32fc0:	bf18      	it	ne
   32fc2:	f06f 0001 	mvnne.w	r0, #1
}
   32fc6:	b00a      	add	sp, #40	; 0x28
   32fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			rslt = BME680_E_INVALID_LENGTH;
   32fcc:	f06f 0003 	mvn.w	r0, #3
   32fd0:	e7f9      	b.n	32fc6 <bme680_set_regs+0x7c>

00032fd2 <bme680_soft_reset>:
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
   32fd2:	23e0      	movs	r3, #224	; 0xe0
{
   32fd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
   32fd6:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
   32fda:	23b6      	movs	r3, #182	; 0xb6
{
   32fdc:	4605      	mov	r5, r0
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
   32fde:	f88d 3007 	strb.w	r3, [sp, #7]
	rslt = null_ptr_check(dev);
   32fe2:	f7ff ff2a 	bl	32e3a <null_ptr_check>
	if (rslt == BME680_OK) {
   32fe6:	4604      	mov	r4, r0
   32fe8:	b970      	cbnz	r0, 33008 <bme680_soft_reset+0x36>
		if (dev->intf == BME680_SPI_INTF)
   32fea:	78ab      	ldrb	r3, [r5, #2]
   32fec:	b17b      	cbz	r3, 3300e <bme680_soft_reset+0x3c>
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
   32fee:	462b      	mov	r3, r5
   32ff0:	2201      	movs	r2, #1
   32ff2:	f10d 0107 	add.w	r1, sp, #7
   32ff6:	f10d 0006 	add.w	r0, sp, #6
   32ffa:	f7ff ffa6 	bl	32f4a <bme680_set_regs>
   32ffe:	4604      	mov	r4, r0
			dev->delay_ms(BME680_RESET_PERIOD);
   33000:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   33002:	200a      	movs	r0, #10
   33004:	4798      	blx	r3
			if (rslt == BME680_OK) {
   33006:	b14c      	cbz	r4, 3301c <bme680_soft_reset+0x4a>
}
   33008:	4620      	mov	r0, r4
   3300a:	b003      	add	sp, #12
   3300c:	bd30      	pop	{r4, r5, pc}
	if (rslt == BME680_OK) {
   3300e:	4628      	mov	r0, r5
   33010:	f7ff ff55 	bl	32ebe <get_mem_page.part.3>
		if (rslt == BME680_OK) {
   33014:	4604      	mov	r4, r0
   33016:	2800      	cmp	r0, #0
   33018:	d1f6      	bne.n	33008 <bme680_soft_reset+0x36>
   3301a:	e7e8      	b.n	32fee <bme680_soft_reset+0x1c>
				if (dev->intf == BME680_SPI_INTF)
   3301c:	78ab      	ldrb	r3, [r5, #2]
   3301e:	2b00      	cmp	r3, #0
   33020:	d1f2      	bne.n	33008 <bme680_soft_reset+0x36>
	rslt = null_ptr_check(dev);
   33022:	4628      	mov	r0, r5
   33024:	f7ff ff09 	bl	32e3a <null_ptr_check>
	if (rslt == BME680_OK) {
   33028:	4604      	mov	r4, r0
   3302a:	2800      	cmp	r0, #0
   3302c:	d1ec      	bne.n	33008 <bme680_soft_reset+0x36>
   3302e:	4628      	mov	r0, r5
   33030:	f7ff ff45 	bl	32ebe <get_mem_page.part.3>
   33034:	4604      	mov	r4, r0
   33036:	e7e7      	b.n	33008 <bme680_soft_reset+0x36>

00033038 <bme680_init>:
{
   33038:	b530      	push	{r4, r5, lr}
   3303a:	b08d      	sub	sp, #52	; 0x34
   3303c:	4604      	mov	r4, r0
	rslt = null_ptr_check(dev);
   3303e:	f7ff fefc 	bl	32e3a <null_ptr_check>
	if (rslt == BME680_OK) {
   33042:	4605      	mov	r5, r0
   33044:	2800      	cmp	r0, #0
   33046:	f040 80c8 	bne.w	331da <bme680_init+0x1a2>
		rslt = bme680_soft_reset(dev);
   3304a:	4620      	mov	r0, r4
   3304c:	f7ff ffc1 	bl	32fd2 <bme680_soft_reset>
		if (rslt == BME680_OK) {
   33050:	4605      	mov	r5, r0
   33052:	2800      	cmp	r0, #0
   33054:	f040 80c1 	bne.w	331da <bme680_init+0x1a2>
			rslt = bme680_get_regs(BME680_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
   33058:	4623      	mov	r3, r4
   3305a:	2201      	movs	r2, #1
   3305c:	4621      	mov	r1, r4
   3305e:	20d0      	movs	r0, #208	; 0xd0
   33060:	f7ff ff4f 	bl	32f02 <bme680_get_regs>
			if (rslt == BME680_OK) {
   33064:	4605      	mov	r5, r0
   33066:	2800      	cmp	r0, #0
   33068:	f040 80b7 	bne.w	331da <bme680_init+0x1a2>
				if (dev->chip_id == BME680_CHIP_ID) {
   3306c:	7823      	ldrb	r3, [r4, #0]
   3306e:	2b61      	cmp	r3, #97	; 0x61
   33070:	f040 80b6 	bne.w	331e0 <bme680_init+0x1a8>
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
   33074:	4601      	mov	r1, r0
   33076:	2229      	movs	r2, #41	; 0x29
   33078:	a801      	add	r0, sp, #4
   3307a:	f005 ffdc 	bl	39036 <memset>
	rslt = null_ptr_check(dev);
   3307e:	4620      	mov	r0, r4
	uint8_t temp_var = 0; /* Temporary variable */
   33080:	f88d 5003 	strb.w	r5, [sp, #3]
	rslt = null_ptr_check(dev);
   33084:	f7ff fed9 	bl	32e3a <null_ptr_check>
	if (rslt == BME680_OK) {
   33088:	4605      	mov	r5, r0
   3308a:	2800      	cmp	r0, #0
   3308c:	f040 80a5 	bne.w	331da <bme680_init+0x1a2>
		rslt = bme680_get_regs(BME680_COEFF_ADDR1, coeff_array, BME680_COEFF_ADDR1_LEN, dev);
   33090:	4623      	mov	r3, r4
   33092:	2219      	movs	r2, #25
   33094:	a901      	add	r1, sp, #4
   33096:	2089      	movs	r0, #137	; 0x89
   33098:	f7ff ff33 	bl	32f02 <bme680_get_regs>
		if (rslt == BME680_OK)
   3309c:	4605      	mov	r5, r0
   3309e:	b938      	cbnz	r0, 330b0 <bme680_init+0x78>
			rslt = bme680_get_regs(BME680_COEFF_ADDR2, &coeff_array[BME680_COEFF_ADDR1_LEN]
   330a0:	4623      	mov	r3, r4
   330a2:	2210      	movs	r2, #16
   330a4:	f10d 011d 	add.w	r1, sp, #29
   330a8:	20e1      	movs	r0, #225	; 0xe1
   330aa:	f7ff ff2a 	bl	32f02 <bme680_get_regs>
   330ae:	4605      	mov	r5, r0
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
   330b0:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
   330b4:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   330b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   330bc:	82e3      	strh	r3, [r4, #22]
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
   330be:	f89d 2006 	ldrb.w	r2, [sp, #6]
   330c2:	f89d 3005 	ldrb.w	r3, [sp, #5]
   330c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   330ca:	8323      	strh	r3, [r4, #24]
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
   330cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
   330d0:	f89d 200a 	ldrb.w	r2, [sp, #10]
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
   330d4:	76a3      	strb	r3, [r4, #26]
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
   330d6:	f89d 3009 	ldrb.w	r3, [sp, #9]
   330da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   330de:	83a3      	strh	r3, [r4, #28]
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
   330e0:	f89d 200c 	ldrb.w	r2, [sp, #12]
   330e4:	f89d 300b 	ldrb.w	r3, [sp, #11]
   330e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   330ec:	83e3      	strh	r3, [r4, #30]
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
   330ee:	f89d 300d 	ldrb.w	r3, [sp, #13]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
   330f2:	f89d 2010 	ldrb.w	r2, [sp, #16]
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
   330f6:	f884 3020 	strb.w	r3, [r4, #32]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
   330fa:	f89d 300f 	ldrb.w	r3, [sp, #15]
   330fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   33102:	8463      	strh	r3, [r4, #34]	; 0x22
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
   33104:	f89d 2012 	ldrb.w	r2, [sp, #18]
   33108:	f89d 3011 	ldrb.w	r3, [sp, #17]
   3310c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   33110:	84a3      	strh	r3, [r4, #36]	; 0x24
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
   33112:	f89d 3014 	ldrb.w	r3, [sp, #20]
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
   33116:	f89d 2018 	ldrb.w	r2, [sp, #24]
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
   3311a:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
   3311e:	f89d 3013 	ldrb.w	r3, [sp, #19]
   33122:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
   33126:	f89d 3017 	ldrb.w	r3, [sp, #23]
   3312a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   3312e:	8523      	strh	r3, [r4, #40]	; 0x28
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
   33130:	f89d 201a 	ldrb.w	r2, [sp, #26]
   33134:	f89d 3019 	ldrb.w	r3, [sp, #25]
   33138:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   3313c:	8563      	strh	r3, [r4, #42]	; 0x2a
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
   3313e:	f89d 301b 	ldrb.w	r3, [sp, #27]
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
   33142:	f89d 101f 	ldrb.w	r1, [sp, #31]
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
   33146:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
   3314a:	f89d 301e 	ldrb.w	r3, [sp, #30]
   3314e:	f003 020f 	and.w	r2, r3, #15
   33152:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
   33156:	8122      	strh	r2, [r4, #8]
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
   33158:	f89d 201d 	ldrb.w	r2, [sp, #29]
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
   3315c:	091b      	lsrs	r3, r3, #4
   3315e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
   33162:	8163      	strh	r3, [r4, #10]
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
   33164:	9b08      	ldr	r3, [sp, #32]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
   33166:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
   3316a:	60e3      	str	r3, [r4, #12]
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];
   3316c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   33170:	7423      	strb	r3, [r4, #16]
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
   33172:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
   33176:	7463      	strb	r3, [r4, #17]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
   33178:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   3317c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   33180:	8263      	strh	r3, [r4, #18]
		dev->calib.par_gh3 = (int8_t) coeff_array[BME680_GH3_REG];
   33182:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   33186:	7523      	strb	r3, [r4, #20]
		if (rslt == BME680_OK) {
   33188:	bb15      	cbnz	r5, 331d0 <bme680_init+0x198>
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);
   3318a:	4623      	mov	r3, r4
   3318c:	2201      	movs	r2, #1
   3318e:	f10d 0103 	add.w	r1, sp, #3
   33192:	2002      	movs	r0, #2
   33194:	f7ff feb5 	bl	32f02 <bme680_get_regs>
			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
   33198:	f89d 3003 	ldrb.w	r3, [sp, #3]
			if (rslt == BME680_OK) {
   3319c:	4605      	mov	r5, r0
			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
   3319e:	f3c3 1301 	ubfx	r3, r3, #4, #2
   331a2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if (rslt == BME680_OK) {
   331a6:	b998      	cbnz	r0, 331d0 <bme680_init+0x198>
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);
   331a8:	4623      	mov	r3, r4
   331aa:	2201      	movs	r2, #1
   331ac:	f10d 0103 	add.w	r1, sp, #3
   331b0:	f7ff fea7 	bl	32f02 <bme680_get_regs>
				dev->calib.res_heat_val = (int8_t) temp_var;
   331b4:	f89d 3003 	ldrb.w	r3, [sp, #3]
				if (rslt == BME680_OK)
   331b8:	4605      	mov	r5, r0
				dev->calib.res_heat_val = (int8_t) temp_var;
   331ba:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
				if (rslt == BME680_OK)
   331be:	b938      	cbnz	r0, 331d0 <bme680_init+0x198>
					rslt = bme680_get_regs(BME680_ADDR_RANGE_SW_ERR_ADDR, &temp_var, 1, dev);
   331c0:	4623      	mov	r3, r4
   331c2:	2201      	movs	r2, #1
   331c4:	f10d 0103 	add.w	r1, sp, #3
   331c8:	2004      	movs	r0, #4
   331ca:	f7ff fe9a 	bl	32f02 <bme680_get_regs>
   331ce:	4605      	mov	r5, r0
		dev->calib.range_sw_err = ((int8_t) temp_var & (int8_t) BME680_RSERROR_MSK) / 16;
   331d0:	f99d 3003 	ldrsb.w	r3, [sp, #3]
   331d4:	111b      	asrs	r3, r3, #4
   331d6:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
   331da:	4628      	mov	r0, r5
   331dc:	b00d      	add	sp, #52	; 0x34
   331de:	bd30      	pop	{r4, r5, pc}
					rslt = BME680_E_DEV_NOT_FOUND;
   331e0:	f06f 0502 	mvn.w	r5, #2
   331e4:	e7f9      	b.n	331da <bme680_init+0x1a2>

000331e6 <bme680_set_sensor_mode>:
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
   331e6:	2374      	movs	r3, #116	; 0x74
{
   331e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   331ea:	4604      	mov	r4, r0
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
   331ec:	f88d 3007 	strb.w	r3, [sp, #7]
	rslt = null_ptr_check(dev);
   331f0:	f7ff fe23 	bl	32e3a <null_ptr_check>
	if (rslt == BME680_OK) {
   331f4:	bba0      	cbnz	r0, 33260 <bme680_set_sensor_mode+0x7a>
	uint8_t pow_mode = 0;
   331f6:	4605      	mov	r5, r0
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
   331f8:	4623      	mov	r3, r4
   331fa:	2201      	movs	r2, #1
   331fc:	f10d 0106 	add.w	r1, sp, #6
   33200:	2074      	movs	r0, #116	; 0x74
   33202:	f7ff fe7e 	bl	32f02 <bme680_get_regs>
			if (rslt == BME680_OK) {
   33206:	b9a0      	cbnz	r0, 33232 <bme680_set_sensor_mode+0x4c>
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
   33208:	f89d 3006 	ldrb.w	r3, [sp, #6]
				if (pow_mode != BME680_SLEEP_MODE) {
   3320c:	f013 0503 	ands.w	r5, r3, #3
   33210:	d011      	beq.n	33236 <bme680_set_sensor_mode+0x50>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
   33212:	f023 0303 	bic.w	r3, r3, #3
   33216:	f88d 3006 	strb.w	r3, [sp, #6]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
   3321a:	2201      	movs	r2, #1
   3321c:	4623      	mov	r3, r4
   3321e:	f10d 0106 	add.w	r1, sp, #6
   33222:	f10d 0007 	add.w	r0, sp, #7
   33226:	f7ff fe90 	bl	32f4a <bme680_set_regs>
					dev->delay_ms(BME680_POLL_PERIOD_MS);
   3322a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   3322c:	200a      	movs	r0, #10
   3322e:	4798      	blx	r3
   33230:	e7e2      	b.n	331f8 <bme680_set_sensor_mode+0x12>
		} while (pow_mode != BME680_SLEEP_MODE);
   33232:	2d00      	cmp	r5, #0
   33234:	d1e0      	bne.n	331f8 <bme680_set_sensor_mode+0x12>
		if (dev->power_mode != BME680_SLEEP_MODE) {
   33236:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   3323a:	b18a      	cbz	r2, 33260 <bme680_set_sensor_mode+0x7a>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
   3323c:	f89d 3006 	ldrb.w	r3, [sp, #6]
   33240:	f002 0203 	and.w	r2, r2, #3
   33244:	f023 0303 	bic.w	r3, r3, #3
   33248:	4313      	orrs	r3, r2
   3324a:	f88d 3006 	strb.w	r3, [sp, #6]
			if (rslt == BME680_OK)
   3324e:	b938      	cbnz	r0, 33260 <bme680_set_sensor_mode+0x7a>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
   33250:	4623      	mov	r3, r4
   33252:	2201      	movs	r2, #1
   33254:	f10d 0106 	add.w	r1, sp, #6
   33258:	f10d 0007 	add.w	r0, sp, #7
   3325c:	f7ff fe75 	bl	32f4a <bme680_set_regs>
}
   33260:	b003      	add	sp, #12
   33262:	bd30      	pop	{r4, r5, pc}

00033264 <bme680_get_sensor_mode>:
{
   33264:	b513      	push	{r0, r1, r4, lr}
   33266:	4604      	mov	r4, r0
	rslt = null_ptr_check(dev);
   33268:	f7ff fde7 	bl	32e3a <null_ptr_check>
	if (rslt == BME680_OK) {
   3326c:	b960      	cbnz	r0, 33288 <bme680_get_sensor_mode+0x24>
		rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &mode, 1, dev);
   3326e:	4623      	mov	r3, r4
   33270:	2201      	movs	r2, #1
   33272:	f10d 0107 	add.w	r1, sp, #7
   33276:	2074      	movs	r0, #116	; 0x74
   33278:	f7ff fe43 	bl	32f02 <bme680_get_regs>
		dev->power_mode = mode & BME680_MODE_MSK;
   3327c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   33280:	f003 0303 	and.w	r3, r3, #3
   33284:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
   33288:	b002      	add	sp, #8
   3328a:	bd10      	pop	{r4, pc}

0003328c <arch_printk_char_out>:
}
   3328c:	2000      	movs	r0, #0
   3328e:	4770      	bx	lr

00033290 <print_err>:
{
   33290:	b570      	push	{r4, r5, r6, lr}
   33292:	460d      	mov	r5, r1
   33294:	4604      	mov	r4, r0
	out('E', ctx);
   33296:	2045      	movs	r0, #69	; 0x45
   33298:	47a0      	blx	r4
	out('R', ctx);
   3329a:	4629      	mov	r1, r5
   3329c:	2052      	movs	r0, #82	; 0x52
   3329e:	47a0      	blx	r4
	out('R', ctx);
   332a0:	4629      	mov	r1, r5
   332a2:	4623      	mov	r3, r4
}
   332a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   332a8:	2052      	movs	r0, #82	; 0x52
   332aa:	4718      	bx	r3

000332ac <str_out>:
{
   332ac:	b530      	push	{r4, r5, lr}
   332ae:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   332b0:	680c      	ldr	r4, [r1, #0]
   332b2:	1c55      	adds	r5, r2, #1
   332b4:	b114      	cbz	r4, 332bc <str_out+0x10>
   332b6:	684b      	ldr	r3, [r1, #4]
   332b8:	4293      	cmp	r3, r2
   332ba:	dc01      	bgt.n	332c0 <str_out+0x14>
		ctx->count++;
   332bc:	608d      	str	r5, [r1, #8]
}
   332be:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   332c0:	3b01      	subs	r3, #1
   332c2:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   332c4:	bf08      	it	eq
   332c6:	2200      	moveq	r2, #0
   332c8:	608d      	str	r5, [r1, #8]
   332ca:	bf0c      	ite	eq
   332cc:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   332ce:	54a0      	strbne	r0, [r4, r2]
   332d0:	e7f5      	b.n	332be <str_out+0x12>

000332d2 <z_vprintk>:
{
   332d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   332d6:	f04f 0800 	mov.w	r8, #0
{
   332da:	4606      	mov	r6, r0
   332dc:	460f      	mov	r7, r1
	int min_width = -1;
   332de:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
   332e2:	46c1      	mov	r9, r8
{
   332e4:	b08b      	sub	sp, #44	; 0x2c
   332e6:	461c      	mov	r4, r3
	while (*fmt) {
   332e8:	1e53      	subs	r3, r2, #1
   332ea:	9302      	str	r3, [sp, #8]
			might_format = 0;
   332ec:	2500      	movs	r5, #0
					break;
   332ee:	e005      	b.n	332fc <z_vprintk+0x2a>
		if (!might_format) {
   332f0:	b96d      	cbnz	r5, 3330e <z_vprintk+0x3c>
			if (*fmt != '%') {
   332f2:	2825      	cmp	r0, #37	; 0x25
   332f4:	f000 814f 	beq.w	33596 <z_vprintk+0x2c4>
				out((int)*fmt, ctx);
   332f8:	4639      	mov	r1, r7
   332fa:	47b0      	blx	r6
	while (*fmt) {
   332fc:	9b02      	ldr	r3, [sp, #8]
   332fe:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   33302:	9302      	str	r3, [sp, #8]
   33304:	2800      	cmp	r0, #0
   33306:	d1f3      	bne.n	332f0 <z_vprintk+0x1e>
}
   33308:	b00b      	add	sp, #44	; 0x2c
   3330a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
   3330e:	2864      	cmp	r0, #100	; 0x64
   33310:	d06e      	beq.n	333f0 <z_vprintk+0x11e>
   33312:	d81a      	bhi.n	3334a <z_vprintk+0x78>
   33314:	2839      	cmp	r0, #57	; 0x39
   33316:	d80a      	bhi.n	3332e <z_vprintk+0x5c>
   33318:	2831      	cmp	r0, #49	; 0x31
   3331a:	d260      	bcs.n	333de <z_vprintk+0x10c>
   3331c:	282d      	cmp	r0, #45	; 0x2d
   3331e:	f000 8140 	beq.w	335a2 <z_vprintk+0x2d0>
   33322:	2830      	cmp	r0, #48	; 0x30
   33324:	d04c      	beq.n	333c0 <z_vprintk+0xee>
   33326:	2825      	cmp	r0, #37	; 0x25
   33328:	d107      	bne.n	3333a <z_vprintk+0x68>
				out((int)'%', ctx);
   3332a:	4639      	mov	r1, r7
   3332c:	e00b      	b.n	33346 <z_vprintk+0x74>
			switch (*fmt) {
   3332e:	2858      	cmp	r0, #88	; 0x58
   33330:	f000 80bb 	beq.w	334aa <z_vprintk+0x1d8>
   33334:	2863      	cmp	r0, #99	; 0x63
   33336:	f000 812a 	beq.w	3358e <z_vprintk+0x2bc>
					out((int)'%', ctx);
   3333a:	4639      	mov	r1, r7
   3333c:	2025      	movs	r0, #37	; 0x25
   3333e:	47b0      	blx	r6
					out((int)*fmt, ctx);
   33340:	4639      	mov	r1, r7
   33342:	9b02      	ldr	r3, [sp, #8]
   33344:	7818      	ldrb	r0, [r3, #0]
   33346:	47b0      	blx	r6
   33348:	e7d0      	b.n	332ec <z_vprintk+0x1a>
			switch (*fmt) {
   3334a:	2870      	cmp	r0, #112	; 0x70
   3334c:	f000 80a3 	beq.w	33496 <z_vprintk+0x1c4>
   33350:	d811      	bhi.n	33376 <z_vprintk+0xa4>
   33352:	2869      	cmp	r0, #105	; 0x69
   33354:	d04c      	beq.n	333f0 <z_vprintk+0x11e>
   33356:	286c      	cmp	r0, #108	; 0x6c
   33358:	d105      	bne.n	33366 <z_vprintk+0x94>
				} else if (*fmt == 'l' && length_mod == 'l') {
   3335a:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   3335e:	d12a      	bne.n	333b6 <z_vprintk+0xe4>
					length_mod = 'L';
   33360:	f04f 084c 	mov.w	r8, #76	; 0x4c
   33364:	e7ca      	b.n	332fc <z_vprintk+0x2a>
			switch (*fmt) {
   33366:	2868      	cmp	r0, #104	; 0x68
   33368:	d1e7      	bne.n	3333a <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
   3336a:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
   3336e:	d122      	bne.n	333b6 <z_vprintk+0xe4>
					length_mod = 'H';
   33370:	f04f 0848 	mov.w	r8, #72	; 0x48
   33374:	e7c2      	b.n	332fc <z_vprintk+0x2a>
			switch (*fmt) {
   33376:	2875      	cmp	r0, #117	; 0x75
   33378:	d071      	beq.n	3345e <z_vprintk+0x18c>
   3337a:	d818      	bhi.n	333ae <z_vprintk+0xdc>
   3337c:	2873      	cmp	r0, #115	; 0x73
   3337e:	d1dc      	bne.n	3333a <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
   33380:	f854 5b04 	ldr.w	r5, [r4], #4
				while (*s) {
   33384:	46ab      	mov	fp, r5
   33386:	465b      	mov	r3, fp
   33388:	f81b 0b01 	ldrb.w	r0, [fp], #1
   3338c:	2800      	cmp	r0, #0
   3338e:	f040 80fb 	bne.w	33588 <z_vprintk+0x2b6>
				if (padding == PAD_SPACE_AFTER) {
   33392:	f1b9 0f03 	cmp.w	r9, #3
   33396:	f040 810a 	bne.w	335ae <z_vprintk+0x2dc>
					int remaining = min_width - (s - start);
   3339a:	1b5d      	subs	r5, r3, r5
   3339c:	ebaa 0505 	sub.w	r5, sl, r5
					while (remaining-- > 0) {
   333a0:	2d00      	cmp	r5, #0
   333a2:	dda3      	ble.n	332ec <z_vprintk+0x1a>
						out(' ', ctx);
   333a4:	4639      	mov	r1, r7
   333a6:	2020      	movs	r0, #32
   333a8:	47b0      	blx	r6
   333aa:	3d01      	subs	r5, #1
   333ac:	e7f8      	b.n	333a0 <z_vprintk+0xce>
			switch (*fmt) {
   333ae:	2878      	cmp	r0, #120	; 0x78
   333b0:	d07b      	beq.n	334aa <z_vprintk+0x1d8>
   333b2:	287a      	cmp	r0, #122	; 0x7a
   333b4:	d1c1      	bne.n	3333a <z_vprintk+0x68>
				} else if (length_mod == 0) {
   333b6:	f1b8 0f00 	cmp.w	r8, #0
   333ba:	d1be      	bne.n	3333a <z_vprintk+0x68>
   333bc:	4680      	mov	r8, r0
   333be:	e79d      	b.n	332fc <z_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
   333c0:	f1ba 0f00 	cmp.w	sl, #0
   333c4:	da0e      	bge.n	333e4 <z_vprintk+0x112>
   333c6:	f1b9 0f00 	cmp.w	r9, #0
   333ca:	f000 80ed 	beq.w	335a8 <z_vprintk+0x2d6>
					min_width = *fmt - '0';
   333ce:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   333d2:	f1b9 0f00 	cmp.w	r9, #0
   333d6:	bf08      	it	eq
   333d8:	f04f 0902 	moveq.w	r9, #2
   333dc:	e78e      	b.n	332fc <z_vprintk+0x2a>
				if (min_width < 0) {
   333de:	f1ba 0f00 	cmp.w	sl, #0
   333e2:	dbf4      	blt.n	333ce <z_vprintk+0xfc>
					min_width = 10 * min_width + *fmt - '0';
   333e4:	230a      	movs	r3, #10
   333e6:	fb03 0a0a 	mla	sl, r3, sl, r0
   333ea:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
   333ee:	e7f0      	b.n	333d2 <z_vprintk+0x100>
				if (length_mod == 'z') {
   333f0:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   333f4:	d102      	bne.n	333fc <z_vprintk+0x12a>
					d = va_arg(ap, int);
   333f6:	f854 5b04 	ldr.w	r5, [r4], #4
   333fa:	e01f      	b.n	3343c <z_vprintk+0x16a>
				} else if (length_mod == 'l') {
   333fc:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   33400:	d0f9      	beq.n	333f6 <z_vprintk+0x124>
				} else if (length_mod == 'L') {
   33402:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   33406:	d1f6      	bne.n	333f6 <z_vprintk+0x124>
					long long lld = va_arg(ap, long long);
   33408:	3407      	adds	r4, #7
   3340a:	f024 0407 	bic.w	r4, r4, #7
   3340e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (lld > __LONG_MAX__ ||
   33412:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
   33416:	9106      	str	r1, [sp, #24]
   33418:	f143 0100 	adc.w	r1, r3, #0
   3341c:	9107      	str	r1, [sp, #28]
   3341e:	2100      	movs	r1, #0
   33420:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   33424:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   33428:	4561      	cmp	r1, ip
   3342a:	bf08      	it	eq
   3342c:	4558      	cmpeq	r0, fp
   3342e:	d204      	bcs.n	3343a <z_vprintk+0x168>
						print_err(out, ctx);
   33430:	4639      	mov	r1, r7
   33432:	4630      	mov	r0, r6
   33434:	f7ff ff2c 	bl	33290 <print_err>
						break;
   33438:	e758      	b.n	332ec <z_vprintk+0x1a>
					d = lld;
   3343a:	4615      	mov	r5, r2
				if (d < 0) {
   3343c:	2d00      	cmp	r5, #0
   3343e:	da05      	bge.n	3344c <z_vprintk+0x17a>
					out((int)'-', ctx);
   33440:	4639      	mov	r1, r7
   33442:	202d      	movs	r0, #45	; 0x2d
   33444:	47b0      	blx	r6
					d = -d;
   33446:	426d      	negs	r5, r5
					min_width--;
   33448:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
   3344c:	464b      	mov	r3, r9
   3344e:	462a      	mov	r2, r5
   33450:	f8cd a000 	str.w	sl, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
   33454:	4639      	mov	r1, r7
   33456:	4630      	mov	r0, r6
   33458:	f7e5 fa7a 	bl	18950 <_printk_dec_ulong>
				break;
   3345c:	e746      	b.n	332ec <z_vprintk+0x1a>
				if (length_mod == 'z') {
   3345e:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   33462:	d102      	bne.n	3346a <z_vprintk+0x198>
					u = va_arg(ap, unsigned int);
   33464:	f854 2b04 	ldr.w	r2, [r4], #4
   33468:	e011      	b.n	3348e <z_vprintk+0x1bc>
				} else if (length_mod == 'l') {
   3346a:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   3346e:	d0f9      	beq.n	33464 <z_vprintk+0x192>
				} else if (length_mod == 'L') {
   33470:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   33474:	d1f6      	bne.n	33464 <z_vprintk+0x192>
					if (llu > ~0UL) {
   33476:	2100      	movs	r1, #0
   33478:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
					unsigned long long llu =
   3347c:	3407      	adds	r4, #7
   3347e:	f024 0407 	bic.w	r4, r4, #7
   33482:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
   33486:	4299      	cmp	r1, r3
   33488:	bf08      	it	eq
   3348a:	4290      	cmpeq	r0, r2
   3348c:	d3d0      	bcc.n	33430 <z_vprintk+0x15e>
				_printk_dec_ulong(out, ctx, u, padding,
   3348e:	f8cd a000 	str.w	sl, [sp]
   33492:	464b      	mov	r3, r9
   33494:	e7de      	b.n	33454 <z_vprintk+0x182>
				out('0', ctx);
   33496:	4639      	mov	r1, r7
   33498:	2030      	movs	r0, #48	; 0x30
   3349a:	47b0      	blx	r6
				out('x', ctx);
   3349c:	4639      	mov	r1, r7
   3349e:	2078      	movs	r0, #120	; 0x78
   334a0:	47b0      	blx	r6
					min_width = 8;
   334a2:	f04f 0a08 	mov.w	sl, #8
				padding = PAD_ZERO_BEFORE;
   334a6:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
   334aa:	9b02      	ldr	r3, [sp, #8]
   334ac:	781b      	ldrb	r3, [r3, #0]
   334ae:	2b70      	cmp	r3, #112	; 0x70
   334b0:	d104      	bne.n	334bc <z_vprintk+0x1ea>
					x = va_arg(ap, unsigned int);
   334b2:	f854 3b04 	ldr.w	r3, [r4], #4
   334b6:	9304      	str	r3, [sp, #16]
   334b8:	2300      	movs	r3, #0
   334ba:	e00d      	b.n	334d8 <z_vprintk+0x206>
				} else if (length_mod == 'l') {
   334bc:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   334c0:	d0f7      	beq.n	334b2 <z_vprintk+0x1e0>
				} else if (length_mod == 'L') {
   334c2:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   334c6:	d1f4      	bne.n	334b2 <z_vprintk+0x1e0>
					x = va_arg(ap, unsigned long long);
   334c8:	3407      	adds	r4, #7
   334ca:	f024 0307 	bic.w	r3, r4, #7
   334ce:	461c      	mov	r4, r3
   334d0:	f854 2b08 	ldr.w	r2, [r4], #8
   334d4:	685b      	ldr	r3, [r3, #4]
   334d6:	9204      	str	r2, [sp, #16]
	int digits = 0;
   334d8:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
   334da:	2210      	movs	r2, #16
	int shift = sizeof(num) * 8;
   334dc:	f04f 0b40 	mov.w	fp, #64	; 0x40
	int digits = 0;
   334e0:	9103      	str	r1, [sp, #12]
	int found_largest_digit = 0;
   334e2:	9105      	str	r1, [sp, #20]
		shift -= 4;
   334e4:	f1ab 0b04 	sub.w	fp, fp, #4
		nibble = (num >> shift) & 0xf;
   334e8:	9804      	ldr	r0, [sp, #16]
   334ea:	f1cb 0c20 	rsb	ip, fp, #32
   334ee:	f1ab 0120 	sub.w	r1, fp, #32
   334f2:	fa20 f00b 	lsr.w	r0, r0, fp
   334f6:	fa03 fc0c 	lsl.w	ip, r3, ip
   334fa:	ea40 000c 	orr.w	r0, r0, ip
   334fe:	fa23 f101 	lsr.w	r1, r3, r1
   33502:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
   33504:	f010 000f 	ands.w	r0, r0, #15
   33508:	d106      	bne.n	33518 <z_vprintk+0x246>
   3350a:	9905      	ldr	r1, [sp, #20]
   3350c:	b911      	cbnz	r1, 33514 <z_vprintk+0x242>
   3350e:	f1bb 0f00 	cmp.w	fp, #0
   33512:	d122      	bne.n	3355a <z_vprintk+0x288>
			nibble += nibble > 9 ? 87 : 48;
   33514:	2130      	movs	r1, #48	; 0x30
   33516:	e003      	b.n	33520 <z_vprintk+0x24e>
   33518:	2809      	cmp	r0, #9
   3351a:	bf8c      	ite	hi
   3351c:	2157      	movhi	r1, #87	; 0x57
   3351e:	2130      	movls	r1, #48	; 0x30
   33520:	4408      	add	r0, r1
			out((int)nibble, ctx);
   33522:	b240      	sxtb	r0, r0
   33524:	4639      	mov	r1, r7
   33526:	9308      	str	r3, [sp, #32]
   33528:	9205      	str	r2, [sp, #20]
   3352a:	47b0      	blx	r6
			digits++;
   3352c:	9b03      	ldr	r3, [sp, #12]
	while (shift >= 4) {
   3352e:	9a05      	ldr	r2, [sp, #20]
			digits++;
   33530:	3301      	adds	r3, #1
   33532:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
   33534:	9b08      	ldr	r3, [sp, #32]
   33536:	f1bb 0f00 	cmp.w	fp, #0
   3353a:	d123      	bne.n	33584 <z_vprintk+0x2b2>
	if (padding == PAD_SPACE_AFTER) {
   3353c:	f1b9 0f03 	cmp.w	r9, #3
   33540:	f47f aed4 	bne.w	332ec <z_vprintk+0x1a>
		remaining = min_width * 2 - digits;
   33544:	9b03      	ldr	r3, [sp, #12]
   33546:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
   3354a:	2d00      	cmp	r5, #0
   3354c:	f77f aece 	ble.w	332ec <z_vprintk+0x1a>
			out(' ', ctx);
   33550:	4639      	mov	r1, r7
   33552:	2020      	movs	r0, #32
   33554:	47b0      	blx	r6
   33556:	3d01      	subs	r5, #1
   33558:	e7f7      	b.n	3354a <z_vprintk+0x278>
		if (remaining-- <= min_width) {
   3355a:	1e51      	subs	r1, r2, #1
   3355c:	4592      	cmp	sl, r2
   3355e:	9108      	str	r1, [sp, #32]
   33560:	db07      	blt.n	33572 <z_vprintk+0x2a0>
			if (padding == PAD_ZERO_BEFORE) {
   33562:	f1b9 0f01 	cmp.w	r9, #1
   33566:	d106      	bne.n	33576 <z_vprintk+0x2a4>
				out('0', ctx);
   33568:	4639      	mov	r1, r7
   3356a:	2030      	movs	r0, #48	; 0x30
   3356c:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   3356e:	47b0      	blx	r6
   33570:	9b09      	ldr	r3, [sp, #36]	; 0x24
			nibble += nibble > 9 ? 87 : 48;
   33572:	9a08      	ldr	r2, [sp, #32]
   33574:	e7b6      	b.n	334e4 <z_vprintk+0x212>
			} else if (padding == PAD_SPACE_BEFORE) {
   33576:	f1b9 0f02 	cmp.w	r9, #2
   3357a:	d1fa      	bne.n	33572 <z_vprintk+0x2a0>
   3357c:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   3357e:	4639      	mov	r1, r7
   33580:	2020      	movs	r0, #32
   33582:	e7f4      	b.n	3356e <z_vprintk+0x29c>
			found_largest_digit = 1;
   33584:	9505      	str	r5, [sp, #20]
   33586:	e7ad      	b.n	334e4 <z_vprintk+0x212>
					out((int)(*s++), ctx);
   33588:	4639      	mov	r1, r7
   3358a:	47b0      	blx	r6
   3358c:	e6fb      	b.n	33386 <z_vprintk+0xb4>
				out(c, ctx);
   3358e:	4639      	mov	r1, r7
   33590:	f854 0b04 	ldr.w	r0, [r4], #4
   33594:	e6d7      	b.n	33346 <z_vprintk+0x74>
				length_mod = 0;
   33596:	46a8      	mov	r8, r5
				padding = PAD_NONE;
   33598:	46a9      	mov	r9, r5
				min_width = -1;
   3359a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				might_format = 1;
   3359e:	2501      	movs	r5, #1
   335a0:	e6ac      	b.n	332fc <z_vprintk+0x2a>
				padding = PAD_SPACE_AFTER;
   335a2:	f04f 0903 	mov.w	r9, #3
   335a6:	e6a9      	b.n	332fc <z_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
   335a8:	f04f 0901 	mov.w	r9, #1
   335ac:	e6a6      	b.n	332fc <z_vprintk+0x2a>
			might_format = 0;
   335ae:	4605      	mov	r5, r0
		++fmt;
   335b0:	e6a4      	b.n	332fc <z_vprintk+0x2a>

000335b2 <printk>:
{
   335b2:	b40f      	push	{r0, r1, r2, r3}
   335b4:	b507      	push	{r0, r1, r2, lr}
   335b6:	a904      	add	r1, sp, #16
   335b8:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   335bc:	9101      	str	r1, [sp, #4]
		log_printk(fmt, ap);
   335be:	f000 fb0a 	bl	33bd6 <log_printk>
}
   335c2:	b003      	add	sp, #12
   335c4:	f85d eb04 	ldr.w	lr, [sp], #4
   335c8:	b004      	add	sp, #16
   335ca:	4770      	bx	lr

000335cc <snprintk>:
{
   335cc:	b40c      	push	{r2, r3}
   335ce:	b507      	push	{r0, r1, r2, lr}
   335d0:	ab04      	add	r3, sp, #16
   335d2:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   335d6:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   335d8:	f7e5 fa0c 	bl	189f4 <vsnprintk>
}
   335dc:	b003      	add	sp, #12
   335de:	f85d eb04 	ldr.w	lr, [sp], #4
   335e2:	b002      	add	sp, #8
   335e4:	4770      	bx	lr

000335e6 <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
   335e6:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   335e8:	f7fa fcf6 	bl	2dfd8 <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
   335ec:	2000      	movs	r0, #0
   335ee:	bd08      	pop	{r3, pc}

000335f0 <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, k_timeout_t timeout)
{
   335f0:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   335f2:	f7fa fd35 	bl	2e060 <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
   335f6:	f110 0f0b 	cmn.w	r0, #11
   335fa:	d005      	beq.n	33608 <sys_sem_take+0x18>
   335fc:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
   33600:	bf08      	it	eq
   33602:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
   33606:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
   33608:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
   3360c:	e7fb      	b.n	33606 <sys_sem_take+0x16>

0003360e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   3360e:	4604      	mov	r4, r0
   33610:	b508      	push	{r3, lr}
   33612:	4608      	mov	r0, r1
   33614:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   33616:	461a      	mov	r2, r3
   33618:	47a0      	blx	r4
	return z_impl_k_current_get();
   3361a:	f7fa fcd7 	bl	2dfcc <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   3361e:	f7e7 ff99 	bl	1b554 <z_impl_k_thread_abort>

00033622 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   33622:	b510      	push	{r4, lr}
   33624:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   33626:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   3362a:	4620      	mov	r0, r4
   3362c:	f7f9 fa4e 	bl	2cacc <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   33630:	4603      	mov	r3, r0
   33632:	2800      	cmp	r0, #0
   33634:	d0f7      	beq.n	33626 <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   33636:	6842      	ldr	r2, [r0, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   33638:	3308      	adds	r3, #8
   3363a:	e8d3 1fef 	ldaex	r1, [r3]
   3363e:	f021 0c01 	bic.w	ip, r1, #1
   33642:	e8c3 cfee 	stlex	lr, ip, [r3]
   33646:	f1be 0f00 	cmp.w	lr, #0
   3364a:	d1f6      	bne.n	3363a <z_work_q_main+0x18>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   3364c:	07cb      	lsls	r3, r1, #31
   3364e:	d500      	bpl.n	33652 <z_work_q_main+0x30>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   33650:	4790      	blx	r2
	z_impl_k_yield();
   33652:	f7fa fb3d 	bl	2dcd0 <z_impl_k_yield>
   33656:	e7e6      	b.n	33626 <z_work_q_main+0x4>

00033658 <chunk_field>:
}

static inline size_t chunk_field(struct z_heap *h, chunkid_t c,
				 enum chunk_fields f)
{
	void *cmem = &h->buf[c];
   33658:	6803      	ldr	r3, [r0, #0]
   3365a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3

	if (big_heap(h)) {
   3365e:	6883      	ldr	r3, [r0, #8]
   33660:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((u32_t *)cmem)[f];
   33664:	bf2c      	ite	cs
   33666:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((u16_t *)cmem)[f];
   3366a:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   3366e:	4770      	bx	lr

00033670 <chunk_set>:

static inline void chunk_set(struct z_heap *h, chunkid_t c,
			     enum chunk_fields f, chunkid_t val)
{
   33670:	b510      	push	{r4, lr}
	CHECK(c >= h->chunk0 && c < h->len);
	CHECK((val & ~((h->size_mask << 1) + 1)) == 0);
	CHECK((val & h->size_mask) < h->len);

	void *cmem = &h->buf[c];
   33672:	6804      	ldr	r4, [r0, #0]

	if (big_heap(h)) {
   33674:	6880      	ldr	r0, [r0, #8]
	void *cmem = &h->buf[c];
   33676:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if (big_heap(h)) {
   3367a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((u32_t *)cmem)[f] = (u32_t) val;
   3367e:	bf2c      	ite	cs
   33680:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		((u16_t *)cmem)[f] = (u16_t) val;
   33684:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   33688:	bd10      	pop	{r4, pc}

0003368a <right_chunk>:
{
	return c - left_size(h, c);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
   3368a:	b538      	push	{r3, r4, r5, lr}
   3368c:	4605      	mov	r5, r0
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   3368e:	2200      	movs	r2, #0
{
   33690:	460c      	mov	r4, r1
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   33692:	f7ff ffe1 	bl	33658 <chunk_field>
   33696:	68eb      	ldr	r3, [r5, #12]
   33698:	4018      	ands	r0, r3
	return c + size(h, c);
}
   3369a:	4420      	add	r0, r4
   3369c:	bd38      	pop	{r3, r4, r5, pc}

0003369e <free_list_remove>:
	return ret;
}

static void free_list_remove(struct z_heap *h, int bidx,
			     chunkid_t c)
{
   3369e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct z_heap_bucket *b = &h->buckets[bidx];
   336a2:	6847      	ldr	r7, [r0, #4]
{
   336a4:	4616      	mov	r6, r2
	struct z_heap_bucket *b = &h->buckets[bidx];
   336a6:	eb07 02c1 	add.w	r2, r7, r1, lsl #3
	CHECK(b->next != 0);
	CHECK(b->list_size > 0);
	CHECK((((h->avail_buckets & (1 << bidx)) == 0)
	       == (h->buckets[bidx].next == 0)));

	b->list_size--;
   336aa:	6853      	ldr	r3, [r2, #4]
{
   336ac:	4604      	mov	r4, r0
	b->list_size--;
   336ae:	3b01      	subs	r3, #1
{
   336b0:	460d      	mov	r5, r1
	b->list_size--;
   336b2:	6053      	str	r3, [r2, #4]

	if (b->list_size == 0) {
   336b4:	b953      	cbnz	r3, 336cc <free_list_remove+0x2e>
		h->avail_buckets &= ~(1 << bidx);
   336b6:	2201      	movs	r2, #1
   336b8:	fa02 f101 	lsl.w	r1, r2, r1
   336bc:	6942      	ldr	r2, [r0, #20]
   336be:	ea22 0201 	bic.w	r2, r2, r1
   336c2:	6142      	str	r2, [r0, #20]
		b->next = 0;
   336c4:	f847 3035 	str.w	r3, [r7, r5, lsl #3]

		b->next = second;
		chunk_set(h, first, FREE_NEXT, second);
		chunk_set(h, second, FREE_PREV, first);
	}
}
   336c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   336cc:	4631      	mov	r1, r6
   336ce:	2202      	movs	r2, #2
   336d0:	f7ff ffc2 	bl	33658 <chunk_field>
	return chunk_field(h, c, FREE_NEXT);
   336d4:	4631      	mov	r1, r6
	return chunk_field(h, c, FREE_PREV);
   336d6:	4680      	mov	r8, r0
	return chunk_field(h, c, FREE_NEXT);
   336d8:	2203      	movs	r2, #3
   336da:	4620      	mov	r0, r4
   336dc:	f7ff ffbc 	bl	33658 <chunk_field>
   336e0:	4606      	mov	r6, r0
		b->next = second;
   336e2:	f847 0035 	str.w	r0, [r7, r5, lsl #3]
		chunk_set(h, first, FREE_NEXT, second);
   336e6:	4603      	mov	r3, r0
   336e8:	4641      	mov	r1, r8
   336ea:	4620      	mov	r0, r4
   336ec:	2203      	movs	r2, #3
   336ee:	f7ff ffbf 	bl	33670 <chunk_set>
		chunk_set(h, second, FREE_PREV, first);
   336f2:	4643      	mov	r3, r8
   336f4:	4631      	mov	r1, r6
   336f6:	4620      	mov	r0, r4
}
   336f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		chunk_set(h, second, FREE_PREV, first);
   336fc:	2202      	movs	r2, #2
   336fe:	f7ff bfb7 	b.w	33670 <chunk_set>

00033702 <free_list_add>:

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   33702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33706:	4604      	mov	r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   33708:	2200      	movs	r2, #0
   3370a:	460d      	mov	r5, r1
   3370c:	f7ff ffa4 	bl	33658 <chunk_field>
   33710:	68e3      	ldr	r3, [r4, #12]
   33712:	4018      	ands	r0, r3
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   33714:	68a3      	ldr	r3, [r4, #8]
}

static int bucket_idx(struct z_heap *h, size_t sz)
{
	/* A chunk of size 2 is the minimum size on big heaps */
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   33716:	fab0 f280 	clz	r2, r0
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   3371a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   3371e:	bf34      	ite	cc
   33720:	2000      	movcc	r0, #0
   33722:	2001      	movcs	r0, #1
	int b = bucket_idx(h, size(h, c));

	if (h->buckets[b].list_size++ == 0) {
   33724:	6863      	ldr	r3, [r4, #4]
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   33726:	f1c0 001f 	rsb	r0, r0, #31
   3372a:	1a80      	subs	r0, r0, r2
   3372c:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   33730:	684a      	ldr	r2, [r1, #4]
   33732:	1c56      	adds	r6, r2, #1
   33734:	604e      	str	r6, [r1, #4]
   33736:	b9a2      	cbnz	r2, 33762 <free_list_add+0x60>
		CHECK(h->buckets[b].next == 0);
		CHECK((h->avail_buckets & (1 << b)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << b);
   33738:	2201      	movs	r2, #1
   3373a:	fa02 f100 	lsl.w	r1, r2, r0
   3373e:	6962      	ldr	r2, [r4, #20]
   33740:	430a      	orrs	r2, r1
   33742:	6162      	str	r2, [r4, #20]
		h->buckets[b].next = c;
		chunk_set(h, c, FREE_PREV, c);
   33744:	4629      	mov	r1, r5
		h->buckets[b].next = c;
   33746:	f843 5030 	str.w	r5, [r3, r0, lsl #3]
		chunk_set(h, c, FREE_PREV, c);
   3374a:	2202      	movs	r2, #2
   3374c:	462b      	mov	r3, r5
   3374e:	4620      	mov	r0, r4
   33750:	f7ff ff8e 	bl	33670 <chunk_set>
		chunk_set(h, c, FREE_NEXT, c);
   33754:	2203      	movs	r2, #3
   33756:	4629      	mov	r1, r5
		chunkid_t first = free_prev(h, second);

		chunk_set(h, c, FREE_PREV, first);
		chunk_set(h, c, FREE_NEXT, second);
		chunk_set(h, first, FREE_NEXT, c);
		chunk_set(h, second, FREE_PREV, c);
   33758:	4620      	mov	r0, r4
	}

	CHECK(h->avail_buckets & (1 << bucket_idx(h, size(h, c))));
}
   3375a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		chunk_set(h, second, FREE_PREV, c);
   3375e:	f7ff bf87 	b.w	33670 <chunk_set>
		chunkid_t second = h->buckets[b].next;
   33762:	f853 6030 	ldr.w	r6, [r3, r0, lsl #3]
	return chunk_field(h, c, FREE_PREV);
   33766:	2202      	movs	r2, #2
   33768:	4631      	mov	r1, r6
   3376a:	4620      	mov	r0, r4
   3376c:	f7ff ff74 	bl	33658 <chunk_field>
   33770:	4607      	mov	r7, r0
		chunk_set(h, c, FREE_PREV, first);
   33772:	4603      	mov	r3, r0
   33774:	2202      	movs	r2, #2
   33776:	4629      	mov	r1, r5
   33778:	4620      	mov	r0, r4
   3377a:	f7ff ff79 	bl	33670 <chunk_set>
		chunk_set(h, c, FREE_NEXT, second);
   3377e:	4633      	mov	r3, r6
   33780:	2203      	movs	r2, #3
   33782:	4629      	mov	r1, r5
   33784:	4620      	mov	r0, r4
   33786:	f7ff ff73 	bl	33670 <chunk_set>
		chunk_set(h, first, FREE_NEXT, c);
   3378a:	2203      	movs	r2, #3
   3378c:	4639      	mov	r1, r7
   3378e:	462b      	mov	r3, r5
   33790:	4620      	mov	r0, r4
   33792:	f7ff ff6d 	bl	33670 <chunk_set>
		chunk_set(h, second, FREE_PREV, c);
   33796:	2202      	movs	r2, #2
   33798:	4631      	mov	r1, r6
   3379a:	e7dd      	b.n	33758 <free_list_add+0x56>

0003379c <split_alloc>:

/* Allocates (fit check has already been perfomred) from the next
 * chunk at the specified bucket level
 */
static void *split_alloc(struct z_heap *h, int bidx, size_t sz)
{
   3379c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   337a0:	4604      	mov	r4, r0
	CHECK(h->buckets[bidx].next != 0
	      && sz <= size(h, h->buckets[bidx].next));

	chunkid_t c = h->buckets[bidx].next;
   337a2:	6843      	ldr	r3, [r0, #4]
{
   337a4:	4691      	mov	r9, r2
	chunkid_t c = h->buckets[bidx].next;
   337a6:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]

	free_list_remove(h, bidx, c);
   337aa:	462a      	mov	r2, r5
   337ac:	f7ff ff77 	bl	3369e <free_list_remove>
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   337b0:	2200      	movs	r2, #0
   337b2:	4629      	mov	r1, r5
   337b4:	4620      	mov	r0, r4
   337b6:	f7ff ff4f 	bl	33658 <chunk_field>
	/* Split off remainder if it's usefully large */
	size_t rem = size(h, c) - sz;

	CHECK(rem < h->len);

	if (rem >= (big_heap(h) ? 2 : 1)) {
   337ba:	68a3      	ldr	r3, [r4, #8]
   337bc:	68e6      	ldr	r6, [r4, #12]
   337be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   337c2:	bf2c      	ite	cs
   337c4:	2302      	movcs	r3, #2
   337c6:	2301      	movcc	r3, #1
   337c8:	4006      	ands	r6, r0
	size_t rem = size(h, c) - sz;
   337ca:	eba6 0609 	sub.w	r6, r6, r9
	if (rem >= (big_heap(h) ? 2 : 1)) {
   337ce:	42b3      	cmp	r3, r6
   337d0:	d82d      	bhi.n	3382e <split_alloc+0x92>
		chunkid_t c2 = c + sz;
		chunkid_t c3 = right_chunk(h, c);
   337d2:	4629      	mov	r1, r5
   337d4:	4620      	mov	r0, r4
   337d6:	f7ff ff58 	bl	3368a <right_chunk>
		chunkid_t c2 = c + sz;
   337da:	eb05 0709 	add.w	r7, r5, r9

		chunk_set(h, c, SIZE_AND_USED, sz);
   337de:	464b      	mov	r3, r9
   337e0:	2200      	movs	r2, #0
   337e2:	4629      	mov	r1, r5
		chunkid_t c3 = right_chunk(h, c);
   337e4:	4680      	mov	r8, r0
		chunk_set(h, c, SIZE_AND_USED, sz);
   337e6:	4620      	mov	r0, r4
   337e8:	f7ff ff42 	bl	33670 <chunk_set>
		chunk_set(h, c2, SIZE_AND_USED, rem);
   337ec:	4633      	mov	r3, r6
   337ee:	2200      	movs	r2, #0
   337f0:	4639      	mov	r1, r7
   337f2:	4620      	mov	r0, r4
   337f4:	f7ff ff3c 	bl	33670 <chunk_set>
		chunk_set(h, c2, LEFT_SIZE, sz);
   337f8:	464b      	mov	r3, r9
   337fa:	2201      	movs	r2, #1
   337fc:	4639      	mov	r1, r7
   337fe:	4620      	mov	r0, r4
   33800:	f7ff ff36 	bl	33670 <chunk_set>
   33804:	2200      	movs	r2, #0
   33806:	4639      	mov	r1, r7
   33808:	4620      	mov	r0, r4
   3380a:	f7ff ff25 	bl	33658 <chunk_field>
   3380e:	68e3      	ldr	r3, [r4, #12]
   33810:	4018      	ands	r0, r3
		if (!last_chunk(h, c2)) {
   33812:	68a3      	ldr	r3, [r4, #8]
	return (c + size(h, c)) == h->len;
   33814:	4438      	add	r0, r7
		if (!last_chunk(h, c2)) {
   33816:	4298      	cmp	r0, r3
   33818:	d005      	beq.n	33826 <split_alloc+0x8a>
			chunk_set(h, c3, LEFT_SIZE, rem);
   3381a:	4633      	mov	r3, r6
   3381c:	2201      	movs	r2, #1
   3381e:	4641      	mov	r1, r8
   33820:	4620      	mov	r0, r4
   33822:	f7ff ff25 	bl	33670 <chunk_set>
		}
		free_list_add(h, c2);
   33826:	4639      	mov	r1, r7
   33828:	4620      	mov	r0, r4
   3382a:	f7ff ff6a 	bl	33702 <free_list_add>
   3382e:	4629      	mov	r1, r5
   33830:	2200      	movs	r2, #0
   33832:	4620      	mov	r0, r4
   33834:	f7ff ff10 	bl	33658 <chunk_field>
   33838:	68e2      	ldr	r2, [r4, #12]
	chunk_set(h, c, SIZE_AND_USED,
   3383a:	4629      	mov	r1, r5
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   3383c:	ea00 0302 	and.w	r3, r0, r2
		  size(h, c) | (used ? (h->size_mask + 1) : 0));
   33840:	3201      	adds	r2, #1
	chunk_set(h, c, SIZE_AND_USED,
   33842:	4313      	orrs	r3, r2
   33844:	4620      	mov	r0, r4
   33846:	2200      	movs	r2, #0
   33848:	f7ff ff12 	bl	33670 <chunk_set>
	return big_heap(h) ? 8 : 4;
   3384c:	68a3      	ldr	r3, [r4, #8]
	u8_t *ret = ((u8_t *)&h->buf[c]) + chunk_header_bytes(h);
   3384e:	6820      	ldr	r0, [r4, #0]
   33850:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   33854:	bf2c      	ite	cs
   33856:	2308      	movcs	r3, #8
   33858:	2304      	movcc	r3, #4
   3385a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
	}

	chunk_set_used(h, c, true);

	return chunk_mem(h, c);
}
   3385e:	4428      	add	r0, r5
   33860:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00033864 <sys_heap_free>:

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   33864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (mem == NULL) {
   33868:	2900      	cmp	r1, #0
   3386a:	f000 80ab 	beq.w	339c4 <sys_heap_free+0x160>
		return; /* ISO C free() semantics */
	}

	struct z_heap *h = heap->heap;
   3386e:	6804      	ldr	r4, [r0, #0]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   33870:	2200      	movs	r2, #0
	return big_heap(h) ? 8 : 4;
   33872:	68a7      	ldr	r7, [r4, #8]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   33874:	4620      	mov	r0, r4
	return big_heap(h) ? 8 : 4;
   33876:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   3387a:	bf2c      	ite	cs
   3387c:	2508      	movcs	r5, #8
   3387e:	2504      	movcc	r5, #4
	chunkid_t c = ((u8_t *)mem - chunk_header_bytes(h)
   33880:	1b4d      	subs	r5, r1, r5
		       - (u8_t *)h->buf) / CHUNK_UNIT;
   33882:	6821      	ldr	r1, [r4, #0]
   33884:	1a6d      	subs	r5, r5, r1
   33886:	bf48      	it	mi
   33888:	3507      	addmi	r5, #7
   3388a:	10ed      	asrs	r5, r5, #3
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   3388c:	4629      	mov	r1, r5
   3388e:	f7ff fee3 	bl	33658 <chunk_field>
   33892:	68e6      	ldr	r6, [r4, #12]
   33894:	ea06 0800 	and.w	r8, r6, r0
	return (c + size(h, c)) == h->len;
   33898:	eb05 0308 	add.w	r3, r5, r8

	/* Merge with right chunk?  We can just absorb it. */
	if (!last_chunk(h, c) && !used(h, right_chunk(h, c))) {
   3389c:	42bb      	cmp	r3, r7
   3389e:	d036      	beq.n	3390e <sys_heap_free+0xaa>
   338a0:	4629      	mov	r1, r5
   338a2:	4620      	mov	r0, r4
   338a4:	f7ff fef1 	bl	3368a <right_chunk>
	return (chunk_field(h, c, SIZE_AND_USED) & ~h->size_mask) != 0;
   338a8:	2200      	movs	r2, #0
   338aa:	4601      	mov	r1, r0
   338ac:	4682      	mov	sl, r0
   338ae:	4620      	mov	r0, r4
   338b0:	f7ff fed2 	bl	33658 <chunk_field>
   338b4:	ea30 0906 	bics.w	r9, r0, r6
   338b8:	d129      	bne.n	3390e <sys_heap_free+0xaa>
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   338ba:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   338be:	bf34      	ite	cc
   338c0:	2100      	movcc	r1, #0
   338c2:	2101      	movcs	r1, #1
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   338c4:	4006      	ands	r6, r0
		chunkid_t rc = right_chunk(h, c);
		size_t newsz = size(h, c) + size(h, rc);
   338c6:	44b0      	add	r8, r6
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   338c8:	fab6 f686 	clz	r6, r6
   338cc:	f1c1 011f 	rsb	r1, r1, #31

		free_list_remove(h, bucket_idx(h, size(h, rc)), rc);
   338d0:	4652      	mov	r2, sl
   338d2:	1b89      	subs	r1, r1, r6
   338d4:	4620      	mov	r0, r4
   338d6:	f7ff fee2 	bl	3369e <free_list_remove>
		chunk_set(h, c, SIZE_AND_USED, newsz);
   338da:	4643      	mov	r3, r8
   338dc:	464a      	mov	r2, r9
   338de:	4629      	mov	r1, r5
   338e0:	4620      	mov	r0, r4
   338e2:	f7ff fec5 	bl	33670 <chunk_set>
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   338e6:	4629      	mov	r1, r5
   338e8:	4620      	mov	r0, r4
   338ea:	f7ff feb5 	bl	33658 <chunk_field>
   338ee:	68e3      	ldr	r3, [r4, #12]
   338f0:	4018      	ands	r0, r3
		if (!last_chunk(h, c)) {
   338f2:	68a3      	ldr	r3, [r4, #8]
	return (c + size(h, c)) == h->len;
   338f4:	4428      	add	r0, r5
		if (!last_chunk(h, c)) {
   338f6:	4283      	cmp	r3, r0
   338f8:	d009      	beq.n	3390e <sys_heap_free+0xaa>
			chunk_set(h, right_chunk(h, c), LEFT_SIZE, newsz);
   338fa:	4629      	mov	r1, r5
   338fc:	4620      	mov	r0, r4
   338fe:	f7ff fec4 	bl	3368a <right_chunk>
   33902:	4643      	mov	r3, r8
   33904:	4601      	mov	r1, r0
   33906:	2201      	movs	r2, #1
   33908:	4620      	mov	r0, r4
   3390a:	f7ff feb1 	bl	33670 <chunk_set>
		}
	}

	/* Merge with left chunk?  It absorbs us. */
	if (c != h->chunk0 && !used(h, left_chunk(h, c))) {
   3390e:	6923      	ldr	r3, [r4, #16]
   33910:	42ab      	cmp	r3, r5
   33912:	d045      	beq.n	339a0 <sys_heap_free+0x13c>
	return chunk_field(h, c, LEFT_SIZE);
   33914:	2201      	movs	r2, #1
   33916:	4629      	mov	r1, r5
   33918:	4620      	mov	r0, r4
   3391a:	f7ff fe9d 	bl	33658 <chunk_field>
	return c - left_size(h, c);
   3391e:	eba5 0800 	sub.w	r8, r5, r0
	return (chunk_field(h, c, SIZE_AND_USED) & ~h->size_mask) != 0;
   33922:	2200      	movs	r2, #0
   33924:	4641      	mov	r1, r8
   33926:	4620      	mov	r0, r4
   33928:	f7ff fe96 	bl	33658 <chunk_field>
   3392c:	68e7      	ldr	r7, [r4, #12]
   3392e:	4606      	mov	r6, r0
   33930:	ea30 0907 	bics.w	r9, r0, r7
   33934:	d134      	bne.n	339a0 <sys_heap_free+0x13c>
   33936:	464a      	mov	r2, r9
   33938:	4629      	mov	r1, r5
   3393a:	4620      	mov	r0, r4
   3393c:	f7ff fe8c 	bl	33658 <chunk_field>
   33940:	4682      	mov	sl, r0
		chunkid_t lc = left_chunk(h, c);
		chunkid_t rc = right_chunk(h, c);
   33942:	4629      	mov	r1, r5
   33944:	4620      	mov	r0, r4
   33946:	f7ff fea0 	bl	3368a <right_chunk>
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   3394a:	68a1      	ldr	r1, [r4, #8]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   3394c:	403e      	ands	r6, r7
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   3394e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
   33952:	bf34      	ite	cc
   33954:	2100      	movcc	r1, #0
   33956:	2101      	movcs	r1, #1
		size_t csz = size(h, c);
		size_t merged_sz = csz + size(h, lc);
   33958:	ea07 070a 	and.w	r7, r7, sl
   3395c:	4437      	add	r7, r6
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   3395e:	fab6 f686 	clz	r6, r6
   33962:	f1c1 011f 	rsb	r1, r1, #31

		free_list_remove(h, bucket_idx(h, size(h, lc)), lc);
   33966:	4642      	mov	r2, r8
   33968:	1b89      	subs	r1, r1, r6
		chunkid_t rc = right_chunk(h, c);
   3396a:	4605      	mov	r5, r0
		free_list_remove(h, bucket_idx(h, size(h, lc)), lc);
   3396c:	4620      	mov	r0, r4
   3396e:	f7ff fe96 	bl	3369e <free_list_remove>
		chunk_set(h, lc, SIZE_AND_USED, merged_sz);
   33972:	463b      	mov	r3, r7
   33974:	464a      	mov	r2, r9
   33976:	4641      	mov	r1, r8
   33978:	4620      	mov	r0, r4
   3397a:	f7ff fe79 	bl	33670 <chunk_set>
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   3397e:	4641      	mov	r1, r8
   33980:	4620      	mov	r0, r4
   33982:	f7ff fe69 	bl	33658 <chunk_field>
   33986:	68e3      	ldr	r3, [r4, #12]
   33988:	4018      	ands	r0, r3
		if (!last_chunk(h, lc)) {
   3398a:	68a3      	ldr	r3, [r4, #8]
	return (c + size(h, c)) == h->len;
   3398c:	4440      	add	r0, r8
		if (!last_chunk(h, lc)) {
   3398e:	4298      	cmp	r0, r3
   33990:	d005      	beq.n	3399e <sys_heap_free+0x13a>
			chunk_set(h, rc, LEFT_SIZE, merged_sz);
   33992:	463b      	mov	r3, r7
   33994:	2201      	movs	r2, #1
   33996:	4629      	mov	r1, r5
   33998:	4620      	mov	r0, r4
   3399a:	f7ff fe69 	bl	33670 <chunk_set>
		}

		c = lc;
   3399e:	4645      	mov	r5, r8
   339a0:	4629      	mov	r1, r5
   339a2:	2200      	movs	r2, #0
   339a4:	4620      	mov	r0, r4
   339a6:	f7ff fe57 	bl	33658 <chunk_field>
   339aa:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, SIZE_AND_USED,
   339ac:	4629      	mov	r1, r5
   339ae:	4003      	ands	r3, r0
   339b0:	2200      	movs	r2, #0
   339b2:	4620      	mov	r0, r4
   339b4:	f7ff fe5c 	bl	33670 <chunk_set>
	}

	chunk_set_used(h, c, false);
	free_list_add(h, c);
   339b8:	4629      	mov	r1, r5
   339ba:	4620      	mov	r0, r4
}
   339bc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	free_list_add(h, c);
   339c0:	f7ff be9f 	b.w	33702 <free_list_add>
}
   339c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000339c8 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   339c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct z_heap *h = heap->heap;
   339cc:	6804      	ldr	r4, [r0, #0]
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   339ce:	1dcd      	adds	r5, r1, #7
	return big_heap(h) ? 8 : 4;
   339d0:	68a2      	ldr	r2, [r4, #8]
   339d2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   339d6:	bf2c      	ite	cs
   339d8:	2308      	movcs	r3, #8
   339da:	2304      	movcc	r3, #4
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   339dc:	441d      	add	r5, r3
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   339de:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   339e2:	ea4f 05d5 	mov.w	r5, r5, lsr #3
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   339e6:	fab5 f685 	clz	r6, r5
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   339ea:	bf34      	ite	cc
   339ec:	2300      	movcc	r3, #0
   339ee:	2301      	movcs	r3, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   339f0:	441e      	add	r6, r3
   339f2:	f1c6 081f 	rsb	r8, r6, #31
	size_t sz = bytes_to_chunksz(h, bytes);
	int bi = bucket_idx(h, sz);
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bytes == 0 || bi > bucket_idx(h, h->len)) {
   339f6:	2900      	cmp	r1, #0
   339f8:	d03b      	beq.n	33a72 <sys_heap_alloc+0xaa>
   339fa:	fab2 f282 	clz	r2, r2
   339fe:	f1c3 031f 	rsb	r3, r3, #31
   33a02:	1a9b      	subs	r3, r3, r2
   33a04:	4598      	cmp	r8, r3
   33a06:	dc34      	bgt.n	33a72 <sys_heap_alloc+0xaa>
	struct z_heap_bucket *b = &h->buckets[bi];
   33a08:	6867      	ldr	r7, [r4, #4]
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	int loops = MIN(b->list_size, CONFIG_SYS_HEAP_ALLOC_LOOPS);

	for (int i = 0; i < loops; i++) {
   33a0a:	f04f 0a00 	mov.w	sl, #0
	struct z_heap_bucket *b = &h->buckets[bi];
   33a0e:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
	int loops = MIN(b->list_size, CONFIG_SYS_HEAP_ALLOC_LOOPS);
   33a12:	687b      	ldr	r3, [r7, #4]
   33a14:	2b03      	cmp	r3, #3
   33a16:	bf28      	it	cs
   33a18:	2303      	movcs	r3, #3
   33a1a:	4699      	mov	r9, r3
	for (int i = 0; i < loops; i++) {
   33a1c:	45ca      	cmp	sl, r9
   33a1e:	db0d      	blt.n	33a3c <sys_heap_alloc+0x74>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   33a20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   33a24:	f1c6 0620 	rsb	r6, r6, #32
   33a28:	6963      	ldr	r3, [r4, #20]
   33a2a:	40b1      	lsls	r1, r6

	if ((bmask & h->avail_buckets) != 0) {
   33a2c:	4019      	ands	r1, r3
   33a2e:	d020      	beq.n	33a72 <sys_heap_alloc+0xaa>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);

		return split_alloc(h, minbucket, sz);
   33a30:	fa91 f1a1 	rbit	r1, r1
   33a34:	462a      	mov	r2, r5
   33a36:	fab1 f181 	clz	r1, r1
   33a3a:	e00c      	b.n	33a56 <sys_heap_alloc+0x8e>
		if (size(h, b->next) >= sz) {
   33a3c:	f8d7 b000 	ldr.w	fp, [r7]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   33a40:	2200      	movs	r2, #0
   33a42:	4659      	mov	r1, fp
   33a44:	4620      	mov	r0, r4
   33a46:	f7ff fe07 	bl	33658 <chunk_field>
   33a4a:	68e3      	ldr	r3, [r4, #12]
   33a4c:	4018      	ands	r0, r3
   33a4e:	42a8      	cmp	r0, r5
   33a50:	d306      	bcc.n	33a60 <sys_heap_alloc+0x98>
			return split_alloc(h, bi, sz);
   33a52:	462a      	mov	r2, r5
   33a54:	4641      	mov	r1, r8
		return split_alloc(h, minbucket, sz);
   33a56:	4620      	mov	r0, r4
	}

	return NULL;
}
   33a58:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return split_alloc(h, minbucket, sz);
   33a5c:	f7ff be9e 	b.w	3379c <split_alloc>
	return chunk_field(h, c, FREE_NEXT);
   33a60:	2203      	movs	r2, #3
   33a62:	4659      	mov	r1, fp
   33a64:	4620      	mov	r0, r4
   33a66:	f7ff fdf7 	bl	33658 <chunk_field>
	for (int i = 0; i < loops; i++) {
   33a6a:	f10a 0a01 	add.w	sl, sl, #1
		b->next = free_next(h, b->next);
   33a6e:	6038      	str	r0, [r7, #0]
   33a70:	e7d4      	b.n	33a1c <sys_heap_alloc+0x54>
}
   33a72:	2000      	movs	r0, #0
   33a74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00033a78 <sys_heap_init>:

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   33a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if __SIZEOF_SIZE_T__ > 4
	CHECK(bytes < 0x800000000ULL);
#endif

	/* Round the start up, the end down */
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
   33a7a:	1dcc      	adds	r4, r1, #7
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
   33a7c:	4411      	add	r1, r2

	heap->heap = (struct z_heap *)addr;
	h->buf = (u64_t *)addr;
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
	h->len = buf_sz;
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
   33a7e:	f647 72ff 	movw	r2, #32767	; 0x7fff
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
   33a82:	f024 0407 	bic.w	r4, r4, #7
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
   33a86:	f021 0107 	bic.w	r1, r1, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   33a8a:	1b09      	subs	r1, r1, r4
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
   33a8c:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   33a90:	ea4f 03d1 	mov.w	r3, r1, lsr #3
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
   33a94:	bf2c      	ite	cs
   33a96:	f06f 4100 	mvncs.w	r1, #2147483648	; 0x80000000
   33a9a:	4611      	movcc	r1, r2
	heap->heap = (struct z_heap *)addr;
   33a9c:	6004      	str	r4, [r0, #0]
	h->avail_buckets = 0;
   33a9e:	2000      	movs	r0, #0
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   33aa0:	4293      	cmp	r3, r2
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
   33aa2:	60e1      	str	r1, [r4, #12]
   33aa4:	bf94      	ite	ls
   33aa6:	2100      	movls	r1, #0
   33aa8:	2101      	movhi	r1, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   33aaa:	fab3 f683 	clz	r6, r3
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   33aae:	4617      	mov	r7, r2
				* sizeof(struct z_heap_bucket));

	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);

	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
		heap->heap->buckets[i].list_size = 0;
   33ab0:	4684      	mov	ip, r0
				* sizeof(struct z_heap_bucket));
   33ab2:	f1c1 0120 	rsb	r1, r1, #32
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
   33ab6:	f104 0518 	add.w	r5, r4, #24
				* sizeof(struct z_heap_bucket));
   33aba:	1b89      	subs	r1, r1, r6
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   33abc:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
	h->len = buf_sz;
   33ac0:	e9c4 5301 	strd	r5, r3, [r4, #4]
	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
   33ac4:	3103      	adds	r1, #3
	h->buf = (u64_t *)addr;
   33ac6:	6024      	str	r4, [r4, #0]
	h->avail_buckets = 0;
   33ac8:	6160      	str	r0, [r4, #20]
	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
   33aca:	6121      	str	r1, [r4, #16]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   33acc:	68a2      	ldr	r2, [r4, #8]
   33ace:	42ba      	cmp	r2, r7
   33ad0:	bf94      	ite	ls
   33ad2:	2200      	movls	r2, #0
   33ad4:	2201      	movhi	r2, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   33ad6:	f1c2 021f 	rsb	r2, r2, #31
   33ada:	1b92      	subs	r2, r2, r6
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
   33adc:	4290      	cmp	r0, r2
   33ade:	dd0a      	ble.n	33af6 <sys_heap_init+0x7e>
		heap->heap->buckets[i].next = 0;
	}

	chunk_set(h, h->chunk0, SIZE_AND_USED, buf_sz - h->chunk0);
   33ae0:	1a5b      	subs	r3, r3, r1
   33ae2:	4620      	mov	r0, r4
   33ae4:	2200      	movs	r2, #0
   33ae6:	f7ff fdc3 	bl	33670 <chunk_set>
	free_list_add(h, h->chunk0);
   33aea:	6921      	ldr	r1, [r4, #16]
   33aec:	4620      	mov	r0, r4
}
   33aee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, h->chunk0);
   33af2:	f7ff be06 	b.w	33702 <free_list_add>
		heap->heap->buckets[i].list_size = 0;
   33af6:	f8c5 c004 	str.w	ip, [r5, #4]
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
   33afa:	3001      	adds	r0, #1
		heap->heap->buckets[i].next = 0;
   33afc:	f845 cb08 	str.w	ip, [r5], #8
   33b00:	e7e4      	b.n	33acc <sys_heap_init+0x54>

00033b02 <get_elem_size>:
{
   33b02:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   33b06:	4605      	mov	r5, r0
   33b08:	2701      	movs	r7, #1
	switch (descr->type) {
   33b0a:	796b      	ldrb	r3, [r5, #5]
   33b0c:	085b      	lsrs	r3, r3, #1
   33b0e:	2b5b      	cmp	r3, #91	; 0x5b
   33b10:	d02d      	beq.n	33b6e <get_elem_size+0x6c>
   33b12:	d80b      	bhi.n	33b2c <get_elem_size+0x2a>
   33b14:	2b22      	cmp	r3, #34	; 0x22
   33b16:	d02e      	beq.n	33b76 <get_elem_size+0x74>
		return -EINVAL;
   33b18:	2b30      	cmp	r3, #48	; 0x30
   33b1a:	bf08      	it	eq
   33b1c:	2404      	moveq	r4, #4
   33b1e:	bf18      	it	ne
   33b20:	f06f 0415 	mvnne.w	r4, #21
}
   33b24:	fb07 f004 	mul.w	r0, r7, r4
   33b28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	switch (descr->type) {
   33b2c:	2b74      	cmp	r3, #116	; 0x74
   33b2e:	d024      	beq.n	33b7a <get_elem_size+0x78>
   33b30:	2b7b      	cmp	r3, #123	; 0x7b
   33b32:	d003      	beq.n	33b3c <get_elem_size+0x3a>
		return -EINVAL;
   33b34:	2b66      	cmp	r3, #102	; 0x66
   33b36:	bf08      	it	eq
   33b38:	2401      	moveq	r4, #1
   33b3a:	e7f0      	b.n	33b1e <get_elem_size+0x1c>
		for (i = 0; i < descr->object.sub_descr_len; i++) {
   33b3c:	2600      	movs	r6, #0
			total += ROUND_UP(s, 1 << descr->align_shift);
   33b3e:	f04f 0901 	mov.w	r9, #1
		ptrdiff_t total = 0;
   33b42:	4634      	mov	r4, r6
		for (i = 0; i < descr->object.sub_descr_len; i++) {
   33b44:	f8d5 800c 	ldr.w	r8, [r5, #12]
   33b48:	45b0      	cmp	r8, r6
   33b4a:	d0eb      	beq.n	33b24 <get_elem_size+0x22>
			ptrdiff_t s = get_elem_size(&descr->object.sub_descr[i]);
   33b4c:	68a8      	ldr	r0, [r5, #8]
   33b4e:	eb00 1006 	add.w	r0, r0, r6, lsl #4
   33b52:	f7ff ffd6 	bl	33b02 <get_elem_size>
			total += ROUND_UP(s, 1 << descr->align_shift);
   33b56:	792b      	ldrb	r3, [r5, #4]
		for (i = 0; i < descr->object.sub_descr_len; i++) {
   33b58:	3601      	adds	r6, #1
			total += ROUND_UP(s, 1 << descr->align_shift);
   33b5a:	f003 0303 	and.w	r3, r3, #3
   33b5e:	fa09 f303 	lsl.w	r3, r9, r3
   33b62:	1e5a      	subs	r2, r3, #1
   33b64:	4410      	add	r0, r2
   33b66:	425b      	negs	r3, r3
   33b68:	4003      	ands	r3, r0
   33b6a:	441c      	add	r4, r3
   33b6c:	e7ec      	b.n	33b48 <get_elem_size+0x46>
		return descr->array.n_elements * get_elem_size(descr->array.element_descr);
   33b6e:	e9d5 5302 	ldrd	r5, r3, [r5, #8]
   33b72:	435f      	muls	r7, r3
   33b74:	e7c9      	b.n	33b0a <get_elem_size+0x8>
		return sizeof(s32_t);
   33b76:	2404      	movs	r4, #4
   33b78:	e7d4      	b.n	33b24 <get_elem_size+0x22>
		return sizeof(bool);
   33b7a:	2401      	movs	r4, #1
   33b7c:	e7d2      	b.n	33b24 <get_elem_size+0x22>

00033b7e <escape_as>:
	switch (chr) {
   33b7e:	280c      	cmp	r0, #12
   33b80:	d012      	beq.n	33ba8 <escape_as+0x2a>
   33b82:	d809      	bhi.n	33b98 <escape_as+0x1a>
   33b84:	2809      	cmp	r0, #9
   33b86:	d011      	beq.n	33bac <escape_as+0x2e>
   33b88:	280a      	cmp	r0, #10
   33b8a:	d011      	beq.n	33bb0 <escape_as+0x32>
	return 0;
   33b8c:	2808      	cmp	r0, #8
   33b8e:	bf08      	it	eq
   33b90:	2062      	moveq	r0, #98	; 0x62
   33b92:	bf18      	it	ne
   33b94:	2000      	movne	r0, #0
   33b96:	4770      	bx	lr
	switch (chr) {
   33b98:	2822      	cmp	r0, #34	; 0x22
   33b9a:	d00a      	beq.n	33bb2 <escape_as+0x34>
   33b9c:	285c      	cmp	r0, #92	; 0x5c
   33b9e:	d008      	beq.n	33bb2 <escape_as+0x34>
	return 0;
   33ba0:	280d      	cmp	r0, #13
   33ba2:	bf08      	it	eq
   33ba4:	2072      	moveq	r0, #114	; 0x72
   33ba6:	e7f4      	b.n	33b92 <escape_as+0x14>
		return 'f';
   33ba8:	2066      	movs	r0, #102	; 0x66
   33baa:	4770      	bx	lr
		return 't';
   33bac:	2074      	movs	r0, #116	; 0x74
   33bae:	4770      	bx	lr
		return 'n';
   33bb0:	206e      	movs	r0, #110	; 0x6e
}
   33bb2:	4770      	bx	lr

00033bb4 <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   33bb4:	4040      	eors	r0, r0
   33bb6:	f380 8811 	msr	BASEPRI, r0
   33bba:	f04f 0004 	mov.w	r0, #4
   33bbe:	df02      	svc	2
}
   33bc0:	4770      	bx	lr

00033bc2 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   33bc2:	4770      	bx	lr

00033bc4 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   33bc4:	f7f6 bf3c 	b.w	2aa40 <SystemInit>

00033bc8 <log_backend_is_active>:
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   33bc8:	6843      	ldr	r3, [r0, #4]
}
   33bca:	7958      	ldrb	r0, [r3, #5]
   33bcc:	4770      	bx	lr

00033bce <k_cycle_get_32_wrapper>:
   33bce:	f7e6 bc8d 	b.w	1a4ec <z_timer_cycle_get_32>

00033bd2 <dummy_timestamp>:
   33bd2:	2000      	movs	r0, #0
   33bd4:	4770      	bx	lr

00033bd6 <log_printk>:
			log_generic(src_level_union.structure, fmt, ap);
   33bd6:	460a      	mov	r2, r1
   33bd8:	4601      	mov	r1, r0
   33bda:	f04f 0000 	mov.w	r0, #0
   33bde:	f7e5 b8b7 	b.w	18d50 <log_generic>

00033be2 <log_string_sync>:
{
   33be2:	b40e      	push	{r1, r2, r3}
   33be4:	b503      	push	{r0, r1, lr}
   33be6:	aa03      	add	r2, sp, #12
   33be8:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
   33bec:	9201      	str	r2, [sp, #4]
	log_generic(src_level, fmt, ap);
   33bee:	f7e5 f8af 	bl	18d50 <log_generic>
}
   33bf2:	b002      	add	sp, #8
   33bf4:	f85d eb04 	ldr.w	lr, [sp], #4
   33bf8:	b003      	add	sp, #12
   33bfa:	4770      	bx	lr

00033bfc <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
   33bfc:	b508      	push	{r3, lr}
				K_THREAD_STACK_SIZEOF(logging_stack),
				log_process_thread_func, NULL, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
   33bfe:	f7e5 f91d 	bl	18e3c <log_init>
	}

	return 0;
}
   33c02:	2000      	movs	r0, #0
   33c04:	bd08      	pop	{r3, pc}

00033c06 <log_strdup>:
}
   33c06:	4770      	bx	lr

00033c08 <out_func>:
{
   33c08:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((u8_t *)&c, 1, out_ctx->control_block->ctx);
   33c0a:	e9d1 3200 	ldrd	r3, r2, [r1]
{
   33c0e:	9001      	str	r0, [sp, #4]
		out_ctx->func((u8_t *)&c, 1, out_ctx->control_block->ctx);
   33c10:	6852      	ldr	r2, [r2, #4]
   33c12:	2101      	movs	r1, #1
   33c14:	a801      	add	r0, sp, #4
   33c16:	4798      	blx	r3
}
   33c18:	2000      	movs	r0, #0
   33c1a:	b003      	add	sp, #12
   33c1c:	f85d fb04 	ldr.w	pc, [sp], #4

00033c20 <buffer_write>:
{
   33c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33c22:	4606      	mov	r6, r0
   33c24:	460d      	mov	r5, r1
   33c26:	4614      	mov	r4, r2
   33c28:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   33c2a:	4621      	mov	r1, r4
   33c2c:	4628      	mov	r0, r5
   33c2e:	463a      	mov	r2, r7
   33c30:	47b0      	blx	r6
	} while (len != 0);
   33c32:	1a24      	subs	r4, r4, r0
		buf += processed;
   33c34:	4405      	add	r5, r0
	} while (len != 0);
   33c36:	d1f8      	bne.n	33c2a <buffer_write+0xa>
}
   33c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00033c3a <log_output_flush>:
		     log_output->control_block->offset,
   33c3a:	6842      	ldr	r2, [r0, #4]
{
   33c3c:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   33c3e:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   33c42:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   33c44:	6881      	ldr	r1, [r0, #8]
   33c46:	6800      	ldr	r0, [r0, #0]
   33c48:	f7ff ffea 	bl	33c20 <buffer_write>
	log_output->control_block->offset = 0;
   33c4c:	2200      	movs	r2, #0
   33c4e:	6863      	ldr	r3, [r4, #4]
   33c50:	601a      	str	r2, [r3, #0]
}
   33c52:	bd10      	pop	{r4, pc}

00033c54 <char_out>:
{
   33c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33c56:	460d      	mov	r5, r1
   33c58:	4616      	mov	r6, r2
	for (size_t i = 0; i < length; i++) {
   33c5a:	4604      	mov	r4, r0
   33c5c:	1847      	adds	r7, r0, r1
   33c5e:	42bc      	cmp	r4, r7
   33c60:	d101      	bne.n	33c66 <char_out+0x12>
}
   33c62:	4628      	mov	r0, r5
   33c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(dev, data[i]);
   33c66:	f814 1b01 	ldrb.w	r1, [r4], #1
   33c6a:	68b3      	ldr	r3, [r6, #8]
   33c6c:	4630      	mov	r0, r6
   33c6e:	685b      	ldr	r3, [r3, #4]
   33c70:	4798      	blx	r3
   33c72:	e7f4      	b.n	33c5e <char_out+0xa>

00033c74 <sntp_init>:
{
   33c74:	b570      	push	{r4, r5, r6, lr}
   33c76:	460d      	mov	r5, r1
   33c78:	4616      	mov	r6, r2
	if (!ctx || !addr) {
   33c7a:	4604      	mov	r4, r0
   33c7c:	b330      	cbz	r0, 33ccc <sntp_init+0x58>
   33c7e:	b329      	cbz	r1, 33ccc <sntp_init+0x58>
__ssp_bos_icheck3(memset, void *, int)
   33c80:	2214      	movs	r2, #20
   33c82:	2100      	movs	r1, #0
   33c84:	f005 f9d7 	bl	39036 <memset>
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   33c88:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   33c8a:	2211      	movs	r2, #17
   33c8c:	2102      	movs	r1, #2
   33c8e:	f7e5 fbaf 	bl	193f0 <z_impl_zsock_socket>
	if (ctx->sock.fd < 0) {
   33c92:	2800      	cmp	r0, #0
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   33c94:	60e0      	str	r0, [r4, #12]
	if (ctx->sock.fd < 0) {
   33c96:	da04      	bge.n	33ca2 <sntp_init+0x2e>
		return -errno;
   33c98:	f001 fc1b 	bl	354d2 <__errno>
   33c9c:	6800      	ldr	r0, [r0, #0]
   33c9e:	4240      	negs	r0, r0
}
   33ca0:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_zsock_connect(sock, addr, addrlen);
   33ca2:	4632      	mov	r2, r6
   33ca4:	4629      	mov	r1, r5
   33ca6:	f000 f8c7 	bl	33e38 <z_impl_zsock_connect>
	if (ret < 0) {
   33caa:	2800      	cmp	r0, #0
   33cac:	68e0      	ldr	r0, [r4, #12]
   33cae:	da02      	bge.n	33cb6 <sntp_init+0x42>
	return z_impl_zsock_close(sock);
   33cb0:	f000 f8a9 	bl	33e06 <z_impl_zsock_close>
   33cb4:	e7f0      	b.n	33c98 <sntp_init+0x24>
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   33cb6:	2101      	movs	r1, #1
	ctx->sock.fds[ctx->sock.nfds].fd = ctx->sock.fd;
   33cb8:	68a3      	ldr	r3, [r4, #8]
   33cba:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   33cbe:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
	ctx->sock.nfds++;
   33cc2:	440b      	add	r3, r1
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   33cc4:	8091      	strh	r1, [r2, #4]
	return 0;
   33cc6:	2000      	movs	r0, #0
	ctx->sock.nfds++;
   33cc8:	60a3      	str	r3, [r4, #8]
	return 0;
   33cca:	e7e9      	b.n	33ca0 <sntp_init+0x2c>
		return -EFAULT;
   33ccc:	f06f 000d 	mvn.w	r0, #13
   33cd0:	e7e6      	b.n	33ca0 <sntp_init+0x2c>

00033cd2 <sntp_close>:

void sntp_close(struct sntp_ctx *ctx)
{
	if (ctx) {
   33cd2:	b110      	cbz	r0, 33cda <sntp_close+0x8>
		(void)close(ctx->sock.fd);
   33cd4:	68c0      	ldr	r0, [r0, #12]
   33cd6:	f000 b896 	b.w	33e06 <z_impl_zsock_close>
	}
}
   33cda:	4770      	bx	lr

00033cdc <zsock_getaddrinfo>:
int zsock_getaddrinfo(const char *host, const char *service,
		      const struct zsock_addrinfo *hints,
		      struct zsock_addrinfo **res)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_getaddrinfo(host, service, hints, res);
   33cdc:	f7e5 bf60 	b.w	19ba0 <socket_offload_getaddrinfo>

00033ce0 <zsock_freeaddrinfo>:
}

void zsock_freeaddrinfo(struct zsock_addrinfo *ai)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_freeaddrinfo(ai);
   33ce0:	f7e5 bf92 	b.w	19c08 <socket_offload_freeaddrinfo>

00033ce4 <z_fdtable_call_ioctl>:
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
				       unsigned long request, ...)
{
   33ce4:	b40c      	push	{r2, r3}
   33ce6:	b513      	push	{r0, r1, r4, lr}
   33ce8:	460c      	mov	r4, r1
   33cea:	aa04      	add	r2, sp, #16
   33cec:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list args;
	int res;

	va_start(args, request);
	res = vtable->ioctl(obj, request, args);
   33cf0:	6883      	ldr	r3, [r0, #8]
   33cf2:	4620      	mov	r0, r4
	va_start(args, request);
   33cf4:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   33cf6:	4798      	blx	r3
	va_end(args);

	return res;
}
   33cf8:	b002      	add	sp, #8
   33cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   33cfe:	b002      	add	sp, #8
   33d00:	4770      	bx	lr

00033d02 <sock_getsockopt_vmeth>:
   33d02:	b508      	push	{r3, lr}
   33d04:	f001 fbe5 	bl	354d2 <__errno>
   33d08:	236d      	movs	r3, #109	; 0x6d
   33d0a:	6003      	str	r3, [r0, #0]
   33d0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   33d10:	bd08      	pop	{r3, pc}

00033d12 <k_fifo_wait_non_empty>:
{
   33d12:	b530      	push	{r4, r5, lr}
   33d14:	b087      	sub	sp, #28
   33d16:	4605      	mov	r5, r0
   33d18:	460c      	mov	r4, r1
	struct k_poll_event events[] = {
   33d1a:	2210      	movs	r2, #16
   33d1c:	2100      	movs	r1, #0
   33d1e:	a801      	add	r0, sp, #4
   33d20:	f005 f989 	bl	39036 <memset>
   33d24:	2304      	movs	r3, #4
   33d26:	9505      	str	r5, [sp, #20]
   33d28:	f88d 3011 	strb.w	r3, [sp, #17]
	return z_impl_k_poll(events, num_events, timeout);
   33d2c:	2101      	movs	r1, #1
   33d2e:	4622      	mov	r2, r4
   33d30:	eb0d 0003 	add.w	r0, sp, r3
   33d34:	f7fb fa64 	bl	2f200 <z_impl_k_poll>
}
   33d38:	b007      	add	sp, #28
   33d3a:	bd30      	pop	{r4, r5, pc}

00033d3c <zsock_received_cb>:
{
   33d3c:	b570      	push	{r4, r5, r6, lr}
   33d3e:	4604      	mov	r4, r0
   33d40:	f100 065c 	add.w	r6, r0, #92	; 0x5c
	if (!pkt) {
   33d44:	460d      	mov	r5, r1
   33d46:	b999      	cbnz	r1, 33d70 <zsock_received_cb+0x34>
	return z_queue_node_peek(sys_sflist_peek_tail(&queue->data_q), false);
   33d48:	6e00      	ldr	r0, [r0, #96]	; 0x60
   33d4a:	f004 ff87 	bl	38c5c <z_queue_node_peek>
		if (!last_pkt) {
   33d4e:	b940      	cbnz	r0, 33d62 <zsock_received_cb+0x26>
	val = (val & ~mask) | flag;
   33d50:	6da3      	ldr	r3, [r4, #88]	; 0x58
   33d52:	f043 0301 	orr.w	r3, r3, #1
	(ctx)->socket_data = UINT_TO_POINTER(val);
   33d56:	65a3      	str	r3, [r4, #88]	; 0x58
	z_impl_k_queue_cancel_wait(queue);
   33d58:	4630      	mov	r0, r6
}
   33d5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   33d5e:	f7f8 be77 	b.w	2ca50 <z_impl_k_queue_cancel_wait>
	pkt->sent_or_eof = eof;
   33d62:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
   33d66:	f043 0302 	orr.w	r3, r3, #2
   33d6a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
   33d6e:	bd70      	pop	{r4, r5, r6, pc}
   33d70:	f891 303d 	ldrb.w	r3, [r1, #61]	; 0x3d
   33d74:	f36f 0341 	bfc	r3, #1, #1
   33d78:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
	if (net_context_get_type(ctx) == SOCK_STREAM) {
   33d7c:	f7e5 fac6 	bl	1930c <net_context_get_type>
   33d80:	2801      	cmp	r0, #1
   33d82:	d106      	bne.n	33d92 <zsock_received_cb+0x56>
		net_context_update_recv_wnd(ctx, -net_pkt_remaining_data(pkt));
   33d84:	4628      	mov	r0, r5
   33d86:	f002 f904 	bl	35f92 <net_pkt_remaining_data>
   33d8a:	4241      	negs	r1, r0
   33d8c:	4620      	mov	r0, r4
   33d8e:	f001 feb3 	bl	35af8 <net_context_update_recv_wnd>
	k_fifo_put(&ctx->recv_q, pkt);
   33d92:	4629      	mov	r1, r5
   33d94:	4630      	mov	r0, r6
}
   33d96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_fifo_put(&ctx->recv_q, pkt);
   33d9a:	f004 bf78 	b.w	38c8e <k_queue_append>

00033d9e <zsock_close_ctx>:
{
   33d9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33da0:	4604      	mov	r4, r0
	if (net_context_get_state(ctx) == NET_CONTEXT_LISTENING) {
   33da2:	f7e5 fa93 	bl	192cc <net_context_get_state>
		(void)net_context_accept(ctx, NULL, K_NO_WAIT, NULL);
   33da6:	2300      	movs	r3, #0
	if (net_context_get_state(ctx) == NET_CONTEXT_LISTENING) {
   33da8:	2803      	cmp	r0, #3
		(void)net_context_accept(ctx, NULL, K_NO_WAIT, NULL);
   33daa:	461a      	mov	r2, r3
   33dac:	4619      	mov	r1, r3
   33dae:	4620      	mov	r0, r4
	if (net_context_get_state(ctx) == NET_CONTEXT_LISTENING) {
   33db0:	d11c      	bne.n	33dec <zsock_close_ctx+0x4e>
		(void)net_context_accept(ctx, NULL, K_NO_WAIT, NULL);
   33db2:	f7e9 f933 	bl	1d01c <net_context_accept>
	bool is_listen = net_context_get_state(ctx) == NET_CONTEXT_LISTENING;
   33db6:	4620      	mov	r0, r4
   33db8:	f7e5 fa88 	bl	192cc <net_context_get_state>
   33dbc:	4607      	mov	r7, r0
	while ((p = k_fifo_get(&ctx->recv_q, K_NO_WAIT)) != NULL) {
   33dbe:	f104 065c 	add.w	r6, r4, #92	; 0x5c
	return z_impl_k_queue_get(queue, timeout);
   33dc2:	2100      	movs	r1, #0
   33dc4:	4630      	mov	r0, r6
   33dc6:	f7f8 fe81 	bl	2cacc <z_impl_k_queue_get>
   33dca:	4605      	mov	r5, r0
   33dcc:	b988      	cbnz	r0, 33df2 <zsock_close_ctx+0x54>
	z_impl_k_queue_cancel_wait(queue);
   33dce:	4630      	mov	r0, r6
   33dd0:	f7f8 fe3e 	bl	2ca50 <z_impl_k_queue_cancel_wait>
	SET_ERRNO(net_context_put(ctx));
   33dd4:	4620      	mov	r0, r4
   33dd6:	f7e8 fe03 	bl	1c9e0 <net_context_put>
   33dda:	1e04      	subs	r4, r0, #0
   33ddc:	da11      	bge.n	33e02 <zsock_close_ctx+0x64>
   33dde:	f001 fb78 	bl	354d2 <__errno>
   33de2:	4264      	negs	r4, r4
   33de4:	6004      	str	r4, [r0, #0]
   33de6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   33dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		(void)net_context_recv(ctx, NULL, K_NO_WAIT, NULL);
   33dec:	f7e9 f966 	bl	1d0bc <net_context_recv>
   33df0:	e7e1      	b.n	33db6 <zsock_close_ctx+0x18>
		if (is_listen) {
   33df2:	2f03      	cmp	r7, #3
   33df4:	d102      	bne.n	33dfc <zsock_close_ctx+0x5e>
			net_context_put(p);
   33df6:	f7e8 fdf3 	bl	1c9e0 <net_context_put>
   33dfa:	e7e2      	b.n	33dc2 <zsock_close_ctx+0x24>
			net_pkt_unref(p);
   33dfc:	f001 ff61 	bl	35cc2 <net_pkt_unref>
   33e00:	e7df      	b.n	33dc2 <zsock_close_ctx+0x24>
	return 0;
   33e02:	4628      	mov	r0, r5
   33e04:	e7f1      	b.n	33dea <zsock_close_ctx+0x4c>

00033e06 <z_impl_zsock_close>:
{
   33e06:	b537      	push	{r0, r1, r2, r4, r5, lr}
	void *ctx = z_get_fd_obj_and_vtable(sock, &vtable);
   33e08:	a901      	add	r1, sp, #4
{
   33e0a:	4605      	mov	r5, r0
	void *ctx = z_get_fd_obj_and_vtable(sock, &vtable);
   33e0c:	f7e4 fd58 	bl	188c0 <z_get_fd_obj_and_vtable>
	if (ctx == NULL) {
   33e10:	4604      	mov	r4, r0
   33e12:	b150      	cbz	r0, 33e2a <z_impl_zsock_close+0x24>
	z_free_fd(sock);
   33e14:	4628      	mov	r0, r5
   33e16:	f7e4 fd93 	bl	18940 <z_free_fd>
	return z_fdtable_call_ioctl(vtable, ctx, ZFD_IOCTL_CLOSE);
   33e1a:	f44f 7280 	mov.w	r2, #256	; 0x100
   33e1e:	4621      	mov	r1, r4
   33e20:	9801      	ldr	r0, [sp, #4]
   33e22:	f7ff ff5f 	bl	33ce4 <z_fdtable_call_ioctl>
}
   33e26:	b003      	add	sp, #12
   33e28:	bd30      	pop	{r4, r5, pc}
		return -1;
   33e2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   33e2e:	e7fa      	b.n	33e26 <z_impl_zsock_close+0x20>

00033e30 <sock_bind_vmeth>:
}

static int sock_bind_vmeth(void *obj, const struct sockaddr *addr,
			   socklen_t addrlen)
{
	return zsock_bind_ctx(obj, addr, addrlen);
   33e30:	f7e5 bb32 	b.w	19498 <zsock_bind_ctx>

00033e34 <sock_connect_vmeth>:
}

static int sock_connect_vmeth(void *obj, const struct sockaddr *addr,
			      socklen_t addrlen)
{
	return zsock_connect_ctx(obj, addr, addrlen);
   33e34:	f7e5 bb54 	b.w	194e0 <zsock_connect_ctx>

00033e38 <z_impl_zsock_connect>:
{
   33e38:	b537      	push	{r0, r1, r2, r4, r5, lr}
   33e3a:	460c      	mov	r4, r1
	return z_get_fd_obj_and_vtable(sock,
   33e3c:	a901      	add	r1, sp, #4
{
   33e3e:	4615      	mov	r5, r2
	return z_get_fd_obj_and_vtable(sock,
   33e40:	f7e4 fd3e 	bl	188c0 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(connect, sock, addr, addrlen);
   33e44:	b138      	cbz	r0, 33e56 <z_impl_zsock_connect+0x1e>
   33e46:	9b01      	ldr	r3, [sp, #4]
   33e48:	691b      	ldr	r3, [r3, #16]
   33e4a:	b123      	cbz	r3, 33e56 <z_impl_zsock_connect+0x1e>
   33e4c:	462a      	mov	r2, r5
   33e4e:	4621      	mov	r1, r4
   33e50:	4798      	blx	r3
}
   33e52:	b003      	add	sp, #12
   33e54:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(connect, sock, addr, addrlen);
   33e56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   33e5a:	e7fa      	b.n	33e52 <z_impl_zsock_connect+0x1a>

00033e5c <sock_listen_vmeth>:
}

static int sock_listen_vmeth(void *obj, int backlog)
{
	return zsock_listen_ctx(obj, backlog);
   33e5c:	f7e5 bb60 	b.w	19520 <zsock_listen_ctx>

00033e60 <sock_accept_vmeth>:
}

static int sock_accept_vmeth(void *obj, struct sockaddr *addr,
			     socklen_t *addrlen)
{
	return zsock_accept_ctx(obj, addr, addrlen);
   33e60:	f7e5 bb78 	b.w	19554 <zsock_accept_ctx>

00033e64 <sock_sendto_vmeth>:

static ssize_t sock_sendto_vmeth(void *obj, const void *buf, size_t len,
				 int flags, const struct sockaddr *dest_addr,
				 socklen_t addrlen)
{
	return zsock_sendto_ctx(obj, buf, len, flags, dest_addr, addrlen);
   33e64:	f7e5 bbde 	b.w	19624 <zsock_sendto_ctx>

00033e68 <sock_write_vmeth>:
	return zsock_sendto_ctx(obj, buffer, count, 0, NULL, 0);
   33e68:	2300      	movs	r3, #0
{
   33e6a:	b507      	push	{r0, r1, r2, lr}
	return zsock_sendto_ctx(obj, buffer, count, 0, NULL, 0);
   33e6c:	e9cd 3300 	strd	r3, r3, [sp]
   33e70:	f7e5 fbd8 	bl	19624 <zsock_sendto_ctx>
}
   33e74:	b003      	add	sp, #12
   33e76:	f85d fb04 	ldr.w	pc, [sp], #4

00033e7a <z_impl_zsock_sendto>:
{
   33e7a:	b5f0      	push	{r4, r5, r6, r7, lr}
   33e7c:	b085      	sub	sp, #20
   33e7e:	460d      	mov	r5, r1
	return z_get_fd_obj_and_vtable(sock,
   33e80:	a903      	add	r1, sp, #12
{
   33e82:	4616      	mov	r6, r2
   33e84:	461f      	mov	r7, r3
	return z_get_fd_obj_and_vtable(sock,
   33e86:	f7e4 fd1b 	bl	188c0 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   33e8a:	b160      	cbz	r0, 33ea6 <z_impl_zsock_sendto+0x2c>
   33e8c:	9b03      	ldr	r3, [sp, #12]
   33e8e:	69dc      	ldr	r4, [r3, #28]
   33e90:	b14c      	cbz	r4, 33ea6 <z_impl_zsock_sendto+0x2c>
   33e92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   33e94:	4632      	mov	r2, r6
   33e96:	9301      	str	r3, [sp, #4]
   33e98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   33e9a:	4629      	mov	r1, r5
   33e9c:	9300      	str	r3, [sp, #0]
   33e9e:	463b      	mov	r3, r7
   33ea0:	47a0      	blx	r4
}
   33ea2:	b005      	add	sp, #20
   33ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   33ea6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   33eaa:	e7fa      	b.n	33ea2 <z_impl_zsock_sendto+0x28>

00033eac <zsock_sendmsg_ctx>:
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
   33eac:	0653      	lsls	r3, r2, #25
{
   33eae:	b513      	push	{r0, r1, r4, lr}
	status = net_context_sendmsg(ctx, msg, flags, NULL, timeout, NULL);
   33eb0:	f04f 0300 	mov.w	r3, #0
		timeout = K_NO_WAIT;
   33eb4:	bf4f      	iteee	mi
   33eb6:	2400      	movmi	r4, #0
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
   33eb8:	6d84      	ldrpl	r4, [r0, #88]	; 0x58
   33eba:	f084 0402 	eorpl.w	r4, r4, #2
   33ebe:	f344 0440 	sbfxpl	r4, r4, #1, #1
	status = net_context_sendmsg(ctx, msg, flags, NULL, timeout, NULL);
   33ec2:	e9cd 4300 	strd	r4, r3, [sp]
   33ec6:	f001 fdd9 	bl	35a7c <net_context_sendmsg>
	if (status < 0) {
   33eca:	1e04      	subs	r4, r0, #0
   33ecc:	da05      	bge.n	33eda <zsock_sendmsg_ctx+0x2e>
		errno = -status;
   33ece:	f001 fb00 	bl	354d2 <__errno>
   33ed2:	4264      	negs	r4, r4
   33ed4:	6004      	str	r4, [r0, #0]
		return -1;
   33ed6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   33eda:	4620      	mov	r0, r4
   33edc:	b002      	add	sp, #8
   33ede:	bd10      	pop	{r4, pc}

00033ee0 <sock_sendmsg_vmeth>:
}

static ssize_t sock_sendmsg_vmeth(void *obj, const struct msghdr *msg,
				  int flags)
{
	return zsock_sendmsg_ctx(obj, msg, flags);
   33ee0:	f7ff bfe4 	b.w	33eac <zsock_sendmsg_ctx>

00033ee4 <z_impl_zsock_sendmsg>:
{
   33ee4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   33ee6:	460c      	mov	r4, r1
	return z_get_fd_obj_and_vtable(sock,
   33ee8:	a901      	add	r1, sp, #4
{
   33eea:	4615      	mov	r5, r2
	return z_get_fd_obj_and_vtable(sock,
   33eec:	f7e4 fce8 	bl	188c0 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendmsg, sock, msg, flags);
   33ef0:	b138      	cbz	r0, 33f02 <z_impl_zsock_sendmsg+0x1e>
   33ef2:	9b01      	ldr	r3, [sp, #4]
   33ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   33ef6:	b123      	cbz	r3, 33f02 <z_impl_zsock_sendmsg+0x1e>
   33ef8:	462a      	mov	r2, r5
   33efa:	4621      	mov	r1, r4
   33efc:	4798      	blx	r3
}
   33efe:	b003      	add	sp, #12
   33f00:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(sendmsg, sock, msg, flags);
   33f02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   33f06:	e7fa      	b.n	33efe <z_impl_zsock_sendmsg+0x1a>

00033f08 <sock_recvfrom_vmeth>:

static ssize_t sock_recvfrom_vmeth(void *obj, void *buf, size_t max_len,
				   int flags, struct sockaddr *src_addr,
				   socklen_t *addrlen)
{
	return zsock_recvfrom_ctx(obj, buf, max_len, flags,
   33f08:	f7e5 bbd0 	b.w	196ac <zsock_recvfrom_ctx>

00033f0c <sock_read_vmeth>:
	return zsock_recvfrom_ctx(obj, buffer, count, 0, NULL, 0);
   33f0c:	2300      	movs	r3, #0
{
   33f0e:	b507      	push	{r0, r1, r2, lr}
	return zsock_recvfrom_ctx(obj, buffer, count, 0, NULL, 0);
   33f10:	e9cd 3300 	strd	r3, r3, [sp]
   33f14:	f7e5 fbca 	bl	196ac <zsock_recvfrom_ctx>
}
   33f18:	b003      	add	sp, #12
   33f1a:	f85d fb04 	ldr.w	pc, [sp], #4

00033f1e <z_impl_zsock_recvfrom>:
{
   33f1e:	b5f0      	push	{r4, r5, r6, r7, lr}
   33f20:	b085      	sub	sp, #20
   33f22:	460d      	mov	r5, r1
	return z_get_fd_obj_and_vtable(sock,
   33f24:	a903      	add	r1, sp, #12
{
   33f26:	4616      	mov	r6, r2
   33f28:	461f      	mov	r7, r3
	return z_get_fd_obj_and_vtable(sock,
   33f2a:	f7e4 fcc9 	bl	188c0 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   33f2e:	b160      	cbz	r0, 33f4a <z_impl_zsock_recvfrom+0x2c>
   33f30:	9b03      	ldr	r3, [sp, #12]
   33f32:	6a1c      	ldr	r4, [r3, #32]
   33f34:	b14c      	cbz	r4, 33f4a <z_impl_zsock_recvfrom+0x2c>
   33f36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   33f38:	4632      	mov	r2, r6
   33f3a:	9301      	str	r3, [sp, #4]
   33f3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   33f3e:	4629      	mov	r1, r5
   33f40:	9300      	str	r3, [sp, #0]
   33f42:	463b      	mov	r3, r7
   33f44:	47a0      	blx	r4
}
   33f46:	b005      	add	sp, #20
   33f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   33f4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   33f4e:	e7fa      	b.n	33f46 <z_impl_zsock_recvfrom+0x28>

00033f50 <zsock_setsockopt_ctx>:
	switch (level) {
   33f50:	2906      	cmp	r1, #6
{
   33f52:	b508      	push	{r3, lr}
	switch (level) {
   33f54:	d00c      	beq.n	33f70 <zsock_setsockopt_ctx+0x20>
   33f56:	2929      	cmp	r1, #41	; 0x29
   33f58:	d00c      	beq.n	33f74 <zsock_setsockopt_ctx+0x24>
   33f5a:	2901      	cmp	r1, #1
   33f5c:	d101      	bne.n	33f62 <zsock_setsockopt_ctx+0x12>
		switch (optname) {
   33f5e:	2a02      	cmp	r2, #2
   33f60:	d00a      	beq.n	33f78 <zsock_setsockopt_ctx+0x28>
	errno = ENOPROTOOPT;
   33f62:	f001 fab6 	bl	354d2 <__errno>
   33f66:	236d      	movs	r3, #109	; 0x6d
   33f68:	6003      	str	r3, [r0, #0]
   33f6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   33f6e:	bd08      	pop	{r3, pc}
		switch (optname) {
   33f70:	2a01      	cmp	r2, #1
   33f72:	e7f5      	b.n	33f60 <zsock_setsockopt_ctx+0x10>
		switch (optname) {
   33f74:	2a1a      	cmp	r2, #26
   33f76:	e7f3      	b.n	33f60 <zsock_setsockopt_ctx+0x10>
			return 0;
   33f78:	2000      	movs	r0, #0
   33f7a:	e7f8      	b.n	33f6e <zsock_setsockopt_ctx+0x1e>

00033f7c <sock_setsockopt_vmeth>:
}

static int sock_setsockopt_vmeth(void *obj, int level, int optname,
				 const void *optval, socklen_t optlen)
{
	return zsock_setsockopt_ctx(obj, level, optname, optval, optlen);
   33f7c:	f7ff bfe8 	b.w	33f50 <zsock_setsockopt_ctx>

00033f80 <z_impl_zsock_setsockopt>:
{
   33f80:	b5f0      	push	{r4, r5, r6, r7, lr}
   33f82:	b085      	sub	sp, #20
   33f84:	460d      	mov	r5, r1
	return z_get_fd_obj_and_vtable(sock,
   33f86:	a903      	add	r1, sp, #12
{
   33f88:	4616      	mov	r6, r2
   33f8a:	461f      	mov	r7, r3
	return z_get_fd_obj_and_vtable(sock,
   33f8c:	f7e4 fc98 	bl	188c0 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   33f90:	b150      	cbz	r0, 33fa8 <z_impl_zsock_setsockopt+0x28>
   33f92:	9b03      	ldr	r3, [sp, #12]
   33f94:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   33f96:	b13c      	cbz	r4, 33fa8 <z_impl_zsock_setsockopt+0x28>
   33f98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   33f9a:	4632      	mov	r2, r6
   33f9c:	9300      	str	r3, [sp, #0]
   33f9e:	4629      	mov	r1, r5
   33fa0:	463b      	mov	r3, r7
   33fa2:	47a0      	blx	r4
}
   33fa4:	b005      	add	sp, #20
   33fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   33fa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   33fac:	e7fa      	b.n	33fa4 <z_impl_zsock_setsockopt+0x24>

00033fae <zsock_getsockname_ctx>:
{
   33fae:	4603      	mov	r3, r0
   33fb0:	b513      	push	{r0, r1, r4, lr}
   33fb2:	4614      	mov	r4, r2
	if (IS_ENABLED(CONFIG_NET_IPV4) && ctx->local.family == AF_INET) {
   33fb4:	8b9a      	ldrh	r2, [r3, #28]
{
   33fb6:	4608      	mov	r0, r1
	if (IS_ENABLED(CONFIG_NET_IPV4) && ctx->local.family == AF_INET) {
   33fb8:	2a01      	cmp	r2, #1
   33fba:	d113      	bne.n	33fe4 <zsock_getsockname_ctx+0x36>
		addr4.sin_family = AF_INET;
   33fbc:	f8ad 2000 	strh.w	r2, [sp]
		addr4.sin_port = net_sin_ptr(&ctx->local)->sin_port;
   33fc0:	8bda      	ldrh	r2, [r3, #30]
		memcpy(&addr4.sin_addr, net_sin_ptr(&ctx->local)->sin_addr,
   33fc2:	6a1b      	ldr	r3, [r3, #32]
		addr4.sin_port = net_sin_ptr(&ctx->local)->sin_port;
   33fc4:	f8ad 2002 	strh.w	r2, [sp, #2]
		memcpy(addr, &addr4, MIN(*addrlen, newlen));
   33fc8:	6822      	ldr	r2, [r4, #0]
		memcpy(&addr4.sin_addr, net_sin_ptr(&ctx->local)->sin_addr,
   33fca:	681b      	ldr	r3, [r3, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   33fcc:	2a08      	cmp	r2, #8
   33fce:	bf28      	it	cs
   33fd0:	2208      	movcs	r2, #8
   33fd2:	4669      	mov	r1, sp
   33fd4:	9301      	str	r3, [sp, #4]
   33fd6:	f004 fff4 	bl	38fc2 <memcpy>
		newlen = sizeof(struct sockaddr_in);
   33fda:	2308      	movs	r3, #8
}
   33fdc:	2000      	movs	r0, #0
	*addrlen = newlen;
   33fde:	6023      	str	r3, [r4, #0]
}
   33fe0:	b002      	add	sp, #8
   33fe2:	bd10      	pop	{r4, pc}
	socklen_t newlen = 0;
   33fe4:	2300      	movs	r3, #0
   33fe6:	e7f9      	b.n	33fdc <zsock_getsockname_ctx+0x2e>

00033fe8 <sock_ioctl_vmeth>:
	switch (request) {
   33fe8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
{
   33fec:	b538      	push	{r3, r4, r5, lr}
   33fee:	4604      	mov	r4, r0
   33ff0:	4613      	mov	r3, r2
	switch (request) {
   33ff2:	d04e      	beq.n	34092 <sock_ioctl_vmeth+0xaa>
   33ff4:	d80a      	bhi.n	3400c <sock_ioctl_vmeth+0x24>
   33ff6:	2903      	cmp	r1, #3
   33ff8:	d039      	beq.n	3406e <sock_ioctl_vmeth+0x86>
   33ffa:	2904      	cmp	r1, #4
   33ffc:	d03c      	beq.n	34078 <sock_ioctl_vmeth+0x90>
		errno = EOPNOTSUPP;
   33ffe:	f001 fa68 	bl	354d2 <__errno>
   34002:	235f      	movs	r3, #95	; 0x5f
   34004:	6003      	str	r3, [r0, #0]
		return -1;
   34006:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3400a:	e034      	b.n	34076 <sock_ioctl_vmeth+0x8e>
	switch (request) {
   3400c:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
   34010:	d043      	beq.n	3409a <sock_ioctl_vmeth+0xb2>
   34012:	f5b1 7f83 	cmp.w	r1, #262	; 0x106
   34016:	d05a      	beq.n	340ce <sock_ioctl_vmeth+0xe6>
   34018:	f240 1203 	movw	r2, #259	; 0x103
   3401c:	4291      	cmp	r1, r2
   3401e:	d1ee      	bne.n	33ffe <sock_ioctl_vmeth+0x16>
		return zsock_poll_prepare_ctx(obj, pfd, pev, pev_end);
   34020:	681a      	ldr	r2, [r3, #0]
	if (pfd->events & ZSOCK_POLLIN) {
   34022:	8891      	ldrh	r1, [r2, #4]
   34024:	07c8      	lsls	r0, r1, #31
   34026:	d51a      	bpl.n	3405e <sock_ioctl_vmeth+0x76>
		pev = va_arg(args, struct k_poll_event **);
   34028:	685a      	ldr	r2, [r3, #4]
		if (*pev == pev_end) {
   3402a:	689b      	ldr	r3, [r3, #8]
   3402c:	6810      	ldr	r0, [r2, #0]
   3402e:	4283      	cmp	r3, r0
   34030:	d056      	beq.n	340e0 <sock_ioctl_vmeth+0xf8>
		(*pev)->type = K_POLL_TYPE_FIFO_DATA_AVAILABLE;
   34032:	2504      	movs	r5, #4
		(*pev)->obj = &ctx->recv_q;
   34034:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   34038:	6103      	str	r3, [r0, #16]
		(*pev)->type = K_POLL_TYPE_FIFO_DATA_AVAILABLE;
   3403a:	6813      	ldr	r3, [r2, #0]
   3403c:	7b58      	ldrb	r0, [r3, #13]
   3403e:	f365 0003 	bfi	r0, r5, #0, #4
   34042:	7358      	strb	r0, [r3, #13]
		(*pev)->mode = K_POLL_MODE_NOTIFY_ONLY;
   34044:	6813      	ldr	r3, [r2, #0]
   34046:	7b98      	ldrb	r0, [r3, #14]
   34048:	f36f 0041 	bfc	r0, #1, #1
   3404c:	7398      	strb	r0, [r3, #14]
		(*pev)->state = K_POLL_STATE_NOT_READY;
   3404e:	6813      	ldr	r3, [r2, #0]
   34050:	68d8      	ldr	r0, [r3, #12]
   34052:	f36f 3010 	bfc	r0, #12, #5
   34056:	60d8      	str	r0, [r3, #12]
		(*pev)++;
   34058:	6813      	ldr	r3, [r2, #0]
   3405a:	3314      	adds	r3, #20
   3405c:	6013      	str	r3, [r2, #0]
	if (pfd->events & ZSOCK_POLLOUT) {
   3405e:	0749      	lsls	r1, r1, #29
   34060:	d402      	bmi.n	34068 <sock_ioctl_vmeth+0x80>
	return POINTER_TO_UINT(ctx->socket_data) & mask;
   34062:	6da3      	ldr	r3, [r4, #88]	; 0x58
	if (sock_is_eof(ctx)) {
   34064:	07da      	lsls	r2, r3, #31
   34066:	d505      	bpl.n	34074 <sock_ioctl_vmeth+0x8c>
		return -EALREADY;
   34068:	f06f 0077 	mvn.w	r0, #119	; 0x77
   3406c:	e003      	b.n	34076 <sock_ioctl_vmeth+0x8e>
   3406e:	6d83      	ldr	r3, [r0, #88]	; 0x58
		if (sock_is_nonblock(obj)) {
   34070:	079c      	lsls	r4, r3, #30
   34072:	d432      	bmi.n	340da <sock_ioctl_vmeth+0xf2>
		return 0;
   34074:	2000      	movs	r0, #0
}
   34076:	bd38      	pop	{r3, r4, r5, pc}
		if (flags & O_NONBLOCK) {
   34078:	6810      	ldr	r0, [r2, #0]
   3407a:	6da3      	ldr	r3, [r4, #88]	; 0x58
   3407c:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
   34080:	f023 0302 	bic.w	r3, r3, #2
   34084:	d003      	beq.n	3408e <sock_ioctl_vmeth+0xa6>
	val = (val & ~mask) | flag;
   34086:	f043 0302 	orr.w	r3, r3, #2
	(ctx)->socket_data = UINT_TO_POINTER(val);
   3408a:	65a3      	str	r3, [r4, #88]	; 0x58
   3408c:	e7f2      	b.n	34074 <sock_ioctl_vmeth+0x8c>
   3408e:	65a3      	str	r3, [r4, #88]	; 0x58
   34090:	e7f1      	b.n	34076 <sock_ioctl_vmeth+0x8e>
}
   34092:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return zsock_close_ctx(obj);
   34096:	f7ff be82 	b.w	33d9e <zsock_close_ctx>
		pev = va_arg(args, struct k_poll_event **);
   3409a:	e9d2 2000 	ldrd	r2, r0, [r2]
	if (pfd->events & ZSOCK_POLLOUT) {
   3409e:	8891      	ldrh	r1, [r2, #4]
   340a0:	074b      	lsls	r3, r1, #29
		pfd->revents |= ZSOCK_POLLOUT;
   340a2:	bf42      	ittt	mi
   340a4:	88d3      	ldrhmi	r3, [r2, #6]
   340a6:	f043 0304 	orrmi.w	r3, r3, #4
   340aa:	80d3      	strhmi	r3, [r2, #6]
	if (pfd->events & ZSOCK_POLLIN) {
   340ac:	07cd      	lsls	r5, r1, #31
   340ae:	d5e1      	bpl.n	34074 <sock_ioctl_vmeth+0x8c>
		if ((*pev)->state != K_POLL_STATE_NOT_READY || sock_is_eof(ctx)) {
   340b0:	6803      	ldr	r3, [r0, #0]
   340b2:	68d9      	ldr	r1, [r3, #12]
   340b4:	f411 3ff8 	tst.w	r1, #126976	; 0x1f000
   340b8:	d102      	bne.n	340c0 <sock_ioctl_vmeth+0xd8>
	return POINTER_TO_UINT(ctx->socket_data) & mask;
   340ba:	6da1      	ldr	r1, [r4, #88]	; 0x58
   340bc:	07c9      	lsls	r1, r1, #31
   340be:	d503      	bpl.n	340c8 <sock_ioctl_vmeth+0xe0>
			pfd->revents |= ZSOCK_POLLIN;
   340c0:	88d1      	ldrh	r1, [r2, #6]
   340c2:	f041 0101 	orr.w	r1, r1, #1
   340c6:	80d1      	strh	r1, [r2, #6]
		(*pev)++;
   340c8:	3314      	adds	r3, #20
   340ca:	6003      	str	r3, [r0, #0]
   340cc:	e7d2      	b.n	34074 <sock_ioctl_vmeth+0x8c>
		return zsock_getsockname_ctx(obj, addr, addrlen);
   340ce:	e9d2 1200 	ldrd	r1, r2, [r2]
}
   340d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return zsock_getsockname_ctx(obj, addr, addrlen);
   340d6:	f7ff bf6a 	b.w	33fae <zsock_getsockname_ctx>
		    return O_NONBLOCK;
   340da:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   340de:	e7ca      	b.n	34076 <sock_ioctl_vmeth+0x8e>
			return -ENOMEM;
   340e0:	f06f 000b 	mvn.w	r0, #11
   340e4:	e7c7      	b.n	34076 <sock_ioctl_vmeth+0x8e>

000340e6 <settings_load>:
	return settings_load_subtree(NULL);
   340e6:	2000      	movs	r0, #0
   340e8:	f7e5 bddc 	b.w	19ca4 <settings_load_subtree>

000340ec <settings_name_steq>:
{
   340ec:	b530      	push	{r4, r5, lr}
	if (next) {
   340ee:	b10a      	cbz	r2, 340f4 <settings_name_steq+0x8>
		*next = NULL;
   340f0:	2300      	movs	r3, #0
   340f2:	6013      	str	r3, [r2, #0]
	if ((!name) || (!key)) {
   340f4:	b190      	cbz	r0, 3411c <settings_name_steq+0x30>
   340f6:	b151      	cbz	r1, 3410e <settings_name_steq+0x22>
   340f8:	1e4d      	subs	r5, r1, #1
	while ((*key != '\0') && (*key == *name) &&
   340fa:	f815 4f01 	ldrb.w	r4, [r5, #1]!
   340fe:	4603      	mov	r3, r0
   34100:	f810 1b01 	ldrb.w	r1, [r0], #1
   34104:	b15c      	cbz	r4, 3411e <settings_name_steq+0x32>
   34106:	428c      	cmp	r4, r1
   34108:	d101      	bne.n	3410e <settings_name_steq+0x22>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   3410a:	2c3d      	cmp	r4, #61	; 0x3d
   3410c:	d1f5      	bne.n	340fa <settings_name_steq+0xe>
	return 0;
   3410e:	2000      	movs	r0, #0
   34110:	e004      	b.n	3411c <settings_name_steq+0x30>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   34112:	293d      	cmp	r1, #61	; 0x3d
   34114:	d008      	beq.n	34128 <settings_name_steq+0x3c>
   34116:	fab1 f081 	clz	r0, r1
   3411a:	0940      	lsrs	r0, r0, #5
}
   3411c:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   3411e:	292f      	cmp	r1, #47	; 0x2f
   34120:	d1f7      	bne.n	34112 <settings_name_steq+0x26>
		if (next) {
   34122:	b10a      	cbz	r2, 34128 <settings_name_steq+0x3c>
			*next = name + 1;
   34124:	3301      	adds	r3, #1
   34126:	6013      	str	r3, [r2, #0]
		return 1;
   34128:	2001      	movs	r0, #1
   3412a:	e7f7      	b.n	3411c <settings_name_steq+0x30>

0003412c <settings_backend_init>:
 */

int settings_backend_init(void)
{
	return 0;
}
   3412c:	2000      	movs	r0, #0
   3412e:	4770      	bx	lr

00034130 <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   34130:	2200      	movs	r2, #0
   34132:	f7e5 bf0d 	b.w	19f50 <clock_async_start>

00034136 <wdt_nrf_disable>:
}
   34136:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3413a:	4770      	bx	lr

0003413c <wdt_nrf_feed>:
{
   3413c:	b508      	push	{r3, lr}
	if (channel_id > get_dev_data(dev)->m_allocated_channels) {
   3413e:	68c3      	ldr	r3, [r0, #12]
   34140:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   34144:	428b      	cmp	r3, r1
   34146:	db05      	blt.n	34154 <wdt_nrf_feed+0x18>
	nrfx_wdt_channel_feed(&get_dev_config(dev)->wdt,
   34148:	6840      	ldr	r0, [r0, #4]
   3414a:	b2c9      	uxtb	r1, r1
   3414c:	f7f7 fb10 	bl	2b770 <nrfx_wdt_channel_feed>
	return 0;
   34150:	2000      	movs	r0, #0
}
   34152:	bd08      	pop	{r3, pc}
		return -EINVAL;
   34154:	f06f 0015 	mvn.w	r0, #21
   34158:	e7fb      	b.n	34152 <wdt_nrf_feed+0x16>

0003415a <wdt_nrf_setup>:
		behaviour &= ~NRF_WDT_BEHAVIOUR_RUN_SLEEP;
   3415a:	f011 0f01 	tst.w	r1, #1
{
   3415e:	b538      	push	{r3, r4, r5, lr}
		behaviour &= ~NRF_WDT_BEHAVIOUR_RUN_SLEEP;
   34160:	bf0c      	ite	eq
   34162:	2309      	moveq	r3, #9
   34164:	2308      	movne	r3, #8
	nrf_wdt_behaviour_set(get_dev_config(dev)->wdt.p_reg, behaviour);
   34166:	6844      	ldr	r4, [r0, #4]
	if (options & WDT_OPT_PAUSE_HALTED_BY_DBG) {
   34168:	078a      	lsls	r2, r1, #30
	nrf_wdt_behaviour_set(get_dev_config(dev)->wdt.p_reg, behaviour);
   3416a:	6825      	ldr	r5, [r4, #0]
		behaviour &= ~NRF_WDT_BEHAVIOUR_RUN_HALT;
   3416c:	bf48      	it	mi
   3416e:	f003 0301 	andmi.w	r3, r3, #1
    p_reg->CONFIG = behaviour;
   34172:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
		(uint32_t)(((uint64_t)get_dev_data(dev)->m_timeout * 32768U)
   34176:	68c3      	ldr	r3, [r0, #12]
			   / 1000));
   34178:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		(uint32_t)(((uint64_t)get_dev_data(dev)->m_timeout * 32768U)
   3417c:	6a19      	ldr	r1, [r3, #32]
			   / 1000));
   3417e:	2300      	movs	r3, #0
   34180:	03c8      	lsls	r0, r1, #15
   34182:	0c49      	lsrs	r1, r1, #17
   34184:	f7d9 faf4 	bl	d770 <__aeabi_uldivmod>
    p_reg->CRV = reload_value;
   34188:	f8c5 0504 	str.w	r0, [r5, #1284]	; 0x504
	nrfx_wdt_enable(&get_dev_config(dev)->wdt);
   3418c:	4620      	mov	r0, r4
   3418e:	f7f7 fa71 	bl	2b674 <nrfx_wdt_enable>
}
   34192:	2000      	movs	r0, #0
   34194:	bd38      	pop	{r3, r4, r5, pc}

00034196 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   34196:	4770      	bx	lr

00034198 <sys_clock_disable>:
   34198:	4770      	bx	lr

0003419a <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
   3419a:	428b      	cmp	r3, r1
{
   3419c:	b538      	push	{r3, r4, r5, lr}
   3419e:	4615      	mov	r5, r2
   341a0:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   341a2:	d805      	bhi.n	341b0 <_copy+0x16>
   341a4:	461a      	mov	r2, r3
   341a6:	4629      	mov	r1, r5
   341a8:	f004 ff0b 	bl	38fc2 <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   341ac:	4620      	mov	r0, r4
   341ae:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   341b0:	2400      	movs	r4, #0
   341b2:	e7fb      	b.n	341ac <_copy+0x12>

000341b4 <_set>:
__ssp_bos_icheck3(memset, void *, int)
   341b4:	f004 bf3f 	b.w	39036 <memset>

000341b8 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   341b8:	09c3      	lsrs	r3, r0, #7
   341ba:	005a      	lsls	r2, r3, #1
   341bc:	4413      	add	r3, r2
   341be:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   341c2:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   341c6:	b2c0      	uxtb	r0, r0
   341c8:	4770      	bx	lr

000341ca <bits2int>:
static uECC_RNG_Function g_rng_function = 0;
#endif

static void bits2int(uECC_word_t *native, const uint8_t *bits,
		     unsigned bits_size, uECC_Curve curve)
{
   341ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   341ce:	461f      	mov	r7, r3
	unsigned num_n_bytes = BITS_TO_BYTES(curve->num_n_bits);
   341d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   341d4:	4689      	mov	r9, r1
	unsigned num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   341d6:	f113 011f 	adds.w	r1, r3, #31
   341da:	bf48      	it	mi
   341dc:	f103 013e 	addmi.w	r1, r3, #62	; 0x3e
   341e0:	114d      	asrs	r5, r1, #5
	unsigned num_n_bytes = BITS_TO_BYTES(curve->num_n_bits);
   341e2:	1dd9      	adds	r1, r3, #7
   341e4:	bf48      	it	mi
   341e6:	f103 010e 	addmi.w	r1, r3, #14
   341ea:	10cc      	asrs	r4, r1, #3
   341ec:	4294      	cmp	r4, r2
   341ee:	bf28      	it	cs
   341f0:	4614      	movcs	r4, r2
{
   341f2:	4606      	mov	r6, r0

	if (bits_size > num_n_bytes) {
		bits_size = num_n_bytes;
	}

	uECC_vli_clear(native, num_n_words);
   341f4:	fa4f f885 	sxtb.w	r8, r5
   341f8:	4641      	mov	r1, r8
   341fa:	f000 f9c2 	bl	34582 <uECC_vli_clear>
	uECC_vli_bytesToNative(native, bits, bits_size);
   341fe:	4622      	mov	r2, r4
   34200:	4649      	mov	r1, r9
   34202:	4630      	mov	r0, r6
   34204:	f000 febd 	bl	34f82 <uECC_vli_bytesToNative>
	if (bits_size * 8 <= (unsigned)curve->num_n_bits) {
   34208:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
   3420c:	00e4      	lsls	r4, r4, #3
   3420e:	4294      	cmp	r4, r2
   34210:	d920      	bls.n	34254 <bits2int+0x8a>
		return;
	}
	shift = bits_size * 8 - curve->num_n_bits;
   34212:	1aa4      	subs	r4, r4, r2
	carry = 0;
   34214:	2200      	movs	r2, #0
	ptr = native + num_n_words;
   34216:	eb06 0185 	add.w	r1, r6, r5, lsl #2
	while (ptr-- > native) {
		uECC_word_t temp = *ptr;
		*ptr = (temp >> shift) | carry;
		carry = temp << (uECC_WORD_BITS - shift);
   3421a:	f1c4 0520 	rsb	r5, r4, #32
	while (ptr-- > native) {
   3421e:	428e      	cmp	r6, r1
   34220:	d30f      	bcc.n	34242 <bits2int+0x78>
	}

	/* Reduce mod curve_n */
	if (uECC_vli_cmp_unsafe(curve->n, native, num_n_words) != 1) {
   34222:	3724      	adds	r7, #36	; 0x24
   34224:	4642      	mov	r2, r8
   34226:	4631      	mov	r1, r6
   34228:	4638      	mov	r0, r7
   3422a:	f000 f9fb 	bl	34624 <uECC_vli_cmp_unsafe>
   3422e:	2801      	cmp	r0, #1
   34230:	d010      	beq.n	34254 <bits2int+0x8a>
		uECC_vli_sub(native, native, curve->n, num_n_words);
   34232:	4643      	mov	r3, r8
   34234:	463a      	mov	r2, r7
   34236:	4631      	mov	r1, r6
   34238:	4630      	mov	r0, r6
	}
}
   3423a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		uECC_vli_sub(native, native, curve->n, num_n_words);
   3423e:	f000 ba08 	b.w	34652 <uECC_vli_sub>
		uECC_word_t temp = *ptr;
   34242:	f851 0d04 	ldr.w	r0, [r1, #-4]!
		*ptr = (temp >> shift) | carry;
   34246:	fa20 f304 	lsr.w	r3, r0, r4
   3424a:	4313      	orrs	r3, r2
   3424c:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - shift);
   3424e:	fa00 f205 	lsl.w	r2, r0, r5
   34252:	e7e4      	b.n	3421e <bits2int+0x54>
}
   34254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00034258 <uECC_sign_with_k>:

int uECC_sign_with_k(const uint8_t *private_key, const uint8_t *message_hash,
		     unsigned hash_size, uECC_word_t *k, uint8_t *signature,
		     uECC_Curve curve)
{
   34258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3425c:	461e      	mov	r6, r3
   3425e:	b0a9      	sub	sp, #164	; 0xa4
   34260:	9d33      	ldr	r5, [sp, #204]	; 0xcc
   34262:	e9cd 0103 	strd	r0, r1, [sp, #12]
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t s[NUM_ECC_WORDS];
	uECC_word_t *k2[2] = {tmp, s};
	uECC_word_t p[NUM_ECC_WORDS * 2];
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
   34266:	f995 a000 	ldrsb.w	sl, [r5]
	uECC_word_t *k2[2] = {tmp, s};
   3426a:	f10d 0920 	add.w	r9, sp, #32
   3426e:	ab10      	add	r3, sp, #64	; 0x40
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
	bitcount_t num_n_bits = curve->num_n_bits;

	/* Make sure 0 < k < curve_n */
  	if (uECC_vli_isZero(k, num_words) ||
   34270:	4651      	mov	r1, sl
   34272:	4630      	mov	r0, r6
{
   34274:	9205      	str	r2, [sp, #20]
	uECC_word_t *k2[2] = {tmp, s};
   34276:	f8cd 9018 	str.w	r9, [sp, #24]
   3427a:	9307      	str	r3, [sp, #28]
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   3427c:	f9b5 7002 	ldrsh.w	r7, [r5, #2]
  	if (uECC_vli_isZero(k, num_words) ||
   34280:	f000 f98a 	bl	34598 <uECC_vli_isZero>
   34284:	b118      	cbz	r0, 3428e <uECC_sign_with_k+0x36>
	    uECC_vli_cmp(curve->n, k, num_n_words) != 1) {
		return 0;
   34286:	2000      	movs	r0, #0
		return 0;
	}

	uECC_vli_nativeToBytes(signature + curve->num_bytes, curve->num_bytes, s);
	return 1;
}
   34288:	b029      	add	sp, #164	; 0xa4
   3428a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   3428e:	f117 041f 	adds.w	r4, r7, #31
   34292:	bf48      	it	mi
   34294:	f107 043e 	addmi.w	r4, r7, #62	; 0x3e
   34298:	f344 1447 	sbfx	r4, r4, #5, #8
	    uECC_vli_cmp(curve->n, k, num_n_words) != 1) {
   3429c:	f105 0824 	add.w	r8, r5, #36	; 0x24
   342a0:	4622      	mov	r2, r4
   342a2:	4631      	mov	r1, r6
   342a4:	4640      	mov	r0, r8
   342a6:	f000 f9ed 	bl	34684 <uECC_vli_cmp>
  	if (uECC_vli_isZero(k, num_words) ||
   342aa:	2801      	cmp	r0, #1
	    uECC_vli_cmp(curve->n, k, num_n_words) != 1) {
   342ac:	4683      	mov	fp, r0
  	if (uECC_vli_isZero(k, num_words) ||
   342ae:	d1ea      	bne.n	34286 <uECC_sign_with_k+0x2e>
	carry = regularize_k(k, tmp, s, curve);
   342b0:	462b      	mov	r3, r5
   342b2:	aa10      	add	r2, sp, #64	; 0x40
   342b4:	4649      	mov	r1, r9
   342b6:	4630      	mov	r0, r6
   342b8:	f000 fe22 	bl	34f00 <regularize_k>
	EccPoint_mult(p, curve->G, k2[!carry], 0, num_n_bits + 1, curve);
   342bc:	fab0 f080 	clz	r0, r0
   342c0:	3701      	adds	r7, #1
   342c2:	ab28      	add	r3, sp, #160	; 0xa0
   342c4:	0940      	lsrs	r0, r0, #5
   342c6:	b23f      	sxth	r7, r7
   342c8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   342cc:	9501      	str	r5, [sp, #4]
   342ce:	9700      	str	r7, [sp, #0]
   342d0:	f850 2c88 	ldr.w	r2, [r0, #-136]
   342d4:	f105 0144 	add.w	r1, r5, #68	; 0x44
   342d8:	a818      	add	r0, sp, #96	; 0x60
   342da:	2300      	movs	r3, #0
   342dc:	f000 fd41 	bl	34d62 <EccPoint_mult>
	if (uECC_vli_isZero(p, num_words)) {
   342e0:	4651      	mov	r1, sl
   342e2:	a818      	add	r0, sp, #96	; 0x60
   342e4:	f000 f958 	bl	34598 <uECC_vli_isZero>
   342e8:	2800      	cmp	r0, #0
   342ea:	d1cc      	bne.n	34286 <uECC_sign_with_k+0x2e>
		uECC_vli_clear(tmp, num_n_words);
   342ec:	4621      	mov	r1, r4
   342ee:	4648      	mov	r0, r9
   342f0:	f000 f947 	bl	34582 <uECC_vli_clear>
	uECC_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k' = rand * k */
   342f4:	4643      	mov	r3, r8
   342f6:	464a      	mov	r2, r9
   342f8:	4631      	mov	r1, r6
   342fa:	4630      	mov	r0, r6
   342fc:	9400      	str	r4, [sp, #0]
		tmp[0] = 1;
   342fe:	f8cd b020 	str.w	fp, [sp, #32]
	uECC_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k' = rand * k */
   34302:	f000 faa0 	bl	34846 <uECC_vli_modMult>
	uECC_vli_modInv(k, k, curve->n, num_n_words);       /* k = 1 / k' */
   34306:	4623      	mov	r3, r4
   34308:	4642      	mov	r2, r8
   3430a:	4631      	mov	r1, r6
   3430c:	4630      	mov	r0, r6
   3430e:	f000 fc21 	bl	34b54 <uECC_vli_modInv>
	uECC_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k = 1 / k */
   34312:	4643      	mov	r3, r8
   34314:	464a      	mov	r2, r9
   34316:	4631      	mov	r1, r6
   34318:	4630      	mov	r0, r6
   3431a:	9400      	str	r4, [sp, #0]
   3431c:	f000 fa93 	bl	34846 <uECC_vli_modMult>
	uECC_vli_nativeToBytes(signature, curve->num_bytes, p); /* store r */
   34320:	aa18      	add	r2, sp, #96	; 0x60
   34322:	f995 1001 	ldrsb.w	r1, [r5, #1]
   34326:	9832      	ldr	r0, [sp, #200]	; 0xc8
   34328:	f000 fe17 	bl	34f5a <uECC_vli_nativeToBytes>
	uECC_vli_bytesToNative(tmp, private_key, BITS_TO_BYTES(curve->num_n_bits));
   3432c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
   34330:	9903      	ldr	r1, [sp, #12]
   34332:	1dda      	adds	r2, r3, #7
   34334:	bf48      	it	mi
   34336:	f103 020e 	addmi.w	r2, r3, #14
   3433a:	10d2      	asrs	r2, r2, #3
   3433c:	a808      	add	r0, sp, #32
   3433e:	f000 fe20 	bl	34f82 <uECC_vli_bytesToNative>
	s[num_n_words - 1] = 0;
   34342:	aa28      	add	r2, sp, #160	; 0xa0
   34344:	1e63      	subs	r3, r4, #1
   34346:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   3434a:	2200      	movs	r2, #0
	uECC_vli_set(s, p, num_words);
   3434c:	a918      	add	r1, sp, #96	; 0x60
	s[num_n_words - 1] = 0;
   3434e:	f843 2c60 	str.w	r2, [r3, #-96]
	uECC_vli_set(s, p, num_words);
   34352:	a810      	add	r0, sp, #64	; 0x40
   34354:	4652      	mov	r2, sl
   34356:	f000 f959 	bl	3460c <uECC_vli_set>
	uECC_vli_modMult(s, tmp, s, curve->n, num_n_words); /* s = r*d */
   3435a:	aa10      	add	r2, sp, #64	; 0x40
   3435c:	4610      	mov	r0, r2
   3435e:	4643      	mov	r3, r8
   34360:	a908      	add	r1, sp, #32
   34362:	9400      	str	r4, [sp, #0]
   34364:	f000 fa6f 	bl	34846 <uECC_vli_modMult>
	bits2int(tmp, message_hash, hash_size, curve);
   34368:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   3436c:	462b      	mov	r3, r5
   3436e:	a808      	add	r0, sp, #32
   34370:	f7ff ff2b 	bl	341ca <bits2int>
	uECC_vli_modAdd(s, tmp, s, curve->n, num_n_words); /* s = e + r*d */
   34374:	aa10      	add	r2, sp, #64	; 0x40
   34376:	4610      	mov	r0, r2
   34378:	4643      	mov	r3, r8
   3437a:	a908      	add	r1, sp, #32
   3437c:	9400      	str	r4, [sp, #0]
   3437e:	f000 f99a 	bl	346b6 <uECC_vli_modAdd>
	uECC_vli_modMult(s, s, k, curve->n, num_n_words);  /* s = (e + r*d) / k */
   34382:	a910      	add	r1, sp, #64	; 0x40
   34384:	4608      	mov	r0, r1
   34386:	4643      	mov	r3, r8
   34388:	4632      	mov	r2, r6
   3438a:	9400      	str	r4, [sp, #0]
   3438c:	f000 fa5b 	bl	34846 <uECC_vli_modMult>
	if (uECC_vli_numBits(s, num_n_words) > (bitcount_t)curve->num_bytes * 8) {
   34390:	4621      	mov	r1, r4
   34392:	a810      	add	r0, sp, #64	; 0x40
   34394:	f000 f919 	bl	345ca <uECC_vli_numBits>
   34398:	f995 1001 	ldrsb.w	r1, [r5, #1]
   3439c:	ebb0 0fc1 	cmp.w	r0, r1, lsl #3
   343a0:	f73f af71 	bgt.w	34286 <uECC_sign_with_k+0x2e>
	uECC_vli_nativeToBytes(signature + curve->num_bytes, curve->num_bytes, s);
   343a4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
   343a6:	aa10      	add	r2, sp, #64	; 0x40
   343a8:	1858      	adds	r0, r3, r1
   343aa:	f000 fdd6 	bl	34f5a <uECC_vli_nativeToBytes>
	return 1;
   343ae:	2001      	movs	r0, #1
   343b0:	e76a      	b.n	34288 <uECC_sign_with_k+0x30>

000343b2 <uECC_sign>:

int uECC_sign(const uint8_t *private_key, const uint8_t *message_hash,
	      unsigned hash_size, uint8_t *signature, uECC_Curve curve)
{
   343b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   343b6:	4606      	mov	r6, r0
   343b8:	460f      	mov	r7, r1
   343ba:	4690      	mov	r8, r2
   343bc:	4699      	mov	r9, r3
   343be:	2440      	movs	r4, #64	; 0x40
   343c0:	b09a      	sub	sp, #104	; 0x68
   343c2:	9d22      	ldr	r5, [sp, #136]	; 0x88
		    !rng_function((uint8_t *)_random, 2*NUM_ECC_WORDS*uECC_WORD_SIZE)) {
			return 0;
		}

		// computing k as modular reduction of _random (see FIPS 186.4 B.5.1):
		uECC_vli_mmod(k, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   343c4:	f105 0a24 	add.w	sl, r5, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   343c8:	f7e6 f8e8 	bl	1a59c <uECC_get_rng>
		if (!rng_function ||
   343cc:	4603      	mov	r3, r0
   343ce:	b1e0      	cbz	r0, 3440a <uECC_sign+0x58>
		    !rng_function((uint8_t *)_random, 2*NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   343d0:	2140      	movs	r1, #64	; 0x40
   343d2:	a80a      	add	r0, sp, #40	; 0x28
   343d4:	4798      	blx	r3
		if (!rng_function ||
   343d6:	b1c0      	cbz	r0, 3440a <uECC_sign+0x58>
		uECC_vli_mmod(k, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   343d8:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
   343dc:	a90a      	add	r1, sp, #40	; 0x28
   343de:	f112 031f 	adds.w	r3, r2, #31
   343e2:	bf48      	it	mi
   343e4:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   343e8:	f343 1347 	sbfx	r3, r3, #5, #8
   343ec:	4652      	mov	r2, sl
   343ee:	a802      	add	r0, sp, #8
   343f0:	f000 f98c 	bl	3470c <uECC_vli_mmod>

		if (uECC_sign_with_k(private_key, message_hash, hash_size, k, signature, 
   343f4:	e9cd 9500 	strd	r9, r5, [sp]
   343f8:	ab02      	add	r3, sp, #8
   343fa:	4642      	mov	r2, r8
   343fc:	4639      	mov	r1, r7
   343fe:	4630      	mov	r0, r6
   34400:	f7ff ff2a 	bl	34258 <uECC_sign_with_k>
   34404:	b928      	cbnz	r0, 34412 <uECC_sign+0x60>
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   34406:	3c01      	subs	r4, #1
   34408:	d1de      	bne.n	343c8 <uECC_sign+0x16>
			return 0;
   3440a:	2000      	movs	r0, #0
		    curve)) {
			return 1;
		}
	}
	return 0;
}
   3440c:	b01a      	add	sp, #104	; 0x68
   3440e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return 1;
   34412:	2001      	movs	r0, #1
   34414:	e7fa      	b.n	3440c <uECC_sign+0x5a>

00034416 <uECC_vli_add>:
{
   34416:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   34418:	2400      	movs	r4, #0
{
   3441a:	4607      	mov	r7, r0
	uECC_word_t carry = 0;
   3441c:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   3441e:	b265      	sxtb	r5, r4
   34420:	42ab      	cmp	r3, r5
   34422:	dc00      	bgt.n	34426 <uECC_vli_add+0x10>
}
   34424:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   34426:	f851 6024 	ldr.w	r6, [r1, r4, lsl #2]
   3442a:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   3442e:	4435      	add	r5, r6
   34430:	4405      	add	r5, r0
		carry = cond_set(val, carry, (sum != left[i]));
   34432:	42ae      	cmp	r6, r5
		uECC_word_t val = (sum < left[i]);
   34434:	bf8c      	ite	hi
   34436:	2601      	movhi	r6, #1
   34438:	2600      	movls	r6, #0
		result[i] = sum;
   3443a:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   3443e:	bf18      	it	ne
   34440:	4630      	movne	r0, r6
		result[i] = sum;
   34442:	3401      	adds	r4, #1
   34444:	e7eb      	b.n	3441e <uECC_vli_add+0x8>

00034446 <uECC_vli_rshift1>:
	uECC_word_t carry = 0;
   34446:	2300      	movs	r3, #0
	vli += num_words;
   34448:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	while (vli-- > end) {
   3444c:	4288      	cmp	r0, r1
   3444e:	d300      	bcc.n	34452 <uECC_vli_rshift1+0xc>
}
   34450:	4770      	bx	lr
		uECC_word_t temp = *vli;
   34452:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   34456:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   3445a:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   3445c:	07d3      	lsls	r3, r2, #31
   3445e:	e7f5      	b.n	3444c <uECC_vli_rshift1+0x6>

00034460 <vli_modInv_update>:
	if (!EVEN(uv)) {
   34460:	6803      	ldr	r3, [r0, #0]
{
   34462:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   34464:	f013 0601 	ands.w	r6, r3, #1
{
   34468:	4605      	mov	r5, r0
   3446a:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   3446c:	d005      	beq.n	3447a <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   3446e:	4613      	mov	r3, r2
   34470:	460a      	mov	r2, r1
   34472:	4601      	mov	r1, r0
   34474:	f7ff ffcf 	bl	34416 <uECC_vli_add>
   34478:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   3447a:	4621      	mov	r1, r4
   3447c:	4628      	mov	r0, r5
   3447e:	f7ff ffe2 	bl	34446 <uECC_vli_rshift1>
	if (carry) {
   34482:	b146      	cbz	r6, 34496 <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   34484:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   34488:	3a01      	subs	r2, #1
   3448a:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   3448e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   34492:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   34496:	bd70      	pop	{r4, r5, r6, pc}

00034498 <uECC_vli_mult>:
{
   34498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (k = 0; k < num_words; ++k) {
   3449c:	2500      	movs	r5, #0
{
   3449e:	b087      	sub	sp, #28
   344a0:	e9cd 1200 	strd	r1, r2, [sp]
	uECC_word_t r1 = 0;
   344a4:	462c      	mov	r4, r5
	uECC_word_t r0 = 0;
   344a6:	462a      	mov	r2, r5
   344a8:	fa4f f885 	sxtb.w	r8, r5
	for (k = 0; k < num_words; ++k) {
   344ac:	4543      	cmp	r3, r8
   344ae:	dc16      	bgt.n	344de <uECC_vli_mult+0x46>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   344b0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   344b4:	f04f 0a00 	mov.w	sl, #0
   344b8:	eb05 0543 	add.w	r5, r5, r3, lsl #1
   344bc:	9502      	str	r5, [sp, #8]
   344be:	fa5f f58a 	uxtb.w	r5, sl
   344c2:	eb05 0c03 	add.w	ip, r5, r3
   344c6:	9e02      	ldr	r6, [sp, #8]
   344c8:	fa4f fc8c 	sxtb.w	ip, ip
   344cc:	45b4      	cmp	ip, r6
   344ce:	db2d      	blt.n	3452c <uECC_vli_mult+0x94>
	result[num_words * 2 - 1] = r0;
   344d0:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   344d4:	f840 2c04 	str.w	r2, [r0, #-4]
}
   344d8:	b007      	add	sp, #28
   344da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (k = 0; k < num_words; ++k) {
   344de:	f04f 0c00 	mov.w	ip, #0
   344e2:	46e6      	mov	lr, ip
   344e4:	9e01      	ldr	r6, [sp, #4]
   344e6:	eb06 0985 	add.w	r9, r6, r5, lsl #2
	uECC_dword_t p = (uECC_dword_t)a * b;
   344ea:	9900      	ldr	r1, [sp, #0]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   344ec:	f859 7904 	ldr.w	r7, [r9], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   344f0:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   344f4:	e9cd 2402 	strd	r2, r4, [sp, #8]
	uECC_dword_t p = (uECC_dword_t)a * b;
   344f8:	fba7 ab06 	umull	sl, fp, r7, r6
   344fc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   34500:	eb1a 0601 	adds.w	r6, sl, r1
   34504:	eb5b 0702 	adcs.w	r7, fp, r2
   34508:	bf2c      	ite	cs
   3450a:	2201      	movcs	r2, #1
   3450c:	2200      	movcc	r2, #0
	*r2 += (r01 < p);
   3450e:	f10c 0c01 	add.w	ip, ip, #1
		for (i = 0; i <= k; ++i) {
   34512:	fa4f fa8c 	sxtb.w	sl, ip
   34516:	45c2      	cmp	sl, r8
	*r2 += (r01 < p);
   34518:	4496      	add	lr, r2
	*r1 = r01 >> uECC_WORD_BITS;
   3451a:	463c      	mov	r4, r7
	*r0 = (uECC_word_t)r01;
   3451c:	4632      	mov	r2, r6
		for (i = 0; i <= k; ++i) {
   3451e:	dde4      	ble.n	344ea <uECC_vli_mult+0x52>
		result[k] = r0;
   34520:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   34524:	463a      	mov	r2, r7
   34526:	3501      	adds	r5, #1
	*r2 += (r01 < p);
   34528:	4674      	mov	r4, lr
   3452a:	e7bd      	b.n	344a8 <uECC_vli_mult+0x10>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   3452c:	3501      	adds	r5, #1
   3452e:	b26d      	sxtb	r5, r5
   34530:	9e01      	ldr	r6, [sp, #4]
   34532:	ebac 0e05 	sub.w	lr, ip, r5
   34536:	eb06 0e8e 	add.w	lr, r6, lr, lsl #2
   3453a:	4626      	mov	r6, r4
   3453c:	2400      	movs	r4, #0
   3453e:	9900      	ldr	r1, [sp, #0]
   34540:	eb01 0b85 	add.w	fp, r1, r5, lsl #2
   34544:	429d      	cmp	r5, r3
   34546:	db05      	blt.n	34554 <uECC_vli_mult+0xbc>
		result[k] = r0;
   34548:	f840 202c 	str.w	r2, [r0, ip, lsl #2]
		r2 = 0;
   3454c:	f10a 0a01 	add.w	sl, sl, #1
		result[k] = r0;
   34550:	4632      	mov	r2, r6
   34552:	e7b4      	b.n	344be <uECC_vli_mult+0x26>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   34554:	f85e 7904 	ldr.w	r7, [lr], #-4
   34558:	f85b 8b04 	ldr.w	r8, [fp], #4
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   3455c:	e9cd 2604 	strd	r2, r6, [sp, #16]
	uECC_dword_t p = (uECC_dword_t)a * b;
   34560:	fba8 8907 	umull	r8, r9, r8, r7
   34564:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   34568:	eb18 0601 	adds.w	r6, r8, r1
   3456c:	eb59 0702 	adcs.w	r7, r9, r2
   34570:	bf2c      	ite	cs
   34572:	2201      	movcs	r2, #1
   34574:	2200      	movcc	r2, #0
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   34576:	3501      	adds	r5, #1
	*r2 += (r01 < p);
   34578:	4414      	add	r4, r2
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   3457a:	b26d      	sxtb	r5, r5
	*r0 = (uECC_word_t)r01;
   3457c:	4632      	mov	r2, r6
	*r1 = r01 >> uECC_WORD_BITS;
   3457e:	463e      	mov	r6, r7
   34580:	e7e0      	b.n	34544 <uECC_vli_mult+0xac>

00034582 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   34582:	2300      	movs	r3, #0
{
   34584:	b510      	push	{r4, lr}
		 vli[i] = 0;
   34586:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   34588:	b25a      	sxtb	r2, r3
   3458a:	4291      	cmp	r1, r2
   3458c:	dc00      	bgt.n	34590 <uECC_vli_clear+0xe>
}
   3458e:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   34590:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
   34594:	3301      	adds	r3, #1
   34596:	e7f7      	b.n	34588 <uECC_vli_clear+0x6>

00034598 <uECC_vli_isZero>:
	for (i = 0; i < num_words; ++i) {
   34598:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   3459a:	461a      	mov	r2, r3
{
   3459c:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   3459e:	b25c      	sxtb	r4, r3
   345a0:	42a1      	cmp	r1, r4
   345a2:	dc03      	bgt.n	345ac <uECC_vli_isZero+0x14>
}
   345a4:	fab2 f082 	clz	r0, r2
   345a8:	0940      	lsrs	r0, r0, #5
   345aa:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   345ac:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   345b0:	3301      	adds	r3, #1
   345b2:	4322      	orrs	r2, r4
   345b4:	e7f3      	b.n	3459e <uECC_vli_isZero+0x6>

000345b6 <uECC_vli_testBit>:
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   345b6:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   345b8:	114a      	asrs	r2, r1, #5
   345ba:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   345be:	f001 011f 	and.w	r1, r1, #31
   345c2:	fa03 f101 	lsl.w	r1, r3, r1
}
   345c6:	4008      	ands	r0, r1
   345c8:	4770      	bx	lr

000345ca <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   345ca:	3901      	subs	r1, #1
   345cc:	b249      	sxtb	r1, r1
   345ce:	eb00 0381 	add.w	r3, r0, r1, lsl #2
   345d2:	2900      	cmp	r1, #0
   345d4:	da04      	bge.n	345e0 <uECC_vli_numBits+0x16>
	return (i + 1);
   345d6:	3101      	adds	r1, #1
   345d8:	b249      	sxtb	r1, r1
	if (num_digits == 0) {
   345da:	b941      	cbnz	r1, 345ee <uECC_vli_numBits+0x24>
		return 0;
   345dc:	4608      	mov	r0, r1
}
   345de:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   345e0:	f853 2904 	ldr.w	r2, [r3], #-4
   345e4:	2a00      	cmp	r2, #0
   345e6:	d1f6      	bne.n	345d6 <uECC_vli_numBits+0xc>
   345e8:	3901      	subs	r1, #1
   345ea:	b249      	sxtb	r1, r1
   345ec:	e7f1      	b.n	345d2 <uECC_vli_numBits+0x8>
	digit = vli[num_digits - 1];
   345ee:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
   345f2:	3b01      	subs	r3, #1
   345f4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	for (i = 0; digit; ++i) {
   345f8:	2000      	movs	r0, #0
   345fa:	b923      	cbnz	r3, 34606 <uECC_vli_numBits+0x3c>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   345fc:	3901      	subs	r1, #1
   345fe:	eb00 1141 	add.w	r1, r0, r1, lsl #5
   34602:	b208      	sxth	r0, r1
   34604:	4770      	bx	lr
		digit >>= 1;
   34606:	085b      	lsrs	r3, r3, #1
	for (i = 0; digit; ++i) {
   34608:	3001      	adds	r0, #1
   3460a:	e7f6      	b.n	345fa <uECC_vli_numBits+0x30>

0003460c <uECC_vli_set>:
	for (i = 0; i < num_words; ++i) {
   3460c:	2300      	movs	r3, #0
{
   3460e:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   34610:	b25c      	sxtb	r4, r3
   34612:	42a2      	cmp	r2, r4
   34614:	dc00      	bgt.n	34618 <uECC_vli_set+0xc>
}
   34616:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   34618:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   3461c:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
   34620:	3301      	adds	r3, #1
   34622:	e7f5      	b.n	34610 <uECC_vli_set+0x4>

00034624 <uECC_vli_cmp_unsafe>:
{
   34624:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   34626:	3a01      	subs	r2, #1
   34628:	b252      	sxtb	r2, r2
   3462a:	0093      	lsls	r3, r2, #2
   3462c:	2a00      	cmp	r2, #0
   3462e:	da01      	bge.n	34634 <uECC_vli_cmp_unsafe+0x10>
	return 0;
   34630:	2000      	movs	r0, #0
}
   34632:	bd30      	pop	{r4, r5, pc}
		if (left[i] > right[i]) {
   34634:	58c5      	ldr	r5, [r0, r3]
   34636:	58cc      	ldr	r4, [r1, r3]
   34638:	42a5      	cmp	r5, r4
   3463a:	d805      	bhi.n	34648 <uECC_vli_cmp_unsafe+0x24>
		} else if (left[i] < right[i]) {
   3463c:	f1a3 0304 	sub.w	r3, r3, #4
   34640:	d304      	bcc.n	3464c <uECC_vli_cmp_unsafe+0x28>
	for (i = num_words - 1; i >= 0; --i) {
   34642:	3a01      	subs	r2, #1
   34644:	b252      	sxtb	r2, r2
   34646:	e7f1      	b.n	3462c <uECC_vli_cmp_unsafe+0x8>
			return 1;
   34648:	2001      	movs	r0, #1
   3464a:	e7f2      	b.n	34632 <uECC_vli_cmp_unsafe+0xe>
			return -1;
   3464c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   34650:	e7ef      	b.n	34632 <uECC_vli_cmp_unsafe+0xe>

00034652 <uECC_vli_sub>:
{
   34652:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   34654:	2400      	movs	r4, #0
{
   34656:	4607      	mov	r7, r0
   34658:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   3465a:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   3465c:	b265      	sxtb	r5, r4
   3465e:	45ac      	cmp	ip, r5
   34660:	dc00      	bgt.n	34664 <uECC_vli_sub+0x12>
}
   34662:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   34664:	f851 6024 	ldr.w	r6, [r1, r4, lsl #2]
   34668:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   3466c:	1a35      	subs	r5, r6, r0
   3466e:	1aed      	subs	r5, r5, r3
		borrow = cond_set(val, borrow, (diff != left[i]));
   34670:	42ae      	cmp	r6, r5
		uECC_word_t val = (diff > left[i]);
   34672:	bf34      	ite	cc
   34674:	2601      	movcc	r6, #1
   34676:	2600      	movcs	r6, #0
		result[i] = diff;
   34678:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   3467c:	bf18      	it	ne
   3467e:	4630      	movne	r0, r6
		result[i] = diff;
   34680:	3401      	adds	r4, #1
   34682:	e7eb      	b.n	3465c <uECC_vli_sub+0xa>

00034684 <uECC_vli_cmp>:
{
   34684:	b530      	push	{r4, r5, lr}
   34686:	b089      	sub	sp, #36	; 0x24
	uECC_word_t neg = !!uECC_vli_sub(tmp, left, right, num_words);
   34688:	4613      	mov	r3, r2
{
   3468a:	4615      	mov	r5, r2
	uECC_word_t neg = !!uECC_vli_sub(tmp, left, right, num_words);
   3468c:	460a      	mov	r2, r1
   3468e:	4601      	mov	r1, r0
   34690:	4668      	mov	r0, sp
   34692:	f7ff ffde 	bl	34652 <uECC_vli_sub>
   34696:	4604      	mov	r4, r0
	uECC_word_t equal = uECC_vli_isZero(tmp, num_words);
   34698:	4629      	mov	r1, r5
   3469a:	4668      	mov	r0, sp
   3469c:	f7ff ff7c 	bl	34598 <uECC_vli_isZero>
	uECC_word_t neg = !!uECC_vli_sub(tmp, left, right, num_words);
   346a0:	3400      	adds	r4, #0
   346a2:	bf18      	it	ne
   346a4:	2401      	movne	r4, #1
	return (!equal - 2 * neg);
   346a6:	0064      	lsls	r4, r4, #1
}
   346a8:	2800      	cmp	r0, #0
   346aa:	bf14      	ite	ne
   346ac:	4260      	negne	r0, r4
   346ae:	f1c4 0001 	rsbeq	r0, r4, #1
   346b2:	b009      	add	sp, #36	; 0x24
   346b4:	bd30      	pop	{r4, r5, pc}

000346b6 <uECC_vli_modAdd>:
{
   346b6:	b570      	push	{r4, r5, r6, lr}
   346b8:	f99d 4010 	ldrsb.w	r4, [sp, #16]
   346bc:	461e      	mov	r6, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   346be:	4623      	mov	r3, r4
{
   346c0:	4605      	mov	r5, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   346c2:	f7ff fea8 	bl	34416 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   346c6:	b930      	cbnz	r0, 346d6 <uECC_vli_modAdd+0x20>
   346c8:	4622      	mov	r2, r4
   346ca:	4629      	mov	r1, r5
   346cc:	4630      	mov	r0, r6
   346ce:	f7ff ffa9 	bl	34624 <uECC_vli_cmp_unsafe>
   346d2:	2801      	cmp	r0, #1
   346d4:	d007      	beq.n	346e6 <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   346d6:	4623      	mov	r3, r4
   346d8:	4632      	mov	r2, r6
   346da:	4629      	mov	r1, r5
   346dc:	4628      	mov	r0, r5
}
   346de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   346e2:	f7ff bfb6 	b.w	34652 <uECC_vli_sub>
}
   346e6:	bd70      	pop	{r4, r5, r6, pc}

000346e8 <uECC_vli_modSub>:
{
   346e8:	b570      	push	{r4, r5, r6, lr}
   346ea:	f99d 4010 	ldrsb.w	r4, [sp, #16]
   346ee:	461e      	mov	r6, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   346f0:	4623      	mov	r3, r4
{
   346f2:	4605      	mov	r5, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   346f4:	f7ff ffad 	bl	34652 <uECC_vli_sub>
	if (l_borrow) {
   346f8:	b138      	cbz	r0, 3470a <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   346fa:	4623      	mov	r3, r4
   346fc:	4632      	mov	r2, r6
   346fe:	4629      	mov	r1, r5
   34700:	4628      	mov	r0, r5
}
   34702:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   34706:	f7ff be86 	b.w	34416 <uECC_vli_add>
}
   3470a:	bd70      	pop	{r4, r5, r6, pc}

0003470c <uECC_vli_mmod>:
{
   3470c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34710:	461d      	mov	r5, r3
   34712:	b0a5      	sub	sp, #148	; 0x94
	uECC_word_t *v[2] = {tmp, product};
   34714:	ab14      	add	r3, sp, #80	; 0x50
   34716:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   3471a:	4681      	mov	r9, r0
			   uECC_vli_numBits(mod, num_words);
   3471c:	4629      	mov	r1, r5
   3471e:	4610      	mov	r0, r2
{
   34720:	4617      	mov	r7, r2
			   uECC_vli_numBits(mod, num_words);
   34722:	f7ff ff52 	bl	345ca <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   34726:	ebc0 1085 	rsb	r0, r0, r5, lsl #6
   3472a:	b204      	sxth	r4, r0
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   3472c:	4626      	mov	r6, r4
   3472e:	2c00      	cmp	r4, #0
   34730:	bfb8      	it	lt
   34732:	f104 061f 	addlt.w	r6, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   34736:	4263      	negs	r3, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   34738:	f346 1647 	sbfx	r6, r6, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   3473c:	f003 031f 	and.w	r3, r3, #31
   34740:	f004 081f 	and.w	r8, r4, #31
	uECC_vli_clear(mod_multiple, word_shift);
   34744:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   34746:	bf58      	it	pl
   34748:	f1c3 0800 	rsbpl	r8, r3, #0
	uECC_vli_clear(mod_multiple, word_shift);
   3474c:	4631      	mov	r1, r6
   3474e:	f7ff ff18 	bl	34582 <uECC_vli_clear>
	if (bit_shift > 0) {
   34752:	f1b8 0f00 	cmp.w	r8, #0
   34756:	b230      	sxth	r0, r6
   34758:	dd2d      	ble.n	347b6 <uECC_vli_mmod+0xaa>
	uECC_word_t carry = 0;
   3475a:	2200      	movs	r2, #0
   3475c:	ab04      	add	r3, sp, #16
   3475e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   34762:	4613      	mov	r3, r2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   34764:	f1c8 0c20 	rsb	ip, r8, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   34768:	429d      	cmp	r5, r3
   3476a:	d819      	bhi.n	347a0 <uECC_vli_mmod+0x94>
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   3476c:	2601      	movs	r6, #1
		for (i = 0; i < num_words * 2; ++i) {
   3476e:	b22f      	sxth	r7, r5
   34770:	007b      	lsls	r3, r7, #1
   34772:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   34774:	ab04      	add	r3, sp, #16
   34776:	eb03 0787 	add.w	r7, r3, r7, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   3477a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   3477e:	ab24      	add	r3, sp, #144	; 0x90
   34780:	eb03 0888 	add.w	r8, r3, r8, lsl #2
	for (index = 1; shift >= 0; --shift) {
   34784:	2c00      	cmp	r4, #0
   34786:	da54      	bge.n	34832 <uECC_vli_mmod+0x126>
	uECC_vli_set(result, v[index], num_words);
   34788:	ab24      	add	r3, sp, #144	; 0x90
   3478a:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   3478e:	462a      	mov	r2, r5
   34790:	f856 1c88 	ldr.w	r1, [r6, #-136]
   34794:	4648      	mov	r0, r9
   34796:	f7ff ff39 	bl	3460c <uECC_vli_set>
}
   3479a:	b025      	add	sp, #148	; 0x94
   3479c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   347a0:	f857 6023 	ldr.w	r6, [r7, r3, lsl #2]
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   347a4:	3301      	adds	r3, #1
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   347a6:	fa06 f108 	lsl.w	r1, r6, r8
   347aa:	430a      	orrs	r2, r1
   347ac:	f840 2b04 	str.w	r2, [r0], #4
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   347b0:	fa26 f20c 	lsr.w	r2, r6, ip
   347b4:	e7d8      	b.n	34768 <uECC_vli_mmod+0x5c>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   347b6:	ab04      	add	r3, sp, #16
   347b8:	462a      	mov	r2, r5
   347ba:	4639      	mov	r1, r7
   347bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   347c0:	f7ff ff24 	bl	3460c <uECC_vli_set>
   347c4:	e7d2      	b.n	3476c <uECC_vli_mmod+0x60>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   347c6:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   347ca:	fa0f fe82 	sxth.w	lr, r2
   347ce:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   347d2:	ab24      	add	r3, sp, #144	; 0x90
   347d4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   347d8:	f852 3c80 	ldr.w	r3, [r2, #-128]
   347dc:	3001      	adds	r0, #1
   347de:	440b      	add	r3, r1
   347e0:	ebbb 0303 	subs.w	r3, fp, r3
   347e4:	bf34      	ite	cc
   347e6:	2201      	movcc	r2, #1
   347e8:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   347ea:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   347ec:	bf18      	it	ne
   347ee:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   347f0:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   347f4:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   347f8:	9b01      	ldr	r3, [sp, #4]
   347fa:	b242      	sxtb	r2, r0
   347fc:	429a      	cmp	r2, r3
   347fe:	dbe2      	blt.n	347c6 <uECC_vli_mmod+0xba>
		index = !(index ^ borrow);
   34800:	1a73      	subs	r3, r6, r1
   34802:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   34804:	4629      	mov	r1, r5
   34806:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   34808:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   3480a:	f7ff fe1c 	bl	34446 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   3480e:	ab24      	add	r3, sp, #144	; 0x90
   34810:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   34814:	f853 2c80 	ldr.w	r2, [r3, #-128]
   34818:	f858 3c80 	ldr.w	r3, [r8, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   3481c:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   3481e:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   34822:	4638      	mov	r0, r7
	for (index = 1; shift >= 0; --shift) {
   34824:	3c01      	subs	r4, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   34826:	f848 3c80 	str.w	r3, [r8, #-128]
	for (index = 1; shift >= 0; --shift) {
   3482a:	b224      	sxth	r4, r4
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   3482c:	f7ff fe0b 	bl	34446 <uECC_vli_rshift1>
   34830:	e7a8      	b.n	34784 <uECC_vli_mmod+0x78>
   34832:	2000      	movs	r0, #0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   34834:	ab24      	add	r3, sp, #144	; 0x90
			v[1 - index][i] = diff;
   34836:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   3483a:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   3483c:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   34840:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   34844:	e7d8      	b.n	347f8 <uECC_vli_mmod+0xec>

00034846 <uECC_vli_modMult>:
{
   34846:	b570      	push	{r4, r5, r6, lr}
   34848:	4605      	mov	r5, r0
   3484a:	461e      	mov	r6, r3
   3484c:	b090      	sub	sp, #64	; 0x40
   3484e:	f99d 4050 	ldrsb.w	r4, [sp, #80]	; 0x50
	uECC_vli_mult(product, left, right, num_words);
   34852:	4668      	mov	r0, sp
   34854:	4623      	mov	r3, r4
   34856:	f7ff fe1f 	bl	34498 <uECC_vli_mult>
	uECC_vli_mmod(result, product, mod, num_words);
   3485a:	4632      	mov	r2, r6
   3485c:	4669      	mov	r1, sp
   3485e:	4628      	mov	r0, r5
   34860:	f7ff ff54 	bl	3470c <uECC_vli_mmod>
}
   34864:	b010      	add	sp, #64	; 0x40
   34866:	bd70      	pop	{r4, r5, r6, pc}

00034868 <uECC_vli_modMult_fast>:
{
   34868:	b530      	push	{r4, r5, lr}
   3486a:	4605      	mov	r5, r0
   3486c:	461c      	mov	r4, r3
   3486e:	b091      	sub	sp, #68	; 0x44
	uECC_vli_mult(product, left, right, curve->num_words);
   34870:	4668      	mov	r0, sp
   34872:	f993 3000 	ldrsb.w	r3, [r3]
   34876:	f7ff fe0f 	bl	34498 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   3487a:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   3487e:	4669      	mov	r1, sp
   34880:	4628      	mov	r0, r5
   34882:	4798      	blx	r3
}
   34884:	b011      	add	sp, #68	; 0x44
   34886:	bd30      	pop	{r4, r5, pc}

00034888 <uECC_vli_modSquare_fast>:
	uECC_vli_modMult_fast(result, left, left, curve);
   34888:	4613      	mov	r3, r2
   3488a:	460a      	mov	r2, r1
   3488c:	f7ff bfec 	b.w	34868 <uECC_vli_modMult_fast>

00034890 <double_jacobian_default>:
{
   34890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   34894:	f993 6000 	ldrsb.w	r6, [r3]
{
   34898:	b092      	sub	sp, #72	; 0x48
   3489a:	4604      	mov	r4, r0
   3489c:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   3489e:	4610      	mov	r0, r2
   348a0:	4631      	mov	r1, r6
{
   348a2:	4615      	mov	r5, r2
   348a4:	4698      	mov	r8, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   348a6:	f7ff fe77 	bl	34598 <uECC_vli_isZero>
   348aa:	2800      	cmp	r0, #0
   348ac:	f040 8091 	bne.w	349d2 <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   348b0:	4642      	mov	r2, r8
   348b2:	4649      	mov	r1, r9
   348b4:	a802      	add	r0, sp, #8
   348b6:	f7ff ffe7 	bl	34888 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   348ba:	4643      	mov	r3, r8
   348bc:	aa02      	add	r2, sp, #8
   348be:	4621      	mov	r1, r4
   348c0:	a80a      	add	r0, sp, #40	; 0x28
   348c2:	f7ff ffd1 	bl	34868 <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   348c6:	a902      	add	r1, sp, #8
   348c8:	4608      	mov	r0, r1
   348ca:	4642      	mov	r2, r8
   348cc:	f7ff ffdc 	bl	34888 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   348d0:	4643      	mov	r3, r8
   348d2:	462a      	mov	r2, r5
   348d4:	4649      	mov	r1, r9
   348d6:	4648      	mov	r0, r9
   348d8:	f7ff ffc6 	bl	34868 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   348dc:	f108 0704 	add.w	r7, r8, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   348e0:	4642      	mov	r2, r8
   348e2:	4629      	mov	r1, r5
   348e4:	4628      	mov	r0, r5
   348e6:	f7ff ffcf 	bl	34888 <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   348ea:	463b      	mov	r3, r7
   348ec:	462a      	mov	r2, r5
   348ee:	4621      	mov	r1, r4
   348f0:	4620      	mov	r0, r4
   348f2:	9600      	str	r6, [sp, #0]
   348f4:	f7ff fedf 	bl	346b6 <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   348f8:	463b      	mov	r3, r7
   348fa:	462a      	mov	r2, r5
   348fc:	4629      	mov	r1, r5
   348fe:	4628      	mov	r0, r5
   34900:	9600      	str	r6, [sp, #0]
   34902:	f7ff fed8 	bl	346b6 <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   34906:	463b      	mov	r3, r7
   34908:	462a      	mov	r2, r5
   3490a:	4621      	mov	r1, r4
   3490c:	4628      	mov	r0, r5
   3490e:	9600      	str	r6, [sp, #0]
   34910:	f7ff feea 	bl	346e8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   34914:	4643      	mov	r3, r8
   34916:	462a      	mov	r2, r5
   34918:	4621      	mov	r1, r4
   3491a:	4620      	mov	r0, r4
   3491c:	f7ff ffa4 	bl	34868 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   34920:	463b      	mov	r3, r7
   34922:	4622      	mov	r2, r4
   34924:	4621      	mov	r1, r4
   34926:	4628      	mov	r0, r5
   34928:	9600      	str	r6, [sp, #0]
   3492a:	f7ff fec4 	bl	346b6 <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   3492e:	463b      	mov	r3, r7
   34930:	9600      	str	r6, [sp, #0]
   34932:	462a      	mov	r2, r5
   34934:	4621      	mov	r1, r4
   34936:	4620      	mov	r0, r4
   34938:	f7ff febd 	bl	346b6 <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   3493c:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   3493e:	07db      	lsls	r3, r3, #31
   34940:	d54a      	bpl.n	349d8 <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   34942:	4633      	mov	r3, r6
   34944:	463a      	mov	r2, r7
   34946:	4621      	mov	r1, r4
   34948:	4620      	mov	r0, r4
   3494a:	f7ff fd64 	bl	34416 <uECC_vli_add>
   3494e:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   34950:	4631      	mov	r1, r6
   34952:	4620      	mov	r0, r4
   34954:	f7ff fd77 	bl	34446 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   34958:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   3495c:	3b01      	subs	r3, #1
   3495e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   34962:	ea40 70ca 	orr.w	r0, r0, sl, lsl #31
   34966:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   3496a:	4642      	mov	r2, r8
   3496c:	4621      	mov	r1, r4
   3496e:	4628      	mov	r0, r5
   34970:	f7ff ff8a 	bl	34888 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   34974:	463b      	mov	r3, r7
   34976:	aa0a      	add	r2, sp, #40	; 0x28
   34978:	4629      	mov	r1, r5
   3497a:	4628      	mov	r0, r5
   3497c:	9600      	str	r6, [sp, #0]
   3497e:	f7ff feb3 	bl	346e8 <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   34982:	463b      	mov	r3, r7
   34984:	aa0a      	add	r2, sp, #40	; 0x28
   34986:	4629      	mov	r1, r5
   34988:	4628      	mov	r0, r5
   3498a:	9600      	str	r6, [sp, #0]
   3498c:	f7ff feac 	bl	346e8 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   34990:	a90a      	add	r1, sp, #40	; 0x28
   34992:	4608      	mov	r0, r1
   34994:	463b      	mov	r3, r7
   34996:	462a      	mov	r2, r5
   34998:	9600      	str	r6, [sp, #0]
   3499a:	f7ff fea5 	bl	346e8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   3499e:	4643      	mov	r3, r8
   349a0:	aa0a      	add	r2, sp, #40	; 0x28
   349a2:	4621      	mov	r1, r4
   349a4:	4620      	mov	r0, r4
   349a6:	f7ff ff5f 	bl	34868 <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   349aa:	aa02      	add	r2, sp, #8
   349ac:	463b      	mov	r3, r7
   349ae:	4610      	mov	r0, r2
   349b0:	4621      	mov	r1, r4
   349b2:	9600      	str	r6, [sp, #0]
   349b4:	f7ff fe98 	bl	346e8 <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   349b8:	4632      	mov	r2, r6
   349ba:	4629      	mov	r1, r5
   349bc:	4620      	mov	r0, r4
   349be:	f7ff fe25 	bl	3460c <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   349c2:	4649      	mov	r1, r9
   349c4:	4628      	mov	r0, r5
   349c6:	f7ff fe21 	bl	3460c <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   349ca:	a902      	add	r1, sp, #8
   349cc:	4648      	mov	r0, r9
   349ce:	f7ff fe1d 	bl	3460c <uECC_vli_set>
}
   349d2:	b012      	add	sp, #72	; 0x48
   349d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   349d8:	4631      	mov	r1, r6
   349da:	4620      	mov	r0, r4
   349dc:	f7ff fd33 	bl	34446 <uECC_vli_rshift1>
   349e0:	e7c3      	b.n	3496a <double_jacobian_default+0xda>

000349e2 <x_side_default>:
{
   349e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   349e6:	4615      	mov	r5, r2
   349e8:	b08a      	sub	sp, #40	; 0x28
   349ea:	4604      	mov	r4, r0
   349ec:	4688      	mov	r8, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   349ee:	221c      	movs	r2, #28
   349f0:	2100      	movs	r1, #0
   349f2:	a803      	add	r0, sp, #12
   349f4:	f004 fb1f 	bl	39036 <memset>
   349f8:	2303      	movs	r3, #3
	wordcount_t num_words = curve->num_words;
   349fa:	f995 7000 	ldrsb.w	r7, [r5]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   349fe:	462a      	mov	r2, r5
   34a00:	4641      	mov	r1, r8
   34a02:	4620      	mov	r0, r4
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   34a04:	1d2e      	adds	r6, r5, #4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   34a06:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   34a08:	f7ff ff3e 	bl	34888 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   34a0c:	4633      	mov	r3, r6
   34a0e:	aa02      	add	r2, sp, #8
   34a10:	4621      	mov	r1, r4
   34a12:	4620      	mov	r0, r4
   34a14:	9700      	str	r7, [sp, #0]
   34a16:	f7ff fe67 	bl	346e8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   34a1a:	462b      	mov	r3, r5
   34a1c:	4642      	mov	r2, r8
   34a1e:	4621      	mov	r1, r4
   34a20:	4620      	mov	r0, r4
   34a22:	f7ff ff21 	bl	34868 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   34a26:	9700      	str	r7, [sp, #0]
   34a28:	4633      	mov	r3, r6
   34a2a:	f105 0284 	add.w	r2, r5, #132	; 0x84
   34a2e:	4621      	mov	r1, r4
   34a30:	4620      	mov	r0, r4
   34a32:	f7ff fe40 	bl	346b6 <uECC_vli_modAdd>
}
   34a36:	b00a      	add	sp, #40	; 0x28
   34a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00034a3c <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   34a3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   34a40:	4616      	mov	r6, r2
   34a42:	4607      	mov	r7, r0
   34a44:	4698      	mov	r8, r3
   34a46:	4689      	mov	r9, r1
   34a48:	b09b      	sub	sp, #108	; 0x6c
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   34a4a:	9c22      	ldr	r4, [sp, #136]	; 0x88

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   34a4c:	4602      	mov	r2, r0
	wordcount_t num_words = curve->num_words;
   34a4e:	f914 5b04 	ldrsb.w	r5, [r4], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   34a52:	4631      	mov	r1, r6
   34a54:	4623      	mov	r3, r4
   34a56:	a802      	add	r0, sp, #8
   34a58:	9500      	str	r5, [sp, #0]
   34a5a:	f7ff fe45 	bl	346e8 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   34a5e:	a902      	add	r1, sp, #8
   34a60:	9a22      	ldr	r2, [sp, #136]	; 0x88
   34a62:	4608      	mov	r0, r1
   34a64:	f7ff ff10 	bl	34888 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   34a68:	9b22      	ldr	r3, [sp, #136]	; 0x88
   34a6a:	aa02      	add	r2, sp, #8
   34a6c:	4639      	mov	r1, r7
   34a6e:	4638      	mov	r0, r7
   34a70:	f7ff fefa 	bl	34868 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   34a74:	9b22      	ldr	r3, [sp, #136]	; 0x88
   34a76:	aa02      	add	r2, sp, #8
   34a78:	4631      	mov	r1, r6
   34a7a:	4630      	mov	r0, r6
   34a7c:	f7ff fef4 	bl	34868 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   34a80:	4623      	mov	r3, r4
   34a82:	464a      	mov	r2, r9
   34a84:	4641      	mov	r1, r8
   34a86:	a802      	add	r0, sp, #8
   34a88:	9500      	str	r5, [sp, #0]
   34a8a:	f7ff fe14 	bl	346b6 <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   34a8e:	4623      	mov	r3, r4
   34a90:	464a      	mov	r2, r9
   34a92:	4641      	mov	r1, r8
   34a94:	4640      	mov	r0, r8
   34a96:	9500      	str	r5, [sp, #0]
   34a98:	f7ff fe26 	bl	346e8 <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   34a9c:	4623      	mov	r3, r4
   34a9e:	463a      	mov	r2, r7
   34aa0:	4631      	mov	r1, r6
   34aa2:	a80a      	add	r0, sp, #40	; 0x28
   34aa4:	9500      	str	r5, [sp, #0]
   34aa6:	f7ff fe1f 	bl	346e8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   34aaa:	9b22      	ldr	r3, [sp, #136]	; 0x88
   34aac:	aa0a      	add	r2, sp, #40	; 0x28
   34aae:	4649      	mov	r1, r9
   34ab0:	4648      	mov	r0, r9
   34ab2:	f7ff fed9 	bl	34868 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   34ab6:	4623      	mov	r3, r4
   34ab8:	4632      	mov	r2, r6
   34aba:	4639      	mov	r1, r7
   34abc:	a80a      	add	r0, sp, #40	; 0x28
   34abe:	9500      	str	r5, [sp, #0]
   34ac0:	f7ff fdf9 	bl	346b6 <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   34ac4:	9a22      	ldr	r2, [sp, #136]	; 0x88
   34ac6:	4641      	mov	r1, r8
   34ac8:	4630      	mov	r0, r6
   34aca:	f7ff fedd 	bl	34888 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   34ace:	4623      	mov	r3, r4
   34ad0:	aa0a      	add	r2, sp, #40	; 0x28
   34ad2:	4631      	mov	r1, r6
   34ad4:	4630      	mov	r0, r6
   34ad6:	9500      	str	r5, [sp, #0]
   34ad8:	f7ff fe06 	bl	346e8 <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   34adc:	4623      	mov	r3, r4
   34ade:	4632      	mov	r2, r6
   34ae0:	4639      	mov	r1, r7
   34ae2:	a812      	add	r0, sp, #72	; 0x48
   34ae4:	9500      	str	r5, [sp, #0]
   34ae6:	f7ff fdff 	bl	346e8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   34aea:	9b22      	ldr	r3, [sp, #136]	; 0x88
   34aec:	aa12      	add	r2, sp, #72	; 0x48
   34aee:	4641      	mov	r1, r8
   34af0:	4640      	mov	r0, r8
   34af2:	f7ff feb9 	bl	34868 <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   34af6:	4623      	mov	r3, r4
   34af8:	464a      	mov	r2, r9
   34afa:	4641      	mov	r1, r8
   34afc:	4640      	mov	r0, r8
   34afe:	9500      	str	r5, [sp, #0]
   34b00:	f7ff fdf2 	bl	346e8 <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   34b04:	9a22      	ldr	r2, [sp, #136]	; 0x88
   34b06:	a902      	add	r1, sp, #8
   34b08:	a812      	add	r0, sp, #72	; 0x48
   34b0a:	f7ff febd 	bl	34888 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   34b0e:	a912      	add	r1, sp, #72	; 0x48
   34b10:	4623      	mov	r3, r4
   34b12:	aa0a      	add	r2, sp, #40	; 0x28
   34b14:	4608      	mov	r0, r1
   34b16:	9500      	str	r5, [sp, #0]
   34b18:	f7ff fde6 	bl	346e8 <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   34b1c:	4623      	mov	r3, r4
   34b1e:	463a      	mov	r2, r7
   34b20:	a912      	add	r1, sp, #72	; 0x48
   34b22:	a80a      	add	r0, sp, #40	; 0x28
   34b24:	9500      	str	r5, [sp, #0]
   34b26:	f7ff fddf 	bl	346e8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   34b2a:	a90a      	add	r1, sp, #40	; 0x28
   34b2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   34b2e:	aa02      	add	r2, sp, #8
   34b30:	4608      	mov	r0, r1
   34b32:	f7ff fe99 	bl	34868 <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   34b36:	4623      	mov	r3, r4
   34b38:	464a      	mov	r2, r9
   34b3a:	a90a      	add	r1, sp, #40	; 0x28
   34b3c:	4648      	mov	r0, r9
   34b3e:	9500      	str	r5, [sp, #0]
   34b40:	f7ff fdd2 	bl	346e8 <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   34b44:	462a      	mov	r2, r5
   34b46:	a912      	add	r1, sp, #72	; 0x48
   34b48:	4638      	mov	r0, r7
   34b4a:	f7ff fd5f 	bl	3460c <uECC_vli_set>
}
   34b4e:	b01b      	add	sp, #108	; 0x6c
   34b50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00034b54 <uECC_vli_modInv>:
{
   34b54:	b5f0      	push	{r4, r5, r6, r7, lr}
   34b56:	460f      	mov	r7, r1
   34b58:	b0a1      	sub	sp, #132	; 0x84
   34b5a:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   34b5c:	4619      	mov	r1, r3
   34b5e:	4638      	mov	r0, r7
{
   34b60:	4615      	mov	r5, r2
   34b62:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   34b64:	f7ff fd18 	bl	34598 <uECC_vli_isZero>
   34b68:	b120      	cbz	r0, 34b74 <uECC_vli_modInv+0x20>
		uECC_vli_clear(result, num_words);
   34b6a:	4630      	mov	r0, r6
   34b6c:	f7ff fd09 	bl	34582 <uECC_vli_clear>
}
   34b70:	b021      	add	sp, #132	; 0x84
   34b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uECC_vli_set(a, input, num_words);
   34b74:	4622      	mov	r2, r4
   34b76:	4639      	mov	r1, r7
   34b78:	4668      	mov	r0, sp
   34b7a:	f7ff fd47 	bl	3460c <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   34b7e:	4629      	mov	r1, r5
   34b80:	a808      	add	r0, sp, #32
   34b82:	f7ff fd43 	bl	3460c <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   34b86:	a810      	add	r0, sp, #64	; 0x40
   34b88:	4621      	mov	r1, r4
   34b8a:	f7ff fcfa 	bl	34582 <uECC_vli_clear>
	u[0] = 1;
   34b8e:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   34b90:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   34b92:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   34b94:	f7ff fcf5 	bl	34582 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   34b98:	4622      	mov	r2, r4
   34b9a:	a908      	add	r1, sp, #32
   34b9c:	4668      	mov	r0, sp
   34b9e:	f7ff fd41 	bl	34624 <uECC_vli_cmp_unsafe>
   34ba2:	b928      	cbnz	r0, 34bb0 <uECC_vli_modInv+0x5c>
  	uECC_vli_set(result, u, num_words);
   34ba4:	4622      	mov	r2, r4
   34ba6:	a910      	add	r1, sp, #64	; 0x40
   34ba8:	4630      	mov	r0, r6
   34baa:	f7ff fd2f 	bl	3460c <uECC_vli_set>
   34bae:	e7df      	b.n	34b70 <uECC_vli_modInv+0x1c>
		if (EVEN(a)) {
   34bb0:	9b00      	ldr	r3, [sp, #0]
   34bb2:	07da      	lsls	r2, r3, #31
   34bb4:	d409      	bmi.n	34bca <uECC_vli_modInv+0x76>
			uECC_vli_rshift1(a, num_words);
   34bb6:	4621      	mov	r1, r4
   34bb8:	4668      	mov	r0, sp
   34bba:	f7ff fc44 	bl	34446 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   34bbe:	4622      	mov	r2, r4
   34bc0:	4629      	mov	r1, r5
   34bc2:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   34bc4:	f7ff fc4c 	bl	34460 <vli_modInv_update>
   34bc8:	e7e6      	b.n	34b98 <uECC_vli_modInv+0x44>
    		} else if (EVEN(b)) {
   34bca:	9b08      	ldr	r3, [sp, #32]
   34bcc:	07db      	lsls	r3, r3, #31
   34bce:	d407      	bmi.n	34be0 <uECC_vli_modInv+0x8c>
			uECC_vli_rshift1(b, num_words);
   34bd0:	4621      	mov	r1, r4
   34bd2:	a808      	add	r0, sp, #32
   34bd4:	f7ff fc37 	bl	34446 <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   34bd8:	4622      	mov	r2, r4
   34bda:	4629      	mov	r1, r5
   34bdc:	a818      	add	r0, sp, #96	; 0x60
   34bde:	e7f1      	b.n	34bc4 <uECC_vli_modInv+0x70>
		} else if (cmpResult > 0) {
   34be0:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   34be2:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   34be4:	dd1c      	ble.n	34c20 <uECC_vli_modInv+0xcc>
			uECC_vli_sub(a, a, b, num_words);
   34be6:	aa08      	add	r2, sp, #32
   34be8:	4669      	mov	r1, sp
   34bea:	4668      	mov	r0, sp
   34bec:	f7ff fd31 	bl	34652 <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   34bf0:	4621      	mov	r1, r4
   34bf2:	4668      	mov	r0, sp
   34bf4:	f7ff fc27 	bl	34446 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   34bf8:	4622      	mov	r2, r4
   34bfa:	a918      	add	r1, sp, #96	; 0x60
   34bfc:	a810      	add	r0, sp, #64	; 0x40
   34bfe:	f7ff fd11 	bl	34624 <uECC_vli_cmp_unsafe>
   34c02:	2800      	cmp	r0, #0
   34c04:	da05      	bge.n	34c12 <uECC_vli_modInv+0xbe>
        			uECC_vli_add(u, u, mod, num_words);
   34c06:	a910      	add	r1, sp, #64	; 0x40
   34c08:	4623      	mov	r3, r4
   34c0a:	462a      	mov	r2, r5
   34c0c:	4608      	mov	r0, r1
   34c0e:	f7ff fc02 	bl	34416 <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   34c12:	a910      	add	r1, sp, #64	; 0x40
   34c14:	4623      	mov	r3, r4
   34c16:	aa18      	add	r2, sp, #96	; 0x60
   34c18:	4608      	mov	r0, r1
   34c1a:	f7ff fd1a 	bl	34652 <uECC_vli_sub>
   34c1e:	e7ce      	b.n	34bbe <uECC_vli_modInv+0x6a>
      			uECC_vli_sub(b, b, a, num_words);
   34c20:	a908      	add	r1, sp, #32
   34c22:	466a      	mov	r2, sp
   34c24:	4608      	mov	r0, r1
   34c26:	f7ff fd14 	bl	34652 <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   34c2a:	4621      	mov	r1, r4
   34c2c:	a808      	add	r0, sp, #32
   34c2e:	f7ff fc0a 	bl	34446 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   34c32:	4622      	mov	r2, r4
   34c34:	a910      	add	r1, sp, #64	; 0x40
   34c36:	a818      	add	r0, sp, #96	; 0x60
   34c38:	f7ff fcf4 	bl	34624 <uECC_vli_cmp_unsafe>
   34c3c:	2800      	cmp	r0, #0
   34c3e:	da05      	bge.n	34c4c <uECC_vli_modInv+0xf8>
        			uECC_vli_add(v, v, mod, num_words);
   34c40:	a918      	add	r1, sp, #96	; 0x60
   34c42:	4623      	mov	r3, r4
   34c44:	462a      	mov	r2, r5
   34c46:	4608      	mov	r0, r1
   34c48:	f7ff fbe5 	bl	34416 <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   34c4c:	a918      	add	r1, sp, #96	; 0x60
   34c4e:	4623      	mov	r3, r4
   34c50:	aa10      	add	r2, sp, #64	; 0x40
   34c52:	4608      	mov	r0, r1
   34c54:	f7ff fcfd 	bl	34652 <uECC_vli_sub>
   34c58:	e7be      	b.n	34bd8 <uECC_vli_modInv+0x84>

00034c5a <apply_z>:
{
   34c5a:	b5f0      	push	{r4, r5, r6, r7, lr}
   34c5c:	4615      	mov	r5, r2
   34c5e:	461c      	mov	r4, r3
   34c60:	4607      	mov	r7, r0
   34c62:	460e      	mov	r6, r1
   34c64:	b089      	sub	sp, #36	; 0x24
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   34c66:	461a      	mov	r2, r3
   34c68:	4629      	mov	r1, r5
   34c6a:	4668      	mov	r0, sp
   34c6c:	f7ff fe0c 	bl	34888 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   34c70:	4623      	mov	r3, r4
   34c72:	466a      	mov	r2, sp
   34c74:	4639      	mov	r1, r7
   34c76:	4638      	mov	r0, r7
   34c78:	f7ff fdf6 	bl	34868 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   34c7c:	4623      	mov	r3, r4
   34c7e:	462a      	mov	r2, r5
   34c80:	4669      	mov	r1, sp
   34c82:	4668      	mov	r0, sp
   34c84:	f7ff fdf0 	bl	34868 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   34c88:	4623      	mov	r3, r4
   34c8a:	466a      	mov	r2, sp
   34c8c:	4631      	mov	r1, r6
   34c8e:	4630      	mov	r0, r6
   34c90:	f7ff fdea 	bl	34868 <uECC_vli_modMult_fast>
}
   34c94:	b009      	add	sp, #36	; 0x24
   34c96:	bdf0      	pop	{r4, r5, r6, r7, pc}

00034c98 <XYcZ_add>:
{
   34c98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   34c9c:	4614      	mov	r4, r2
   34c9e:	4680      	mov	r8, r0
   34ca0:	461f      	mov	r7, r3
   34ca2:	4689      	mov	r9, r1
   34ca4:	b08b      	sub	sp, #44	; 0x2c
	wordcount_t num_words = curve->num_words;
   34ca6:	9d12      	ldr	r5, [sp, #72]	; 0x48
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   34ca8:	4602      	mov	r2, r0
	wordcount_t num_words = curve->num_words;
   34caa:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   34cae:	4621      	mov	r1, r4
   34cb0:	462b      	mov	r3, r5
   34cb2:	a802      	add	r0, sp, #8
   34cb4:	9600      	str	r6, [sp, #0]
   34cb6:	f7ff fd17 	bl	346e8 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   34cba:	a902      	add	r1, sp, #8
   34cbc:	9a12      	ldr	r2, [sp, #72]	; 0x48
   34cbe:	4608      	mov	r0, r1
   34cc0:	f7ff fde2 	bl	34888 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   34cc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   34cc6:	aa02      	add	r2, sp, #8
   34cc8:	4641      	mov	r1, r8
   34cca:	4640      	mov	r0, r8
   34ccc:	f7ff fdcc 	bl	34868 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   34cd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   34cd2:	aa02      	add	r2, sp, #8
   34cd4:	4621      	mov	r1, r4
   34cd6:	4620      	mov	r0, r4
   34cd8:	f7ff fdc6 	bl	34868 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   34cdc:	462b      	mov	r3, r5
   34cde:	464a      	mov	r2, r9
   34ce0:	4639      	mov	r1, r7
   34ce2:	4638      	mov	r0, r7
   34ce4:	9600      	str	r6, [sp, #0]
   34ce6:	f7ff fcff 	bl	346e8 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   34cea:	9a12      	ldr	r2, [sp, #72]	; 0x48
   34cec:	4639      	mov	r1, r7
   34cee:	a802      	add	r0, sp, #8
   34cf0:	f7ff fdca 	bl	34888 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   34cf4:	a902      	add	r1, sp, #8
   34cf6:	462b      	mov	r3, r5
   34cf8:	4642      	mov	r2, r8
   34cfa:	4608      	mov	r0, r1
   34cfc:	9600      	str	r6, [sp, #0]
   34cfe:	f7ff fcf3 	bl	346e8 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   34d02:	a902      	add	r1, sp, #8
   34d04:	462b      	mov	r3, r5
   34d06:	4622      	mov	r2, r4
   34d08:	4608      	mov	r0, r1
   34d0a:	9600      	str	r6, [sp, #0]
   34d0c:	f7ff fcec 	bl	346e8 <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   34d10:	462b      	mov	r3, r5
   34d12:	4642      	mov	r2, r8
   34d14:	4621      	mov	r1, r4
   34d16:	4620      	mov	r0, r4
   34d18:	9600      	str	r6, [sp, #0]
   34d1a:	f7ff fce5 	bl	346e8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   34d1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   34d20:	4622      	mov	r2, r4
   34d22:	4649      	mov	r1, r9
   34d24:	4648      	mov	r0, r9
   34d26:	f7ff fd9f 	bl	34868 <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   34d2a:	462b      	mov	r3, r5
   34d2c:	aa02      	add	r2, sp, #8
   34d2e:	4641      	mov	r1, r8
   34d30:	4620      	mov	r0, r4
   34d32:	9600      	str	r6, [sp, #0]
   34d34:	f7ff fcd8 	bl	346e8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   34d38:	9b12      	ldr	r3, [sp, #72]	; 0x48
   34d3a:	4622      	mov	r2, r4
   34d3c:	4639      	mov	r1, r7
   34d3e:	4638      	mov	r0, r7
   34d40:	f7ff fd92 	bl	34868 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   34d44:	462b      	mov	r3, r5
   34d46:	464a      	mov	r2, r9
   34d48:	4639      	mov	r1, r7
   34d4a:	4638      	mov	r0, r7
   34d4c:	9600      	str	r6, [sp, #0]
   34d4e:	f7ff fccb 	bl	346e8 <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   34d52:	4632      	mov	r2, r6
   34d54:	a902      	add	r1, sp, #8
   34d56:	4620      	mov	r0, r4
   34d58:	f7ff fc58 	bl	3460c <uECC_vli_set>
}
   34d5c:	b00b      	add	sp, #44	; 0x2c
   34d5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00034d62 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   34d62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34d66:	461e      	mov	r6, r3
   34d68:	b0b1      	sub	sp, #196	; 0xc4
   34d6a:	9c3b      	ldr	r4, [sp, #236]	; 0xec
   34d6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   34d70:	f994 7000 	ldrsb.w	r7, [r4]
{
   34d74:	9206      	str	r2, [sp, #24]

	uECC_vli_set(Rx[1], point, num_words);
   34d76:	a818      	add	r0, sp, #96	; 0x60
   34d78:	463a      	mov	r2, r7
   34d7a:	f7ff fc47 	bl	3460c <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   34d7e:	00bb      	lsls	r3, r7, #2
   34d80:	9307      	str	r3, [sp, #28]
   34d82:	9b05      	ldr	r3, [sp, #20]
   34d84:	00ba      	lsls	r2, r7, #2
   34d86:	4413      	add	r3, r2
   34d88:	4619      	mov	r1, r3
   34d8a:	463a      	mov	r2, r7
   34d8c:	a828      	add	r0, sp, #160	; 0xa0
   34d8e:	9302      	str	r3, [sp, #8]
   34d90:	f7ff fc3c 	bl	3460c <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   34d94:	f994 5000 	ldrsb.w	r5, [r4]
	if (initial_Z) {
   34d98:	2e00      	cmp	r6, #0
   34d9a:	f000 8087 	beq.w	34eac <EccPoint_mult+0x14a>
		uECC_vli_set(z, initial_Z, num_words);
   34d9e:	462a      	mov	r2, r5
   34da0:	4631      	mov	r1, r6
   34da2:	a808      	add	r0, sp, #32
   34da4:	f7ff fc32 	bl	3460c <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   34da8:	ae10      	add	r6, sp, #64	; 0x40
   34daa:	462a      	mov	r2, r5
   34dac:	a918      	add	r1, sp, #96	; 0x60
   34dae:	4630      	mov	r0, r6
	uECC_vli_set(Y2, Y1, num_words);
   34db0:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   34db4:	f7ff fc2a 	bl	3460c <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   34db8:	a928      	add	r1, sp, #160	; 0xa0
   34dba:	4648      	mov	r0, r9
   34dbc:	f7ff fc26 	bl	3460c <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   34dc0:	4623      	mov	r3, r4
   34dc2:	aa08      	add	r2, sp, #32
   34dc4:	a928      	add	r1, sp, #160	; 0xa0
   34dc6:	a818      	add	r0, sp, #96	; 0x60
   34dc8:	f7ff ff47 	bl	34c5a <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   34dcc:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   34dd0:	4623      	mov	r3, r4
   34dd2:	aa08      	add	r2, sp, #32
   34dd4:	a928      	add	r1, sp, #160	; 0xa0
   34dd6:	a818      	add	r0, sp, #96	; 0x60
   34dd8:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   34dda:	4623      	mov	r3, r4
   34ddc:	aa08      	add	r2, sp, #32
   34dde:	4649      	mov	r1, r9
   34de0:	4630      	mov	r0, r6
   34de2:	f7ff ff3a 	bl	34c5a <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   34de6:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   34dea:	3d02      	subs	r5, #2
   34dec:	b22d      	sxth	r5, r5
   34dee:	2d00      	cmp	r5, #0
   34df0:	dc63      	bgt.n	34eba <EccPoint_mult+0x158>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   34df2:	9b06      	ldr	r3, [sp, #24]

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   34df4:	f104 0a04 	add.w	sl, r4, #4
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   34df8:	681d      	ldr	r5, [r3, #0]
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   34dfa:	ab10      	add	r3, sp, #64	; 0x40
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   34dfc:	f005 0601 	and.w	r6, r5, #1
   34e00:	43ed      	mvns	r5, r5
   34e02:	0176      	lsls	r6, r6, #5
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   34e04:	eb03 0806 	add.w	r8, r3, r6
   34e08:	f005 0501 	and.w	r5, r5, #1
   34e0c:	ab20      	add	r3, sp, #128	; 0x80
   34e0e:	441e      	add	r6, r3
   34e10:	016d      	lsls	r5, r5, #5
   34e12:	ab10      	add	r3, sp, #64	; 0x40
   34e14:	eb03 0905 	add.w	r9, r3, r5
   34e18:	ab20      	add	r3, sp, #128	; 0x80
   34e1a:	441d      	add	r5, r3
   34e1c:	9400      	str	r4, [sp, #0]
   34e1e:	462b      	mov	r3, r5
   34e20:	464a      	mov	r2, r9
   34e22:	4631      	mov	r1, r6
   34e24:	4640      	mov	r0, r8
   34e26:	f7ff fe09 	bl	34a3c <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   34e2a:	4653      	mov	r3, sl
   34e2c:	aa10      	add	r2, sp, #64	; 0x40
   34e2e:	a918      	add	r1, sp, #96	; 0x60
   34e30:	a808      	add	r0, sp, #32
   34e32:	9700      	str	r7, [sp, #0]
   34e34:	f7ff fc58 	bl	346e8 <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   34e38:	a908      	add	r1, sp, #32
   34e3a:	4623      	mov	r3, r4
   34e3c:	4632      	mov	r2, r6
   34e3e:	4608      	mov	r0, r1
   34e40:	f7ff fd12 	bl	34868 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   34e44:	a908      	add	r1, sp, #32
   34e46:	4623      	mov	r3, r4
   34e48:	9a05      	ldr	r2, [sp, #20]
   34e4a:	4608      	mov	r0, r1
   34e4c:	f7ff fd0c 	bl	34868 <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   34e50:	a908      	add	r1, sp, #32
   34e52:	463b      	mov	r3, r7
   34e54:	4652      	mov	r2, sl
   34e56:	4608      	mov	r0, r1
   34e58:	f7ff fe7c 	bl	34b54 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   34e5c:	a908      	add	r1, sp, #32
   34e5e:	4623      	mov	r3, r4
   34e60:	9a02      	ldr	r2, [sp, #8]
   34e62:	4608      	mov	r0, r1
   34e64:	f7ff fd00 	bl	34868 <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   34e68:	a908      	add	r1, sp, #32
   34e6a:	4623      	mov	r3, r4
   34e6c:	4642      	mov	r2, r8
   34e6e:	4608      	mov	r0, r1
   34e70:	f7ff fcfa 	bl	34868 <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   34e74:	9400      	str	r4, [sp, #0]
   34e76:	4633      	mov	r3, r6
   34e78:	4642      	mov	r2, r8
   34e7a:	4629      	mov	r1, r5
   34e7c:	4648      	mov	r0, r9
   34e7e:	f7ff ff0b 	bl	34c98 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   34e82:	4623      	mov	r3, r4
   34e84:	aa08      	add	r2, sp, #32
   34e86:	a920      	add	r1, sp, #128	; 0x80
   34e88:	a810      	add	r0, sp, #64	; 0x40
   34e8a:	f7ff fee6 	bl	34c5a <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   34e8e:	463a      	mov	r2, r7
   34e90:	a910      	add	r1, sp, #64	; 0x40
   34e92:	9804      	ldr	r0, [sp, #16]
   34e94:	f7ff fbba 	bl	3460c <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   34e98:	9b04      	ldr	r3, [sp, #16]
   34e9a:	9c07      	ldr	r4, [sp, #28]
   34e9c:	a920      	add	r1, sp, #128	; 0x80
   34e9e:	4423      	add	r3, r4
   34ea0:	4618      	mov	r0, r3
   34ea2:	f7ff fbb3 	bl	3460c <uECC_vli_set>
}
   34ea6:	b031      	add	sp, #196	; 0xc4
   34ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   34eac:	4629      	mov	r1, r5
   34eae:	a808      	add	r0, sp, #32
   34eb0:	f7ff fb67 	bl	34582 <uECC_vli_clear>
		z[0] = 1;
   34eb4:	2301      	movs	r3, #1
   34eb6:	9308      	str	r3, [sp, #32]
   34eb8:	e776      	b.n	34da8 <EccPoint_mult+0x46>
		nb = !uECC_vli_testBit(scalar, i);
   34eba:	4629      	mov	r1, r5
   34ebc:	9806      	ldr	r0, [sp, #24]
   34ebe:	f7ff fb7a 	bl	345b6 <uECC_vli_testBit>
   34ec2:	fab0 f080 	clz	r0, r0
   34ec6:	0940      	lsrs	r0, r0, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   34ec8:	f1c0 0801 	rsb	r8, r0, #1
   34ecc:	ea4f 1848 	mov.w	r8, r8, lsl #5
   34ed0:	0140      	lsls	r0, r0, #5
   34ed2:	eb06 0b08 	add.w	fp, r6, r8
   34ed6:	eb06 0a00 	add.w	sl, r6, r0
   34eda:	44c8      	add	r8, r9
   34edc:	eb09 0300 	add.w	r3, r9, r0
   34ee0:	4652      	mov	r2, sl
   34ee2:	4641      	mov	r1, r8
   34ee4:	4658      	mov	r0, fp
   34ee6:	9400      	str	r4, [sp, #0]
   34ee8:	9303      	str	r3, [sp, #12]
   34eea:	f7ff fda7 	bl	34a3c <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   34eee:	9400      	str	r4, [sp, #0]
   34ef0:	4643      	mov	r3, r8
   34ef2:	465a      	mov	r2, fp
   34ef4:	9903      	ldr	r1, [sp, #12]
   34ef6:	4650      	mov	r0, sl
   34ef8:	f7ff fece 	bl	34c98 <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   34efc:	3d01      	subs	r5, #1
   34efe:	e775      	b.n	34dec <EccPoint_mult+0x8a>

00034f00 <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   34f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   34f04:	460f      	mov	r7, r1

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   34f06:	f9b3 4002 	ldrsh.w	r4, [r3, #2]

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   34f0a:	f103 0624 	add.w	r6, r3, #36	; 0x24
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   34f0e:	f114 051f 	adds.w	r5, r4, #31
   34f12:	bf48      	it	mi
   34f14:	f104 053e 	addmi.w	r5, r4, #62	; 0x3e
   34f18:	f345 1547 	sbfx	r5, r5, #5, #8
{
   34f1c:	4690      	mov	r8, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   34f1e:	4601      	mov	r1, r0
   34f20:	462b      	mov	r3, r5
   34f22:	4632      	mov	r2, r6
   34f24:	4638      	mov	r0, r7
   34f26:	f7ff fa76 	bl	34416 <uECC_vli_add>
   34f2a:	b990      	cbnz	r0, 34f52 <regularize_k+0x52>
   34f2c:	ebb4 1f45 	cmp.w	r4, r5, lsl #5
   34f30:	da11      	bge.n	34f56 <regularize_k+0x56>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   34f32:	4621      	mov	r1, r4
   34f34:	4638      	mov	r0, r7
   34f36:	f7ff fb3e 	bl	345b6 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   34f3a:	1c04      	adds	r4, r0, #0
   34f3c:	bf18      	it	ne
   34f3e:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   34f40:	462b      	mov	r3, r5
   34f42:	4632      	mov	r2, r6
   34f44:	4639      	mov	r1, r7
   34f46:	4640      	mov	r0, r8
   34f48:	f7ff fa65 	bl	34416 <uECC_vli_add>

	return carry;
}
   34f4c:	4620      	mov	r0, r4
   34f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   34f52:	2401      	movs	r4, #1
   34f54:	e7f4      	b.n	34f40 <regularize_k+0x40>
   34f56:	4604      	mov	r4, r0
   34f58:	e7f2      	b.n	34f40 <regularize_k+0x40>

00034f5a <uECC_vli_nativeToBytes>:
}

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   34f5a:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   34f5c:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   34f5e:	1e4f      	subs	r7, r1, #1
   34f60:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   34f62:	428c      	cmp	r4, r1
   34f64:	f105 0501 	add.w	r5, r5, #1
   34f68:	db00      	blt.n	34f6c <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   34f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   34f6c:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   34f6e:	f023 0603 	bic.w	r6, r3, #3
   34f72:	5996      	ldr	r6, [r2, r6]
   34f74:	f003 0303 	and.w	r3, r3, #3
   34f78:	00db      	lsls	r3, r3, #3
   34f7a:	fa26 f303 	lsr.w	r3, r6, r3
   34f7e:	5503      	strb	r3, [r0, r4]
   34f80:	e7ee      	b.n	34f60 <uECC_vli_nativeToBytes+0x6>

00034f82 <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   34f82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34f84:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   34f86:	1cd1      	adds	r1, r2, #3
   34f88:	bf48      	it	mi
   34f8a:	1d91      	addmi	r1, r2, #6
{
   34f8c:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   34f8e:	f341 0187 	sbfx	r1, r1, #2, #8
{
   34f92:	4605      	mov	r5, r0
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   34f94:	f7ff faf5 	bl	34582 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   34f98:	2100      	movs	r1, #0
		unsigned b = num_bytes - 1 - i;
   34f9a:	1e67      	subs	r7, r4, #1
   34f9c:	b24a      	sxtb	r2, r1
	for (i = 0; i < num_bytes; ++i) {
   34f9e:	42a2      	cmp	r2, r4
   34fa0:	f101 0101 	add.w	r1, r1, #1
   34fa4:	db00      	blt.n	34fa8 <uECC_vli_bytesToNative+0x26>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   34fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   34fa8:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   34faa:	f023 0003 	bic.w	r0, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   34fae:	5cb2      	ldrb	r2, [r6, r2]
   34fb0:	f003 0303 	and.w	r3, r3, #3
   34fb4:	00db      	lsls	r3, r3, #3
   34fb6:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   34fba:	582a      	ldr	r2, [r5, r0]
   34fbc:	431a      	orrs	r2, r3
   34fbe:	502a      	str	r2, [r5, r0]
   34fc0:	e7ec      	b.n	34f9c <uECC_vli_bytesToNative+0x1a>

00034fc2 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   34fc2:	78cb      	ldrb	r3, [r1, #3]
   34fc4:	7802      	ldrb	r2, [r0, #0]
   34fc6:	4053      	eors	r3, r2
   34fc8:	7003      	strb	r3, [r0, #0]
   34fca:	884b      	ldrh	r3, [r1, #2]
   34fcc:	7842      	ldrb	r2, [r0, #1]
   34fce:	4053      	eors	r3, r2
   34fd0:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   34fd2:	680a      	ldr	r2, [r1, #0]
   34fd4:	7883      	ldrb	r3, [r0, #2]
   34fd6:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   34fda:	7083      	strb	r3, [r0, #2]
   34fdc:	680a      	ldr	r2, [r1, #0]
   34fde:	78c3      	ldrb	r3, [r0, #3]
   34fe0:	4053      	eors	r3, r2
   34fe2:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   34fe4:	79cb      	ldrb	r3, [r1, #7]
   34fe6:	7902      	ldrb	r2, [r0, #4]
   34fe8:	4053      	eors	r3, r2
   34fea:	7103      	strb	r3, [r0, #4]
   34fec:	88cb      	ldrh	r3, [r1, #6]
   34fee:	7942      	ldrb	r2, [r0, #5]
   34ff0:	4053      	eors	r3, r2
   34ff2:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   34ff4:	684a      	ldr	r2, [r1, #4]
   34ff6:	7983      	ldrb	r3, [r0, #6]
   34ff8:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   34ffc:	7183      	strb	r3, [r0, #6]
   34ffe:	684a      	ldr	r2, [r1, #4]
   35000:	79c3      	ldrb	r3, [r0, #7]
   35002:	4053      	eors	r3, r2
   35004:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   35006:	7acb      	ldrb	r3, [r1, #11]
   35008:	7a02      	ldrb	r2, [r0, #8]
   3500a:	4053      	eors	r3, r2
   3500c:	7203      	strb	r3, [r0, #8]
   3500e:	7a42      	ldrb	r2, [r0, #9]
   35010:	894b      	ldrh	r3, [r1, #10]
   35012:	4053      	eors	r3, r2
   35014:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   35016:	688a      	ldr	r2, [r1, #8]
   35018:	7a83      	ldrb	r3, [r0, #10]
   3501a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   3501e:	7283      	strb	r3, [r0, #10]
   35020:	688a      	ldr	r2, [r1, #8]
   35022:	7ac3      	ldrb	r3, [r0, #11]
   35024:	4053      	eors	r3, r2
   35026:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   35028:	7bcb      	ldrb	r3, [r1, #15]
   3502a:	7b02      	ldrb	r2, [r0, #12]
   3502c:	4053      	eors	r3, r2
   3502e:	7303      	strb	r3, [r0, #12]
   35030:	89cb      	ldrh	r3, [r1, #14]
   35032:	7b42      	ldrb	r2, [r0, #13]
   35034:	4053      	eors	r3, r2
   35036:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   35038:	68ca      	ldr	r2, [r1, #12]
   3503a:	7b83      	ldrb	r3, [r0, #14]
   3503c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   35040:	7383      	strb	r3, [r0, #14]
   35042:	68ca      	ldr	r2, [r1, #12]
   35044:	7bc3      	ldrb	r3, [r0, #15]
   35046:	4053      	eors	r3, r2
   35048:	73c3      	strb	r3, [r0, #15]
}
   3504a:	4770      	bx	lr

0003504c <shift_rows>:
{
   3504c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   3504e:	7802      	ldrb	r2, [r0, #0]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   35050:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   35052:	f88d 2000 	strb.w	r2, [sp]
   35056:	7942      	ldrb	r2, [r0, #5]
   35058:	f88d 2001 	strb.w	r2, [sp, #1]
   3505c:	7a82      	ldrb	r2, [r0, #10]
   3505e:	f88d 2002 	strb.w	r2, [sp, #2]
   35062:	7bc2      	ldrb	r2, [r0, #15]
   35064:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   35068:	7902      	ldrb	r2, [r0, #4]
   3506a:	f88d 2004 	strb.w	r2, [sp, #4]
   3506e:	7a42      	ldrb	r2, [r0, #9]
   35070:	f88d 2005 	strb.w	r2, [sp, #5]
   35074:	7b82      	ldrb	r2, [r0, #14]
   35076:	f88d 2006 	strb.w	r2, [sp, #6]
   3507a:	78c2      	ldrb	r2, [r0, #3]
   3507c:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   35080:	7a02      	ldrb	r2, [r0, #8]
   35082:	f88d 2008 	strb.w	r2, [sp, #8]
   35086:	7b42      	ldrb	r2, [r0, #13]
   35088:	f88d 2009 	strb.w	r2, [sp, #9]
   3508c:	7882      	ldrb	r2, [r0, #2]
   3508e:	f88d 200a 	strb.w	r2, [sp, #10]
   35092:	79c2      	ldrb	r2, [r0, #7]
   35094:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   35098:	7b02      	ldrb	r2, [r0, #12]
   3509a:	f88d 200c 	strb.w	r2, [sp, #12]
   3509e:	7842      	ldrb	r2, [r0, #1]
   350a0:	f88d 200d 	strb.w	r2, [sp, #13]
   350a4:	7982      	ldrb	r2, [r0, #6]
   350a6:	f88d 200e 	strb.w	r2, [sp, #14]
   350aa:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   350ae:	2310      	movs	r3, #16
   350b0:	466a      	mov	r2, sp
   350b2:	4619      	mov	r1, r3
   350b4:	f7ff f871 	bl	3419a <_copy>
}
   350b8:	b005      	add	sp, #20
   350ba:	f85d fb04 	ldr.w	pc, [sp], #4

000350be <mult_row_column>:
{
   350be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   350c0:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   350c2:	7808      	ldrb	r0, [r1, #0]
{
   350c4:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   350c6:	f7ff f877 	bl	341b8 <_double_byte>
   350ca:	4605      	mov	r5, r0
   350cc:	7860      	ldrb	r0, [r4, #1]
   350ce:	f7ff f873 	bl	341b8 <_double_byte>
   350d2:	78a2      	ldrb	r2, [r4, #2]
   350d4:	7863      	ldrb	r3, [r4, #1]
   350d6:	4053      	eors	r3, r2
   350d8:	78e2      	ldrb	r2, [r4, #3]
   350da:	4053      	eors	r3, r2
   350dc:	405d      	eors	r5, r3
   350de:	4045      	eors	r5, r0
   350e0:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   350e2:	7860      	ldrb	r0, [r4, #1]
   350e4:	7827      	ldrb	r7, [r4, #0]
   350e6:	f7ff f867 	bl	341b8 <_double_byte>
   350ea:	4605      	mov	r5, r0
   350ec:	78a0      	ldrb	r0, [r4, #2]
   350ee:	f7ff f863 	bl	341b8 <_double_byte>
   350f2:	78a3      	ldrb	r3, [r4, #2]
   350f4:	405f      	eors	r7, r3
   350f6:	78e3      	ldrb	r3, [r4, #3]
   350f8:	405f      	eors	r7, r3
   350fa:	407d      	eors	r5, r7
   350fc:	4045      	eors	r5, r0
   350fe:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   35100:	78a0      	ldrb	r0, [r4, #2]
   35102:	7865      	ldrb	r5, [r4, #1]
   35104:	7827      	ldrb	r7, [r4, #0]
   35106:	f7ff f857 	bl	341b8 <_double_byte>
   3510a:	406f      	eors	r7, r5
   3510c:	4605      	mov	r5, r0
   3510e:	78e0      	ldrb	r0, [r4, #3]
   35110:	f7ff f852 	bl	341b8 <_double_byte>
   35114:	78e3      	ldrb	r3, [r4, #3]
   35116:	405f      	eors	r7, r3
   35118:	407d      	eors	r5, r7
   3511a:	4045      	eors	r5, r0
   3511c:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   3511e:	7820      	ldrb	r0, [r4, #0]
   35120:	f7ff f84a 	bl	341b8 <_double_byte>
   35124:	7863      	ldrb	r3, [r4, #1]
   35126:	7825      	ldrb	r5, [r4, #0]
   35128:	405d      	eors	r5, r3
   3512a:	78a3      	ldrb	r3, [r4, #2]
   3512c:	405d      	eors	r5, r3
   3512e:	4045      	eors	r5, r0
   35130:	78e0      	ldrb	r0, [r4, #3]
   35132:	f7ff f841 	bl	341b8 <_double_byte>
   35136:	b2ed      	uxtb	r5, r5
   35138:	4068      	eors	r0, r5
   3513a:	70f0      	strb	r0, [r6, #3]
}
   3513c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003513e <tc_sha256_update>:
{
   3513e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   35142:	460d      	mov	r5, r1
	if (s == (TCSha256State_t) 0 ||
   35144:	4604      	mov	r4, r0
   35146:	b110      	cbz	r0, 3514e <tc_sha256_update+0x10>
   35148:	b319      	cbz	r1, 35192 <tc_sha256_update+0x54>
	} else if (datalen == 0) {
   3514a:	b912      	cbnz	r2, 35152 <tc_sha256_update+0x14>
		return TC_CRYPTO_SUCCESS;
   3514c:	2001      	movs	r0, #1
}
   3514e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			s->leftover_offset = 0;
   35152:	f04f 0800 	mov.w	r8, #0
   35156:	188e      	adds	r6, r1, r2
			compress(s->iv, s->leftover);
   35158:	f100 0728 	add.w	r7, r0, #40	; 0x28
	while (datalen-- > 0) {
   3515c:	42ae      	cmp	r6, r5
   3515e:	d0f5      	beq.n	3514c <tc_sha256_update+0xe>
		s->leftover[s->leftover_offset++] = *(data++);
   35160:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   35162:	1c5a      	adds	r2, r3, #1
   35164:	66a2      	str	r2, [r4, #104]	; 0x68
   35166:	f815 1b01 	ldrb.w	r1, [r5], #1
   3516a:	4423      	add	r3, r4
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   3516c:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   3516e:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   35172:	d9f3      	bls.n	3515c <tc_sha256_update+0x1e>
			compress(s->iv, s->leftover);
   35174:	4639      	mov	r1, r7
   35176:	4620      	mov	r0, r4
   35178:	f7e5 fba6 	bl	1a8c8 <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   3517c:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
   35180:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   35184:	f142 0200 	adc.w	r2, r2, #0
			s->leftover_offset = 0;
   35188:	f8c4 8068 	str.w	r8, [r4, #104]	; 0x68
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   3518c:	e9c4 3208 	strd	r3, r2, [r4, #32]
   35190:	e7e4      	b.n	3515c <tc_sha256_update+0x1e>
		return TC_CRYPTO_FAIL;
   35192:	4608      	mov	r0, r1
   35194:	e7db      	b.n	3514e <tc_sha256_update+0x10>

00035196 <tc_sha256_final>:
{
   35196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35198:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   3519a:	4605      	mov	r5, r0
   3519c:	2800      	cmp	r0, #0
   3519e:	d054      	beq.n	3524a <tc_sha256_final+0xb4>
   351a0:	2900      	cmp	r1, #0
   351a2:	d053      	beq.n	3524c <tc_sha256_final+0xb6>
	s->bits_hashed += (s->leftover_offset << 3);
   351a4:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
   351a8:	6e89      	ldr	r1, [r1, #104]	; 0x68
   351aa:	00c8      	lsls	r0, r1, #3
   351ac:	1816      	adds	r6, r2, r0
   351ae:	f143 0700 	adc.w	r7, r3, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   351b2:	2380      	movs	r3, #128	; 0x80
   351b4:	1c48      	adds	r0, r1, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   351b6:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   351b8:	4421      	add	r1, r4
	s->bits_hashed += (s->leftover_offset << 3);
   351ba:	e9c4 6708 	strd	r6, r7, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   351be:	66a0      	str	r0, [r4, #104]	; 0x68
   351c0:	f104 0628 	add.w	r6, r4, #40	; 0x28
   351c4:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   351c8:	d90b      	bls.n	351e2 <tc_sha256_final+0x4c>
		_set(s->leftover + s->leftover_offset, 0x00,
   351ca:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   351ce:	2100      	movs	r1, #0
   351d0:	4430      	add	r0, r6
   351d2:	f7fe ffef 	bl	341b4 <_set>
		compress(s->iv, s->leftover);
   351d6:	4631      	mov	r1, r6
   351d8:	4620      	mov	r0, r4
   351da:	f7e5 fb75 	bl	1a8c8 <compress>
		s->leftover_offset = 0;
   351de:	2300      	movs	r3, #0
   351e0:	66a3      	str	r3, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   351e2:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   351e4:	2100      	movs	r1, #0
   351e6:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   351ea:	4430      	add	r0, r6
   351ec:	f7fe ffe2 	bl	341b4 <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   351f0:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   351f2:	4631      	mov	r1, r6
   351f4:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   351f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   351f8:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   351fa:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   351fc:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   35200:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   35204:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   35206:	0e1b      	lsrs	r3, r3, #24
   35208:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	compress(s->iv, s->leftover);
   3520c:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   3520e:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   35212:	f7e5 fb59 	bl	1a8c8 <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   35216:	1d2b      	adds	r3, r5, #4
   35218:	1f21      	subs	r1, r4, #4
   3521a:	f105 0024 	add.w	r0, r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   3521e:	f851 2f04 	ldr.w	r2, [r1, #4]!
		*digest++ = (uint8_t)(t >> 24);
   35222:	3304      	adds	r3, #4
   35224:	0e15      	lsrs	r5, r2, #24
   35226:	f803 5c08 	strb.w	r5, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   3522a:	0c15      	lsrs	r5, r2, #16
   3522c:	f803 5c07 	strb.w	r5, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   35230:	0a15      	lsrs	r5, r2, #8
   35232:	f803 5c06 	strb.w	r5, [r3, #-6]
		*digest++ = (uint8_t)(t);
   35236:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   3523a:	4283      	cmp	r3, r0
   3523c:	d1ef      	bne.n	3521e <tc_sha256_final+0x88>
	_set(s, 0, sizeof(*s));
   3523e:	4620      	mov	r0, r4
   35240:	2270      	movs	r2, #112	; 0x70
   35242:	2100      	movs	r1, #0
   35244:	f7fe ffb6 	bl	341b4 <_set>
	return TC_CRYPTO_SUCCESS;
   35248:	2001      	movs	r0, #1
}
   3524a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   3524c:	4608      	mov	r0, r1
   3524e:	e7fc      	b.n	3524a <tc_sha256_final+0xb4>

00035250 <tc_ctr_prng_update.part.1>:
 *  @return none
 *  @note Assumes: providedData is (TC_AES_KEY_SIZE + TC_AES_BLOCK_SIZE) bytes long
 *  @param ctx IN/OUT -- CTR PRNG state
 *  @param providedData IN -- data used when updating the internal state
 */
static void tc_ctr_prng_update(TCCtrPrng_t * const ctx, uint8_t const * const providedData)
   35250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   35254:	4604      	mov	r4, r0
   35256:	460e      	mov	r6, r1
{
	if (0 != ctx) {
		/* 10.2.1.2 step 1 */
		uint8_t temp[TC_AES_KEY_SIZE + TC_AES_BLOCK_SIZE];
		unsigned int len = 0U;
   35258:	2500      	movs	r5, #0
static void tc_ctr_prng_update(TCCtrPrng_t * const ctx, uint8_t const * const providedData)
   3525a:	b08c      	sub	sp, #48	; 0x30
   3525c:	f100 0810 	add.w	r8, r0, #16

		/* 10.2.1.2 step 2 */
		while (len < sizeof temp) {
			unsigned int blocklen = sizeof(temp) - len;
   35260:	f1c5 0720 	rsb	r7, r5, #32
	if (0 != arr) {
   35264:	b144      	cbz	r4, 35278 <tc_ctr_prng_update.part.1+0x28>
   35266:	4642      	mov	r2, r8
			if (++arr[i-1] != 0U) {
   35268:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
   3526c:	3301      	adds	r3, #1
   3526e:	b2db      	uxtb	r3, r3
   35270:	7013      	strb	r3, [r2, #0]
   35272:	b90b      	cbnz	r3, 35278 <tc_ctr_prng_update.part.1+0x28>
		for (i = len; i > 0U; i--) {
   35274:	42a2      	cmp	r2, r4
   35276:	d1f7      	bne.n	35268 <tc_ctr_prng_update.part.1+0x18>

			/* 10.2.1.2 step 2.1 */
			arrInc(ctx->V, sizeof ctx->V);

			/* 10.2.1.2 step 2.2 */
			if (blocklen > TC_AES_BLOCK_SIZE) {
   35278:	2f10      	cmp	r7, #16
   3527a:	bf28      	it	cs
   3527c:	2710      	movcs	r7, #16
				blocklen = TC_AES_BLOCK_SIZE;
			}
			(void)tc_aes_encrypt(output_block, ctx->V, &ctx->key);
   3527e:	4642      	mov	r2, r8
   35280:	4621      	mov	r1, r4
   35282:	4668      	mov	r0, sp
   35284:	f7e5 fab6 	bl	1a7f4 <tc_aes_encrypt>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   35288:	ab04      	add	r3, sp, #16
   3528a:	1958      	adds	r0, r3, r5
   3528c:	463a      	mov	r2, r7
   3528e:	4669      	mov	r1, sp

			/* 10.2.1.2 step 2.3/step 3 */
			memcpy(&(temp[len]), output_block, blocklen);

			len += blocklen;
   35290:	443d      	add	r5, r7
   35292:	f003 fe96 	bl	38fc2 <memcpy>
		while (len < sizeof temp) {
   35296:	2d1f      	cmp	r5, #31
   35298:	d9e2      	bls.n	35260 <tc_ctr_prng_update.part.1+0x10>
   3529a:	1e73      	subs	r3, r6, #1
   3529c:	aa04      	add	r2, sp, #16
   3529e:	361f      	adds	r6, #31

		/* 10.2.1.2 step 4 */
		if (0 != providedData) {
			unsigned int i;
			for (i = 0U; i < sizeof temp; i++) {
				temp[i] ^= providedData[i];
   352a0:	7811      	ldrb	r1, [r2, #0]
   352a2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   352a6:	4041      	eors	r1, r0
			for (i = 0U; i < sizeof temp; i++) {
   352a8:	42b3      	cmp	r3, r6
				temp[i] ^= providedData[i];
   352aa:	f802 1b01 	strb.w	r1, [r2], #1
			for (i = 0U; i < sizeof temp; i++) {
   352ae:	d1f7      	bne.n	352a0 <_flash_used+0xc>
			}
		}

		/* 10.2.1.2 step 5 */
		(void)tc_aes128_set_encrypt_key(&ctx->key, temp);
   352b0:	a904      	add	r1, sp, #16
   352b2:	4640      	mov	r0, r8
   352b4:	f7e5 fa48 	bl	1a748 <tc_aes128_set_encrypt_key>
   352b8:	ad0c      	add	r5, sp, #48	; 0x30
   352ba:	aa08      	add	r2, sp, #32
   352bc:	4613      	mov	r3, r2
   352be:	cb03      	ldmia	r3!, {r0, r1}
   352c0:	42ab      	cmp	r3, r5
   352c2:	6020      	str	r0, [r4, #0]
   352c4:	6061      	str	r1, [r4, #4]
   352c6:	461a      	mov	r2, r3
   352c8:	f104 0408 	add.w	r4, r4, #8
   352cc:	d1f6      	bne.n	352bc <_flash_used+0x28>
    
		/* 10.2.1.2 step 6 */
		memcpy(ctx->V, &(temp[TC_AES_KEY_SIZE]), TC_AES_BLOCK_SIZE);
	}
}
   352ce:	b00c      	add	sp, #48	; 0x30
   352d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000352d4 <tc_ctr_prng_init>:
int tc_ctr_prng_init(TCCtrPrng_t * const ctx, 
		     uint8_t const * const entropy,
		     unsigned int entropyLen, 
		     uint8_t const * const personalization,
		     unsigned int pLen)
{
   352d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   352d6:	461e      	mov	r6, r3
   352d8:	b095      	sub	sp, #84	; 0x54
   352da:	4605      	mov	r5, r0
   352dc:	460c      	mov	r4, r1
   352de:	4617      	mov	r7, r2
	int result = TC_CRYPTO_FAIL;	
	unsigned int i;
	uint8_t personalization_buf[TC_AES_KEY_SIZE + TC_AES_BLOCK_SIZE] = {0U};
   352e0:	2100      	movs	r1, #0
   352e2:	2220      	movs	r2, #32
   352e4:	a804      	add	r0, sp, #16
   352e6:	f003 fea6 	bl	39036 <memset>
	uint8_t seed_material[TC_AES_KEY_SIZE + TC_AES_BLOCK_SIZE];
	uint8_t zeroArr[TC_AES_BLOCK_SIZE] = {0U};
   352ea:	2210      	movs	r2, #16
   352ec:	2100      	movs	r1, #0
   352ee:	4668      	mov	r0, sp
   352f0:	f003 fea1 	bl	39036 <memset>
  
	if (0 != personalization) {
   352f4:	b146      	cbz	r6, 35308 <tc_ctr_prng_init+0x34>
		if (len > sizeof personalization_buf) {
			len = sizeof personalization_buf;
		}

		/* 10.2.1.3.1 step 2 */
		memcpy(personalization_buf, personalization, len);
   352f6:	2320      	movs	r3, #32
   352f8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   352fa:	4631      	mov	r1, r6
   352fc:	429a      	cmp	r2, r3
   352fe:	bf28      	it	cs
   35300:	461a      	movcs	r2, r3
   35302:	a804      	add	r0, sp, #16
   35304:	f003 fe6a 	bl	38fdc <__memcpy_chk>
	}

	if ((0 != ctx) && (0 != entropy) && (entropyLen >= sizeof seed_material)) {
   35308:	b385      	cbz	r5, 3536c <tc_ctr_prng_init+0x98>
   3530a:	b37c      	cbz	r4, 3536c <tc_ctr_prng_init+0x98>
   3530c:	2f1f      	cmp	r7, #31
   3530e:	d92d      	bls.n	3536c <tc_ctr_prng_init+0x98>
		/* 10.2.1.3.1 step 3 */
		memcpy(seed_material, entropy, sizeof seed_material);
   35310:	aa0c      	add	r2, sp, #48	; 0x30
   35312:	4623      	mov	r3, r4
   35314:	4616      	mov	r6, r2
   35316:	f104 0720 	add.w	r7, r4, #32
   3531a:	4614      	mov	r4, r2
   3531c:	6818      	ldr	r0, [r3, #0]
   3531e:	6859      	ldr	r1, [r3, #4]
   35320:	3308      	adds	r3, #8
   35322:	c403      	stmia	r4!, {r0, r1}
   35324:	42bb      	cmp	r3, r7
   35326:	4622      	mov	r2, r4
   35328:	d1f7      	bne.n	3531a <tc_ctr_prng_init+0x46>
		for (i = 0U; i < sizeof seed_material; i++) {
   3532a:	4632      	mov	r2, r6
		memcpy(seed_material, entropy, sizeof seed_material);
   3532c:	2420      	movs	r4, #32
   3532e:	ab04      	add	r3, sp, #16
			seed_material[i] ^= personalization_buf[i];
   35330:	7811      	ldrb	r1, [r2, #0]
   35332:	f813 0b01 	ldrb.w	r0, [r3], #1
		for (i = 0U; i < sizeof seed_material; i++) {
   35336:	3c01      	subs	r4, #1
			seed_material[i] ^= personalization_buf[i];
   35338:	ea81 0100 	eor.w	r1, r1, r0
   3533c:	f802 1b01 	strb.w	r1, [r2], #1
		for (i = 0U; i < sizeof seed_material; i++) {
   35340:	d1f6      	bne.n	35330 <tc_ctr_prng_init+0x5c>
		}

		/* 10.2.1.3.1 step 4 */
		(void)tc_aes128_set_encrypt_key(&ctx->key, zeroArr);
   35342:	4669      	mov	r1, sp
   35344:	f105 0010 	add.w	r0, r5, #16
   35348:	f7e5 f9fe 	bl	1a748 <tc_aes128_set_encrypt_key>
__ssp_bos_icheck3(memset, void *, int)
   3534c:	2210      	movs	r2, #16
   3534e:	4621      	mov	r1, r4
   35350:	4628      	mov	r0, r5
   35352:	f003 fe70 	bl	39036 <memset>
	if (0 != ctx) {
   35356:	4628      	mov	r0, r5
   35358:	4631      	mov	r1, r6
   3535a:	f7ff ff79 	bl	35250 <tc_ctr_prng_update.part.1>
    
		/* 10.2.1.3.1 step 6 */    
		tc_ctr_prng_update(ctx, seed_material);

		/* 10.2.1.3.1 step 7 */
		ctx->reseedCount = 1U;
   3535e:	2201      	movs	r2, #1
   35360:	2300      	movs	r3, #0

		result = TC_CRYPTO_SUCCESS;
   35362:	2001      	movs	r0, #1
		ctx->reseedCount = 1U;
   35364:	e9c5 2330 	strd	r2, r3, [r5, #192]	; 0xc0
	}
	return result;
}
   35368:	b015      	add	sp, #84	; 0x54
   3536a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int result = TC_CRYPTO_FAIL;	
   3536c:	2000      	movs	r0, #0
	return result;
   3536e:	e7fb      	b.n	35368 <tc_ctr_prng_init+0x94>

00035370 <tc_ctr_prng_generate>:
int tc_ctr_prng_generate(TCCtrPrng_t * const ctx,
			uint8_t const * const additional_input,
			unsigned int additionallen,
			uint8_t * const out,
			unsigned int outlen)
{
   35370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   35374:	b08c      	sub	sp, #48	; 0x30
   35376:	460e      	mov	r6, r1
   35378:	4690      	mov	r8, r2
   3537a:	461d      	mov	r5, r3
   3537c:	9f12      	ldr	r7, [sp, #72]	; 0x48
	/* 2^19 bits - see section 10.2.1 */ 
	static const unsigned int MAX_BYTES_PER_REQ = 65536U; 

	unsigned int result = TC_CRYPTO_FAIL;

	if ((0 != ctx) && (0 != out) && (outlen < MAX_BYTES_PER_REQ)) {
   3537e:	4604      	mov	r4, r0
   35380:	2800      	cmp	r0, #0
   35382:	d04d      	beq.n	35420 <tc_ctr_prng_generate+0xb0>
   35384:	2b00      	cmp	r3, #0
   35386:	d04b      	beq.n	35420 <tc_ctr_prng_generate+0xb0>
   35388:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   3538c:	d248      	bcs.n	35420 <tc_ctr_prng_generate+0xb0>
		/* 10.2.1.5.1 step 1 */
		if (ctx->reseedCount > MAX_REQS_BEFORE_RESEED) {
   3538e:	e9d0 2330 	ldrd	r2, r3, [r0, #192]	; 0xc0
   35392:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   35396:	bf08      	it	eq
   35398:	2a01      	cmpeq	r2, #1
   3539a:	d243      	bcs.n	35424 <tc_ctr_prng_generate+0xb4>
			result = TC_CTR_PRNG_RESEED_REQ;
		} else {
			uint8_t additional_input_buf[TC_AES_KEY_SIZE + TC_AES_BLOCK_SIZE] = {0U};
   3539c:	2220      	movs	r2, #32
   3539e:	2100      	movs	r1, #0
   353a0:	a804      	add	r0, sp, #16
   353a2:	f003 fe48 	bl	39036 <memset>
			if (0 != additional_input) {
   353a6:	b166      	cbz	r6, 353c2 <tc_ctr_prng_generate+0x52>
				/* 10.2.1.5.1 step 2  */
				unsigned int len = additionallen;
				if (len > sizeof additional_input_buf) {
					len = sizeof additional_input_buf;
				}
				memcpy(additional_input_buf, additional_input, len);
   353a8:	2320      	movs	r3, #32
   353aa:	4598      	cmp	r8, r3
   353ac:	4642      	mov	r2, r8
   353ae:	4631      	mov	r1, r6
   353b0:	bf28      	it	cs
   353b2:	461a      	movcs	r2, r3
   353b4:	a804      	add	r0, sp, #16
   353b6:	f003 fe11 	bl	38fdc <__memcpy_chk>
	if (0 != ctx) {
   353ba:	a904      	add	r1, sp, #16
   353bc:	4620      	mov	r0, r4
   353be:	f7ff ff47 	bl	35250 <tc_ctr_prng_update.part.1>
{
   353c2:	2600      	movs	r6, #0
   353c4:	e01b      	b.n	353fe <tc_ctr_prng_generate+0x8e>
			/* 10.2.1.5.1 step 3 - implicit */

			/* 10.2.1.5.1 step 4 */
			unsigned int len = 0U;      
			while (len < outlen) {
				unsigned int blocklen = outlen - len;
   353c6:	f104 0110 	add.w	r1, r4, #16
   353ca:	460a      	mov	r2, r1
   353cc:	eba7 0806 	sub.w	r8, r7, r6
			if (++arr[i-1] != 0U) {
   353d0:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   353d4:	3301      	adds	r3, #1
   353d6:	b2db      	uxtb	r3, r3
   353d8:	700b      	strb	r3, [r1, #0]
   353da:	b90b      	cbnz	r3, 353e0 <tc_ctr_prng_generate+0x70>
		for (i = len; i > 0U; i--) {
   353dc:	42a1      	cmp	r1, r4
   353de:	d1f7      	bne.n	353d0 <tc_ctr_prng_generate+0x60>

				/* 10.2.1.5.1 step 4.1 */
				arrInc(ctx->V, sizeof ctx->V);

				/* 10.2.1.5.1 step 4.2 */
				(void)tc_aes_encrypt(output_block, ctx->V, &ctx->key);
   353e0:	4621      	mov	r1, r4
   353e2:	4668      	mov	r0, sp
   353e4:	f7e5 fa06 	bl	1a7f4 <tc_aes_encrypt>
      
				/* 10.2.1.5.1 step 4.3/step 5 */
				if (blocklen > TC_AES_BLOCK_SIZE) {
   353e8:	f1b8 0f10 	cmp.w	r8, #16
   353ec:	bf28      	it	cs
   353ee:	f04f 0810 	movcs.w	r8, #16
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   353f2:	19a8      	adds	r0, r5, r6
   353f4:	4642      	mov	r2, r8
   353f6:	4669      	mov	r1, sp
   353f8:	f003 fde3 	bl	38fc2 <memcpy>
					blocklen = TC_AES_BLOCK_SIZE;
				}
				memcpy(&(out[len]), output_block, blocklen);

				len += blocklen;
   353fc:	4446      	add	r6, r8
			while (len < outlen) {
   353fe:	42be      	cmp	r6, r7
   35400:	d3e1      	bcc.n	353c6 <tc_ctr_prng_generate+0x56>
	if (0 != ctx) {
   35402:	4620      	mov	r0, r4
   35404:	a904      	add	r1, sp, #16
   35406:	f7ff ff23 	bl	35250 <tc_ctr_prng_update.part.1>
      
			/* 10.2.1.5.1 step 6 */
			tc_ctr_prng_update(ctx, additional_input_buf);

			/* 10.2.1.5.1 step 7 */
			ctx->reseedCount++;
   3540a:	e9d4 3230 	ldrd	r3, r2, [r4, #192]	; 0xc0

			/* 10.2.1.5.1 step 8 */
			result = TC_CRYPTO_SUCCESS;
   3540e:	2001      	movs	r0, #1
			ctx->reseedCount++;
   35410:	3301      	adds	r3, #1
   35412:	f142 0200 	adc.w	r2, r2, #0
   35416:	e9c4 3230 	strd	r3, r2, [r4, #192]	; 0xc0
		}
	}

	return result;
}
   3541a:	b00c      	add	sp, #48	; 0x30
   3541c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	unsigned int result = TC_CRYPTO_FAIL;
   35420:	2000      	movs	r0, #0
   35422:	e7fa      	b.n	3541a <tc_ctr_prng_generate+0xaa>
			result = TC_CTR_PRNG_RESEED_REQ;
   35424:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   35428:	e7f7      	b.n	3541a <tc_ctr_prng_generate+0xaa>

0003542a <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   3542a:	2100      	movs	r1, #0
   3542c:	2001      	movs	r0, #1
   3542e:	f7e5 bc7d 	b.w	1ad2c <z_arm_fatal_error>

00035432 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   35432:	6e03      	ldr	r3, [r0, #96]	; 0x60
   35434:	f383 880b 	msr	PSPLIM, r3
}
   35438:	4770      	bx	lr

0003543a <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   3543a:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
   3543c:	6800      	ldr	r0, [r0, #0]
   3543e:	f7e5 bc75 	b.w	1ad2c <z_arm_fatal_error>

00035442 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   35442:	b508      	push	{r3, lr}
	handler();
   35444:	f7e5 fd06 	bl	1ae54 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   35448:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   3544c:	f7e6 b856 	b.w	1b4fc <z_arm_exc_exit>

00035450 <mpu_configure_region>:
{
   35450:	b530      	push	{r4, r5, lr}
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   35452:	684b      	ldr	r3, [r1, #4]
{
   35454:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   35456:	680c      	ldr	r4, [r1, #0]
	p_attr->rbar = attr->rbar &
   35458:	f89d 2008 	ldrb.w	r2, [sp, #8]
   3545c:	890d      	ldrh	r5, [r1, #8]
   3545e:	9400      	str	r4, [sp, #0]
	p_attr->mair_idx = attr->mair_idx;
   35460:	8949      	ldrh	r1, [r1, #10]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   35462:	f024 041f 	bic.w	r4, r4, #31
   35466:	3b01      	subs	r3, #1
	p_attr->rbar = attr->rbar &
   35468:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   3546c:	4423      	add	r3, r4
	p_attr->mair_idx = attr->mair_idx;
   3546e:	f361 1247 	bfi	r2, r1, #5, #3
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   35472:	f023 031f 	bic.w	r3, r3, #31
	return region_allocate_and_init(index,
   35476:	4669      	mov	r1, sp
	p_attr->mair_idx = attr->mair_idx;
   35478:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   3547c:	9303      	str	r3, [sp, #12]
   3547e:	f7e6 f8e9 	bl	1b654 <region_allocate_and_init>
}
   35482:	b005      	add	sp, #20
   35484:	bd30      	pop	{r4, r5, pc}

00035486 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   35486:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   3548a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   3548e:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   35490:	bf08      	it	eq
   35492:	f06f 0015 	mvneq.w	r0, #21
   35496:	4770      	bx	lr

00035498 <_stdout_hook_default>:
}
   35498:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3549c:	4770      	bx	lr

0003549e <_stdin_hook_default>:
}
   3549e:	2000      	movs	r0, #0
   354a0:	4770      	bx	lr

000354a2 <_read>:
{
   354a2:	4608      	mov	r0, r1
	return z_impl_zephyr_read_stdin(buf, nbytes);
   354a4:	4611      	mov	r1, r2
   354a6:	f7e6 babb 	b.w	1ba20 <z_impl_zephyr_read_stdin>

000354aa <_write>:
{
   354aa:	4608      	mov	r0, r1
	return z_impl_zephyr_write_stdout(buf, nbytes);
   354ac:	4611      	mov	r1, r2
   354ae:	f7e6 bacb 	b.w	1ba48 <z_impl_zephyr_write_stdout>

000354b2 <_close>:
   354b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   354b6:	4770      	bx	lr

000354b8 <_lseek>:
}
   354b8:	2000      	movs	r0, #0
   354ba:	4770      	bx	lr

000354bc <_isatty>:
}
   354bc:	2001      	movs	r0, #1
   354be:	4770      	bx	lr

000354c0 <_kill>:
}
   354c0:	2000      	movs	r0, #0
   354c2:	4770      	bx	lr

000354c4 <_getpid>:
}
   354c4:	2000      	movs	r0, #0
   354c6:	4770      	bx	lr

000354c8 <_fstat>:
	st->st_mode = S_IFCHR;
   354c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   354cc:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   354ce:	604b      	str	r3, [r1, #4]
}
   354d0:	4770      	bx	lr

000354d2 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   354d2:	f7f6 b9b9 	b.w	2b848 <z_impl_z_errno>

000354d6 <close>:
   354d6:	f7fe bc96 	b.w	33e06 <z_impl_zsock_close>

000354da <fixed_data_unref>:
}
   354da:	4770      	bx	lr

000354dc <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   354dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   354de:	460a      	mov	r2, r1
   354e0:	685b      	ldr	r3, [r3, #4]
   354e2:	6819      	ldr	r1, [r3, #0]
   354e4:	f7e6 bc2a 	b.w	1bd3c <net_buf_alloc_len>

000354e8 <net_buf_simple_tailroom>:
	return buf->data - buf->__buf;
}

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   354e8:	8883      	ldrh	r3, [r0, #4]
   354ea:	88c2      	ldrh	r2, [r0, #6]
   354ec:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   354ee:	6803      	ldr	r3, [r0, #0]
   354f0:	6880      	ldr	r0, [r0, #8]
   354f2:	1a18      	subs	r0, r3, r0
}
   354f4:	1a10      	subs	r0, r2, r0
   354f6:	4770      	bx	lr

000354f8 <processing_data>:
		locally_routed = true;
	}
#endif

	/* If there is no data, then drop the packet. */
	if (!pkt->frags) {
   354f8:	6903      	ldr	r3, [r0, #16]

	return NET_DROP;
}

static void processing_data(struct net_pkt *pkt, bool is_loopback)
{
   354fa:	b510      	push	{r4, lr}
   354fc:	4604      	mov	r4, r0
	if (!pkt->frags) {
   354fe:	b923      	cbnz	r3, 3550a <processing_data+0x12>
		NET_DBG("Consumed pkt %p", pkt);
		break;
	case NET_DROP:
	default:
		NET_DBG("Dropping pkt %p", pkt);
		net_pkt_unref(pkt);
   35500:	4620      	mov	r0, r4
		break;
	}
}
   35502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		net_pkt_unref(pkt);
   35506:	f000 bbdc 	b.w	35cc2 <net_pkt_unref>
	if (!is_loopback && !locally_routed) {
   3550a:	b169      	cbz	r1, 35528 <processing_data+0x30>
	net_pkt_cursor_init(pkt);
   3550c:	4620      	mov	r0, r4
   3550e:	f000 fc3c 	bl	35d8a <net_pkt_cursor_init>
	return pkt->frags->data;
   35512:	6923      	ldr	r3, [r4, #16]
	switch (NET_IPV6_HDR(pkt)->vtc & 0xf0) {
   35514:	689b      	ldr	r3, [r3, #8]
   35516:	781b      	ldrb	r3, [r3, #0]
   35518:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   3551c:	2b40      	cmp	r3, #64	; 0x40
   3551e:	d1ef      	bne.n	35500 <processing_data+0x8>
		return net_ipv4_input(pkt);
   35520:	4620      	mov	r0, r4
   35522:	f000 ffd9 	bl	364d8 <net_ipv4_input>
   35526:	e005      	b.n	35534 <processing_data+0x3c>
		ret = net_if_recv_data(net_pkt_iface(pkt), pkt);
   35528:	4601      	mov	r1, r0
   3552a:	6a00      	ldr	r0, [r0, #32]
   3552c:	f000 f908 	bl	35740 <net_if_recv_data>
		if (ret != NET_CONTINUE) {
   35530:	2801      	cmp	r0, #1
   35532:	d0eb      	beq.n	3550c <processing_data+0x14>
	switch (process_data(pkt, is_loopback)) {
   35534:	2800      	cmp	r0, #0
   35536:	d1e3      	bne.n	35500 <processing_data+0x8>
}
   35538:	bd10      	pop	{r4, pc}

0003553a <net_init>:

	return status;
}

static int net_init(struct device *unused)
{
   3553a:	b508      	push	{r3, lr}
	net_hostname_init();

	NET_DBG("Priority %d", CONFIG_NET_INIT_PRIO);

	net_pkt_init();
   3553c:	f000 fe28 	bl	36190 <net_pkt_init>

	net_context_init();
   35540:	f7e7 fe58 	bl	1d1f4 <net_context_init>
	net_icmpv4_init();
   35544:	f7e7 ffc8 	bl	1d4d8 <net_icmpv4_init>
		net_conn_init();
   35548:	f7e8 f9bc 	bl	1d8c4 <net_conn_init>
	net_tcp_init();
   3554c:	f001 fa73 	bl	36a36 <net_tcp_init>
	net_if_init();
   35550:	f7e6 fff8 	bl	1c544 <net_if_init>
	net_tc_rx_init();
   35554:	f7e7 ff5c 	bl	1d410 <net_tc_rx_init>
	net_if_post_init();
   35558:	f7e7 f822 	bl	1c5a0 <net_if_post_init>
	dns_init_resolver();
   3555c:	f002 fbac 	bl	37cb8 <dns_init_resolver>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   35560:	2000      	movs	r0, #0
   35562:	bd08      	pop	{r3, pc}

00035564 <net_send_data>:
{
   35564:	b570      	push	{r4, r5, r6, lr}
	if (!pkt || !pkt->frags) {
   35566:	4604      	mov	r4, r0
   35568:	2800      	cmp	r0, #0
   3556a:	d065      	beq.n	35638 <net_send_data+0xd4>
   3556c:	6903      	ldr	r3, [r0, #16]
   3556e:	2b00      	cmp	r3, #0
   35570:	d062      	beq.n	35638 <net_send_data+0xd4>
	if (!net_pkt_iface(pkt)) {
   35572:	6a03      	ldr	r3, [r0, #32]
   35574:	2b00      	cmp	r3, #0
   35576:	d062      	beq.n	3563e <net_send_data+0xda>
	net_pkt_trim_buffer(pkt);
   35578:	f000 fbed 	bl	35d56 <net_pkt_trim_buffer>
	net_pkt_cursor_init(pkt);
   3557c:	4620      	mov	r0, r4
   3557e:	f000 fc04 	bl	35d8a <net_pkt_cursor_init>
	return pkt->family;
   35582:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
	if (net_pkt_family(pkt) == AF_INET) {
   35586:	f3c3 0342 	ubfx	r3, r3, #1, #3
   3558a:	2b01      	cmp	r3, #1
   3558c:	d14a      	bne.n	35624 <net_send_data+0xc0>
	return pkt->frags->data;
   3558e:	6923      	ldr	r3, [r4, #16]
   35590:	689d      	ldr	r5, [r3, #8]
		if (net_ipv4_addr_cmp(&NET_IPV4_HDR(pkt)->dst,
   35592:	f7e7 f819 	bl	1c5c8 <net_ipv4_unspecified_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   35596:	692a      	ldr	r2, [r5, #16]
   35598:	6803      	ldr	r3, [r0, #0]
   3559a:	429a      	cmp	r2, r3
   3559c:	d102      	bne.n	355a4 <net_send_data+0x40>
			return -EADDRNOTAVAIL;
   3559e:	f06f 007c 	mvn.w	r0, #124	; 0x7c
}
   355a2:	bd70      	pop	{r4, r5, r6, pc}
   355a4:	6923      	ldr	r3, [r4, #16]
   355a6:	689d      	ldr	r5, [r3, #8]
		if (net_ipv4_is_addr_loopback(&NET_IPV4_HDR(pkt)->dst) ||
   355a8:	7c2b      	ldrb	r3, [r5, #16]
   355aa:	2b7f      	cmp	r3, #127	; 0x7f
   355ac:	d10f      	bne.n	355ce <net_send_data+0x6a>
   355ae:	6923      	ldr	r3, [r4, #16]
			net_ipaddr_copy(&addr, &NET_IPV4_HDR(pkt)->src);
   355b0:	689b      	ldr	r3, [r3, #8]
   355b2:	68da      	ldr	r2, [r3, #12]
   355b4:	6923      	ldr	r3, [r4, #16]
   355b6:	689b      	ldr	r3, [r3, #8]
			net_ipaddr_copy(&NET_IPV4_HDR(pkt)->src,
   355b8:	6919      	ldr	r1, [r3, #16]
   355ba:	60d9      	str	r1, [r3, #12]
   355bc:	6923      	ldr	r3, [r4, #16]
   355be:	689b      	ldr	r3, [r3, #8]
			net_ipaddr_copy(&NET_IPV4_HDR(pkt)->dst, &addr);
   355c0:	611a      	str	r2, [r3, #16]
		processing_data(pkt, true);
   355c2:	2101      	movs	r1, #1
   355c4:	4620      	mov	r0, r4
   355c6:	f7ff ff97 	bl	354f8 <processing_data>
		return 0;
   355ca:	2000      	movs	r0, #0
   355cc:	e7e9      	b.n	355a2 <net_send_data+0x3e>
		    (net_ipv4_is_addr_bcast(net_pkt_iface(pkt),
   355ce:	6a26      	ldr	r6, [r4, #32]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   355d0:	f7e6 fffe 	bl	1c5d0 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   355d4:	692a      	ldr	r2, [r5, #16]
   355d6:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   355d8:	429a      	cmp	r2, r3
   355da:	d01e      	beq.n	3561a <net_send_data+0xb6>
	return net_if_ipv4_is_addr_bcast(iface, addr);
   355dc:	f105 0110 	add.w	r1, r5, #16
   355e0:	4630      	mov	r0, r6
   355e2:	f7e6 fe29 	bl	1c238 <net_if_ipv4_is_addr_bcast>
		if (net_ipv4_is_addr_loopback(&NET_IPV4_HDR(pkt)->dst) ||
   355e6:	4601      	mov	r1, r0
   355e8:	b9b8      	cbnz	r0, 3561a <net_send_data+0xb6>
   355ea:	6923      	ldr	r3, [r4, #16]
   355ec:	689e      	ldr	r6, [r3, #8]
		     net_ipv4_is_my_addr(&NET_IPV4_HDR(pkt)->dst))) {
   355ee:	f106 0510 	add.w	r5, r6, #16
	ret = net_if_ipv4_addr_lookup(addr, NULL) != NULL;
   355f2:	4628      	mov	r0, r5
   355f4:	f7e6 fea0 	bl	1c338 <net_if_ipv4_addr_lookup>
   355f8:	2800      	cmp	r0, #0
   355fa:	bf14      	ite	ne
   355fc:	2001      	movne	r0, #1
   355fe:	2000      	moveq	r0, #0
	if (!ret) {
   35600:	d109      	bne.n	35616 <net_send_data+0xb2>
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   35602:	f7e6 ffe5 	bl	1c5d0 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   35606:	6932      	ldr	r2, [r6, #16]
   35608:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   3560a:	429a      	cmp	r2, r3
   3560c:	d0cf      	beq.n	355ae <net_send_data+0x4a>
	return net_if_ipv4_is_addr_bcast(iface, addr);
   3560e:	4629      	mov	r1, r5
   35610:	2000      	movs	r0, #0
   35612:	f7e6 fe11 	bl	1c238 <net_if_ipv4_is_addr_bcast>
				     &NET_IPV4_HDR(pkt)->dst) == false &&
   35616:	2800      	cmp	r0, #0
   35618:	d1c9      	bne.n	355ae <net_send_data+0x4a>
   3561a:	6923      	ldr	r3, [r4, #16]
		if (net_ipv4_is_addr_loopback(&NET_IPV4_HDR(pkt)->src)) {
   3561c:	689b      	ldr	r3, [r3, #8]
   3561e:	7b1b      	ldrb	r3, [r3, #12]
   35620:	2b7f      	cmp	r3, #127	; 0x7f
   35622:	d0bc      	beq.n	3559e <net_send_data+0x3a>
	if (net_if_send_data(net_pkt_iface(pkt), pkt) == NET_DROP) {
   35624:	4621      	mov	r1, r4
   35626:	6a20      	ldr	r0, [r4, #32]
   35628:	f000 f893 	bl	35752 <net_if_send_data>
		return -EIO;
   3562c:	2802      	cmp	r0, #2
   3562e:	bf14      	ite	ne
   35630:	2000      	movne	r0, #0
   35632:	f06f 0004 	mvneq.w	r0, #4
   35636:	e7b4      	b.n	355a2 <net_send_data+0x3e>
		return -ENODATA;
   35638:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   3563c:	e7b1      	b.n	355a2 <net_send_data+0x3e>
		return -EINVAL;
   3563e:	f06f 0015 	mvn.w	r0, #21
   35642:	e7ae      	b.n	355a2 <net_send_data+0x3e>

00035644 <net_ipv4_is_addr_mcast>:
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xE0000000) == 0xE0000000;
   35644:	6800      	ldr	r0, [r0, #0]
   35646:	ba00      	rev	r0, r0
   35648:	f000 4060 	and.w	r0, r0, #3758096384	; 0xe0000000
}
   3564c:	f100 5300 	add.w	r3, r0, #536870912	; 0x20000000
   35650:	4258      	negs	r0, r3
   35652:	4158      	adcs	r0, r3
   35654:	4770      	bx	lr

00035656 <net_if_l2>:
	if (!iface || !iface->if_dev) {
   35656:	b110      	cbz	r0, 3565e <net_if_l2+0x8>
   35658:	6800      	ldr	r0, [r0, #0]
   3565a:	b100      	cbz	r0, 3565e <net_if_l2+0x8>
	return iface->if_dev->l2;
   3565c:	6840      	ldr	r0, [r0, #4]
}
   3565e:	4770      	bx	lr

00035660 <net_context_send_cb>:
	if (!context) {
   35660:	b118      	cbz	r0, 3566a <net_context_send_cb+0xa>
	if (context->send_cb) {
   35662:	6b43      	ldr	r3, [r0, #52]	; 0x34
   35664:	b10b      	cbz	r3, 3566a <net_context_send_cb+0xa>
		context->send_cb(context, status, context->user_data);
   35666:	6802      	ldr	r2, [r0, #0]
   35668:	4718      	bx	r3
}
   3566a:	4770      	bx	lr

0003566c <l2_flags_get>:
{
   3566c:	b510      	push	{r4, lr}
   3566e:	4602      	mov	r2, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   35670:	f7ff fff1 	bl	35656 <net_if_l2>
   35674:	b128      	cbz	r0, 35682 <l2_flags_get+0x16>
   35676:	68c3      	ldr	r3, [r0, #12]
   35678:	b11b      	cbz	r3, 35682 <l2_flags_get+0x16>
}
   3567a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   3567e:	4610      	mov	r0, r2
   35680:	4718      	bx	r3
}
   35682:	2000      	movs	r0, #0
   35684:	bd10      	pop	{r4, pc}

00035686 <if_ipv4_get_addr>:
{
   35686:	b538      	push	{r3, r4, r5, lr}
   35688:	4615      	mov	r5, r2
	if (!iface) {
   3568a:	4604      	mov	r4, r0
   3568c:	b1c0      	cbz	r0, 356c0 <if_ipv4_get_addr+0x3a>
	ipv4 = iface->config.ip.ipv4;
   3568e:	6844      	ldr	r4, [r0, #4]
	if (!ipv4) {
   35690:	b1b4      	cbz	r4, 356c0 <if_ipv4_get_addr+0x3a>
		if (!ipv4->unicast[i].is_used ||
   35692:	7da3      	ldrb	r3, [r4, #22]
   35694:	f3c3 0340 	ubfx	r3, r3, #1, #1
   35698:	b90b      	cbnz	r3, 3569e <if_ipv4_get_addr+0x18>
	return NULL;
   3569a:	461c      	mov	r4, r3
   3569c:	e010      	b.n	356c0 <if_ipv4_get_addr+0x3a>
		if (!ipv4->unicast[i].is_used ||
   3569e:	1c4b      	adds	r3, r1, #1
   356a0:	d003      	beq.n	356aa <if_ipv4_get_addr+0x24>
		    (addr_state != NET_ADDR_ANY_STATE &&
   356a2:	f994 3015 	ldrsb.w	r3, [r4, #21]
   356a6:	428b      	cmp	r3, r1
   356a8:	d110      	bne.n	356cc <if_ipv4_get_addr+0x46>
		     ipv4->unicast[i].addr_state != addr_state) ||
   356aa:	8823      	ldrh	r3, [r4, #0]
   356ac:	2b01      	cmp	r3, #1
   356ae:	d10d      	bne.n	356cc <if_ipv4_get_addr+0x46>
		if (net_ipv4_is_ll_addr(&ipv4->unicast[i].address.in_addr)) {
   356b0:	3404      	adds	r4, #4
   356b2:	4620      	mov	r0, r4
   356b4:	f7e6 fca6 	bl	1c004 <net_ipv4_is_ll_addr>
   356b8:	b120      	cbz	r0, 356c4 <if_ipv4_get_addr+0x3e>
	return NULL;
   356ba:	2d00      	cmp	r5, #0
   356bc:	bf08      	it	eq
   356be:	2400      	moveq	r4, #0
}
   356c0:	4620      	mov	r0, r4
   356c2:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   356c4:	2d00      	cmp	r5, #0
   356c6:	bf18      	it	ne
   356c8:	2400      	movne	r4, #0
   356ca:	e7f9      	b.n	356c0 <if_ipv4_get_addr+0x3a>
   356cc:	2400      	movs	r4, #0
   356ce:	e7f7      	b.n	356c0 <if_ipv4_get_addr+0x3a>

000356d0 <k_uptime_get_32>:
{
   356d0:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   356d2:	f003 fba8 	bl	38e26 <z_impl_k_uptime_ticks>
   356d6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   356da:	fba0 2304 	umull	r2, r3, r0, r4
   356de:	fb04 3301 	mla	r3, r4, r1, r3
   356e2:	0bd0      	lsrs	r0, r2, #15
}
   356e4:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   356e8:	bd10      	pop	{r4, pc}

000356ea <net_if_ipv4_addr_mask_cmp>:
	struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;
   356ea:	6843      	ldr	r3, [r0, #4]
	if (!ipv4) {
   356ec:	b17b      	cbz	r3, 3570e <net_if_ipv4_addr_mask_cmp+0x24>
		if (!ipv4->unicast[i].is_used ||
   356ee:	7d98      	ldrb	r0, [r3, #22]
	subnet = UNALIGNED_GET(&addr->s_addr) & ipv4->netmask.s_addr;
   356f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   356f2:	6809      	ldr	r1, [r1, #0]
		if (!ipv4->unicast[i].is_used ||
   356f4:	f3c0 0040 	ubfx	r0, r0, #1, #1
	subnet = UNALIGNED_GET(&addr->s_addr) & ipv4->netmask.s_addr;
   356f8:	4011      	ands	r1, r2
		if (!ipv4->unicast[i].is_used ||
   356fa:	b148      	cbz	r0, 35710 <net_if_ipv4_addr_mask_cmp+0x26>
   356fc:	8818      	ldrh	r0, [r3, #0]
   356fe:	2801      	cmp	r0, #1
   35700:	d105      	bne.n	3570e <net_if_ipv4_addr_mask_cmp+0x24>
		if ((ipv4->unicast[i].address.in_addr.s_addr &
   35702:	6858      	ldr	r0, [r3, #4]
   35704:	4010      	ands	r0, r2
   35706:	1a43      	subs	r3, r0, r1
   35708:	4258      	negs	r0, r3
   3570a:	4158      	adcs	r0, r3
   3570c:	4770      	bx	lr
		return false;
   3570e:	2000      	movs	r0, #0
}
   35710:	4770      	bx	lr

00035712 <ipv4_is_broadcast_address>:
{
   35712:	b538      	push	{r3, r4, r5, lr}
	struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;
   35714:	6844      	ldr	r4, [r0, #4]
{
   35716:	460d      	mov	r5, r1
	if (!ipv4) {
   35718:	b154      	cbz	r4, 35730 <ipv4_is_broadcast_address+0x1e>
	if (!net_if_ipv4_addr_mask_cmp(iface, addr)) {
   3571a:	f7ff ffe6 	bl	356ea <net_if_ipv4_addr_mask_cmp>
   3571e:	b130      	cbz	r0, 3572e <ipv4_is_broadcast_address+0x1c>
	if ((UNALIGNED_GET(&addr->s_addr) & ~ipv4->netmask.s_addr) ==
   35720:	6b63      	ldr	r3, [r4, #52]	; 0x34
   35722:	682a      	ldr	r2, [r5, #0]
   35724:	43db      	mvns	r3, r3
   35726:	4393      	bics	r3, r2
   35728:	bf0c      	ite	eq
   3572a:	2001      	moveq	r0, #1
   3572c:	2000      	movne	r0, #0
}
   3572e:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   35730:	4620      	mov	r0, r4
   35732:	e7fc      	b.n	3572e <ipv4_is_broadcast_address+0x1c>

00035734 <net_if_ipv4_get_ll>:
	return if_ipv4_get_addr(iface, addr_state, true);
   35734:	2201      	movs	r2, #1
   35736:	f7ff bfa6 	b.w	35686 <if_ipv4_get_addr>

0003573a <net_if_ipv4_get_global_addr>:
	return if_ipv4_get_addr(iface, addr_state, false);
   3573a:	2200      	movs	r2, #0
   3573c:	f7ff bfa3 	b.w	35686 <if_ipv4_get_addr>

00035740 <net_if_recv_data>:
{
   35740:	b510      	push	{r4, lr}
   35742:	4602      	mov	r2, r0
	return net_if_l2(iface)->recv(iface, pkt);
   35744:	f7ff ff87 	bl	35656 <net_if_l2>
}
   35748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return net_if_l2(iface)->recv(iface, pkt);
   3574c:	6803      	ldr	r3, [r0, #0]
   3574e:	4610      	mov	r0, r2
   35750:	4718      	bx	r3

00035752 <net_if_send_data>:
{
   35752:	b570      	push	{r4, r5, r6, lr}
   35754:	460c      	mov	r4, r1
	struct net_context *context = net_pkt_context(pkt);
   35756:	69ce      	ldr	r6, [r1, #28]
	if (!net_if_flag_is_set(iface, NET_IF_UP) ||
   35758:	2100      	movs	r1, #0
{
   3575a:	4605      	mov	r5, r0
	if (!net_if_flag_is_set(iface, NET_IF_UP) ||
   3575c:	f7e6 fc5e 	bl	1c01c <net_if_flag_is_set>
   35760:	b958      	cbnz	r0, 3577a <net_if_send_data+0x28>
		if (context) {
   35762:	bb26      	cbnz	r6, 357ae <net_if_send_data+0x5c>
		if (dst->addr) {
   35764:	6b23      	ldr	r3, [r4, #48]	; 0x30
   35766:	b133      	cbz	r3, 35776 <net_if_send_data+0x24>
			net_if_call_link_cb(iface, dst, status);
   35768:	f06f 0272 	mvn.w	r2, #114	; 0x72
   3576c:	f104 0130 	add.w	r1, r4, #48	; 0x30
   35770:	4628      	mov	r0, r5
   35772:	f7e6 fe23 	bl	1c3bc <net_if_call_link_cb>
		verdict = NET_DROP;
   35776:	2002      	movs	r0, #2
   35778:	e018      	b.n	357ac <net_if_send_data+0x5a>
	    net_if_flag_is_set(iface, NET_IF_SUSPENDED)) {
   3577a:	2104      	movs	r1, #4
   3577c:	4628      	mov	r0, r5
   3577e:	f7e6 fc4d 	bl	1c01c <net_if_flag_is_set>
	if (!net_if_flag_is_set(iface, NET_IF_UP) ||
   35782:	2800      	cmp	r0, #0
   35784:	d1ed      	bne.n	35762 <net_if_send_data+0x10>
	if (!net_if_flag_is_set(iface, NET_IF_POINTOPOINT) &&
   35786:	2101      	movs	r1, #1
   35788:	4628      	mov	r0, r5
   3578a:	f7e6 fc47 	bl	1c01c <net_if_flag_is_set>
   3578e:	b940      	cbnz	r0, 357a2 <net_if_send_data+0x50>
   35790:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   35792:	b933      	cbnz	r3, 357a2 <net_if_send_data+0x50>
	return net_if_get_link_addr(pkt->iface);
   35794:	6a23      	ldr	r3, [r4, #32]
   35796:	681b      	ldr	r3, [r3, #0]
		net_pkt_lladdr_src(pkt)->addr = net_pkt_lladdr_if(pkt)->addr;
   35798:	691a      	ldr	r2, [r3, #16]
   3579a:	62a2      	str	r2, [r4, #40]	; 0x28
		net_pkt_lladdr_src(pkt)->len = net_pkt_lladdr_if(pkt)->len;
   3579c:	7d1b      	ldrb	r3, [r3, #20]
   3579e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		net_if_queue_tx(iface, pkt);
   357a2:	4628      	mov	r0, r5
   357a4:	4621      	mov	r1, r4
   357a6:	f7e6 fd2b 	bl	1c200 <net_if_queue_tx>
   357aa:	2000      	movs	r0, #0
}
   357ac:	bd70      	pop	{r4, r5, r6, pc}
			net_context_send_cb(context, status);
   357ae:	f06f 0172 	mvn.w	r1, #114	; 0x72
   357b2:	4630      	mov	r0, r6
   357b4:	f7ff ff54 	bl	35660 <net_context_send_cb>
   357b8:	e7d4      	b.n	35764 <net_if_send_data+0x12>

000357ba <net_if_need_calc_tx_checksum>:
   357ba:	2001      	movs	r0, #1
   357bc:	4770      	bx	lr

000357be <net_if_need_calc_rx_checksum>:
}
   357be:	2001      	movs	r0, #1
   357c0:	4770      	bx	lr

000357c2 <calc_chksum>:
{
   357c2:	b510      	push	{r4, lr}
	end = data + len - 1;
   357c4:	3a01      	subs	r2, #1
   357c6:	440a      	add	r2, r1
	while (data < end) {
   357c8:	4291      	cmp	r1, r2
   357ca:	d309      	bcc.n	357e0 <calc_chksum+0x1e>
	if (data == end) {
   357cc:	d107      	bne.n	357de <calc_chksum+0x1c>
		tmp = data[0] << 8;
   357ce:	780b      	ldrb	r3, [r1, #0]
   357d0:	021b      	lsls	r3, r3, #8
		sum += tmp;
   357d2:	4418      	add	r0, r3
   357d4:	b280      	uxth	r0, r0
		if (sum < tmp) {
   357d6:	4283      	cmp	r3, r0
			sum++;
   357d8:	bf84      	itt	hi
   357da:	3001      	addhi	r0, #1
   357dc:	b280      	uxthhi	r0, r0
}
   357de:	bd10      	pop	{r4, pc}
		tmp = (data[0] << 8) + data[1];
   357e0:	780c      	ldrb	r4, [r1, #0]
   357e2:	784b      	ldrb	r3, [r1, #1]
		data += 2;
   357e4:	3102      	adds	r1, #2
		tmp = (data[0] << 8) + data[1];
   357e6:	eb03 2304 	add.w	r3, r3, r4, lsl #8
   357ea:	b29b      	uxth	r3, r3
		sum += tmp;
   357ec:	4418      	add	r0, r3
   357ee:	b280      	uxth	r0, r0
		if (sum < tmp) {
   357f0:	4283      	cmp	r3, r0
			sum++;
   357f2:	bf84      	itt	hi
   357f4:	3001      	addhi	r0, #1
   357f6:	b280      	uxthhi	r0, r0
		data += 2;
   357f8:	e7e6      	b.n	357c8 <calc_chksum+0x6>

000357fa <net_calc_chksum>:
	return pkt->family;
   357fa:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
{
   357fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (IS_ENABLED(CONFIG_NET_IPV4) &&
   35802:	f3c3 0342 	ubfx	r3, r3, #1, #3
   35806:	2b01      	cmp	r3, #1
{
   35808:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_NET_IPV4) &&
   3580a:	d179      	bne.n	35900 <net_calc_chksum+0x106>
		if (proto != IPPROTO_ICMP) {
   3580c:	2901      	cmp	r1, #1
   3580e:	d050      	beq.n	358b2 <net_calc_chksum+0xb8>
	size_t bytes = 0;
   35810:	2200      	movs	r2, #0
			sum = net_pkt_get_len(pkt) -
   35812:	6903      	ldr	r3, [r0, #16]
	while (buf) {
   35814:	2b00      	cmp	r3, #0
   35816:	d148      	bne.n	358aa <net_calc_chksum+0xb0>
			len = 2 * sizeof(struct in_addr);
   35818:	f04f 0908 	mov.w	r9, #8
				net_pkt_ip_hdr_len(pkt) -
   3581c:	f894 503c 	ldrb.w	r5, [r4, #60]	; 0x3c
				net_pkt_ipv4_opts_len(pkt) + proto;
   35820:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
			sum = net_pkt_get_len(pkt) -
   35824:	441d      	add	r5, r3
   35826:	1b4d      	subs	r5, r1, r5
   35828:	4415      	add	r5, r2
   3582a:	b2ad      	uxth	r5, r5
	net_pkt_cursor_init(pkt);
   3582c:	4620      	mov	r0, r4
	backup->pos = pkt->cursor.pos;
   3582e:	e9d4 8705 	ldrd	r8, r7, [r4, #20]
   35832:	f000 faaa 	bl	35d8a <net_pkt_cursor_init>
	return pkt->overwrite;
   35836:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
	net_pkt_skip(pkt, net_pkt_ip_hdr_len(pkt) - len);
   3583a:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
   3583e:	f003 0601 	and.w	r6, r3, #1
	pkt->overwrite = overwrite;
   35842:	f043 0301 	orr.w	r3, r3, #1
   35846:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
   3584a:	eba1 0109 	sub.w	r1, r1, r9
   3584e:	4620      	mov	r0, r4
   35850:	f000 fb25 	bl	35e9e <net_pkt_skip>
	sum = calc_chksum(sum, pkt->cursor.pos, len);
   35854:	464a      	mov	r2, r9
   35856:	69a1      	ldr	r1, [r4, #24]
   35858:	4628      	mov	r0, r5
   3585a:	f7ff ffb2 	bl	357c2 <calc_chksum>
	net_pkt_skip(pkt, len + net_pkt_ip_opts_len(pkt));
   3585e:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
	sum = calc_chksum(sum, pkt->cursor.pos, len);
   35862:	4605      	mov	r5, r0
	net_pkt_skip(pkt, len + net_pkt_ip_opts_len(pkt));
   35864:	4449      	add	r1, r9
   35866:	4620      	mov	r0, r4
   35868:	f000 fb19 	bl	35e9e <net_pkt_skip>
	if (!cur->buf || !cur->pos) {
   3586c:	6962      	ldr	r2, [r4, #20]
   3586e:	b162      	cbz	r2, 3588a <net_calc_chksum+0x90>
   35870:	69a3      	ldr	r3, [r4, #24]
   35872:	b153      	cbz	r3, 3588a <net_calc_chksum+0x90>
	len = cur->buf->len - (cur->pos - cur->buf->data);
   35874:	f8b2 900c 	ldrh.w	r9, [r2, #12]
   35878:	6892      	ldr	r2, [r2, #8]
   3587a:	1a9b      	subs	r3, r3, r2
   3587c:	eba9 0903 	sub.w	r9, r9, r3
	while (cur->buf) {
   35880:	f8d4 a014 	ldr.w	sl, [r4, #20]
   35884:	f1ba 0f00 	cmp.w	sl, #0
   35888:	d116      	bne.n	358b8 <net_calc_chksum+0xbe>
	sum = (sum == 0U) ? 0xffff : htons(sum);
   3588a:	2d00      	cmp	r5, #0
   3588c:	d035      	beq.n	358fa <net_calc_chksum+0x100>
   3588e:	ba68      	rev16	r0, r5
   35890:	b280      	uxth	r0, r0
	return ~sum;
   35892:	43c0      	mvns	r0, r0
   35894:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
	pkt->cursor.pos = backup->pos;
   35898:	e9c4 8705 	strd	r8, r7, [r4, #20]
	pkt->overwrite = overwrite;
   3589c:	f366 0300 	bfi	r3, r6, #0, #1
   358a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
   358a4:	b280      	uxth	r0, r0
}
   358a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bytes += buf->len;
   358aa:	8998      	ldrh	r0, [r3, #12]
		buf = buf->frags;
   358ac:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   358ae:	4402      	add	r2, r0
		buf = buf->frags;
   358b0:	e7b0      	b.n	35814 <net_calc_chksum+0x1a>
	u16_t sum = 0U;
   358b2:	2500      	movs	r5, #0
	size_t len = 0U;
   358b4:	46a9      	mov	r9, r5
   358b6:	e7b9      	b.n	3582c <net_calc_chksum+0x32>
		sum = calc_chksum(sum, cur->pos, len);
   358b8:	4628      	mov	r0, r5
   358ba:	464a      	mov	r2, r9
   358bc:	69a1      	ldr	r1, [r4, #24]
   358be:	f7ff ff80 	bl	357c2 <calc_chksum>
		cur->buf = cur->buf->frags;
   358c2:	f8da 3000 	ldr.w	r3, [sl]
		sum = calc_chksum(sum, cur->pos, len);
   358c6:	4605      	mov	r5, r0
		cur->buf = cur->buf->frags;
   358c8:	6163      	str	r3, [r4, #20]
		if (!cur->buf || !cur->buf->len) {
   358ca:	2b00      	cmp	r3, #0
   358cc:	d0dd      	beq.n	3588a <net_calc_chksum+0x90>
   358ce:	899a      	ldrh	r2, [r3, #12]
   358d0:	2a00      	cmp	r2, #0
   358d2:	d0da      	beq.n	3588a <net_calc_chksum+0x90>
		cur->pos = cur->buf->data;
   358d4:	689b      	ldr	r3, [r3, #8]
		if (len % 2) {
   358d6:	f019 0f01 	tst.w	r9, #1
		cur->pos = cur->buf->data;
   358da:	61a3      	str	r3, [r4, #24]
		if (len % 2) {
   358dc:	d00b      	beq.n	358f6 <net_calc_chksum+0xfc>
			sum += *cur->pos;
   358de:	7819      	ldrb	r1, [r3, #0]
			cur->pos++;
   358e0:	3301      	adds	r3, #1
			sum += *cur->pos;
   358e2:	440d      	add	r5, r1
   358e4:	b2ad      	uxth	r5, r5
			if (sum < *cur->pos) {
   358e6:	42a9      	cmp	r1, r5
				sum++;
   358e8:	bf84      	itt	hi
   358ea:	3501      	addhi	r5, #1
   358ec:	b2ad      	uxthhi	r5, r5
			cur->pos++;
   358ee:	61a3      	str	r3, [r4, #24]
			len = cur->buf->len - 1;
   358f0:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   358f4:	e7c4      	b.n	35880 <net_calc_chksum+0x86>
			len = cur->buf->len;
   358f6:	4691      	mov	r9, r2
   358f8:	e7c2      	b.n	35880 <net_calc_chksum+0x86>
	sum = (sum == 0U) ? 0xffff : htons(sum);
   358fa:	f64f 70ff 	movw	r0, #65535	; 0xffff
   358fe:	e7c8      	b.n	35892 <net_calc_chksum+0x98>
		return 0;
   35900:	2000      	movs	r0, #0
   35902:	e7d0      	b.n	358a6 <net_calc_chksum+0xac>

00035904 <net_calc_chksum_ipv4>:
{
   35904:	b508      	push	{r3, lr}
			  net_pkt_ipv4_opts_len(pkt));
   35906:	f890 2043 	ldrb.w	r2, [r0, #67]	; 0x43
			  net_pkt_ip_hdr_len(pkt) +
   3590a:	f890 103c 	ldrb.w	r1, [r0, #60]	; 0x3c
	sum = calc_chksum(0, pkt->buffer->data,
   3590e:	6903      	ldr	r3, [r0, #16]
   35910:	440a      	add	r2, r1
   35912:	2000      	movs	r0, #0
   35914:	6899      	ldr	r1, [r3, #8]
   35916:	f7ff ff54 	bl	357c2 <calc_chksum>
	sum = (sum == 0U) ? 0xffff : htons(sum);
   3591a:	b120      	cbz	r0, 35926 <net_calc_chksum_ipv4+0x22>
   3591c:	ba40      	rev16	r0, r0
   3591e:	b280      	uxth	r0, r0
	return ~sum;
   35920:	43c0      	mvns	r0, r0
}
   35922:	b280      	uxth	r0, r0
   35924:	bd08      	pop	{r3, pc}
	sum = (sum == 0U) ? 0xffff : htons(sum);
   35926:	f64f 70ff 	movw	r0, #65535	; 0xffff
   3592a:	e7f9      	b.n	35920 <net_calc_chksum_ipv4+0x1c>

0003592c <net_ipv4_is_addr_mcast>:
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xE0000000) == 0xE0000000;
   3592c:	6800      	ldr	r0, [r0, #0]
   3592e:	ba00      	rev	r0, r0
   35930:	f000 4060 	and.w	r0, r0, #3758096384	; 0xe0000000
}
   35934:	f100 5300 	add.w	r3, r0, #536870912	; 0x20000000
   35938:	4258      	negs	r0, r3
   3593a:	4158      	adcs	r0, r3
   3593c:	4770      	bx	lr

0003593e <k_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   3593e:	f7f6 bf39 	b.w	2c7b4 <z_impl_k_mutex_unlock>

00035942 <context_write_data>:
{
   35942:	b570      	push	{r4, r5, r6, lr}
   35944:	4606      	mov	r6, r0
	if (msghdr) {
   35946:	461d      	mov	r5, r3
   35948:	b99b      	cbnz	r3, 35972 <context_write_data+0x30>
}
   3594a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ret = net_pkt_write(pkt, buf, buf_len);
   3594e:	f000 bbdf 	b.w	36110 <net_pkt_write>
			ret = net_pkt_write(pkt, msghdr->msg_iov[i].iov_base,
   35952:	68ab      	ldr	r3, [r5, #8]
   35954:	4630      	mov	r0, r6
   35956:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
   3595a:	6852      	ldr	r2, [r2, #4]
   3595c:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
   35960:	f000 fbd6 	bl	36110 <net_pkt_write>
			if (ret < 0) {
   35964:	2800      	cmp	r0, #0
   35966:	db03      	blt.n	35970 <context_write_data+0x2e>
		for (i = 0; i < msghdr->msg_iovlen; i++) {
   35968:	3401      	adds	r4, #1
   3596a:	68eb      	ldr	r3, [r5, #12]
   3596c:	42a3      	cmp	r3, r4
   3596e:	d8f0      	bhi.n	35952 <context_write_data+0x10>
}
   35970:	bd70      	pop	{r4, r5, r6, pc}
		for (i = 0; i < msghdr->msg_iovlen; i++) {
   35972:	2400      	movs	r4, #0
	int ret = 0;
   35974:	4620      	mov	r0, r4
   35976:	e7f8      	b.n	3596a <context_write_data+0x28>

00035978 <k_mutex_lock.constprop.28>:
	return z_impl_k_mutex_lock(mutex, timeout);
   35978:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   3597c:	f7f6 be3c 	b.w	2c5f8 <z_impl_k_mutex_lock>

00035980 <net_context_ref>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   35980:	1d03      	adds	r3, r0, #4
   35982:	e8d3 0fef 	ldaex	r0, [r3]
   35986:	1c42      	adds	r2, r0, #1
   35988:	e8c3 2fe1 	stlex	r1, r2, [r3]
   3598c:	2900      	cmp	r1, #0
   3598e:	d1f8      	bne.n	35982 <net_context_ref+0x2>
}
   35990:	3001      	adds	r0, #1
   35992:	4770      	bx	lr

00035994 <net_context_unref>:
{
   35994:	b538      	push	{r3, r4, r5, lr}
   35996:	4604      	mov	r4, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   35998:	1d03      	adds	r3, r0, #4
   3599a:	e8d3 0fef 	ldaex	r0, [r3]
   3599e:	1e42      	subs	r2, r0, #1
   359a0:	e8c3 2fe1 	stlex	r1, r2, [r3]
   359a4:	2900      	cmp	r1, #0
   359a6:	d1f8      	bne.n	3599a <net_context_unref+0x6>
	if (old_rc != 1) {
   359a8:	2801      	cmp	r0, #1
   359aa:	d001      	beq.n	359b0 <net_context_unref+0x1c>
		return old_rc - 1;
   359ac:	3801      	subs	r0, #1
}
   359ae:	bd38      	pop	{r3, r4, r5, pc}
	k_mutex_lock(&context->lock, K_FOREVER);
   359b0:	f104 0508 	add.w	r5, r4, #8
   359b4:	4628      	mov	r0, r5
   359b6:	f7ff ffdf 	bl	35978 <k_mutex_lock.constprop.28>
	net_tcp_unref(context);
   359ba:	4620      	mov	r0, r4
   359bc:	f7e8 ff54 	bl	1e868 <net_tcp_unref>
	if (context->conn_handler) {
   359c0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   359c2:	b118      	cbz	r0, 359cc <net_context_unref+0x38>
			net_conn_unregister(context->conn_handler);
   359c4:	f7e7 fe60 	bl	1d688 <net_conn_unregister>
		context->conn_handler = NULL;
   359c8:	2300      	movs	r3, #0
   359ca:	62e3      	str	r3, [r4, #44]	; 0x2c
	context->flags &= ~NET_CONTEXT_IN_USE;
   359cc:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
	k_mutex_unlock(&context->lock);
   359d0:	4628      	mov	r0, r5
	context->flags &= ~NET_CONTEXT_IN_USE;
   359d2:	f023 0307 	bic.w	r3, r3, #7
   359d6:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
	k_mutex_unlock(&context->lock);
   359da:	f7ff ffb0 	bl	3593e <k_mutex_unlock>
   359de:	2000      	movs	r0, #0
   359e0:	e7e5      	b.n	359ae <net_context_unref+0x1a>

000359e2 <bind_default>:
{
   359e2:	b513      	push	{r0, r1, r4, lr}
   359e4:	4604      	mov	r4, r0
	sa_family_t family = net_context_get_family(context);
   359e6:	f7e6 fe5d 	bl	1c6a4 <net_context_get_family>
	if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
   359ea:	2801      	cmp	r0, #1
   359ec:	d113      	bne.n	35a16 <bind_default+0x34>
		if (net_sin_ptr(&context->local)->sin_addr) {
   359ee:	6a23      	ldr	r3, [r4, #32]
   359f0:	b97b      	cbnz	r3, 35a12 <bind_default+0x30>
		addr4.sin_family = AF_INET;
   359f2:	f8ad 0000 	strh.w	r0, [sp]
			find_available_port(context,
   359f6:	4669      	mov	r1, sp
   359f8:	4620      	mov	r0, r4
		addr4.sin_addr.s_addr = INADDR_ANY;
   359fa:	9301      	str	r3, [sp, #4]
			find_available_port(context,
   359fc:	f7e6 fe92 	bl	1c724 <find_available_port>
		return net_context_bind(context, (struct sockaddr *)&addr4,
   35a00:	2208      	movs	r2, #8
		addr4.sin_port =
   35a02:	f8ad 0002 	strh.w	r0, [sp, #2]
		return net_context_bind(context, (struct sockaddr *)&addr4,
   35a06:	4669      	mov	r1, sp
   35a08:	4620      	mov	r0, r4
   35a0a:	f7e7 f823 	bl	1ca54 <net_context_bind>
}
   35a0e:	b002      	add	sp, #8
   35a10:	bd10      	pop	{r4, pc}
			return 0;
   35a12:	2000      	movs	r0, #0
   35a14:	e7fb      	b.n	35a0e <bind_default+0x2c>
	return -EINVAL;
   35a16:	f06f 0015 	mvn.w	r0, #21
   35a1a:	e7f8      	b.n	35a0e <bind_default+0x2c>

00035a1c <net_context_send>:
{
   35a1c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   35a20:	4604      	mov	r4, r0
	k_mutex_lock(&context->lock, K_FOREVER);
   35a22:	f100 0508 	add.w	r5, r0, #8
   35a26:	4628      	mov	r0, r5
{
   35a28:	4698      	mov	r8, r3
   35a2a:	460e      	mov	r6, r1
   35a2c:	4617      	mov	r7, r2
	k_mutex_lock(&context->lock, K_FOREVER);
   35a2e:	f7ff ffa3 	bl	35978 <k_mutex_lock.constprop.28>
	if (!(context->flags & NET_CONTEXT_REMOTE_ADDR_SET) ||
   35a32:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   35a36:	05db      	lsls	r3, r3, #23
   35a38:	d51d      	bpl.n	35a76 <net_context_send+0x5a>
   35a3a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   35a3c:	b1db      	cbz	r3, 35a76 <net_context_send+0x5a>
		   net_context_get_family(context) == AF_INET) {
   35a3e:	4620      	mov	r0, r4
   35a40:	f7e6 fe30 	bl	1c6a4 <net_context_get_family>
	ret = context_sendto(context, buf, len, &context->remote,
   35a44:	2200      	movs	r2, #0
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
   35a46:	2801      	cmp	r0, #1
		addrlen = 0;
   35a48:	bf0c      	ite	eq
   35a4a:	2308      	moveq	r3, #8
   35a4c:	2300      	movne	r3, #0
	ret = context_sendto(context, buf, len, &context->remote,
   35a4e:	9203      	str	r2, [sp, #12]
   35a50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   35a52:	9300      	str	r3, [sp, #0]
   35a54:	e9cd 8201 	strd	r8, r2, [sp, #4]
   35a58:	f104 0324 	add.w	r3, r4, #36	; 0x24
   35a5c:	4620      	mov	r0, r4
   35a5e:	463a      	mov	r2, r7
   35a60:	4631      	mov	r1, r6
   35a62:	f7e7 f8f9 	bl	1cc58 <context_sendto.isra.21>
   35a66:	4604      	mov	r4, r0
	k_mutex_unlock(&context->lock);
   35a68:	4628      	mov	r0, r5
   35a6a:	f7ff ff68 	bl	3593e <k_mutex_unlock>
}
   35a6e:	4620      	mov	r0, r4
   35a70:	b004      	add	sp, #16
   35a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = -EDESTADDRREQ;
   35a76:	f06f 0478 	mvn.w	r4, #120	; 0x78
   35a7a:	e7f5      	b.n	35a68 <net_context_send+0x4c>

00035a7c <net_context_sendmsg>:
{
   35a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
	k_mutex_lock(&context->lock, K_FOREVER);
   35a7e:	f100 0408 	add.w	r4, r0, #8
{
   35a82:	b085      	sub	sp, #20
   35a84:	4605      	mov	r5, r0
	k_mutex_lock(&context->lock, K_FOREVER);
   35a86:	4620      	mov	r0, r4
{
   35a88:	461f      	mov	r7, r3
   35a8a:	460e      	mov	r6, r1
	k_mutex_lock(&context->lock, K_FOREVER);
   35a8c:	f7ff ff74 	bl	35978 <k_mutex_lock.constprop.28>
	ret = context_sendto(context, msghdr, 0, NULL, 0,
   35a90:	2301      	movs	r3, #1
   35a92:	9303      	str	r3, [sp, #12]
   35a94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   35a96:	4631      	mov	r1, r6
   35a98:	e9cd 7301 	strd	r7, r3, [sp, #4]
   35a9c:	2300      	movs	r3, #0
   35a9e:	4628      	mov	r0, r5
   35aa0:	9300      	str	r3, [sp, #0]
   35aa2:	461a      	mov	r2, r3
   35aa4:	f7e7 f8d8 	bl	1cc58 <context_sendto.isra.21>
   35aa8:	4605      	mov	r5, r0
	k_mutex_unlock(&context->lock);
   35aaa:	4620      	mov	r0, r4
   35aac:	f7ff ff47 	bl	3593e <k_mutex_unlock>
}
   35ab0:	4628      	mov	r0, r5
   35ab2:	b005      	add	sp, #20
   35ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}

00035ab6 <net_context_sendto>:
{
   35ab6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	k_mutex_lock(&context->lock, K_FOREVER);
   35aba:	f100 0408 	add.w	r4, r0, #8
{
   35abe:	4605      	mov	r5, r0
	k_mutex_lock(&context->lock, K_FOREVER);
   35ac0:	4620      	mov	r0, r4
{
   35ac2:	4698      	mov	r8, r3
   35ac4:	460e      	mov	r6, r1
   35ac6:	4617      	mov	r7, r2
	k_mutex_lock(&context->lock, K_FOREVER);
   35ac8:	f7ff ff56 	bl	35978 <k_mutex_lock.constprop.28>
	ret = context_sendto(context, buf, len, dst_addr, addrlen,
   35acc:	2301      	movs	r3, #1
   35ace:	9303      	str	r3, [sp, #12]
   35ad0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   35ad2:	463a      	mov	r2, r7
   35ad4:	9302      	str	r3, [sp, #8]
   35ad6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   35ad8:	4631      	mov	r1, r6
   35ada:	9301      	str	r3, [sp, #4]
   35adc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   35ade:	4628      	mov	r0, r5
   35ae0:	9300      	str	r3, [sp, #0]
   35ae2:	4643      	mov	r3, r8
   35ae4:	f7e7 f8b8 	bl	1cc58 <context_sendto.isra.21>
   35ae8:	4605      	mov	r5, r0
	k_mutex_unlock(&context->lock);
   35aea:	4620      	mov	r0, r4
   35aec:	f7ff ff27 	bl	3593e <k_mutex_unlock>
}
   35af0:	4628      	mov	r0, r5
   35af2:	b004      	add	sp, #16
   35af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00035af8 <net_context_update_recv_wnd>:

int net_context_update_recv_wnd(struct net_context *context,
				s32_t delta)
{
   35af8:	b570      	push	{r4, r5, r6, lr}
   35afa:	4605      	mov	r5, r0
   35afc:	460e      	mov	r6, r1
	if (IS_ENABLED(CONFIG_NET_OFFLOAD) &&
		net_if_is_ip_offloaded(net_context_get_iface(context))) {
		return 0;
	}

	k_mutex_lock(&context->lock, K_FOREVER);
   35afe:	f100 0408 	add.w	r4, r0, #8
   35b02:	4620      	mov	r0, r4
   35b04:	f7ff ff38 	bl	35978 <k_mutex_lock.constprop.28>

	ret = net_tcp_update_recv_wnd(context, delta);
   35b08:	4631      	mov	r1, r6
   35b0a:	4628      	mov	r0, r5
   35b0c:	f001 fa54 	bl	36fb8 <net_tcp_update_recv_wnd>
   35b10:	4605      	mov	r5, r0

	k_mutex_unlock(&context->lock);
   35b12:	4620      	mov	r0, r4
   35b14:	f7ff ff13 	bl	3593e <k_mutex_unlock>

	return ret;
}
   35b18:	4628      	mov	r0, r5
   35b1a:	bd70      	pop	{r4, r5, r6, pc}

00035b1c <net_buf_frags_len>:
{
   35b1c:	4603      	mov	r3, r0
	size_t bytes = 0;
   35b1e:	2000      	movs	r0, #0
	while (buf) {
   35b20:	b903      	cbnz	r3, 35b24 <net_buf_frags_len+0x8>
	}

	return bytes;
}
   35b22:	4770      	bx	lr
		bytes += buf->len;
   35b24:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   35b26:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   35b28:	4410      	add	r0, r2
		buf = buf->frags;
   35b2a:	e7f9      	b.n	35b20 <net_buf_frags_len+0x4>

00035b2c <pkt_cursor_jump>:

static void pkt_cursor_jump(struct net_pkt *pkt, bool write)
{
	struct net_pkt_cursor *cursor = &pkt->cursor;

	cursor->buf = cursor->buf->frags;
   35b2c:	6943      	ldr	r3, [r0, #20]
	while (cursor->buf) {
		size_t len = write ? cursor->buf->size : cursor->buf->len;

		if (!len) {
			cursor->buf = cursor->buf->frags;
   35b2e:	681b      	ldr	r3, [r3, #0]
   35b30:	6143      	str	r3, [r0, #20]
	while (cursor->buf) {
   35b32:	6943      	ldr	r3, [r0, #20]
   35b34:	b90b      	cbnz	r3, 35b3a <pkt_cursor_jump+0xe>
	}

	if (cursor->buf) {
		cursor->pos = cursor->buf->data;
	} else {
		cursor->pos = NULL;
   35b36:	6183      	str	r3, [r0, #24]
	}
}
   35b38:	4770      	bx	lr
		size_t len = write ? cursor->buf->size : cursor->buf->len;
   35b3a:	b121      	cbz	r1, 35b46 <pkt_cursor_jump+0x1a>
   35b3c:	89da      	ldrh	r2, [r3, #14]
		if (!len) {
   35b3e:	2a00      	cmp	r2, #0
   35b40:	d0f5      	beq.n	35b2e <pkt_cursor_jump+0x2>
		cursor->pos = cursor->buf->data;
   35b42:	689b      	ldr	r3, [r3, #8]
   35b44:	e7f7      	b.n	35b36 <pkt_cursor_jump+0xa>
		size_t len = write ? cursor->buf->size : cursor->buf->len;
   35b46:	899a      	ldrh	r2, [r3, #12]
   35b48:	e7f9      	b.n	35b3e <pkt_cursor_jump+0x12>

00035b4a <pkt_cursor_advance>:
static void pkt_cursor_advance(struct net_pkt *pkt, bool write)
{
	struct net_pkt_cursor *cursor = &pkt->cursor;
	size_t len;

	if (!cursor->buf) {
   35b4a:	6943      	ldr	r3, [r0, #20]
{
   35b4c:	b410      	push	{r4}
	if (!cursor->buf) {
   35b4e:	b163      	cbz	r3, 35b6a <pkt_cursor_advance+0x20>
		return;
	}

	len = write ? cursor->buf->size : cursor->buf->len;
   35b50:	b149      	cbz	r1, 35b66 <pkt_cursor_advance+0x1c>
   35b52:	89dc      	ldrh	r4, [r3, #14]
	if ((cursor->pos - cursor->buf->data) == len) {
   35b54:	6982      	ldr	r2, [r0, #24]
   35b56:	689b      	ldr	r3, [r3, #8]
   35b58:	1ad2      	subs	r2, r2, r3
   35b5a:	42a2      	cmp	r2, r4
   35b5c:	d105      	bne.n	35b6a <pkt_cursor_advance+0x20>
		pkt_cursor_jump(pkt, write);
	}
}
   35b5e:	f85d 4b04 	ldr.w	r4, [sp], #4
		pkt_cursor_jump(pkt, write);
   35b62:	f7ff bfe3 	b.w	35b2c <pkt_cursor_jump>
	len = write ? cursor->buf->size : cursor->buf->len;
   35b66:	899c      	ldrh	r4, [r3, #12]
   35b68:	e7f4      	b.n	35b54 <pkt_cursor_advance+0xa>
}
   35b6a:	f85d 4b04 	ldr.w	r4, [sp], #4
   35b6e:	4770      	bx	lr

00035b70 <pkt_cursor_update>:
	return pkt->overwrite;
   35b70:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d

static void pkt_cursor_update(struct net_pkt *pkt,
			      size_t length, bool write)
{
   35b74:	b4f0      	push	{r4, r5, r6, r7}
	struct net_pkt_cursor *cursor = &pkt->cursor;
	size_t len;

	if (net_pkt_is_being_overwritten(pkt)) {
   35b76:	f013 0601 	ands.w	r6, r3, #1
   35b7a:	6945      	ldr	r5, [r0, #20]
   35b7c:	d10f      	bne.n	35b9e <pkt_cursor_update+0x2e>
		write = false;
	}

	len = write ? cursor->buf->size : cursor->buf->len;
   35b7e:	b172      	cbz	r2, 35b9e <pkt_cursor_update+0x2e>
   35b80:	89ef      	ldrh	r7, [r5, #14]
	if (length + (cursor->pos - cursor->buf->data) == len &&
   35b82:	6984      	ldr	r4, [r0, #24]
   35b84:	68ab      	ldr	r3, [r5, #8]
   35b86:	1ae3      	subs	r3, r4, r3
   35b88:	440b      	add	r3, r1
   35b8a:	42bb      	cmp	r3, r7
   35b8c:	d10a      	bne.n	35ba4 <pkt_cursor_update+0x34>
   35b8e:	b116      	cbz	r6, 35b96 <pkt_cursor_update+0x26>
	    !(net_pkt_is_being_overwritten(pkt) && len < cursor->buf->size)) {
   35b90:	89eb      	ldrh	r3, [r5, #14]
   35b92:	42bb      	cmp	r3, r7
   35b94:	d806      	bhi.n	35ba4 <pkt_cursor_update+0x34>
		pkt_cursor_jump(pkt, write);
	} else {
		cursor->pos += length;
	}
}
   35b96:	bcf0      	pop	{r4, r5, r6, r7}
		pkt_cursor_jump(pkt, write);
   35b98:	4611      	mov	r1, r2
   35b9a:	f7ff bfc7 	b.w	35b2c <pkt_cursor_jump>
	len = write ? cursor->buf->size : cursor->buf->len;
   35b9e:	89af      	ldrh	r7, [r5, #12]
   35ba0:	2200      	movs	r2, #0
   35ba2:	e7ee      	b.n	35b82 <pkt_cursor_update+0x12>
		cursor->pos += length;
   35ba4:	440c      	add	r4, r1
   35ba6:	6184      	str	r4, [r0, #24]
}
   35ba8:	bcf0      	pop	{r4, r5, r6, r7}
   35baa:	4770      	bx	lr

00035bac <pkt_estimate_headers_length.isra.19.part.20>:
		hdr_len += NET_IPV4H_LEN;
   35bac:	2801      	cmp	r0, #1
   35bae:	bf14      	ite	ne
   35bb0:	2000      	movne	r0, #0
   35bb2:	2014      	moveq	r0, #20
	if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   35bb4:	2906      	cmp	r1, #6
   35bb6:	d101      	bne.n	35bbc <pkt_estimate_headers_length.isra.19.part.20+0x10>
		hdr_len += NET_TCPH_LEN + NET_TCP_MAX_OPT_SIZE;
   35bb8:	301c      	adds	r0, #28
   35bba:	4770      	bx	lr
	} else if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   35bbc:	2911      	cmp	r1, #17
   35bbe:	d101      	bne.n	35bc4 <pkt_estimate_headers_length.isra.19.part.20+0x18>
		hdr_len += NET_UDPH_LEN;
   35bc0:	3008      	adds	r0, #8
   35bc2:	4770      	bx	lr
	} else if (proto == IPPROTO_ICMP || proto == IPPROTO_ICMPV6) {
   35bc4:	2901      	cmp	r1, #1
   35bc6:	d001      	beq.n	35bcc <pkt_estimate_headers_length.isra.19.part.20+0x20>
   35bc8:	293a      	cmp	r1, #58	; 0x3a
   35bca:	d100      	bne.n	35bce <pkt_estimate_headers_length.isra.19.part.20+0x22>
		hdr_len += NET_ICMPH_LEN;
   35bcc:	3004      	adds	r0, #4
}
   35bce:	4770      	bx	lr

00035bd0 <net_pkt_cursor_operate>:

/* Internal function that does all operation (skip/read/write/memset) */
static int net_pkt_cursor_operate(struct net_pkt *pkt,
				  void *data, size_t length,
				  bool copy, bool write)
{
   35bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   35bd4:	4606      	mov	r6, r0
   35bd6:	460f      	mov	r7, r1
   35bd8:	4615      	mov	r5, r2
   35bda:	4699      	mov	r9, r3
   35bdc:	f89d 8020 	ldrb.w	r8, [sp, #32]
	/* We use such variable to avoid lengthy lines */
	struct net_pkt_cursor *c_op = &pkt->cursor;

	while (c_op->buf && length) {
   35be0:	6973      	ldr	r3, [r6, #20]
   35be2:	2b00      	cmp	r3, #0
   35be4:	d051      	beq.n	35c8a <net_pkt_cursor_operate+0xba>
   35be6:	b90d      	cbnz	r5, 35bec <net_pkt_cursor_operate+0x1c>
	if (length) {
		NET_DBG("Still some length to go %zu", length);
		return -ENOBUFS;
	}

	return 0;
   35be8:	4628      	mov	r0, r5
   35bea:	e00d      	b.n	35c08 <net_pkt_cursor_operate+0x38>
   35bec:	f896 303d 	ldrb.w	r3, [r6, #61]	; 0x3d
		pkt_cursor_advance(pkt, net_pkt_is_being_overwritten(pkt) ?
   35bf0:	4630      	mov	r0, r6
   35bf2:	f013 0f01 	tst.w	r3, #1
   35bf6:	bf0c      	ite	eq
   35bf8:	4641      	moveq	r1, r8
   35bfa:	2100      	movne	r1, #0
   35bfc:	f7ff ffa5 	bl	35b4a <pkt_cursor_advance>
		if (c_op->buf == NULL) {
   35c00:	6973      	ldr	r3, [r6, #20]
   35c02:	b91b      	cbnz	r3, 35c0c <net_pkt_cursor_operate+0x3c>
		return -ENOBUFS;
   35c04:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   35c08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (write && !net_pkt_is_being_overwritten(pkt)) {
   35c0c:	69b0      	ldr	r0, [r6, #24]
   35c0e:	689c      	ldr	r4, [r3, #8]
   35c10:	1b04      	subs	r4, r0, r4
   35c12:	f1b8 0f00 	cmp.w	r8, #0
   35c16:	d02d      	beq.n	35c74 <net_pkt_cursor_operate+0xa4>
   35c18:	f896 203d 	ldrb.w	r2, [r6, #61]	; 0x3d
   35c1c:	07d2      	lsls	r2, r2, #31
   35c1e:	d429      	bmi.n	35c74 <net_pkt_cursor_operate+0xa4>
			d_len = c_op->buf->size - (c_op->pos - c_op->buf->data);
   35c20:	89db      	ldrh	r3, [r3, #14]
			d_len = c_op->buf->len - (c_op->pos - c_op->buf->data);
   35c22:	1b1c      	subs	r4, r3, r4
		if (!d_len) {
   35c24:	2c00      	cmp	r4, #0
   35c26:	d0ed      	beq.n	35c04 <net_pkt_cursor_operate+0x34>
		if (length < d_len) {
   35c28:	42ac      	cmp	r4, r5
   35c2a:	bf28      	it	cs
   35c2c:	462c      	movcs	r4, r5
		if (copy) {
   35c2e:	f1b9 0f00 	cmp.w	r9, #0
   35c32:	d023      	beq.n	35c7c <net_pkt_cursor_operate+0xac>
			memcpy(write ? c_op->pos : data,
   35c34:	f1b8 0f00 	cmp.w	r8, #0
   35c38:	d11e      	bne.n	35c78 <net_pkt_cursor_operate+0xa8>
   35c3a:	4601      	mov	r1, r0
   35c3c:	4638      	mov	r0, r7
   35c3e:	4622      	mov	r2, r4
   35c40:	f003 f9bf 	bl	38fc2 <memcpy>
		if (write && !net_pkt_is_being_overwritten(pkt)) {
   35c44:	f1b8 0f00 	cmp.w	r8, #0
   35c48:	d008      	beq.n	35c5c <net_pkt_cursor_operate+0x8c>
   35c4a:	f896 303d 	ldrb.w	r3, [r6, #61]	; 0x3d
   35c4e:	07db      	lsls	r3, r3, #31
   35c50:	d404      	bmi.n	35c5c <net_pkt_cursor_operate+0x8c>
			net_buf_add(c_op->buf, len);
   35c52:	6970      	ldr	r0, [r6, #20]
   35c54:	4621      	mov	r1, r4
   35c56:	3008      	adds	r0, #8
   35c58:	f7e6 f9b2 	bl	1bfc0 <net_buf_simple_add>
		pkt_cursor_update(pkt, len, write);
   35c5c:	4642      	mov	r2, r8
   35c5e:	4621      	mov	r1, r4
   35c60:	4630      	mov	r0, r6
   35c62:	f7ff ff85 	bl	35b70 <pkt_cursor_update>
		if (copy && data) {
   35c66:	f1b9 0f00 	cmp.w	r9, #0
   35c6a:	d001      	beq.n	35c70 <net_pkt_cursor_operate+0xa0>
   35c6c:	b107      	cbz	r7, 35c70 <net_pkt_cursor_operate+0xa0>
			data = (u8_t *) data + len;
   35c6e:	4427      	add	r7, r4
		length -= len;
   35c70:	1b2d      	subs	r5, r5, r4
   35c72:	e7b5      	b.n	35be0 <net_pkt_cursor_operate+0x10>
			d_len = c_op->buf->len - (c_op->pos - c_op->buf->data);
   35c74:	899b      	ldrh	r3, [r3, #12]
   35c76:	e7d4      	b.n	35c22 <net_pkt_cursor_operate+0x52>
   35c78:	4639      	mov	r1, r7
   35c7a:	e7e0      	b.n	35c3e <net_pkt_cursor_operate+0x6e>
		} else if (data) {
   35c7c:	2f00      	cmp	r7, #0
   35c7e:	d0e1      	beq.n	35c44 <net_pkt_cursor_operate+0x74>
__ssp_bos_icheck3(memset, void *, int)
   35c80:	4622      	mov	r2, r4
   35c82:	6839      	ldr	r1, [r7, #0]
   35c84:	f003 f9d7 	bl	39036 <memset>
   35c88:	e7dc      	b.n	35c44 <net_pkt_cursor_operate+0x74>
	if (length) {
   35c8a:	2d00      	cmp	r5, #0
   35c8c:	d0ac      	beq.n	35be8 <net_pkt_cursor_operate+0x18>
   35c8e:	e7b9      	b.n	35c04 <net_pkt_cursor_operate+0x34>

00035c90 <net_pkt_ref>:
{
   35c90:	b510      	push	{r4, lr}
		ref = pkt ? atomic_get(&pkt->atomic_ref) : 0;
   35c92:	f100 0324 	add.w	r3, r0, #36	; 0x24
   35c96:	b170      	cbz	r0, 35cb6 <net_pkt_ref+0x26>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   35c98:	e8d3 2faf 	lda	r2, [r3]
		if (!ref) {
   35c9c:	b15a      	cbz	r2, 35cb6 <net_pkt_ref+0x26>
	} while (!atomic_cas(&pkt->atomic_ref, ref, ref + 1));
   35c9e:	1c51      	adds	r1, r2, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   35ca0:	e8d3 4fef 	ldaex	r4, [r3]
   35ca4:	4294      	cmp	r4, r2
   35ca6:	d104      	bne.n	35cb2 <net_pkt_ref+0x22>
   35ca8:	e8c3 1fec 	stlex	ip, r1, [r3]
   35cac:	f1bc 0f00 	cmp.w	ip, #0
   35cb0:	d1f6      	bne.n	35ca0 <net_pkt_ref+0x10>
   35cb2:	d1f0      	bne.n	35c96 <net_pkt_ref+0x6>
}
   35cb4:	bd10      	pop	{r4, pc}
			return NULL;
   35cb6:	2000      	movs	r0, #0
   35cb8:	e7fc      	b.n	35cb4 <net_pkt_ref+0x24>

00035cba <net_pkt_frag_unref>:
	if (!frag) {
   35cba:	b108      	cbz	r0, 35cc0 <net_pkt_frag_unref+0x6>
	net_buf_unref(frag);
   35cbc:	f7e6 b8f0 	b.w	1bea0 <net_buf_unref>
}
   35cc0:	4770      	bx	lr

00035cc2 <net_pkt_unref>:
{
   35cc2:	b507      	push	{r0, r1, r2, lr}
   35cc4:	9001      	str	r0, [sp, #4]
	if (!pkt) {
   35cc6:	b1e8      	cbz	r0, 35d04 <net_pkt_unref+0x42>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   35cc8:	9b01      	ldr	r3, [sp, #4]
   35cca:	3324      	adds	r3, #36	; 0x24
   35ccc:	e8d3 3faf 	lda	r3, [r3]
		if (!ref) {
   35cd0:	b1c3      	cbz	r3, 35d04 <net_pkt_unref+0x42>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   35cd2:	9a01      	ldr	r2, [sp, #4]
	} while (!atomic_cas(&pkt->atomic_ref, ref, ref - 1));
   35cd4:	1e59      	subs	r1, r3, #1
   35cd6:	3224      	adds	r2, #36	; 0x24
   35cd8:	e8d2 0fef 	ldaex	r0, [r2]
   35cdc:	4298      	cmp	r0, r3
   35cde:	d104      	bne.n	35cea <net_pkt_unref+0x28>
   35ce0:	e8c2 1fec 	stlex	ip, r1, [r2]
   35ce4:	f1bc 0f00 	cmp.w	ip, #0
   35ce8:	d1f6      	bne.n	35cd8 <net_pkt_unref+0x16>
   35cea:	d1ed      	bne.n	35cc8 <net_pkt_unref+0x6>
	if (ref > 1) {
   35cec:	2b01      	cmp	r3, #1
   35cee:	dc09      	bgt.n	35d04 <net_pkt_unref+0x42>
	if (pkt->frags) {
   35cf0:	9b01      	ldr	r3, [sp, #4]
   35cf2:	6918      	ldr	r0, [r3, #16]
   35cf4:	b108      	cbz	r0, 35cfa <net_pkt_unref+0x38>
		net_pkt_frag_unref(pkt->frags);
   35cf6:	f7ff ffe0 	bl	35cba <net_pkt_frag_unref>
	k_mem_slab_free(pkt->slab, (void **)&pkt);
   35cfa:	9b01      	ldr	r3, [sp, #4]
   35cfc:	a901      	add	r1, sp, #4
   35cfe:	68d8      	ldr	r0, [r3, #12]
   35d00:	f7f6 fa82 	bl	2c208 <k_mem_slab_free>
}
   35d04:	b003      	add	sp, #12
   35d06:	f85d fb04 	ldr.w	pc, [sp], #4

00035d0a <net_pkt_available_buffer>:
{
   35d0a:	b508      	push	{r3, lr}
	if (!pkt) {
   35d0c:	b130      	cbz	r0, 35d1c <net_pkt_available_buffer+0x12>
	return pkt_get_size(pkt) - net_pkt_get_len(pkt);
   35d0e:	6900      	ldr	r0, [r0, #16]
	size_t size = 0;
   35d10:	2100      	movs	r1, #0
	struct net_buf *buf = pkt->buffer;
   35d12:	4603      	mov	r3, r0
	while (buf) {
   35d14:	b91b      	cbnz	r3, 35d1e <net_pkt_available_buffer+0x14>
	return net_buf_frags_len(pkt->frags);
   35d16:	f7ff ff01 	bl	35b1c <net_buf_frags_len>
	return pkt_get_size(pkt) - net_pkt_get_len(pkt);
   35d1a:	1a08      	subs	r0, r1, r0
}
   35d1c:	bd08      	pop	{r3, pc}
		size += buf->size;
   35d1e:	89da      	ldrh	r2, [r3, #14]
		buf = buf->frags;
   35d20:	681b      	ldr	r3, [r3, #0]
		size += buf->size;
   35d22:	4411      	add	r1, r2
		buf = buf->frags;
   35d24:	e7f6      	b.n	35d14 <net_pkt_available_buffer+0xa>

00035d26 <net_pkt_available_payload_buffer>:
{
   35d26:	b538      	push	{r3, r4, r5, lr}
	if (!pkt) {
   35d28:	4605      	mov	r5, r0
   35d2a:	b198      	cbz	r0, 35d54 <net_pkt_available_payload_buffer+0x2e>
	return pkt->family;
   35d2c:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
	hdr_len = pkt_estimate_headers_length(pkt, net_pkt_family(pkt), proto);
   35d30:	f3c3 0042 	ubfx	r0, r3, #1, #3
	if (family == AF_UNSPEC) {
   35d34:	b108      	cbz	r0, 35d3a <net_pkt_available_payload_buffer+0x14>
   35d36:	f7ff ff39 	bl	35bac <pkt_estimate_headers_length.isra.19.part.20>
		return  0;
   35d3a:	4604      	mov	r4, r0
	return net_buf_frags_len(pkt->frags);
   35d3c:	6928      	ldr	r0, [r5, #16]
   35d3e:	f7ff feed 	bl	35b1c <net_buf_frags_len>
	hdr_len = hdr_len <= len ? 0 : hdr_len - len;
   35d42:	42a0      	cmp	r0, r4
   35d44:	bf38      	it	cc
   35d46:	1a24      	subcc	r4, r4, r0
	len = net_pkt_available_buffer(pkt) - hdr_len;
   35d48:	4628      	mov	r0, r5
	hdr_len = hdr_len <= len ? 0 : hdr_len - len;
   35d4a:	bf28      	it	cs
   35d4c:	2400      	movcs	r4, #0
	len = net_pkt_available_buffer(pkt) - hdr_len;
   35d4e:	f7ff ffdc 	bl	35d0a <net_pkt_available_buffer>
   35d52:	1b00      	subs	r0, r0, r4
}
   35d54:	bd38      	pop	{r3, r4, r5, pc}

00035d56 <net_pkt_trim_buffer>:
{
   35d56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35d58:	4605      	mov	r5, r0
	buf = pkt->buffer;
   35d5a:	6900      	ldr	r0, [r0, #16]
			buf->frags = NULL;
   35d5c:	2700      	movs	r7, #0
	prev = buf;
   35d5e:	4604      	mov	r4, r0
	while (buf) {
   35d60:	b900      	cbnz	r0, 35d64 <net_pkt_trim_buffer+0xe>
}
   35d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!buf->len) {
   35d64:	8983      	ldrh	r3, [r0, #12]
		struct net_buf *next = buf->frags;
   35d66:	6806      	ldr	r6, [r0, #0]
		if (!buf->len) {
   35d68:	b93b      	cbnz	r3, 35d7a <net_pkt_trim_buffer+0x24>
			if (buf == pkt->buffer) {
   35d6a:	692b      	ldr	r3, [r5, #16]
   35d6c:	4283      	cmp	r3, r0
   35d6e:	d107      	bne.n	35d80 <net_pkt_trim_buffer+0x2a>
				pkt->buffer = next;
   35d70:	612e      	str	r6, [r5, #16]
			buf->frags = NULL;
   35d72:	6007      	str	r7, [r0, #0]
			net_buf_unref(buf);
   35d74:	f7e6 f894 	bl	1bea0 <net_buf_unref>
   35d78:	4620      	mov	r0, r4
   35d7a:	4604      	mov	r4, r0
   35d7c:	4630      	mov	r0, r6
   35d7e:	e7ef      	b.n	35d60 <net_pkt_trim_buffer+0xa>
			} else if (buf == prev->frags) {
   35d80:	6823      	ldr	r3, [r4, #0]
   35d82:	4283      	cmp	r3, r0
				prev->frags = next;
   35d84:	bf08      	it	eq
   35d86:	6026      	streq	r6, [r4, #0]
   35d88:	e7f3      	b.n	35d72 <net_pkt_trim_buffer+0x1c>

00035d8a <net_pkt_cursor_init>:
	pkt->cursor.buf = pkt->buffer;
   35d8a:	6903      	ldr	r3, [r0, #16]
   35d8c:	6143      	str	r3, [r0, #20]
	if (pkt->cursor.buf) {
   35d8e:	b103      	cbz	r3, 35d92 <net_pkt_cursor_init+0x8>
		pkt->cursor.pos = pkt->cursor.buf->data;
   35d90:	689b      	ldr	r3, [r3, #8]
   35d92:	6183      	str	r3, [r0, #24]
}
   35d94:	4770      	bx	lr

00035d96 <pkt_alloc>:
{
   35d96:	b537      	push	{r0, r1, r2, r4, r5, lr}
   35d98:	460d      	mov	r5, r1
   35d9a:	4604      	mov	r4, r0
	if (k_is_in_isr()) {
   35d9c:	f002 ffc6 	bl	38d2c <k_is_in_isr>
   35da0:	2800      	cmp	r0, #0
	ret = k_mem_slab_alloc(slab, (void **)&pkt, timeout);
   35da2:	a901      	add	r1, sp, #4
   35da4:	bf0c      	ite	eq
   35da6:	462a      	moveq	r2, r5
   35da8:	2200      	movne	r2, #0
   35daa:	4620      	mov	r0, r4
   35dac:	f7f6 f9c8 	bl	2c140 <k_mem_slab_alloc>
	if (ret) {
   35db0:	4601      	mov	r1, r0
   35db2:	b960      	cbnz	r0, 35dce <pkt_alloc+0x38>
   35db4:	2244      	movs	r2, #68	; 0x44
   35db6:	9801      	ldr	r0, [sp, #4]
   35db8:	f003 f93d 	bl	39036 <memset>
	pkt->atomic_ref = ATOMIC_INIT(1);
   35dbc:	2301      	movs	r3, #1
   35dbe:	9801      	ldr	r0, [sp, #4]
   35dc0:	6243      	str	r3, [r0, #36]	; 0x24
	pkt->slab = slab;
   35dc2:	60c4      	str	r4, [r0, #12]
	net_pkt_cursor_init(pkt);
   35dc4:	f7ff ffe1 	bl	35d8a <net_pkt_cursor_init>
	return pkt;
   35dc8:	9801      	ldr	r0, [sp, #4]
}
   35dca:	b003      	add	sp, #12
   35dcc:	bd30      	pop	{r4, r5, pc}
		return NULL;
   35dce:	2000      	movs	r0, #0
   35dd0:	e7fb      	b.n	35dca <pkt_alloc+0x34>

00035dd2 <pkt_alloc_on_iface>:
{
   35dd2:	b510      	push	{r4, lr}
   35dd4:	460c      	mov	r4, r1
	pkt = pkt_alloc(slab, timeout);
   35dd6:	4611      	mov	r1, r2
   35dd8:	f7ff ffdd 	bl	35d96 <pkt_alloc>
	if (pkt) {
   35ddc:	b148      	cbz	r0, 35df2 <pkt_alloc_on_iface+0x20>
	pkt->iface = iface;
   35dde:	6204      	str	r4, [r0, #32]
	if (iface) {
   35de0:	b13c      	cbz	r4, 35df2 <pkt_alloc_on_iface+0x20>
		pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
   35de2:	6823      	ldr	r3, [r4, #0]
   35de4:	7d5b      	ldrb	r3, [r3, #21]
   35de6:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
		pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
   35dea:	6823      	ldr	r3, [r4, #0]
   35dec:	7d5b      	ldrb	r3, [r3, #21]
   35dee:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
}
   35df2:	bd10      	pop	{r4, pc}

00035df4 <net_pkt_append_buffer>:
	if (!pkt->buffer) {
   35df4:	6903      	ldr	r3, [r0, #16]
{
   35df6:	b510      	push	{r4, lr}
   35df8:	4602      	mov	r2, r0
   35dfa:	460c      	mov	r4, r1
	if (!pkt->buffer) {
   35dfc:	b923      	cbnz	r3, 35e08 <net_pkt_append_buffer+0x14>
}
   35dfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pkt->buffer = buffer;
   35e02:	6111      	str	r1, [r2, #16]
		net_pkt_cursor_init(pkt);
   35e04:	f7ff bfc1 	b.w	35d8a <net_pkt_cursor_init>
		net_buf_frag_insert(net_buf_frag_last(pkt->buffer), buffer);
   35e08:	4618      	mov	r0, r3
   35e0a:	f7e6 f88f 	bl	1bf2c <net_buf_frag_last>
   35e0e:	4621      	mov	r1, r4
}
   35e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		net_buf_frag_insert(net_buf_frag_last(pkt->buffer), buffer);
   35e14:	f7e6 b8a6 	b.w	1bf64 <net_buf_frag_insert>

00035e18 <pkt_alloc_with_buffer>:
{
   35e18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35e1c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   35e1e:	4682      	mov	sl, r0
	u64_t end = z_timeout_end_calc(timeout);
   35e20:	4620      	mov	r0, r4
{
   35e22:	468b      	mov	fp, r1
   35e24:	4690      	mov	r8, r2
   35e26:	9301      	str	r3, [sp, #4]
	u64_t end = z_timeout_end_calc(timeout);
   35e28:	f002 ffff 	bl	38e2a <z_timeout_end_calc>
	pkt = pkt_alloc_on_iface(slab, iface, timeout);
   35e2c:	4622      	mov	r2, r4
	u64_t end = z_timeout_end_calc(timeout);
   35e2e:	4605      	mov	r5, r0
   35e30:	4689      	mov	r9, r1
	pkt = pkt_alloc_on_iface(slab, iface, timeout);
   35e32:	4650      	mov	r0, sl
   35e34:	4659      	mov	r1, fp
   35e36:	f7ff ffcc 	bl	35dd2 <pkt_alloc_on_iface>
	if (!pkt) {
   35e3a:	4682      	mov	sl, r0
   35e3c:	b358      	cbz	r0, 35e96 <pkt_alloc_with_buffer+0x7e>
	pkt->family = family;
   35e3e:	f890 203f 	ldrb.w	r2, [r0, #63]	; 0x3f
   35e42:	9b01      	ldr	r3, [sp, #4]
   35e44:	f363 0243 	bfi	r2, r3, #1, #3
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   35e48:	1c63      	adds	r3, r4, #1
   35e4a:	2b01      	cmp	r3, #1
   35e4c:	f880 203f 	strb.w	r2, [r0, #63]	; 0x3f
   35e50:	d914      	bls.n	35e7c <pkt_alloc_with_buffer+0x64>
		s64_t remaining = end - z_tick_get();
   35e52:	f7f8 ff49 	bl	2ece8 <z_tick_get>
   35e56:	1a2e      	subs	r6, r5, r0
   35e58:	eb69 0701 	sbc.w	r7, r9, r1
		if (remaining <= 0) {
   35e5c:	2e01      	cmp	r6, #1
   35e5e:	f177 0300 	sbcs.w	r3, r7, #0
			return (u32_t)((t * to_hz + off) / from_hz);
   35e62:	bfa3      	ittte	ge
   35e64:	f647 72ff 	movwge	r2, #32767	; 0x7fff
   35e68:	2300      	movge	r3, #0
   35e6a:	f44f 717a 	movge.w	r1, #1000	; 0x3e8
			timeout = K_NO_WAIT;
   35e6e:	2400      	movlt	r4, #0
   35e70:	bfa2      	ittt	ge
   35e72:	fbe1 2306 	umlalge	r2, r3, r1, r6
   35e76:	0bd4      	lsrge	r4, r2, #15
   35e78:	ea44 4443 	orrge.w	r4, r4, r3, lsl #17
	ret = net_pkt_alloc_buffer(pkt, size, proto, timeout);
   35e7c:	4623      	mov	r3, r4
   35e7e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   35e82:	4641      	mov	r1, r8
   35e84:	4650      	mov	r0, sl
   35e86:	f7e7 f9bd 	bl	1d204 <net_pkt_alloc_buffer>
	if (ret) {
   35e8a:	b120      	cbz	r0, 35e96 <pkt_alloc_with_buffer+0x7e>
		net_pkt_unref(pkt);
   35e8c:	4650      	mov	r0, sl
   35e8e:	f7ff ff18 	bl	35cc2 <net_pkt_unref>
		return NULL;
   35e92:	f04f 0a00 	mov.w	sl, #0
}
   35e96:	4650      	mov	r0, sl
   35e98:	b003      	add	sp, #12
   35e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00035e9e <net_pkt_skip>:

int net_pkt_skip(struct net_pkt *pkt, size_t skip)
{
	NET_DBG("pkt %p skip %zu", pkt, skip);

	return net_pkt_cursor_operate(pkt, NULL, skip, false, true);
   35e9e:	2301      	movs	r3, #1
{
   35ea0:	b507      	push	{r0, r1, r2, lr}
	return net_pkt_cursor_operate(pkt, NULL, skip, false, true);
   35ea2:	9300      	str	r3, [sp, #0]
   35ea4:	2300      	movs	r3, #0
   35ea6:	460a      	mov	r2, r1
   35ea8:	4619      	mov	r1, r3
   35eaa:	f7ff fe91 	bl	35bd0 <net_pkt_cursor_operate>
}
   35eae:	b003      	add	sp, #12
   35eb0:	f85d fb04 	ldr.w	pc, [sp], #4

00035eb4 <net_pkt_memset>:

int net_pkt_memset(struct net_pkt *pkt, int byte, size_t amount)
{
   35eb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	NET_DBG("pkt %p byte %d amount %zu", pkt, byte, amount);

	return net_pkt_cursor_operate(pkt, &byte, amount, false, true);
   35eb6:	2301      	movs	r3, #1
{
   35eb8:	9103      	str	r1, [sp, #12]
	return net_pkt_cursor_operate(pkt, &byte, amount, false, true);
   35eba:	9300      	str	r3, [sp, #0]
   35ebc:	a903      	add	r1, sp, #12
   35ebe:	2300      	movs	r3, #0
   35ec0:	f7ff fe86 	bl	35bd0 <net_pkt_cursor_operate>
}
   35ec4:	b005      	add	sp, #20
   35ec6:	f85d fb04 	ldr.w	pc, [sp], #4

00035eca <net_pkt_read>:

int net_pkt_read(struct net_pkt *pkt, void *data, size_t length)
{
	NET_DBG("pkt %p data %p length %zu", pkt, data, length);

	return net_pkt_cursor_operate(pkt, data, length, true, false);
   35eca:	2300      	movs	r3, #0
{
   35ecc:	b507      	push	{r0, r1, r2, lr}
	return net_pkt_cursor_operate(pkt, data, length, true, false);
   35ece:	9300      	str	r3, [sp, #0]
   35ed0:	2301      	movs	r3, #1
   35ed2:	f7ff fe7d 	bl	35bd0 <net_pkt_cursor_operate>
}
   35ed6:	b003      	add	sp, #12
   35ed8:	f85d fb04 	ldr.w	pc, [sp], #4

00035edc <net_pkt_read_be16>:

int net_pkt_read_be16(struct net_pkt *pkt, u16_t *data)
{
   35edc:	b513      	push	{r0, r1, r4, lr}
	u8_t d16[2];
	int ret;

	ret = net_pkt_read(pkt, d16, sizeof(u16_t));
   35ede:	2202      	movs	r2, #2
{
   35ee0:	460c      	mov	r4, r1
	ret = net_pkt_read(pkt, d16, sizeof(u16_t));
   35ee2:	a901      	add	r1, sp, #4
   35ee4:	f7ff fff1 	bl	35eca <net_pkt_read>

	*data = d16[0] << 8 | d16[1];
   35ee8:	f89d 2004 	ldrb.w	r2, [sp, #4]
   35eec:	f89d 3005 	ldrb.w	r3, [sp, #5]
   35ef0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   35ef4:	8023      	strh	r3, [r4, #0]

	return ret;
}
   35ef6:	b002      	add	sp, #8
   35ef8:	bd10      	pop	{r4, pc}

00035efa <net_pkt_copy>:
}

int net_pkt_copy(struct net_pkt *pkt_dst,
		 struct net_pkt *pkt_src,
		 size_t length)
{
   35efa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35efc:	4606      	mov	r6, r0
   35efe:	460f      	mov	r7, r1
   35f00:	4614      	mov	r4, r2
	struct net_pkt_cursor *c_dst = &pkt_dst->cursor;
	struct net_pkt_cursor *c_src = &pkt_src->cursor;

	while (c_dst->buf && c_src->buf && length) {
   35f02:	6973      	ldr	r3, [r6, #20]
   35f04:	2b00      	cmp	r3, #0
   35f06:	d041      	beq.n	35f8c <net_pkt_copy+0x92>
   35f08:	697b      	ldr	r3, [r7, #20]
   35f0a:	2b00      	cmp	r3, #0
   35f0c:	d03e      	beq.n	35f8c <net_pkt_copy+0x92>
   35f0e:	b90c      	cbnz	r4, 35f14 <net_pkt_copy+0x1a>
	if (length) {
		NET_DBG("Still some length to go %zu", length);
		return -ENOBUFS;
	}

	return 0;
   35f10:	4620      	mov	r0, r4
   35f12:	e021      	b.n	35f58 <net_pkt_copy+0x5e>
		pkt_cursor_advance(pkt_dst, true);
   35f14:	2101      	movs	r1, #1
   35f16:	4630      	mov	r0, r6
   35f18:	f7ff fe17 	bl	35b4a <pkt_cursor_advance>
		pkt_cursor_advance(pkt_src, false);
   35f1c:	2100      	movs	r1, #0
   35f1e:	4638      	mov	r0, r7
   35f20:	f7ff fe13 	bl	35b4a <pkt_cursor_advance>
		if (!c_dst->buf || !c_src->buf) {
   35f24:	6972      	ldr	r2, [r6, #20]
   35f26:	b1aa      	cbz	r2, 35f54 <net_pkt_copy+0x5a>
   35f28:	697b      	ldr	r3, [r7, #20]
   35f2a:	b19b      	cbz	r3, 35f54 <net_pkt_copy+0x5a>
		s_len = c_src->buf->len - (c_src->pos - c_src->buf->data);
   35f2c:	899d      	ldrh	r5, [r3, #12]
   35f2e:	69b9      	ldr	r1, [r7, #24]
   35f30:	689b      	ldr	r3, [r3, #8]
		d_len = c_dst->buf->size - (c_dst->pos - c_dst->buf->data);
   35f32:	69b0      	ldr	r0, [r6, #24]
		s_len = c_src->buf->len - (c_src->pos - c_src->buf->data);
   35f34:	1acb      	subs	r3, r1, r3
   35f36:	1aed      	subs	r5, r5, r3
		d_len = c_dst->buf->size - (c_dst->pos - c_dst->buf->data);
   35f38:	89d3      	ldrh	r3, [r2, #14]
   35f3a:	6892      	ldr	r2, [r2, #8]
		if (length < s_len && length < d_len) {
   35f3c:	42ac      	cmp	r4, r5
		d_len = c_dst->buf->size - (c_dst->pos - c_dst->buf->data);
   35f3e:	eba0 0202 	sub.w	r2, r0, r2
   35f42:	eba3 0302 	sub.w	r3, r3, r2
		if (length < s_len && length < d_len) {
   35f46:	d201      	bcs.n	35f4c <net_pkt_copy+0x52>
   35f48:	429c      	cmp	r4, r3
   35f4a:	d306      	bcc.n	35f5a <net_pkt_copy+0x60>
			if (d_len < s_len) {
   35f4c:	429d      	cmp	r5, r3
   35f4e:	bf28      	it	cs
   35f50:	461d      	movcs	r5, r3
		if (!len) {
   35f52:	b91d      	cbnz	r5, 35f5c <net_pkt_copy+0x62>
		return -ENOBUFS;
   35f54:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   35f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35f5a:	4625      	mov	r5, r4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   35f5c:	462a      	mov	r2, r5
   35f5e:	f003 f830 	bl	38fc2 <memcpy>
	return pkt->overwrite;
   35f62:	f896 303d 	ldrb.w	r3, [r6, #61]	; 0x3d
		if (!net_pkt_is_being_overwritten(pkt_dst)) {
   35f66:	07db      	lsls	r3, r3, #31
   35f68:	d404      	bmi.n	35f74 <net_pkt_copy+0x7a>
			net_buf_add(c_dst->buf, len);
   35f6a:	6970      	ldr	r0, [r6, #20]
   35f6c:	4629      	mov	r1, r5
   35f6e:	3008      	adds	r0, #8
   35f70:	f7e6 f826 	bl	1bfc0 <net_buf_simple_add>
		pkt_cursor_update(pkt_dst, len, true);
   35f74:	2201      	movs	r2, #1
   35f76:	4629      	mov	r1, r5
   35f78:	4630      	mov	r0, r6
   35f7a:	f7ff fdf9 	bl	35b70 <pkt_cursor_update>
		pkt_cursor_update(pkt_src, len, false);
   35f7e:	2200      	movs	r2, #0
   35f80:	4629      	mov	r1, r5
   35f82:	4638      	mov	r0, r7
   35f84:	f7ff fdf4 	bl	35b70 <pkt_cursor_update>
		length -= len;
   35f88:	1b64      	subs	r4, r4, r5
   35f8a:	e7ba      	b.n	35f02 <net_pkt_copy+0x8>
	if (length) {
   35f8c:	2c00      	cmp	r4, #0
   35f8e:	d0bf      	beq.n	35f10 <net_pkt_copy+0x16>
   35f90:	e7e0      	b.n	35f54 <net_pkt_copy+0x5a>

00035f92 <net_pkt_remaining_data>:
size_t net_pkt_remaining_data(struct net_pkt *pkt)
{
	struct net_buf *buf;
	size_t data_length;

	if (!pkt || !pkt->cursor.buf || !pkt->cursor.pos) {
   35f92:	b170      	cbz	r0, 35fb2 <net_pkt_remaining_data+0x20>
   35f94:	6943      	ldr	r3, [r0, #20]
   35f96:	b15b      	cbz	r3, 35fb0 <net_pkt_remaining_data+0x1e>
   35f98:	6980      	ldr	r0, [r0, #24]
   35f9a:	b150      	cbz	r0, 35fb2 <net_pkt_remaining_data+0x20>
		return 0;
	}

	buf = pkt->cursor.buf;
	data_length = buf->len - (pkt->cursor.pos - buf->data);
   35f9c:	6899      	ldr	r1, [r3, #8]
   35f9e:	899a      	ldrh	r2, [r3, #12]
   35fa0:	1a40      	subs	r0, r0, r1
   35fa2:	1a10      	subs	r0, r2, r0

	buf = buf->frags;
	while (buf) {
		data_length += buf->len;
		buf = buf->frags;
   35fa4:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   35fa6:	b903      	cbnz	r3, 35faa <net_pkt_remaining_data+0x18>
   35fa8:	4770      	bx	lr
		data_length += buf->len;
   35faa:	899a      	ldrh	r2, [r3, #12]
   35fac:	4410      	add	r0, r2
   35fae:	e7f9      	b.n	35fa4 <net_pkt_remaining_data+0x12>
		return 0;
   35fb0:	4618      	mov	r0, r3
	}

	return data_length;
}
   35fb2:	4770      	bx	lr

00035fb4 <net_pkt_update_length>:

int net_pkt_update_length(struct net_pkt *pkt, size_t length)
{
	struct net_buf *buf;

	for (buf = pkt->buffer; buf; buf = buf->frags) {
   35fb4:	6903      	ldr	r3, [r0, #16]
   35fb6:	b92b      	cbnz	r3, 35fc4 <net_pkt_update_length+0x10>
			buf->len = length;
			length = 0;
		}
	}

	return !length ? 0 : -EINVAL;
   35fb8:	2900      	cmp	r1, #0
}
   35fba:	bf14      	ite	ne
   35fbc:	f06f 0015 	mvnne.w	r0, #21
   35fc0:	2000      	moveq	r0, #0
   35fc2:	4770      	bx	lr
		if (buf->len < length) {
   35fc4:	899a      	ldrh	r2, [r3, #12]
   35fc6:	428a      	cmp	r2, r1
			buf->len = length;
   35fc8:	bf2a      	itet	cs
   35fca:	8199      	strhcs	r1, [r3, #12]
			length -= buf->len;
   35fcc:	1a89      	subcc	r1, r1, r2
			length = 0;
   35fce:	2100      	movcs	r1, #0
	for (buf = pkt->buffer; buf; buf = buf->frags) {
   35fd0:	681b      	ldr	r3, [r3, #0]
   35fd2:	e7f0      	b.n	35fb6 <net_pkt_update_length+0x2>

00035fd4 <net_pkt_get_current_offset>:
u16_t net_pkt_get_current_offset(struct net_pkt *pkt)
{
	struct net_buf *buf = pkt->buffer;
	u16_t offset;

	if (!pkt->cursor.buf || !pkt->cursor.pos) {
   35fd4:	6941      	ldr	r1, [r0, #20]
{
   35fd6:	b510      	push	{r4, lr}
	if (!pkt->cursor.buf || !pkt->cursor.pos) {
   35fd8:	b179      	cbz	r1, 35ffa <net_pkt_get_current_offset+0x26>
   35fda:	6983      	ldr	r3, [r0, #24]
   35fdc:	b17b      	cbz	r3, 35ffe <net_pkt_get_current_offset+0x2a>
		return 0;
	}

	offset = 0U;
   35fde:	2200      	movs	r2, #0
	struct net_buf *buf = pkt->buffer;
   35fe0:	6904      	ldr	r4, [r0, #16]

	while (buf != pkt->cursor.buf) {
   35fe2:	42a1      	cmp	r1, r4
   35fe4:	d104      	bne.n	35ff0 <net_pkt_get_current_offset+0x1c>
		offset += buf->len;
		buf = buf->frags;
	}

	offset += pkt->cursor.pos - buf->data;
   35fe6:	6888      	ldr	r0, [r1, #8]
   35fe8:	1a1b      	subs	r3, r3, r0
   35fea:	4413      	add	r3, r2
   35fec:	b298      	uxth	r0, r3

	return offset;
}
   35fee:	bd10      	pop	{r4, pc}
		offset += buf->len;
   35ff0:	89a0      	ldrh	r0, [r4, #12]
		buf = buf->frags;
   35ff2:	6824      	ldr	r4, [r4, #0]
		offset += buf->len;
   35ff4:	4402      	add	r2, r0
   35ff6:	b292      	uxth	r2, r2
		buf = buf->frags;
   35ff8:	e7f3      	b.n	35fe2 <net_pkt_get_current_offset+0xe>
		return 0;
   35ffa:	4608      	mov	r0, r1
   35ffc:	e7f7      	b.n	35fee <net_pkt_get_current_offset+0x1a>
   35ffe:	4618      	mov	r0, r3
   36000:	e7f5      	b.n	35fee <net_pkt_get_current_offset+0x1a>

00036002 <net_pkt_clone>:
{
   36002:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   36006:	460c      	mov	r4, r1
   36008:	4605      	mov	r5, r0
	size_t cursor_offset = net_pkt_get_current_offset(pkt);
   3600a:	f7ff ffe3 	bl	35fd4 <net_pkt_get_current_offset>
   3600e:	4680      	mov	r8, r0
	return net_buf_frags_len(pkt->frags);
   36010:	6928      	ldr	r0, [r5, #16]
   36012:	f7ff fd83 	bl	35b1c <net_buf_frags_len>
	clone_pkt = net_pkt_alloc_with_buffer(net_pkt_iface(pkt),
   36016:	2300      	movs	r3, #0
   36018:	9400      	str	r4, [sp, #0]
   3601a:	4601      	mov	r1, r0
   3601c:	461a      	mov	r2, r3
   3601e:	6a28      	ldr	r0, [r5, #32]
   36020:	f7e7 f9b2 	bl	1d388 <net_pkt_alloc_with_buffer>
	if (!clone_pkt) {
   36024:	4604      	mov	r4, r0
   36026:	b198      	cbz	r0, 36050 <net_pkt_clone+0x4e>
	backup->pos = pkt->cursor.pos;
   36028:	e9d5 7605 	ldrd	r7, r6, [r5, #20]
	net_pkt_cursor_init(pkt);
   3602c:	4628      	mov	r0, r5
   3602e:	f7ff feac 	bl	35d8a <net_pkt_cursor_init>
	return net_buf_frags_len(pkt->frags);
   36032:	6928      	ldr	r0, [r5, #16]
   36034:	f7ff fd72 	bl	35b1c <net_buf_frags_len>
	if (net_pkt_copy(clone_pkt, pkt, net_pkt_get_len(pkt))) {
   36038:	4629      	mov	r1, r5
   3603a:	4602      	mov	r2, r0
   3603c:	4620      	mov	r0, r4
   3603e:	f7ff ff5c 	bl	35efa <net_pkt_copy>
   36042:	b148      	cbz	r0, 36058 <net_pkt_clone+0x56>
		net_pkt_unref(clone_pkt);
   36044:	4620      	mov	r0, r4
		return NULL;
   36046:	2400      	movs	r4, #0
		net_pkt_unref(clone_pkt);
   36048:	f7ff fe3b 	bl	35cc2 <net_pkt_unref>
	pkt->cursor.pos = backup->pos;
   3604c:	e9c5 7605 	strd	r7, r6, [r5, #20]
}
   36050:	4620      	mov	r0, r4
   36052:	b002      	add	sp, #8
   36054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (clone_pkt->buffer) {
   36058:	6923      	ldr	r3, [r4, #16]
   3605a:	b15b      	cbz	r3, 36074 <net_pkt_clone+0x72>
   3605c:	462a      	mov	r2, r5
   3605e:	f852 3f28 	ldr.w	r3, [r2, #40]!
   36062:	62a3      	str	r3, [r4, #40]	; 0x28
   36064:	6853      	ldr	r3, [r2, #4]
   36066:	462a      	mov	r2, r5
   36068:	62e3      	str	r3, [r4, #44]	; 0x2c
   3606a:	f852 3f30 	ldr.w	r3, [r2, #48]!
   3606e:	6323      	str	r3, [r4, #48]	; 0x30
   36070:	6853      	ldr	r3, [r2, #4]
   36072:	6363      	str	r3, [r4, #52]	; 0x34
	return pkt->family;
   36074:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
	pkt->family = family;
   36078:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
	return pkt->family;
   3607c:	f3c3 0342 	ubfx	r3, r3, #1, #3
	pkt->family = family;
   36080:	f363 0243 	bfi	r2, r3, #1, #3
   36084:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
	net_pkt_set_context(clone_pkt, net_pkt_context(pkt));
   36088:	69eb      	ldr	r3, [r5, #28]
	net_pkt_cursor_init(clone_pkt);
   3608a:	4620      	mov	r0, r4
	pkt->context = ctx;
   3608c:	61e3      	str	r3, [r4, #28]
	net_pkt_set_ip_hdr_len(clone_pkt, net_pkt_ip_hdr_len(pkt));
   3608e:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
	pkt->ip_hdr_len = len;
   36092:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	return pkt->family;
   36096:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
	if (IS_ENABLED(CONFIG_NET_IPV4) && net_pkt_family(pkt) == AF_INET) {
   3609a:	f3c3 0342 	ubfx	r3, r3, #1, #3
   3609e:	2b01      	cmp	r3, #1
		net_pkt_set_ipv4_ttl(clone_pkt, net_pkt_ipv4_ttl(pkt));
   360a0:	bf01      	itttt	eq
   360a2:	f895 3042 	ldrbeq.w	r3, [r5, #66]	; 0x42
	pkt->ipv4_ttl = ttl;
   360a6:	f884 3042 	strbeq.w	r3, [r4, #66]	; 0x42
		net_pkt_set_ipv4_opts_len(clone_pkt,
   360aa:	f895 3043 	ldrbeq.w	r3, [r5, #67]	; 0x43
	pkt->ipv4_opts_len = opts_len;
   360ae:	f884 3043 	strbeq.w	r3, [r4, #67]	; 0x43
	net_pkt_cursor_init(clone_pkt);
   360b2:	f7ff fe6a 	bl	35d8a <net_pkt_cursor_init>
	if (cursor_offset) {
   360b6:	f1b8 0f00 	cmp.w	r8, #0
   360ba:	d008      	beq.n	360ce <net_pkt_clone+0xcc>
	pkt->overwrite = overwrite;
   360bc:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
		net_pkt_skip(clone_pkt, cursor_offset);
   360c0:	4641      	mov	r1, r8
   360c2:	f043 0301 	orr.w	r3, r3, #1
   360c6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
   360ca:	f7ff fee8 	bl	35e9e <net_pkt_skip>
	pkt->cursor.pos = backup->pos;
   360ce:	e9c5 7605 	strd	r7, r6, [r5, #20]
	return clone_pkt;
   360d2:	e7bd      	b.n	36050 <net_pkt_clone+0x4e>

000360d4 <net_pkt_is_contiguous>:

bool net_pkt_is_contiguous(struct net_pkt *pkt, size_t size)
{
   360d4:	b538      	push	{r3, r4, r5, lr}
   360d6:	460d      	mov	r5, r1
	return pkt->overwrite;
   360d8:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
   360dc:	4604      	mov	r4, r0
	pkt_cursor_advance(pkt, !net_pkt_is_being_overwritten(pkt));
   360de:	43c9      	mvns	r1, r1
   360e0:	f001 0101 	and.w	r1, r1, #1
   360e4:	f7ff fd31 	bl	35b4a <pkt_cursor_advance>

	if (pkt->cursor.buf && pkt->cursor.pos) {
   360e8:	6943      	ldr	r3, [r0, #20]
   360ea:	b17b      	cbz	r3, 3610c <net_pkt_is_contiguous+0x38>
   360ec:	6980      	ldr	r0, [r0, #24]
   360ee:	b160      	cbz	r0, 3610a <net_pkt_is_contiguous+0x36>
   360f0:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
		size_t len;

		len = net_pkt_is_being_overwritten(pkt) ?
			pkt->cursor.buf->len : pkt->cursor.buf->size;
   360f4:	07d2      	lsls	r2, r2, #31
   360f6:	bf4c      	ite	mi
   360f8:	899a      	ldrhmi	r2, [r3, #12]
   360fa:	89da      	ldrhpl	r2, [r3, #14]
		len -= pkt->cursor.pos - pkt->cursor.buf->data;
   360fc:	689b      	ldr	r3, [r3, #8]
   360fe:	1ac0      	subs	r0, r0, r3
   36100:	1a10      	subs	r0, r2, r0
		if (len >= size) {
   36102:	42a8      	cmp	r0, r5
   36104:	bf34      	ite	cc
   36106:	2000      	movcc	r0, #0
   36108:	2001      	movcs	r0, #1
			return true;
		}
	}

	return false;
}
   3610a:	bd38      	pop	{r3, r4, r5, pc}
	return false;
   3610c:	4618      	mov	r0, r3
   3610e:	e7fc      	b.n	3610a <net_pkt_is_contiguous+0x36>

00036110 <net_pkt_write>:
	if (data == pkt->cursor.pos && net_pkt_is_contiguous(pkt, length)) {
   36110:	6983      	ldr	r3, [r0, #24]
{
   36112:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (data == pkt->cursor.pos && net_pkt_is_contiguous(pkt, length)) {
   36114:	4299      	cmp	r1, r3
{
   36116:	4604      	mov	r4, r0
   36118:	460e      	mov	r6, r1
   3611a:	4615      	mov	r5, r2
	if (data == pkt->cursor.pos && net_pkt_is_contiguous(pkt, length)) {
   3611c:	d10a      	bne.n	36134 <net_pkt_write+0x24>
   3611e:	4611      	mov	r1, r2
   36120:	f7ff ffd8 	bl	360d4 <net_pkt_is_contiguous>
   36124:	b130      	cbz	r0, 36134 <net_pkt_write+0x24>
		return net_pkt_skip(pkt, length);
   36126:	4629      	mov	r1, r5
   36128:	4620      	mov	r0, r4
}
   3612a:	b002      	add	sp, #8
   3612c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return net_pkt_skip(pkt, length);
   36130:	f7ff beb5 	b.w	35e9e <net_pkt_skip>
	return net_pkt_cursor_operate(pkt, (void *)data, length, true, true);
   36134:	2301      	movs	r3, #1
   36136:	462a      	mov	r2, r5
   36138:	9300      	str	r3, [sp, #0]
   3613a:	4631      	mov	r1, r6
   3613c:	4620      	mov	r0, r4
   3613e:	f7ff fd47 	bl	35bd0 <net_pkt_cursor_operate>
}
   36142:	b002      	add	sp, #8
   36144:	bd70      	pop	{r4, r5, r6, pc}

00036146 <net_pkt_get_data>:

void *net_pkt_get_data(struct net_pkt *pkt,
		       struct net_pkt_data_access *access)
{
   36146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3614a:	460d      	mov	r5, r1
			return NULL;
		}

		return pkt->cursor.pos;
	} else {
		if (net_pkt_is_contiguous(pkt, access->size)) {
   3614c:	6849      	ldr	r1, [r1, #4]
{
   3614e:	4604      	mov	r4, r0
		if (net_pkt_is_contiguous(pkt, access->size)) {
   36150:	f7ff ffc0 	bl	360d4 <net_pkt_is_contiguous>
   36154:	4680      	mov	r8, r0
   36156:	b118      	cbz	r0, 36160 <net_pkt_get_data+0x1a>
			access->data = pkt->cursor.pos;
   36158:	69a3      	ldr	r3, [r4, #24]
   3615a:	602b      	str	r3, [r5, #0]
			}

			net_pkt_cursor_restore(pkt, &backup);
		}

		return access->data;
   3615c:	6829      	ldr	r1, [r5, #0]
   3615e:	e010      	b.n	36182 <net_pkt_get_data+0x3c>
   36160:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
		} else if (net_pkt_is_being_overwritten(pkt)) {
   36164:	07db      	lsls	r3, r3, #31
   36166:	d5f9      	bpl.n	3615c <net_pkt_get_data+0x16>
   36168:	6829      	ldr	r1, [r5, #0]
			if (!access->data) {
   3616a:	b151      	cbz	r1, 36182 <net_pkt_get_data+0x3c>
	backup->pos = pkt->cursor.pos;
   3616c:	e9d4 7605 	ldrd	r7, r6, [r4, #20]
			if (net_pkt_read(pkt, access->data, access->size)) {
   36170:	686a      	ldr	r2, [r5, #4]
   36172:	4620      	mov	r0, r4
   36174:	f7ff fea9 	bl	35eca <net_pkt_read>
	pkt->cursor.pos = backup->pos;
   36178:	e9c4 7605 	strd	r7, r6, [r4, #20]
   3617c:	2800      	cmp	r0, #0
   3617e:	d0ed      	beq.n	3615c <net_pkt_get_data+0x16>
				return NULL;
   36180:	4641      	mov	r1, r8
	}

	return NULL;
}
   36182:	4608      	mov	r0, r1
   36184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00036188 <net_pkt_set_data>:
{
	if (IS_ENABLED(CONFIG_NET_HEADERS_ALWAYS_CONTIGUOUS)) {
		return net_pkt_skip(pkt, access->size);
	}

	return net_pkt_write(pkt, access->data, access->size);
   36188:	e9d1 1200 	ldrd	r1, r2, [r1]
   3618c:	f7ff bfc0 	b.w	36110 <net_pkt_write>

00036190 <net_pkt_init>:
		(size_t)(k_mem_slab_num_free_get(&tx_pkts) *
			 sizeof(struct net_pkt)),
		get_frees(&rx_bufs), get_size(&rx_bufs),
		get_frees(&tx_bufs), get_size(&tx_bufs));
#endif
}
   36190:	4770      	bx	lr

00036192 <k_work_submit_to_queue>:
{
   36192:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   36194:	f101 0308 	add.w	r3, r1, #8
   36198:	e8d3 2fef 	ldaex	r2, [r3]
   3619c:	f042 0c01 	orr.w	ip, r2, #1
   361a0:	e8c3 cfee 	stlex	lr, ip, [r3]
   361a4:	f1be 0f00 	cmp.w	lr, #0
   361a8:	d1f6      	bne.n	36198 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   361aa:	07d3      	lsls	r3, r2, #31
   361ac:	d403      	bmi.n	361b6 <k_work_submit_to_queue+0x24>
}
   361ae:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   361b2:	f002 bd6c 	b.w	38c8e <k_queue_append>
}
   361b6:	f85d fb04 	ldr.w	pc, [sp], #4

000361ba <icmpv4_create>:
{
   361ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
   361bc:	2304      	movs	r3, #4
   361be:	2400      	movs	r4, #0
{
   361c0:	460f      	mov	r7, r1
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmpv4_access);
   361c2:	4669      	mov	r1, sp
{
   361c4:	4605      	mov	r5, r0
   361c6:	4616      	mov	r6, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
   361c8:	e9cd 4300 	strd	r4, r3, [sp]
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmpv4_access);
   361cc:	f7ff ffbb 	bl	36146 <net_pkt_get_data>
	if (!icmp_hdr) {
   361d0:	b148      	cbz	r0, 361e6 <icmpv4_create+0x2c>
	icmp_hdr->type   = icmp_type;
   361d2:	7007      	strb	r7, [r0, #0]
	icmp_hdr->code   = icmp_code;
   361d4:	7046      	strb	r6, [r0, #1]
	icmp_hdr->chksum = 0U;
   361d6:	7084      	strb	r4, [r0, #2]
   361d8:	70c4      	strb	r4, [r0, #3]
	return net_pkt_set_data(pkt, &icmpv4_access);
   361da:	4669      	mov	r1, sp
   361dc:	4628      	mov	r0, r5
   361de:	f7ff ffd3 	bl	36188 <net_pkt_set_data>
}
   361e2:	b003      	add	sp, #12
   361e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
   361e6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   361ea:	e7fa      	b.n	361e2 <icmpv4_create+0x28>

000361ec <icmpv4_handle_echo_request>:
	return UNALIGNED_GET(&addr->s_addr) == 0;
   361ec:	68cb      	ldr	r3, [r1, #12]
{
   361ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   361f0:	4606      	mov	r6, r0
   361f2:	460f      	mov	r7, r1
	if (net_ipv4_is_addr_unspecified(&ip_hdr->src)) {
   361f4:	b90b      	cbnz	r3, 361fa <icmpv4_handle_echo_request+0xe>
	return NET_DROP;
   361f6:	2002      	movs	r0, #2
   361f8:	e04b      	b.n	36292 <icmpv4_handle_echo_request+0xa6>
	size_t bytes = 0;
   361fa:	2200      	movs	r2, #0
	payload_len = net_pkt_get_len(pkt) -
   361fc:	6903      	ldr	r3, [r0, #16]
	while (buf) {
   361fe:	2b00      	cmp	r3, #0
   36200:	d149      	bne.n	36296 <icmpv4_handle_echo_request+0xaa>
		      net_pkt_ipv4_opts_len(pkt) - NET_ICMPH_LEN;
   36202:	f896 1043 	ldrb.w	r1, [r6, #67]	; 0x43
		      net_pkt_ip_hdr_len(pkt) -
   36206:	f896 403c 	ldrb.w	r4, [r6, #60]	; 0x3c
		      net_pkt_ipv4_opts_len(pkt) - NET_ICMPH_LEN;
   3620a:	440c      	add	r4, r1
   3620c:	f5c4 447f 	rsb	r4, r4, #65280	; 0xff00
   36210:	34fc      	adds	r4, #252	; 0xfc
   36212:	4414      	add	r4, r2
	payload_len = net_pkt_get_len(pkt) -
   36214:	b224      	sxth	r4, r4
	if (payload_len < NET_ICMPV4_UNUSED_LEN) {
   36216:	2c03      	cmp	r4, #3
   36218:	dded      	ble.n	361f6 <icmpv4_handle_echo_request+0xa>
	reply = net_pkt_alloc_with_buffer(net_pkt_iface(pkt),
   3621a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   3621e:	9300      	str	r3, [sp, #0]
   36220:	2301      	movs	r3, #1
   36222:	4421      	add	r1, r4
   36224:	461a      	mov	r2, r3
   36226:	6a30      	ldr	r0, [r6, #32]
   36228:	f7e7 f8ae 	bl	1d388 <net_pkt_alloc_with_buffer>
	if (!reply) {
   3622c:	4605      	mov	r5, r0
   3622e:	2800      	cmp	r0, #0
   36230:	d0e1      	beq.n	361f6 <icmpv4_handle_echo_request+0xa>
	if (net_ipv4_is_addr_mcast(&ip_hdr->dst)) {
   36232:	693b      	ldr	r3, [r7, #16]
   36234:	f107 0110 	add.w	r1, r7, #16
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xE0000000) == 0xE0000000;
   36238:	ba1b      	rev	r3, r3
   3623a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   3623e:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
   36242:	d103      	bne.n	3624c <icmpv4_handle_echo_request+0x60>
		src = net_if_ipv4_select_src_addr(net_pkt_iface(pkt),
   36244:	6a30      	ldr	r0, [r6, #32]
   36246:	f7e6 f829 	bl	1c29c <net_if_ipv4_select_src_addr>
   3624a:	4601      	mov	r1, r0
	if (net_ipv4_create(reply, src, &ip_hdr->src)) {
   3624c:	f107 020c 	add.w	r2, r7, #12
   36250:	4628      	mov	r0, r5
   36252:	f000 f8ce 	bl	363f2 <net_ipv4_create>
   36256:	4602      	mov	r2, r0
   36258:	bb08      	cbnz	r0, 3629e <icmpv4_handle_echo_request+0xb2>
	if (icmpv4_create(reply, NET_ICMPV4_ECHO_REPLY, 0) ||
   3625a:	4601      	mov	r1, r0
   3625c:	4628      	mov	r0, r5
   3625e:	f7ff ffac 	bl	361ba <icmpv4_create>
   36262:	b9e0      	cbnz	r0, 3629e <icmpv4_handle_echo_request+0xb2>
	    net_pkt_copy(reply, pkt, payload_len)) {
   36264:	4622      	mov	r2, r4
   36266:	4631      	mov	r1, r6
   36268:	4628      	mov	r0, r5
   3626a:	f7ff fe46 	bl	35efa <net_pkt_copy>
	if (icmpv4_create(reply, NET_ICMPV4_ECHO_REPLY, 0) ||
   3626e:	4604      	mov	r4, r0
   36270:	b9a8      	cbnz	r0, 3629e <icmpv4_handle_echo_request+0xb2>
	net_pkt_cursor_init(reply);
   36272:	4628      	mov	r0, r5
   36274:	f7ff fd89 	bl	35d8a <net_pkt_cursor_init>
	net_ipv4_finalize(reply, IPPROTO_ICMP);
   36278:	2101      	movs	r1, #1
   3627a:	4628      	mov	r0, r5
   3627c:	f000 f8ec 	bl	36458 <net_ipv4_finalize>
	if (net_send_data(reply) < 0) {
   36280:	4628      	mov	r0, r5
   36282:	f7ff f96f 	bl	35564 <net_send_data>
   36286:	2800      	cmp	r0, #0
   36288:	db09      	blt.n	3629e <icmpv4_handle_echo_request+0xb2>
	net_pkt_unref(pkt);
   3628a:	4630      	mov	r0, r6
   3628c:	f7ff fd19 	bl	35cc2 <net_pkt_unref>
	return NET_OK;
   36290:	4620      	mov	r0, r4
}
   36292:	b003      	add	sp, #12
   36294:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bytes += buf->len;
   36296:	8999      	ldrh	r1, [r3, #12]
		buf = buf->frags;
   36298:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   3629a:	440a      	add	r2, r1
		buf = buf->frags;
   3629c:	e7af      	b.n	361fe <icmpv4_handle_echo_request+0x12>
		net_pkt_unref(reply);
   3629e:	4628      	mov	r0, r5
   362a0:	f7ff fd0f 	bl	35cc2 <net_pkt_unref>
   362a4:	e7a7      	b.n	361f6 <icmpv4_handle_echo_request+0xa>

000362a6 <net_icmpv4_finalize>:
{
   362a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
   362a8:	2304      	movs	r3, #4
   362aa:	2200      	movs	r2, #0
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmpv4_access);
   362ac:	4669      	mov	r1, sp
{
   362ae:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
   362b0:	e9cd 2300 	strd	r2, r3, [sp]
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmpv4_access);
   362b4:	f7ff ff47 	bl	36146 <net_pkt_get_data>
	if (!icmp_hdr) {
   362b8:	4605      	mov	r5, r0
   362ba:	b150      	cbz	r0, 362d2 <net_icmpv4_finalize+0x2c>
   362bc:	2101      	movs	r1, #1
   362be:	4620      	mov	r0, r4
   362c0:	f7ff fa9b 	bl	357fa <net_calc_chksum>
	return net_pkt_set_data(pkt, &icmpv4_access);
   362c4:	4669      	mov	r1, sp
	icmp_hdr->chksum = net_calc_chksum_icmpv4(pkt);
   362c6:	8068      	strh	r0, [r5, #2]
	return net_pkt_set_data(pkt, &icmpv4_access);
   362c8:	4620      	mov	r0, r4
   362ca:	f7ff ff5d 	bl	36188 <net_pkt_set_data>
}
   362ce:	b003      	add	sp, #12
   362d0:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
   362d2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   362d6:	e7fa      	b.n	362ce <net_icmpv4_finalize+0x28>

000362d8 <net_icmpv4_send_error>:
{
   362d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
   362dc:	2314      	movs	r3, #20
{
   362de:	4606      	mov	r6, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
   362e0:	2400      	movs	r4, #0
{
   362e2:	b087      	sub	sp, #28
   362e4:	4688      	mov	r8, r1
   362e6:	4691      	mov	r9, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
   362e8:	e9cd 4302 	strd	r4, r3, [sp, #8]
	net_pkt_cursor_init(orig);
   362ec:	f7ff fd4d 	bl	35d8a <net_pkt_cursor_init>
	ip_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(orig, &ipv4_access);
   362f0:	a902      	add	r1, sp, #8
   362f2:	4630      	mov	r0, r6
   362f4:	f7ff ff27 	bl	36146 <net_pkt_get_data>
	if (!ip_hdr) {
   362f8:	4605      	mov	r5, r0
   362fa:	b378      	cbz	r0, 3635c <net_icmpv4_send_error+0x84>
	if (ip_hdr->proto == IPPROTO_ICMP) {
   362fc:	7a43      	ldrb	r3, [r0, #9]
   362fe:	2b01      	cmp	r3, #1
   36300:	d110      	bne.n	36324 <net_icmpv4_send_error+0x4c>
		NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
   36302:	2304      	movs	r3, #4
		icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(
   36304:	a904      	add	r1, sp, #16
   36306:	4630      	mov	r0, r6
		NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
   36308:	9404      	str	r4, [sp, #16]
   3630a:	9305      	str	r3, [sp, #20]
		icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(
   3630c:	f7ff ff1b 	bl	36146 <net_pkt_get_data>
		if (!icmp_hdr || icmp_hdr->code < 8) {
   36310:	b110      	cbz	r0, 36318 <net_icmpv4_send_error+0x40>
   36312:	7843      	ldrb	r3, [r0, #1]
   36314:	2b07      	cmp	r3, #7
   36316:	d805      	bhi.n	36324 <net_icmpv4_send_error+0x4c>
			err = -EINVAL;
   36318:	f06f 0515 	mvn.w	r5, #21
}
   3631c:	4628      	mov	r0, r5
   3631e:	b007      	add	sp, #28
   36320:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (ip_hdr->proto == IPPROTO_UDP) {
   36324:	7a6b      	ldrb	r3, [r5, #9]
   36326:	2b11      	cmp	r3, #17
   36328:	d01b      	beq.n	36362 <net_icmpv4_send_error+0x8a>
		copy_len = 0;
   3632a:	2b06      	cmp	r3, #6
   3632c:	bf0c      	ite	eq
   3632e:	2728      	moveq	r7, #40	; 0x28
   36330:	2700      	movne	r7, #0
	pkt = net_pkt_alloc_with_buffer(net_pkt_iface(orig),
   36332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   36336:	9300      	str	r3, [sp, #0]
   36338:	2301      	movs	r3, #1
   3633a:	1d39      	adds	r1, r7, #4
   3633c:	461a      	mov	r2, r3
   3633e:	6a30      	ldr	r0, [r6, #32]
   36340:	f7e7 f822 	bl	1d388 <net_pkt_alloc_with_buffer>
	if (!pkt) {
   36344:	4604      	mov	r4, r0
   36346:	b3b8      	cbz	r0, 363b8 <net_icmpv4_send_error+0xe0>
	if (net_ipv4_create(pkt, &ip_hdr->dst, &ip_hdr->src) ||
   36348:	f105 020c 	add.w	r2, r5, #12
   3634c:	f105 0110 	add.w	r1, r5, #16
   36350:	f000 f84f 	bl	363f2 <net_ipv4_create>
   36354:	b138      	cbz	r0, 36366 <net_icmpv4_send_error+0x8e>
	net_pkt_unref(pkt);
   36356:	4620      	mov	r0, r4
   36358:	f7ff fcb3 	bl	35cc2 <net_pkt_unref>
	int err = -EIO;
   3635c:	f06f 0504 	mvn.w	r5, #4
   36360:	e7dc      	b.n	3631c <net_icmpv4_send_error+0x44>
		copy_len = sizeof(struct net_ipv4_hdr) +
   36362:	271c      	movs	r7, #28
   36364:	e7e5      	b.n	36332 <net_icmpv4_send_error+0x5a>
	    icmpv4_create(pkt, type, code) ||
   36366:	4641      	mov	r1, r8
   36368:	464a      	mov	r2, r9
   3636a:	4620      	mov	r0, r4
   3636c:	f7ff ff25 	bl	361ba <icmpv4_create>
	if (net_ipv4_create(pkt, &ip_hdr->dst, &ip_hdr->src) ||
   36370:	4601      	mov	r1, r0
   36372:	2800      	cmp	r0, #0
   36374:	d1ef      	bne.n	36356 <net_icmpv4_send_error+0x7e>
	    net_pkt_memset(pkt, 0, NET_ICMPV4_UNUSED_LEN) ||
   36376:	2204      	movs	r2, #4
   36378:	4620      	mov	r0, r4
   3637a:	f7ff fd9b 	bl	35eb4 <net_pkt_memset>
	    icmpv4_create(pkt, type, code) ||
   3637e:	2800      	cmp	r0, #0
   36380:	d1e9      	bne.n	36356 <net_icmpv4_send_error+0x7e>
	    net_pkt_copy(pkt, orig, copy_len)) {
   36382:	463a      	mov	r2, r7
   36384:	4631      	mov	r1, r6
   36386:	4620      	mov	r0, r4
   36388:	f7ff fdb7 	bl	35efa <net_pkt_copy>
	    net_pkt_memset(pkt, 0, NET_ICMPV4_UNUSED_LEN) ||
   3638c:	4605      	mov	r5, r0
   3638e:	2800      	cmp	r0, #0
   36390:	d1e1      	bne.n	36356 <net_icmpv4_send_error+0x7e>
	net_pkt_cursor_init(pkt);
   36392:	4620      	mov	r0, r4
   36394:	f7ff fcf9 	bl	35d8a <net_pkt_cursor_init>
	net_ipv4_finalize(pkt, IPPROTO_ICMP);
   36398:	2101      	movs	r1, #1
   3639a:	4620      	mov	r0, r4
   3639c:	f000 f85c 	bl	36458 <net_ipv4_finalize>
	net_pkt_lladdr_dst(pkt)->addr = net_pkt_lladdr_src(orig)->addr;
   363a0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
	if (net_send_data(pkt) >= 0) {
   363a2:	4620      	mov	r0, r4
	net_pkt_lladdr_dst(pkt)->addr = net_pkt_lladdr_src(orig)->addr;
   363a4:	6323      	str	r3, [r4, #48]	; 0x30
	net_pkt_lladdr_dst(pkt)->len = net_pkt_lladdr_src(orig)->len;
   363a6:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
   363aa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	if (net_send_data(pkt) >= 0) {
   363ae:	f7ff f8d9 	bl	35564 <net_send_data>
   363b2:	2800      	cmp	r0, #0
   363b4:	dab2      	bge.n	3631c <net_icmpv4_send_error+0x44>
   363b6:	e7ce      	b.n	36356 <net_icmpv4_send_error+0x7e>
		err =  -ENOMEM;
   363b8:	f06f 050b 	mvn.w	r5, #11
   363bc:	e7ae      	b.n	3631c <net_icmpv4_send_error+0x44>

000363be <net_ipv4_is_addr_mcast>:
   363be:	6800      	ldr	r0, [r0, #0]
   363c0:	ba00      	rev	r0, r0
   363c2:	f000 4060 	and.w	r0, r0, #3758096384	; 0xe0000000
}
   363c6:	f100 5300 	add.w	r3, r0, #536870912	; 0x20000000
   363ca:	4258      	negs	r0, r3
   363cc:	4158      	adcs	r0, r3
   363ce:	4770      	bx	lr

000363d0 <net_ipv4_is_addr_bcast>:
{
   363d0:	b538      	push	{r3, r4, r5, lr}
   363d2:	460c      	mov	r4, r1
   363d4:	4605      	mov	r5, r0
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   363d6:	f7e6 f8fb 	bl	1c5d0 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   363da:	6822      	ldr	r2, [r4, #0]
   363dc:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
   363de:	429a      	cmp	r2, r3
   363e0:	d005      	beq.n	363ee <net_ipv4_is_addr_bcast+0x1e>
	return net_if_ipv4_is_addr_bcast(iface, addr);
   363e2:	4621      	mov	r1, r4
   363e4:	4628      	mov	r0, r5
}
   363e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_if_ipv4_is_addr_bcast(iface, addr);
   363ea:	f7e5 bf25 	b.w	1c238 <net_if_ipv4_is_addr_bcast>
}
   363ee:	2001      	movs	r0, #1
   363f0:	bd38      	pop	{r3, r4, r5, pc}

000363f2 <net_ipv4_create>:
#define NET_BUF_TIMEOUT K_MSEC(50)

int net_ipv4_create(struct net_pkt *pkt,
		    const struct in_addr *src,
		    const struct in_addr *dst)
{
   363f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
   363f4:	2314      	movs	r3, #20
   363f6:	2400      	movs	r4, #0
{
   363f8:	460e      	mov	r6, r1
	struct net_ipv4_hdr *ipv4_hdr;

	ipv4_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(pkt, &ipv4_access);
   363fa:	4669      	mov	r1, sp
{
   363fc:	4605      	mov	r5, r0
   363fe:	4617      	mov	r7, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
   36400:	e9cd 4300 	strd	r4, r3, [sp]
	ipv4_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(pkt, &ipv4_access);
   36404:	f7ff fe9f 	bl	36146 <net_pkt_get_data>
	if (!ipv4_hdr) {
   36408:	b318      	cbz	r0, 36452 <net_ipv4_create+0x60>
		return -ENOBUFS;
	}

	ipv4_hdr->vhl       = 0x45;
   3640a:	2345      	movs	r3, #69	; 0x45
	ipv4_hdr->tos       = 0x00;
   3640c:	7044      	strb	r4, [r0, #1]
	ipv4_hdr->vhl       = 0x45;
   3640e:	7003      	strb	r3, [r0, #0]
	ipv4_hdr->len       = 0U;
	ipv4_hdr->id[0]     = 0U;
   36410:	7104      	strb	r4, [r0, #4]
	ipv4_hdr->id[1]     = 0U;
   36412:	7144      	strb	r4, [r0, #5]
	ipv4_hdr->offset[0] = 0U;
   36414:	7184      	strb	r4, [r0, #6]
	ipv4_hdr->offset[1] = 0U;
   36416:	71c4      	strb	r4, [r0, #7]

	ipv4_hdr->ttl       = net_pkt_ipv4_ttl(pkt);
   36418:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
	ipv4_hdr->len       = 0U;
   3641c:	7084      	strb	r4, [r0, #2]
   3641e:	70c4      	strb	r4, [r0, #3]
	ipv4_hdr->ttl       = net_pkt_ipv4_ttl(pkt);
   36420:	7203      	strb	r3, [r0, #8]
	if (ipv4_hdr->ttl == 0U) {
   36422:	b92b      	cbnz	r3, 36430 <net_ipv4_create+0x3e>
		ipv4_hdr->ttl = net_if_ipv4_get_ttl(net_pkt_iface(pkt));
   36424:	6a2a      	ldr	r2, [r5, #32]
   36426:	6851      	ldr	r1, [r2, #4]
 * @return Time-to-live
 */
static inline u8_t net_if_ipv4_get_ttl(struct net_if *iface)
{
#if defined(CONFIG_NET_NATIVE_IPV4)
	if (!iface->config.ip.ipv4) {
   36428:	b109      	cbz	r1, 3642e <net_ipv4_create+0x3c>
		return 0;
	}

	return iface->config.ip.ipv4->ttl;
   3642a:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
   3642e:	7203      	strb	r3, [r0, #8]
	}

	ipv4_hdr->proto     = 0U;
   36430:	2300      	movs	r3, #0
   36432:	7243      	strb	r3, [r0, #9]
	ipv4_hdr->chksum    = 0U;
   36434:	7283      	strb	r3, [r0, #10]
   36436:	72c3      	strb	r3, [r0, #11]

	net_ipaddr_copy(&ipv4_hdr->dst, dst);
   36438:	683b      	ldr	r3, [r7, #0]
   3643a:	6103      	str	r3, [r0, #16]
	net_ipaddr_copy(&ipv4_hdr->src, src);
   3643c:	6833      	ldr	r3, [r6, #0]
   3643e:	60c3      	str	r3, [r0, #12]
	pkt->ip_hdr_len = len;
   36440:	2314      	movs	r3, #20

	net_pkt_set_ip_hdr_len(pkt, sizeof(struct net_ipv4_hdr));

	return net_pkt_set_data(pkt, &ipv4_access);
   36442:	4669      	mov	r1, sp
   36444:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   36448:	4628      	mov	r0, r5
   3644a:	f7ff fe9d 	bl	36188 <net_pkt_set_data>
}
   3644e:	b003      	add	sp, #12
   36450:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
   36452:	f06f 0068 	mvn.w	r0, #104	; 0x68
   36456:	e7fa      	b.n	3644e <net_ipv4_create+0x5c>

00036458 <net_ipv4_finalize>:

int net_ipv4_finalize(struct net_pkt *pkt, u8_t next_header_proto)
{
   36458:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
   3645a:	2314      	movs	r3, #20
   3645c:	2500      	movs	r5, #0
   3645e:	e9cd 5300 	strd	r5, r3, [sp]
	pkt->overwrite = overwrite;
   36462:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
   36466:	460e      	mov	r6, r1
   36468:	f043 0301 	orr.w	r3, r3, #1
   3646c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
	struct net_ipv4_hdr *ipv4_hdr;

	net_pkt_set_overwrite(pkt, true);

	ipv4_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(pkt, &ipv4_access);
   36470:	4669      	mov	r1, sp
{
   36472:	4604      	mov	r4, r0
	ipv4_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(pkt, &ipv4_access);
   36474:	f7ff fe67 	bl	36146 <net_pkt_get_data>
	if (!ipv4_hdr) {
   36478:	4607      	mov	r7, r0
   3647a:	b340      	cbz	r0, 364ce <net_ipv4_finalize+0x76>
	size_t bytes = 0;
   3647c:	462b      	mov	r3, r5
					((net_pkt_ip_hdr_len(pkt) +
					  net_pkt_ipv4_opts_len(pkt)) / 4U));
		}
	}

	ipv4_hdr->len   = htons(net_pkt_get_len(pkt));
   3647e:	6922      	ldr	r2, [r4, #16]
	while (buf) {
   36480:	b9aa      	cbnz	r2, 364ae <net_ipv4_finalize+0x56>
   36482:	ba5b      	rev16	r3, r3
	ipv4_hdr->proto = next_header_proto;
   36484:	727e      	strb	r6, [r7, #9]
	ipv4_hdr->len   = htons(net_pkt_get_len(pkt));
   36486:	807b      	strh	r3, [r7, #2]

	if (net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
   36488:	6a20      	ldr	r0, [r4, #32]
   3648a:	f7ff f996 	bl	357ba <net_if_need_calc_tx_checksum>
   3648e:	b118      	cbz	r0, 36498 <net_ipv4_finalize+0x40>
		ipv4_hdr->chksum = net_calc_chksum_ipv4(pkt);
   36490:	4620      	mov	r0, r4
   36492:	f7ff fa37 	bl	35904 <net_calc_chksum_ipv4>
   36496:	8178      	strh	r0, [r7, #10]
	}

	net_pkt_set_data(pkt, &ipv4_access);
   36498:	4669      	mov	r1, sp
   3649a:	4620      	mov	r0, r4
   3649c:	f7ff fe74 	bl	36188 <net_pkt_set_data>

	if (IS_ENABLED(CONFIG_NET_UDP) &&
   364a0:	2e11      	cmp	r6, #17
   364a2:	d108      	bne.n	364b6 <net_ipv4_finalize+0x5e>
	    next_header_proto == IPPROTO_UDP) {
		return net_udp_finalize(pkt);
   364a4:	4620      	mov	r0, r4
   364a6:	f000 fdd4 	bl	37052 <net_udp_finalize>
	} else if (next_header_proto == IPPROTO_ICMP) {
		return net_icmpv4_finalize(pkt);
	}

	return 0;
}
   364aa:	b003      	add	sp, #12
   364ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bytes += buf->len;
   364ae:	8991      	ldrh	r1, [r2, #12]
		buf = buf->frags;
   364b0:	6812      	ldr	r2, [r2, #0]
		bytes += buf->len;
   364b2:	440b      	add	r3, r1
		buf = buf->frags;
   364b4:	e7e4      	b.n	36480 <net_ipv4_finalize+0x28>
	} else if (IS_ENABLED(CONFIG_NET_TCP) &&
   364b6:	2e06      	cmp	r6, #6
   364b8:	d103      	bne.n	364c2 <net_ipv4_finalize+0x6a>
		return net_tcp_finalize(pkt);
   364ba:	4620      	mov	r0, r4
   364bc:	f000 fcb5 	bl	36e2a <net_tcp_finalize>
   364c0:	e7f3      	b.n	364aa <net_ipv4_finalize+0x52>
	} else if (next_header_proto == IPPROTO_ICMP) {
   364c2:	2e01      	cmp	r6, #1
   364c4:	d106      	bne.n	364d4 <net_ipv4_finalize+0x7c>
		return net_icmpv4_finalize(pkt);
   364c6:	4620      	mov	r0, r4
   364c8:	f7ff feed 	bl	362a6 <net_icmpv4_finalize>
   364cc:	e7ed      	b.n	364aa <net_ipv4_finalize+0x52>
		return -ENOBUFS;
   364ce:	f06f 0068 	mvn.w	r0, #104	; 0x68
   364d2:	e7ea      	b.n	364aa <net_ipv4_finalize+0x52>
	return 0;
   364d4:	2000      	movs	r0, #0
   364d6:	e7e8      	b.n	364aa <net_ipv4_finalize+0x52>

000364d8 <net_ipv4_input>:
}
#endif

enum net_verdict net_ipv4_input(struct net_pkt *pkt)
{
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
   364d8:	2314      	movs	r3, #20
{
   364da:	b5f0      	push	{r4, r5, r6, r7, lr}
   364dc:	b091      	sub	sp, #68	; 0x44
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   364de:	eb0d 0203 	add.w	r2, sp, r3
   364e2:	9207      	str	r2, [sp, #28]
   364e4:	2208      	movs	r2, #8
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
   364e6:	2700      	movs	r7, #0
{
   364e8:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   364ea:	9208      	str	r2, [sp, #32]
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
   364ec:	aa0b      	add	r2, sp, #44	; 0x2c
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
   364ee:	e9cd 7303 	strd	r7, r3, [sp, #12]
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
   364f2:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
	int real_len = net_pkt_get_len(pkt);
   364f6:	6903      	ldr	r3, [r0, #16]
	while (buf) {
   364f8:	b943      	cbnz	r3, 3650c <net_ipv4_input+0x34>
	u8_t opts_len;
	int pkt_len;

	net_stats_update_ipv4_recv(net_pkt_iface(pkt));

	hdr = (struct net_ipv4_hdr *)net_pkt_get_data(pkt, &ipv4_access);
   364fa:	a903      	add	r1, sp, #12
   364fc:	4620      	mov	r0, r4
   364fe:	f7ff fe22 	bl	36146 <net_pkt_get_data>
	if (!hdr) {
   36502:	4605      	mov	r5, r0
   36504:	b930      	cbnz	r0, 36514 <net_ipv4_input+0x3c>
	if (verdict != NET_DROP) {
		return verdict;
	}
drop:
	net_stats_update_ipv4_drop(net_pkt_iface(pkt));
	return NET_DROP;
   36506:	2002      	movs	r0, #2
}
   36508:	b011      	add	sp, #68	; 0x44
   3650a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bytes += buf->len;
   3650c:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   3650e:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   36510:	4417      	add	r7, r2
		buf = buf->frags;
   36512:	e7f1      	b.n	364f8 <net_ipv4_input+0x20>
	hdr_len = (hdr->vhl & NET_IPV4_IHL_MASK) * 4U;
   36514:	7806      	ldrb	r6, [r0, #0]
   36516:	f006 060f 	and.w	r6, r6, #15
   3651a:	00b6      	lsls	r6, r6, #2
	if (hdr_len < sizeof(struct net_ipv4_hdr)) {
   3651c:	2e13      	cmp	r6, #19
   3651e:	d9f2      	bls.n	36506 <net_ipv4_input+0x2e>
	pkt->ip_hdr_len = len;
   36520:	2314      	movs	r3, #20
	opts_len = hdr_len - sizeof(struct net_ipv4_hdr);
   36522:	3e14      	subs	r6, #20
   36524:	b2f6      	uxtb	r6, r6
   36526:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	pkt->ipv4_opts_len = opts_len;
   3652a:	f884 6043 	strb.w	r6, [r4, #67]	; 0x43
	pkt_len = ntohs(hdr->len);
   3652e:	8843      	ldrh	r3, [r0, #2]
   36530:	0219      	lsls	r1, r3, #8
   36532:	ea41 2113 	orr.w	r1, r1, r3, lsr #8
   36536:	b289      	uxth	r1, r1
	if (real_len < pkt_len) {
   36538:	428f      	cmp	r7, r1
   3653a:	dbe4      	blt.n	36506 <net_ipv4_input+0x2e>
	} else if (real_len > pkt_len) {
   3653c:	dd02      	ble.n	36544 <net_ipv4_input+0x6c>
		net_pkt_update_length(pkt, pkt_len);
   3653e:	4620      	mov	r0, r4
   36540:	f7ff fd38 	bl	35fb4 <net_pkt_update_length>
	if (net_ipv4_is_addr_mcast(&hdr->src)) {
   36544:	f105 010c 	add.w	r1, r5, #12
   36548:	4608      	mov	r0, r1
   3654a:	f7ff ff38 	bl	363be <net_ipv4_is_addr_mcast>
   3654e:	2800      	cmp	r0, #0
   36550:	d1d9      	bne.n	36506 <net_ipv4_input+0x2e>
	if (net_ipv4_is_addr_bcast(net_pkt_iface(pkt), &hdr->src)) {
   36552:	6a20      	ldr	r0, [r4, #32]
   36554:	f7ff ff3c 	bl	363d0 <net_ipv4_is_addr_bcast>
   36558:	2800      	cmp	r0, #0
   3655a:	d1d4      	bne.n	36506 <net_ipv4_input+0x2e>
	return UNALIGNED_GET(&addr->s_addr) == 0;
   3655c:	68eb      	ldr	r3, [r5, #12]
	if (net_ipv4_is_addr_unspecified(&hdr->src)) {
   3655e:	2b00      	cmp	r3, #0
   36560:	d0d1      	beq.n	36506 <net_ipv4_input+0x2e>
	if (net_if_need_calc_rx_checksum(net_pkt_iface(pkt)) &&
   36562:	6a20      	ldr	r0, [r4, #32]
   36564:	f7ff f92b 	bl	357be <net_if_need_calc_rx_checksum>
   36568:	2800      	cmp	r0, #0
   3656a:	d145      	bne.n	365f8 <net_ipv4_input+0x120>
	if ((!net_ipv4_is_my_addr(&hdr->dst) &&
   3656c:	f105 0710 	add.w	r7, r5, #16
	ret = net_if_ipv4_addr_lookup(addr, NULL) != NULL;
   36570:	2100      	movs	r1, #0
   36572:	4638      	mov	r0, r7
   36574:	f7e5 fee0 	bl	1c338 <net_if_ipv4_addr_lookup>
   36578:	2800      	cmp	r0, #0
   3657a:	bf14      	ite	ne
   3657c:	2301      	movne	r3, #1
   3657e:	2300      	moveq	r3, #0
	if (!ret) {
   36580:	d103      	bne.n	3658a <net_ipv4_input+0xb2>
		ret = net_ipv4_is_addr_bcast(NULL, addr);
   36582:	4639      	mov	r1, r7
   36584:	f7ff ff24 	bl	363d0 <net_ipv4_is_addr_bcast>
   36588:	4603      	mov	r3, r0
   3658a:	2b00      	cmp	r3, #0
   3658c:	d03a      	beq.n	36604 <net_ipv4_input+0x12c>
				   net_ipv4_unspecified_address()))))) ||
   3658e:	7a6b      	ldrb	r3, [r5, #9]
   36590:	2b06      	cmp	r3, #6
   36592:	d105      	bne.n	365a0 <net_ipv4_input+0xc8>
	     net_ipv4_is_addr_bcast(net_pkt_iface(pkt), &hdr->dst))) {
   36594:	4639      	mov	r1, r7
   36596:	6a20      	ldr	r0, [r4, #32]
   36598:	f7ff ff1a 	bl	363d0 <net_ipv4_is_addr_bcast>
	    (hdr->proto == IPPROTO_TCP &&
   3659c:	2800      	cmp	r0, #0
   3659e:	d1b2      	bne.n	36506 <net_ipv4_input+0x2e>
	return net_pkt_skip(pkt, access->size);
   365a0:	9904      	ldr	r1, [sp, #16]
   365a2:	4620      	mov	r0, r4
   365a4:	f7ff fc7b 	bl	35e9e <net_pkt_skip>
	if (opts_len) {
   365a8:	b12e      	cbz	r6, 365b6 <net_ipv4_input+0xde>
		if (net_pkt_skip(pkt, opts_len)) {
   365aa:	4631      	mov	r1, r6
   365ac:	4620      	mov	r0, r4
   365ae:	f7ff fc76 	bl	35e9e <net_pkt_skip>
   365b2:	2800      	cmp	r0, #0
   365b4:	d1a7      	bne.n	36506 <net_ipv4_input+0x2e>
	pkt->family = family;
   365b6:	2201      	movs	r2, #1
	net_pkt_set_ipv4_ttl(pkt, hdr->ttl);
   365b8:	7a2b      	ldrb	r3, [r5, #8]
	pkt->ipv4_ttl = ttl;
   365ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	pkt->family = family;
   365be:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
   365c2:	f362 0343 	bfi	r3, r2, #1, #3
   365c6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
	switch (hdr->proto) {
   365ca:	7a6b      	ldrb	r3, [r5, #9]
   365cc:	2b06      	cmp	r3, #6
   365ce:	d029      	beq.n	36624 <net_ipv4_input+0x14c>
   365d0:	2b11      	cmp	r3, #17
   365d2:	d031      	beq.n	36638 <net_ipv4_input+0x160>
   365d4:	4293      	cmp	r3, r2
   365d6:	d196      	bne.n	36506 <net_ipv4_input+0x2e>
		verdict = net_icmpv4_input(pkt, hdr);
   365d8:	4629      	mov	r1, r5
   365da:	4620      	mov	r0, r4
   365dc:	f7e6 ff3c 	bl	1d458 <net_icmpv4_input>
	if (verdict == NET_DROP) {
   365e0:	2802      	cmp	r0, #2
   365e2:	d090      	beq.n	36506 <net_ipv4_input+0x2e>
	} else if (hdr->proto == IPPROTO_ICMP) {
   365e4:	7a6a      	ldrb	r2, [r5, #9]
   365e6:	2a01      	cmp	r2, #1
   365e8:	d08e      	beq.n	36508 <net_ipv4_input+0x30>
	verdict = net_conn_input(pkt, &ip, hdr->proto, &proto_hdr);
   365ea:	ab01      	add	r3, sp, #4
   365ec:	a902      	add	r1, sp, #8
   365ee:	4620      	mov	r0, r4
	ip.ipv4 = hdr;
   365f0:	9502      	str	r5, [sp, #8]
	verdict = net_conn_input(pkt, &ip, hdr->proto, &proto_hdr);
   365f2:	f7e7 f879 	bl	1d6e8 <net_conn_input>
	if (verdict != NET_DROP) {
   365f6:	e787      	b.n	36508 <net_ipv4_input+0x30>
	    net_calc_chksum_ipv4(pkt) != 0U) {
   365f8:	4620      	mov	r0, r4
   365fa:	f7ff f983 	bl	35904 <net_calc_chksum_ipv4>
	if (net_if_need_calc_rx_checksum(net_pkt_iface(pkt)) &&
   365fe:	2800      	cmp	r0, #0
   36600:	d0b4      	beq.n	3656c <net_ipv4_input+0x94>
   36602:	e780      	b.n	36506 <net_ipv4_input+0x2e>
	     !net_ipv4_is_addr_mcast(&hdr->dst) &&
   36604:	4638      	mov	r0, r7
   36606:	f7ff feda 	bl	363be <net_ipv4_is_addr_mcast>
	if ((!net_ipv4_is_my_addr(&hdr->dst) &&
   3660a:	2800      	cmp	r0, #0
   3660c:	d1bf      	bne.n	3658e <net_ipv4_input+0xb6>
	     !net_ipv4_is_addr_mcast(&hdr->dst) &&
   3660e:	7a6b      	ldrb	r3, [r5, #9]
   36610:	2b11      	cmp	r3, #17
   36612:	f47f af78 	bne.w	36506 <net_ipv4_input+0x2e>
	       (net_ipv4_addr_cmp(&hdr->dst, net_ipv4_broadcast_address()) ||
   36616:	f7e5 ffdb 	bl	1c5d0 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   3661a:	692b      	ldr	r3, [r5, #16]
   3661c:	6802      	ldr	r2, [r0, #0]
	     !(hdr->proto == IPPROTO_UDP &&
   3661e:	429a      	cmp	r2, r3
   36620:	d0b5      	beq.n	3658e <net_ipv4_input+0xb6>
   36622:	e770      	b.n	36506 <net_ipv4_input+0x2e>
		proto_hdr.tcp = net_tcp_input(pkt, &tcp_access);
   36624:	a909      	add	r1, sp, #36	; 0x24
   36626:	4620      	mov	r0, r4
   36628:	f000 fcd8 	bl	36fdc <net_tcp_input>
   3662c:	9001      	str	r0, [sp, #4]
		if (proto_hdr.tcp) {
   3662e:	2800      	cmp	r0, #0
   36630:	f43f af69 	beq.w	36506 <net_ipv4_input+0x2e>
			verdict = NET_OK;
   36634:	2000      	movs	r0, #0
   36636:	e7d5      	b.n	365e4 <net_ipv4_input+0x10c>
		proto_hdr.udp = net_udp_input(pkt, &udp_access);
   36638:	a907      	add	r1, sp, #28
   3663a:	4620      	mov	r0, r4
   3663c:	f000 fd3c 	bl	370b8 <net_udp_input>
   36640:	e7f4      	b.n	3662c <net_ipv4_input+0x154>

00036642 <sys_get_be32>:
 *
 *  @return 16-bit integer in host endianness.
 */
static inline u16_t sys_get_be16(const u8_t src[2])
{
	return ((u16_t)src[0] << 8) | src[1];
   36642:	7803      	ldrb	r3, [r0, #0]
   36644:	7842      	ldrb	r2, [r0, #1]
   36646:	7881      	ldrb	r1, [r0, #2]
 *
 *  @return 32-bit integer in host endianness.
 */
static inline u32_t sys_get_be32(const u8_t src[4])
{
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   36648:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	return ((u16_t)src[0] << 8) | src[1];
   3664c:	78c3      	ldrb	r3, [r0, #3]
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   3664e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
}
   36652:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
   36656:	4770      	bx	lr

00036658 <handle_fin_timeout>:
	net_context_unref(tcp->context);
   36658:	f850 0c28 	ldr.w	r0, [r0, #-40]
   3665c:	f7ff b99a 	b.w	35994 <net_context_unref>

00036660 <net_tcp_is_used>:
	return tcp->flags & NET_TCP_IN_USE;
   36660:	f8b0 00bc 	ldrh.w	r0, [r0, #188]	; 0xbc
}
   36664:	f3c0 1040 	ubfx	r0, r0, #5, #1
   36668:	4770      	bx	lr

0003666a <net_tcp_queue_pkt.isra.22>:
	parent->next = child;
   3666a:	2200      	movs	r2, #0
static int net_tcp_queue_pkt(struct net_context *context, struct net_pkt *pkt)
   3666c:	b538      	push	{r3, r4, r5, lr}
   3666e:	4605      	mov	r5, r0
	sys_slist_append(&context->tcp->sent_list, &pkt->sent_list);
   36670:	6800      	ldr	r0, [r0, #0]
   36672:	638a      	str	r2, [r1, #56]	; 0x38
Z_GENLIST_APPEND(slist, snode)
   36674:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
static int net_tcp_queue_pkt(struct net_context *context, struct net_pkt *pkt)
   36678:	460c      	mov	r4, r1
	sys_slist_append(&context->tcp->sent_list, &pkt->sent_list);
   3667a:	f101 0338 	add.w	r3, r1, #56	; 0x38
   3667e:	b9da      	cbnz	r2, 366b8 <net_tcp_queue_pkt.isra.22+0x4e>
	list->head = node;
   36680:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
	return k_ticks_to_ms_floor32(z_timeout_remaining(&work->timeout));
   36684:	3054      	adds	r0, #84	; 0x54
   36686:	f7f8 f99b 	bl	2e9c0 <z_timeout_remaining>
   3668a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   3668e:	fba0 0103 	umull	r0, r1, r0, r3
   36692:	0bc3      	lsrs	r3, r0, #15
	if (k_delayed_work_remaining_get(&context->tcp->retry_timer) == 0) {
   36694:	ea53 4341 	orrs.w	r3, r3, r1, lsl #17
   36698:	d109      	bne.n	366ae <net_tcp_queue_pkt.isra.22+0x44>
		k_delayed_work_submit(&context->tcp->retry_timer,
   3669a:	21c8      	movs	r1, #200	; 0xc8
   3669c:	6828      	ldr	r0, [r5, #0]
	return K_MSEC(((u32_t)1 << tcp->retry_timeout_shift) *
   3669e:	f890 30bc 	ldrb.w	r3, [r0, #188]	; 0xbc
		k_delayed_work_submit(&context->tcp->retry_timer,
   366a2:	3048      	adds	r0, #72	; 0x48
	return K_MSEC(((u32_t)1 << tcp->retry_timeout_shift) *
   366a4:	f003 031f 	and.w	r3, r3, #31
		k_delayed_work_submit(&context->tcp->retry_timer,
   366a8:	4099      	lsls	r1, r3
   366aa:	f7e7 f925 	bl	1d8f8 <k_delayed_work_submit>
	do_ref_if_needed(context->tcp, pkt);
   366ae:	4620      	mov	r0, r4
   366b0:	f7ff faee 	bl	35c90 <net_pkt_ref>
}
   366b4:	2000      	movs	r0, #0
   366b6:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
   366b8:	6013      	str	r3, [r2, #0]
	list->tail = node;
   366ba:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
   366be:	e7e1      	b.n	36684 <net_tcp_queue_pkt.isra.22+0x1a>

000366c0 <net_tcp_get_recv_mss>:
{
   366c0:	b510      	push	{r4, lr}
   366c2:	4604      	mov	r4, r0
	sa_family_t family = net_context_get_family(tcp->context);
   366c4:	6800      	ldr	r0, [r0, #0]
   366c6:	f7e7 f91f 	bl	1d908 <net_context_get_family>
	if (family == AF_INET) {
   366ca:	2801      	cmp	r0, #1
   366cc:	d001      	beq.n	366d2 <net_tcp_get_recv_mss+0x12>
	return 0;
   366ce:	2000      	movs	r0, #0
}
   366d0:	bd10      	pop	{r4, pc}
		struct net_if *iface = net_context_get_iface(tcp->context);
   366d2:	6820      	ldr	r0, [r4, #0]
   366d4:	f7e7 f97c 	bl	1d9d0 <net_context_get_iface>
		if (iface && net_if_get_mtu(iface) >= NET_IPV4TCPH_LEN) {
   366d8:	2800      	cmp	r0, #0
   366da:	d0f8      	beq.n	366ce <net_tcp_get_recv_mss+0xe>
	return iface->if_dev->mtu;
   366dc:	6803      	ldr	r3, [r0, #0]
   366de:	8b18      	ldrh	r0, [r3, #24]
   366e0:	2827      	cmp	r0, #39	; 0x27
   366e2:	d9f4      	bls.n	366ce <net_tcp_get_recv_mss+0xe>
			return net_if_get_mtu(iface) - NET_IPV4TCPH_LEN;
   366e4:	3828      	subs	r0, #40	; 0x28
   366e6:	b280      	uxth	r0, r0
   366e8:	e7f2      	b.n	366d0 <net_tcp_get_recv_mss+0x10>

000366ea <net_tcp_set_syn_opt>:
	*optionlen = 0U;
   366ea:	2300      	movs	r3, #0
{
   366ec:	b570      	push	{r4, r5, r6, lr}
	*optionlen = 0U;
   366ee:	7013      	strb	r3, [r2, #0]
{
   366f0:	4614      	mov	r4, r2
	if (!(tcp->flags & NET_TCP_RECV_MSS_SET)) {
   366f2:	f8b0 20bc 	ldrh.w	r2, [r0, #188]	; 0xbc
{
   366f6:	4605      	mov	r5, r0
	if (!(tcp->flags & NET_TCP_RECV_MSS_SET)) {
   366f8:	0552      	lsls	r2, r2, #21
{
   366fa:	460e      	mov	r6, r1
	if (!(tcp->flags & NET_TCP_RECV_MSS_SET)) {
   366fc:	d418      	bmi.n	36730 <net_tcp_set_syn_opt+0x46>
		recv_mss = net_tcp_get_recv_mss(tcp);
   366fe:	f7ff ffdf 	bl	366c0 <net_tcp_get_recv_mss>
		tcp->flags |= NET_TCP_RECV_MSS_SET;
   36702:	f8b5 30bc 	ldrh.w	r3, [r5, #188]	; 0xbc
   36706:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   3670a:	f8a5 30bc 	strh.w	r3, [r5, #188]	; 0xbc
	recv_mss |= (NET_TCP_MSS_OPT << 24) | (NET_TCP_MSS_SIZE << 16);
   3670e:	f040 7301 	orr.w	r3, r0, #33816576	; 0x2040000
	UNALIGNED_PUT(htonl(recv_mss),
   36712:	0218      	lsls	r0, r3, #8
   36714:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
   36718:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
   3671c:	7822      	ldrb	r2, [r4, #0]
   3671e:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   36722:	f040 0002 	orr.w	r0, r0, #2
   36726:	50b0      	str	r0, [r6, r2]
	*optionlen += NET_TCP_MSS_SIZE;
   36728:	7823      	ldrb	r3, [r4, #0]
   3672a:	3304      	adds	r3, #4
   3672c:	7023      	strb	r3, [r4, #0]
}
   3672e:	bd70      	pop	{r4, r5, r6, pc}
		recv_mss = 0U;
   36730:	4618      	mov	r0, r3
   36732:	e7ec      	b.n	3670e <net_tcp_set_syn_opt+0x24>

00036734 <net_tcp_prepare_reset>:
{
   36734:	b5f0      	push	{r4, r5, r6, r7, lr}
   36736:	4605      	mov	r5, r0
   36738:	b089      	sub	sp, #36	; 0x24
   3673a:	460c      	mov	r4, r1
   3673c:	4617      	mov	r7, r2
	struct tcp_segment segment = { 0 };
   3673e:	2100      	movs	r1, #0
   36740:	2218      	movs	r2, #24
   36742:	a802      	add	r0, sp, #8
{
   36744:	461e      	mov	r6, r3
	struct tcp_segment segment = { 0 };
   36746:	f002 fc76 	bl	39036 <memset>
	if ((net_context_get_state(tcp->context) != NET_CONTEXT_UNCONNECTED) &&
   3674a:	6828      	ldr	r0, [r5, #0]
   3674c:	f7e7 f8fc 	bl	1d948 <net_context_get_state>
   36750:	b300      	cbz	r0, 36794 <net_tcp_prepare_reset+0x60>
	return (enum net_tcp_state)tcp->state;
   36752:	f8d5 20bc 	ldr.w	r2, [r5, #188]	; 0xbc
   36756:	f3c2 3243 	ubfx	r2, r2, #13, #4
   3675a:	2a02      	cmp	r2, #2
   3675c:	d02c      	beq.n	367b8 <net_tcp_prepare_reset+0x84>
	    (net_tcp_get_state(tcp) != NET_TCP_SYN_SENT) &&
   3675e:	2a09      	cmp	r2, #9
   36760:	d02a      	beq.n	367b8 <net_tcp_prepare_reset+0x84>
		segment.ack = tcp->send_ack;
   36762:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
   36766:	6828      	ldr	r0, [r5, #0]
   36768:	9303      	str	r3, [sp, #12]
		segment.flags = NET_TCP_RST | NET_TCP_ACK;
   3676a:	2314      	movs	r3, #20
   3676c:	f88d 3012 	strb.w	r3, [sp, #18]
		segment.seq = tcp->send_seq;
   36770:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   36774:	9302      	str	r3, [sp, #8]
		if (!local) {
   36776:	b97c      	cbnz	r4, 36798 <net_tcp_prepare_reset+0x64>
			segment.src_addr = &tcp->context->local;
   36778:	f100 031c 	add.w	r3, r0, #28
   3677c:	9306      	str	r3, [sp, #24]
		segment.wnd = 0U;
   3677e:	2200      	movs	r2, #0
		status = prepare_segment(tcp, &segment, NULL, pkt);
   36780:	4633      	mov	r3, r6
   36782:	a902      	add	r1, sp, #8
		segment.dst_addr = remote;
   36784:	9707      	str	r7, [sp, #28]
		segment.wnd = 0U;
   36786:	f8ad 2010 	strh.w	r2, [sp, #16]
		segment.options = NULL;
   3678a:	9205      	str	r2, [sp, #20]
		segment.optlen = 0U;
   3678c:	f88d 2013 	strb.w	r2, [sp, #19]
		status = prepare_segment(tcp, &segment, NULL, pkt);
   36790:	f7e7 f986 	bl	1daa0 <prepare_segment.isra.21>
}
   36794:	b009      	add	sp, #36	; 0x24
   36796:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(addr, 0, sizeof(struct sockaddr_ptr));
   36798:	2300      	movs	r3, #0
   3679a:	e9cd 3300 	strd	r3, r3, [sp]
	if (local->sa_family == AF_INET) {
   3679e:	8823      	ldrh	r3, [r4, #0]
   367a0:	2b01      	cmp	r3, #1
   367a2:	d106      	bne.n	367b2 <net_tcp_prepare_reset+0x7e>
		net_sin_ptr(addr)->sin_family = AF_INET;
   367a4:	f8ad 3000 	strh.w	r3, [sp]
		net_sin_ptr(addr)->sin_port = net_sin(local)->sin_port;
   367a8:	8863      	ldrh	r3, [r4, #2]
		net_sin_ptr(addr)->sin_addr = &net_sin(local)->sin_addr;
   367aa:	3404      	adds	r4, #4
		net_sin_ptr(addr)->sin_port = net_sin(local)->sin_port;
   367ac:	f8ad 3002 	strh.w	r3, [sp, #2]
		net_sin_ptr(addr)->sin_addr = &net_sin(local)->sin_addr;
   367b0:	9401      	str	r4, [sp, #4]
			segment.src_addr = &src_addr_ptr;
   367b2:	f8cd d018 	str.w	sp, [sp, #24]
   367b6:	e7e2      	b.n	3677e <net_tcp_prepare_reset+0x4a>
	int status = 0;
   367b8:	2000      	movs	r0, #0
	return status;
   367ba:	e7eb      	b.n	36794 <net_tcp_prepare_reset+0x60>

000367bc <send_reset.isra.29>:
	struct net_pkt *pkt = NULL;
   367bc:	2300      	movs	r3, #0
static int send_reset(struct net_context *context,
   367be:	b513      	push	{r0, r1, r4, lr}
	struct net_pkt *pkt = NULL;
   367c0:	9301      	str	r3, [sp, #4]
	ret = net_tcp_prepare_reset(context->tcp, local, remote, &pkt);
   367c2:	ab01      	add	r3, sp, #4
   367c4:	f7ff ffb6 	bl	36734 <net_tcp_prepare_reset>
	if (ret || !pkt) {
   367c8:	4604      	mov	r4, r0
   367ca:	b978      	cbnz	r0, 367ec <send_reset.isra.29+0x30>
   367cc:	9801      	ldr	r0, [sp, #4]
   367ce:	b168      	cbz	r0, 367ec <send_reset.isra.29+0x30>
	ret = net_send_data(pkt);
   367d0:	f7fe fec8 	bl	35564 <net_send_data>
	if (ret < 0) {
   367d4:	1e04      	subs	r4, r0, #0
   367d6:	da02      	bge.n	367de <send_reset.isra.29+0x22>
		net_pkt_unref(pkt);
   367d8:	9801      	ldr	r0, [sp, #4]
   367da:	f7ff fa72 	bl	35cc2 <net_pkt_unref>
	pkt->sent_or_eof = sent;
   367de:	9a01      	ldr	r2, [sp, #4]
   367e0:	f892 303d 	ldrb.w	r3, [r2, #61]	; 0x3d
   367e4:	f043 0302 	orr.w	r3, r3, #2
   367e8:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
}
   367ec:	4620      	mov	r0, r4
   367ee:	b002      	add	sp, #8
   367f0:	bd10      	pop	{r4, pc}

000367f2 <backlog_ack_timeout>:
{
   367f2:	b510      	push	{r4, lr}
	send_reset(backlog->tcp->context, NULL, &backlog->remote);
   367f4:	f850 3c0c 	ldr.w	r3, [r0, #-12]
   367f8:	f1a0 040c 	sub.w	r4, r0, #12
   367fc:	681b      	ldr	r3, [r3, #0]
   367fe:	f100 0220 	add.w	r2, r0, #32
   36802:	2100      	movs	r1, #0
   36804:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
   36806:	f7ff ffd9 	bl	367bc <send_reset.isra.29>
__ssp_bos_icheck3(memset, void *, int)
   3680a:	4620      	mov	r0, r4
}
   3680c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   36810:	2238      	movs	r2, #56	; 0x38
   36812:	2100      	movs	r1, #0
   36814:	f002 bc0f 	b.w	39036 <memset>

00036818 <net_tcp_send_pkt>:
{
   36818:	b5f0      	push	{r4, r5, r6, r7, lr}
   3681a:	b089      	sub	sp, #36	; 0x24
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
   3681c:	ab03      	add	r3, sp, #12
   3681e:	9301      	str	r3, [sp, #4]
   36820:	2314      	movs	r3, #20
	struct net_context *ctx = net_pkt_context(pkt);
   36822:	69c7      	ldr	r7, [r0, #28]
{
   36824:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
   36826:	9302      	str	r3, [sp, #8]
	if (!ctx || !ctx->tcp) {
   36828:	2f00      	cmp	r7, #0
   3682a:	d075      	beq.n	36918 <net_tcp_send_pkt+0x100>
   3682c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   3682e:	2b00      	cmp	r3, #0
   36830:	d072      	beq.n	36918 <net_tcp_send_pkt+0x100>
	net_pkt_cursor_init(pkt);
   36832:	f7ff faaa 	bl	35d8a <net_pkt_cursor_init>
	pkt->overwrite = overwrite;
   36836:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
	if (net_pkt_skip(pkt, net_pkt_ip_hdr_len(pkt) +
   3683a:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
   3683e:	f043 0301 	orr.w	r3, r3, #1
   36842:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
			 net_pkt_ip_opts_len(pkt))) {
   36846:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
	if (net_pkt_skip(pkt, net_pkt_ip_hdr_len(pkt) +
   3684a:	4620      	mov	r0, r4
   3684c:	4419      	add	r1, r3
   3684e:	f7ff fb26 	bl	35e9e <net_pkt_skip>
   36852:	4606      	mov	r6, r0
   36854:	b118      	cbz	r0, 3685e <net_tcp_send_pkt+0x46>
		return -EMSGSIZE;
   36856:	f06f 0079 	mvn.w	r0, #121	; 0x79
}
   3685a:	b009      	add	sp, #36	; 0x24
   3685c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	tcp_hdr = (struct net_tcp_hdr *)net_pkt_get_data(pkt, &tcp_access);
   3685e:	a901      	add	r1, sp, #4
   36860:	4620      	mov	r0, r4
   36862:	f7ff fc70 	bl	36146 <net_pkt_get_data>
	if (!tcp_hdr) {
   36866:	4605      	mov	r5, r0
   36868:	2800      	cmp	r0, #0
   3686a:	d0f4      	beq.n	36856 <net_tcp_send_pkt+0x3e>
	if (sys_get_be32(tcp_hdr->ack) != ctx->tcp->send_ack) {
   3686c:	3008      	adds	r0, #8
   3686e:	f7ff fee8 	bl	36642 <sys_get_be32>
   36872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   36874:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   36878:	4298      	cmp	r0, r3
   3687a:	d00a      	beq.n	36892 <net_tcp_send_pkt+0x7a>
		tcp_hdr->chksum = 0U;
   3687c:	742e      	strb	r6, [r5, #16]
   3687e:	746e      	strb	r6, [r5, #17]
		calc_chksum = true;
   36880:	2601      	movs	r6, #1
	sys_put_be16(val >> 16, dst);
   36882:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val >> 8;
   36884:	0a11      	lsrs	r1, r2, #8
	dst[1] = val;
   36886:	726a      	strb	r2, [r5, #9]
	dst[0] = val >> 8;
   36888:	f3c3 2207 	ubfx	r2, r3, #8, #8
   3688c:	7229      	strb	r1, [r5, #8]
   3688e:	72aa      	strb	r2, [r5, #10]
	dst[1] = val;
   36890:	72eb      	strb	r3, [r5, #11]
	if (ctx->tcp->sent_ack != ctx->tcp->send_ack &&
   36892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   36894:	e9d3 3225 	ldrd	r3, r2, [r3, #148]	; 0x94
   36898:	429a      	cmp	r2, r3
   3689a:	d009      	beq.n	368b0 <net_tcp_send_pkt+0x98>
		(tcp_hdr->flags & NET_TCP_ACK) == 0U) {
   3689c:	7b6b      	ldrb	r3, [r5, #13]
	if (ctx->tcp->sent_ack != ctx->tcp->send_ack &&
   3689e:	f013 0210 	ands.w	r2, r3, #16
   368a2:	d105      	bne.n	368b0 <net_tcp_send_pkt+0x98>
		calc_chksum = true;
   368a4:	2601      	movs	r6, #1
		tcp_hdr->flags |= NET_TCP_ACK;
   368a6:	f043 0310 	orr.w	r3, r3, #16
   368aa:	736b      	strb	r3, [r5, #13]
		tcp_hdr->chksum = 0U;
   368ac:	742a      	strb	r2, [r5, #16]
   368ae:	746a      	strb	r2, [r5, #17]
	net_pkt_set_data(pkt, &tcp_access);
   368b0:	a901      	add	r1, sp, #4
   368b2:	4620      	mov	r0, r4
   368b4:	f7ff fc68 	bl	36188 <net_pkt_set_data>
	if (calc_chksum) {
   368b8:	b19e      	cbz	r6, 368e2 <net_tcp_send_pkt+0xca>
		net_pkt_cursor_init(pkt);
   368ba:	4620      	mov	r0, r4
   368bc:	f7ff fa65 	bl	35d8a <net_pkt_cursor_init>
			     net_pkt_ip_opts_len(pkt));
   368c0:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
		net_pkt_skip(pkt, net_pkt_ip_hdr_len(pkt) +
   368c4:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
   368c8:	4620      	mov	r0, r4
   368ca:	4419      	add	r1, r3
   368cc:	f7ff fae7 	bl	35e9e <net_pkt_skip>
	return net_calc_chksum(pkt, IPPROTO_UDP);
}

static inline u16_t net_calc_chksum_tcp(struct net_pkt *pkt)
{
	return net_calc_chksum(pkt, IPPROTO_TCP);
   368d0:	2106      	movs	r1, #6
   368d2:	4620      	mov	r0, r4
   368d4:	f7fe ff91 	bl	357fa <net_calc_chksum>
		net_pkt_set_data(pkt, &tcp_access);
   368d8:	a901      	add	r1, sp, #4
		tcp_hdr->chksum = net_calc_chksum_tcp(pkt);
   368da:	8228      	strh	r0, [r5, #16]
		net_pkt_set_data(pkt, &tcp_access);
   368dc:	4620      	mov	r0, r4
   368de:	f7ff fc53 	bl	36188 <net_pkt_set_data>
	if (tcp_hdr->flags & NET_TCP_FIN) {
   368e2:	7b6a      	ldrb	r2, [r5, #13]
   368e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   368e6:	07d2      	lsls	r2, r2, #31
		ctx->tcp->fin_sent = 1U;
   368e8:	bf48      	it	mi
   368ea:	f893 20be 	ldrbmi.w	r2, [r3, #190]	; 0xbe
	ret = net_send_data(pkt);
   368ee:	4620      	mov	r0, r4
		ctx->tcp->fin_sent = 1U;
   368f0:	bf44      	itt	mi
   368f2:	f042 0202 	orrmi.w	r2, r2, #2
   368f6:	f883 20be 	strbmi.w	r2, [r3, #190]	; 0xbe
	ctx->tcp->sent_ack = ctx->tcp->send_ack;
   368fa:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
   368fe:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	ret = net_send_data(pkt);
   36902:	f7fe fe2f 	bl	35564 <net_send_data>
	if (ret == 0) {
   36906:	2800      	cmp	r0, #0
   36908:	d1a7      	bne.n	3685a <net_tcp_send_pkt+0x42>
	pkt->sent_or_eof = sent;
   3690a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
   3690e:	f043 0302 	orr.w	r3, r3, #2
   36912:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
   36916:	e7a0      	b.n	3685a <net_tcp_send_pkt+0x42>
		return -EINVAL;
   36918:	f06f 0015 	mvn.w	r0, #21
   3691c:	e79d      	b.n	3685a <net_tcp_send_pkt+0x42>

0003691e <tcp_retry_expired>:
	if (!sys_slist_is_empty(&tcp->sent_list)) {
   3691e:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
   36920:	b573      	push	{r0, r1, r4, r5, r6, lr}
   36922:	4604      	mov	r4, r0
	if (!sys_slist_is_empty(&tcp->sent_list)) {
   36924:	2b00      	cmp	r3, #0
   36926:	d043      	beq.n	369b0 <tcp_retry_expired+0x92>
		tcp->retry_timeout_shift++;
   36928:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   3692c:	1c53      	adds	r3, r2, #1
   3692e:	f003 031f 	and.w	r3, r3, #31
   36932:	f363 0204 	bfi	r2, r3, #0, #5
		if (tcp->retry_timeout_shift > CONFIG_NET_TCP_RETRY_COUNT) {
   36936:	2b09      	cmp	r3, #9
		tcp->retry_timeout_shift++;
   36938:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
		if (tcp->retry_timeout_shift > CONFIG_NET_TCP_RETRY_COUNT) {
   3693c:	d914      	bls.n	36968 <tcp_retry_expired+0x4a>
	struct net_context *ctx = tcp->context;
   3693e:	f850 5c48 	ldr.w	r5, [r0, #-72]
	if (ctx->recv_cb) {
   36942:	6b2e      	ldr	r6, [r5, #48]	; 0x30
   36944:	b156      	cbz	r6, 3695c <tcp_retry_expired+0x3e>
		ctx->recv_cb(ctx, NULL, NULL, NULL, -ECONNRESET,
   36946:	f850 3c44 	ldr.w	r3, [r0, #-68]
   3694a:	4628      	mov	r0, r5
   3694c:	9301      	str	r3, [sp, #4]
   3694e:	f06f 0367 	mvn.w	r3, #103	; 0x67
   36952:	9300      	str	r3, [sp, #0]
   36954:	2300      	movs	r3, #0
   36956:	461a      	mov	r2, r3
   36958:	4619      	mov	r1, r3
   3695a:	47b0      	blx	r6
	net_context_unref(ctx);
   3695c:	4628      	mov	r0, r5
}
   3695e:	b002      	add	sp, #8
   36960:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_context_unref(tcp->context);
   36964:	f7ff b816 	b.w	35994 <net_context_unref>
		k_delayed_work_submit(&tcp->retry_timer, retry_timeout(tcp));
   36968:	21c8      	movs	r1, #200	; 0xc8
   3696a:	4099      	lsls	r1, r3
   3696c:	f7e6 ffc4 	bl	1d8f8 <k_delayed_work_submit>
		pkt = CONTAINER_OF(sys_slist_peek_head(&tcp->sent_list),
   36970:	6c23      	ldr	r3, [r4, #64]	; 0x40
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   36972:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   36976:	e8d2 2faf 	lda	r2, [r2]
		if (k_work_pending(net_pkt_work(pkt))) {
   3697a:	f012 0201 	ands.w	r2, r2, #1
   3697e:	d120      	bne.n	369c2 <tcp_retry_expired+0xa4>
	pkt->pkt_queued = send;
   36980:	7999      	ldrb	r1, [r3, #6]
		pkt = CONTAINER_OF(sys_slist_peek_head(&tcp->sent_list),
   36982:	f1a3 0438 	sub.w	r4, r3, #56	; 0x38
   36986:	f041 0101 	orr.w	r1, r1, #1
   3698a:	7199      	strb	r1, [r3, #6]
	pkt->tcp_first_msg = is_1st;
   3698c:	7a59      	ldrb	r1, [r3, #9]
			net_pkt_ref(pkt);
   3698e:	4620      	mov	r0, r4
   36990:	f362 0100 	bfi	r1, r2, #0, #1
   36994:	7259      	strb	r1, [r3, #9]
   36996:	f7ff f97b 	bl	35c90 <net_pkt_ref>
		if (net_tcp_send_pkt(pkt) < 0 && !is_6lo_technology(pkt)) {
   3699a:	4620      	mov	r0, r4
   3699c:	f7ff ff3c 	bl	36818 <net_tcp_send_pkt>
   369a0:	2800      	cmp	r0, #0
   369a2:	da0e      	bge.n	369c2 <tcp_retry_expired+0xa4>
			net_pkt_unref(pkt);
   369a4:	4620      	mov	r0, r4
}
   369a6:	b002      	add	sp, #8
   369a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_pkt_unref(pkt);
   369ac:	f7ff b989 	b.w	35cc2 <net_pkt_unref>
		if (tcp->fin_sent && tcp->fin_rcvd) {
   369b0:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
   369b4:	f003 0306 	and.w	r3, r3, #6
   369b8:	2b06      	cmp	r3, #6
   369ba:	d102      	bne.n	369c2 <tcp_retry_expired+0xa4>
			net_context_unref(tcp->context);
   369bc:	f850 0c48 	ldr.w	r0, [r0, #-72]
   369c0:	e7cd      	b.n	3695e <tcp_retry_expired+0x40>
}
   369c2:	b002      	add	sp, #8
   369c4:	bd70      	pop	{r4, r5, r6, pc}

000369c6 <net_tcp_send_data>:
{
   369c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   369ca:	4680      	mov	r8, r0
   369cc:	460e      	mov	r6, r1
   369ce:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&context->tcp->sent_list, pkt, sent_list) {
   369d0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   369d2:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
   369d6:	b984      	cbnz	r4, 369fa <net_tcp_send_data+0x34>
	if (cb) {
   369d8:	bb46      	cbnz	r6, 36a2c <net_tcp_send_data+0x66>
		cb(context, 0, user_data);
   369da:	2500      	movs	r5, #0
   369dc:	e023      	b.n	36a26 <net_tcp_send_data+0x60>
	pkt->pkt_queued = send;
   369de:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
   369e2:	f043 0301 	orr.w	r3, r3, #1
   369e6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
	pkt->tcp_first_msg = is_1st;
   369ea:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   369ee:	f36f 0300 	bfc	r3, #0, #1
   369f2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   369f6:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	return node->next;
   369f8:	e7ed      	b.n	369d6 <net_tcp_send_data+0x10>
	SYS_SLIST_FOR_EACH_CONTAINER(&context->tcp->sent_list, pkt, sent_list) {
   369fa:	3c38      	subs	r4, #56	; 0x38
   369fc:	2c00      	cmp	r4, #0
   369fe:	d0eb      	beq.n	369d8 <net_tcp_send_data+0x12>
	return pkt->pkt_queued;
   36a00:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
		if (net_pkt_queued(pkt)) {
   36a04:	07da      	lsls	r2, r3, #31
   36a06:	d4f6      	bmi.n	369f6 <net_tcp_send_data+0x30>
	return pkt->tcp_first_msg;
   36a08:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
			if (!net_pkt_tcp_1st_msg(pkt)) {
   36a0c:	07db      	lsls	r3, r3, #31
   36a0e:	d402      	bmi.n	36a16 <net_tcp_send_data+0x50>
				net_pkt_ref(pkt);
   36a10:	4620      	mov	r0, r4
   36a12:	f7ff f93d 	bl	35c90 <net_pkt_ref>
		ret = net_tcp_send_pkt(pkt);
   36a16:	4620      	mov	r0, r4
   36a18:	f7ff fefe 	bl	36818 <net_tcp_send_pkt>
		if (ret < 0) {
   36a1c:	1e05      	subs	r5, r0, #0
   36a1e:	dade      	bge.n	369de <net_tcp_send_data+0x18>
				net_pkt_unref(pkt);
   36a20:	4620      	mov	r0, r4
   36a22:	f7ff f94e 	bl	35cc2 <net_pkt_unref>
}
   36a26:	4628      	mov	r0, r5
   36a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cb(context, 0, user_data);
   36a2c:	463a      	mov	r2, r7
   36a2e:	2100      	movs	r1, #0
   36a30:	4640      	mov	r0, r8
   36a32:	47b0      	blx	r6
   36a34:	e7d1      	b.n	369da <net_tcp_send_data+0x14>

00036a36 <net_tcp_init>:
}
   36a36:	4770      	bx	lr

00036a38 <net_tcp_prepare_segment>:
{
   36a38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   36a3c:	b087      	sub	sp, #28
   36a3e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   36a40:	4604      	mov	r4, r0
   36a42:	460d      	mov	r5, r1
   36a44:	4691      	mov	r9, r2
	struct tcp_segment segment = { 0 };
   36a46:	2100      	movs	r1, #0
   36a48:	2218      	movs	r2, #24
   36a4a:	4668      	mov	r0, sp
{
   36a4c:	4698      	mov	r8, r3
	struct tcp_segment segment = { 0 };
   36a4e:	f002 faf2 	bl	39036 <memset>
	if (!local) {
   36a52:	b90e      	cbnz	r6, 36a58 <net_tcp_prepare_segment+0x20>
		local = &tcp->context->local;
   36a54:	6826      	ldr	r6, [r4, #0]
   36a56:	361c      	adds	r6, #28
	if (flags & NET_TCP_ACK) {
   36a58:	06e9      	lsls	r1, r5, #27
	seq = tcp->send_seq;
   36a5a:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
	if (flags & NET_TCP_ACK) {
   36a5e:	d50f      	bpl.n	36a80 <net_tcp_prepare_segment+0x48>
   36a60:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   36a64:	f3c3 3343 	ubfx	r3, r3, #13, #4
		if (net_tcp_get_state(tcp) == NET_TCP_FIN_WAIT_1) {
   36a68:	2b07      	cmp	r3, #7
   36a6a:	d13d      	bne.n	36ae8 <net_tcp_prepare_segment+0xb0>
			if (flags & NET_TCP_FIN) {
   36a6c:	07ea      	lsls	r2, r5, #31
   36a6e:	d503      	bpl.n	36a78 <net_tcp_prepare_segment+0x40>
				flags &= ~NET_TCP_FIN;
   36a70:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
			net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   36a74:	2109      	movs	r1, #9
   36a76:	e000      	b.n	36a7a <net_tcp_prepare_segment+0x42>
				net_tcp_change_state(tcp, NET_TCP_CLOSING);
   36a78:	210a      	movs	r1, #10
			net_tcp_change_state(tcp, NET_TCP_LAST_ACK);
   36a7a:	4620      	mov	r0, r4
   36a7c:	f7e7 f96c 	bl	1dd58 <net_tcp_change_state>
	if (flags & NET_TCP_FIN) {
   36a80:	07eb      	lsls	r3, r5, #31
   36a82:	d510      	bpl.n	36aa6 <net_tcp_prepare_segment+0x6e>
   36a84:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
		flags |= NET_TCP_ACK;
   36a88:	f045 0510 	orr.w	r5, r5, #16
   36a8c:	f3c3 3343 	ubfx	r3, r3, #13, #4
		if (net_tcp_get_state(tcp) == NET_TCP_ESTABLISHED ||
   36a90:	330d      	adds	r3, #13
   36a92:	f003 030f 	and.w	r3, r3, #15
   36a96:	2b01      	cmp	r3, #1
		seq++;
   36a98:	f107 0701 	add.w	r7, r7, #1
		if (net_tcp_get_state(tcp) == NET_TCP_ESTABLISHED ||
   36a9c:	d803      	bhi.n	36aa6 <net_tcp_prepare_segment+0x6e>
			net_tcp_change_state(tcp, NET_TCP_FIN_WAIT_1);
   36a9e:	2107      	movs	r1, #7
   36aa0:	4620      	mov	r0, r4
   36aa2:	f7e7 f959 	bl	1dd58 <net_tcp_change_state>
	segment.dst_addr = remote;
   36aa6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
	return tcp->recv_wnd;
   36aa8:	f8b4 30b8 	ldrh.w	r3, [r4, #184]	; 0xb8
	segment.dst_addr = remote;
   36aac:	9205      	str	r2, [sp, #20]
	segment.seq = tcp->send_seq;
   36aae:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
	segment.wnd = wnd;
   36ab2:	f8ad 3008 	strh.w	r3, [sp, #8]
	segment.seq = tcp->send_seq;
   36ab6:	9200      	str	r2, [sp, #0]
	status = prepare_segment(tcp, &segment, *send_pkt, send_pkt);
   36ab8:	9b10      	ldr	r3, [sp, #64]	; 0x40
	segment.ack = tcp->send_ack;
   36aba:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
	status = prepare_segment(tcp, &segment, *send_pkt, send_pkt);
   36abe:	4669      	mov	r1, sp
	segment.ack = tcp->send_ack;
   36ac0:	9201      	str	r2, [sp, #4]
	status = prepare_segment(tcp, &segment, *send_pkt, send_pkt);
   36ac2:	6820      	ldr	r0, [r4, #0]
   36ac4:	681a      	ldr	r2, [r3, #0]
	segment.src_addr = (struct sockaddr_ptr *)local;
   36ac6:	9604      	str	r6, [sp, #16]
	segment.flags = flags;
   36ac8:	f88d 500a 	strb.w	r5, [sp, #10]
	segment.options = options;
   36acc:	f8cd 900c 	str.w	r9, [sp, #12]
	segment.optlen = optlen;
   36ad0:	f88d 800b 	strb.w	r8, [sp, #11]
	status = prepare_segment(tcp, &segment, *send_pkt, send_pkt);
   36ad4:	f7e6 ffe4 	bl	1daa0 <prepare_segment.isra.21>
	if (status < 0) {
   36ad8:	2800      	cmp	r0, #0
	return 0;
   36ada:	bfa4      	itt	ge
   36adc:	2000      	movge	r0, #0
	tcp->send_seq = seq;
   36ade:	f8c4 7090 	strge.w	r7, [r4, #144]	; 0x90
}
   36ae2:	b007      	add	sp, #28
   36ae4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if (net_tcp_get_state(tcp) == NET_TCP_FIN_WAIT_2) {
   36ae8:	2b08      	cmp	r3, #8
   36aea:	d0c3      	beq.n	36a74 <net_tcp_prepare_segment+0x3c>
		} else if (net_tcp_get_state(tcp) == NET_TCP_CLOSE_WAIT) {
   36aec:	2b05      	cmp	r3, #5
   36aee:	d1c7      	bne.n	36a80 <net_tcp_prepare_segment+0x48>
			tcp->flags |= NET_TCP_IS_SHUTDOWN;
   36af0:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	; 0xbc
			flags |= NET_TCP_FIN;
   36af4:	f045 0501 	orr.w	r5, r5, #1
			tcp->flags |= NET_TCP_IS_SHUTDOWN;
   36af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   36afc:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
			net_tcp_change_state(tcp, NET_TCP_LAST_ACK);
   36b00:	2106      	movs	r1, #6
   36b02:	e7ba      	b.n	36a7a <net_tcp_prepare_segment+0x42>

00036b04 <net_tcp_prepare_ack>:
{
   36b04:	b570      	push	{r4, r5, r6, lr}
   36b06:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   36b0a:	b088      	sub	sp, #32
   36b0c:	f3c3 3343 	ubfx	r3, r3, #13, #4
	switch (net_tcp_get_state(tcp)) {
   36b10:	2b03      	cmp	r3, #3
{
   36b12:	4604      	mov	r4, r0
   36b14:	460d      	mov	r5, r1
   36b16:	4616      	mov	r6, r2
	switch (net_tcp_get_state(tcp)) {
   36b18:	d00c      	beq.n	36b34 <net_tcp_prepare_ack+0x30>
   36b1a:	d304      	bcc.n	36b26 <net_tcp_prepare_ack+0x22>
   36b1c:	330a      	adds	r3, #10
   36b1e:	f003 030f 	and.w	r3, r3, #15
   36b22:	2b01      	cmp	r3, #1
   36b24:	d915      	bls.n	36b52 <net_tcp_prepare_ack+0x4e>
		return net_tcp_prepare_segment(tcp, NET_TCP_ACK, 0, 0, NULL,
   36b26:	2300      	movs	r3, #0
   36b28:	e9cd 5601 	strd	r5, r6, [sp, #4]
   36b2c:	9300      	str	r3, [sp, #0]
   36b2e:	461a      	mov	r2, r3
   36b30:	2110      	movs	r1, #16
   36b32:	e00c      	b.n	36b4e <net_tcp_prepare_ack+0x4a>
		net_tcp_set_syn_opt(tcp, options, &optionlen);
   36b34:	f10d 0217 	add.w	r2, sp, #23
   36b38:	a906      	add	r1, sp, #24
   36b3a:	f7ff fdd6 	bl	366ea <net_tcp_set_syn_opt>
		return net_tcp_prepare_segment(tcp, NET_TCP_SYN | NET_TCP_ACK,
   36b3e:	2300      	movs	r3, #0
   36b40:	2112      	movs	r1, #18
   36b42:	e9cd 5601 	strd	r5, r6, [sp, #4]
   36b46:	9300      	str	r3, [sp, #0]
   36b48:	f89d 3017 	ldrb.w	r3, [sp, #23]
   36b4c:	aa06      	add	r2, sp, #24
		return net_tcp_prepare_segment(tcp, NET_TCP_ACK, 0, 0, NULL,
   36b4e:	4620      	mov	r0, r4
   36b50:	e005      	b.n	36b5e <net_tcp_prepare_ack+0x5a>
		return net_tcp_prepare_segment(tcp, NET_TCP_FIN | NET_TCP_ACK,
   36b52:	2300      	movs	r3, #0
   36b54:	e9cd 1201 	strd	r1, r2, [sp, #4]
   36b58:	461a      	mov	r2, r3
   36b5a:	2111      	movs	r1, #17
   36b5c:	9300      	str	r3, [sp, #0]
		return net_tcp_prepare_segment(tcp, NET_TCP_ACK, 0, 0, NULL,
   36b5e:	f7ff ff6b 	bl	36a38 <net_tcp_prepare_segment>
}
   36b62:	b008      	add	sp, #32
   36b64:	bd70      	pop	{r4, r5, r6, pc}

00036b66 <send_ack.isra.34>:
	struct net_pkt *pkt = NULL;
   36b66:	2300      	movs	r3, #0
static int send_ack(struct net_context *context,
   36b68:	b513      	push	{r0, r1, r4, lr}
	struct net_pkt *pkt = NULL;
   36b6a:	9301      	str	r3, [sp, #4]
	if (!force && context->tcp->send_ack == context->tcp->sent_ack) {
   36b6c:	b91a      	cbnz	r2, 36b76 <send_ack.isra.34+0x10>
   36b6e:	e9d0 4325 	ldrd	r4, r3, [r0, #148]	; 0x94
   36b72:	429c      	cmp	r4, r3
   36b74:	d00f      	beq.n	36b96 <send_ack.isra.34+0x30>
	ret = net_tcp_prepare_ack(context->tcp, remote, &pkt);
   36b76:	aa01      	add	r2, sp, #4
   36b78:	f7ff ffc4 	bl	36b04 <net_tcp_prepare_ack>
	if (ret) {
   36b7c:	4604      	mov	r4, r0
   36b7e:	b938      	cbnz	r0, 36b90 <send_ack.isra.34+0x2a>
	ret = net_tcp_send_pkt(pkt);
   36b80:	9801      	ldr	r0, [sp, #4]
   36b82:	f7ff fe49 	bl	36818 <net_tcp_send_pkt>
	if (ret < 0) {
   36b86:	1e04      	subs	r4, r0, #0
   36b88:	da02      	bge.n	36b90 <send_ack.isra.34+0x2a>
		net_pkt_unref(pkt);
   36b8a:	9801      	ldr	r0, [sp, #4]
   36b8c:	f7ff f899 	bl	35cc2 <net_pkt_unref>
}
   36b90:	4620      	mov	r0, r4
   36b92:	b002      	add	sp, #8
   36b94:	bd10      	pop	{r4, pc}
		return 0;
   36b96:	4614      	mov	r4, r2
   36b98:	e7fa      	b.n	36b90 <send_ack.isra.34+0x2a>

00036b9a <send_syn_segment.isra.35>:
static inline int send_syn_segment(struct net_context *context,
   36b9a:	b5f0      	push	{r4, r5, r6, r7, lr}
   36b9c:	461c      	mov	r4, r3
	struct net_pkt *pkt = NULL;
   36b9e:	2300      	movs	r3, #0
static inline int send_syn_segment(struct net_context *context,
   36ba0:	b089      	sub	sp, #36	; 0x24
	if (flags == NET_TCP_SYN) {
   36ba2:	2c02      	cmp	r4, #2
static inline int send_syn_segment(struct net_context *context,
   36ba4:	4605      	mov	r5, r0
   36ba6:	460e      	mov	r6, r1
   36ba8:	4617      	mov	r7, r2
	struct net_pkt *pkt = NULL;
   36baa:	9305      	str	r3, [sp, #20]
	u8_t optionlen = 0U;
   36bac:	f88d 3013 	strb.w	r3, [sp, #19]
	if (flags == NET_TCP_SYN) {
   36bb0:	d105      	bne.n	36bbe <send_syn_segment.isra.35+0x24>
		net_tcp_set_syn_opt(context->tcp, options, &optionlen);
   36bb2:	f10d 0213 	add.w	r2, sp, #19
   36bb6:	a906      	add	r1, sp, #24
   36bb8:	6800      	ldr	r0, [r0, #0]
   36bba:	f7ff fd96 	bl	366ea <net_tcp_set_syn_opt>
	ret = net_tcp_prepare_segment(context->tcp, flags, options, optionlen,
   36bbe:	ab05      	add	r3, sp, #20
   36bc0:	e9cd 7301 	strd	r7, r3, [sp, #4]
   36bc4:	b2e1      	uxtb	r1, r4
   36bc6:	9600      	str	r6, [sp, #0]
   36bc8:	f89d 3013 	ldrb.w	r3, [sp, #19]
   36bcc:	aa06      	add	r2, sp, #24
   36bce:	6828      	ldr	r0, [r5, #0]
   36bd0:	f7ff ff32 	bl	36a38 <net_tcp_prepare_segment>
	if (ret) {
   36bd4:	4604      	mov	r4, r0
   36bd6:	b938      	cbnz	r0, 36be8 <send_syn_segment.isra.35+0x4e>
	ret = net_send_data(pkt);
   36bd8:	9805      	ldr	r0, [sp, #20]
   36bda:	f7fe fcc3 	bl	35564 <net_send_data>
	if (ret < 0) {
   36bde:	1e04      	subs	r4, r0, #0
   36be0:	da05      	bge.n	36bee <send_syn_segment.isra.35+0x54>
		net_pkt_unref(pkt);
   36be2:	9805      	ldr	r0, [sp, #20]
   36be4:	f7ff f86d 	bl	35cc2 <net_pkt_unref>
}
   36be8:	4620      	mov	r0, r4
   36bea:	b009      	add	sp, #36	; 0x24
   36bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	pkt->sent_or_eof = sent;
   36bee:	9a05      	ldr	r2, [sp, #20]
   36bf0:	f892 303d 	ldrb.w	r3, [r2, #61]	; 0x3d
   36bf4:	f043 0302 	orr.w	r3, r3, #2
   36bf8:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
	context->tcp->send_seq++;
   36bfc:	682a      	ldr	r2, [r5, #0]
   36bfe:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   36c02:	3301      	adds	r3, #1
   36c04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	return ret;
   36c08:	e7ee      	b.n	36be8 <send_syn_segment.isra.35+0x4e>

00036c0a <net_tcp_ack_received>:
{
   36c0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct net_tcp *tcp = ctx->tcp;
   36c0e:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
{
   36c10:	b08b      	sub	sp, #44	; 0x2c
	return (s32_t)(seq1 - seq2);
   36c12:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   36c16:	4680      	mov	r8, r0
   36c18:	1acb      	subs	r3, r1, r3
	if (net_tcp_seq_greater(ack, ctx->tcp->send_seq)) {
   36c1a:	2b00      	cmp	r3, #0
{
   36c1c:	4689      	mov	r9, r1
		return false;
   36c1e:	f04f 0700 	mov.w	r7, #0
	if (net_tcp_seq_greater(ack, ctx->tcp->send_seq)) {
   36c22:	dc22      	bgt.n	36c6a <net_tcp_ack_received+0x60>
		NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
   36c24:	f04f 0b14 	mov.w	fp, #20
Z_GENLIST_IS_EMPTY(slist)
   36c28:	f8d5 4088 	ldr.w	r4, [r5, #136]	; 0x88
	while (!sys_slist_is_empty(list)) {
   36c2c:	bb0c      	cbnz	r4, 36c72 <net_tcp_ack_received+0x68>
	if (valid_ack) {
   36c2e:	2f00      	cmp	r7, #0
   36c30:	f000 80a6 	beq.w	36d80 <net_tcp_ack_received+0x176>
		restart_timer(ctx->tcp);
   36c34:	f8d8 403c 	ldr.w	r4, [r8, #60]	; 0x3c
	if (!sys_slist_is_empty(&tcp->sent_list)) {
   36c38:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   36c3c:	f104 0048 	add.w	r0, r4, #72	; 0x48
   36c40:	2b00      	cmp	r3, #0
   36c42:	f000 8083 	beq.w	36d4c <net_tcp_ack_received+0x142>
		tcp->flags |= NET_TCP_RETRYING;
   36c46:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	; 0xbc
		k_delayed_work_submit(&tcp->retry_timer, retry_timeout(tcp));
   36c4a:	21c8      	movs	r1, #200	; 0xc8
		tcp->flags |= NET_TCP_RETRYING;
   36c4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   36c50:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
		tcp->retry_timeout_shift = 0U;
   36c54:	f36f 0304 	bfc	r3, #0, #5
   36c58:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
		k_delayed_work_submit(&tcp->retry_timer, retry_timeout(tcp));
   36c5c:	f7e6 fe4c 	bl	1d8f8 <k_delayed_work_submit>
	(void)net_tcp_send_data(context, NULL, NULL);
   36c60:	2200      	movs	r2, #0
   36c62:	4640      	mov	r0, r8
   36c64:	4611      	mov	r1, r2
   36c66:	f7ff feae 	bl	369c6 <net_tcp_send_data>
}
   36c6a:	4638      	mov	r0, r7
   36c6c:	b00b      	add	sp, #44	; 0x2c
   36c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pkt = CONTAINER_OF(head, struct net_pkt, sent_list);
   36c72:	f1a4 0638 	sub.w	r6, r4, #56	; 0x38
		NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
   36c76:	ab05      	add	r3, sp, #20
		net_pkt_cursor_init(pkt);
   36c78:	4630      	mov	r0, r6
		NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
   36c7a:	e9cd 3b03 	strd	r3, fp, [sp, #12]
		net_pkt_cursor_init(pkt);
   36c7e:	f7ff f884 	bl	35d8a <net_pkt_cursor_init>
	pkt->overwrite = overwrite;
   36c82:	7963      	ldrb	r3, [r4, #5]
		if (net_pkt_skip(pkt, net_pkt_ip_hdr_len(pkt) +
   36c84:	7921      	ldrb	r1, [r4, #4]
   36c86:	f043 0301 	orr.w	r3, r3, #1
   36c8a:	7163      	strb	r3, [r4, #5]
				 net_pkt_ip_opts_len(pkt))) {
   36c8c:	7ae3      	ldrb	r3, [r4, #11]
		if (net_pkt_skip(pkt, net_pkt_ip_hdr_len(pkt) +
   36c8e:	4630      	mov	r0, r6
   36c90:	4419      	add	r1, r3
   36c92:	f7ff f904 	bl	35e9e <net_pkt_skip>
   36c96:	b170      	cbz	r0, 36cb6 <net_tcp_ack_received+0xac>
Z_GENLIST_REMOVE(slist, snode)
   36c98:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
   36c9c:	6823      	ldr	r3, [r4, #0]
   36c9e:	4294      	cmp	r4, r2
	list->head = node;
   36ca0:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
	list->tail = node;
   36ca4:	bf08      	it	eq
   36ca6:	f8c5 308c 	streq.w	r3, [r5, #140]	; 0x8c
	parent->next = child;
   36caa:	2300      	movs	r3, #0
			net_pkt_unref(pkt);
   36cac:	4630      	mov	r0, r6
   36cae:	6023      	str	r3, [r4, #0]
   36cb0:	f7ff f807 	bl	35cc2 <net_pkt_unref>
			continue;
   36cb4:	e7b8      	b.n	36c28 <net_tcp_ack_received+0x1e>
		tcp_hdr = (struct net_tcp_hdr *)net_pkt_get_data(pkt,
   36cb6:	a903      	add	r1, sp, #12
   36cb8:	4630      	mov	r0, r6
   36cba:	f7ff fa44 	bl	36146 <net_pkt_get_data>
		if (!tcp_hdr) {
   36cbe:	2800      	cmp	r0, #0
   36cc0:	d0ea      	beq.n	36c98 <net_tcp_ack_received+0x8e>
	return net_pkt_skip(pkt, access->size);
   36cc2:	9904      	ldr	r1, [sp, #16]
   36cc4:	9001      	str	r0, [sp, #4]
   36cc6:	4630      	mov	r0, r6
   36cc8:	f7ff f8e9 	bl	35e9e <net_pkt_skip>
		seq_len = net_pkt_remaining_data(pkt);
   36ccc:	4630      	mov	r0, r6
   36cce:	f7ff f960 	bl	35f92 <net_pkt_remaining_data>
   36cd2:	4682      	mov	sl, r0
		if (tcp_hdr->flags & NET_TCP_SYN) {
   36cd4:	9a01      	ldr	r2, [sp, #4]
   36cd6:	7b53      	ldrb	r3, [r2, #13]
   36cd8:	0799      	lsls	r1, r3, #30
			seq_len += 1U;
   36cda:	bf48      	it	mi
   36cdc:	f100 0a01 	addmi.w	sl, r0, #1
		if (tcp_hdr->flags & NET_TCP_FIN) {
   36ce0:	f013 0301 	ands.w	r3, r3, #1
		last_seq = sys_get_be32(tcp_hdr->seq) + seq_len - 1;
   36ce4:	f102 0004 	add.w	r0, r2, #4
			seq_len += 1U;
   36ce8:	bf18      	it	ne
   36cea:	f10a 0a01 	addne.w	sl, sl, #1
   36cee:	9301      	str	r3, [sp, #4]
		last_seq = sys_get_be32(tcp_hdr->seq) + seq_len - 1;
   36cf0:	f7ff fca7 	bl	36642 <sys_get_be32>
   36cf4:	f109 0201 	add.w	r2, r9, #1
   36cf8:	1a10      	subs	r0, r2, r0
   36cfa:	eba0 010a 	sub.w	r1, r0, sl
		if (!net_tcp_seq_greater(ack, last_seq)) {
   36cfe:	2900      	cmp	r1, #0
   36d00:	dd95      	ble.n	36c2e <net_tcp_ack_received+0x24>
		if (tcp_hdr->flags & NET_TCP_FIN) {
   36d02:	9b01      	ldr	r3, [sp, #4]
   36d04:	b14b      	cbz	r3, 36d1a <net_tcp_ack_received+0x110>
   36d06:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   36d0a:	f3c3 3343 	ubfx	r3, r3, #13, #4
			if (s == NET_TCP_FIN_WAIT_1) {
   36d0e:	2b07      	cmp	r3, #7
   36d10:	d118      	bne.n	36d44 <net_tcp_ack_received+0x13a>
				net_tcp_change_state(tcp, NET_TCP_FIN_WAIT_2);
   36d12:	2108      	movs	r1, #8
				net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   36d14:	4628      	mov	r0, r5
   36d16:	f7e7 f81f 	bl	1dd58 <net_tcp_change_state>
Z_GENLIST_REMOVE(slist, snode)
   36d1a:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
   36d1e:	6823      	ldr	r3, [r4, #0]
   36d20:	4294      	cmp	r4, r2
	parent->next = child;
   36d22:	f04f 0200 	mov.w	r2, #0
	list->head = node;
   36d26:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
	list->tail = node;
   36d2a:	bf08      	it	eq
   36d2c:	f8c5 308c 	streq.w	r3, [r5, #140]	; 0x8c
	pkt->sent_or_eof = sent;
   36d30:	7963      	ldrb	r3, [r4, #5]
	parent->next = child;
   36d32:	6022      	str	r2, [r4, #0]
   36d34:	f362 0341 	bfi	r3, r2, #1, #1
   36d38:	7163      	strb	r3, [r4, #5]
		net_pkt_unref(pkt);
   36d3a:	4630      	mov	r0, r6
   36d3c:	f7fe ffc1 	bl	35cc2 <net_pkt_unref>
		valid_ack = true;
   36d40:	2701      	movs	r7, #1
   36d42:	e771      	b.n	36c28 <net_tcp_ack_received+0x1e>
			} else if (s == NET_TCP_CLOSING) {
   36d44:	2b0a      	cmp	r3, #10
   36d46:	d1e8      	bne.n	36d1a <net_tcp_ack_received+0x110>
				net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   36d48:	2109      	movs	r1, #9
   36d4a:	e7e3      	b.n	36d14 <net_tcp_ack_received+0x10a>
			(tcp->fin_sent && tcp->fin_rcvd)) {
   36d4c:	f894 30be 	ldrb.w	r3, [r4, #190]	; 0xbe
	} else if (CONFIG_NET_TCP_TIME_WAIT_DELAY != 0 &&
   36d50:	f003 0306 	and.w	r3, r3, #6
   36d54:	2b06      	cmp	r3, #6
   36d56:	d106      	bne.n	36d66 <net_tcp_ack_received+0x15c>
		k_delayed_work_submit(&tcp->retry_timer,
   36d58:	21fa      	movs	r1, #250	; 0xfa
   36d5a:	f7e6 fdcd 	bl	1d8f8 <k_delayed_work_submit>
		net_context_ref(tcp->context);
   36d5e:	6820      	ldr	r0, [r4, #0]
   36d60:	f7fe fe0e 	bl	35980 <net_context_ref>
   36d64:	e77c      	b.n	36c60 <net_tcp_ack_received+0x56>
		k_delayed_work_cancel(&tcp->retry_timer);
   36d66:	f7f7 fc8d 	bl	2e684 <k_delayed_work_cancel>
		tcp->flags &= ~NET_TCP_RETRYING;
   36d6a:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	; 0xbc
   36d6e:	f3c3 1247 	ubfx	r2, r3, #5, #8
   36d72:	f022 0210 	bic.w	r2, r2, #16
   36d76:	f362 134c 	bfi	r3, r2, #5, #8
   36d7a:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
   36d7e:	e76f      	b.n	36c60 <net_tcp_ack_received+0x56>
	return true;
   36d80:	2701      	movs	r7, #1
   36d82:	e772      	b.n	36c6a <net_tcp_ack_received+0x60>

00036d84 <handle_timewait_timeout>:
   36d84:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
   36d86:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (net_tcp_get_state(tcp) == NET_TCP_TIME_WAIT) {
   36d88:	f3c3 3343 	ubfx	r3, r3, #13, #4
   36d8c:	2b09      	cmp	r3, #9
{
   36d8e:	4604      	mov	r4, r0
	if (net_tcp_get_state(tcp) == NET_TCP_TIME_WAIT) {
   36d90:	d116      	bne.n	36dc0 <handle_timewait_timeout+0x3c>
		net_tcp_change_state(tcp, NET_TCP_CLOSED);
   36d92:	3868      	subs	r0, #104	; 0x68
   36d94:	2100      	movs	r1, #0
   36d96:	f7e6 ffdf 	bl	1dd58 <net_tcp_change_state>
		if (tcp->context->recv_cb) {
   36d9a:	f854 0c68 	ldr.w	r0, [r4, #-104]
   36d9e:	6b05      	ldr	r5, [r0, #48]	; 0x30
   36da0:	b13d      	cbz	r5, 36db2 <handle_timewait_timeout+0x2e>
			tcp->context->recv_cb(tcp->context, NULL, NULL, NULL,
   36da2:	f854 3c64 	ldr.w	r3, [r4, #-100]
   36da6:	9301      	str	r3, [sp, #4]
   36da8:	2300      	movs	r3, #0
   36daa:	9300      	str	r3, [sp, #0]
   36dac:	461a      	mov	r2, r3
   36dae:	4619      	mov	r1, r3
   36db0:	47a8      	blx	r5
		net_context_unref(tcp->context);
   36db2:	f854 0c68 	ldr.w	r0, [r4, #-104]
}
   36db6:	b003      	add	sp, #12
   36db8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_context_unref(tcp->context);
   36dbc:	f7fe bdea 	b.w	35994 <net_context_unref>
}
   36dc0:	b003      	add	sp, #12
   36dc2:	bd30      	pop	{r4, r5, pc}

00036dc4 <handle_ack_timeout>:
   36dc4:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
{
   36dc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (net_tcp_get_state(tcp) == NET_TCP_LAST_ACK) {
   36dca:	f3c3 3343 	ubfx	r3, r3, #13, #4
   36dce:	2b06      	cmp	r3, #6
{
   36dd0:	4604      	mov	r4, r0
	if (net_tcp_get_state(tcp) == NET_TCP_LAST_ACK) {
   36dd2:	d116      	bne.n	36e02 <handle_ack_timeout+0x3e>
		net_tcp_change_state(tcp, NET_TCP_CLOSED);
   36dd4:	3808      	subs	r0, #8
   36dd6:	2100      	movs	r1, #0
   36dd8:	f7e6 ffbe 	bl	1dd58 <net_tcp_change_state>
		if (tcp->context->recv_cb) {
   36ddc:	f854 0c08 	ldr.w	r0, [r4, #-8]
   36de0:	6b05      	ldr	r5, [r0, #48]	; 0x30
   36de2:	b13d      	cbz	r5, 36df4 <handle_ack_timeout+0x30>
			tcp->context->recv_cb(tcp->context, NULL, NULL, NULL,
   36de4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   36de8:	9301      	str	r3, [sp, #4]
   36dea:	2300      	movs	r3, #0
   36dec:	9300      	str	r3, [sp, #0]
   36dee:	461a      	mov	r2, r3
   36df0:	4619      	mov	r1, r3
   36df2:	47a8      	blx	r5
		net_context_unref(tcp->context);
   36df4:	f854 0c08 	ldr.w	r0, [r4, #-8]
}
   36df8:	b003      	add	sp, #12
   36dfa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_context_unref(tcp->context);
   36dfe:	f7fe bdc9 	b.w	35994 <net_context_unref>
}
   36e02:	b003      	add	sp, #12
   36e04:	bd30      	pop	{r4, r5, pc}

00036e06 <net_tcp_validate_seq>:
{
   36e06:	b510      	push	{r4, lr}
   36e08:	4604      	mov	r4, r0
	return (net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   36e0a:	1d08      	adds	r0, r1, #4
   36e0c:	f7ff fc19 	bl	36642 <sys_get_be32>
   36e10:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   36e14:	1a83      	subs	r3, r0, r2
				tcp->send_ack) >= 0) &&
   36e16:	2b00      	cmp	r3, #0
	return tcp->recv_wnd;
   36e18:	bfa9      	itett	ge
   36e1a:	f8b4 30b8 	ldrhge.w	r3, [r4, #184]	; 0xb8
				tcp->send_ack) >= 0) &&
   36e1e:	2000      	movlt	r0, #0
   36e20:	189b      	addge	r3, r3, r2
   36e22:	1ac0      	subge	r0, r0, r3
   36e24:	bfa8      	it	ge
   36e26:	0fc0      	lsrge	r0, r0, #31
}
   36e28:	bd10      	pop	{r4, pc}

00036e2a <net_tcp_finalize>:
{
   36e2a:	b530      	push	{r4, r5, lr}
   36e2c:	b089      	sub	sp, #36	; 0x24
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
   36e2e:	ab03      	add	r3, sp, #12
   36e30:	9301      	str	r3, [sp, #4]
   36e32:	2314      	movs	r3, #20
	tcp_hdr = (struct net_tcp_hdr *)net_pkt_get_data(pkt, &tcp_access);
   36e34:	a901      	add	r1, sp, #4
{
   36e36:	4605      	mov	r5, r0
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
   36e38:	9302      	str	r3, [sp, #8]
	tcp_hdr = (struct net_tcp_hdr *)net_pkt_get_data(pkt, &tcp_access);
   36e3a:	f7ff f984 	bl	36146 <net_pkt_get_data>
	if (!tcp_hdr) {
   36e3e:	4604      	mov	r4, r0
   36e40:	b188      	cbz	r0, 36e66 <net_tcp_finalize+0x3c>
	tcp_hdr->chksum = 0U;
   36e42:	2300      	movs	r3, #0
   36e44:	7403      	strb	r3, [r0, #16]
   36e46:	7443      	strb	r3, [r0, #17]
	if (net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
   36e48:	6a28      	ldr	r0, [r5, #32]
   36e4a:	f7fe fcb6 	bl	357ba <net_if_need_calc_tx_checksum>
   36e4e:	b120      	cbz	r0, 36e5a <net_tcp_finalize+0x30>
   36e50:	2106      	movs	r1, #6
   36e52:	4628      	mov	r0, r5
   36e54:	f7fe fcd1 	bl	357fa <net_calc_chksum>
		tcp_hdr->chksum = net_calc_chksum_tcp(pkt);
   36e58:	8220      	strh	r0, [r4, #16]
	return net_pkt_set_data(pkt, &tcp_access);
   36e5a:	a901      	add	r1, sp, #4
   36e5c:	4628      	mov	r0, r5
   36e5e:	f7ff f993 	bl	36188 <net_pkt_set_data>
}
   36e62:	b009      	add	sp, #36	; 0x24
   36e64:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
   36e66:	f06f 0068 	mvn.w	r0, #104	; 0x68
   36e6a:	e7fa      	b.n	36e62 <net_tcp_finalize+0x38>

00036e6c <net_tcp_parse_opts>:
{
   36e6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   36e6e:	4605      	mov	r5, r0
   36e70:	460c      	mov	r4, r1
   36e72:	4616      	mov	r6, r2
	while (opt_totlen) {
   36e74:	b174      	cbz	r4, 36e94 <net_tcp_parse_opts+0x28>
	return net_pkt_read(pkt, data, 1);
   36e76:	2201      	movs	r2, #1
   36e78:	f10d 0106 	add.w	r1, sp, #6
   36e7c:	4628      	mov	r0, r5
   36e7e:	f7ff f824 	bl	35eca <net_pkt_read>
		if (net_pkt_read_u8(pkt, &opt)) {
   36e82:	b118      	cbz	r0, 36e8c <net_tcp_parse_opts+0x20>
	return -EINVAL;
   36e84:	f06f 0015 	mvn.w	r0, #21
}
   36e88:	b002      	add	sp, #8
   36e8a:	bd70      	pop	{r4, r5, r6, pc}
		if (opt == NET_TCP_END_OPT) {
   36e8c:	f89d 2006 	ldrb.w	r2, [sp, #6]
		opt_totlen--;
   36e90:	1e63      	subs	r3, r4, #1
		if (opt == NET_TCP_END_OPT) {
   36e92:	b90a      	cbnz	r2, 36e98 <net_tcp_parse_opts+0x2c>
	return 0;
   36e94:	2000      	movs	r0, #0
   36e96:	e7f7      	b.n	36e88 <net_tcp_parse_opts+0x1c>
		} else if (opt == NET_TCP_NOP_OPT) {
   36e98:	2a01      	cmp	r2, #1
   36e9a:	d028      	beq.n	36eee <net_tcp_parse_opts+0x82>
		if (!opt_totlen) {
   36e9c:	2b00      	cmp	r3, #0
   36e9e:	d0f1      	beq.n	36e84 <net_tcp_parse_opts+0x18>
   36ea0:	2201      	movs	r2, #1
   36ea2:	f10d 0107 	add.w	r1, sp, #7
   36ea6:	4628      	mov	r0, r5
   36ea8:	f7ff f80f 	bl	35eca <net_pkt_read>
		if (net_pkt_read_u8(pkt, &optlen) || optlen < 2) {
   36eac:	2800      	cmp	r0, #0
   36eae:	d1e9      	bne.n	36e84 <net_tcp_parse_opts+0x18>
   36eb0:	f89d 1007 	ldrb.w	r1, [sp, #7]
   36eb4:	2901      	cmp	r1, #1
   36eb6:	d9e5      	bls.n	36e84 <net_tcp_parse_opts+0x18>
		optlen -= 2U;
   36eb8:	3902      	subs	r1, #2
   36eba:	b2c9      	uxtb	r1, r1
		opt_totlen--;
   36ebc:	3c02      	subs	r4, #2
		if (opt_totlen < optlen) {
   36ebe:	42a1      	cmp	r1, r4
		optlen -= 2U;
   36ec0:	f88d 1007 	strb.w	r1, [sp, #7]
		if (opt_totlen < optlen) {
   36ec4:	dcde      	bgt.n	36e84 <net_tcp_parse_opts+0x18>
		switch (opt) {
   36ec6:	f89d 3006 	ldrb.w	r3, [sp, #6]
   36eca:	2b02      	cmp	r3, #2
   36ecc:	d10b      	bne.n	36ee6 <net_tcp_parse_opts+0x7a>
			if (optlen != 2U) {
   36ece:	2902      	cmp	r1, #2
   36ed0:	d1d8      	bne.n	36e84 <net_tcp_parse_opts+0x18>
			if (net_pkt_read_be16(pkt, &opts->mss)) {
   36ed2:	4631      	mov	r1, r6
   36ed4:	4628      	mov	r0, r5
   36ed6:	f7ff f801 	bl	35edc <net_pkt_read_be16>
			if (net_pkt_skip(pkt, optlen)) {
   36eda:	2800      	cmp	r0, #0
   36edc:	d1d2      	bne.n	36e84 <net_tcp_parse_opts+0x18>
		opt_totlen -= optlen;
   36ede:	f89d 3007 	ldrb.w	r3, [sp, #7]
   36ee2:	1ae4      	subs	r4, r4, r3
   36ee4:	e7c6      	b.n	36e74 <net_tcp_parse_opts+0x8>
			if (net_pkt_skip(pkt, optlen)) {
   36ee6:	4628      	mov	r0, r5
   36ee8:	f7fe ffd9 	bl	35e9e <net_pkt_skip>
   36eec:	e7f5      	b.n	36eda <net_tcp_parse_opts+0x6e>
		opt_totlen--;
   36eee:	461c      	mov	r4, r3
   36ef0:	e7c0      	b.n	36e74 <net_tcp_parse_opts+0x8>

00036ef2 <net_tcp_put>:
{
   36ef2:	b530      	push	{r4, r5, lr}
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   36ef4:	f8b0 3078 	ldrh.w	r3, [r0, #120]	; 0x78
{
   36ef8:	b087      	sub	sp, #28
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   36efa:	2b06      	cmp	r3, #6
{
   36efc:	4604      	mov	r4, r0
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   36efe:	d145      	bne.n	36f8c <net_tcp_put+0x9a>
		if ((net_context_get_state(context) == NET_CONTEXT_CONNECTED ||
   36f00:	f7e6 fd22 	bl	1d948 <net_context_get_state>
   36f04:	2802      	cmp	r0, #2
   36f06:	d10f      	bne.n	36f28 <net_tcp_put+0x36>
		    && context->tcp
   36f08:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   36f0a:	b998      	cbnz	r0, 36f34 <net_tcp_put+0x42>
		if (context->tcp &&
   36f0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   36f0e:	b143      	cbz	r3, 36f22 <net_tcp_put+0x30>
   36f10:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   36f14:	f3c3 3343 	ubfx	r3, r3, #13, #4
   36f18:	2b02      	cmp	r3, #2
   36f1a:	d102      	bne.n	36f22 <net_tcp_put+0x30>
			net_context_unref(context);
   36f1c:	4620      	mov	r0, r4
   36f1e:	f7fe fd39 	bl	35994 <net_context_unref>
		return -ENOTCONN;
   36f22:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   36f26:	e020      	b.n	36f6a <net_tcp_put+0x78>
		     net_context_get_state(context) == NET_CONTEXT_LISTENING)
   36f28:	4620      	mov	r0, r4
   36f2a:	f7e6 fd0d 	bl	1d948 <net_context_get_state>
		if ((net_context_get_state(context) == NET_CONTEXT_CONNECTED ||
   36f2e:	2803      	cmp	r0, #3
   36f30:	d0ea      	beq.n	36f08 <net_tcp_put+0x16>
   36f32:	e7eb      	b.n	36f0c <net_tcp_put+0x1a>
		    && !context->tcp->fin_rcvd) {
   36f34:	f890 50be 	ldrb.w	r5, [r0, #190]	; 0xbe
   36f38:	f015 0504 	ands.w	r5, r5, #4
   36f3c:	d1e6      	bne.n	36f0c <net_tcp_put+0x1a>
			k_delayed_work_submit(&context->tcp->fin_timer,
   36f3e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   36f42:	3028      	adds	r0, #40	; 0x28
   36f44:	f7e6 fcd8 	bl	1d8f8 <k_delayed_work_submit>
	ret = net_tcp_prepare_segment(ctx->tcp, NET_TCP_FIN, NULL, 0,
   36f48:	ab05      	add	r3, sp, #20
   36f4a:	9302      	str	r3, [sp, #8]
				      NULL, &ctx->remote, &pkt);
   36f4c:	f104 0324 	add.w	r3, r4, #36	; 0x24
	ret = net_tcp_prepare_segment(ctx->tcp, NET_TCP_FIN, NULL, 0,
   36f50:	e9cd 5300 	strd	r5, r3, [sp]
   36f54:	462a      	mov	r2, r5
   36f56:	462b      	mov	r3, r5
   36f58:	2101      	movs	r1, #1
   36f5a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
	struct net_pkt *pkt = NULL;
   36f5c:	9505      	str	r5, [sp, #20]
	ret = net_tcp_prepare_segment(ctx->tcp, NET_TCP_FIN, NULL, 0,
   36f5e:	f7ff fd6b 	bl	36a38 <net_tcp_prepare_segment>
	if (ret || !pkt) {
   36f62:	b908      	cbnz	r0, 36f68 <net_tcp_put+0x76>
   36f64:	9905      	ldr	r1, [sp, #20]
   36f66:	b911      	cbnz	r1, 36f6e <net_tcp_put+0x7c>
			return 0;
   36f68:	2000      	movs	r0, #0
}
   36f6a:	b007      	add	sp, #28
   36f6c:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_IS_EMPTY(slist)
   36f6e:	4620      	mov	r0, r4
   36f70:	f850 3f3c 	ldr.w	r3, [r0, #60]!
   36f74:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
	net_tcp_queue_pkt(ctx, pkt);
   36f78:	f7ff fb77 	bl	3666a <net_tcp_queue_pkt.isra.22>
	if (flush) {
   36f7c:	2d00      	cmp	r5, #0
   36f7e:	d1f3      	bne.n	36f68 <net_tcp_put+0x76>
	(void)net_tcp_send_data(context, NULL, NULL);
   36f80:	462a      	mov	r2, r5
   36f82:	4629      	mov	r1, r5
   36f84:	4620      	mov	r0, r4
   36f86:	f7ff fd1e 	bl	369c6 <net_tcp_send_data>
   36f8a:	e7ed      	b.n	36f68 <net_tcp_put+0x76>
	return -EOPNOTSUPP;
   36f8c:	f06f 005e 	mvn.w	r0, #94	; 0x5e
   36f90:	e7eb      	b.n	36f6a <net_tcp_put+0x78>

00036f92 <net_tcp_listen>:
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   36f92:	f8b0 3078 	ldrh.w	r3, [r0, #120]	; 0x78
{
   36f96:	b510      	push	{r4, lr}
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   36f98:	2b06      	cmp	r3, #6
{
   36f9a:	4604      	mov	r4, r0
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   36f9c:	d109      	bne.n	36fb2 <net_tcp_listen+0x20>
		net_tcp_change_state(context->tcp, NET_TCP_LISTEN);
   36f9e:	2101      	movs	r1, #1
   36fa0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   36fa2:	f7e6 fed9 	bl	1dd58 <net_tcp_change_state>
		net_context_set_state(context, NET_CONTEXT_LISTENING);
   36fa6:	4620      	mov	r0, r4
   36fa8:	2103      	movs	r1, #3
   36faa:	f7e6 fced 	bl	1d988 <net_context_set_state>
		return 0;
   36fae:	2000      	movs	r0, #0
}
   36fb0:	bd10      	pop	{r4, pc}
	return -EOPNOTSUPP;
   36fb2:	f06f 005e 	mvn.w	r0, #94	; 0x5e
   36fb6:	e7fb      	b.n	36fb0 <net_tcp_listen+0x1e>

00036fb8 <net_tcp_update_recv_wnd>:
	if (!context->tcp) {
   36fb8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   36fba:	b14a      	cbz	r2, 36fd0 <net_tcp_update_recv_wnd+0x18>
	new_win = context->tcp->recv_wnd + delta;
   36fbc:	f8b2 30b8 	ldrh.w	r3, [r2, #184]	; 0xb8
   36fc0:	4419      	add	r1, r3
	if (new_win < 0 || new_win > UINT16_MAX) {
   36fc2:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   36fc6:	d206      	bcs.n	36fd6 <net_tcp_update_recv_wnd+0x1e>
	context->tcp->recv_wnd = new_win;
   36fc8:	f8a2 10b8 	strh.w	r1, [r2, #184]	; 0xb8
	return 0;
   36fcc:	2000      	movs	r0, #0
   36fce:	4770      	bx	lr
		return -EPROTOTYPE;
   36fd0:	f06f 006a 	mvn.w	r0, #106	; 0x6a
   36fd4:	4770      	bx	lr
		return -EINVAL;
   36fd6:	f06f 0015 	mvn.w	r0, #21
}
   36fda:	4770      	bx	lr

00036fdc <net_tcp_input>:

struct net_tcp_hdr *net_tcp_input(struct net_pkt *pkt,
				  struct net_pkt_data_access *tcp_access)
{
   36fdc:	b570      	push	{r4, r5, r6, lr}
   36fde:	4604      	mov	r4, r0
	struct net_tcp_hdr *tcp_hdr;

	if (IS_ENABLED(CONFIG_NET_TCP_CHECKSUM) &&
	    net_if_need_calc_rx_checksum(net_pkt_iface(pkt)) &&
   36fe0:	6a00      	ldr	r0, [r0, #32]
{
   36fe2:	460e      	mov	r6, r1
	    net_if_need_calc_rx_checksum(net_pkt_iface(pkt)) &&
   36fe4:	f7fe fbeb 	bl	357be <net_if_need_calc_rx_checksum>
	if (IS_ENABLED(CONFIG_NET_TCP_CHECKSUM) &&
   36fe8:	b940      	cbnz	r0, 36ffc <net_tcp_input+0x20>
	    net_calc_chksum_tcp(pkt) != 0U) {
		NET_DBG("DROP: checksum mismatch");
		goto drop;
	}

	tcp_hdr = (struct net_tcp_hdr *)net_pkt_get_data(pkt, tcp_access);
   36fea:	4631      	mov	r1, r6
   36fec:	4620      	mov	r0, r4
   36fee:	f7ff f8aa 	bl	36146 <net_pkt_get_data>
	if (tcp_hdr && !net_pkt_set_data(pkt, tcp_access)) {
   36ff2:	4605      	mov	r5, r0
   36ff4:	b948      	cbnz	r0, 3700a <net_tcp_input+0x2e>
		return tcp_hdr;
	}

drop:
	net_stats_update_tcp_seg_chkerr(net_pkt_iface(pkt));
	return NULL;
   36ff6:	2500      	movs	r5, #0
}
   36ff8:	4628      	mov	r0, r5
   36ffa:	bd70      	pop	{r4, r5, r6, pc}
   36ffc:	2106      	movs	r1, #6
   36ffe:	4620      	mov	r0, r4
   37000:	f7fe fbfb 	bl	357fa <net_calc_chksum>
	    net_if_need_calc_rx_checksum(net_pkt_iface(pkt)) &&
   37004:	2800      	cmp	r0, #0
   37006:	d0f0      	beq.n	36fea <net_tcp_input+0xe>
   37008:	e7f5      	b.n	36ff6 <net_tcp_input+0x1a>
	if (tcp_hdr && !net_pkt_set_data(pkt, tcp_access)) {
   3700a:	4631      	mov	r1, r6
   3700c:	4620      	mov	r0, r4
   3700e:	f7ff f8bb 	bl	36188 <net_pkt_set_data>
   37012:	2800      	cmp	r0, #0
   37014:	d0f0      	beq.n	36ff8 <net_tcp_input+0x1c>
drop:
   37016:	e7ee      	b.n	36ff6 <net_tcp_input+0x1a>

00037018 <net_udp_create>:
#include "net_stats.h"

#define PKT_WAIT_TIME K_SECONDS(1)

int net_udp_create(struct net_pkt *pkt, u16_t src_port, u16_t dst_port)
{
   37018:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   3701a:	2308      	movs	r3, #8
{
   3701c:	460e      	mov	r6, r1
	struct net_udp_hdr *udp_hdr;

	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, &udp_access);
   3701e:	eb0d 0103 	add.w	r1, sp, r3
{
   37022:	4604      	mov	r4, r0
   37024:	4615      	mov	r5, r2
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   37026:	f8cd d008 	str.w	sp, [sp, #8]
   3702a:	9303      	str	r3, [sp, #12]
	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, &udp_access);
   3702c:	f7ff f88b 	bl	36146 <net_pkt_get_data>
	if (!udp_hdr) {
   37030:	b160      	cbz	r0, 3704c <net_udp_create+0x34>
		return -ENOBUFS;
	}

	udp_hdr->src_port = src_port;
	udp_hdr->dst_port = dst_port;
	udp_hdr->len      = 0U;
   37032:	2300      	movs	r3, #0
	udp_hdr->src_port = src_port;
   37034:	8006      	strh	r6, [r0, #0]
	udp_hdr->dst_port = dst_port;
   37036:	8045      	strh	r5, [r0, #2]
	udp_hdr->len      = 0U;
   37038:	7103      	strb	r3, [r0, #4]
   3703a:	7143      	strb	r3, [r0, #5]
	udp_hdr->chksum   = 0U;
   3703c:	7183      	strb	r3, [r0, #6]
   3703e:	71c3      	strb	r3, [r0, #7]

	return net_pkt_set_data(pkt, &udp_access);
   37040:	a902      	add	r1, sp, #8
   37042:	4620      	mov	r0, r4
   37044:	f7ff f8a0 	bl	36188 <net_pkt_set_data>
}
   37048:	b004      	add	sp, #16
   3704a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   3704c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   37050:	e7fa      	b.n	37048 <net_udp_create+0x30>

00037052 <net_udp_finalize>:

int net_udp_finalize(struct net_pkt *pkt)
{
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   37052:	2308      	movs	r3, #8
{
   37054:	b530      	push	{r4, r5, lr}
   37056:	b085      	sub	sp, #20
	struct net_udp_hdr *udp_hdr;
	u16_t length = 0;

	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, &udp_access);
   37058:	eb0d 0103 	add.w	r1, sp, r3
{
   3705c:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
   3705e:	f8cd d008 	str.w	sp, [sp, #8]
   37062:	9303      	str	r3, [sp, #12]
	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, &udp_access);
   37064:	f7ff f86f 	bl	36146 <net_pkt_get_data>
	if (!udp_hdr) {
   37068:	4605      	mov	r5, r0
   3706a:	b310      	cbz	r0, 370b2 <net_udp_finalize+0x60>
	size_t bytes = 0;
   3706c:	2300      	movs	r3, #0
		return -ENOBUFS;
	}

	length = net_pkt_get_len(pkt) - net_pkt_ip_hdr_len(pkt) -
   3706e:	6922      	ldr	r2, [r4, #16]
	while (buf) {
   37070:	b9da      	cbnz	r2, 370aa <net_udp_finalize+0x58>
   37072:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
	return pkt->ipv4_opts_len;
   37076:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
		 net_pkt_ip_opts_len(pkt);

	udp_hdr->len = htons(length);

	if (net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
   3707a:	6a20      	ldr	r0, [r4, #32]
	length = net_pkt_get_len(pkt) - net_pkt_ip_hdr_len(pkt) -
   3707c:	440a      	add	r2, r1
   3707e:	1a9b      	subs	r3, r3, r2
	udp_hdr->len = htons(length);
   37080:	ba5b      	rev16	r3, r3
   37082:	80ab      	strh	r3, [r5, #4]
	if (net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
   37084:	f7fe fb99 	bl	357ba <net_if_need_calc_tx_checksum>
   37088:	b148      	cbz	r0, 3709e <net_udp_finalize+0x4c>
	u16_t chksum = net_calc_chksum(pkt, IPPROTO_UDP);
   3708a:	2111      	movs	r1, #17
   3708c:	4620      	mov	r0, r4
   3708e:	f7fe fbb4 	bl	357fa <net_calc_chksum>
		udp_hdr->chksum = net_calc_chksum_udp(pkt);
   37092:	f64f 73ff 	movw	r3, #65535	; 0xffff
   37096:	2800      	cmp	r0, #0
   37098:	bf08      	it	eq
   3709a:	4618      	moveq	r0, r3
   3709c:	80e8      	strh	r0, [r5, #6]
	}

	return net_pkt_set_data(pkt, &udp_access);
   3709e:	a902      	add	r1, sp, #8
   370a0:	4620      	mov	r0, r4
   370a2:	f7ff f871 	bl	36188 <net_pkt_set_data>
}
   370a6:	b005      	add	sp, #20
   370a8:	bd30      	pop	{r4, r5, pc}
		bytes += buf->len;
   370aa:	8991      	ldrh	r1, [r2, #12]
		buf = buf->frags;
   370ac:	6812      	ldr	r2, [r2, #0]
		bytes += buf->len;
   370ae:	440b      	add	r3, r1
		buf = buf->frags;
   370b0:	e7de      	b.n	37070 <net_udp_finalize+0x1e>
		return -ENOBUFS;
   370b2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   370b6:	e7f6      	b.n	370a6 <net_udp_finalize+0x54>

000370b8 <net_udp_input>:
	return net_conn_unregister(handle);
}

struct net_udp_hdr *net_udp_input(struct net_pkt *pkt,
				  struct net_pkt_data_access *udp_access)
{
   370b8:	b570      	push	{r4, r5, r6, lr}
   370ba:	4604      	mov	r4, r0
   370bc:	460e      	mov	r6, r1
	struct net_udp_hdr *udp_hdr;

	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, udp_access);
   370be:	f7ff f842 	bl	36146 <net_pkt_get_data>
	if (!udp_hdr || net_pkt_set_data(pkt, udp_access)) {
   370c2:	4605      	mov	r5, r0
   370c4:	b1f0      	cbz	r0, 37104 <net_udp_input+0x4c>
   370c6:	4631      	mov	r1, r6
   370c8:	4620      	mov	r0, r4
   370ca:	f7ff f85d 	bl	36188 <net_pkt_set_data>
   370ce:	b9c8      	cbnz	r0, 37104 <net_udp_input+0x4c>
		NET_DBG("DROP: corrupted header");
		goto drop;
	}

	if (ntohs(udp_hdr->len) != (net_pkt_get_len(pkt) -
   370d0:	88aa      	ldrh	r2, [r5, #4]
   370d2:	0213      	lsls	r3, r2, #8
   370d4:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   370d8:	6922      	ldr	r2, [r4, #16]
   370da:	b29b      	uxth	r3, r3
	while (buf) {
   370dc:	b9aa      	cbnz	r2, 3710a <net_udp_input+0x52>
				    net_pkt_ip_hdr_len(pkt) -
   370de:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
				    net_pkt_ip_opts_len(pkt))) {
   370e2:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
				    net_pkt_ip_hdr_len(pkt) -
   370e6:	440a      	add	r2, r1
   370e8:	1a80      	subs	r0, r0, r2
	if (ntohs(udp_hdr->len) != (net_pkt_get_len(pkt) -
   370ea:	4283      	cmp	r3, r0
   370ec:	d10a      	bne.n	37104 <net_udp_input+0x4c>
		NET_DBG("DROP: Invalid hdr length");
		goto drop;
	}

	if (IS_ENABLED(CONFIG_NET_UDP_CHECKSUM) &&
	    net_if_need_calc_rx_checksum(net_pkt_iface(pkt))) {
   370ee:	6a20      	ldr	r0, [r4, #32]
   370f0:	f7fe fb65 	bl	357be <net_if_need_calc_rx_checksum>
	if (IS_ENABLED(CONFIG_NET_UDP_CHECKSUM) &&
   370f4:	b138      	cbz	r0, 37106 <net_udp_input+0x4e>
		if (!udp_hdr->chksum) {
   370f6:	88eb      	ldrh	r3, [r5, #6]
   370f8:	b123      	cbz	r3, 37104 <net_udp_input+0x4c>
	return net_calc_chksum(pkt, IPPROTO_UDP);
   370fa:	2111      	movs	r1, #17
   370fc:	4620      	mov	r0, r4
   370fe:	f7fe fb7c 	bl	357fa <net_calc_chksum>
			}

			goto drop;
		}

		if (net_calc_verify_chksum_udp(pkt) != 0U) {
   37102:	b100      	cbz	r0, 37106 <net_udp_input+0x4e>
	}
out:
	return udp_hdr;
drop:
	net_stats_update_udp_chkerr(net_pkt_iface(pkt));
	return NULL;
   37104:	2500      	movs	r5, #0
}
   37106:	4628      	mov	r0, r5
   37108:	bd70      	pop	{r4, r5, r6, pc}
		bytes += buf->len;
   3710a:	8991      	ldrh	r1, [r2, #12]
		buf = buf->frags;
   3710c:	6812      	ldr	r2, [r2, #0]
		bytes += buf->len;
   3710e:	4408      	add	r0, r1
		buf = buf->frags;
   37110:	e7e4      	b.n	370dc <net_udp_input+0x24>

00037112 <unpack_uint16>:
 */
static int unpack_uint16(struct buf_ctx *buf, u16_t *val)
{
	MQTT_TRC(">> cur:%p, end:%p", buf->cur, buf->end);

	if ((buf->end - buf->cur) < sizeof(u16_t)) {
   37112:	e9d0 2300 	ldrd	r2, r3, [r0]
   37116:	1a9b      	subs	r3, r3, r2
   37118:	2b01      	cmp	r3, #1
{
   3711a:	b510      	push	{r4, lr}
	if ((buf->end - buf->cur) < sizeof(u16_t)) {
   3711c:	d90c      	bls.n	37138 <unpack_uint16+0x26>
		return -EINVAL;
	}

	*val = *(buf->cur++) << 8; /* MSB */
   3711e:	4614      	mov	r4, r2
   37120:	1c53      	adds	r3, r2, #1
   37122:	6003      	str	r3, [r0, #0]
   37124:	f814 3b02 	ldrb.w	r3, [r4], #2
   37128:	021b      	lsls	r3, r3, #8
   3712a:	800b      	strh	r3, [r1, #0]
	*val |= *(buf->cur++); /* LSB */
   3712c:	6004      	str	r4, [r0, #0]

	MQTT_TRC("<< val:%04x", *val);

	return 0;
   3712e:	2000      	movs	r0, #0
	*val |= *(buf->cur++); /* LSB */
   37130:	7852      	ldrb	r2, [r2, #1]
   37132:	4313      	orrs	r3, r2
   37134:	800b      	strh	r3, [r1, #0]
}
   37136:	bd10      	pop	{r4, pc}
		return -EINVAL;
   37138:	f06f 0015 	mvn.w	r0, #21
   3713c:	e7fb      	b.n	37136 <unpack_uint16+0x24>

0003713e <fixed_header_decode>:
	return 0;
}

int fixed_header_decode(struct buf_ctx *buf, u8_t *type_and_flags,
			u32_t *length)
{
   3713e:	b5f0      	push	{r4, r5, r6, r7, lr}
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   37140:	e9d0 3400 	ldrd	r3, r4, [r0]
   37144:	429c      	cmp	r4, r3
   37146:	d01f      	beq.n	37188 <fixed_header_decode+0x4a>
	*val = *(buf->cur++);
   37148:	1c5c      	adds	r4, r3, #1
   3714a:	6004      	str	r4, [r0, #0]
   3714c:	781b      	ldrb	r3, [r3, #0]
   3714e:	700b      	strb	r3, [r1, #0]
	*length = 0U;
   37150:	2100      	movs	r1, #0
		if (buf->cur >= buf->end) {
   37152:	6847      	ldr	r7, [r0, #4]
	*length = 0U;
   37154:	6011      	str	r1, [r2, #0]
		if (buf->cur >= buf->end) {
   37156:	6804      	ldr	r4, [r0, #0]
   37158:	42bc      	cmp	r4, r7
   3715a:	d218      	bcs.n	3718e <fixed_header_decode+0x50>
		*length += ((u32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   3715c:	4625      	mov	r5, r4
   3715e:	f815 3b01 	ldrb.w	r3, [r5], #1
   37162:	6816      	ldr	r6, [r2, #0]
   37164:	f003 037f 	and.w	r3, r3, #127	; 0x7f
								<< shift;
   37168:	408b      	lsls	r3, r1
		*length += ((u32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   3716a:	4433      	add	r3, r6
   3716c:	6013      	str	r3, [r2, #0]
	} while ((*(buf->cur++) & MQTT_LENGTH_CONTINUATION_BIT) != 0U);
   3716e:	6005      	str	r5, [r0, #0]
   37170:	f994 4000 	ldrsb.w	r4, [r4]
   37174:	2c00      	cmp	r4, #0
   37176:	db04      	blt.n	37182 <fixed_header_decode+0x44>
	if (*length > MQTT_MAX_PAYLOAD_SIZE) {
   37178:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   3717c:	d204      	bcs.n	37188 <fixed_header_decode+0x4a>
	return 0;
   3717e:	2000      	movs	r0, #0
   37180:	e004      	b.n	3718c <fixed_header_decode+0x4e>
		if (bytes >= MQTT_MAX_LENGTH_BYTES) {
   37182:	3107      	adds	r1, #7
   37184:	291c      	cmp	r1, #28
   37186:	d1e6      	bne.n	37156 <fixed_header_decode+0x18>
		return -EINVAL;
   37188:	f06f 0015 	mvn.w	r0, #21
	if (err_code != 0) {
		return err_code;
	}

	return packet_length_decode(buf, length);
}
   3718c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -EAGAIN;
   3718e:	f06f 000a 	mvn.w	r0, #10
   37192:	e7fb      	b.n	3718c <fixed_header_decode+0x4e>

00037194 <connect_ack_decode>:

int connect_ack_decode(const struct mqtt_client *client, struct buf_ctx *buf,
		       struct mqtt_connack_param *param)
{
   37194:	b530      	push	{r4, r5, lr}
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   37196:	e9d1 3500 	ldrd	r3, r5, [r1]
   3719a:	429d      	cmp	r5, r3
   3719c:	d102      	bne.n	371a4 <connect_ack_decode+0x10>
		return -EINVAL;
   3719e:	f06f 0015 	mvn.w	r0, #21
	}

	param->return_code = (enum mqtt_conn_return_code)ret_code;

	return 0;
}
   371a2:	bd30      	pop	{r4, r5, pc}
	*val = *(buf->cur++);
   371a4:	1c5c      	adds	r4, r3, #1
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   371a6:	42a5      	cmp	r5, r4
	*val = *(buf->cur++);
   371a8:	600c      	str	r4, [r1, #0]
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   371aa:	d0f8      	beq.n	3719e <connect_ack_decode+0xa>
	*val = *(buf->cur++);
   371ac:	461d      	mov	r5, r3
   371ae:	f815 4b02 	ldrb.w	r4, [r5], #2
   371b2:	600d      	str	r5, [r1, #0]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   371b4:	f890 107a 	ldrb.w	r1, [r0, #122]	; 0x7a
	*val = *(buf->cur++);
   371b8:	785b      	ldrb	r3, [r3, #1]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   371ba:	2904      	cmp	r1, #4
			flags & MQTT_CONNACK_FLAG_SESSION_PRESENT;
   371bc:	bf04      	itt	eq
   371be:	f004 0401 	andeq.w	r4, r4, #1
		param->session_present_flag =
   371c2:	7014      	strbeq	r4, [r2, #0]
	param->return_code = (enum mqtt_conn_return_code)ret_code;
   371c4:	7053      	strb	r3, [r2, #1]
	return 0;
   371c6:	2000      	movs	r0, #0
   371c8:	e7eb      	b.n	371a2 <connect_ack_decode+0xe>

000371ca <publish_decode>:

int publish_decode(u8_t flags, u32_t var_length, struct buf_ctx *buf,
		   struct mqtt_publish_param *param)
{
   371ca:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   371ce:	461d      	mov	r5, r3
	int err_code;
	u32_t var_header_length;

	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   371d0:	7d9b      	ldrb	r3, [r3, #22]
{
   371d2:	4688      	mov	r8, r1
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
   371d4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   371d8:	f360 0341 	bfi	r3, r0, #1, #1
	param->message.topic.qos = ((flags & MQTT_HEADER_QOS_MASK) >> 1);
   371dc:	f3c0 0041 	ubfx	r0, r0, #1, #2
   371e0:	7228      	strb	r0, [r5, #8]
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
   371e2:	75ab      	strb	r3, [r5, #22]
	err_code = unpack_uint16(buf, &utf8_strlen);
   371e4:	f10d 0106 	add.w	r1, sp, #6
   371e8:	4610      	mov	r0, r2
{
   371ea:	4617      	mov	r7, r2
	err_code = unpack_uint16(buf, &utf8_strlen);
   371ec:	f7ff ff91 	bl	37112 <unpack_uint16>
	if (err_code != 0) {
   371f0:	4606      	mov	r6, r0
   371f2:	b9c0      	cbnz	r0, 37226 <publish_decode+0x5c>
	if ((buf->end - buf->cur) < utf8_strlen) {
   371f4:	683b      	ldr	r3, [r7, #0]
   371f6:	687a      	ldr	r2, [r7, #4]
   371f8:	f8bd 4006 	ldrh.w	r4, [sp, #6]
   371fc:	1ad2      	subs	r2, r2, r3
   371fe:	42a2      	cmp	r2, r4
   37200:	da02      	bge.n	37208 <publish_decode+0x3e>

	if (var_length < var_header_length) {
		MQTT_ERR("Corrupted PUBLISH message, header length (%u) larger "
			 "than total length (%u)", var_header_length,
			 var_length);
		return -EINVAL;
   37202:	f06f 0615 	mvn.w	r6, #21
   37206:	e00e      	b.n	37226 <publish_decode+0x5c>
	str->size = utf8_strlen;
   37208:	606c      	str	r4, [r5, #4]
	if (utf8_strlen) {
   3720a:	b184      	cbz	r4, 3722e <publish_decode+0x64>
		str->utf8 = buf->cur;
   3720c:	602b      	str	r3, [r5, #0]
		buf->cur += utf8_strlen;
   3720e:	4423      	add	r3, r4
   37210:	603b      	str	r3, [r7, #0]
	if (param->message.topic.qos > MQTT_QOS_0_AT_MOST_ONCE) {
   37212:	7a2b      	ldrb	r3, [r5, #8]
   37214:	b96b      	cbnz	r3, 37232 <publish_decode+0x68>
	var_header_length = param->message.topic.topic.size + sizeof(u16_t);
   37216:	3402      	adds	r4, #2
	if (var_length < var_header_length) {
   37218:	4544      	cmp	r4, r8
   3721a:	d8f2      	bhi.n	37202 <publish_decode+0x38>
	}

	param->message.payload.data = NULL;
   3721c:	2300      	movs	r3, #0
	param->message.payload.len = var_length - var_header_length;
   3721e:	eba8 0404 	sub.w	r4, r8, r4
	param->message.payload.data = NULL;
   37222:	60eb      	str	r3, [r5, #12]
	param->message.payload.len = var_length - var_header_length;
   37224:	612c      	str	r4, [r5, #16]

	return 0;
}
   37226:	4630      	mov	r0, r6
   37228:	b002      	add	sp, #8
   3722a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		str->utf8 = NULL;
   3722e:	602c      	str	r4, [r5, #0]
	if (err_code != 0) {
   37230:	e7ef      	b.n	37212 <publish_decode+0x48>
		err_code = unpack_uint16(buf, &param->message_id);
   37232:	f105 0114 	add.w	r1, r5, #20
   37236:	4638      	mov	r0, r7
   37238:	f7ff ff6b 	bl	37112 <unpack_uint16>
		if (err_code != 0) {
   3723c:	b908      	cbnz	r0, 37242 <publish_decode+0x78>
		var_header_length += sizeof(u16_t);
   3723e:	3404      	adds	r4, #4
   37240:	e7ea      	b.n	37218 <publish_decode+0x4e>
   37242:	4606      	mov	r6, r0
   37244:	e7ef      	b.n	37226 <publish_decode+0x5c>

00037246 <publish_ack_decode>:

int publish_ack_decode(struct buf_ctx *buf, struct mqtt_puback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   37246:	f7ff bf64 	b.w	37112 <unpack_uint16>

0003724a <publish_receive_decode>:
}

int publish_receive_decode(struct buf_ctx *buf, struct mqtt_pubrec_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3724a:	f7ff bf62 	b.w	37112 <unpack_uint16>

0003724e <publish_release_decode>:
}

int publish_release_decode(struct buf_ctx *buf, struct mqtt_pubrel_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3724e:	f7ff bf60 	b.w	37112 <unpack_uint16>

00037252 <publish_complete_decode>:
}

int publish_complete_decode(struct buf_ctx *buf,
			    struct mqtt_pubcomp_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   37252:	f7ff bf5e 	b.w	37112 <unpack_uint16>

00037256 <subscribe_ack_decode>:
}

int subscribe_ack_decode(struct buf_ctx *buf, struct mqtt_suback_param *param)
{
   37256:	b538      	push	{r3, r4, r5, lr}
   37258:	4605      	mov	r5, r0
   3725a:	460c      	mov	r4, r1
	int err_code;

	err_code = unpack_uint16(buf, &param->message_id);
   3725c:	f7ff ff59 	bl	37112 <unpack_uint16>
	if (err_code != 0) {
   37260:	b930      	cbnz	r0, 37270 <subscribe_ack_decode+0x1a>
		return err_code;
	}

	return unpack_data(buf->end - buf->cur, buf, &param->return_codes);
   37262:	e9d5 2300 	ldrd	r2, r3, [r5]
   37266:	1a99      	subs	r1, r3, r2
	str->len = length;
   37268:	60a1      	str	r1, [r4, #8]
	if (length > 0) {
   3726a:	b111      	cbz	r1, 37272 <subscribe_ack_decode+0x1c>
		str->data = buf->cur;
   3726c:	6062      	str	r2, [r4, #4]
		buf->cur += length;
   3726e:	602b      	str	r3, [r5, #0]
}
   37270:	bd38      	pop	{r3, r4, r5, pc}
		str->data = NULL;
   37272:	6060      	str	r0, [r4, #4]
   37274:	e7fc      	b.n	37270 <subscribe_ack_decode+0x1a>

00037276 <unsubscribe_ack_decode>:

int unsubscribe_ack_decode(struct buf_ctx *buf,
			   struct mqtt_unsuback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   37276:	f7ff bf4c 	b.w	37112 <unpack_uint16>

0003727a <pack_uint16>:
	if ((buf->end - buf->cur) < sizeof(u16_t)) {
   3727a:	e9d1 3200 	ldrd	r3, r2, [r1]
   3727e:	1ad2      	subs	r2, r2, r3
   37280:	2a01      	cmp	r2, #1
   37282:	d909      	bls.n	37298 <pack_uint16+0x1e>
	*(buf->cur++) = (val >> 8) & 0xFF;
   37284:	1c5a      	adds	r2, r3, #1
   37286:	600a      	str	r2, [r1, #0]
   37288:	0a02      	lsrs	r2, r0, #8
   3728a:	701a      	strb	r2, [r3, #0]
	*(buf->cur++) = val & 0xFF;
   3728c:	680b      	ldr	r3, [r1, #0]
   3728e:	1c5a      	adds	r2, r3, #1
   37290:	600a      	str	r2, [r1, #0]
   37292:	7018      	strb	r0, [r3, #0]
	return 0;
   37294:	2000      	movs	r0, #0
   37296:	4770      	bx	lr
		return -ENOMEM;
   37298:	f06f 000b 	mvn.w	r0, #11
}
   3729c:	4770      	bx	lr

0003729e <pack_utf8_str>:
{
   3729e:	b538      	push	{r3, r4, r5, lr}
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   372a0:	e9d1 2300 	ldrd	r2, r3, [r1]
{
   372a4:	4605      	mov	r5, r0
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   372a6:	6840      	ldr	r0, [r0, #4]
   372a8:	1a9b      	subs	r3, r3, r2
   372aa:	1c82      	adds	r2, r0, #2
   372ac:	4293      	cmp	r3, r2
{
   372ae:	460c      	mov	r4, r1
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   372b0:	d30d      	bcc.n	372ce <pack_utf8_str+0x30>
	(void)pack_uint16(str->size, buf);
   372b2:	b280      	uxth	r0, r0
   372b4:	f7ff ffe1 	bl	3727a <pack_uint16>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   372b8:	e9d5 1200 	ldrd	r1, r2, [r5]
   372bc:	6820      	ldr	r0, [r4, #0]
   372be:	f001 fe80 	bl	38fc2 <memcpy>
	return 0;
   372c2:	2000      	movs	r0, #0
	buf->cur += str->size;
   372c4:	6823      	ldr	r3, [r4, #0]
   372c6:	686a      	ldr	r2, [r5, #4]
   372c8:	4413      	add	r3, r2
   372ca:	6023      	str	r3, [r4, #0]
}
   372cc:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   372ce:	f06f 000b 	mvn.w	r0, #11
   372d2:	e7fb      	b.n	372cc <pack_utf8_str+0x2e>

000372d4 <mqtt_encode_fixed_header>:
{
   372d4:	b570      	push	{r4, r5, r6, lr}
	u32_t length = buf->cur - start;
   372d6:	6815      	ldr	r5, [r2, #0]
   372d8:	1a6d      	subs	r5, r5, r1
	if (length > MQTT_MAX_PAYLOAD_SIZE) {
   372da:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
   372de:	d227      	bcs.n	37330 <mqtt_encode_fixed_header+0x5c>
   372e0:	462c      	mov	r4, r5
   372e2:	2600      	movs	r6, #0
	} while (length > 0);
   372e4:	09e4      	lsrs	r4, r4, #7
   372e6:	b2f3      	uxtb	r3, r6
		if (buf != NULL) {
   372e8:	f106 0601 	add.w	r6, r6, #1
	} while (length > 0);
   372ec:	d1fa      	bne.n	372e4 <mqtt_encode_fixed_header+0x10>
	fixed_header_length += sizeof(u8_t);
   372ee:	3302      	adds	r3, #2
	buf->cur = start - fixed_header_length;
   372f0:	b2db      	uxtb	r3, r3
   372f2:	425b      	negs	r3, r3
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   372f4:	6856      	ldr	r6, [r2, #4]
	buf->cur = start - fixed_header_length;
   372f6:	18cc      	adds	r4, r1, r3
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   372f8:	42b4      	cmp	r4, r6
	buf->cur = start - fixed_header_length;
   372fa:	6014      	str	r4, [r2, #0]
	*(buf->cur++) = val;
   372fc:	bf1e      	ittt	ne
   372fe:	3401      	addne	r4, #1
   37300:	6014      	strne	r4, [r2, #0]
   37302:	54c8      	strbne	r0, [r1, r3]
	return 0;
   37304:	4628      	mov	r0, r5
			*(buf->cur) = length & MQTT_LENGTH_VALUE_MASK;
   37306:	6811      	ldr	r1, [r2, #0]
   37308:	f000 047f 	and.w	r4, r0, #127	; 0x7f
   3730c:	700c      	strb	r4, [r1, #0]
			if (length > 0) {
   3730e:	09c0      	lsrs	r0, r0, #7
				*(buf->cur) |= MQTT_LENGTH_CONTINUATION_BIT;
   37310:	bf1f      	itttt	ne
   37312:	6814      	ldrne	r4, [r2, #0]
   37314:	7821      	ldrbne	r1, [r4, #0]
   37316:	f061 017f 	ornne	r1, r1, #127	; 0x7f
   3731a:	7021      	strbne	r1, [r4, #0]
			buf->cur++;
   3731c:	6811      	ldr	r1, [r2, #0]
   3731e:	3101      	adds	r1, #1
   37320:	6011      	str	r1, [r2, #0]
	} while (length > 0);
   37322:	2800      	cmp	r0, #0
   37324:	d1ef      	bne.n	37306 <mqtt_encode_fixed_header+0x32>
	buf->cur = buf->cur - fixed_header_length;
   37326:	440b      	add	r3, r1
	buf->end = buf->cur + length + fixed_header_length;
   37328:	4429      	add	r1, r5
	buf->cur = buf->cur - fixed_header_length;
   3732a:	6013      	str	r3, [r2, #0]
	buf->end = buf->cur + length + fixed_header_length;
   3732c:	6051      	str	r1, [r2, #4]
}
   3732e:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   37330:	f06f 0079 	mvn.w	r0, #121	; 0x79
   37334:	e7fb      	b.n	3732e <mqtt_encode_fixed_header+0x5a>

00037336 <mqtt_message_id_only_enc>:
{
   37336:	b570      	push	{r4, r5, r6, lr}
   37338:	4606      	mov	r6, r0
   3733a:	4615      	mov	r5, r2
	if (message_id == 0U) {
   3733c:	4608      	mov	r0, r1
   3733e:	b169      	cbz	r1, 3735c <mqtt_message_id_only_enc+0x26>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   37340:	6814      	ldr	r4, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   37342:	4611      	mov	r1, r2
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   37344:	3405      	adds	r4, #5
   37346:	6014      	str	r4, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   37348:	f7ff ff97 	bl	3727a <pack_uint16>
	if (err_code != 0) {
   3734c:	b940      	cbnz	r0, 37360 <mqtt_message_id_only_enc+0x2a>
	return mqtt_encode_fixed_header(message_type, start, buf);
   3734e:	462a      	mov	r2, r5
   37350:	4621      	mov	r1, r4
   37352:	4630      	mov	r0, r6
}
   37354:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   37358:	f7ff bfbc 	b.w	372d4 <mqtt_encode_fixed_header>
		return -EINVAL;
   3735c:	f06f 0015 	mvn.w	r0, #21
}
   37360:	bd70      	pop	{r4, r5, r6, pc}

00037362 <publish_encode>:
{
   37362:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   37366:	4607      	mov	r7, r0
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   37368:	7d80      	ldrb	r0, [r0, #22]
   3736a:	7a3c      	ldrb	r4, [r7, #8]
{
   3736c:	460d      	mov	r5, r1
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   3736e:	f000 0801 	and.w	r8, r0, #1
   37372:	f3c0 0940 	ubfx	r9, r0, #1, #1
	if ((param->message.topic.qos) && (param->message_id == 0U)) {
   37376:	b10c      	cbz	r4, 3737c <publish_encode+0x1a>
   37378:	8abb      	ldrh	r3, [r7, #20]
   3737a:	b35b      	cbz	r3, 373d4 <publish_encode+0x72>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3737c:	682e      	ldr	r6, [r5, #0]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   3737e:	4629      	mov	r1, r5
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   37380:	3605      	adds	r6, #5
   37382:	602e      	str	r6, [r5, #0]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   37384:	4638      	mov	r0, r7
   37386:	f7ff ff8a 	bl	3729e <pack_utf8_str>
	if (err_code != 0) {
   3738a:	b9a8      	cbnz	r0, 373b8 <publish_encode+0x56>
	if (param->message.topic.qos) {
   3738c:	7a3b      	ldrb	r3, [r7, #8]
   3738e:	b9ab      	cbnz	r3, 373bc <publish_encode+0x5a>
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   37390:	0060      	lsls	r0, r4, #1
   37392:	f000 0006 	and.w	r0, r0, #6
	buf->cur += param->message.payload.len;
   37396:	693a      	ldr	r2, [r7, #16]
   37398:	682b      	ldr	r3, [r5, #0]
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   3739a:	ea40 0009 	orr.w	r0, r0, r9
   3739e:	ea40 00c8 	orr.w	r0, r0, r8, lsl #3
	buf->cur += param->message.payload.len;
   373a2:	4413      	add	r3, r2
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   373a4:	f040 0030 	orr.w	r0, r0, #48	; 0x30
	buf->cur += param->message.payload.len;
   373a8:	602b      	str	r3, [r5, #0]
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   373aa:	462a      	mov	r2, r5
   373ac:	4631      	mov	r1, r6
   373ae:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   373b2:	f7ff ff8f 	bl	372d4 <mqtt_encode_fixed_header>
	if (err_code != 0) {
   373b6:	b140      	cbz	r0, 373ca <publish_encode+0x68>
}
   373b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_uint16(param->message_id, buf);
   373bc:	4629      	mov	r1, r5
   373be:	8ab8      	ldrh	r0, [r7, #20]
   373c0:	f7ff ff5b 	bl	3727a <pack_uint16>
		if (err_code != 0) {
   373c4:	2800      	cmp	r0, #0
   373c6:	d0e3      	beq.n	37390 <publish_encode+0x2e>
   373c8:	e7f6      	b.n	373b8 <publish_encode+0x56>
	buf->end -= param->message.payload.len;
   373ca:	686b      	ldr	r3, [r5, #4]
   373cc:	693a      	ldr	r2, [r7, #16]
   373ce:	1a9b      	subs	r3, r3, r2
   373d0:	606b      	str	r3, [r5, #4]
	return 0;
   373d2:	e7f1      	b.n	373b8 <publish_encode+0x56>
		return -EINVAL;
   373d4:	f06f 0015 	mvn.w	r0, #21
   373d8:	e7ee      	b.n	373b8 <publish_encode+0x56>

000373da <publish_ack_encode>:
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
   373da:	460a      	mov	r2, r1
   373dc:	8801      	ldrh	r1, [r0, #0]
   373de:	2040      	movs	r0, #64	; 0x40
   373e0:	f7ff bfa9 	b.w	37336 <mqtt_message_id_only_enc>

000373e4 <publish_release_encode>:
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
   373e4:	460a      	mov	r2, r1
   373e6:	8801      	ldrh	r1, [r0, #0]
   373e8:	2062      	movs	r0, #98	; 0x62
   373ea:	f7ff bfa4 	b.w	37336 <mqtt_message_id_only_enc>

000373ee <subscribe_encode>:
{
   373ee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   373f2:	4607      	mov	r7, r0
	if (param->message_id == 0U) {
   373f4:	88c0      	ldrh	r0, [r0, #6]
{
   373f6:	460d      	mov	r5, r1
	if (param->message_id == 0U) {
   373f8:	b330      	cbz	r0, 37448 <subscribe_encode+0x5a>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   373fa:	680e      	ldr	r6, [r1, #0]
   373fc:	3605      	adds	r6, #5
   373fe:	600e      	str	r6, [r1, #0]
	err_code = pack_uint16(param->message_id, buf);
   37400:	f7ff ff3b 	bl	3727a <pack_uint16>
	if (err_code != 0) {
   37404:	4604      	mov	r4, r0
   37406:	bb08      	cbnz	r0, 3744c <subscribe_encode+0x5e>
   37408:	f04f 090c 	mov.w	r9, #12
	for (i = 0; i < param->list_count; i++) {
   3740c:	88bb      	ldrh	r3, [r7, #4]
   3740e:	42a3      	cmp	r3, r4
   37410:	dc06      	bgt.n	37420 <subscribe_encode+0x32>
	return mqtt_encode_fixed_header(message_type, start, buf);
   37412:	462a      	mov	r2, r5
   37414:	4631      	mov	r1, r6
}
   37416:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   3741a:	2082      	movs	r0, #130	; 0x82
   3741c:	f7ff bf5a 	b.w	372d4 <mqtt_encode_fixed_header>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   37420:	fb09 f804 	mul.w	r8, r9, r4
   37424:	6838      	ldr	r0, [r7, #0]
   37426:	4629      	mov	r1, r5
   37428:	4440      	add	r0, r8
   3742a:	f7ff ff38 	bl	3729e <pack_utf8_str>
		if (err_code != 0) {
   3742e:	b980      	cbnz	r0, 37452 <subscribe_encode+0x64>
		err_code = pack_uint8(param->list[i].qos, buf);
   37430:	683b      	ldr	r3, [r7, #0]
   37432:	4443      	add	r3, r8
   37434:	7a1a      	ldrb	r2, [r3, #8]
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   37436:	e9d5 3100 	ldrd	r3, r1, [r5]
   3743a:	4299      	cmp	r1, r3
   3743c:	d00b      	beq.n	37456 <subscribe_encode+0x68>
	*(buf->cur++) = val;
   3743e:	1c59      	adds	r1, r3, #1
   37440:	6029      	str	r1, [r5, #0]
	for (i = 0; i < param->list_count; i++) {
   37442:	3401      	adds	r4, #1
	*(buf->cur++) = val;
   37444:	701a      	strb	r2, [r3, #0]
		if (err_code != 0) {
   37446:	e7e1      	b.n	3740c <subscribe_encode+0x1e>
		return -EINVAL;
   37448:	f06f 0415 	mvn.w	r4, #21
}
   3744c:	4620      	mov	r0, r4
   3744e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   37452:	4604      	mov	r4, r0
   37454:	e7fa      	b.n	3744c <subscribe_encode+0x5e>
		return -ENOMEM;
   37456:	f06f 040b 	mvn.w	r4, #11
   3745a:	e7f7      	b.n	3744c <subscribe_encode+0x5e>

0003745c <mqtt_read_message_chunk>:
	return err_code;
}

static int mqtt_read_message_chunk(struct mqtt_client *client,
				   struct buf_ctx *buf, u32_t length)
{
   3745c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3745e:	460d      	mov	r5, r1
	u32_t remaining;
	int len;

	/* In case all data requested has already been buffered, return. */
	if (length <= (buf->end - buf->cur)) {
   37460:	e9d1 3100 	ldrd	r3, r1, [r1]
   37464:	1acb      	subs	r3, r1, r3
   37466:	4293      	cmp	r3, r2
{
   37468:	4606      	mov	r6, r0
	if (length <= (buf->end - buf->cur)) {
   3746a:	d301      	bcc.n	37470 <mqtt_read_message_chunk+0x14>
		return 0;
   3746c:	2000      	movs	r0, #0
		MQTT_TRC("[CID %p]: Message partially received.", client);
		return -EAGAIN;
	}

	return 0;
}
   3746e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	remaining = length - (buf->end - buf->cur);
   37470:	1ad4      	subs	r4, r2, r3
	if ((buf->end + remaining > client->rx_buf + client->rx_buf_size) ||
   37472:	190f      	adds	r7, r1, r4
   37474:	e9d0 231a 	ldrd	r2, r3, [r0, #104]	; 0x68
   37478:	4413      	add	r3, r2
   3747a:	429f      	cmp	r7, r3
   3747c:	d813      	bhi.n	374a6 <mqtt_read_message_chunk+0x4a>
   3747e:	4297      	cmp	r7, r2
   37480:	d311      	bcc.n	374a6 <mqtt_read_message_chunk+0x4a>
	len = mqtt_transport_read(client, buf->end, remaining, false);
   37482:	2300      	movs	r3, #0
   37484:	4622      	mov	r2, r4
   37486:	f7e7 fbb5 	bl	1ebf4 <mqtt_transport_read>
	if (len < 0) {
   3748a:	2800      	cmp	r0, #0
   3748c:	dbef      	blt.n	3746e <mqtt_read_message_chunk+0x12>
	if (len == 0) {
   3748e:	d00d      	beq.n	374ac <mqtt_read_message_chunk+0x50>
	client->internal.rx_buf_datalen += len;
   37490:	69f3      	ldr	r3, [r6, #28]
	if (len < remaining) {
   37492:	42a0      	cmp	r0, r4
	client->internal.rx_buf_datalen += len;
   37494:	4403      	add	r3, r0
   37496:	61f3      	str	r3, [r6, #28]
	buf->end += len;
   37498:	686b      	ldr	r3, [r5, #4]
   3749a:	4403      	add	r3, r0
   3749c:	606b      	str	r3, [r5, #4]
	if (len < remaining) {
   3749e:	d2e5      	bcs.n	3746c <mqtt_read_message_chunk+0x10>
		return -EAGAIN;
   374a0:	f06f 000a 	mvn.w	r0, #10
   374a4:	e7e3      	b.n	3746e <mqtt_read_message_chunk+0x12>
		return -ENOMEM;
   374a6:	f06f 000b 	mvn.w	r0, #11
   374aa:	e7e0      	b.n	3746e <mqtt_read_message_chunk+0x12>
		return -ENOTCONN;
   374ac:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   374b0:	e7dd      	b.n	3746e <mqtt_read_message_chunk+0x12>

000374b2 <mqtt_handle_rx>:

	return err_code;
}

int mqtt_handle_rx(struct mqtt_client *client)
{
   374b2:	b570      	push	{r4, r5, r6, lr}
	int err_code;
	u8_t type_and_flags;
	u32_t var_length;
	struct buf_ctx buf;

	buf.cur = client->rx_buf;
   374b4:	6e83      	ldr	r3, [r0, #104]	; 0x68
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   374b6:	69c2      	ldr	r2, [r0, #28]
{
   374b8:	b08c      	sub	sp, #48	; 0x30
	buf.cur = client->rx_buf;
   374ba:	9302      	str	r3, [sp, #8]
{
   374bc:	4605      	mov	r5, r0
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   374be:	4413      	add	r3, r2
	u8_t chunk_size = MQTT_FIXED_HEADER_MIN_SIZE;
   374c0:	2202      	movs	r2, #2
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   374c2:	9303      	str	r3, [sp, #12]
		err_code = mqtt_read_message_chunk(client, buf, chunk_size);
   374c4:	a902      	add	r1, sp, #8
   374c6:	4628      	mov	r0, r5
   374c8:	f7ff ffc8 	bl	3745c <mqtt_read_message_chunk>
		if (err_code < 0) {
   374cc:	1e04      	subs	r4, r0, #0
   374ce:	db2b      	blt.n	37528 <mqtt_handle_rx+0x76>
		buf->cur = client->rx_buf;
   374d0:	6eab      	ldr	r3, [r5, #104]	; 0x68
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   374d2:	aa01      	add	r2, sp, #4
   374d4:	f10d 0103 	add.w	r1, sp, #3
   374d8:	a802      	add	r0, sp, #8
		buf->cur = client->rx_buf;
   374da:	9302      	str	r3, [sp, #8]
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   374dc:	f7ff fe2f 	bl	3713e <fixed_header_decode>
	} while (err_code == -EAGAIN);
   374e0:	f110 0f0b 	cmn.w	r0, #11
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   374e4:	4604      	mov	r4, r0
		chunk_size = 1U;
   374e6:	f04f 0201 	mov.w	r2, #1
	} while (err_code == -EAGAIN);
   374ea:	d0eb      	beq.n	374c4 <mqtt_handle_rx+0x12>

	err_code = mqtt_read_and_parse_fixed_header(client, &type_and_flags,
						    &var_length, &buf);
	if (err_code < 0) {
   374ec:	2800      	cmp	r0, #0
   374ee:	db1f      	blt.n	37530 <mqtt_handle_rx+0x7e>
		return (err_code == -EAGAIN) ? 0 : err_code;
	}

	if ((type_and_flags & 0xF0) == MQTT_PKT_TYPE_PUBLISH) {
   374f0:	f89d 6003 	ldrb.w	r6, [sp, #3]
   374f4:	f006 03f0 	and.w	r3, r6, #240	; 0xf0
   374f8:	2b30      	cmp	r3, #48	; 0x30
   374fa:	d11c      	bne.n	37536 <mqtt_handle_rx+0x84>
	err_code = mqtt_read_message_chunk(client, buf, sizeof(u16_t));
   374fc:	2202      	movs	r2, #2
   374fe:	a902      	add	r1, sp, #8
   37500:	4628      	mov	r0, r5
   37502:	f7ff ffab 	bl	3745c <mqtt_read_message_chunk>
	if (err_code < 0) {
   37506:	1e04      	subs	r4, r0, #0
   37508:	db0e      	blt.n	37528 <mqtt_handle_rx+0x76>
	variable_header_length = *buf->cur << 8; /* MSB */
   3750a:	9b02      	ldr	r3, [sp, #8]
	if (qos > MQTT_QOS_0_AT_MOST_ONCE) {
   3750c:	f016 0f06 	tst.w	r6, #6
   37510:	881a      	ldrh	r2, [r3, #0]
   37512:	ba52      	rev16	r2, r2
   37514:	b292      	uxth	r2, r2
	variable_header_length += sizeof(u16_t);
   37516:	bf0c      	ite	eq
   37518:	3202      	addeq	r2, #2
		variable_header_length += sizeof(u16_t);
   3751a:	3204      	addne	r2, #4
		err_code = mqtt_read_publish_var_header(client, type_and_flags,
							&buf);
	} else {
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   3751c:	a902      	add	r1, sp, #8
   3751e:	4628      	mov	r0, r5
   37520:	f7ff ff9c 	bl	3745c <mqtt_read_message_chunk>
	}

	if (err_code < 0) {
   37524:	1e04      	subs	r4, r0, #0
   37526:	da08      	bge.n	3753a <mqtt_handle_rx+0x88>
		return (err_code == -EAGAIN) ? 0 : err_code;
   37528:	f114 0f0b 	cmn.w	r4, #11
   3752c:	d100      	bne.n	37530 <mqtt_handle_rx+0x7e>
   3752e:	2400      	movs	r4, #0
	}

	client->internal.rx_buf_datalen = 0U;

	return 0;
}
   37530:	4620      	mov	r0, r4
   37532:	b00c      	add	sp, #48	; 0x30
   37534:	bd70      	pop	{r4, r5, r6, pc}
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   37536:	9a01      	ldr	r2, [sp, #4]
   37538:	e7f0      	b.n	3751c <mqtt_handle_rx+0x6a>
	evt.result = 0;
   3753a:	2200      	movs	r2, #0
	err_code = mqtt_handle_packet(client, type_and_flags, var_length, &buf);
   3753c:	f89d 0003 	ldrb.w	r0, [sp, #3]
   37540:	9901      	ldr	r1, [sp, #4]
	evt.result = 0;
   37542:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	switch (type_and_flags & 0xF0) {
   37546:	2b60      	cmp	r3, #96	; 0x60
	evt.result = 0;
   37548:	920b      	str	r2, [sp, #44]	; 0x2c
	switch (type_and_flags & 0xF0) {
   3754a:	d063      	beq.n	37614 <mqtt_handle_rx+0x162>
   3754c:	d813      	bhi.n	37576 <mqtt_handle_rx+0xc4>
   3754e:	2b30      	cmp	r3, #48	; 0x30
   37550:	d04a      	beq.n	375e8 <mqtt_handle_rx+0x136>
   37552:	d804      	bhi.n	3755e <mqtt_handle_rx+0xac>
   37554:	2b20      	cmp	r3, #32
   37556:	d02f      	beq.n	375b8 <mqtt_handle_rx+0x106>
	client->internal.rx_buf_datalen = 0U;
   37558:	2400      	movs	r4, #0
   3755a:	61ec      	str	r4, [r5, #28]
	return 0;
   3755c:	e7e8      	b.n	37530 <mqtt_handle_rx+0x7e>
	switch (type_and_flags & 0xF0) {
   3755e:	2b40      	cmp	r3, #64	; 0x40
   37560:	d04e      	beq.n	37600 <mqtt_handle_rx+0x14e>
   37562:	2b50      	cmp	r3, #80	; 0x50
   37564:	d1f8      	bne.n	37558 <mqtt_handle_rx+0xa6>
		evt.type = MQTT_EVT_PUBREC;
   37566:	2304      	movs	r3, #4
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   37568:	a905      	add	r1, sp, #20
   3756a:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREC;
   3756c:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   37570:	f7ff fe6b 	bl	3724a <publish_receive_decode>
   37574:	e04b      	b.n	3760e <mqtt_handle_rx+0x15c>
	switch (type_and_flags & 0xF0) {
   37576:	2b90      	cmp	r3, #144	; 0x90
   37578:	d054      	beq.n	37624 <mqtt_handle_rx+0x172>
   3757a:	d809      	bhi.n	37590 <mqtt_handle_rx+0xde>
   3757c:	2b70      	cmp	r3, #112	; 0x70
   3757e:	d1eb      	bne.n	37558 <mqtt_handle_rx+0xa6>
		evt.type = MQTT_EVT_PUBCOMP;
   37580:	2306      	movs	r3, #6
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   37582:	a905      	add	r1, sp, #20
   37584:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBCOMP;
   37586:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   3758a:	f7ff fe62 	bl	37252 <publish_complete_decode>
   3758e:	e03e      	b.n	3760e <mqtt_handle_rx+0x15c>
	switch (type_and_flags & 0xF0) {
   37590:	2bb0      	cmp	r3, #176	; 0xb0
   37592:	d04f      	beq.n	37634 <mqtt_handle_rx+0x182>
   37594:	2bd0      	cmp	r3, #208	; 0xd0
   37596:	d1df      	bne.n	37558 <mqtt_handle_rx+0xa6>
		if (client->unacked_ping <= 0) {
   37598:	f995 307b 	ldrsb.w	r3, [r5, #123]	; 0x7b
	int err_code = 0;
   3759c:	2400      	movs	r4, #0
		if (client->unacked_ping <= 0) {
   3759e:	2b00      	cmp	r3, #0
			client->unacked_ping--;
   375a0:	bfc8      	it	gt
   375a2:	f103 32ff 	addgt.w	r2, r3, #4294967295	; 0xffffffff
		evt.type = MQTT_EVT_PINGRESP;
   375a6:	f04f 0309 	mov.w	r3, #9
			client->unacked_ping--;
   375aa:	bfc8      	it	gt
   375ac:	b252      	sxtbgt	r2, r2
   375ae:	f885 207b 	strb.w	r2, [r5, #123]	; 0x7b
		evt.type = MQTT_EVT_PINGRESP;
   375b2:	f88d 3010 	strb.w	r3, [sp, #16]
	if (notify_event == true) {
   375b6:	e010      	b.n	375da <mqtt_handle_rx+0x128>
		evt.type = MQTT_EVT_CONNACK;
   375b8:	f88d 2010 	strb.w	r2, [sp, #16]
		err_code = connect_ack_decode(client, buf, &evt.param.connack);
   375bc:	a902      	add	r1, sp, #8
   375be:	aa05      	add	r2, sp, #20
   375c0:	4628      	mov	r0, r5
   375c2:	f7ff fde7 	bl	37194 <connect_ack_decode>
		if (err_code == 0) {
   375c6:	4604      	mov	r4, r0
   375c8:	bb10      	cbnz	r0, 37610 <mqtt_handle_rx+0x15e>
			if (evt.param.connack.return_code ==
   375ca:	f89d 2015 	ldrb.w	r2, [sp, #21]
   375ce:	b91a      	cbnz	r2, 375d8 <mqtt_handle_rx+0x126>
				MQTT_SET_STATE(client, MQTT_STATE_CONNECTED);
   375d0:	69ab      	ldr	r3, [r5, #24]
   375d2:	f043 0304 	orr.w	r3, r3, #4
   375d6:	61ab      	str	r3, [r5, #24]
			evt.result = evt.param.connack.return_code;
   375d8:	920b      	str	r2, [sp, #44]	; 0x2c
		event_notify(client, &evt);
   375da:	a904      	add	r1, sp, #16
   375dc:	4628      	mov	r0, r5
   375de:	f000 f8bb 	bl	37758 <event_notify>
	if (err_code < 0) {
   375e2:	2c00      	cmp	r4, #0
   375e4:	dab8      	bge.n	37558 <mqtt_handle_rx+0xa6>
   375e6:	e7a3      	b.n	37530 <mqtt_handle_rx+0x7e>
		evt.type = MQTT_EVT_PUBLISH;
   375e8:	2302      	movs	r3, #2
		err_code = publish_decode(type_and_flags, var_length, buf,
   375ea:	aa02      	add	r2, sp, #8
		evt.type = MQTT_EVT_PUBLISH;
   375ec:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_decode(type_and_flags, var_length, buf,
   375f0:	ab05      	add	r3, sp, #20
   375f2:	f7ff fdea 	bl	371ca <publish_decode>
		client->internal.remaining_payload =
   375f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
		err_code = publish_decode(type_and_flags, var_length, buf,
   375f8:	4604      	mov	r4, r0
		evt.result = err_code;
   375fa:	900b      	str	r0, [sp, #44]	; 0x2c
		client->internal.remaining_payload =
   375fc:	622b      	str	r3, [r5, #32]
	if (notify_event == true) {
   375fe:	e7ec      	b.n	375da <mqtt_handle_rx+0x128>
		evt.type = MQTT_EVT_PUBACK;
   37600:	2303      	movs	r3, #3
		err_code = publish_ack_decode(buf, &evt.param.puback);
   37602:	a905      	add	r1, sp, #20
   37604:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBACK;
   37606:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_ack_decode(buf, &evt.param.puback);
   3760a:	f7ff fe1c 	bl	37246 <publish_ack_decode>
   3760e:	4604      	mov	r4, r0
		evt.result = err_code;
   37610:	940b      	str	r4, [sp, #44]	; 0x2c
	if (notify_event == true) {
   37612:	e7e2      	b.n	375da <mqtt_handle_rx+0x128>
		evt.type = MQTT_EVT_PUBREL;
   37614:	2305      	movs	r3, #5
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   37616:	a905      	add	r1, sp, #20
   37618:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREL;
   3761a:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   3761e:	f7ff fe16 	bl	3724e <publish_release_decode>
   37622:	e7f4      	b.n	3760e <mqtt_handle_rx+0x15c>
		evt.type = MQTT_EVT_SUBACK;
   37624:	2307      	movs	r3, #7
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   37626:	a905      	add	r1, sp, #20
   37628:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_SUBACK;
   3762a:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   3762e:	f7ff fe12 	bl	37256 <subscribe_ack_decode>
   37632:	e7ec      	b.n	3760e <mqtt_handle_rx+0x15c>
		evt.type = MQTT_EVT_UNSUBACK;
   37634:	2308      	movs	r3, #8
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   37636:	a905      	add	r1, sp, #20
   37638:	eb0d 0003 	add.w	r0, sp, r3
		evt.type = MQTT_EVT_UNSUBACK;
   3763c:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   37640:	f7ff fe19 	bl	37276 <unsubscribe_ack_decode>
   37644:	e7e3      	b.n	3760e <mqtt_handle_rx+0x15c>

00037646 <mqtt_client_tcp_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tcp_connect(struct mqtt_client *client)
{
   37646:	b538      	push	{r3, r4, r5, lr}
	const struct sockaddr *broker = client->broker;
   37648:	6d05      	ldr	r5, [r0, #80]	; 0x50
{
   3764a:	4604      	mov	r4, r0
	int ret;

	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
   3764c:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   3764e:	2206      	movs	r2, #6
   37650:	2101      	movs	r1, #1
   37652:	f7e1 fecd 	bl	193f0 <z_impl_zsock_socket>
					    IPPROTO_TCP);
	if (client->transport.tcp.sock < 0) {
   37656:	2800      	cmp	r0, #0
	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
   37658:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tcp.sock < 0) {
   3765a:	da04      	bge.n	37666 <mqtt_client_tcp_connect+0x20>

	ret = connect(client->transport.tcp.sock, client->broker,
		      peer_addr_size);
	if (ret < 0) {
		(void)close(client->transport.tcp.sock);
		return -errno;
   3765c:	f7fd ff39 	bl	354d2 <__errno>
   37660:	6800      	ldr	r0, [r0, #0]
   37662:	4240      	negs	r0, r0
	}

	MQTT_TRC("Connect completed");
	return 0;
}
   37664:	bd38      	pop	{r3, r4, r5, pc}
	if (broker->sa_family == AF_INET) {
   37666:	882b      	ldrh	r3, [r5, #0]
	ret = connect(client->transport.tcp.sock, client->broker,
   37668:	6d21      	ldr	r1, [r4, #80]	; 0x50
	if (broker->sa_family == AF_INET) {
   3766a:	2b01      	cmp	r3, #1
		peer_addr_size = sizeof(struct sockaddr_in);
   3766c:	bf14      	ite	ne
   3766e:	2218      	movne	r2, #24
   37670:	2208      	moveq	r2, #8
	return z_impl_zsock_connect(sock, addr, addrlen);
   37672:	f7fc fbe1 	bl	33e38 <z_impl_zsock_connect>
	if (ret < 0) {
   37676:	2800      	cmp	r0, #0
   37678:	da03      	bge.n	37682 <mqtt_client_tcp_connect+0x3c>
		(void)close(client->transport.tcp.sock);
   3767a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_close(sock);
   3767c:	f7fc fbc3 	bl	33e06 <z_impl_zsock_close>
   37680:	e7ec      	b.n	3765c <mqtt_client_tcp_connect+0x16>
	return 0;
   37682:	2000      	movs	r0, #0
   37684:	e7ee      	b.n	37664 <mqtt_client_tcp_connect+0x1e>

00037686 <mqtt_client_tcp_write>:

int mqtt_client_tcp_write(struct mqtt_client *client, const u8_t *data,
			  u32_t datalen)
{
   37686:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	u32_t offset = 0U;
   3768a:	2400      	movs	r4, #0
{
   3768c:	4607      	mov	r7, r0
   3768e:	4688      	mov	r8, r1
   37690:	4615      	mov	r5, r2
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   37692:	4626      	mov	r6, r4
	int ret;

	while (offset < datalen) {
   37694:	42ac      	cmp	r4, r5
   37696:	d301      	bcc.n	3769c <mqtt_client_tcp_write+0x16>
		}

		offset += ret;
	}

	return 0;
   37698:	2000      	movs	r0, #0
   3769a:	e00e      	b.n	376ba <mqtt_client_tcp_write+0x34>
		ret = send(client->transport.tcp.sock, data + offset,
   3769c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   3769e:	2300      	movs	r3, #0
   376a0:	e9cd 6600 	strd	r6, r6, [sp]
   376a4:	1b2a      	subs	r2, r5, r4
   376a6:	eb08 0104 	add.w	r1, r8, r4
   376aa:	f7fc fbe6 	bl	33e7a <z_impl_zsock_sendto>
		if (ret < 0) {
   376ae:	2800      	cmp	r0, #0
   376b0:	da06      	bge.n	376c0 <mqtt_client_tcp_write+0x3a>
			return -errno;
   376b2:	f7fd ff0e 	bl	354d2 <__errno>
   376b6:	6800      	ldr	r0, [r0, #0]
   376b8:	4240      	negs	r0, r0
}
   376ba:	b002      	add	sp, #8
   376bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		offset += ret;
   376c0:	4404      	add	r4, r0
   376c2:	e7e7      	b.n	37694 <mqtt_client_tcp_write+0xe>

000376c4 <mqtt_client_tcp_write_msg>:

int mqtt_client_tcp_write_msg(struct mqtt_client *client,
			      const struct msghdr *message)

{
   376c4:	b508      	push	{r3, lr}
	int ret;

	ret = sendmsg(client->transport.tcp.sock, message, 0);
   376c6:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_sendmsg(sock, msg, flags);
   376c8:	2200      	movs	r2, #0
   376ca:	f7fc fc0b 	bl	33ee4 <z_impl_zsock_sendmsg>
	if (ret < 0) {
   376ce:	2800      	cmp	r0, #0
   376d0:	da04      	bge.n	376dc <mqtt_client_tcp_write_msg+0x18>
		return -errno;
   376d2:	f7fd fefe 	bl	354d2 <__errno>
   376d6:	6800      	ldr	r0, [r0, #0]
   376d8:	4240      	negs	r0, r0
	}

	return 0;
}
   376da:	bd08      	pop	{r3, pc}
	return 0;
   376dc:	2000      	movs	r0, #0
   376de:	e7fc      	b.n	376da <mqtt_client_tcp_write_msg+0x16>

000376e0 <mqtt_client_tcp_read>:

int mqtt_client_tcp_read(struct mqtt_client *client, u8_t *data, u32_t buflen,
			 bool shall_block)
{
   376e0:	b513      	push	{r0, r1, r4, lr}
   376e2:	2400      	movs	r4, #0
	int flags = 0;
	int ret;

	if (!shall_block) {
   376e4:	2b00      	cmp	r3, #0
		flags |= MSG_DONTWAIT;
   376e6:	bf14      	ite	ne
   376e8:	4623      	movne	r3, r4
   376ea:	2340      	moveq	r3, #64	; 0x40
	}

	ret = recv(client->transport.tcp.sock, data, buflen, flags);
   376ec:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   376ee:	e9cd 4400 	strd	r4, r4, [sp]
   376f2:	f7fc fc14 	bl	33f1e <z_impl_zsock_recvfrom>
	if (ret < 0) {
   376f6:	2800      	cmp	r0, #0
   376f8:	da03      	bge.n	37702 <mqtt_client_tcp_read+0x22>
		return -errno;
   376fa:	f7fd feea 	bl	354d2 <__errno>
   376fe:	6800      	ldr	r0, [r0, #0]
   37700:	4240      	negs	r0, r0
	}

	return ret;
}
   37702:	b002      	add	sp, #8
   37704:	bd10      	pop	{r4, pc}

00037706 <mqtt_client_tcp_disconnect>:

int mqtt_client_tcp_disconnect(struct mqtt_client *client)
{
   37706:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tcp.sock);

	ret = close(client->transport.tcp.sock);
   37708:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_close(sock);
   3770a:	f7fc fb7c 	bl	33e06 <z_impl_zsock_close>
	if (ret < 0) {
   3770e:	2800      	cmp	r0, #0
   37710:	da04      	bge.n	3771c <mqtt_client_tcp_disconnect+0x16>
		return -errno;
   37712:	f7fd fede 	bl	354d2 <__errno>
   37716:	6800      	ldr	r0, [r0, #0]
   37718:	4240      	negs	r0, r0
	}

	return 0;
}
   3771a:	bd08      	pop	{r3, pc}
	return 0;
   3771c:	2000      	movs	r0, #0
   3771e:	e7fc      	b.n	3771a <mqtt_client_tcp_disconnect+0x14>

00037720 <k_uptime_get>:
{
   37720:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   37722:	f001 fb80 	bl	38e26 <z_impl_k_uptime_ticks>
			return (t * to_hz + off) / from_hz;
   37726:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   3772a:	fba0 2304 	umull	r2, r3, r0, r4
   3772e:	fb04 3301 	mla	r3, r4, r1, r3
   37732:	0bd0      	lsrs	r0, r2, #15
}
   37734:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   37738:	0bd9      	lsrs	r1, r3, #15
   3773a:	bd10      	pop	{r4, pc}

0003773c <tx_buf_init>:
	client->internal.remaining_payload = 0U;
}

/** @brief Initialize tx buffer. */
static void tx_buf_init(struct mqtt_client *client, struct buf_ctx *buf)
{
   3773c:	b538      	push	{r3, r4, r5, lr}
   3773e:	4604      	mov	r4, r0
   37740:	460d      	mov	r5, r1
__ssp_bos_icheck3(memset, void *, int)
   37742:	6f42      	ldr	r2, [r0, #116]	; 0x74
   37744:	2100      	movs	r1, #0
   37746:	6f00      	ldr	r0, [r0, #112]	; 0x70
   37748:	f001 fc75 	bl	39036 <memset>
	memset(client->tx_buf, 0, client->tx_buf_size);
	buf->cur = client->tx_buf;
   3774c:	6f23      	ldr	r3, [r4, #112]	; 0x70
	buf->end = client->tx_buf + client->tx_buf_size;
   3774e:	6f62      	ldr	r2, [r4, #116]	; 0x74
	buf->cur = client->tx_buf;
   37750:	602b      	str	r3, [r5, #0]
	buf->end = client->tx_buf + client->tx_buf_size;
   37752:	4413      	add	r3, r2
   37754:	606b      	str	r3, [r5, #4]
}
   37756:	bd38      	pop	{r3, r4, r5, pc}

00037758 <event_notify>:
	/* Reset internal state. */
	client_reset(client);
}

void event_notify(struct mqtt_client *client, const struct mqtt_evt *evt)
{
   37758:	b538      	push	{r3, r4, r5, lr}
	if (client->evt_cb != NULL) {
   3775a:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
   3775c:	4604      	mov	r4, r0
   3775e:	460d      	mov	r5, r1
	if (client->evt_cb != NULL) {
   37760:	b153      	cbz	r3, 37778 <event_notify+0x20>
		mqtt_mutex_unlock(client);
   37762:	f7e7 fa5f 	bl	1ec24 <mqtt_mutex_unlock>

		client->evt_cb(client, evt);
   37766:	4620      	mov	r0, r4
   37768:	6e63      	ldr	r3, [r4, #100]	; 0x64
   3776a:	4629      	mov	r1, r5
   3776c:	4798      	blx	r3

		mqtt_mutex_lock(client);
   3776e:	4620      	mov	r0, r4
	}
}
   37770:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		mqtt_mutex_lock(client);
   37774:	f7e7 ba82 	b.w	1ec7c <mqtt_mutex_lock>
}
   37778:	bd38      	pop	{r3, r4, r5, pc}

0003777a <client_disconnect>:

static void client_disconnect(struct mqtt_client *client, int result)
{
   3777a:	b530      	push	{r4, r5, lr}
   3777c:	4604      	mov	r4, r0
   3777e:	b089      	sub	sp, #36	; 0x24
   37780:	460d      	mov	r5, r1
	int err_code;

	err_code = mqtt_transport_disconnect(client);
   37782:	f7e7 fa45 	bl	1ec10 <mqtt_transport_disconnect>
	if (MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   37786:	69a3      	ldr	r3, [r4, #24]
	event_notify(client, &evt);
   37788:	4669      	mov	r1, sp
	if (MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   3778a:	f013 0304 	ands.w	r3, r3, #4
		evt.type = MQTT_EVT_DISCONNECT;
   3778e:	bf12      	itee	ne
   37790:	2301      	movne	r3, #1
		evt.type = MQTT_EVT_CONNACK;
   37792:	f88d 3000 	strbeq.w	r3, [sp]
		evt.result = -ECONNREFUSED;
   37796:	f06f 036e 	mvneq.w	r3, #110	; 0x6e
	event_notify(client, &evt);
   3779a:	4620      	mov	r0, r4
		evt.type = MQTT_EVT_DISCONNECT;
   3779c:	bf16      	itet	ne
   3779e:	f88d 3000 	strbne.w	r3, [sp]
		evt.result = -ECONNREFUSED;
   377a2:	9307      	streq	r3, [sp, #28]
		evt.result = result;
   377a4:	9507      	strne	r5, [sp, #28]
	event_notify(client, &evt);
   377a6:	f7ff ffd7 	bl	37758 <event_notify>
	MQTT_STATE_INIT(client);
   377aa:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   377ac:	e9c4 3305 	strd	r3, r3, [r4, #20]
	client->internal.remaining_payload = 0U;
   377b0:	e9c4 3307 	strd	r3, r3, [r4, #28]
	if (err_code < 0) {
		MQTT_ERR("Failed to disconnect transport!");
	}

	disconnect_event_notify(client, result);
}
   377b4:	b009      	add	sp, #36	; 0x24
   377b6:	bd30      	pop	{r4, r5, pc}

000377b8 <client_write>:
	return err_code;
}

static int client_write(struct mqtt_client *client, const u8_t *data,
			u32_t datalen)
{
   377b8:	b538      	push	{r3, r4, r5, lr}
   377ba:	4605      	mov	r5, r0
	int err_code;

	MQTT_TRC("[%p]: Transport writing %d bytes.", client, datalen);

	err_code = mqtt_transport_write(client, data, datalen);
   377bc:	f7e7 fa00 	bl	1ebc0 <mqtt_transport_write>
	if (err_code < 0) {
   377c0:	1e04      	subs	r4, r0, #0
   377c2:	da05      	bge.n	377d0 <client_write+0x18>
		MQTT_TRC("Transport write failed, err_code = %d, "
			 "closing connection", err_code);
		client_disconnect(client, err_code);
   377c4:	4621      	mov	r1, r4
   377c6:	4628      	mov	r0, r5
   377c8:	f7ff ffd7 	bl	3777a <client_disconnect>

	MQTT_TRC("[%p]: Transport write complete.", client);
	client->internal.last_activity = mqtt_sys_tick_in_ms_get();

	return 0;
}
   377cc:	4620      	mov	r0, r4
   377ce:	bd38      	pop	{r3, r4, r5, pc}
	return (u32_t)k_uptime_get();
   377d0:	f7ff ffa6 	bl	37720 <k_uptime_get>
	return 0;
   377d4:	2400      	movs	r4, #0
   377d6:	6168      	str	r0, [r5, #20]
   377d8:	e7f8      	b.n	377cc <client_write+0x14>

000377da <mqtt_client_init>:

	return 0;
}

void mqtt_client_init(struct mqtt_client *client)
{
   377da:	b510      	push	{r4, lr}
	NULL_PARAM_CHECK_VOID(client);
   377dc:	4604      	mov	r4, r0
   377de:	b1a0      	cbz	r0, 3780a <mqtt_client_init+0x30>
   377e0:	2280      	movs	r2, #128	; 0x80
   377e2:	2100      	movs	r1, #0
   377e4:	f001 fc27 	bl	39036 <memset>

	memset(client, 0, sizeof(*client));

	MQTT_STATE_INIT(client);
   377e8:	2300      	movs	r3, #0
   377ea:	61a3      	str	r3, [r4, #24]
	return z_impl_k_mutex_init(mutex);
   377ec:	4620      	mov	r0, r4
   377ee:	f001 fa2e 	bl	38c4e <z_impl_k_mutex_init>
	mqtt_mutex_init(client);

	client->protocol_version = MQTT_VERSION_3_1_1;
   377f2:	2304      	movs	r3, #4
   377f4:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	client->clean_session = 1U;
   377f8:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   377fc:	f043 0302 	orr.w	r3, r3, #2
   37800:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
	client->keepalive = MQTT_KEEPALIVE;
   37804:	233c      	movs	r3, #60	; 0x3c
   37806:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
}
   3780a:	bd10      	pop	{r4, pc}

0003780c <mqtt_connect>:
	return -ENOTSUP;
}
#endif

int mqtt_connect(struct mqtt_client *client)
{
   3780c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err_code;

	NULL_PARAM_CHECK(client);
   3780e:	4604      	mov	r4, r0
   37810:	2800      	cmp	r0, #0
   37812:	d03c      	beq.n	3788e <mqtt_connect+0x82>
	NULL_PARAM_CHECK(client->client_id.utf8);
   37814:	6c83      	ldr	r3, [r0, #72]	; 0x48
   37816:	2b00      	cmp	r3, #0
   37818:	d039      	beq.n	3788e <mqtt_connect+0x82>

	mqtt_mutex_lock(client);
   3781a:	f7e7 fa2f 	bl	1ec7c <mqtt_mutex_lock>

	if ((client->tx_buf == NULL) || (client->rx_buf == NULL)) {
   3781e:	6f23      	ldr	r3, [r4, #112]	; 0x70
   37820:	b393      	cbz	r3, 37888 <mqtt_connect+0x7c>
   37822:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   37824:	b383      	cbz	r3, 37888 <mqtt_connect+0x7c>
	err_code = mqtt_transport_connect(client);
   37826:	4620      	mov	r0, r4
   37828:	f7e7 f9c0 	bl	1ebac <mqtt_transport_connect>
	if (err_code < 0) {
   3782c:	1e05      	subs	r5, r0, #0
   3782e:	db25      	blt.n	3787c <mqtt_connect+0x70>
	tx_buf_init(client, &packet);
   37830:	4669      	mov	r1, sp
   37832:	4620      	mov	r0, r4
   37834:	f7ff ff82 	bl	3773c <tx_buf_init>
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   37838:	69a3      	ldr	r3, [r4, #24]
	err_code = connect_request_encode(client, &packet);
   3783a:	4669      	mov	r1, sp
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   3783c:	f043 0302 	orr.w	r3, r3, #2
   37840:	61a3      	str	r3, [r4, #24]
	err_code = connect_request_encode(client, &packet);
   37842:	4620      	mov	r0, r4
   37844:	f7e7 f90e 	bl	1ea64 <connect_request_encode>
	if (err_code < 0) {
   37848:	1e05      	subs	r5, r0, #0
   3784a:	db13      	blt.n	37874 <mqtt_connect+0x68>
	err_code = mqtt_transport_write(client, packet.cur,
   3784c:	e9dd 1200 	ldrd	r1, r2, [sp]
   37850:	4620      	mov	r0, r4
   37852:	1a52      	subs	r2, r2, r1
   37854:	f7e7 f9b4 	bl	1ebc0 <mqtt_transport_write>
	if (err_code < 0) {
   37858:	1e05      	subs	r5, r0, #0
   3785a:	db0b      	blt.n	37874 <mqtt_connect+0x68>
   3785c:	f7ff ff60 	bl	37720 <k_uptime_get>
	client->unacked_ping = 0;
   37860:	2500      	movs	r5, #0
   37862:	6160      	str	r0, [r4, #20]
   37864:	f884 507b 	strb.w	r5, [r4, #123]	; 0x7b
error:
	if (err_code < 0) {
		client_reset(client);
	}

	mqtt_mutex_unlock(client);
   37868:	4620      	mov	r0, r4
   3786a:	f7e7 f9db 	bl	1ec24 <mqtt_mutex_unlock>

	return err_code;
}
   3786e:	4628      	mov	r0, r5
   37870:	b003      	add	sp, #12
   37872:	bd30      	pop	{r4, r5, pc}
	client_disconnect(client, err_code);
   37874:	4629      	mov	r1, r5
   37876:	4620      	mov	r0, r4
   37878:	f7ff ff7f 	bl	3777a <client_disconnect>
	MQTT_STATE_INIT(client);
   3787c:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   3787e:	e9c4 3305 	strd	r3, r3, [r4, #20]
	client->internal.remaining_payload = 0U;
   37882:	e9c4 3307 	strd	r3, r3, [r4, #28]
   37886:	e7ef      	b.n	37868 <mqtt_connect+0x5c>
		err_code = -ENOMEM;
   37888:	f06f 050b 	mvn.w	r5, #11
   3788c:	e7f6      	b.n	3787c <mqtt_connect+0x70>
	NULL_PARAM_CHECK(client);
   3788e:	f06f 0515 	mvn.w	r5, #21
   37892:	e7ec      	b.n	3786e <mqtt_connect+0x62>

00037894 <mqtt_publish>:
	return 0;
}

int mqtt_publish(struct mqtt_client *client,
		 const struct mqtt_publish_param *param)
{
   37894:	b570      	push	{r4, r5, r6, lr}
   37896:	460e      	mov	r6, r1
   37898:	b08e      	sub	sp, #56	; 0x38
	int err_code;
	struct buf_ctx packet;
	struct iovec io_vector[2];
	struct msghdr msg;

	NULL_PARAM_CHECK(client);
   3789a:	4605      	mov	r5, r0
   3789c:	2800      	cmp	r0, #0
   3789e:	d03b      	beq.n	37918 <mqtt_publish+0x84>
	NULL_PARAM_CHECK(param);
   378a0:	2900      	cmp	r1, #0
   378a2:	d039      	beq.n	37918 <mqtt_publish+0x84>
	MQTT_TRC("[CID %p]:[State 0x%02x]: >> Topic size 0x%08x, "
		 "Data size 0x%08x", client, client->internal.state,
		 param->message.topic.topic.size,
		 param->message.payload.len);

	mqtt_mutex_lock(client);
   378a4:	f7e7 f9ea 	bl	1ec7c <mqtt_mutex_lock>

	tx_buf_init(client, &packet);
   378a8:	a901      	add	r1, sp, #4
   378aa:	4628      	mov	r0, r5
   378ac:	f7ff ff46 	bl	3773c <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   378b0:	69ab      	ldr	r3, [r5, #24]
   378b2:	075b      	lsls	r3, r3, #29
   378b4:	d52d      	bpl.n	37912 <mqtt_publish+0x7e>
	err_code = verify_tx_state(client);
	if (err_code < 0) {
		goto error;
	}

	err_code = publish_encode(param, &packet);
   378b6:	a901      	add	r1, sp, #4
   378b8:	4630      	mov	r0, r6
   378ba:	f7ff fd52 	bl	37362 <publish_encode>
	if (err_code < 0) {
   378be:	1e04      	subs	r4, r0, #0
   378c0:	db1c      	blt.n	378fc <mqtt_publish+0x68>
		goto error;
	}

	io_vector[0].iov_base = packet.cur;
   378c2:	9a01      	ldr	r2, [sp, #4]
	io_vector[0].iov_len = packet.end - packet.cur;
   378c4:	9b02      	ldr	r3, [sp, #8]
	io_vector[0].iov_base = packet.cur;
   378c6:	9203      	str	r2, [sp, #12]
	io_vector[0].iov_len = packet.end - packet.cur;
   378c8:	1a9b      	subs	r3, r3, r2
	io_vector[1].iov_base = param->message.payload.data;
	io_vector[1].iov_len = param->message.payload.len;

	memset(&msg, 0, sizeof(msg));
   378ca:	221c      	movs	r2, #28
	io_vector[0].iov_len = packet.end - packet.cur;
   378cc:	9304      	str	r3, [sp, #16]
	io_vector[1].iov_base = param->message.payload.data;
   378ce:	68f3      	ldr	r3, [r6, #12]
	memset(&msg, 0, sizeof(msg));
   378d0:	2100      	movs	r1, #0
	io_vector[1].iov_base = param->message.payload.data;
   378d2:	9305      	str	r3, [sp, #20]
	io_vector[1].iov_len = param->message.payload.len;
   378d4:	6933      	ldr	r3, [r6, #16]
	memset(&msg, 0, sizeof(msg));
   378d6:	eb0d 0002 	add.w	r0, sp, r2
	io_vector[1].iov_len = param->message.payload.len;
   378da:	9306      	str	r3, [sp, #24]
	memset(&msg, 0, sizeof(msg));
   378dc:	f001 fbab 	bl	39036 <memset>

	msg.msg_iov = io_vector;
   378e0:	ab03      	add	r3, sp, #12
   378e2:	9309      	str	r3, [sp, #36]	; 0x24
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   378e4:	2302      	movs	r3, #2
	err_code = mqtt_transport_write_msg(client, message);
   378e6:	a907      	add	r1, sp, #28
   378e8:	4628      	mov	r0, r5
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   378ea:	930a      	str	r3, [sp, #40]	; 0x28
	err_code = mqtt_transport_write_msg(client, message);
   378ec:	f7e7 f974 	bl	1ebd8 <mqtt_transport_write_msg>
	if (err_code < 0) {
   378f0:	1e04      	subs	r4, r0, #0
   378f2:	da09      	bge.n	37908 <mqtt_publish+0x74>
		client_disconnect(client, err_code);
   378f4:	4621      	mov	r1, r4
   378f6:	4628      	mov	r0, r5
   378f8:	f7ff ff3f 	bl	3777a <client_disconnect>

error:
	MQTT_TRC("[CID %p]:[State 0x%02x]: << result 0x%08x",
			 client, client->internal.state, err_code);

	mqtt_mutex_unlock(client);
   378fc:	4628      	mov	r0, r5
   378fe:	f7e7 f991 	bl	1ec24 <mqtt_mutex_unlock>

	return err_code;
}
   37902:	4620      	mov	r0, r4
   37904:	b00e      	add	sp, #56	; 0x38
   37906:	bd70      	pop	{r4, r5, r6, pc}
   37908:	f7ff ff0a 	bl	37720 <k_uptime_get>
	return 0;
   3790c:	2400      	movs	r4, #0
   3790e:	6168      	str	r0, [r5, #20]
   37910:	e7f4      	b.n	378fc <mqtt_publish+0x68>
		return -ENOTCONN;
   37912:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   37916:	e7f1      	b.n	378fc <mqtt_publish+0x68>
	NULL_PARAM_CHECK(client);
   37918:	f06f 0415 	mvn.w	r4, #21
   3791c:	e7f1      	b.n	37902 <mqtt_publish+0x6e>

0003791e <mqtt_publish_qos1_ack>:

int mqtt_publish_qos1_ack(struct mqtt_client *client,
			  const struct mqtt_puback_param *param)
{
   3791e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   37920:	460c      	mov	r4, r1
	int err_code;
	struct buf_ctx packet;

	NULL_PARAM_CHECK(client);
   37922:	4605      	mov	r5, r0
   37924:	b1f8      	cbz	r0, 37966 <mqtt_publish_qos1_ack+0x48>
	NULL_PARAM_CHECK(param);
   37926:	b1f1      	cbz	r1, 37966 <mqtt_publish_qos1_ack+0x48>

	MQTT_TRC("[CID %p]:[State 0x%02x]: >> Message id 0x%04x",
		 client, client->internal.state, param->message_id);

	mqtt_mutex_lock(client);
   37928:	f7e7 f9a8 	bl	1ec7c <mqtt_mutex_lock>

	tx_buf_init(client, &packet);
   3792c:	4669      	mov	r1, sp
   3792e:	4628      	mov	r0, r5
   37930:	f7ff ff04 	bl	3773c <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   37934:	69ab      	ldr	r3, [r5, #24]
   37936:	075b      	lsls	r3, r3, #29
   37938:	d512      	bpl.n	37960 <mqtt_publish_qos1_ack+0x42>
	err_code = verify_tx_state(client);
	if (err_code < 0) {
		goto error;
	}

	err_code = publish_ack_encode(param, &packet);
   3793a:	4620      	mov	r0, r4
   3793c:	4669      	mov	r1, sp
   3793e:	f7ff fd4c 	bl	373da <publish_ack_encode>
	if (err_code < 0) {
   37942:	1e04      	subs	r4, r0, #0
   37944:	db06      	blt.n	37954 <mqtt_publish_qos1_ack+0x36>
		goto error;
	}

	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   37946:	e9dd 1200 	ldrd	r1, r2, [sp]
   3794a:	4628      	mov	r0, r5
   3794c:	1a52      	subs	r2, r2, r1
   3794e:	f7ff ff33 	bl	377b8 <client_write>
   37952:	4604      	mov	r4, r0

error:
	MQTT_TRC("[CID %p]:[State 0x%02x]: << result 0x%08x",
		 client, client->internal.state, err_code);

	mqtt_mutex_unlock(client);
   37954:	4628      	mov	r0, r5
   37956:	f7e7 f965 	bl	1ec24 <mqtt_mutex_unlock>

	return err_code;
}
   3795a:	4620      	mov	r0, r4
   3795c:	b003      	add	sp, #12
   3795e:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   37960:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   37964:	e7f6      	b.n	37954 <mqtt_publish_qos1_ack+0x36>
	NULL_PARAM_CHECK(client);
   37966:	f06f 0415 	mvn.w	r4, #21
   3796a:	e7f6      	b.n	3795a <mqtt_publish_qos1_ack+0x3c>

0003796c <mqtt_publish_qos2_release>:
	return err_code;
}

int mqtt_publish_qos2_release(struct mqtt_client *client,
			      const struct mqtt_pubrel_param *param)
{
   3796c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3796e:	460c      	mov	r4, r1
	int err_code;
	struct buf_ctx packet;

	NULL_PARAM_CHECK(client);
   37970:	4605      	mov	r5, r0
   37972:	b1f8      	cbz	r0, 379b4 <mqtt_publish_qos2_release+0x48>
	NULL_PARAM_CHECK(param);
   37974:	b1f1      	cbz	r1, 379b4 <mqtt_publish_qos2_release+0x48>

	MQTT_TRC("[CID %p]:[State 0x%02x]: >> Message id 0x%04x",
		 client, client->internal.state, param->message_id);

	mqtt_mutex_lock(client);
   37976:	f7e7 f981 	bl	1ec7c <mqtt_mutex_lock>

	tx_buf_init(client, &packet);
   3797a:	4669      	mov	r1, sp
   3797c:	4628      	mov	r0, r5
   3797e:	f7ff fedd 	bl	3773c <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   37982:	69ab      	ldr	r3, [r5, #24]
   37984:	075b      	lsls	r3, r3, #29
   37986:	d512      	bpl.n	379ae <mqtt_publish_qos2_release+0x42>
	err_code = verify_tx_state(client);
	if (err_code < 0) {
		goto error;
	}

	err_code = publish_release_encode(param, &packet);
   37988:	4620      	mov	r0, r4
   3798a:	4669      	mov	r1, sp
   3798c:	f7ff fd2a 	bl	373e4 <publish_release_encode>
	if (err_code < 0) {
   37990:	1e04      	subs	r4, r0, #0
   37992:	db06      	blt.n	379a2 <mqtt_publish_qos2_release+0x36>
		goto error;
	}

	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   37994:	e9dd 1200 	ldrd	r1, r2, [sp]
   37998:	4628      	mov	r0, r5
   3799a:	1a52      	subs	r2, r2, r1
   3799c:	f7ff ff0c 	bl	377b8 <client_write>
   379a0:	4604      	mov	r4, r0

error:
	MQTT_TRC("[CID %p]:[State 0x%02x]: << result 0x%08x",
		 client, client->internal.state, err_code);

	mqtt_mutex_unlock(client);
   379a2:	4628      	mov	r0, r5
   379a4:	f7e7 f93e 	bl	1ec24 <mqtt_mutex_unlock>

	return err_code;
}
   379a8:	4620      	mov	r0, r4
   379aa:	b003      	add	sp, #12
   379ac:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   379ae:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   379b2:	e7f6      	b.n	379a2 <mqtt_publish_qos2_release+0x36>
	NULL_PARAM_CHECK(client);
   379b4:	f06f 0415 	mvn.w	r4, #21
   379b8:	e7f6      	b.n	379a8 <mqtt_publish_qos2_release+0x3c>

000379ba <mqtt_disconnect>:

	return err_code;
}

int mqtt_disconnect(struct mqtt_client *client)
{
   379ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err_code;
	struct buf_ctx packet;

	NULL_PARAM_CHECK(client);
   379bc:	4604      	mov	r4, r0
   379be:	b310      	cbz	r0, 37a06 <mqtt_disconnect+0x4c>

	mqtt_mutex_lock(client);
   379c0:	f7e7 f95c 	bl	1ec7c <mqtt_mutex_lock>

	tx_buf_init(client, &packet);
   379c4:	4669      	mov	r1, sp
   379c6:	4620      	mov	r0, r4
   379c8:	f7ff feb8 	bl	3773c <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   379cc:	69a3      	ldr	r3, [r4, #24]
   379ce:	075b      	lsls	r3, r3, #29
   379d0:	d516      	bpl.n	37a00 <mqtt_disconnect+0x46>
	err_code = verify_tx_state(client);
	if (err_code < 0) {
		goto error;
	}

	err_code = disconnect_encode(&packet);
   379d2:	4668      	mov	r0, sp
   379d4:	f7e7 f8c6 	bl	1eb64 <disconnect_encode>
	if (err_code < 0) {
   379d8:	1e05      	subs	r5, r0, #0
   379da:	db0b      	blt.n	379f4 <mqtt_disconnect+0x3a>
		goto error;
	}

	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   379dc:	e9dd 1200 	ldrd	r1, r2, [sp]
   379e0:	4620      	mov	r0, r4
   379e2:	1a52      	subs	r2, r2, r1
   379e4:	f7ff fee8 	bl	377b8 <client_write>
	if (err_code < 0) {
   379e8:	1e05      	subs	r5, r0, #0
   379ea:	db03      	blt.n	379f4 <mqtt_disconnect+0x3a>
		goto error;
	}

	client_disconnect(client, 0);
   379ec:	2100      	movs	r1, #0
   379ee:	4620      	mov	r0, r4
   379f0:	f7ff fec3 	bl	3777a <client_disconnect>

error:
	mqtt_mutex_unlock(client);
   379f4:	4620      	mov	r0, r4
   379f6:	f7e7 f915 	bl	1ec24 <mqtt_mutex_unlock>

	return err_code;
}
   379fa:	4628      	mov	r0, r5
   379fc:	b003      	add	sp, #12
   379fe:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   37a00:	f06f 057f 	mvn.w	r5, #127	; 0x7f
   37a04:	e7f6      	b.n	379f4 <mqtt_disconnect+0x3a>
	NULL_PARAM_CHECK(client);
   37a06:	f06f 0515 	mvn.w	r5, #21
   37a0a:	e7f6      	b.n	379fa <mqtt_disconnect+0x40>

00037a0c <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_client *client,
		   const struct mqtt_subscription_list *param)
{
   37a0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   37a0e:	460c      	mov	r4, r1
	int err_code;
	struct buf_ctx packet;

	NULL_PARAM_CHECK(client);
   37a10:	4605      	mov	r5, r0
   37a12:	b1f8      	cbz	r0, 37a54 <mqtt_subscribe+0x48>
	NULL_PARAM_CHECK(param);
   37a14:	b1f1      	cbz	r1, 37a54 <mqtt_subscribe+0x48>

	MQTT_TRC("[CID %p]:[State 0x%02x]: >> message id 0x%04x "
		 "topic count 0x%04x", client, client->internal.state,
		 param->message_id, param->list_count);

	mqtt_mutex_lock(client);
   37a16:	f7e7 f931 	bl	1ec7c <mqtt_mutex_lock>

	tx_buf_init(client, &packet);
   37a1a:	4669      	mov	r1, sp
   37a1c:	4628      	mov	r0, r5
   37a1e:	f7ff fe8d 	bl	3773c <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   37a22:	69ab      	ldr	r3, [r5, #24]
   37a24:	075b      	lsls	r3, r3, #29
   37a26:	d512      	bpl.n	37a4e <mqtt_subscribe+0x42>
	err_code = verify_tx_state(client);
	if (err_code < 0) {
		goto error;
	}

	err_code = subscribe_encode(param, &packet);
   37a28:	4620      	mov	r0, r4
   37a2a:	4669      	mov	r1, sp
   37a2c:	f7ff fcdf 	bl	373ee <subscribe_encode>
	if (err_code < 0) {
   37a30:	1e04      	subs	r4, r0, #0
   37a32:	db06      	blt.n	37a42 <mqtt_subscribe+0x36>
		goto error;
	}

	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   37a34:	e9dd 1200 	ldrd	r1, r2, [sp]
   37a38:	4628      	mov	r0, r5
   37a3a:	1a52      	subs	r2, r2, r1
   37a3c:	f7ff febc 	bl	377b8 <client_write>
   37a40:	4604      	mov	r4, r0

error:
	MQTT_TRC("[CID %p]:[State 0x%02x]: << result 0x%08x",
		 client, client->internal.state, err_code);

	mqtt_mutex_unlock(client);
   37a42:	4628      	mov	r0, r5
   37a44:	f7e7 f8ee 	bl	1ec24 <mqtt_mutex_unlock>

	return err_code;
}
   37a48:	4620      	mov	r0, r4
   37a4a:	b003      	add	sp, #12
   37a4c:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   37a4e:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   37a52:	e7f6      	b.n	37a42 <mqtt_subscribe+0x36>
	NULL_PARAM_CHECK(client);
   37a54:	f06f 0415 	mvn.w	r4, #21
   37a58:	e7f6      	b.n	37a48 <mqtt_subscribe+0x3c>

00037a5a <mqtt_ping>:

	return err_code;
}

int mqtt_ping(struct mqtt_client *client)
{
   37a5a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err_code;
	struct buf_ctx packet;

	NULL_PARAM_CHECK(client);
   37a5c:	4604      	mov	r4, r0
   37a5e:	b320      	cbz	r0, 37aaa <mqtt_ping+0x50>

	mqtt_mutex_lock(client);
   37a60:	f7e7 f90c 	bl	1ec7c <mqtt_mutex_lock>

	tx_buf_init(client, &packet);
   37a64:	4669      	mov	r1, sp
   37a66:	4620      	mov	r0, r4
   37a68:	f7ff fe68 	bl	3773c <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   37a6c:	69a3      	ldr	r3, [r4, #24]
   37a6e:	075b      	lsls	r3, r3, #29
   37a70:	d518      	bpl.n	37aa4 <mqtt_ping+0x4a>
	err_code = verify_tx_state(client);
	if (err_code < 0) {
		goto error;
	}

	err_code = ping_request_encode(&packet);
   37a72:	4668      	mov	r0, sp
   37a74:	f7e7 f888 	bl	1eb88 <ping_request_encode>
	if (err_code < 0) {
   37a78:	1e05      	subs	r5, r0, #0
   37a7a:	db0d      	blt.n	37a98 <mqtt_ping+0x3e>
		goto error;
	}

	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   37a7c:	e9dd 1200 	ldrd	r1, r2, [sp]
   37a80:	4620      	mov	r0, r4
   37a82:	1a52      	subs	r2, r2, r1
   37a84:	f7ff fe98 	bl	377b8 <client_write>

	if (client->unacked_ping >= INT8_MAX) {
   37a88:	f994 307b 	ldrsb.w	r3, [r4, #123]	; 0x7b
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   37a8c:	4605      	mov	r5, r0
	if (client->unacked_ping >= INT8_MAX) {
   37a8e:	2b7f      	cmp	r3, #127	; 0x7f
   37a90:	d002      	beq.n	37a98 <mqtt_ping+0x3e>
		MQTT_TRC("PING count overflow!");
	} else {
		client->unacked_ping++;
   37a92:	3301      	adds	r3, #1
   37a94:	f884 307b 	strb.w	r3, [r4, #123]	; 0x7b
	}

error:
	mqtt_mutex_unlock(client);
   37a98:	4620      	mov	r0, r4
   37a9a:	f7e7 f8c3 	bl	1ec24 <mqtt_mutex_unlock>

	return err_code;
}
   37a9e:	4628      	mov	r0, r5
   37aa0:	b003      	add	sp, #12
   37aa2:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   37aa4:	f06f 057f 	mvn.w	r5, #127	; 0x7f
   37aa8:	e7f6      	b.n	37a98 <mqtt_ping+0x3e>
	NULL_PARAM_CHECK(client);
   37aaa:	f06f 0515 	mvn.w	r5, #21
   37aae:	e7f6      	b.n	37a9e <mqtt_ping+0x44>

00037ab0 <mqtt_live>:

	return 0;
}

int mqtt_live(struct mqtt_client *client)
{
   37ab0:	b570      	push	{r4, r5, r6, lr}
	int err_code = 0;
	u32_t elapsed_time;
	bool ping_sent = false;

	NULL_PARAM_CHECK(client);
   37ab2:	4606      	mov	r6, r0
   37ab4:	b300      	cbz	r0, 37af8 <mqtt_live+0x48>

	mqtt_mutex_lock(client);
   37ab6:	f7e7 f8e1 	bl	1ec7c <mqtt_mutex_lock>

	elapsed_time = mqtt_elapsed_time_in_ms_get(
   37aba:	6974      	ldr	r4, [r6, #20]
   37abc:	f7ff fe30 	bl	37720 <k_uptime_get>
 *
 * @retval Time elapsed since last_activity time.
 */
static inline u32_t mqtt_elapsed_time_in_ms_get(u32_t last_activity)
{
	s32_t diff = k_uptime_get_32() - last_activity;
   37ac0:	1b00      	subs	r0, r0, r4
				client->internal.last_activity);
	if ((client->keepalive > 0) &&
   37ac2:	f8b6 4078 	ldrh.w	r4, [r6, #120]	; 0x78

	if (diff < 0) {
		return 0;
   37ac6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   37aca:	b19c      	cbz	r4, 37af4 <mqtt_live+0x44>
	    (elapsed_time >= (client->keepalive * 1000))) {
   37acc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   37ad0:	435c      	muls	r4, r3
	if ((client->keepalive > 0) &&
   37ad2:	4284      	cmp	r4, r0
   37ad4:	d80d      	bhi.n	37af2 <mqtt_live+0x42>
		err_code = mqtt_ping(client);
   37ad6:	4630      	mov	r0, r6
   37ad8:	f7ff ffbf 	bl	37a5a <mqtt_ping>
		ping_sent = true;
   37adc:	2401      	movs	r4, #1
		err_code = mqtt_ping(client);
   37ade:	4605      	mov	r5, r0
	}

	mqtt_mutex_unlock(client);
   37ae0:	4630      	mov	r0, r6
   37ae2:	f7e7 f89f 	bl	1ec24 <mqtt_mutex_unlock>

	if (ping_sent) {
		return err_code;
	} else {
		return -EAGAIN;
   37ae6:	2c00      	cmp	r4, #0
   37ae8:	bf08      	it	eq
   37aea:	f06f 050a 	mvneq.w	r5, #10
	}
}
   37aee:	4628      	mov	r0, r5
   37af0:	bd70      	pop	{r4, r5, r6, pc}
	bool ping_sent = false;
   37af2:	2400      	movs	r4, #0
	int err_code = 0;
   37af4:	4625      	mov	r5, r4
   37af6:	e7f3      	b.n	37ae0 <mqtt_live+0x30>
	NULL_PARAM_CHECK(client);
   37af8:	f06f 0515 	mvn.w	r5, #21
   37afc:	e7f7      	b.n	37aee <mqtt_live+0x3e>

00037afe <mqtt_input>:

	return keepalive_ms - elapsed_time;
}

int mqtt_input(struct mqtt_client *client)
{
   37afe:	b538      	push	{r3, r4, r5, lr}
	int err_code = 0;

	NULL_PARAM_CHECK(client);
   37b00:	4605      	mov	r5, r0
   37b02:	b1d0      	cbz	r0, 37b3a <mqtt_input+0x3c>

	mqtt_mutex_lock(client);
   37b04:	f7e7 f8ba 	bl	1ec7c <mqtt_mutex_lock>

	MQTT_TRC("state:0x%08x", client->internal.state);

	if (MQTT_HAS_STATE(client, MQTT_STATE_TCP_CONNECTED)) {
   37b08:	69ab      	ldr	r3, [r5, #24]
   37b0a:	079b      	lsls	r3, r3, #30
   37b0c:	d50f      	bpl.n	37b2e <mqtt_input+0x30>
	if (client->internal.remaining_payload > 0) {
   37b0e:	6a2b      	ldr	r3, [r5, #32]
   37b10:	b983      	cbnz	r3, 37b34 <mqtt_input+0x36>
	err_code = mqtt_handle_rx(client);
   37b12:	4628      	mov	r0, r5
   37b14:	f7ff fccd 	bl	374b2 <mqtt_handle_rx>
	if (err_code < 0) {
   37b18:	1e04      	subs	r4, r0, #0
   37b1a:	da03      	bge.n	37b24 <mqtt_input+0x26>
		client_disconnect(client, err_code);
   37b1c:	4621      	mov	r1, r4
   37b1e:	4628      	mov	r0, r5
   37b20:	f7ff fe2b 	bl	3777a <client_disconnect>
		err_code = client_read(client);
	} else {
		err_code = -EACCES;
	}

	mqtt_mutex_unlock(client);
   37b24:	4628      	mov	r0, r5
   37b26:	f7e7 f87d 	bl	1ec24 <mqtt_mutex_unlock>

	return err_code;
}
   37b2a:	4620      	mov	r0, r4
   37b2c:	bd38      	pop	{r3, r4, r5, pc}
		err_code = -EACCES;
   37b2e:	f06f 040c 	mvn.w	r4, #12
   37b32:	e7f7      	b.n	37b24 <mqtt_input+0x26>
		return -EBUSY;
   37b34:	f06f 040f 	mvn.w	r4, #15
   37b38:	e7f4      	b.n	37b24 <mqtt_input+0x26>
	NULL_PARAM_CHECK(client);
   37b3a:	f06f 0415 	mvn.w	r4, #21
   37b3e:	e7f4      	b.n	37b2a <mqtt_input+0x2c>

00037b40 <mqtt_client_tls_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tls_connect(struct mqtt_client *client)
{
   37b40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct sockaddr *broker = client->broker;
   37b42:	6d06      	ldr	r6, [r0, #80]	; 0x50
{
   37b44:	4604      	mov	r4, r0
	struct mqtt_sec_config *tls_config = &client->transport.tls.config;
	int ret;

	client->transport.tls.sock = socket(broker->sa_family,
   37b46:	8830      	ldrh	r0, [r6, #0]
	return z_impl_zsock_socket(family, type, proto);
   37b48:	f44f 7281 	mov.w	r2, #258	; 0x102
   37b4c:	2101      	movs	r1, #1
   37b4e:	f7e1 fc4f 	bl	193f0 <z_impl_zsock_socket>
					    SOCK_STREAM, IPPROTO_TLS_1_2);
	if (client->transport.tls.sock < 0) {
   37b52:	2800      	cmp	r0, #0
	client->transport.tls.sock = socket(broker->sa_family,
   37b54:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tls.sock < 0) {
   37b56:	da05      	bge.n	37b64 <mqtt_client_tls_connect+0x24>
	MQTT_TRC("Connect completed");
	return 0;

error:
	(void)close(client->transport.tls.sock);
	return -errno;
   37b58:	f7fd fcbb 	bl	354d2 <__errno>
   37b5c:	6800      	ldr	r0, [r0, #0]
   37b5e:	4240      	negs	r0, r0
}
   37b60:	b003      	add	sp, #12
   37b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke5(*(uintptr_t *)&sock, *(uintptr_t *)&level, *(uintptr_t *)&optname, *(uintptr_t *)&optval, *(uintptr_t *)&optlen, K_SYSCALL_ZSOCK_SETSOCKOPT);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   37b64:	2304      	movs	r3, #4
   37b66:	2205      	movs	r2, #5
   37b68:	9300      	str	r3, [sp, #0]
   37b6a:	f44f 718d 	mov.w	r1, #282	; 0x11a
   37b6e:	f104 032c 	add.w	r3, r4, #44	; 0x2c
   37b72:	f7fc fa05 	bl	33f80 <z_impl_zsock_setsockopt>
	if (ret < 0) {
   37b76:	2800      	cmp	r0, #0
   37b78:	da03      	bge.n	37b82 <mqtt_client_tls_connect+0x42>
	(void)close(client->transport.tls.sock);
   37b7a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_close(sock);
   37b7c:	f7fc f943 	bl	33e06 <z_impl_zsock_close>
   37b80:	e7ea      	b.n	37b58 <mqtt_client_tls_connect+0x18>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   37b82:	6b63      	ldr	r3, [r4, #52]	; 0x34
   37b84:	bb03      	cbnz	r3, 37bc8 <mqtt_client_tls_connect+0x88>
	if (tls_config->sec_tag_list != NULL && tls_config->sec_tag_count > 0) {
   37b86:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   37b88:	bb63      	cbnz	r3, 37be4 <mqtt_client_tls_connect+0xa4>
	if (tls_config->hostname) {
   37b8a:	6c25      	ldr	r5, [r4, #64]	; 0x40
   37b8c:	2d00      	cmp	r5, #0
   37b8e:	d137      	bne.n	37c00 <mqtt_client_tls_connect+0xc0>
	if (tls_config->session_cache == TLS_SESSION_CACHE_ENABLED) {
   37b90:	6c63      	ldr	r3, [r4, #68]	; 0x44
   37b92:	2b01      	cmp	r3, #1
   37b94:	d10b      	bne.n	37bae <mqtt_client_tls_connect+0x6e>
   37b96:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   37b98:	2304      	movs	r3, #4
   37b9a:	2207      	movs	r2, #7
   37b9c:	9300      	str	r3, [sp, #0]
   37b9e:	f44f 718d 	mov.w	r1, #282	; 0x11a
   37ba2:	f104 0344 	add.w	r3, r4, #68	; 0x44
   37ba6:	f7fc f9eb 	bl	33f80 <z_impl_zsock_setsockopt>
		if (ret < 0) {
   37baa:	2800      	cmp	r0, #0
   37bac:	dbe5      	blt.n	37b7a <mqtt_client_tls_connect+0x3a>
	if (broker->sa_family == AF_INET) {
   37bae:	8833      	ldrh	r3, [r6, #0]
	ret = connect(client->transport.tls.sock, client->broker,
   37bb0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	size_t peer_addr_size = sizeof(struct sockaddr_in6);
   37bb2:	2b01      	cmp	r3, #1
   37bb4:	bf0c      	ite	eq
   37bb6:	2208      	moveq	r2, #8
   37bb8:	2218      	movne	r2, #24
	ret = connect(client->transport.tls.sock, client->broker,
   37bba:	6d21      	ldr	r1, [r4, #80]	; 0x50
	return z_impl_zsock_connect(sock, addr, addrlen);
   37bbc:	f7fc f93c 	bl	33e38 <z_impl_zsock_connect>
	if (ret < 0) {
   37bc0:	2800      	cmp	r0, #0
   37bc2:	dbda      	blt.n	37b7a <mqtt_client_tls_connect+0x3a>
	return 0;
   37bc4:	2000      	movs	r0, #0
   37bc6:	e7cb      	b.n	37b60 <mqtt_client_tls_connect+0x20>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   37bc8:	6b22      	ldr	r2, [r4, #48]	; 0x30
   37bca:	2a00      	cmp	r2, #0
   37bcc:	d0db      	beq.n	37b86 <mqtt_client_tls_connect+0x46>
   37bce:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		ret = setsockopt(client->transport.tls.sock, SOL_TLS,
   37bd0:	0092      	lsls	r2, r2, #2
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   37bd2:	9200      	str	r2, [sp, #0]
   37bd4:	f44f 718d 	mov.w	r1, #282	; 0x11a
   37bd8:	2203      	movs	r2, #3
   37bda:	f7fc f9d1 	bl	33f80 <z_impl_zsock_setsockopt>
		if (ret < 0) {
   37bde:	2800      	cmp	r0, #0
   37be0:	dad1      	bge.n	37b86 <mqtt_client_tls_connect+0x46>
   37be2:	e7ca      	b.n	37b7a <mqtt_client_tls_connect+0x3a>
	if (tls_config->sec_tag_list != NULL && tls_config->sec_tag_count > 0) {
   37be4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   37be6:	2a00      	cmp	r2, #0
   37be8:	d0cf      	beq.n	37b8a <mqtt_client_tls_connect+0x4a>
   37bea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		ret = setsockopt(client->transport.tls.sock, SOL_TLS,
   37bec:	0092      	lsls	r2, r2, #2
   37bee:	9200      	str	r2, [sp, #0]
   37bf0:	f44f 718d 	mov.w	r1, #282	; 0x11a
   37bf4:	2201      	movs	r2, #1
   37bf6:	f7fc f9c3 	bl	33f80 <z_impl_zsock_setsockopt>
		if (ret < 0) {
   37bfa:	2800      	cmp	r0, #0
   37bfc:	dac5      	bge.n	37b8a <mqtt_client_tls_connect+0x4a>
   37bfe:	e7bc      	b.n	37b7a <mqtt_client_tls_connect+0x3a>
		ret = setsockopt(client->transport.tls.sock, SOL_TLS,
   37c00:	4628      	mov	r0, r5
   37c02:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   37c04:	f7da fa3c 	bl	12080 <strlen>
   37c08:	2202      	movs	r2, #2
   37c0a:	9000      	str	r0, [sp, #0]
   37c0c:	462b      	mov	r3, r5
   37c0e:	f44f 718d 	mov.w	r1, #282	; 0x11a
   37c12:	4638      	mov	r0, r7
   37c14:	f7fc f9b4 	bl	33f80 <z_impl_zsock_setsockopt>
		if (ret < 0) {
   37c18:	2800      	cmp	r0, #0
   37c1a:	dab9      	bge.n	37b90 <mqtt_client_tls_connect+0x50>
   37c1c:	e7ad      	b.n	37b7a <mqtt_client_tls_connect+0x3a>

00037c1e <mqtt_client_tls_write>:

int mqtt_client_tls_write(struct mqtt_client *client, const u8_t *data,
			  u32_t datalen)
{
   37c1e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	u32_t offset = 0U;
   37c22:	2400      	movs	r4, #0
{
   37c24:	4607      	mov	r7, r0
   37c26:	4688      	mov	r8, r1
   37c28:	4615      	mov	r5, r2
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   37c2a:	4626      	mov	r6, r4
	int ret;

	while (offset < datalen) {
   37c2c:	42ac      	cmp	r4, r5
   37c2e:	d301      	bcc.n	37c34 <mqtt_client_tls_write+0x16>
		}

		offset += ret;
	}

	return 0;
   37c30:	2000      	movs	r0, #0
   37c32:	e00e      	b.n	37c52 <mqtt_client_tls_write+0x34>
		ret = send(client->transport.tls.sock, data + offset,
   37c34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   37c36:	2300      	movs	r3, #0
   37c38:	e9cd 6600 	strd	r6, r6, [sp]
   37c3c:	1b2a      	subs	r2, r5, r4
   37c3e:	eb08 0104 	add.w	r1, r8, r4
   37c42:	f7fc f91a 	bl	33e7a <z_impl_zsock_sendto>
		if (ret < 0) {
   37c46:	2800      	cmp	r0, #0
   37c48:	da06      	bge.n	37c58 <mqtt_client_tls_write+0x3a>
			return -errno;
   37c4a:	f7fd fc42 	bl	354d2 <__errno>
   37c4e:	6800      	ldr	r0, [r0, #0]
   37c50:	4240      	negs	r0, r0
}
   37c52:	b002      	add	sp, #8
   37c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		offset += ret;
   37c58:	4404      	add	r4, r0
   37c5a:	e7e7      	b.n	37c2c <mqtt_client_tls_write+0xe>

00037c5c <mqtt_client_tls_write_msg>:

int mqtt_client_tls_write_msg(struct mqtt_client *client,
			      const struct msghdr *message)
{
   37c5c:	b508      	push	{r3, lr}
	int ret;

	ret = sendmsg(client->transport.tls.sock, message, 0);
   37c5e:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_sendmsg(sock, msg, flags);
   37c60:	2200      	movs	r2, #0
   37c62:	f7fc f93f 	bl	33ee4 <z_impl_zsock_sendmsg>
	if (ret < 0) {
   37c66:	2800      	cmp	r0, #0
   37c68:	da04      	bge.n	37c74 <mqtt_client_tls_write_msg+0x18>
		return -errno;
   37c6a:	f7fd fc32 	bl	354d2 <__errno>
   37c6e:	6800      	ldr	r0, [r0, #0]
   37c70:	4240      	negs	r0, r0
	}

	return 0;
}
   37c72:	bd08      	pop	{r3, pc}
	return 0;
   37c74:	2000      	movs	r0, #0
   37c76:	e7fc      	b.n	37c72 <mqtt_client_tls_write_msg+0x16>

00037c78 <mqtt_client_tls_read>:

int mqtt_client_tls_read(struct mqtt_client *client, u8_t *data, u32_t buflen,
			 bool shall_block)
{
   37c78:	b513      	push	{r0, r1, r4, lr}
   37c7a:	2400      	movs	r4, #0
	int flags = 0;
	int ret;

	if (!shall_block) {
   37c7c:	2b00      	cmp	r3, #0
		flags |= MSG_DONTWAIT;
   37c7e:	bf14      	ite	ne
   37c80:	4623      	movne	r3, r4
   37c82:	2340      	moveq	r3, #64	; 0x40
	}

	ret = recv(client->transport.tls.sock, data, buflen, flags);
   37c84:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   37c86:	e9cd 4400 	strd	r4, r4, [sp]
   37c8a:	f7fc f948 	bl	33f1e <z_impl_zsock_recvfrom>
	if (ret < 0) {
   37c8e:	2800      	cmp	r0, #0
   37c90:	da03      	bge.n	37c9a <mqtt_client_tls_read+0x22>
		return -errno;
   37c92:	f7fd fc1e 	bl	354d2 <__errno>
   37c96:	6800      	ldr	r0, [r0, #0]
   37c98:	4240      	negs	r0, r0
	}

	return ret;
}
   37c9a:	b002      	add	sp, #8
   37c9c:	bd10      	pop	{r4, pc}

00037c9e <mqtt_client_tls_disconnect>:

int mqtt_client_tls_disconnect(struct mqtt_client *client)
{
   37c9e:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tls.sock);
	ret = close(client->transport.tls.sock);
   37ca0:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_close(sock);
   37ca2:	f7fc f8b0 	bl	33e06 <z_impl_zsock_close>
	if (ret < 0) {
   37ca6:	2800      	cmp	r0, #0
   37ca8:	da04      	bge.n	37cb4 <mqtt_client_tls_disconnect+0x16>
		return -errno;
   37caa:	f7fd fc12 	bl	354d2 <__errno>
   37cae:	6800      	ldr	r0, [r0, #0]
   37cb0:	4240      	negs	r0, r0
	}

	return 0;
}
   37cb2:	bd08      	pop	{r3, pc}
	return 0;
   37cb4:	2000      	movs	r0, #0
   37cb6:	e7fc      	b.n	37cb2 <mqtt_client_tls_disconnect+0x14>

00037cb8 <dns_init_resolver>:
	ret = dns_resolve_init(dns_resolve_get_default(), dns_servers, NULL);
	if (ret < 0) {
		NET_WARN("Cannot initialize DNS resolver (%d)", ret);
	}
#endif
}
   37cb8:	4770      	bx	lr

00037cba <base64_char>:
	if (value < 26) {
   37cba:	2819      	cmp	r0, #25
   37cbc:	dc01      	bgt.n	37cc2 <base64_char+0x8>
		return value + 'A';
   37cbe:	3041      	adds	r0, #65	; 0x41
   37cc0:	4770      	bx	lr
	} else if (value < 52) {
   37cc2:	2833      	cmp	r0, #51	; 0x33
   37cc4:	dc01      	bgt.n	37cca <base64_char+0x10>
		return value + 'a' - 26;
   37cc6:	3047      	adds	r0, #71	; 0x47
   37cc8:	4770      	bx	lr
	} else if (value < 62) {
   37cca:	283d      	cmp	r0, #61	; 0x3d
   37ccc:	dc01      	bgt.n	37cd2 <base64_char+0x18>
		return value + '0' - 52;
   37cce:	3804      	subs	r0, #4
   37cd0:	4770      	bx	lr
	} else if (value == 62) {
   37cd2:	283e      	cmp	r0, #62	; 0x3e
		return '_';
   37cd4:	bf0c      	ite	eq
   37cd6:	202d      	moveq	r0, #45	; 0x2d
   37cd8:	205f      	movne	r0, #95	; 0x5f
}
   37cda:	4770      	bx	lr

00037cdc <base64_outch>:
	if (st->overflowed) {
   37cdc:	7b02      	ldrb	r2, [r0, #12]
{
   37cde:	b510      	push	{r4, lr}
	if (st->overflowed) {
   37ce0:	b922      	cbnz	r2, 37cec <base64_outch+0x10>
	if (st->len < 2) {
   37ce2:	6883      	ldr	r3, [r0, #8]
   37ce4:	2b01      	cmp	r3, #1
   37ce6:	d802      	bhi.n	37cee <base64_outch+0x12>
		st->overflowed = true;
   37ce8:	2301      	movs	r3, #1
   37cea:	7303      	strb	r3, [r0, #12]
}
   37cec:	bd10      	pop	{r4, pc}
	*st->buf++ = ch;
   37cee:	6843      	ldr	r3, [r0, #4]
   37cf0:	1c5c      	adds	r4, r3, #1
   37cf2:	6044      	str	r4, [r0, #4]
   37cf4:	7019      	strb	r1, [r3, #0]
	st->len--;
   37cf6:	6883      	ldr	r3, [r0, #8]
   37cf8:	3b01      	subs	r3, #1
   37cfa:	6083      	str	r3, [r0, #8]
	*st->buf = 0;
   37cfc:	6843      	ldr	r3, [r0, #4]
   37cfe:	701a      	strb	r2, [r3, #0]
   37d00:	e7f4      	b.n	37cec <base64_outch+0x10>

00037d02 <base64_flush>:
	if (st->pending < 1) {
   37d02:	6903      	ldr	r3, [r0, #16]
{
   37d04:	b510      	push	{r4, lr}
	if (st->pending < 1) {
   37d06:	2b00      	cmp	r3, #0
{
   37d08:	4604      	mov	r4, r0
	if (st->pending < 1) {
   37d0a:	dd35      	ble.n	37d78 <base64_flush+0x76>
	base64_outch(st, base64_char(st->wip[0] >> 2));
   37d0c:	7b40      	ldrb	r0, [r0, #13]
   37d0e:	0880      	lsrs	r0, r0, #2
   37d10:	f7ff ffd3 	bl	37cba <base64_char>
   37d14:	b2c1      	uxtb	r1, r0
   37d16:	4620      	mov	r0, r4
   37d18:	f7ff ffe0 	bl	37cdc <base64_outch>
	base64_outch(st, base64_char(((st->wip[0] & 0x03) << 4) |
   37d1c:	7b63      	ldrb	r3, [r4, #13]
				(st->wip[1] >> 4)));
   37d1e:	7ba0      	ldrb	r0, [r4, #14]
	base64_outch(st, base64_char(((st->wip[0] & 0x03) << 4) |
   37d20:	011b      	lsls	r3, r3, #4
   37d22:	f003 0330 	and.w	r3, r3, #48	; 0x30
   37d26:	ea43 1010 	orr.w	r0, r3, r0, lsr #4
   37d2a:	f7ff ffc6 	bl	37cba <base64_char>
   37d2e:	b2c1      	uxtb	r1, r0
   37d30:	4620      	mov	r0, r4
   37d32:	f7ff ffd3 	bl	37cdc <base64_outch>
	if (st->pending >= 2) {
   37d36:	6923      	ldr	r3, [r4, #16]
   37d38:	2b01      	cmp	r3, #1
   37d3a:	dd0c      	ble.n	37d56 <base64_flush+0x54>
		base64_outch(st, base64_char(((st->wip[1] & 0x0f) << 2) |
   37d3c:	7ba3      	ldrb	r3, [r4, #14]
				(st->wip[2] >> 6)));
   37d3e:	7be0      	ldrb	r0, [r4, #15]
		base64_outch(st, base64_char(((st->wip[1] & 0x0f) << 2) |
   37d40:	009b      	lsls	r3, r3, #2
   37d42:	f003 033c 	and.w	r3, r3, #60	; 0x3c
   37d46:	ea43 1090 	orr.w	r0, r3, r0, lsr #6
   37d4a:	f7ff ffb6 	bl	37cba <base64_char>
   37d4e:	b2c1      	uxtb	r1, r0
   37d50:	4620      	mov	r0, r4
   37d52:	f7ff ffc3 	bl	37cdc <base64_outch>
	if (st->pending >= 3) {
   37d56:	6923      	ldr	r3, [r4, #16]
   37d58:	2b02      	cmp	r3, #2
   37d5a:	dd08      	ble.n	37d6e <base64_flush+0x6c>
		base64_outch(st, base64_char(st->wip[2] & 0x3f));
   37d5c:	7be0      	ldrb	r0, [r4, #15]
   37d5e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   37d62:	f7ff ffaa 	bl	37cba <base64_char>
   37d66:	b2c1      	uxtb	r1, r0
   37d68:	4620      	mov	r0, r4
   37d6a:	f7ff ffb7 	bl	37cdc <base64_outch>
	st->pending = 0;
   37d6e:	2300      	movs	r3, #0
   37d70:	6123      	str	r3, [r4, #16]
   37d72:	f8a4 300d 	strh.w	r3, [r4, #13]
   37d76:	73e3      	strb	r3, [r4, #15]
}
   37d78:	bd10      	pop	{r4, pc}

00037d7a <base64_append_bytes>:
{
   37d7a:	b570      	push	{r4, r5, r6, lr}
   37d7c:	4604      	mov	r4, r0
   37d7e:	4615      	mov	r5, r2
	while (len-- > 0) {
   37d80:	1846      	adds	r6, r0, r1
   37d82:	42b4      	cmp	r4, r6
   37d84:	d101      	bne.n	37d8a <base64_append_bytes+0x10>
}
   37d86:	2000      	movs	r0, #0
   37d88:	bd70      	pop	{r4, r5, r6, pc}
	st->wip[st->pending++] = byte;
   37d8a:	692b      	ldr	r3, [r5, #16]
		base64_addbyte(st, *bytes++);
   37d8c:	f814 1b01 	ldrb.w	r1, [r4], #1
	st->wip[st->pending++] = byte;
   37d90:	1c5a      	adds	r2, r3, #1
	if (st->pending == 3) {
   37d92:	2a03      	cmp	r2, #3
	st->wip[st->pending++] = byte;
   37d94:	442b      	add	r3, r5
   37d96:	612a      	str	r2, [r5, #16]
   37d98:	7359      	strb	r1, [r3, #13]
	if (st->pending == 3) {
   37d9a:	d1f2      	bne.n	37d82 <base64_append_bytes+0x8>
		base64_flush(st);
   37d9c:	4628      	mov	r0, r5
   37d9e:	f7ff ffb0 	bl	37d02 <base64_flush>
   37da2:	e7ee      	b.n	37d82 <base64_append_bytes+0x8>

00037da4 <nrf_gpio_pin_present_check>:
    switch (port)
   37da4:	0943      	lsrs	r3, r0, #5
   37da6:	bf0c      	ite	eq
   37da8:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   37dac:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   37dae:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   37db2:	fa23 f000 	lsr.w	r0, r3, r0
}
   37db6:	f000 0001 	and.w	r0, r0, #1
   37dba:	4770      	bx	lr

00037dbc <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   37dbc:	6843      	ldr	r3, [r0, #4]
}
   37dbe:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   37dc0:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   37dc2:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   37dc4:	600b      	str	r3, [r1, #0]
}
   37dc6:	4770      	bx	lr

00037dc8 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   37dc8:	6843      	ldr	r3, [r0, #4]
   37dca:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   37dcc:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   37dce:	4042      	eors	r2, r0
   37dd0:	400a      	ands	r2, r1
   37dd2:	4042      	eors	r2, r0
    p_reg->OUT = value;
   37dd4:	605a      	str	r2, [r3, #4]
}
   37dd6:	2000      	movs	r0, #0
   37dd8:	4770      	bx	lr

00037dda <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   37dda:	6843      	ldr	r3, [r0, #4]
}
   37ddc:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   37dde:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   37de0:	6099      	str	r1, [r3, #8]
}
   37de2:	4770      	bx	lr

00037de4 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   37de4:	6843      	ldr	r3, [r0, #4]
}
   37de6:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   37de8:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   37dea:	60d9      	str	r1, [r3, #12]
}
   37dec:	4770      	bx	lr

00037dee <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   37dee:	6843      	ldr	r3, [r0, #4]
}
   37df0:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   37df2:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   37df4:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   37df6:	4059      	eors	r1, r3
    p_reg->OUT = value;
   37df8:	6051      	str	r1, [r2, #4]
}
   37dfa:	4770      	bx	lr

00037dfc <gpio_nrfx_pin_disable_callback>:
	WRITE_BIT(data->int_en, pin, enable);
   37dfc:	2301      	movs	r3, #1
{
   37dfe:	b410      	push	{r4}
	struct gpio_nrfx_data *data = get_port_data(port);
   37e00:	68c4      	ldr	r4, [r0, #12]
	WRITE_BIT(data->int_en, pin, enable);
   37e02:	fa03 f201 	lsl.w	r2, r3, r1
   37e06:	6923      	ldr	r3, [r4, #16]
   37e08:	ea23 0302 	bic.w	r3, r3, r2
   37e0c:	6123      	str	r3, [r4, #16]
}
   37e0e:	f85d 4b04 	ldr.w	r4, [sp], #4
	return gpiote_pin_int_cfg(port, pin);
   37e12:	f7e7 b941 	b.w	1f098 <gpiote_pin_int_cfg>

00037e16 <gpio_nrfx_pin_enable_callback>:
	WRITE_BIT(data->int_en, pin, enable);
   37e16:	2301      	movs	r3, #1
{
   37e18:	b410      	push	{r4}
	struct gpio_nrfx_data *data = get_port_data(port);
   37e1a:	68c4      	ldr	r4, [r0, #12]
	WRITE_BIT(data->int_en, pin, enable);
   37e1c:	fa03 f201 	lsl.w	r2, r3, r1
   37e20:	6923      	ldr	r3, [r4, #16]
   37e22:	4313      	orrs	r3, r2
   37e24:	6123      	str	r3, [r4, #16]
}
   37e26:	f85d 4b04 	ldr.w	r4, [sp], #4
	return gpiote_pin_int_cfg(port, pin);
   37e2a:	f7e7 b935 	b.w	1f098 <gpiote_pin_int_cfg>

00037e2e <_spi_context_cs_control.isra.6>:
static inline void _spi_context_cs_control(struct spi_context *ctx,
   37e2e:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   37e30:	6804      	ldr	r4, [r0, #0]
static inline void _spi_context_cs_control(struct spi_context *ctx,
   37e32:	4605      	mov	r5, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   37e34:	b324      	cbz	r4, 37e80 <_spi_context_cs_control.isra.6+0x52>
   37e36:	68a3      	ldr	r3, [r4, #8]
   37e38:	b313      	cbz	r3, 37e80 <_spi_context_cs_control.isra.6+0x52>
   37e3a:	6818      	ldr	r0, [r3, #0]
   37e3c:	b300      	cbz	r0, 37e80 <_spi_context_cs_control.isra.6+0x52>
		if (on) {
   37e3e:	b161      	cbz	r1, 37e5a <_spi_context_cs_control.isra.6+0x2c>
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
   37e40:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
			gpio_pin_set(ctx->config->cs->gpio_dev,
   37e44:	7919      	ldrb	r1, [r3, #4]
   37e46:	0fd2      	lsrs	r2, r2, #31
   37e48:	f7e7 fbc0 	bl	1f5cc <gpio_pin_set>
			k_busy_wait(ctx->config->cs->delay);
   37e4c:	682b      	ldr	r3, [r5, #0]
   37e4e:	689b      	ldr	r3, [r3, #8]
   37e50:	6898      	ldr	r0, [r3, #8]
}
   37e52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   37e56:	f000 bf6f 	b.w	38d38 <z_impl_k_busy_wait>
			if (!force_off &&
   37e5a:	b912      	cbnz	r2, 37e62 <_spi_context_cs_control.isra.6+0x34>
   37e5c:	88a2      	ldrh	r2, [r4, #4]
   37e5e:	0492      	lsls	r2, r2, #18
   37e60:	d40e      	bmi.n	37e80 <_spi_context_cs_control.isra.6+0x52>
			k_busy_wait(ctx->config->cs->delay);
   37e62:	6898      	ldr	r0, [r3, #8]
   37e64:	f000 ff68 	bl	38d38 <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   37e68:	682a      	ldr	r2, [r5, #0]
   37e6a:	6893      	ldr	r3, [r2, #8]
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
   37e6c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
			gpio_pin_set(ctx->config->cs->gpio_dev,
   37e70:	7919      	ldrb	r1, [r3, #4]
   37e72:	43d2      	mvns	r2, r2
   37e74:	6818      	ldr	r0, [r3, #0]
   37e76:	0fd2      	lsrs	r2, r2, #31
}
   37e78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set(ctx->config->cs->gpio_dev,
   37e7c:	f7e7 bba6 	b.w	1f5cc <gpio_pin_set>
}
   37e80:	bd38      	pop	{r3, r4, r5, pc}

00037e82 <spi_context_unlock_unconditionally>:
{
   37e82:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   37e84:	2201      	movs	r2, #1
   37e86:	2100      	movs	r1, #0
{
   37e88:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   37e8a:	f7ff ffd0 	bl	37e2e <_spi_context_cs_control.isra.6>
	if (!k_sem_count_get(&ctx->lock)) {
   37e8e:	68e3      	ldr	r3, [r4, #12]
   37e90:	b923      	cbnz	r3, 37e9c <spi_context_unlock_unconditionally+0x1a>
	z_impl_k_sem_give(sem);
   37e92:	1d20      	adds	r0, r4, #4
}
   37e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   37e98:	f7f6 b89e 	b.w	2dfd8 <z_impl_k_sem_give>
   37e9c:	bd10      	pop	{r4, pc}

00037e9e <spi_nrfx_release>:
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   37e9e:	68c0      	ldr	r0, [r0, #12]
{
   37ea0:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   37ea2:	6803      	ldr	r3, [r0, #0]
   37ea4:	428b      	cmp	r3, r1
   37ea6:	d106      	bne.n	37eb6 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   37ea8:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
   37eac:	b934      	cbnz	r4, 37ebc <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   37eae:	f7ff ffe8 	bl	37e82 <spi_context_unlock_unconditionally>
	return 0;
   37eb2:	4620      	mov	r0, r4
}
   37eb4:	bd10      	pop	{r4, pc}
		return -EINVAL;
   37eb6:	f06f 0015 	mvn.w	r0, #21
   37eba:	e7fb      	b.n	37eb4 <spi_nrfx_release+0x16>
		return -EBUSY;
   37ebc:	f06f 000f 	mvn.w	r0, #15
   37ec0:	e7f8      	b.n	37eb4 <spi_nrfx_release+0x16>

00037ec2 <nrf_gpio_pin_present_check>:
    switch (port)
   37ec2:	0943      	lsrs	r3, r0, #5
   37ec4:	bf0c      	ite	eq
   37ec6:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   37eca:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   37ecc:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   37ed0:	fa23 f000 	lsr.w	r0, r3, r0
}
   37ed4:	f000 0001 	and.w	r0, r0, #1
   37ed8:	4770      	bx	lr

00037eda <uarte_nrfx_isr_int>:
	if (data->int_driven->disable_tx_irq &&
   37eda:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   37edc:	6843      	ldr	r3, [r0, #4]
	if (data->int_driven->disable_tx_irq &&
   37ede:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   37ee0:	681b      	ldr	r3, [r3, #0]
	if (data->int_driven->disable_tx_irq &&
   37ee2:	7b91      	ldrb	r1, [r2, #14]
   37ee4:	b159      	cbz	r1, 37efe <uarte_nrfx_isr_int+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   37ee6:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   37eea:	b141      	cbz	r1, 37efe <uarte_nrfx_isr_int+0x24>
    p_reg->INTENCLR = mask;
   37eec:	f44f 7180 	mov.w	r1, #256	; 0x100
   37ef0:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   37ef4:	2101      	movs	r1, #1
   37ef6:	60d9      	str	r1, [r3, #12]
		data->int_driven->disable_tx_irq = false;
   37ef8:	2300      	movs	r3, #0
   37efa:	7393      	strb	r3, [r2, #14]
		return;
   37efc:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   37efe:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   37f02:	b111      	cbz	r1, 37f0a <uarte_nrfx_isr_int+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   37f04:	2100      	movs	r1, #0
   37f06:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   37f0a:	6813      	ldr	r3, [r2, #0]
   37f0c:	b10b      	cbz	r3, 37f12 <uarte_nrfx_isr_int+0x38>
		data->int_driven->cb(data->int_driven->cb_data);
   37f0e:	6850      	ldr	r0, [r2, #4]
   37f10:	4718      	bx	r3
}
   37f12:	4770      	bx	lr

00037f14 <uarte_nrfx_config_get>:
{
   37f14:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   37f16:	68c2      	ldr	r2, [r0, #12]
   37f18:	e892 0003 	ldmia.w	r2, {r0, r1}
   37f1c:	e883 0003 	stmia.w	r3, {r0, r1}
}
   37f20:	2000      	movs	r0, #0
   37f22:	4770      	bx	lr

00037f24 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   37f24:	6843      	ldr	r3, [r0, #4]
   37f26:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   37f28:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   37f2c:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   37f30:	4770      	bx	lr

00037f32 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   37f32:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   37f34:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   37f36:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   37f38:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   37f3c:	b138      	cbz	r0, 37f4e <uarte_nrfx_poll_in+0x1c>
	*c = data->rx_data;
   37f3e:	7c12      	ldrb	r2, [r2, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   37f40:	2000      	movs	r0, #0
   37f42:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   37f44:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   37f46:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   37f4a:	601a      	str	r2, [r3, #0]
	return 0;
   37f4c:	4770      	bx	lr
		return -1;
   37f4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   37f52:	4770      	bx	lr

00037f54 <uarte_nrfx_fifo_fill>:
	return config->uarte_regs;
   37f54:	6843      	ldr	r3, [r0, #4]
{
   37f56:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   37f58:	681c      	ldr	r4, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   37f5a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   37f5e:	b1bb      	cbz	r3, 37f90 <uarte_nrfx_fifo_fill+0x3c>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   37f60:	68c5      	ldr	r5, [r0, #12]
	if (len > data->int_driven->tx_buff_size) {
   37f62:	68ab      	ldr	r3, [r5, #8]
   37f64:	8998      	ldrh	r0, [r3, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   37f66:	2300      	movs	r3, #0
   37f68:	4290      	cmp	r0, r2
   37f6a:	bfa8      	it	ge
   37f6c:	4610      	movge	r0, r2
   37f6e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
	for (int i = 0; i < len; i++) {
   37f72:	68aa      	ldr	r2, [r5, #8]
   37f74:	4283      	cmp	r3, r0
   37f76:	6892      	ldr	r2, [r2, #8]
   37f78:	db06      	blt.n	37f88 <uarte_nrfx_fifo_fill+0x34>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   37f7a:	2301      	movs	r3, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   37f7c:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   37f80:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   37f84:	60a3      	str	r3, [r4, #8]
}
   37f86:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   37f88:	5cce      	ldrb	r6, [r1, r3]
   37f8a:	54d6      	strb	r6, [r2, r3]
	for (int i = 0; i < len; i++) {
   37f8c:	3301      	adds	r3, #1
   37f8e:	e7f0      	b.n	37f72 <uarte_nrfx_fifo_fill+0x1e>
		return 0;
   37f90:	4618      	mov	r0, r3
   37f92:	e7f8      	b.n	37f86 <uarte_nrfx_fifo_fill+0x32>

00037f94 <uarte_nrfx_fifo_read>:
	return config->uarte_regs;
   37f94:	6843      	ldr	r3, [r0, #4]
   37f96:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   37f98:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   37f9c:	b143      	cbz	r3, 37fb0 <uarte_nrfx_fifo_read+0x1c>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   37f9e:	68c3      	ldr	r3, [r0, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   37fa0:	2000      	movs	r0, #0
   37fa2:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   37fa6:	2001      	movs	r0, #1
		rx_data[num_rx++] = (u8_t)data->rx_data;
   37fa8:	7c1b      	ldrb	r3, [r3, #16]
   37faa:	700b      	strb	r3, [r1, #0]
   37fac:	6010      	str	r0, [r2, #0]
   37fae:	4770      	bx	lr
	int num_rx = 0;
   37fb0:	4618      	mov	r0, r3
}
   37fb2:	4770      	bx	lr

00037fb4 <uarte_nrfx_irq_tx_enable>:
	data->int_driven->disable_tx_irq = false;
   37fb4:	2100      	movs	r1, #0
   37fb6:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   37fb8:	6843      	ldr	r3, [r0, #4]
	data->int_driven->disable_tx_irq = false;
   37fba:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   37fbc:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
   37fbe:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
   37fc0:	f44f 7280 	mov.w	r2, #256	; 0x100
   37fc4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   37fc8:	4770      	bx	lr

00037fca <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   37fca:	2201      	movs	r2, #1
   37fcc:	68c3      	ldr	r3, [r0, #12]
   37fce:	689b      	ldr	r3, [r3, #8]
   37fd0:	739a      	strb	r2, [r3, #14]
}
   37fd2:	4770      	bx	lr

00037fd4 <uarte_nrfx_irq_tx_ready_complete>:
	return !data->int_driven->disable_tx_irq &&
   37fd4:	68c3      	ldr	r3, [r0, #12]
   37fd6:	689b      	ldr	r3, [r3, #8]
   37fd8:	7b9b      	ldrb	r3, [r3, #14]
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   37fda:	b94b      	cbnz	r3, 37ff0 <uarte_nrfx_irq_tx_ready_complete+0x1c>
	return config->uarte_regs;
   37fdc:	6843      	ldr	r3, [r0, #4]
   37fde:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   37fe0:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	return !data->int_driven->disable_tx_irq &&
   37fe4:	b128      	cbz	r0, 37ff2 <uarte_nrfx_irq_tx_ready_complete+0x1e>
    return p_reg->INTENSET & mask;
   37fe6:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   37fea:	f3c0 2000 	ubfx	r0, r0, #8, #1
   37fee:	4770      	bx	lr
   37ff0:	2000      	movs	r0, #0
}
   37ff2:	4770      	bx	lr

00037ff4 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   37ff4:	6843      	ldr	r3, [r0, #4]
   37ff6:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   37ff8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   37ffc:	3000      	adds	r0, #0
   37ffe:	bf18      	it	ne
   38000:	2001      	movne	r0, #1
   38002:	4770      	bx	lr

00038004 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   38004:	2210      	movs	r2, #16
	return config->uarte_regs;
   38006:	6843      	ldr	r3, [r0, #4]
   38008:	681b      	ldr	r3, [r3, #0]
   3800a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   3800e:	4770      	bx	lr

00038010 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   38010:	2210      	movs	r2, #16
	return config->uarte_regs;
   38012:	6843      	ldr	r3, [r0, #4]
   38014:	681b      	ldr	r3, [r3, #0]
   38016:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   3801a:	4770      	bx	lr

0003801c <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   3801c:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   38020:	6843      	ldr	r3, [r0, #4]
   38022:	681b      	ldr	r3, [r3, #0]
   38024:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   38028:	4770      	bx	lr

0003802a <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   3802a:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   3802e:	6843      	ldr	r3, [r0, #4]
   38030:	681b      	ldr	r3, [r3, #0]
   38032:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   38036:	4770      	bx	lr

00038038 <uarte_nrfx_irq_update>:
}
   38038:	2001      	movs	r0, #1
   3803a:	4770      	bx	lr

0003803c <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   3803c:	68c3      	ldr	r3, [r0, #12]
   3803e:	689b      	ldr	r3, [r3, #8]
	data->int_driven->cb_data = cb_data;
   38040:	e9c3 1200 	strd	r1, r2, [r3]
}
   38044:	4770      	bx	lr

00038046 <uarte_nrfx_irq_is_pending>:
{
   38046:	b508      	push	{r3, lr}
	return config->uarte_regs;
   38048:	6843      	ldr	r3, [r0, #4]
{
   3804a:	4602      	mov	r2, r0
	return config->uarte_regs;
   3804c:	6819      	ldr	r1, [r3, #0]
    return p_reg->INTENSET & mask;
   3804e:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   38052:	05db      	lsls	r3, r3, #23
   38054:	d405      	bmi.n	38062 <uarte_nrfx_irq_is_pending+0x1c>
   38056:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   3805a:	f010 0010 	ands.w	r0, r0, #16
   3805e:	d106      	bne.n	3806e <uarte_nrfx_irq_is_pending+0x28>
}
   38060:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   38062:	f7ff ffb7 	bl	37fd4 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
   38066:	2800      	cmp	r0, #0
   38068:	d0f5      	beq.n	38056 <uarte_nrfx_irq_is_pending+0x10>
		||
   3806a:	2001      	movs	r0, #1
   3806c:	e7f8      	b.n	38060 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   3806e:	4610      	mov	r0, r2
   38070:	f7ff ffc0 	bl	37ff4 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   38074:	3000      	adds	r0, #0
   38076:	bf18      	it	ne
   38078:	2001      	movne	r0, #1
   3807a:	e7f1      	b.n	38060 <uarte_nrfx_irq_is_pending+0x1a>

0003807c <uarte_nrfx_poll_out>:
{
   3807c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   38080:	6843      	ldr	r3, [r0, #4]
{
   38082:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   38086:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   38088:	68c6      	ldr	r6, [r0, #12]
	if (!k_is_in_isr()) {
   3808a:	f000 fe4f 	bl	38d2c <k_is_in_isr>
   3808e:	b9b8      	cbnz	r0, 380c0 <uarte_nrfx_poll_out+0x44>
   38090:	2564      	movs	r5, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   38092:	f04f 0801 	mov.w	r8, #1
   38096:	f106 070c 	add.w	r7, r6, #12
   3809a:	e8d7 3fef 	ldaex	r3, [r7]
   3809e:	2b00      	cmp	r3, #0
   380a0:	d103      	bne.n	380aa <uarte_nrfx_poll_out+0x2e>
   380a2:	e8c7 8fe2 	stlex	r2, r8, [r7]
   380a6:	2a00      	cmp	r2, #0
   380a8:	d1f7      	bne.n	3809a <uarte_nrfx_poll_out+0x1e>
		while (atomic_cas((atomic_t *) lock,
   380aa:	d00b      	beq.n	380c4 <uarte_nrfx_poll_out+0x48>
	return z_impl_k_sleep(timeout);
   380ac:	2001      	movs	r0, #1
   380ae:	3d01      	subs	r5, #1
   380b0:	f7f5 ff50 	bl	2df54 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
   380b4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   380b8:	d1ef      	bne.n	3809a <uarte_nrfx_poll_out+0x1e>
}
   380ba:	b002      	add	sp, #8
   380bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*lock = 1;
   380c0:	2301      	movs	r3, #1
   380c2:	60f3      	str	r3, [r6, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   380c4:	2300      	movs	r3, #0
   380c6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   380ca:	f10d 0307 	add.w	r3, sp, #7
   380ce:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   380d2:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   380d4:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    p_reg->TXD.MAXCNT = length;
   380d8:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   380dc:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   380de:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX),
   380e2:	b923      	cbnz	r3, 380ee <uarte_nrfx_poll_out+0x72>
   380e4:	2001      	movs	r0, #1
   380e6:	f000 fcbe 	bl	38a66 <nrfx_busy_wait>
   380ea:	3d01      	subs	r5, #1
   380ec:	d1f7      	bne.n	380de <uarte_nrfx_poll_out+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   380ee:	2301      	movs	r3, #1
   380f0:	60e3      	str	r3, [r4, #12]
	*lock = 0;
   380f2:	2300      	movs	r3, #0
   380f4:	60f3      	str	r3, [r6, #12]
   380f6:	e7e0      	b.n	380ba <uarte_nrfx_poll_out+0x3e>

000380f8 <entropy_cc310_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   380f8:	2000      	movs	r0, #0
   380fa:	4770      	bx	lr

000380fc <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   380fc:	4668      	mov	r0, sp
   380fe:	f020 0107 	bic.w	r1, r0, #7
   38102:	468d      	mov	sp, r1
   38104:	b501      	push	{r0, lr}
	bsd_os_trace_irq_handler();
   38106:	f7ea fdab 	bl	22c60 <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   3810a:	f7e2 fda9 	bl	1ac60 <_arch_isr_direct_pm>
   3810e:	f7e3 f9f5 	bl	1b4fc <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   38112:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   38116:	4685      	mov	sp, r0
   38118:	4770      	bx	lr

0003811a <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   3811a:	4668      	mov	r0, sp
   3811c:	f020 0107 	bic.w	r1, r0, #7
   38120:	468d      	mov	sp, r1
   38122:	b501      	push	{r0, lr}
	IPC_IRQHandler();
   38124:	f7eb f8c6 	bl	232b4 <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   38128:	f7e2 fd9a 	bl	1ac60 <_arch_isr_direct_pm>
   3812c:	f7e3 f9e6 	bl	1b4fc <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   38130:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   38134:	4685      	mov	sp, r0
   38136:	4770      	bx	lr

00038138 <trace_task_create>:
{
   38138:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   3813a:	201d      	movs	r0, #29
   3813c:	2200      	movs	r2, #0
   3813e:	2106      	movs	r1, #6
   38140:	f7e2 fd5c 	bl	1abfc <z_arm_irq_priority_set>
}
   38144:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   38148:	201d      	movs	r0, #29
   3814a:	f7e2 bd47 	b.w	1abdc <arch_irq_enable>

0003814e <read_task_create>:
{
   3814e:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   38150:	201c      	movs	r0, #28
   38152:	2200      	movs	r2, #0
   38154:	2106      	movs	r1, #6
   38156:	f7e2 fd51 	bl	1abfc <z_arm_irq_priority_set>
}
   3815a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   3815e:	201c      	movs	r0, #28
   38160:	f7e2 bd3c 	b.w	1abdc <arch_irq_enable>

00038164 <bsd_os_trace_put>:
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   38164:	2000      	movs	r0, #0
   38166:	4770      	bx	lr

00038168 <z_to_nrf_flags>:
		nrf_flags |= NRF_MSG_DONTWAIT;
   38168:	f010 0340 	ands.w	r3, r0, #64	; 0x40
   3816c:	bf18      	it	ne
   3816e:	2302      	movne	r3, #2
	if (z_flags & MSG_PEEK) {
   38170:	0781      	lsls	r1, r0, #30
		nrf_flags |= NRF_MSG_PEEK;
   38172:	bf48      	it	mi
   38174:	f043 0308 	orrmi.w	r3, r3, #8
	if (z_flags & MSG_TRUNC) {
   38178:	06c2      	lsls	r2, r0, #27
		nrf_flags |= NRF_MSG_TRUNC;
   3817a:	bf48      	it	mi
   3817c:	f043 0320 	orrmi.w	r3, r3, #32
}
   38180:	4618      	mov	r0, r3
   38182:	4770      	bx	lr

00038184 <z_to_nrf_family>:
	switch (z_family) {
   38184:	2803      	cmp	r0, #3
   38186:	d00f      	beq.n	381a8 <z_to_nrf_family+0x24>
   38188:	d808      	bhi.n	3819c <z_to_nrf_family+0x18>
   3818a:	2801      	cmp	r0, #1
   3818c:	d00e      	beq.n	381ac <z_to_nrf_family+0x28>
   3818e:	2802      	cmp	r0, #2
		return -EAFNOSUPPORT;
   38190:	bf08      	it	eq
   38192:	200a      	moveq	r0, #10
   38194:	bf18      	it	ne
   38196:	f06f 0069 	mvnne.w	r0, #105	; 0x69
   3819a:	4770      	bx	lr
	switch (z_family) {
   3819c:	2806      	cmp	r0, #6
   3819e:	d007      	beq.n	381b0 <z_to_nrf_family+0x2c>
   381a0:	2866      	cmp	r0, #102	; 0x66
		return -EAFNOSUPPORT;
   381a2:	bf08      	it	eq
   381a4:	2066      	moveq	r0, #102	; 0x66
   381a6:	e7f5      	b.n	38194 <z_to_nrf_family+0x10>
		return NRF_AF_PACKET;
   381a8:	2005      	movs	r0, #5
   381aa:	4770      	bx	lr
		return NRF_AF_INET;
   381ac:	2002      	movs	r0, #2
   381ae:	4770      	bx	lr
		return NRF_AF_LOCAL;
   381b0:	2001      	movs	r0, #1
}
   381b2:	4770      	bx	lr

000381b4 <z_to_nrf_protocol>:
	switch (proto) {
   381b4:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   381b8:	d01d      	beq.n	381f6 <z_to_nrf_protocol+0x42>
   381ba:	dc08      	bgt.n	381ce <z_to_nrf_protocol+0x1a>
   381bc:	2806      	cmp	r0, #6
   381be:	d01d      	beq.n	381fc <z_to_nrf_protocol+0x48>
   381c0:	2811      	cmp	r0, #17
   381c2:	d01d      	beq.n	38200 <z_to_nrf_protocol+0x4c>
   381c4:	2800      	cmp	r0, #0
		return -EPROTONOSUPPORT;
   381c6:	bf18      	it	ne
   381c8:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   381cc:	4770      	bx	lr
	switch (proto) {
   381ce:	f240 2301 	movw	r3, #513	; 0x201
   381d2:	4298      	cmp	r0, r3
   381d4:	d015      	beq.n	38202 <z_to_nrf_protocol+0x4e>
   381d6:	dc06      	bgt.n	381e6 <z_to_nrf_protocol+0x32>
   381d8:	f240 1311 	movw	r3, #273	; 0x111
   381dc:	4298      	cmp	r0, r3
		return -EPROTONOSUPPORT;
   381de:	bf08      	it	eq
   381e0:	f44f 7087 	moveq.w	r0, #270	; 0x10e
   381e4:	e7ef      	b.n	381c6 <z_to_nrf_protocol+0x12>
	switch (proto) {
   381e6:	f240 2302 	movw	r3, #514	; 0x202
   381ea:	4298      	cmp	r0, r3
   381ec:	d009      	beq.n	38202 <z_to_nrf_protocol+0x4e>
   381ee:	f240 2303 	movw	r3, #515	; 0x203
   381f2:	4298      	cmp	r0, r3
   381f4:	e7e7      	b.n	381c6 <z_to_nrf_protocol+0x12>
		return NRF_SPROTO_TLS1v2;
   381f6:	f44f 7082 	mov.w	r0, #260	; 0x104
   381fa:	4770      	bx	lr
		return NRF_IPPROTO_TCP;
   381fc:	2001      	movs	r0, #1
   381fe:	4770      	bx	lr
		return NRF_IPPROTO_UDP;
   38200:	2002      	movs	r0, #2
}
   38202:	4770      	bx	lr

00038204 <nrf91_socket_is_supported>:
}
   38204:	2001      	movs	r0, #1
   38206:	4770      	bx	lr

00038208 <nrf91_bsdlib_socket_offload_init>:
}
   38208:	2000      	movs	r0, #0
   3820a:	4770      	bx	lr

0003820c <nrf91_socket_offload_getsockopt>:
{
   3820c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   38210:	461d      	mov	r5, r3
	struct nrf_timeval nrf_timeo = {0, 0};
   38212:	2300      	movs	r3, #0
{
   38214:	b086      	sub	sp, #24
   38216:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_timeo = {0, 0};
   3821a:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   3821e:	f8d8 3000 	ldr.w	r3, [r8]
	switch (z_in_level) {
   38222:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   38226:	460c      	mov	r4, r1
   38228:	4616      	mov	r6, r2
	int sd = OBJ_TO_SD(obj);
   3822a:	f100 37ff 	add.w	r7, r0, #4294967295	; 0xffffffff
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   3822e:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   38230:	d002      	beq.n	38238 <nrf91_socket_offload_getsockopt+0x2c>
   38232:	dc2d      	bgt.n	38290 <nrf91_socket_offload_getsockopt+0x84>
   38234:	2901      	cmp	r1, #1
   38236:	d140      	bne.n	382ba <nrf91_socket_offload_getsockopt+0xae>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   38238:	aa02      	add	r2, sp, #8
   3823a:	4631      	mov	r1, r6
   3823c:	4620      	mov	r0, r4
   3823e:	f7e8 f833 	bl	202a8 <z_to_nrf_optname>
   38242:	2800      	cmp	r0, #0
   38244:	db39      	blt.n	382ba <nrf91_socket_offload_getsockopt+0xae>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   38246:	2c01      	cmp	r4, #1
   38248:	d12a      	bne.n	382a0 <nrf91_socket_offload_getsockopt+0x94>
   3824a:	f1a6 0314 	sub.w	r3, r6, #20
   3824e:	2b01      	cmp	r3, #1
   38250:	d826      	bhi.n	382a0 <nrf91_socket_offload_getsockopt+0x94>
		nrf_optlen = sizeof(struct nrf_timeval);
   38252:	2308      	movs	r3, #8
   38254:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_timeo;
   38256:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   38258:	aa03      	add	r2, sp, #12
   3825a:	9200      	str	r2, [sp, #0]
   3825c:	4638      	mov	r0, r7
   3825e:	9a02      	ldr	r2, [sp, #8]
   38260:	4621      	mov	r1, r4
   38262:	f7f0 fedf 	bl	29024 <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   38266:	4607      	mov	r7, r0
   38268:	b970      	cbnz	r0, 38288 <nrf91_socket_offload_getsockopt+0x7c>
   3826a:	b16d      	cbz	r5, 38288 <nrf91_socket_offload_getsockopt+0x7c>
		*optlen = nrf_optlen;
   3826c:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   3826e:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   38270:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   38274:	d108      	bne.n	38288 <nrf91_socket_offload_getsockopt+0x7c>
			if (optname == SO_ERROR) {
   38276:	2e04      	cmp	r6, #4
   38278:	d114      	bne.n	382a4 <nrf91_socket_offload_getsockopt+0x98>
				bsd_os_errno_set(*(int *)optval);
   3827a:	6828      	ldr	r0, [r5, #0]
   3827c:	f7e7 fee6 	bl	2004c <bsd_os_errno_set>
				*(int *)optval = errno;
   38280:	f7fd f927 	bl	354d2 <__errno>
   38284:	6803      	ldr	r3, [r0, #0]
   38286:	602b      	str	r3, [r5, #0]
}
   38288:	4638      	mov	r0, r7
   3828a:	b006      	add	sp, #24
   3828c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   38290:	f240 2302 	movw	r3, #514	; 0x202
   38294:	4299      	cmp	r1, r3
   38296:	d0cf      	beq.n	38238 <nrf91_socket_offload_getsockopt+0x2c>
   38298:	f240 2303 	movw	r3, #515	; 0x203
   3829c:	4299      	cmp	r1, r3
   3829e:	e7ca      	b.n	38236 <nrf91_socket_offload_getsockopt+0x2a>
   382a0:	462b      	mov	r3, r5
   382a2:	e7d9      	b.n	38258 <nrf91_socket_offload_getsockopt+0x4c>
			} else if ((optname == SO_RCVTIMEO) ||
   382a4:	3e14      	subs	r6, #20
   382a6:	2e01      	cmp	r6, #1
   382a8:	d8ee      	bhi.n	38288 <nrf91_socket_offload_getsockopt+0x7c>
				((struct timeval *)optval)->tv_sec =
   382aa:	9b04      	ldr	r3, [sp, #16]
   382ac:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   382ae:	9b05      	ldr	r3, [sp, #20]
   382b0:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   382b2:	2308      	movs	r3, #8
   382b4:	f8c8 3000 	str.w	r3, [r8]
   382b8:	e7e6      	b.n	38288 <nrf91_socket_offload_getsockopt+0x7c>
	errno = ENOPROTOOPT;
   382ba:	f7fd f90a 	bl	354d2 <__errno>
   382be:	236d      	movs	r3, #109	; 0x6d
	return retval;
   382c0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	errno = ENOPROTOOPT;
   382c4:	6003      	str	r3, [r0, #0]
	return retval;
   382c6:	e7df      	b.n	38288 <nrf91_socket_offload_getsockopt+0x7c>

000382c8 <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   382c8:	3801      	subs	r0, #1
   382ca:	f7f0 be57 	b.w	28f7c <nrf_listen>

000382ce <nrf91_socket_offload_freeaddrinfo>:
{
   382ce:	b538      	push	{r3, r4, r5, lr}
   382d0:	4604      	mov	r4, r0
	while (next != NULL) {
   382d2:	b904      	cbnz	r4, 382d6 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   382d4:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   382d6:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   382d8:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   382da:	f000 fc8e 	bl	38bfa <k_free>
		k_free(this);
   382de:	4620      	mov	r0, r4
   382e0:	f000 fc8b 	bl	38bfa <k_free>
		next = next->ai_next;
   382e4:	462c      	mov	r4, r5
   382e6:	e7f4      	b.n	382d2 <nrf91_socket_offload_freeaddrinfo+0x4>

000382e8 <z_to_nrf_addrinfo_hints>:
{
   382e8:	b538      	push	{r3, r4, r5, lr}
   382ea:	460c      	mov	r4, r1
   382ec:	4605      	mov	r5, r0
   382ee:	221c      	movs	r2, #28
   382f0:	2100      	movs	r1, #0
   382f2:	1d20      	adds	r0, r4, #4
   382f4:	f000 fe9f 	bl	39036 <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   382f8:	2300      	movs	r3, #0
   382fa:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   382fc:	68eb      	ldr	r3, [r5, #12]
	switch (socktype) {
   382fe:	2b03      	cmp	r3, #3
   38300:	d003      	beq.n	3830a <z_to_nrf_addrinfo_hints+0x22>
		return NRF_SOCK_MGMT;
   38302:	2b04      	cmp	r3, #4
   38304:	bf08      	it	eq
   38306:	f44f 7300 	moveq.w	r3, #512	; 0x200
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   3830a:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   3830c:	8928      	ldrh	r0, [r5, #8]
   3830e:	f7ff ff39 	bl	38184 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   38312:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   38316:	d00b      	beq.n	38330 <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   38318:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   3831a:	6928      	ldr	r0, [r5, #16]
   3831c:	f7ff ff4a 	bl	381b4 <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   38320:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   38324:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   38326:	d003      	beq.n	38330 <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   38328:	69e8      	ldr	r0, [r5, #28]
   3832a:	b108      	cbz	r0, 38330 <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   3832c:	61a0      	str	r0, [r4, #24]
	return 0;
   3832e:	2000      	movs	r0, #0
}
   38330:	bd38      	pop	{r3, r4, r5, pc}

00038332 <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   38332:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   38334:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   38336:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   38338:	4603      	mov	r3, r0
{
   3833a:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   3833c:	f823 2b04 	strh.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   38340:	f101 0210 	add.w	r2, r1, #16
   38344:	f102 0410 	add.w	r4, r2, #16
   38348:	f852 5b04 	ldr.w	r5, [r2], #4
   3834c:	42a2      	cmp	r2, r4
   3834e:	f843 5b04 	str.w	r5, [r3], #4
   38352:	d1f9      	bne.n	38348 <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   38354:	6a0b      	ldr	r3, [r1, #32]
   38356:	7503      	strb	r3, [r0, #20]
}
   38358:	bd30      	pop	{r4, r5, pc}

0003835a <nrf91_socket_offload_recvfrom>:
{
   3835a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int sd = OBJ_TO_SD(obj);
   3835e:	1e45      	subs	r5, r0, #1
{
   38360:	b08d      	sub	sp, #52	; 0x34
   38362:	4618      	mov	r0, r3
   38364:	e9dd 4614 	ldrd	r4, r6, [sp, #80]	; 0x50
   38368:	4688      	mov	r8, r1
   3836a:	4691      	mov	r9, r2
   3836c:	f7ff fefc 	bl	38168 <z_to_nrf_flags>
   38370:	4603      	mov	r3, r0
	if (from == NULL) {
   38372:	b95c      	cbnz	r4, 3838c <nrf91_socket_offload_recvfrom+0x32>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   38374:	4628      	mov	r0, r5
   38376:	e9cd 4400 	strd	r4, r4, [sp]
   3837a:	464a      	mov	r2, r9
   3837c:	4641      	mov	r1, r8
   3837e:	f7f0 fdcf 	bl	28f20 <nrf_recvfrom>
   38382:	4605      	mov	r5, r0
}
   38384:	4628      	mov	r0, r5
   38386:	b00d      	add	sp, #52	; 0x34
   38388:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   3838c:	2224      	movs	r2, #36	; 0x24
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   3838e:	af03      	add	r7, sp, #12
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   38390:	9202      	str	r2, [sp, #8]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   38392:	aa02      	add	r2, sp, #8
   38394:	9201      	str	r2, [sp, #4]
   38396:	4628      	mov	r0, r5
   38398:	9700      	str	r7, [sp, #0]
   3839a:	464a      	mov	r2, r9
   3839c:	4641      	mov	r1, r8
   3839e:	f7f0 fdbf 	bl	28f20 <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   383a2:	9b04      	ldr	r3, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   383a4:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   383a6:	2b02      	cmp	r3, #2
   383a8:	d109      	bne.n	383be <nrf91_socket_offload_recvfrom+0x64>
	ptr->sin_port = nrf_in->sin_port;
   383aa:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   383ae:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   383b0:	2301      	movs	r3, #1
   383b2:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   383b4:	9b06      	ldr	r3, [sp, #24]
   383b6:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   383b8:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   383ba:	6033      	str	r3, [r6, #0]
	return retval;
   383bc:	e7e2      	b.n	38384 <nrf91_socket_offload_recvfrom+0x2a>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   383be:	2b0a      	cmp	r3, #10
   383c0:	d1e0      	bne.n	38384 <nrf91_socket_offload_recvfrom+0x2a>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   383c2:	4639      	mov	r1, r7
   383c4:	4620      	mov	r0, r4
   383c6:	f7ff ffb4 	bl	38332 <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   383ca:	2318      	movs	r3, #24
   383cc:	e7f5      	b.n	383ba <nrf91_socket_offload_recvfrom+0x60>

000383ce <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   383ce:	2300      	movs	r3, #0
{
   383d0:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   383d2:	e9cd 3300 	strd	r3, r3, [sp]
   383d6:	f7ff ffc0 	bl	3835a <nrf91_socket_offload_recvfrom>
}
   383da:	b003      	add	sp, #12
   383dc:	f85d fb04 	ldr.w	pc, [sp], #4

000383e0 <nrf91_socket_offload_getaddrinfo>:
{
   383e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   383e4:	4614      	mov	r4, r2
   383e6:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   383e8:	2100      	movs	r1, #0
{
   383ea:	b093      	sub	sp, #76	; 0x4c
   383ec:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   383ee:	2220      	movs	r2, #32
   383f0:	a802      	add	r0, sp, #8
{
   383f2:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   383f4:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   383f6:	f000 fe1e 	bl	39036 <memset>
	if (hints != NULL) {
   383fa:	b194      	cbz	r4, 38422 <nrf91_socket_offload_getaddrinfo+0x42>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   383fc:	a902      	add	r1, sp, #8
   383fe:	4620      	mov	r0, r4
   38400:	f7ff ff72 	bl	382e8 <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   38404:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   38408:	f000 80c1 	beq.w	3858e <nrf91_socket_offload_getaddrinfo+0x1ae>
		} else if (error == -EAFNOSUPPORT) {
   3840c:	306a      	adds	r0, #106	; 0x6a
   3840e:	f000 80c1 	beq.w	38594 <nrf91_socket_offload_getaddrinfo+0x1b4>
		if (hints->ai_next != NULL) {
   38412:	6820      	ldr	r0, [r4, #0]
   38414:	b120      	cbz	r0, 38420 <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   38416:	ac0a      	add	r4, sp, #40	; 0x28
   38418:	4621      	mov	r1, r4
   3841a:	f7ff ff65 	bl	382e8 <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   3841e:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   38420:	ac02      	add	r4, sp, #8
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   38422:	4628      	mov	r0, r5
   38424:	ab01      	add	r3, sp, #4
   38426:	4622      	mov	r2, r4
   38428:	4631      	mov	r1, r6
   3842a:	f7f0 fe17 	bl	2905c <nrf_getaddrinfo>
	if (retval != 0) {
   3842e:	4605      	mov	r5, r0
   38430:	b1b0      	cbz	r0, 38460 <nrf91_socket_offload_getaddrinfo+0x80>
	switch (nrf_error) {
   38432:	2823      	cmp	r0, #35	; 0x23
   38434:	f000 80b1 	beq.w	3859a <nrf91_socket_offload_getaddrinfo+0x1ba>
   38438:	dc0a      	bgt.n	38450 <nrf91_socket_offload_getaddrinfo+0x70>
		return DNS_EAI_SYSTEM;
   3843a:	280c      	cmp	r0, #12
   3843c:	bf08      	it	eq
   3843e:	f06f 0509 	mvneq.w	r5, #9
   38442:	bf18      	it	ne
   38444:	f06f 050a 	mvnne.w	r5, #10
}
   38448:	4628      	mov	r0, r5
   3844a:	b013      	add	sp, #76	; 0x4c
   3844c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (nrf_error) {
   38450:	282f      	cmp	r0, #47	; 0x2f
   38452:	f000 80a5 	beq.w	385a0 <nrf91_socket_offload_getaddrinfo+0x1c0>
		return DNS_EAI_SYSTEM;
   38456:	2873      	cmp	r0, #115	; 0x73
   38458:	bf08      	it	eq
   3845a:	f06f 0563 	mvneq.w	r5, #99	; 0x63
   3845e:	e7f0      	b.n	38442 <nrf91_socket_offload_getaddrinfo+0x62>
	struct zsock_addrinfo *latest_z_res = NULL;
   38460:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
   38462:	4681      	mov	r9, r0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   38464:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   38466:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   38468:	b91e      	cbnz	r6, 38472 <nrf91_socket_offload_getaddrinfo+0x92>
	nrf_freeaddrinfo(nrf_res);
   3846a:	9801      	ldr	r0, [sp, #4]
   3846c:	f7f0 fdf8 	bl	29060 <nrf_freeaddrinfo>
	return retval;
   38470:	e7ea      	b.n	38448 <nrf91_socket_offload_getaddrinfo+0x68>
					k_malloc(sizeof(struct zsock_addrinfo));
   38472:	2040      	movs	r0, #64	; 0x40
   38474:	f7f3 ff26 	bl	2c2c4 <k_malloc>
		if (next_z_res == NULL) {
   38478:	4604      	mov	r4, r0
   3847a:	2800      	cmp	r0, #0
   3847c:	d07c      	beq.n	38578 <nrf91_socket_offload_getaddrinfo+0x198>
	family = nrf_to_z_family(nrf_in->ai_family);
   3847e:	6872      	ldr	r2, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   38480:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   38482:	2a05      	cmp	r2, #5
	z_out->ai_next = NULL;
   38484:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   38488:	f8c0 901c 	str.w	r9, [r0, #28]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   3848c:	f8c0 9004 	str.w	r9, [r0, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   38490:	60c3      	str	r3, [r0, #12]
	switch (nrf_family) {
   38492:	d033      	beq.n	384fc <nrf91_socket_offload_getaddrinfo+0x11c>
   38494:	dc09      	bgt.n	384aa <nrf91_socket_offload_getaddrinfo+0xca>
   38496:	2a01      	cmp	r2, #1
   38498:	d032      	beq.n	38500 <nrf91_socket_offload_getaddrinfo+0x120>
   3849a:	2a02      	cmp	r2, #2
   3849c:	d032      	beq.n	38504 <nrf91_socket_offload_getaddrinfo+0x124>
			k_free(next_z_res);
   3849e:	4620      	mov	r0, r4
   384a0:	f000 fbab 	bl	38bfa <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   384a4:	f06f 0508 	mvn.w	r5, #8
   384a8:	e068      	b.n	3857c <nrf91_socket_offload_getaddrinfo+0x19c>
	switch (nrf_family) {
   384aa:	2a0a      	cmp	r2, #10
   384ac:	d02c      	beq.n	38508 <nrf91_socket_offload_getaddrinfo+0x128>
   384ae:	2a66      	cmp	r2, #102	; 0x66
   384b0:	d1f5      	bne.n	3849e <nrf91_socket_offload_getaddrinfo+0xbe>
		return AF_LTE;
   384b2:	4613      	mov	r3, r2
	z_out->ai_family = family;
   384b4:	60a3      	str	r3, [r4, #8]
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   384b6:	68f3      	ldr	r3, [r6, #12]
	switch (proto) {
   384b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   384bc:	d045      	beq.n	3854a <nrf91_socket_offload_getaddrinfo+0x16a>
   384be:	dc25      	bgt.n	3850c <nrf91_socket_offload_getaddrinfo+0x12c>
   384c0:	2b01      	cmp	r3, #1
   384c2:	d047      	beq.n	38554 <nrf91_socket_offload_getaddrinfo+0x174>
   384c4:	2b02      	cmp	r3, #2
   384c6:	d043      	beq.n	38550 <nrf91_socket_offload_getaddrinfo+0x170>
   384c8:	bb43      	cbnz	r3, 3851c <nrf91_socket_offload_getaddrinfo+0x13c>
	if (nrf_in->ai_family == NRF_AF_INET) {
   384ca:	2a02      	cmp	r2, #2
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   384cc:	6123      	str	r3, [r4, #16]
	if (nrf_in->ai_family == NRF_AF_INET) {
   384ce:	d143      	bne.n	38558 <nrf91_socket_offload_getaddrinfo+0x178>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   384d0:	2008      	movs	r0, #8
   384d2:	f7f3 fef7 	bl	2c2c4 <k_malloc>
   384d6:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   384d8:	2800      	cmp	r0, #0
   384da:	d04a      	beq.n	38572 <nrf91_socket_offload_getaddrinfo+0x192>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   384dc:	2308      	movs	r3, #8
   384de:	6163      	str	r3, [r4, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   384e0:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   384e2:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   384e4:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   384e6:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   384e8:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   384ea:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   384ec:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   384ee:	f1b8 0f00 	cmp.w	r8, #0
   384f2:	d149      	bne.n	38588 <nrf91_socket_offload_getaddrinfo+0x1a8>
			*res = next_z_res;
   384f4:	603c      	str	r4, [r7, #0]
		next_nrf_res = next_nrf_res->ai_next;
   384f6:	69f6      	ldr	r6, [r6, #28]
   384f8:	46a0      	mov	r8, r4
   384fa:	e7b5      	b.n	38468 <nrf91_socket_offload_getaddrinfo+0x88>
		return AF_PACKET;
   384fc:	2303      	movs	r3, #3
   384fe:	e7d9      	b.n	384b4 <nrf91_socket_offload_getaddrinfo+0xd4>
		return AF_LOCAL;
   38500:	2306      	movs	r3, #6
   38502:	e7d7      	b.n	384b4 <nrf91_socket_offload_getaddrinfo+0xd4>
		return AF_INET;
   38504:	2301      	movs	r3, #1
   38506:	e7d5      	b.n	384b4 <nrf91_socket_offload_getaddrinfo+0xd4>
		return AF_INET6;
   38508:	2302      	movs	r3, #2
   3850a:	e7d3      	b.n	384b4 <nrf91_socket_offload_getaddrinfo+0xd4>
	switch (proto) {
   3850c:	f240 2101 	movw	r1, #513	; 0x201
   38510:	428b      	cmp	r3, r1
   38512:	d0da      	beq.n	384ca <nrf91_socket_offload_getaddrinfo+0xea>
   38514:	dc0d      	bgt.n	38532 <nrf91_socket_offload_getaddrinfo+0x152>
   38516:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   3851a:	d013      	beq.n	38544 <nrf91_socket_offload_getaddrinfo+0x164>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   3851c:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   38520:	6123      	str	r3, [r4, #16]
		z_out->ai_addr = NULL;
   38522:	2300      	movs	r3, #0
   38524:	61a3      	str	r3, [r4, #24]
			k_free(next_z_res);
   38526:	4620      	mov	r0, r4
   38528:	f000 fb67 	bl	38bfa <k_free>
			retval = DNS_EAI_SOCKTYPE;
   3852c:	f06f 0506 	mvn.w	r5, #6
   38530:	e024      	b.n	3857c <nrf91_socket_offload_getaddrinfo+0x19c>
	switch (proto) {
   38532:	f240 2102 	movw	r1, #514	; 0x202
   38536:	428b      	cmp	r3, r1
   38538:	d0c7      	beq.n	384ca <nrf91_socket_offload_getaddrinfo+0xea>
   3853a:	f240 2103 	movw	r1, #515	; 0x203
   3853e:	428b      	cmp	r3, r1
   38540:	d0c3      	beq.n	384ca <nrf91_socket_offload_getaddrinfo+0xea>
   38542:	e7eb      	b.n	3851c <nrf91_socket_offload_getaddrinfo+0x13c>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   38544:	f240 1311 	movw	r3, #273	; 0x111
   38548:	e7bf      	b.n	384ca <nrf91_socket_offload_getaddrinfo+0xea>
   3854a:	f44f 7381 	mov.w	r3, #258	; 0x102
   3854e:	e7bc      	b.n	384ca <nrf91_socket_offload_getaddrinfo+0xea>
   38550:	2311      	movs	r3, #17
   38552:	e7ba      	b.n	384ca <nrf91_socket_offload_getaddrinfo+0xea>
   38554:	2306      	movs	r3, #6
   38556:	e7b8      	b.n	384ca <nrf91_socket_offload_getaddrinfo+0xea>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   38558:	2a0a      	cmp	r2, #10
   3855a:	d1e4      	bne.n	38526 <nrf91_socket_offload_getaddrinfo+0x146>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   3855c:	2018      	movs	r0, #24
   3855e:	f7f3 feb1 	bl	2c2c4 <k_malloc>
   38562:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   38564:	b128      	cbz	r0, 38572 <nrf91_socket_offload_getaddrinfo+0x192>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   38566:	2318      	movs	r3, #24
		nrf_to_z_ipv6(z_out->ai_addr,
   38568:	6971      	ldr	r1, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   3856a:	6163      	str	r3, [r4, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
   3856c:	f7ff fee1 	bl	38332 <nrf_to_z_ipv6>
		} else if (error == -EAFNOSUPPORT) {
   38570:	e7bd      	b.n	384ee <nrf91_socket_offload_getaddrinfo+0x10e>
			k_free(next_z_res);
   38572:	4620      	mov	r0, r4
   38574:	f000 fb41 	bl	38bfa <k_free>
			retval = DNS_EAI_MEMORY;
   38578:	f06f 0509 	mvn.w	r5, #9
		nrf91_socket_offload_freeaddrinfo(*res);
   3857c:	6838      	ldr	r0, [r7, #0]
   3857e:	f7ff fea6 	bl	382ce <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   38582:	2300      	movs	r3, #0
   38584:	603b      	str	r3, [r7, #0]
   38586:	e770      	b.n	3846a <nrf91_socket_offload_getaddrinfo+0x8a>
			latest_z_res->ai_next = next_z_res;
   38588:	f8c8 4000 	str.w	r4, [r8]
   3858c:	e7b3      	b.n	384f6 <nrf91_socket_offload_getaddrinfo+0x116>
			return DNS_EAI_SOCKTYPE;
   3858e:	f06f 0506 	mvn.w	r5, #6
   38592:	e759      	b.n	38448 <nrf91_socket_offload_getaddrinfo+0x68>
			return DNS_EAI_ADDRFAMILY;
   38594:	f06f 0508 	mvn.w	r5, #8
   38598:	e756      	b.n	38448 <nrf91_socket_offload_getaddrinfo+0x68>
		return DNS_EAI_AGAIN;
   3859a:	f06f 0502 	mvn.w	r5, #2
   3859e:	e753      	b.n	38448 <nrf91_socket_offload_getaddrinfo+0x68>
		return DNS_EAI_NONAME;
   385a0:	f06f 0501 	mvn.w	r5, #1
   385a4:	e750      	b.n	38448 <nrf91_socket_offload_getaddrinfo+0x68>

000385a6 <z_to_nrf_ipv6>:
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   385a6:	2224      	movs	r2, #36	; 0x24
{
   385a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   385aa:	700a      	strb	r2, [r1, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   385ac:	8842      	ldrh	r2, [r0, #2]
{
   385ae:	4604      	mov	r4, r0
	nrf_out->sin6_port = ptr->sin6_port;
   385b0:	810a      	strh	r2, [r1, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   385b2:	220a      	movs	r2, #10
{
   385b4:	460b      	mov	r3, r1
	nrf_out->sin6_family = NRF_AF_INET6;
   385b6:	604a      	str	r2, [r1, #4]
   385b8:	f101 0610 	add.w	r6, r1, #16
   385bc:	1d02      	adds	r2, r0, #4
   385be:	f100 0714 	add.w	r7, r0, #20
   385c2:	4635      	mov	r5, r6
   385c4:	6810      	ldr	r0, [r2, #0]
   385c6:	6851      	ldr	r1, [r2, #4]
   385c8:	3208      	adds	r2, #8
   385ca:	c503      	stmia	r5!, {r0, r1}
   385cc:	42ba      	cmp	r2, r7
   385ce:	462e      	mov	r6, r5
   385d0:	d1f7      	bne.n	385c2 <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   385d2:	7d22      	ldrb	r2, [r4, #20]
   385d4:	621a      	str	r2, [r3, #32]
}
   385d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000385d8 <nrf91_socket_offload_sendto>:
{
   385d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   385dc:	b08d      	sub	sp, #52	; 0x34
   385de:	9c14      	ldr	r4, [sp, #80]	; 0x50
   385e0:	460e      	mov	r6, r1
   385e2:	4617      	mov	r7, r2
   385e4:	4698      	mov	r8, r3
	int sd = OBJ_TO_SD(obj);
   385e6:	1e45      	subs	r5, r0, #1
	if (to == NULL) {
   385e8:	b96c      	cbnz	r4, 38606 <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   385ea:	4618      	mov	r0, r3
   385ec:	f7ff fdbc 	bl	38168 <z_to_nrf_flags>
   385f0:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   385f4:	4603      	mov	r3, r0
   385f6:	463a      	mov	r2, r7
   385f8:	4631      	mov	r1, r6
   385fa:	4628      	mov	r0, r5
   385fc:	f7f0 fc74 	bl	28ee8 <nrf_sendto>
}
   38600:	b00d      	add	sp, #52	; 0x34
   38602:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (to->sa_family == AF_INET) {
   38606:	8823      	ldrh	r3, [r4, #0]
   38608:	2b01      	cmp	r3, #1
   3860a:	d112      	bne.n	38632 <nrf91_socket_offload_sendto+0x5a>
	nrf_out->sin_port = ptr->sin_port;
   3860c:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3860e:	f04f 0910 	mov.w	r9, #16
	nrf_out->sin_port = ptr->sin_port;
   38612:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   38616:	2302      	movs	r3, #2
   38618:	9304      	str	r3, [sp, #16]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3861a:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   3861c:	4640      	mov	r0, r8
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3861e:	9306      	str	r3, [sp, #24]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   38620:	f88d 900c 	strb.w	r9, [sp, #12]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   38624:	f7ff fda0 	bl	38168 <z_to_nrf_flags>
   38628:	ab03      	add	r3, sp, #12
   3862a:	f8cd 9004 	str.w	r9, [sp, #4]
   3862e:	9300      	str	r3, [sp, #0]
   38630:	e7e0      	b.n	385f4 <nrf91_socket_offload_sendto+0x1c>
	} else if (to->sa_family == AF_INET6) {
   38632:	2b02      	cmp	r3, #2
   38634:	d10c      	bne.n	38650 <nrf91_socket_offload_sendto+0x78>
		z_to_nrf_ipv6(to, &ipv6);
   38636:	f10d 090c 	add.w	r9, sp, #12
   3863a:	4649      	mov	r1, r9
   3863c:	4620      	mov	r0, r4
   3863e:	f7ff ffb2 	bl	385a6 <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   38642:	4640      	mov	r0, r8
   38644:	f7ff fd90 	bl	38168 <z_to_nrf_flags>
   38648:	2324      	movs	r3, #36	; 0x24
   3864a:	e9cd 9300 	strd	r9, r3, [sp]
   3864e:	e7d1      	b.n	385f4 <nrf91_socket_offload_sendto+0x1c>
	errno = ENOTSUP;
   38650:	f7fc ff3f 	bl	354d2 <__errno>
   38654:	2386      	movs	r3, #134	; 0x86
   38656:	6003      	str	r3, [r0, #0]
	return retval;
   38658:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3865c:	e7d0      	b.n	38600 <nrf91_socket_offload_sendto+0x28>

0003865e <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   3865e:	2300      	movs	r3, #0
{
   38660:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   38662:	e9cd 3300 	strd	r3, r3, [sp]
   38666:	f7ff ffb7 	bl	385d8 <nrf91_socket_offload_sendto>
}
   3866a:	b003      	add	sp, #12
   3866c:	f85d fb04 	ldr.w	pc, [sp], #4

00038670 <nrf91_socket_offload_connect>:
{
   38670:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   38672:	1e44      	subs	r4, r0, #1
	if (addr->sa_family == AF_INET) {
   38674:	8808      	ldrh	r0, [r1, #0]
{
   38676:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   38678:	2801      	cmp	r0, #1
{
   3867a:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   3867c:	d10f      	bne.n	3869e <nrf91_socket_offload_connect+0x2e>
	nrf_out->sin_port = ptr->sin_port;
   3867e:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   38680:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   38682:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   38686:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   38688:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3868a:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_family = NRF_AF_INET;
   3868e:	9102      	str	r1, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   38690:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   38692:	a901      	add	r1, sp, #4
   38694:	4620      	mov	r0, r4
   38696:	f7f0 fc5f 	bl	28f58 <nrf_connect>
}
   3869a:	b00a      	add	sp, #40	; 0x28
   3869c:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   3869e:	2802      	cmp	r0, #2
   386a0:	d105      	bne.n	386ae <nrf91_socket_offload_connect+0x3e>
		z_to_nrf_ipv6(addr, &ipv6);
   386a2:	a901      	add	r1, sp, #4
   386a4:	4618      	mov	r0, r3
   386a6:	f7ff ff7e 	bl	385a6 <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   386aa:	2224      	movs	r2, #36	; 0x24
   386ac:	e7f1      	b.n	38692 <nrf91_socket_offload_connect+0x22>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   386ae:	4620      	mov	r0, r4
   386b0:	f7f0 fc52 	bl	28f58 <nrf_connect>
		if (retval < 0) {
   386b4:	2800      	cmp	r0, #0
   386b6:	daf0      	bge.n	3869a <nrf91_socket_offload_connect+0x2a>
	errno = ENOTSUP;
   386b8:	f7fc ff0b 	bl	354d2 <__errno>
   386bc:	2386      	movs	r3, #134	; 0x86
   386be:	6003      	str	r3, [r0, #0]
   386c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   386c4:	e7e9      	b.n	3869a <nrf91_socket_offload_connect+0x2a>

000386c6 <nrf91_socket_offload_setsockopt>:
{
   386c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (z_in_level) {
   386ca:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   386ce:	b086      	sub	sp, #24
   386d0:	460c      	mov	r4, r1
   386d2:	4615      	mov	r5, r2
   386d4:	461e      	mov	r6, r3
   386d6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	int sd = OBJ_TO_SD(obj);
   386d8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
	switch (z_in_level) {
   386dc:	d002      	beq.n	386e4 <nrf91_socket_offload_setsockopt+0x1e>
   386de:	dc1d      	bgt.n	3871c <nrf91_socket_offload_setsockopt+0x56>
   386e0:	2901      	cmp	r1, #1
   386e2:	d12a      	bne.n	3873a <nrf91_socket_offload_setsockopt+0x74>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   386e4:	aa03      	add	r2, sp, #12
   386e6:	4629      	mov	r1, r5
   386e8:	4620      	mov	r0, r4
   386ea:	f7e7 fddd 	bl	202a8 <z_to_nrf_optname>
   386ee:	2800      	cmp	r0, #0
   386f0:	db23      	blt.n	3873a <nrf91_socket_offload_setsockopt+0x74>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   386f2:	2c01      	cmp	r4, #1
   386f4:	d11a      	bne.n	3872c <nrf91_socket_offload_setsockopt+0x66>
   386f6:	3d14      	subs	r5, #20
   386f8:	2d01      	cmp	r5, #1
   386fa:	d805      	bhi.n	38708 <nrf91_socket_offload_setsockopt+0x42>
		nrf_optlen = sizeof(struct nrf_timeval);
   386fc:	2708      	movs	r7, #8
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   386fe:	6833      	ldr	r3, [r6, #0]
   38700:	9304      	str	r3, [sp, #16]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   38702:	6873      	ldr	r3, [r6, #4]
		nrf_optval = &nrf_timeo;
   38704:	ae04      	add	r6, sp, #16
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   38706:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   38708:	9700      	str	r7, [sp, #0]
   3870a:	4633      	mov	r3, r6
   3870c:	9a03      	ldr	r2, [sp, #12]
   3870e:	4621      	mov	r1, r4
   38710:	4640      	mov	r0, r8
   38712:	f7f0 fc6b 	bl	28fec <nrf_setsockopt>
}
   38716:	b006      	add	sp, #24
   38718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   3871c:	f240 2302 	movw	r3, #514	; 0x202
   38720:	4299      	cmp	r1, r3
   38722:	d0df      	beq.n	386e4 <nrf91_socket_offload_setsockopt+0x1e>
   38724:	f240 2303 	movw	r3, #515	; 0x203
   38728:	4299      	cmp	r1, r3
   3872a:	e7da      	b.n	386e2 <nrf91_socket_offload_setsockopt+0x1c>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   3872c:	f5b4 7f8d 	cmp.w	r4, #282	; 0x11a
   38730:	d1ea      	bne.n	38708 <nrf91_socket_offload_setsockopt+0x42>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   38732:	2d07      	cmp	r5, #7
   38734:	bf08      	it	eq
   38736:	2701      	moveq	r7, #1
   38738:	e7e6      	b.n	38708 <nrf91_socket_offload_setsockopt+0x42>
	errno = ENOPROTOOPT;
   3873a:	f7fc feca 	bl	354d2 <__errno>
   3873e:	236d      	movs	r3, #109	; 0x6d
   38740:	6003      	str	r3, [r0, #0]
   38742:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   38746:	e7e6      	b.n	38716 <nrf91_socket_offload_setsockopt+0x50>

00038748 <nrf91_socket_offload_bind>:
{
   38748:	b510      	push	{r4, lr}
	if (addr->sa_family == AF_INET) {
   3874a:	880a      	ldrh	r2, [r1, #0]
{
   3874c:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   3874e:	2a01      	cmp	r2, #1
{
   38750:	460b      	mov	r3, r1
	int sd = OBJ_TO_SD(obj);
   38752:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
	if (addr->sa_family == AF_INET) {
   38756:	d10f      	bne.n	38778 <nrf91_socket_offload_bind+0x30>
	nrf_out->sin_port = ptr->sin_port;
   38758:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3875a:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   3875c:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   38760:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   38762:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   38764:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_family = NRF_AF_INET;
   38768:	9102      	str	r1, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3876a:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   3876c:	a901      	add	r1, sp, #4
   3876e:	4620      	mov	r0, r4
   38770:	f7f0 fc2a 	bl	28fc8 <nrf_bind>
}
   38774:	b00a      	add	sp, #40	; 0x28
   38776:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   38778:	2a02      	cmp	r2, #2
   3877a:	d105      	bne.n	38788 <nrf91_socket_offload_bind+0x40>
		z_to_nrf_ipv6(addr, &ipv6);
   3877c:	a901      	add	r1, sp, #4
   3877e:	4618      	mov	r0, r3
   38780:	f7ff ff11 	bl	385a6 <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   38784:	2224      	movs	r2, #36	; 0x24
   38786:	e7f1      	b.n	3876c <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   38788:	f7fc fea3 	bl	354d2 <__errno>
   3878c:	2386      	movs	r3, #134	; 0x86
   3878e:	6003      	str	r3, [r0, #0]
   38790:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   38794:	e7ee      	b.n	38774 <nrf91_socket_offload_bind+0x2c>

00038796 <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   38796:	280d      	cmp	r0, #13
   38798:	d004      	beq.n	387a4 <is_lfcr+0xe>
   3879a:	f1a0 030a 	sub.w	r3, r0, #10
   3879e:	4258      	negs	r0, r3
   387a0:	4158      	adcs	r0, r3
   387a2:	4770      	bx	lr
		return true;
   387a4:	2001      	movs	r0, #1
}
   387a6:	4770      	bx	lr

000387a8 <skip_command_prefix>:
{
   387a8:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   387aa:	6802      	ldr	r2, [r0, #0]
{
   387ac:	4601      	mov	r1, r0
	*cmd += sizeof("AT") - 1;
   387ae:	1c93      	adds	r3, r2, #2
   387b0:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   387b2:	7894      	ldrb	r4, [r2, #2]
   387b4:	4620      	mov	r0, r4
   387b6:	f7ff ffee 	bl	38796 <is_lfcr>
   387ba:	b910      	cbnz	r0, 387c2 <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   387bc:	b10c      	cbz	r4, 387c2 <skip_command_prefix+0x1a>
	(*cmd)++;
   387be:	3203      	adds	r2, #3
   387c0:	600a      	str	r2, [r1, #0]
}
   387c2:	bd10      	pop	{r4, pc}

000387c4 <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   387c4:	6813      	ldr	r3, [r2, #0]
   387c6:	f7e8 bbfd 	b.w	20fc4 <at_parser_max_params_from_str>

000387ca <at_params_list_init>:
{
   387ca:	b538      	push	{r3, r4, r5, lr}
   387cc:	460d      	mov	r5, r1
	if (list == NULL) {
   387ce:	4604      	mov	r4, r0
   387d0:	b140      	cbz	r0, 387e4 <at_params_list_init+0x1a>
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   387d2:	210c      	movs	r1, #12
   387d4:	4628      	mov	r0, r5
   387d6:	f000 fa15 	bl	38c04 <k_calloc>
   387da:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   387dc:	b128      	cbz	r0, 387ea <at_params_list_init+0x20>
	return 0;
   387de:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   387e0:	6025      	str	r5, [r4, #0]
}
   387e2:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   387e4:	f06f 0015 	mvn.w	r0, #21
   387e8:	e7fb      	b.n	387e2 <at_params_list_init+0x18>
		return -ENOMEM;
   387ea:	f06f 000b 	mvn.w	r0, #11
   387ee:	e7f8      	b.n	387e2 <at_params_list_init+0x18>

000387f0 <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   387f0:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   387f2:	4604      	mov	r4, r0
   387f4:	b148      	cbz	r0, 3880a <at_params_list_free+0x1a>
   387f6:	6843      	ldr	r3, [r0, #4]
   387f8:	b13b      	cbz	r3, 3880a <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   387fa:	2500      	movs	r5, #0
	at_params_list_clear(list);
   387fc:	f7e8 fcde 	bl	211bc <at_params_list_clear>
	list->param_count = 0;
   38800:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   38802:	6860      	ldr	r0, [r4, #4]
   38804:	f000 f9f9 	bl	38bfa <k_free>
	list->params = NULL;
   38808:	6065      	str	r5, [r4, #4]
}
   3880a:	bd38      	pop	{r3, r4, r5, pc}

0003880c <at_params_short_put>:

int at_params_short_put(const struct at_param_list *list, size_t index,
			u16_t value)
{
   3880c:	b538      	push	{r3, r4, r5, lr}
   3880e:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   38810:	b910      	cbnz	r0, 38818 <at_params_short_put+0xc>
		return -EINVAL;
   38812:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_SHORT;
	param->value.int_val = (u32_t)(value & USHRT_MAX);
	return 0;
}
   38816:	bd38      	pop	{r3, r4, r5, pc}
	if (list == NULL || list->params == NULL) {
   38818:	6843      	ldr	r3, [r0, #4]
   3881a:	2b00      	cmp	r3, #0
   3881c:	d0f9      	beq.n	38812 <at_params_short_put+0x6>
	struct at_param *param = at_params_get(list, index);
   3881e:	f7e8 fc61 	bl	210e4 <at_params_get>
	if (param == NULL) {
   38822:	4604      	mov	r4, r0
   38824:	2800      	cmp	r0, #0
   38826:	d0f4      	beq.n	38812 <at_params_short_put+0x6>
	at_param_clear(param);
   38828:	f7e8 fca6 	bl	21178 <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   3882c:	2301      	movs	r3, #1
	param->value.int_val = (u32_t)(value & USHRT_MAX);
   3882e:	60a5      	str	r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   38830:	7023      	strb	r3, [r4, #0]
	return 0;
   38832:	2000      	movs	r0, #0
   38834:	e7ef      	b.n	38816 <at_params_short_put+0xa>

00038836 <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   38836:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   38838:	b910      	cbnz	r0, 38840 <at_params_empty_put+0xa>
		return -EINVAL;
   3883a:	f06f 0015 	mvn.w	r0, #21

	param->type = AT_PARAM_TYPE_EMPTY;
	param->value.int_val = 0;

	return 0;
}
   3883e:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL) {
   38840:	6843      	ldr	r3, [r0, #4]
   38842:	2b00      	cmp	r3, #0
   38844:	d0f9      	beq.n	3883a <at_params_empty_put+0x4>
	struct at_param *param = at_params_get(list, index);
   38846:	f7e8 fc4d 	bl	210e4 <at_params_get>
	if (param == NULL) {
   3884a:	4604      	mov	r4, r0
   3884c:	2800      	cmp	r0, #0
   3884e:	d0f4      	beq.n	3883a <at_params_empty_put+0x4>
	at_param_clear(param);
   38850:	f7e8 fc92 	bl	21178 <at_param_clear>
	param->type = AT_PARAM_TYPE_EMPTY;
   38854:	2305      	movs	r3, #5
	param->value.int_val = 0;
   38856:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   38858:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   3885a:	60a0      	str	r0, [r4, #8]
	return 0;
   3885c:	e7ef      	b.n	3883e <at_params_empty_put+0x8>

0003885e <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index,
		      u32_t value)
{
   3885e:	b538      	push	{r3, r4, r5, lr}
   38860:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   38862:	b910      	cbnz	r0, 3886a <at_params_int_put+0xc>
		return -EINVAL;
   38864:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_INT;
	param->value.int_val = value;
	return 0;
}
   38868:	bd38      	pop	{r3, r4, r5, pc}
	if (list == NULL || list->params == NULL) {
   3886a:	6843      	ldr	r3, [r0, #4]
   3886c:	2b00      	cmp	r3, #0
   3886e:	d0f9      	beq.n	38864 <at_params_int_put+0x6>
	struct at_param *param = at_params_get(list, index);
   38870:	f7e8 fc38 	bl	210e4 <at_params_get>
	if (param == NULL) {
   38874:	4604      	mov	r4, r0
   38876:	2800      	cmp	r0, #0
   38878:	d0f4      	beq.n	38864 <at_params_int_put+0x6>
	at_param_clear(param);
   3887a:	f7e8 fc7d 	bl	21178 <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_INT;
   3887e:	2302      	movs	r3, #2
	param->value.int_val = value;
   38880:	60a5      	str	r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_INT;
   38882:	7023      	strb	r3, [r4, #0]
	return 0;
   38884:	2000      	movs	r0, #0
   38886:	e7ef      	b.n	38868 <at_params_int_put+0xa>

00038888 <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   38888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3888a:	4616      	mov	r6, r2
   3888c:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   3888e:	b910      	cbnz	r0, 38896 <at_params_string_put+0xe>
		return -EINVAL;
   38890:	f06f 0015 	mvn.w	r0, #21
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
	param->value.str_val = param_value;

	return 0;
}
   38894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || str == NULL) {
   38896:	6843      	ldr	r3, [r0, #4]
   38898:	2b00      	cmp	r3, #0
   3889a:	d0f9      	beq.n	38890 <at_params_string_put+0x8>
   3889c:	2a00      	cmp	r2, #0
   3889e:	d0f7      	beq.n	38890 <at_params_string_put+0x8>
	struct at_param *param = at_params_get(list, index);
   388a0:	f7e8 fc20 	bl	210e4 <at_params_get>
	if (param == NULL) {
   388a4:	4604      	mov	r4, r0
   388a6:	2800      	cmp	r0, #0
   388a8:	d0f2      	beq.n	38890 <at_params_string_put+0x8>
	char *param_value = (char *)k_malloc(str_len + 1);
   388aa:	1c68      	adds	r0, r5, #1
   388ac:	f7f3 fd0a 	bl	2c2c4 <k_malloc>
	if (param_value == NULL) {
   388b0:	4607      	mov	r7, r0
   388b2:	b160      	cbz	r0, 388ce <at_params_string_put+0x46>
   388b4:	462a      	mov	r2, r5
   388b6:	4631      	mov	r1, r6
   388b8:	f000 fb83 	bl	38fc2 <memcpy>
	at_param_clear(param);
   388bc:	4620      	mov	r0, r4
   388be:	f7e8 fc5b 	bl	21178 <at_param_clear>
	param->type = AT_PARAM_TYPE_STRING;
   388c2:	2303      	movs	r3, #3
	param->size = str_len;
   388c4:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   388c6:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   388c8:	60a7      	str	r7, [r4, #8]
	return 0;
   388ca:	2000      	movs	r0, #0
   388cc:	e7e2      	b.n	38894 <at_params_string_put+0xc>
		return -ENOMEM;
   388ce:	f06f 000b 	mvn.w	r0, #11
   388d2:	e7df      	b.n	38894 <at_params_string_put+0xc>

000388d4 <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const u32_t *array, size_t array_len)
{
   388d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   388d6:	4616      	mov	r6, r2
   388d8:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   388da:	b910      	cbnz	r0, 388e2 <at_params_array_put+0xe>
		return -EINVAL;
   388dc:	f06f 0015 	mvn.w	r0, #21
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
	param->value.array_val = param_value;

	return 0;
}
   388e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || array == NULL) {
   388e2:	6843      	ldr	r3, [r0, #4]
   388e4:	2b00      	cmp	r3, #0
   388e6:	d0f9      	beq.n	388dc <at_params_array_put+0x8>
   388e8:	2a00      	cmp	r2, #0
   388ea:	d0f7      	beq.n	388dc <at_params_array_put+0x8>
	struct at_param *param = at_params_get(list, index);
   388ec:	f7e8 fbfa 	bl	210e4 <at_params_get>
	if (param == NULL) {
   388f0:	4604      	mov	r4, r0
   388f2:	2800      	cmp	r0, #0
   388f4:	d0f2      	beq.n	388dc <at_params_array_put+0x8>
	u32_t *param_value = (u32_t *)k_malloc(array_len);
   388f6:	4628      	mov	r0, r5
   388f8:	f7f3 fce4 	bl	2c2c4 <k_malloc>
	if (param_value == NULL) {
   388fc:	4607      	mov	r7, r0
   388fe:	b160      	cbz	r0, 3891a <at_params_array_put+0x46>
   38900:	462a      	mov	r2, r5
   38902:	4631      	mov	r1, r6
   38904:	f000 fb5d 	bl	38fc2 <memcpy>
	at_param_clear(param);
   38908:	4620      	mov	r0, r4
   3890a:	f7e8 fc35 	bl	21178 <at_param_clear>
	param->type = AT_PARAM_TYPE_ARRAY;
   3890e:	2304      	movs	r3, #4
	param->size = array_len;
   38910:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   38912:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   38914:	60a7      	str	r7, [r4, #8]
	return 0;
   38916:	2000      	movs	r0, #0
   38918:	e7e2      	b.n	388e0 <at_params_array_put+0xc>
		return -ENOMEM;
   3891a:	f06f 000b 	mvn.w	r0, #11
   3891e:	e7df      	b.n	388e0 <at_params_array_put+0xc>

00038920 <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			u16_t *value)
{
   38920:	b510      	push	{r4, lr}
   38922:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   38924:	b910      	cbnz	r0, 3892c <at_params_short_get+0xc>
		return -EINVAL;
   38926:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = (u16_t)param->value.int_val;
	return 0;
}
   3892a:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   3892c:	6843      	ldr	r3, [r0, #4]
   3892e:	2b00      	cmp	r3, #0
   38930:	d0f9      	beq.n	38926 <at_params_short_get+0x6>
   38932:	2a00      	cmp	r2, #0
   38934:	d0f7      	beq.n	38926 <at_params_short_get+0x6>
	struct at_param *param = at_params_get(list, index);
   38936:	f7e8 fbd5 	bl	210e4 <at_params_get>
	if (param == NULL) {
   3893a:	2800      	cmp	r0, #0
   3893c:	d0f3      	beq.n	38926 <at_params_short_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_SHORT) {
   3893e:	7803      	ldrb	r3, [r0, #0]
   38940:	2b01      	cmp	r3, #1
   38942:	d1f0      	bne.n	38926 <at_params_short_get+0x6>
	*value = (u16_t)param->value.int_val;
   38944:	6883      	ldr	r3, [r0, #8]
	return 0;
   38946:	2000      	movs	r0, #0
	*value = (u16_t)param->value.int_val;
   38948:	8023      	strh	r3, [r4, #0]
	return 0;
   3894a:	e7ee      	b.n	3892a <at_params_short_get+0xa>

0003894c <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      u32_t *value)
{
   3894c:	b510      	push	{r4, lr}
   3894e:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   38950:	b910      	cbnz	r0, 38958 <at_params_int_get+0xc>
		return -EINVAL;
   38952:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = param->value.int_val;
	return 0;
}
   38956:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   38958:	6843      	ldr	r3, [r0, #4]
   3895a:	2b00      	cmp	r3, #0
   3895c:	d0f9      	beq.n	38952 <at_params_int_get+0x6>
   3895e:	2a00      	cmp	r2, #0
   38960:	d0f7      	beq.n	38952 <at_params_int_get+0x6>
	struct at_param *param = at_params_get(list, index);
   38962:	f7e8 fbbf 	bl	210e4 <at_params_get>
	if (param == NULL) {
   38966:	2800      	cmp	r0, #0
   38968:	d0f3      	beq.n	38952 <at_params_int_get+0x6>
	if ((param->type != AT_PARAM_TYPE_NUM_INT) &&
   3896a:	7803      	ldrb	r3, [r0, #0]
   3896c:	3b01      	subs	r3, #1
   3896e:	2b01      	cmp	r3, #1
   38970:	d8ef      	bhi.n	38952 <at_params_int_get+0x6>
	*value = param->value.int_val;
   38972:	6883      	ldr	r3, [r0, #8]
	return 0;
   38974:	2000      	movs	r0, #0
	*value = param->value.int_val;
   38976:	6023      	str	r3, [r4, #0]
	return 0;
   38978:	e7ed      	b.n	38956 <at_params_int_get+0xa>

0003897a <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   3897a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3897c:	4616      	mov	r6, r2
   3897e:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   38980:	b910      	cbnz	r0, 38988 <at_params_string_get+0xe>
	    value == NULL || len == NULL) {
		return -EINVAL;
   38982:	f06f 0015 	mvn.w	r0, #21

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
}
   38986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || value == NULL ||
   38988:	6843      	ldr	r3, [r0, #4]
   3898a:	2b00      	cmp	r3, #0
   3898c:	d0f9      	beq.n	38982 <at_params_string_get+0x8>
   3898e:	2a00      	cmp	r2, #0
   38990:	d0f7      	beq.n	38982 <at_params_string_get+0x8>
	    value == NULL || len == NULL) {
   38992:	2c00      	cmp	r4, #0
   38994:	d0f5      	beq.n	38982 <at_params_string_get+0x8>
	struct at_param *param = at_params_get(list, index);
   38996:	f7e8 fba5 	bl	210e4 <at_params_get>
	if (param == NULL) {
   3899a:	4607      	mov	r7, r0
   3899c:	2800      	cmp	r0, #0
   3899e:	d0f0      	beq.n	38982 <at_params_string_get+0x8>
	if (param->type != AT_PARAM_TYPE_STRING) {
   389a0:	7803      	ldrb	r3, [r0, #0]
   389a2:	2b03      	cmp	r3, #3
   389a4:	d1ed      	bne.n	38982 <at_params_string_get+0x8>
	size_t param_len = at_param_size(param);
   389a6:	f7e8 fbbf 	bl	21128 <at_param_size>
	if (*len < param_len) {
   389aa:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   389ac:	4605      	mov	r5, r0
	if (*len < param_len) {
   389ae:	4283      	cmp	r3, r0
   389b0:	d307      	bcc.n	389c2 <at_params_string_get+0x48>
   389b2:	4602      	mov	r2, r0
   389b4:	68b9      	ldr	r1, [r7, #8]
   389b6:	4630      	mov	r0, r6
   389b8:	f000 fb03 	bl	38fc2 <memcpy>
	*len = param_len;
   389bc:	6025      	str	r5, [r4, #0]
	return 0;
   389be:	2000      	movs	r0, #0
   389c0:	e7e1      	b.n	38986 <at_params_string_get+0xc>
		return -ENOMEM;
   389c2:	f06f 000b 	mvn.w	r0, #11
   389c6:	e7de      	b.n	38986 <at_params_string_get+0xc>

000389c8 <at_params_valid_count_get>:

	return 0;
}

u32_t at_params_valid_count_get(const struct at_param_list *list)
{
   389c8:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   389ca:	4605      	mov	r5, r0
   389cc:	b180      	cbz	r0, 389f0 <at_params_valid_count_get+0x28>
   389ce:	6843      	ldr	r3, [r0, #4]
   389d0:	b173      	cbz	r3, 389f0 <at_params_valid_count_get+0x28>
		return -EINVAL;
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);
   389d2:	2100      	movs	r1, #0
   389d4:	f7e8 fb86 	bl	210e4 <at_params_get>
	size_t valid_i = 0;
   389d8:	2400      	movs	r4, #0

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   389da:	b108      	cbz	r0, 389e0 <at_params_valid_count_get+0x18>
   389dc:	7803      	ldrb	r3, [r0, #0]
   389de:	b90b      	cbnz	r3, 389e4 <at_params_valid_count_get+0x1c>
		valid_i += 1;
		param = at_params_get(list, valid_i);
	}

	return valid_i;
}
   389e0:	4620      	mov	r0, r4
   389e2:	bd38      	pop	{r3, r4, r5, pc}
		valid_i += 1;
   389e4:	3401      	adds	r4, #1
		param = at_params_get(list, valid_i);
   389e6:	4621      	mov	r1, r4
   389e8:	4628      	mov	r0, r5
   389ea:	f7e8 fb7b 	bl	210e4 <at_params_get>
   389ee:	e7f4      	b.n	389da <at_params_valid_count_get+0x12>
		return -EINVAL;
   389f0:	f06f 0415 	mvn.w	r4, #21
   389f4:	e7f4      	b.n	389e0 <at_params_valid_count_get+0x18>

000389f6 <response_is_valid>:
{
   389f6:	b570      	push	{r4, r5, r6, lr}
   389f8:	4606      	mov	r6, r0
	if ((response_len < strlen(check)) ||
   389fa:	4610      	mov	r0, r2
{
   389fc:	460d      	mov	r5, r1
   389fe:	4614      	mov	r4, r2
	if ((response_len < strlen(check)) ||
   38a00:	f7d9 fb3e 	bl	12080 <strlen>
   38a04:	42a8      	cmp	r0, r5
   38a06:	d808      	bhi.n	38a1a <response_is_valid+0x24>
	    (memcmp(response, check, response_len) != 0)) {
   38a08:	462a      	mov	r2, r5
   38a0a:	4621      	mov	r1, r4
   38a0c:	4630      	mov	r0, r6
   38a0e:	f000 faca 	bl	38fa6 <memcmp>
	if ((response_len < strlen(check)) ||
   38a12:	fab0 f080 	clz	r0, r0
   38a16:	0940      	lsrs	r0, r0, #5
}
   38a18:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   38a1a:	2000      	movs	r0, #0
   38a1c:	e7fc      	b.n	38a18 <response_is_valid+0x22>

00038a1e <lte_lc_init_and_connect>:
{
   38a1e:	b508      	push	{r3, lr}
	ret = w_lte_lc_init();
   38a20:	f7e8 fd58 	bl	214d4 <w_lte_lc_init>
	if (ret) {
   38a24:	b920      	cbnz	r0, 38a30 <lte_lc_init_and_connect+0x12>
}
   38a26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return w_lte_lc_connect(true);
   38a2a:	2001      	movs	r0, #1
   38a2c:	f7e8 be1c 	b.w	21668 <w_lte_lc_connect>
}
   38a30:	bd08      	pop	{r3, pc}

00038a32 <k_uptime_get>:
{
   38a32:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   38a34:	f000 f9f7 	bl	38e26 <z_impl_k_uptime_ticks>
   38a38:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   38a3c:	fba0 2304 	umull	r2, r3, r0, r4
   38a40:	fb04 3301 	mla	r3, r4, r1, r3
   38a44:	0bd0      	lsrs	r0, r2, #15
}
   38a46:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   38a4a:	0bd9      	lsrs	r1, r3, #15
   38a4c:	bd10      	pop	{r4, pc}

00038a4e <date_time_now>:

int date_time_now(s64_t *unix_time_ms)
{
   38a4e:	b510      	push	{r4, lr}
   38a50:	4604      	mov	r4, r0
	*unix_time_ms = k_uptime_get();
   38a52:	f7ff ffee 	bl	38a32 <k_uptime_get>
   38a56:	e9c4 0100 	strd	r0, r1, [r4]

	return date_time_uptime_to_unix_time_ms(unix_time_ms);
   38a5a:	4620      	mov	r0, r4
}
   38a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return date_time_uptime_to_unix_time_ms(unix_time_ms);
   38a60:	f7e9 bcac 	b.w	223bc <date_time_uptime_to_unix_time_ms>

00038a64 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   38a64:	4700      	bx	r0

00038a66 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   38a66:	f000 b967 	b.w	38d38 <z_impl_k_busy_wait>

00038a6a <nrf_gpio_pin_clear>:
{
   38a6a:	b510      	push	{r4, lr}
   38a6c:	4604      	mov	r4, r0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   38a6e:	f7f1 fffd 	bl	2aa6c <nrf_gpio_pin_port_decode.isra.0>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   38a72:	2301      	movs	r3, #1
   38a74:	40a3      	lsls	r3, r4
    p_reg->OUTCLR = clr_mask;
   38a76:	60c3      	str	r3, [r0, #12]
}
   38a78:	bd10      	pop	{r4, pc}

00038a7a <nrf_gpio_pin_set>:
{
   38a7a:	b510      	push	{r4, lr}
   38a7c:	4604      	mov	r4, r0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   38a7e:	f7f1 fff5 	bl	2aa6c <nrf_gpio_pin_port_decode.isra.0>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   38a82:	2301      	movs	r3, #1
   38a84:	40a3      	lsls	r3, r4
    p_reg->OUTSET = set_mask;
   38a86:	6083      	str	r3, [r0, #8]
}
   38a88:	bd10      	pop	{r4, pc}

00038a8a <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
   38a8a:	7b0b      	ldrb	r3, [r1, #12]
   38a8c:	2b03      	cmp	r3, #3
   38a8e:	d82a      	bhi.n	38ae6 <xfer_completeness_check+0x5c>
   38a90:	e8df f003 	tbb	[pc, r3]
   38a94:	021a2622 	.word	0x021a2622
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   38a98:	688b      	ldr	r3, [r1, #8]
   38a9a:	035a      	lsls	r2, r3, #13
   38a9c:	d504      	bpl.n	38aa8 <xfer_completeness_check+0x1e>
    return p_reg->TXD.AMOUNT;
   38a9e:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
   38aa2:	690a      	ldr	r2, [r1, #16]
   38aa4:	429a      	cmp	r2, r3
   38aa6:	d107      	bne.n	38ab8 <xfer_completeness_check+0x2e>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   38aa8:	688b      	ldr	r3, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   38aaa:	035b      	lsls	r3, r3, #13
   38aac:	d41b      	bmi.n	38ae6 <xfer_completeness_check+0x5c>
   38aae:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   38ab2:	694a      	ldr	r2, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   38ab4:	429a      	cmp	r2, r3
   38ab6:	d016      	beq.n	38ae6 <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   38ab8:	2300      	movs	r3, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   38aba:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   38abc:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   38ac0:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
   38ac4:	4618      	mov	r0, r3
   38ac6:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
   38ac8:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   38acc:	690a      	ldr	r2, [r1, #16]
   38ace:	429a      	cmp	r2, r3
   38ad0:	d1f2      	bne.n	38ab8 <xfer_completeness_check+0x2e>
    return p_reg->RXD.AMOUNT;
   38ad2:	f8d0 353c 	ldr.w	r3, [r0, #1340]	; 0x53c
   38ad6:	e7ec      	b.n	38ab2 <xfer_completeness_check+0x28>
    return p_reg->TXD.AMOUNT;
   38ad8:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   38adc:	690a      	ldr	r2, [r1, #16]
   38ade:	e7e9      	b.n	38ab4 <xfer_completeness_check+0x2a>
    return p_reg->RXD.AMOUNT;
   38ae0:	f8d0 353c 	ldr.w	r3, [r0, #1340]	; 0x53c
   38ae4:	e7fa      	b.n	38adc <xfer_completeness_check+0x52>
    bool transfer_complete = true;
   38ae6:	2001      	movs	r0, #1
}
   38ae8:	4770      	bx	lr

00038aea <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   38aea:	f7fb bb54 	b.w	34196 <z_clock_idle_exit>

00038aee <k_heap_init>:
{
   38aee:	b410      	push	{r4}
   38af0:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   38af4:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   38af8:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   38afc:	f7fa bfbc 	b.w	33a78 <sys_heap_init>

00038b00 <k_mem_pool_alloc>:
 * backend.
 */

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, k_timeout_t timeout)
{
   38b00:	b570      	push	{r4, r5, r6, lr}
   38b02:	4614      	mov	r4, r2
	block->id.heap = p->heap;
   38b04:	6800      	ldr	r0, [r0, #0]
{
   38b06:	460e      	mov	r6, r1
	block->id.heap = p->heap;
   38b08:	6048      	str	r0, [r1, #4]
	block->data = k_heap_alloc(p->heap, size, timeout);
   38b0a:	461a      	mov	r2, r3
   38b0c:	4621      	mov	r1, r4
{
   38b0e:	461d      	mov	r5, r3
	block->data = k_heap_alloc(p->heap, size, timeout);
   38b10:	f7f3 f83c 	bl	2bb8c <k_heap_alloc>
   38b14:	6030      	str	r0, [r6, #0]

	/* The legacy API returns -EAGAIN on timeout expiration, but
	 * -ENOMEM if the timeout was K_NO_WAIT. Don't ask.
	 */
	if (size != 0 && block->data == NULL) {
   38b16:	b13c      	cbz	r4, 38b28 <k_mem_pool_alloc+0x28>
   38b18:	b930      	cbnz	r0, 38b28 <k_mem_pool_alloc+0x28>
		return K_TIMEOUT_EQ(timeout, K_NO_WAIT) ? -ENOMEM : -EAGAIN;
   38b1a:	2d00      	cmp	r5, #0
   38b1c:	bf0c      	ite	eq
   38b1e:	f06f 000b 	mvneq.w	r0, #11
   38b22:	f06f 000a 	mvnne.w	r0, #10
	} else {
		return 0;
	}
}
   38b26:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   38b28:	2000      	movs	r0, #0
   38b2a:	e7fc      	b.n	38b26 <k_mem_pool_alloc+0x26>

00038b2c <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
	k_heap_free(id->heap, id->data);
   38b2c:	e9d0 1000 	ldrd	r1, r0, [r0]
   38b30:	f7f3 b8dc 	b.w	2bcec <k_heap_free>

00038b34 <mbox_message_match>:
{
   38b34:	460b      	mov	r3, r1
	if (((tx_msg->tx_target_thread == (k_tid_t)K_ANY) ||
   38b36:	6a01      	ldr	r1, [r0, #32]
{
   38b38:	b530      	push	{r4, r5, lr}
   38b3a:	4602      	mov	r2, r0
	if (((tx_msg->tx_target_thread == (k_tid_t)K_ANY) ||
   38b3c:	b111      	cbz	r1, 38b44 <mbox_message_match+0x10>
   38b3e:	6a18      	ldr	r0, [r3, #32]
   38b40:	4281      	cmp	r1, r0
   38b42:	d125      	bne.n	38b90 <mbox_message_match+0x5c>
	    ((rx_msg->rx_source_thread == (k_tid_t)K_ANY) ||
   38b44:	69d8      	ldr	r0, [r3, #28]
   38b46:	69d1      	ldr	r1, [r2, #28]
	     (tx_msg->tx_target_thread == rx_msg->tx_target_thread)) &&
   38b48:	b108      	cbz	r0, 38b4e <mbox_message_match+0x1a>
	    ((rx_msg->rx_source_thread == (k_tid_t)K_ANY) ||
   38b4a:	4288      	cmp	r0, r1
   38b4c:	d120      	bne.n	38b90 <mbox_message_match+0x5c>
		rx_msg->rx_source_thread = tx_msg->rx_source_thread;
   38b4e:	61d9      	str	r1, [r3, #28]
		tx_msg->tx_target_thread = rx_msg->tx_target_thread;
   38b50:	6a19      	ldr	r1, [r3, #32]
		rx_msg->info = tx_msg->info;
   38b52:	6890      	ldr	r0, [r2, #8]
		tx_msg->tx_target_thread = rx_msg->tx_target_thread;
   38b54:	6211      	str	r1, [r2, #32]
		temp_info = rx_msg->info;
   38b56:	6899      	ldr	r1, [r3, #8]
		rx_msg->info = tx_msg->info;
   38b58:	6098      	str	r0, [r3, #8]
		tx_msg->info = temp_info;
   38b5a:	6091      	str	r1, [r2, #8]
		if (rx_msg->size > tx_msg->size) {
   38b5c:	6858      	ldr	r0, [r3, #4]
   38b5e:	6851      	ldr	r1, [r2, #4]
		rx_msg->tx_data = tx_msg->tx_data;
   38b60:	68d5      	ldr	r5, [r2, #12]
		if (rx_msg->size > tx_msg->size) {
   38b62:	4288      	cmp	r0, r1
			rx_msg->size = tx_msg->size;
   38b64:	bf88      	it	hi
   38b66:	6059      	strhi	r1, [r3, #4]
		rx_msg->tx_block = tx_msg->tx_block;
   38b68:	f103 0414 	add.w	r4, r3, #20
   38b6c:	f102 0114 	add.w	r1, r2, #20
		rx_msg->tx_data = tx_msg->tx_data;
   38b70:	60dd      	str	r5, [r3, #12]
		rx_msg->tx_block = tx_msg->tx_block;
   38b72:	c903      	ldmia	r1, {r0, r1}
   38b74:	e884 0003 	stmia.w	r4, {r0, r1}
		if (rx_msg->tx_data != NULL) {
   38b78:	b12d      	cbz	r5, 38b86 <mbox_message_match+0x52>
			rx_msg->tx_block.data = NULL;
   38b7a:	2100      	movs	r1, #0
   38b7c:	6159      	str	r1, [r3, #20]
		return 0;
   38b7e:	2000      	movs	r0, #0
		rx_msg->_syncing_thread = tx_msg->_syncing_thread;
   38b80:	6a52      	ldr	r2, [r2, #36]	; 0x24
   38b82:	625a      	str	r2, [r3, #36]	; 0x24
}
   38b84:	bd30      	pop	{r4, r5, pc}
		} else if (rx_msg->tx_block.data != NULL) {
   38b86:	6959      	ldr	r1, [r3, #20]
   38b88:	2900      	cmp	r1, #0
   38b8a:	d0f8      	beq.n	38b7e <mbox_message_match+0x4a>
			rx_msg->tx_data = rx_msg->tx_block.data;
   38b8c:	60d9      	str	r1, [r3, #12]
   38b8e:	e7f6      	b.n	38b7e <mbox_message_match+0x4a>
	return -1;
   38b90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   38b94:	e7f6      	b.n	38b84 <mbox_message_match+0x50>

00038b96 <k_mbox_init>:
   38b96:	f100 0308 	add.w	r3, r0, #8
   38b9a:	e9c0 3302 	strd	r3, r3, [r0, #8]
	mbox_ptr->lock = (struct k_spinlock) {};
   38b9e:	2300      	movs	r3, #0
   38ba0:	e9c0 0000 	strd	r0, r0, [r0]
   38ba4:	6103      	str	r3, [r0, #16]
}
   38ba6:	4770      	bx	lr

00038ba8 <k_mbox_data_get>:
{
   38ba8:	b510      	push	{r4, lr}
	if (buffer == NULL) {
   38baa:	460b      	mov	r3, r1
{
   38bac:	4604      	mov	r4, r0
	if (buffer == NULL) {
   38bae:	b921      	cbnz	r1, 38bba <k_mbox_data_get+0x12>
		rx_msg->size = 0;
   38bb0:	6061      	str	r1, [r4, #4]
}
   38bb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	mbox_message_dispose(rx_msg);
   38bb6:	f7f3 b997 	b.w	2bee8 <mbox_message_dispose>
	if ((rx_msg->tx_data != NULL) && (rx_msg->size > 0)) {
   38bba:	68c1      	ldr	r1, [r0, #12]
   38bbc:	b121      	cbz	r1, 38bc8 <k_mbox_data_get+0x20>
   38bbe:	6842      	ldr	r2, [r0, #4]
   38bc0:	b112      	cbz	r2, 38bc8 <k_mbox_data_get+0x20>
   38bc2:	4618      	mov	r0, r3
   38bc4:	f000 f9fd 	bl	38fc2 <memcpy>
	mbox_message_dispose(rx_msg);
   38bc8:	4620      	mov	r0, r4
   38bca:	e7f2      	b.n	38bb2 <k_mbox_data_get+0xa>

00038bcc <k_mem_pool_free>:
	k_mem_pool_free_id(&block->id);
   38bcc:	f7ff bfae 	b.w	38b2c <k_mem_pool_free_id>

00038bd0 <k_mem_pool_malloc>:
{
   38bd0:	b507      	push	{r0, r1, r2, lr}
   38bd2:	2208      	movs	r2, #8
   38bd4:	188a      	adds	r2, r1, r2
   38bd6:	d204      	bcs.n	38be2 <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   38bd8:	2300      	movs	r3, #0
   38bda:	4669      	mov	r1, sp
   38bdc:	f7ff ff90 	bl	38b00 <k_mem_pool_alloc>
   38be0:	b118      	cbz	r0, 38bea <k_mem_pool_malloc+0x1a>
		return NULL;
   38be2:	2000      	movs	r0, #0
}
   38be4:	b003      	add	sp, #12
   38be6:	f85d fb04 	ldr.w	pc, [sp], #4
   38bea:	466b      	mov	r3, sp
   38bec:	9a00      	ldr	r2, [sp, #0]
   38bee:	cb03      	ldmia	r3!, {r0, r1}
   38bf0:	6010      	str	r0, [r2, #0]
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   38bf2:	9800      	ldr	r0, [sp, #0]
   38bf4:	6051      	str	r1, [r2, #4]
   38bf6:	3008      	adds	r0, #8
   38bf8:	e7f4      	b.n	38be4 <k_mem_pool_malloc+0x14>

00038bfa <k_free>:
	if (ptr != NULL) {
   38bfa:	b110      	cbz	r0, 38c02 <k_free+0x8>
		k_mem_pool_free_id(ptr);
   38bfc:	3808      	subs	r0, #8
   38bfe:	f7ff bf95 	b.w	38b2c <k_mem_pool_free_id>
}
   38c02:	4770      	bx	lr

00038c04 <k_calloc>:
{
   38c04:	b538      	push	{r3, r4, r5, lr}
	return a != 0 && (c / a) != b;
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a * b;
   38c06:	fb01 f400 	mul.w	r4, r1, r0

	*result = c;

	return a != 0 && (c / a) != b;
   38c0a:	b118      	cbz	r0, 38c14 <k_calloc+0x10>
   38c0c:	fbb4 f0f0 	udiv	r0, r4, r0
   38c10:	4281      	cmp	r1, r0
   38c12:	d10a      	bne.n	38c2a <k_calloc+0x26>
	ret = k_malloc(bounds);
   38c14:	4620      	mov	r0, r4
   38c16:	f7f3 fb55 	bl	2c2c4 <k_malloc>
	if (ret != NULL) {
   38c1a:	4605      	mov	r5, r0
   38c1c:	b118      	cbz	r0, 38c26 <k_calloc+0x22>
__ssp_bos_icheck3(memset, void *, int)
   38c1e:	4622      	mov	r2, r4
   38c20:	2100      	movs	r1, #0
   38c22:	f000 fa08 	bl	39036 <memset>
}
   38c26:	4628      	mov	r0, r5
   38c28:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   38c2a:	2500      	movs	r5, #0
   38c2c:	e7fb      	b.n	38c26 <k_calloc+0x22>

00038c2e <k_msgq_init>:
	msgq->max_msgs = max_msgs;
   38c2e:	e9c0 2303 	strd	r2, r3, [r0, #12]
	msgq->buffer_end = buffer + (max_msgs * msg_size);
   38c32:	fb03 1202 	mla	r2, r3, r2, r1
	msgq->used_msgs = 0;
   38c36:	2300      	movs	r3, #0
	msgq->buffer_start = buffer;
   38c38:	6141      	str	r1, [r0, #20]
	msgq->read_ptr = buffer;
   38c3a:	e9c0 2106 	strd	r2, r1, [r0, #24]
	msgq->write_ptr = buffer;
   38c3e:	6201      	str	r1, [r0, #32]
	msgq->used_msgs = 0;
   38c40:	6243      	str	r3, [r0, #36]	; 0x24
	msgq->flags = 0;
   38c42:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
   38c46:	e9c0 0000 	strd	r0, r0, [r0]
	msgq->lock = (struct k_spinlock) {};
   38c4a:	6083      	str	r3, [r0, #8]
}
   38c4c:	4770      	bx	lr

00038c4e <z_impl_k_mutex_init>:
{
   38c4e:	4603      	mov	r3, r0
	mutex->owner = NULL;
   38c50:	2000      	movs	r0, #0
   38c52:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   38c56:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   38c5a:	4770      	bx	lr

00038c5c <z_queue_node_peek>:
{
   38c5c:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   38c5e:	4604      	mov	r4, r0
   38c60:	b130      	cbz	r0, 38c70 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   38c62:	6802      	ldr	r2, [r0, #0]
   38c64:	0793      	lsls	r3, r2, #30
   38c66:	d003      	beq.n	38c70 <z_queue_node_peek+0x14>
		ret = anode->data;
   38c68:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   38c6a:	b109      	cbz	r1, 38c70 <z_queue_node_peek+0x14>
			k_free(anode);
   38c6c:	f7ff ffc5 	bl	38bfa <k_free>
}
   38c70:	4620      	mov	r0, r4
   38c72:	bd10      	pop	{r4, pc}

00038c74 <z_impl_k_queue_init>:
	list->head = NULL;
   38c74:	2300      	movs	r3, #0
	list->tail = NULL;
   38c76:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   38c7a:	6083      	str	r3, [r0, #8]
   38c7c:	f100 030c 	add.w	r3, r0, #12
   38c80:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   38c84:	f100 0314 	add.w	r3, r0, #20
   38c88:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   38c8c:	4770      	bx	lr

00038c8e <k_queue_append>:
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   38c8e:	460a      	mov	r2, r1
   38c90:	2300      	movs	r3, #0
   38c92:	6841      	ldr	r1, [r0, #4]
   38c94:	f7f3 be48 	b.w	2c928 <queue_insert>

00038c98 <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false);
   38c98:	2300      	movs	r3, #0
   38c9a:	460a      	mov	r2, r1
   38c9c:	4619      	mov	r1, r3
   38c9e:	f7f3 be43 	b.w	2c928 <queue_insert>

00038ca2 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   38ca2:	f990 000e 	ldrsb.w	r0, [r0, #14]
   38ca6:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   38caa:	4298      	cmp	r0, r3
   38cac:	bfac      	ite	ge
   38cae:	2000      	movge	r0, #0
   38cb0:	2001      	movlt	r0, #1
   38cb2:	4770      	bx	lr

00038cb4 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   38cb4:	4603      	mov	r3, r0
   38cb6:	b920      	cbnz	r0, 38cc2 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   38cb8:	f3ef 8205 	mrs	r2, IPSR
   38cbc:	b90a      	cbnz	r2, 38cc2 <z_reschedule_irqlock+0xe>
   38cbe:	f7e1 bf0b 	b.w	1aad8 <arch_swap>
   38cc2:	f383 8811 	msr	BASEPRI, r3
   38cc6:	f3bf 8f6f 	isb	sy
}
   38cca:	4770      	bx	lr

00038ccc <z_reschedule_unlocked>:
	__asm__ volatile(
   38ccc:	f04f 0320 	mov.w	r3, #32
   38cd0:	f3ef 8011 	mrs	r0, BASEPRI
   38cd4:	f383 8811 	msr	BASEPRI, r3
   38cd8:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   38cdc:	f7ff bfea 	b.w	38cb4 <z_reschedule_irqlock>

00038ce0 <z_priq_dumb_best>:
	return list->head == list;
   38ce0:	6803      	ldr	r3, [r0, #0]
}
   38ce2:	4298      	cmp	r0, r3
   38ce4:	bf14      	ite	ne
   38ce6:	4618      	movne	r0, r3
   38ce8:	2000      	moveq	r0, #0
   38cea:	4770      	bx	lr

00038cec <z_unpend_all>:
{
   38cec:	b538      	push	{r3, r4, r5, lr}
   38cee:	4605      	mov	r5, r0
	int need_sched = 0;
   38cf0:	2000      	movs	r0, #0
   38cf2:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   38cf4:	42a5      	cmp	r5, r4
   38cf6:	d000      	beq.n	38cfa <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   38cf8:	b904      	cbnz	r4, 38cfc <z_unpend_all+0x10>
}
   38cfa:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   38cfc:	4620      	mov	r0, r4
   38cfe:	f7f4 f95b 	bl	2cfb8 <z_unpend_thread>
		z_ready_thread(thread);
   38d02:	4620      	mov	r0, r4
   38d04:	f7f4 fa98 	bl	2d238 <z_ready_thread>
		need_sched = 1;
   38d08:	2001      	movs	r0, #1
   38d0a:	e7f2      	b.n	38cf2 <z_unpend_all+0x6>

00038d0c <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   38d0c:	b15a      	cbz	r2, 38d26 <z_impl_k_sem_init+0x1a>
   38d0e:	428a      	cmp	r2, r1
   38d10:	d309      	bcc.n	38d26 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   38d12:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   38d16:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   38d1a:	e9c0 0000 	strd	r0, r0, [r0]
   38d1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   38d22:	2000      	movs	r0, #0
   38d24:	4770      	bx	lr
		return -EINVAL;
   38d26:	f06f 0015 	mvn.w	r0, #21
}
   38d2a:	4770      	bx	lr

00038d2c <k_is_in_isr>:
   38d2c:	f3ef 8005 	mrs	r0, IPSR
}
   38d30:	3000      	adds	r0, #0
   38d32:	bf18      	it	ne
   38d34:	2001      	movne	r0, #1
   38d36:	4770      	bx	lr

00038d38 <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
   38d38:	f7e0 b800 	b.w	18d3c <arch_busy_wait>

00038d3c <z_impl_k_thread_name_set>:
}
   38d3c:	f06f 0057 	mvn.w	r0, #87	; 0x57
   38d40:	4770      	bx	lr

00038d42 <k_thread_name_get>:
}
   38d42:	2000      	movs	r0, #0
   38d44:	4770      	bx	lr

00038d46 <z_init_thread_base>:
	thread_base->user_options = (u8_t)options;
   38d46:	7303      	strb	r3, [r0, #12]
	thread_base->sched_locked = 0U;
   38d48:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
   38d4a:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
   38d4c:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
   38d4e:	73c3      	strb	r3, [r0, #15]
	node->prev = NULL;
   38d50:	e9c0 3306 	strd	r3, r3, [r0, #24]
}
   38d54:	4770      	bx	lr

00038d56 <k_work_submit_to_queue>:
{
   38d56:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   38d58:	f101 0308 	add.w	r3, r1, #8
   38d5c:	e8d3 2fef 	ldaex	r2, [r3]
   38d60:	f042 0c01 	orr.w	ip, r2, #1
   38d64:	e8c3 cfee 	stlex	lr, ip, [r3]
   38d68:	f1be 0f00 	cmp.w	lr, #0
   38d6c:	d1f6      	bne.n	38d5c <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   38d6e:	07d3      	lsls	r3, r2, #31
   38d70:	d403      	bmi.n	38d7a <k_work_submit_to_queue+0x24>
}
   38d72:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   38d76:	f7ff bf8a 	b.w	38c8e <k_queue_append>
}
   38d7a:	f85d fb04 	ldr.w	pc, [sp], #4

00038d7e <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   38d7e:	f1a0 010c 	sub.w	r1, r0, #12
   38d82:	6900      	ldr	r0, [r0, #16]
   38d84:	f7ff bfe7 	b.w	38d56 <k_work_submit_to_queue>

00038d88 <work_cancel>:
	CHECKIF(work->work_q == NULL) {
   38d88:	69c3      	ldr	r3, [r0, #28]
{
   38d8a:	b570      	push	{r4, r5, r6, lr}
   38d8c:	4604      	mov	r4, r0
	CHECKIF(work->work_q == NULL) {
   38d8e:	b913      	cbnz	r3, 38d96 <work_cancel+0xe>
		return -EALREADY;
   38d90:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   38d94:	bd70      	pop	{r4, r5, r6, pc}
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   38d96:	f100 0508 	add.w	r5, r0, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   38d9a:	e8d5 3faf 	lda	r3, [r5]
	if (k_work_pending(&work->work)) {
   38d9e:	07db      	lsls	r3, r3, #31
   38da0:	d52f      	bpl.n	38e02 <work_cancel+0x7a>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   38da2:	2100      	movs	r1, #0
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   38da4:	69c2      	ldr	r2, [r0, #28]
   38da6:	6813      	ldr	r3, [r2, #0]
   38da8:	b913      	cbnz	r3, 38db0 <work_cancel+0x28>
			return -EINVAL;
   38daa:	f06f 0015 	mvn.w	r0, #21
   38dae:	e7f1      	b.n	38d94 <work_cancel+0xc>
   38db0:	429c      	cmp	r4, r3
   38db2:	d121      	bne.n	38df8 <work_cancel+0x70>
Z_GENLIST_REMOVE(sflist, sfnode)
   38db4:	6823      	ldr	r3, [r4, #0]
   38db6:	6856      	ldr	r6, [r2, #4]
   38db8:	f023 0003 	bic.w	r0, r3, #3
   38dbc:	b991      	cbnz	r1, 38de4 <work_cancel+0x5c>
   38dbe:	42b4      	cmp	r4, r6
	list->head = node;
   38dc0:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   38dc2:	d100      	bne.n	38dc6 <work_cancel+0x3e>
	list->tail = node;
   38dc4:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   38dc6:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   38dc8:	f003 0303 	and.w	r3, r3, #3
   38dcc:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   38dce:	2000      	movs	r0, #0
   38dd0:	61e0      	str	r0, [r4, #28]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   38dd2:	e8d5 3fef 	ldaex	r3, [r5]
   38dd6:	f023 0301 	bic.w	r3, r3, #1
   38dda:	e8c5 3fe2 	stlex	r2, r3, [r5]
   38dde:	2a00      	cmp	r2, #0
   38de0:	d0d8      	beq.n	38d94 <work_cancel+0xc>
   38de2:	e7f6      	b.n	38dd2 <work_cancel+0x4a>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   38de4:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   38de6:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   38de8:	f003 0303 	and.w	r3, r3, #3
   38dec:	ea43 0300 	orr.w	r3, r3, r0
   38df0:	600b      	str	r3, [r1, #0]
	list->tail = node;
   38df2:	bf08      	it	eq
   38df4:	6051      	streq	r1, [r2, #4]
   38df6:	e7e6      	b.n	38dc6 <work_cancel+0x3e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   38df8:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   38dfa:	4619      	mov	r1, r3
   38dfc:	f020 0303 	bic.w	r3, r0, #3
   38e00:	e7d2      	b.n	38da8 <work_cancel+0x20>
		int err = z_abort_timeout(&work->timeout);
   38e02:	300c      	adds	r0, #12
   38e04:	f7f5 fd8e 	bl	2e924 <z_abort_timeout>
		if (err) {
   38e08:	2800      	cmp	r0, #0
   38e0a:	d0e0      	beq.n	38dce <work_cancel+0x46>
   38e0c:	e7c0      	b.n	38d90 <work_cancel+0x8>

00038e0e <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   38e0e:	2300      	movs	r3, #0
   38e10:	e9c0 3100 	strd	r3, r1, [r0]
	node->next = NULL;
   38e14:	e9c0 3302 	strd	r3, r3, [r0, #8]
	node->prev = NULL;
   38e18:	6103      	str	r3, [r0, #16]
	work->work_q = NULL;
   38e1a:	61c3      	str	r3, [r0, #28]
}
   38e1c:	4770      	bx	lr

00038e1e <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   38e1e:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   38e20:	f7f5 ff62 	bl	2ece8 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   38e24:	bd08      	pop	{r3, pc}

00038e26 <z_impl_k_uptime_ticks>:

s64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   38e26:	f7f5 bf5f 	b.w	2ece8 <z_tick_get>

00038e2a <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
u64_t z_timeout_end_calc(k_timeout_t timeout)
{
   38e2a:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   38e2c:	1c43      	adds	r3, r0, #1
   38e2e:	d01e      	beq.n	38e6e <z_timeout_end_calc+0x44>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   38e30:	b918      	cbnz	r0, 38e3a <z_timeout_end_calc+0x10>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
#endif
	return z_tick_get() + MAX(1, dt);
}
   38e32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   38e36:	f7f5 bf57 	b.w	2ece8 <z_tick_get>
			return (u32_t)((t * to_hz + off) / from_hz);
   38e3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   38e3e:	f240 34e7 	movw	r4, #999	; 0x3e7
   38e42:	2500      	movs	r5, #0
   38e44:	fbe1 4500 	umlal	r4, r5, r1, r0
   38e48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   38e4c:	4620      	mov	r0, r4
   38e4e:	2300      	movs	r3, #0
   38e50:	4629      	mov	r1, r5
   38e52:	f7d4 fc8d 	bl	d770 <__aeabi_uldivmod>
   38e56:	4604      	mov	r4, r0
	return z_tick_get() + MAX(1, dt);
   38e58:	f7f5 ff46 	bl	2ece8 <z_tick_get>
   38e5c:	b12c      	cbz	r4, 38e6a <z_timeout_end_calc+0x40>
   38e5e:	4623      	mov	r3, r4
   38e60:	2200      	movs	r2, #0
   38e62:	18c0      	adds	r0, r0, r3
   38e64:	eb42 0101 	adc.w	r1, r2, r1
}
   38e68:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   38e6a:	2301      	movs	r3, #1
   38e6c:	e7f8      	b.n	38e60 <z_timeout_end_calc+0x36>
		return UINT64_MAX;
   38e6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   38e72:	4601      	mov	r1, r0
   38e74:	e7f8      	b.n	38e68 <z_timeout_end_calc+0x3e>

00038e76 <k_timer_init>:
	timer->status = 0U;
   38e76:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   38e78:	e9c0 1206 	strd	r1, r2, [r0, #24]
   38e7c:	f100 0210 	add.w	r2, r0, #16
	timer->status = 0U;
   38e80:	6243      	str	r3, [r0, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
   38e82:	e9c0 2204 	strd	r2, r2, [r0, #16]
	node->prev = NULL;
   38e86:	e9c0 3300 	strd	r3, r3, [r0]
	timer->user_data = NULL;
   38e8a:	6283      	str	r3, [r0, #40]	; 0x28
}
   38e8c:	4770      	bx	lr

00038e8e <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   38e8e:	b510      	push	{r4, lr}
   38e90:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   38e92:	f7f5 fd47 	bl	2e924 <z_abort_timeout>

	if (inactive) {
   38e96:	b9d8      	cbnz	r0, 38ed0 <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
   38e98:	69e3      	ldr	r3, [r4, #28]
   38e9a:	b10b      	cbz	r3, 38ea0 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   38e9c:	4620      	mov	r0, r4
   38e9e:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   38ea0:	f104 0010 	add.w	r0, r4, #16
   38ea4:	2100      	movs	r1, #0
   38ea6:	f7f3 ff09 	bl	2ccbc <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   38eaa:	4604      	mov	r4, r0
   38eac:	b180      	cbz	r0, 38ed0 <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
   38eae:	f7f3 ff4f 	bl	2cd50 <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
   38eb2:	4620      	mov	r0, r4
   38eb4:	f7f4 f9c0 	bl	2d238 <z_ready_thread>
   38eb8:	f04f 0320 	mov.w	r3, #32
   38ebc:	f3ef 8011 	mrs	r0, BASEPRI
   38ec0:	f383 8811 	msr	BASEPRI, r3
   38ec4:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   38ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   38ecc:	f7ff bef2 	b.w	38cb4 <z_reschedule_irqlock>
   38ed0:	bd10      	pop	{r4, pc}

00038ed2 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
   38ed2:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   38ed4:	6884      	ldr	r4, [r0, #8]
{
   38ed6:	4605      	mov	r5, r0
   38ed8:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   38eda:	b19c      	cbz	r4, 38f04 <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   38edc:	68a3      	ldr	r3, [r4, #8]
   38ede:	b95b      	cbnz	r3, 38ef8 <signal_poll_event+0x26>
	int retcode = 0;
   38ee0:	4618      	mov	r0, r3
			retcode = poller->cb(event, state);
		}

		poller->is_polling = false;
   38ee2:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   38ee4:	2300      	movs	r3, #0
   38ee6:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   38ee8:	68eb      	ldr	r3, [r5, #12]
   38eea:	f3c3 3204 	ubfx	r2, r3, #12, #5
   38eee:	4316      	orrs	r6, r2
   38ef0:	f366 3310 	bfi	r3, r6, #12, #5
   38ef4:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   38ef6:	e004      	b.n	38f02 <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   38ef8:	4798      	blx	r3
		poller->is_polling = false;
   38efa:	2300      	movs	r3, #0
		if (retcode < 0) {
   38efc:	2800      	cmp	r0, #0
		poller->is_polling = false;
   38efe:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   38f00:	daf0      	bge.n	38ee4 <signal_poll_event+0x12>
}
   38f02:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   38f04:	4620      	mov	r0, r4
   38f06:	e7ed      	b.n	38ee4 <signal_poll_event+0x12>

00038f08 <add_event>:
{
   38f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   38f0a:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   38f0c:	e9d0 2300 	ldrd	r2, r3, [r0]
   38f10:	4290      	cmp	r0, r2
   38f12:	4604      	mov	r4, r0
   38f14:	460d      	mov	r5, r1
   38f16:	d106      	bne.n	38f26 <add_event+0x1e>
	node->prev = list->tail;
   38f18:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   38f1a:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   38f1c:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   38f1e:	6863      	ldr	r3, [r4, #4]
   38f20:	601d      	str	r5, [r3, #0]
	list->tail = node;
   38f22:	6065      	str	r5, [r4, #4]
}
   38f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   38f26:	2b00      	cmp	r3, #0
   38f28:	d0f6      	beq.n	38f18 <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   38f2a:	689b      	ldr	r3, [r3, #8]
   38f2c:	6879      	ldr	r1, [r7, #4]
   38f2e:	6858      	ldr	r0, [r3, #4]
   38f30:	f7ff feb7 	bl	38ca2 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   38f34:	2800      	cmp	r0, #0
   38f36:	d1ef      	bne.n	38f18 <add_event+0x10>
	return list->head == list;
   38f38:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   38f3a:	42b4      	cmp	r4, r6
   38f3c:	d0ec      	beq.n	38f18 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   38f3e:	2e00      	cmp	r6, #0
   38f40:	d0ea      	beq.n	38f18 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   38f42:	68b3      	ldr	r3, [r6, #8]
   38f44:	6878      	ldr	r0, [r7, #4]
   38f46:	6859      	ldr	r1, [r3, #4]
   38f48:	f7ff feab 	bl	38ca2 <z_is_t1_higher_prio_than_t2>
   38f4c:	b128      	cbz	r0, 38f5a <add_event+0x52>
	node->prev = successor->prev;
   38f4e:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   38f50:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   38f54:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   38f56:	6075      	str	r5, [r6, #4]
			return;
   38f58:	e7e4      	b.n	38f24 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   38f5a:	6863      	ldr	r3, [r4, #4]
   38f5c:	429e      	cmp	r6, r3
   38f5e:	d0db      	beq.n	38f18 <add_event+0x10>
   38f60:	6836      	ldr	r6, [r6, #0]
   38f62:	e7ec      	b.n	38f3e <add_event+0x36>

00038f64 <z_handle_obj_poll_events>:
	return list->head == list;
   38f64:	6803      	ldr	r3, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   38f66:	4298      	cmp	r0, r3
   38f68:	d009      	beq.n	38f7e <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   38f6a:	e9d3 2000 	ldrd	r2, r0, [r3]
   38f6e:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
   38f70:	6050      	str	r0, [r2, #4]
	node->next = NULL;
   38f72:	2200      	movs	r2, #0
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event != NULL) {
		(void) signal_poll_event(poll_event, state);
   38f74:	4618      	mov	r0, r3
	node->prev = NULL;
   38f76:	e9c3 2200 	strd	r2, r2, [r3]
   38f7a:	f7ff bfaa 	b.w	38ed2 <signal_poll_event>
	}
}
   38f7e:	4770      	bx	lr

00038f80 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   38f80:	4770      	bx	lr

00038f82 <atoi>:
   38f82:	220a      	movs	r2, #10
   38f84:	2100      	movs	r1, #0
   38f86:	f7f9 b92d 	b.w	321e4 <strtol>

00038f8a <memchr>:
   38f8a:	b2c9      	uxtb	r1, r1
   38f8c:	4402      	add	r2, r0
   38f8e:	b510      	push	{r4, lr}
   38f90:	4290      	cmp	r0, r2
   38f92:	4603      	mov	r3, r0
   38f94:	d101      	bne.n	38f9a <memchr+0x10>
   38f96:	2300      	movs	r3, #0
   38f98:	e003      	b.n	38fa2 <memchr+0x18>
   38f9a:	781c      	ldrb	r4, [r3, #0]
   38f9c:	3001      	adds	r0, #1
   38f9e:	428c      	cmp	r4, r1
   38fa0:	d1f6      	bne.n	38f90 <memchr+0x6>
   38fa2:	4618      	mov	r0, r3
   38fa4:	bd10      	pop	{r4, pc}

00038fa6 <memcmp>:
   38fa6:	b530      	push	{r4, r5, lr}
   38fa8:	3901      	subs	r1, #1
   38faa:	2400      	movs	r4, #0
   38fac:	42a2      	cmp	r2, r4
   38fae:	d101      	bne.n	38fb4 <memcmp+0xe>
   38fb0:	2000      	movs	r0, #0
   38fb2:	e005      	b.n	38fc0 <memcmp+0x1a>
   38fb4:	5d03      	ldrb	r3, [r0, r4]
   38fb6:	3401      	adds	r4, #1
   38fb8:	5d0d      	ldrb	r5, [r1, r4]
   38fba:	42ab      	cmp	r3, r5
   38fbc:	d0f6      	beq.n	38fac <memcmp+0x6>
   38fbe:	1b58      	subs	r0, r3, r5
   38fc0:	bd30      	pop	{r4, r5, pc}

00038fc2 <memcpy>:
   38fc2:	440a      	add	r2, r1
   38fc4:	1e43      	subs	r3, r0, #1
   38fc6:	4291      	cmp	r1, r2
   38fc8:	d100      	bne.n	38fcc <memcpy+0xa>
   38fca:	4770      	bx	lr
   38fcc:	b510      	push	{r4, lr}
   38fce:	f811 4b01 	ldrb.w	r4, [r1], #1
   38fd2:	4291      	cmp	r1, r2
   38fd4:	f803 4f01 	strb.w	r4, [r3, #1]!
   38fd8:	d1f9      	bne.n	38fce <memcpy+0xc>
   38fda:	bd10      	pop	{r4, pc}

00038fdc <__memcpy_chk>:
   38fdc:	429a      	cmp	r2, r3
   38fde:	b508      	push	{r3, lr}
   38fe0:	d901      	bls.n	38fe6 <__memcpy_chk+0xa>
   38fe2:	f7f9 fa47 	bl	32474 <__chk_fail>
   38fe6:	4281      	cmp	r1, r0
   38fe8:	d804      	bhi.n	38ff4 <__memcpy_chk+0x18>
   38fea:	188b      	adds	r3, r1, r2
   38fec:	4298      	cmp	r0, r3
   38fee:	d3f8      	bcc.n	38fe2 <__memcpy_chk+0x6>
   38ff0:	4281      	cmp	r1, r0
   38ff2:	d102      	bne.n	38ffa <__memcpy_chk+0x1e>
   38ff4:	1883      	adds	r3, r0, r2
   38ff6:	4299      	cmp	r1, r3
   38ff8:	d3f3      	bcc.n	38fe2 <__memcpy_chk+0x6>
   38ffa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   38ffe:	f7ff bfe0 	b.w	38fc2 <memcpy>

00039002 <memmove>:
   39002:	4288      	cmp	r0, r1
   39004:	eb01 0302 	add.w	r3, r1, r2
   39008:	b510      	push	{r4, lr}
   3900a:	d902      	bls.n	39012 <memmove+0x10>
   3900c:	4283      	cmp	r3, r0
   3900e:	461c      	mov	r4, r3
   39010:	d807      	bhi.n	39022 <memmove+0x20>
   39012:	1e42      	subs	r2, r0, #1
   39014:	4299      	cmp	r1, r3
   39016:	d008      	beq.n	3902a <memmove+0x28>
   39018:	f811 4b01 	ldrb.w	r4, [r1], #1
   3901c:	f802 4f01 	strb.w	r4, [r2, #1]!
   39020:	e7f8      	b.n	39014 <memmove+0x12>
   39022:	1883      	adds	r3, r0, r2
   39024:	1a9a      	subs	r2, r3, r2
   39026:	429a      	cmp	r2, r3
   39028:	d100      	bne.n	3902c <memmove+0x2a>
   3902a:	bd10      	pop	{r4, pc}
   3902c:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   39030:	f803 1d01 	strb.w	r1, [r3, #-1]!
   39034:	e7f7      	b.n	39026 <memmove+0x24>

00039036 <memset>:
   39036:	4402      	add	r2, r0
   39038:	4603      	mov	r3, r0
   3903a:	4293      	cmp	r3, r2
   3903c:	d100      	bne.n	39040 <memset+0xa>
   3903e:	4770      	bx	lr
   39040:	f803 1b01 	strb.w	r1, [r3], #1
   39044:	e7f9      	b.n	3903a <memset+0x4>

00039046 <_calloc_r>:
   39046:	b538      	push	{r3, r4, r5, lr}
   39048:	fb02 f401 	mul.w	r4, r2, r1
   3904c:	4621      	mov	r1, r4
   3904e:	f7f8 f93d 	bl	312cc <_malloc_r>
   39052:	4605      	mov	r5, r0
   39054:	b118      	cbz	r0, 3905e <_calloc_r+0x18>
   39056:	4622      	mov	r2, r4
   39058:	2100      	movs	r1, #0
   3905a:	f7ff ffec 	bl	39036 <memset>
   3905e:	4628      	mov	r0, r5
   39060:	bd38      	pop	{r3, r4, r5, pc}

00039062 <__sfputc_r>:
   39062:	6893      	ldr	r3, [r2, #8]
   39064:	3b01      	subs	r3, #1
   39066:	2b00      	cmp	r3, #0
   39068:	6093      	str	r3, [r2, #8]
   3906a:	b410      	push	{r4}
   3906c:	da08      	bge.n	39080 <__sfputc_r+0x1e>
   3906e:	6994      	ldr	r4, [r2, #24]
   39070:	42a3      	cmp	r3, r4
   39072:	db01      	blt.n	39078 <__sfputc_r+0x16>
   39074:	290a      	cmp	r1, #10
   39076:	d103      	bne.n	39080 <__sfputc_r+0x1e>
   39078:	f85d 4b04 	ldr.w	r4, [sp], #4
   3907c:	f7f9 b93a 	b.w	322f4 <__swbuf_r>
   39080:	6813      	ldr	r3, [r2, #0]
   39082:	1c58      	adds	r0, r3, #1
   39084:	6010      	str	r0, [r2, #0]
   39086:	4608      	mov	r0, r1
   39088:	7019      	strb	r1, [r3, #0]
   3908a:	f85d 4b04 	ldr.w	r4, [sp], #4
   3908e:	4770      	bx	lr

00039090 <__sfputs_r>:
   39090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   39092:	4606      	mov	r6, r0
   39094:	460f      	mov	r7, r1
   39096:	4614      	mov	r4, r2
   39098:	18d5      	adds	r5, r2, r3
   3909a:	42ac      	cmp	r4, r5
   3909c:	d101      	bne.n	390a2 <__sfputs_r+0x12>
   3909e:	2000      	movs	r0, #0
   390a0:	e007      	b.n	390b2 <__sfputs_r+0x22>
   390a2:	463a      	mov	r2, r7
   390a4:	f814 1b01 	ldrb.w	r1, [r4], #1
   390a8:	4630      	mov	r0, r6
   390aa:	f7ff ffda 	bl	39062 <__sfputc_r>
   390ae:	1c43      	adds	r3, r0, #1
   390b0:	d1f3      	bne.n	3909a <__sfputs_r+0xa>
   390b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000390b4 <__cvt>:
   390b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   390b8:	ec55 4b10 	vmov	r4, r5, d0
   390bc:	2d00      	cmp	r5, #0
   390be:	460e      	mov	r6, r1
   390c0:	4691      	mov	r9, r2
   390c2:	4619      	mov	r1, r3
   390c4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   390c8:	f04f 0200 	mov.w	r2, #0
   390cc:	da03      	bge.n	390d6 <__cvt+0x22>
   390ce:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
   390d2:	222d      	movs	r2, #45	; 0x2d
   390d4:	461d      	mov	r5, r3
   390d6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   390d8:	700a      	strb	r2, [r1, #0]
   390da:	f027 0720 	bic.w	r7, r7, #32
   390de:	2f46      	cmp	r7, #70	; 0x46
   390e0:	d004      	beq.n	390ec <__cvt+0x38>
   390e2:	2f45      	cmp	r7, #69	; 0x45
   390e4:	d100      	bne.n	390e8 <__cvt+0x34>
   390e6:	3601      	adds	r6, #1
   390e8:	2102      	movs	r1, #2
   390ea:	e000      	b.n	390ee <__cvt+0x3a>
   390ec:	2103      	movs	r1, #3
   390ee:	ab03      	add	r3, sp, #12
   390f0:	4632      	mov	r2, r6
   390f2:	9301      	str	r3, [sp, #4]
   390f4:	ab02      	add	r3, sp, #8
   390f6:	ec45 4b10 	vmov	d0, r4, r5
   390fa:	9300      	str	r3, [sp, #0]
   390fc:	4653      	mov	r3, sl
   390fe:	f7da ff07 	bl	13f10 <_dtoa_r>
   39102:	2f47      	cmp	r7, #71	; 0x47
   39104:	4680      	mov	r8, r0
   39106:	d102      	bne.n	3910e <__cvt+0x5a>
   39108:	f019 0f01 	tst.w	r9, #1
   3910c:	d022      	beq.n	39154 <__cvt+0xa0>
   3910e:	2f46      	cmp	r7, #70	; 0x46
   39110:	eb08 0906 	add.w	r9, r8, r6
   39114:	d111      	bne.n	3913a <__cvt+0x86>
   39116:	f898 3000 	ldrb.w	r3, [r8]
   3911a:	2b30      	cmp	r3, #48	; 0x30
   3911c:	d10a      	bne.n	39134 <__cvt+0x80>
   3911e:	2200      	movs	r2, #0
   39120:	2300      	movs	r3, #0
   39122:	4620      	mov	r0, r4
   39124:	4629      	mov	r1, r5
   39126:	f7d4 fa29 	bl	d57c <__aeabi_dcmpeq>
   3912a:	b918      	cbnz	r0, 39134 <__cvt+0x80>
   3912c:	f1c6 0601 	rsb	r6, r6, #1
   39130:	f8ca 6000 	str.w	r6, [sl]
   39134:	f8da 3000 	ldr.w	r3, [sl]
   39138:	4499      	add	r9, r3
   3913a:	2200      	movs	r2, #0
   3913c:	2300      	movs	r3, #0
   3913e:	4620      	mov	r0, r4
   39140:	4629      	mov	r1, r5
   39142:	f7d4 fa1b 	bl	d57c <__aeabi_dcmpeq>
   39146:	b108      	cbz	r0, 3914c <__cvt+0x98>
   39148:	f8cd 900c 	str.w	r9, [sp, #12]
   3914c:	2230      	movs	r2, #48	; 0x30
   3914e:	9b03      	ldr	r3, [sp, #12]
   39150:	454b      	cmp	r3, r9
   39152:	d308      	bcc.n	39166 <__cvt+0xb2>
   39154:	9b03      	ldr	r3, [sp, #12]
   39156:	4640      	mov	r0, r8
   39158:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   3915a:	eba3 0308 	sub.w	r3, r3, r8
   3915e:	6013      	str	r3, [r2, #0]
   39160:	b004      	add	sp, #16
   39162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   39166:	1c59      	adds	r1, r3, #1
   39168:	9103      	str	r1, [sp, #12]
   3916a:	701a      	strb	r2, [r3, #0]
   3916c:	e7ef      	b.n	3914e <__cvt+0x9a>

0003916e <__exponent>:
   3916e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   39170:	2900      	cmp	r1, #0
   39172:	7002      	strb	r2, [r0, #0]
   39174:	bfba      	itte	lt
   39176:	4249      	neglt	r1, r1
   39178:	232d      	movlt	r3, #45	; 0x2d
   3917a:	232b      	movge	r3, #43	; 0x2b
   3917c:	2909      	cmp	r1, #9
   3917e:	7043      	strb	r3, [r0, #1]
   39180:	dd22      	ble.n	391c8 <__exponent+0x5a>
   39182:	f10d 0307 	add.w	r3, sp, #7
   39186:	260a      	movs	r6, #10
   39188:	461f      	mov	r7, r3
   3918a:	2963      	cmp	r1, #99	; 0x63
   3918c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
   39190:	fb91 f2f6 	sdiv	r2, r1, r6
   39194:	fb06 1412 	mls	r4, r6, r2, r1
   39198:	f104 0430 	add.w	r4, r4, #48	; 0x30
   3919c:	f803 4c01 	strb.w	r4, [r3, #-1]
   391a0:	dc0a      	bgt.n	391b8 <__exponent+0x4a>
   391a2:	3230      	adds	r2, #48	; 0x30
   391a4:	3b02      	subs	r3, #2
   391a6:	f805 2c01 	strb.w	r2, [r5, #-1]
   391aa:	1c82      	adds	r2, r0, #2
   391ac:	42bb      	cmp	r3, r7
   391ae:	4614      	mov	r4, r2
   391b0:	d305      	bcc.n	391be <__exponent+0x50>
   391b2:	1a20      	subs	r0, r4, r0
   391b4:	b003      	add	sp, #12
   391b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   391b8:	462b      	mov	r3, r5
   391ba:	4611      	mov	r1, r2
   391bc:	e7e5      	b.n	3918a <__exponent+0x1c>
   391be:	f813 1b01 	ldrb.w	r1, [r3], #1
   391c2:	f802 1b01 	strb.w	r1, [r2], #1
   391c6:	e7f1      	b.n	391ac <__exponent+0x3e>
   391c8:	2330      	movs	r3, #48	; 0x30
   391ca:	1d04      	adds	r4, r0, #4
   391cc:	4419      	add	r1, r3
   391ce:	7083      	strb	r3, [r0, #2]
   391d0:	70c1      	strb	r1, [r0, #3]
   391d2:	e7ee      	b.n	391b2 <__exponent+0x44>

000391d4 <_printf_common>:
   391d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   391d8:	4691      	mov	r9, r2
   391da:	461f      	mov	r7, r3
   391dc:	688a      	ldr	r2, [r1, #8]
   391de:	4606      	mov	r6, r0
   391e0:	690b      	ldr	r3, [r1, #16]
   391e2:	460c      	mov	r4, r1
   391e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
   391e8:	4293      	cmp	r3, r2
   391ea:	bfb8      	it	lt
   391ec:	4613      	movlt	r3, r2
   391ee:	f8c9 3000 	str.w	r3, [r9]
   391f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   391f6:	b112      	cbz	r2, 391fe <_printf_common+0x2a>
   391f8:	3301      	adds	r3, #1
   391fa:	f8c9 3000 	str.w	r3, [r9]
   391fe:	6823      	ldr	r3, [r4, #0]
   39200:	0699      	lsls	r1, r3, #26
   39202:	bf42      	ittt	mi
   39204:	f8d9 3000 	ldrmi.w	r3, [r9]
   39208:	3302      	addmi	r3, #2
   3920a:	f8c9 3000 	strmi.w	r3, [r9]
   3920e:	6825      	ldr	r5, [r4, #0]
   39210:	f015 0506 	ands.w	r5, r5, #6
   39214:	d107      	bne.n	39226 <_printf_common+0x52>
   39216:	f104 0a19 	add.w	sl, r4, #25
   3921a:	68e3      	ldr	r3, [r4, #12]
   3921c:	f8d9 2000 	ldr.w	r2, [r9]
   39220:	1a9b      	subs	r3, r3, r2
   39222:	42ab      	cmp	r3, r5
   39224:	dc2b      	bgt.n	3927e <_printf_common+0xaa>
   39226:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   3922a:	6822      	ldr	r2, [r4, #0]
   3922c:	3300      	adds	r3, #0
   3922e:	bf18      	it	ne
   39230:	2301      	movne	r3, #1
   39232:	0692      	lsls	r2, r2, #26
   39234:	d430      	bmi.n	39298 <_printf_common+0xc4>
   39236:	f104 0243 	add.w	r2, r4, #67	; 0x43
   3923a:	4639      	mov	r1, r7
   3923c:	4630      	mov	r0, r6
   3923e:	47c0      	blx	r8
   39240:	3001      	adds	r0, #1
   39242:	d023      	beq.n	3928c <_printf_common+0xb8>
   39244:	6823      	ldr	r3, [r4, #0]
   39246:	341a      	adds	r4, #26
   39248:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   3924c:	f003 0306 	and.w	r3, r3, #6
   39250:	f8d9 2000 	ldr.w	r2, [r9]
   39254:	f04f 0900 	mov.w	r9, #0
   39258:	2b04      	cmp	r3, #4
   3925a:	f854 3c12 	ldr.w	r3, [r4, #-18]
   3925e:	bf08      	it	eq
   39260:	1aad      	subeq	r5, r5, r2
   39262:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   39266:	bf14      	ite	ne
   39268:	2500      	movne	r5, #0
   3926a:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   3926e:	4293      	cmp	r3, r2
   39270:	bfc4      	itt	gt
   39272:	1a9b      	subgt	r3, r3, r2
   39274:	18ed      	addgt	r5, r5, r3
   39276:	454d      	cmp	r5, r9
   39278:	d11a      	bne.n	392b0 <_printf_common+0xdc>
   3927a:	2000      	movs	r0, #0
   3927c:	e008      	b.n	39290 <_printf_common+0xbc>
   3927e:	2301      	movs	r3, #1
   39280:	4652      	mov	r2, sl
   39282:	4639      	mov	r1, r7
   39284:	4630      	mov	r0, r6
   39286:	47c0      	blx	r8
   39288:	3001      	adds	r0, #1
   3928a:	d103      	bne.n	39294 <_printf_common+0xc0>
   3928c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   39290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   39294:	3501      	adds	r5, #1
   39296:	e7c0      	b.n	3921a <_printf_common+0x46>
   39298:	18e1      	adds	r1, r4, r3
   3929a:	1c5a      	adds	r2, r3, #1
   3929c:	2030      	movs	r0, #48	; 0x30
   3929e:	3302      	adds	r3, #2
   392a0:	4422      	add	r2, r4
   392a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   392a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   392aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   392ae:	e7c2      	b.n	39236 <_printf_common+0x62>
   392b0:	2301      	movs	r3, #1
   392b2:	4622      	mov	r2, r4
   392b4:	4639      	mov	r1, r7
   392b6:	4630      	mov	r0, r6
   392b8:	47c0      	blx	r8
   392ba:	3001      	adds	r0, #1
   392bc:	d0e6      	beq.n	3928c <_printf_common+0xb8>
   392be:	f109 0901 	add.w	r9, r9, #1
   392c2:	e7d8      	b.n	39276 <_printf_common+0xa2>

000392c4 <strchr>:
   392c4:	b2c9      	uxtb	r1, r1
   392c6:	4603      	mov	r3, r0
   392c8:	f810 2b01 	ldrb.w	r2, [r0], #1
   392cc:	b11a      	cbz	r2, 392d6 <strchr+0x12>
   392ce:	428a      	cmp	r2, r1
   392d0:	d1f9      	bne.n	392c6 <strchr+0x2>
   392d2:	4618      	mov	r0, r3
   392d4:	4770      	bx	lr
   392d6:	2900      	cmp	r1, #0
   392d8:	bf18      	it	ne
   392da:	2300      	movne	r3, #0
   392dc:	e7f9      	b.n	392d2 <strchr+0xe>

000392de <strcpy>:
   392de:	4603      	mov	r3, r0
   392e0:	f811 2b01 	ldrb.w	r2, [r1], #1
   392e4:	f803 2b01 	strb.w	r2, [r3], #1
   392e8:	2a00      	cmp	r2, #0
   392ea:	d1f9      	bne.n	392e0 <strcpy+0x2>
   392ec:	4770      	bx	lr

000392ee <strncmp>:
   392ee:	b510      	push	{r4, lr}
   392f0:	b16a      	cbz	r2, 3930e <strncmp+0x20>
   392f2:	3901      	subs	r1, #1
   392f4:	1884      	adds	r4, r0, r2
   392f6:	f810 3b01 	ldrb.w	r3, [r0], #1
   392fa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   392fe:	4293      	cmp	r3, r2
   39300:	d103      	bne.n	3930a <strncmp+0x1c>
   39302:	42a0      	cmp	r0, r4
   39304:	d001      	beq.n	3930a <strncmp+0x1c>
   39306:	2b00      	cmp	r3, #0
   39308:	d1f5      	bne.n	392f6 <strncmp+0x8>
   3930a:	1a98      	subs	r0, r3, r2
   3930c:	bd10      	pop	{r4, pc}
   3930e:	4610      	mov	r0, r2
   39310:	e7fc      	b.n	3930c <strncmp+0x1e>

00039312 <strstr>:
   39312:	b5f0      	push	{r4, r5, r6, r7, lr}
   39314:	780c      	ldrb	r4, [r1, #0]
   39316:	b164      	cbz	r4, 39332 <strstr+0x20>
   39318:	4603      	mov	r3, r0
   3931a:	781a      	ldrb	r2, [r3, #0]
   3931c:	4618      	mov	r0, r3
   3931e:	1c5e      	adds	r6, r3, #1
   39320:	b90a      	cbnz	r2, 39326 <strstr+0x14>
   39322:	4610      	mov	r0, r2
   39324:	e005      	b.n	39332 <strstr+0x20>
   39326:	4294      	cmp	r4, r2
   39328:	d108      	bne.n	3933c <strstr+0x2a>
   3932a:	460d      	mov	r5, r1
   3932c:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   39330:	b902      	cbnz	r2, 39334 <strstr+0x22>
   39332:	bdf0      	pop	{r4, r5, r6, r7, pc}
   39334:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   39338:	4297      	cmp	r7, r2
   3933a:	d0f7      	beq.n	3932c <strstr+0x1a>
   3933c:	4633      	mov	r3, r6
   3933e:	e7ec      	b.n	3931a <strstr+0x8>

00039340 <_user_strerror>:
   39340:	2000      	movs	r0, #0
   39342:	4770      	bx	lr

00039344 <abort>:
   39344:	b508      	push	{r3, lr}
   39346:	2006      	movs	r0, #6
   39348:	f7f9 fbce 	bl	32ae8 <raise>
   3934c:	2001      	movs	r0, #1
   3934e:	f7e2 fb93 	bl	1ba78 <_exit>

00039352 <quorem>:
   39352:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39356:	6903      	ldr	r3, [r0, #16]
   39358:	4680      	mov	r8, r0
   3935a:	690c      	ldr	r4, [r1, #16]
   3935c:	42a3      	cmp	r3, r4
   3935e:	f2c0 8084 	blt.w	3946a <quorem+0x118>
   39362:	3c01      	subs	r4, #1
   39364:	f108 0514 	add.w	r5, r8, #20
   39368:	f101 0714 	add.w	r7, r1, #20
   3936c:	00a0      	lsls	r0, r4, #2
   3936e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   39372:	182b      	adds	r3, r5, r0
   39374:	eb07 0900 	add.w	r9, r7, r0
   39378:	9301      	str	r3, [sp, #4]
   3937a:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   3937e:	3301      	adds	r3, #1
   39380:	429a      	cmp	r2, r3
   39382:	fbb2 f6f3 	udiv	r6, r2, r3
   39386:	d333      	bcc.n	393f0 <quorem+0x9e>
   39388:	f04f 0a00 	mov.w	sl, #0
   3938c:	46bc      	mov	ip, r7
   3938e:	46ae      	mov	lr, r5
   39390:	46d3      	mov	fp, sl
   39392:	f85c 2b04 	ldr.w	r2, [ip], #4
   39396:	b293      	uxth	r3, r2
   39398:	45e1      	cmp	r9, ip
   3939a:	ea4f 4212 	mov.w	r2, r2, lsr #16
   3939e:	fb06 a303 	mla	r3, r6, r3, sl
   393a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   393a6:	b29b      	uxth	r3, r3
   393a8:	fb06 a202 	mla	r2, r6, r2, sl
   393ac:	ebab 0303 	sub.w	r3, fp, r3
   393b0:	f8de b000 	ldr.w	fp, [lr]
   393b4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
   393b8:	fa1f fb8b 	uxth.w	fp, fp
   393bc:	445b      	add	r3, fp
   393be:	fa1f fb82 	uxth.w	fp, r2
   393c2:	f8de 2000 	ldr.w	r2, [lr]
   393c6:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
   393ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
   393ce:	b29b      	uxth	r3, r3
   393d0:	ea4f 4b22 	mov.w	fp, r2, asr #16
   393d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   393d8:	f84e 3b04 	str.w	r3, [lr], #4
   393dc:	d2d9      	bcs.n	39392 <quorem+0x40>
   393de:	582b      	ldr	r3, [r5, r0]
   393e0:	b933      	cbnz	r3, 393f0 <quorem+0x9e>
   393e2:	9b01      	ldr	r3, [sp, #4]
   393e4:	3b04      	subs	r3, #4
   393e6:	429d      	cmp	r5, r3
   393e8:	461a      	mov	r2, r3
   393ea:	d332      	bcc.n	39452 <quorem+0x100>
   393ec:	f8c8 4010 	str.w	r4, [r8, #16]
   393f0:	4640      	mov	r0, r8
   393f2:	f000 fa5a 	bl	398aa <__mcmp>
   393f6:	2800      	cmp	r0, #0
   393f8:	db27      	blt.n	3944a <quorem+0xf8>
   393fa:	3601      	adds	r6, #1
   393fc:	4628      	mov	r0, r5
   393fe:	f04f 0c00 	mov.w	ip, #0
   39402:	f857 1b04 	ldr.w	r1, [r7], #4
   39406:	f8d0 e000 	ldr.w	lr, [r0]
   3940a:	b28b      	uxth	r3, r1
   3940c:	45b9      	cmp	r9, r7
   3940e:	fa1f f28e 	uxth.w	r2, lr
   39412:	ebac 0303 	sub.w	r3, ip, r3
   39416:	4413      	add	r3, r2
   39418:	ea4f 4211 	mov.w	r2, r1, lsr #16
   3941c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   39420:	eb02 4223 	add.w	r2, r2, r3, asr #16
   39424:	b29b      	uxth	r3, r3
   39426:	ea4f 4c22 	mov.w	ip, r2, asr #16
   3942a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   3942e:	f840 3b04 	str.w	r3, [r0], #4
   39432:	d2e6      	bcs.n	39402 <quorem+0xb0>
   39434:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   39438:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   3943c:	b92a      	cbnz	r2, 3944a <quorem+0xf8>
   3943e:	3b04      	subs	r3, #4
   39440:	429d      	cmp	r5, r3
   39442:	461a      	mov	r2, r3
   39444:	d30b      	bcc.n	3945e <quorem+0x10c>
   39446:	f8c8 4010 	str.w	r4, [r8, #16]
   3944a:	4630      	mov	r0, r6
   3944c:	b003      	add	sp, #12
   3944e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39452:	6812      	ldr	r2, [r2, #0]
   39454:	3b04      	subs	r3, #4
   39456:	2a00      	cmp	r2, #0
   39458:	d1c8      	bne.n	393ec <quorem+0x9a>
   3945a:	3c01      	subs	r4, #1
   3945c:	e7c3      	b.n	393e6 <quorem+0x94>
   3945e:	6812      	ldr	r2, [r2, #0]
   39460:	3b04      	subs	r3, #4
   39462:	2a00      	cmp	r2, #0
   39464:	d1ef      	bne.n	39446 <quorem+0xf4>
   39466:	3c01      	subs	r4, #1
   39468:	e7ea      	b.n	39440 <quorem+0xee>
   3946a:	2000      	movs	r0, #0
   3946c:	e7ee      	b.n	3944c <quorem+0xfa>

0003946e <__sfmoreglue>:
   3946e:	b570      	push	{r4, r5, r6, lr}
   39470:	1e4a      	subs	r2, r1, #1
   39472:	2568      	movs	r5, #104	; 0x68
   39474:	460e      	mov	r6, r1
   39476:	4355      	muls	r5, r2
   39478:	f105 0174 	add.w	r1, r5, #116	; 0x74
   3947c:	f7f7 ff26 	bl	312cc <_malloc_r>
   39480:	4604      	mov	r4, r0
   39482:	b140      	cbz	r0, 39496 <__sfmoreglue+0x28>
   39484:	2100      	movs	r1, #0
   39486:	f105 0268 	add.w	r2, r5, #104	; 0x68
   3948a:	e9c0 1600 	strd	r1, r6, [r0]
   3948e:	300c      	adds	r0, #12
   39490:	60a0      	str	r0, [r4, #8]
   39492:	f7ff fdd0 	bl	39036 <memset>
   39496:	4620      	mov	r0, r4
   39498:	bd70      	pop	{r4, r5, r6, pc}

0003949a <_fwalk_reent>:
   3949a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3949e:	4680      	mov	r8, r0
   394a0:	4689      	mov	r9, r1
   394a2:	f100 0448 	add.w	r4, r0, #72	; 0x48
   394a6:	2600      	movs	r6, #0
   394a8:	b914      	cbnz	r4, 394b0 <_fwalk_reent+0x16>
   394aa:	4630      	mov	r0, r6
   394ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   394b0:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
   394b4:	3f01      	subs	r7, #1
   394b6:	d501      	bpl.n	394bc <_fwalk_reent+0x22>
   394b8:	6824      	ldr	r4, [r4, #0]
   394ba:	e7f5      	b.n	394a8 <_fwalk_reent+0xe>
   394bc:	89ab      	ldrh	r3, [r5, #12]
   394be:	2b01      	cmp	r3, #1
   394c0:	d907      	bls.n	394d2 <_fwalk_reent+0x38>
   394c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   394c6:	3301      	adds	r3, #1
   394c8:	d003      	beq.n	394d2 <_fwalk_reent+0x38>
   394ca:	4629      	mov	r1, r5
   394cc:	4640      	mov	r0, r8
   394ce:	47c8      	blx	r9
   394d0:	4306      	orrs	r6, r0
   394d2:	3568      	adds	r5, #104	; 0x68
   394d4:	e7ee      	b.n	394b4 <_fwalk_reent+0x1a>

000394d6 <__retarget_lock_init_recursive>:
   394d6:	4770      	bx	lr

000394d8 <__retarget_lock_acquire_recursive>:
   394d8:	4770      	bx	lr

000394da <__retarget_lock_release_recursive>:
   394da:	4770      	bx	lr

000394dc <__swhatbuf_r>:
   394dc:	b570      	push	{r4, r5, r6, lr}
   394de:	460e      	mov	r6, r1
   394e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   394e4:	b096      	sub	sp, #88	; 0x58
   394e6:	4614      	mov	r4, r2
   394e8:	2900      	cmp	r1, #0
   394ea:	461d      	mov	r5, r3
   394ec:	da07      	bge.n	394fe <__swhatbuf_r+0x22>
   394ee:	2300      	movs	r3, #0
   394f0:	602b      	str	r3, [r5, #0]
   394f2:	89b3      	ldrh	r3, [r6, #12]
   394f4:	061a      	lsls	r2, r3, #24
   394f6:	d410      	bmi.n	3951a <__swhatbuf_r+0x3e>
   394f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   394fc:	e00e      	b.n	3951c <__swhatbuf_r+0x40>
   394fe:	466a      	mov	r2, sp
   39500:	f7f9 fb2e 	bl	32b60 <_fstat_r>
   39504:	2800      	cmp	r0, #0
   39506:	dbf2      	blt.n	394ee <__swhatbuf_r+0x12>
   39508:	9a01      	ldr	r2, [sp, #4]
   3950a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   3950e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   39512:	425a      	negs	r2, r3
   39514:	415a      	adcs	r2, r3
   39516:	602a      	str	r2, [r5, #0]
   39518:	e7ee      	b.n	394f8 <__swhatbuf_r+0x1c>
   3951a:	2340      	movs	r3, #64	; 0x40
   3951c:	2000      	movs	r0, #0
   3951e:	6023      	str	r3, [r4, #0]
   39520:	b016      	add	sp, #88	; 0x58
   39522:	bd70      	pop	{r4, r5, r6, pc}

00039524 <_Balloc>:
   39524:	b570      	push	{r4, r5, r6, lr}
   39526:	6a45      	ldr	r5, [r0, #36]	; 0x24
   39528:	4604      	mov	r4, r0
   3952a:	460e      	mov	r6, r1
   3952c:	b93d      	cbnz	r5, 3953e <_Balloc+0x1a>
   3952e:	2010      	movs	r0, #16
   39530:	f7f7 fe6e 	bl	31210 <malloc>
   39534:	6260      	str	r0, [r4, #36]	; 0x24
   39536:	6005      	str	r5, [r0, #0]
   39538:	60c5      	str	r5, [r0, #12]
   3953a:	e9c0 5501 	strd	r5, r5, [r0, #4]
   3953e:	6a65      	ldr	r5, [r4, #36]	; 0x24
   39540:	68eb      	ldr	r3, [r5, #12]
   39542:	b183      	cbz	r3, 39566 <_Balloc+0x42>
   39544:	6a63      	ldr	r3, [r4, #36]	; 0x24
   39546:	68db      	ldr	r3, [r3, #12]
   39548:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   3954c:	b9b8      	cbnz	r0, 3957e <_Balloc+0x5a>
   3954e:	2101      	movs	r1, #1
   39550:	4620      	mov	r0, r4
   39552:	fa01 f506 	lsl.w	r5, r1, r6
   39556:	1d6a      	adds	r2, r5, #5
   39558:	0092      	lsls	r2, r2, #2
   3955a:	f7ff fd74 	bl	39046 <_calloc_r>
   3955e:	b160      	cbz	r0, 3957a <_Balloc+0x56>
   39560:	e9c0 6501 	strd	r6, r5, [r0, #4]
   39564:	e00e      	b.n	39584 <_Balloc+0x60>
   39566:	2221      	movs	r2, #33	; 0x21
   39568:	2104      	movs	r1, #4
   3956a:	4620      	mov	r0, r4
   3956c:	f7ff fd6b 	bl	39046 <_calloc_r>
   39570:	6a63      	ldr	r3, [r4, #36]	; 0x24
   39572:	60e8      	str	r0, [r5, #12]
   39574:	68db      	ldr	r3, [r3, #12]
   39576:	2b00      	cmp	r3, #0
   39578:	d1e4      	bne.n	39544 <_Balloc+0x20>
   3957a:	2000      	movs	r0, #0
   3957c:	bd70      	pop	{r4, r5, r6, pc}
   3957e:	6802      	ldr	r2, [r0, #0]
   39580:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   39584:	2300      	movs	r3, #0
   39586:	e9c0 3303 	strd	r3, r3, [r0, #12]
   3958a:	e7f7      	b.n	3957c <_Balloc+0x58>

0003958c <_Bfree>:
   3958c:	b570      	push	{r4, r5, r6, lr}
   3958e:	6a44      	ldr	r4, [r0, #36]	; 0x24
   39590:	4606      	mov	r6, r0
   39592:	460d      	mov	r5, r1
   39594:	b93c      	cbnz	r4, 395a6 <_Bfree+0x1a>
   39596:	2010      	movs	r0, #16
   39598:	f7f7 fe3a 	bl	31210 <malloc>
   3959c:	6270      	str	r0, [r6, #36]	; 0x24
   3959e:	6004      	str	r4, [r0, #0]
   395a0:	60c4      	str	r4, [r0, #12]
   395a2:	e9c0 4401 	strd	r4, r4, [r0, #4]
   395a6:	b13d      	cbz	r5, 395b8 <_Bfree+0x2c>
   395a8:	6a73      	ldr	r3, [r6, #36]	; 0x24
   395aa:	686a      	ldr	r2, [r5, #4]
   395ac:	68db      	ldr	r3, [r3, #12]
   395ae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   395b2:	6029      	str	r1, [r5, #0]
   395b4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   395b8:	bd70      	pop	{r4, r5, r6, pc}

000395ba <__multadd>:
   395ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   395be:	f101 0c14 	add.w	ip, r1, #20
   395c2:	461f      	mov	r7, r3
   395c4:	4606      	mov	r6, r0
   395c6:	460c      	mov	r4, r1
   395c8:	690d      	ldr	r5, [r1, #16]
   395ca:	2300      	movs	r3, #0
   395cc:	f8dc 0000 	ldr.w	r0, [ip]
   395d0:	3301      	adds	r3, #1
   395d2:	b281      	uxth	r1, r0
   395d4:	429d      	cmp	r5, r3
   395d6:	ea4f 4010 	mov.w	r0, r0, lsr #16
   395da:	fb02 7101 	mla	r1, r2, r1, r7
   395de:	ea4f 4711 	mov.w	r7, r1, lsr #16
   395e2:	b289      	uxth	r1, r1
   395e4:	fb02 7000 	mla	r0, r2, r0, r7
   395e8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   395ec:	ea4f 4710 	mov.w	r7, r0, lsr #16
   395f0:	f84c 1b04 	str.w	r1, [ip], #4
   395f4:	dcea      	bgt.n	395cc <__multadd+0x12>
   395f6:	b1d7      	cbz	r7, 3962e <__multadd+0x74>
   395f8:	68a3      	ldr	r3, [r4, #8]
   395fa:	42ab      	cmp	r3, r5
   395fc:	dc12      	bgt.n	39624 <__multadd+0x6a>
   395fe:	6861      	ldr	r1, [r4, #4]
   39600:	4630      	mov	r0, r6
   39602:	3101      	adds	r1, #1
   39604:	f7ff ff8e 	bl	39524 <_Balloc>
   39608:	6922      	ldr	r2, [r4, #16]
   3960a:	4680      	mov	r8, r0
   3960c:	f104 010c 	add.w	r1, r4, #12
   39610:	3202      	adds	r2, #2
   39612:	300c      	adds	r0, #12
   39614:	0092      	lsls	r2, r2, #2
   39616:	f7ff fcd4 	bl	38fc2 <memcpy>
   3961a:	4621      	mov	r1, r4
   3961c:	4644      	mov	r4, r8
   3961e:	4630      	mov	r0, r6
   39620:	f7ff ffb4 	bl	3958c <_Bfree>
   39624:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   39628:	3501      	adds	r5, #1
   3962a:	615f      	str	r7, [r3, #20]
   3962c:	6125      	str	r5, [r4, #16]
   3962e:	4620      	mov	r0, r4
   39630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00039634 <__hi0bits>:
   39634:	0c02      	lsrs	r2, r0, #16
   39636:	4603      	mov	r3, r0
   39638:	0412      	lsls	r2, r2, #16
   3963a:	b9ca      	cbnz	r2, 39670 <__hi0bits+0x3c>
   3963c:	0403      	lsls	r3, r0, #16
   3963e:	2010      	movs	r0, #16
   39640:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   39644:	bf04      	itt	eq
   39646:	021b      	lsleq	r3, r3, #8
   39648:	3008      	addeq	r0, #8
   3964a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   3964e:	bf04      	itt	eq
   39650:	011b      	lsleq	r3, r3, #4
   39652:	3004      	addeq	r0, #4
   39654:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   39658:	bf04      	itt	eq
   3965a:	009b      	lsleq	r3, r3, #2
   3965c:	3002      	addeq	r0, #2
   3965e:	2b00      	cmp	r3, #0
   39660:	db05      	blt.n	3966e <__hi0bits+0x3a>
   39662:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   39666:	f100 0001 	add.w	r0, r0, #1
   3966a:	bf08      	it	eq
   3966c:	2020      	moveq	r0, #32
   3966e:	4770      	bx	lr
   39670:	2000      	movs	r0, #0
   39672:	e7e5      	b.n	39640 <__hi0bits+0xc>

00039674 <__lo0bits>:
   39674:	6803      	ldr	r3, [r0, #0]
   39676:	4601      	mov	r1, r0
   39678:	f013 0207 	ands.w	r2, r3, #7
   3967c:	d00b      	beq.n	39696 <__lo0bits+0x22>
   3967e:	07da      	lsls	r2, r3, #31
   39680:	d424      	bmi.n	396cc <__lo0bits+0x58>
   39682:	0798      	lsls	r0, r3, #30
   39684:	bf47      	ittee	mi
   39686:	085b      	lsrmi	r3, r3, #1
   39688:	2001      	movmi	r0, #1
   3968a:	089b      	lsrpl	r3, r3, #2
   3968c:	2002      	movpl	r0, #2
   3968e:	bf4c      	ite	mi
   39690:	600b      	strmi	r3, [r1, #0]
   39692:	600b      	strpl	r3, [r1, #0]
   39694:	4770      	bx	lr
   39696:	b298      	uxth	r0, r3
   39698:	b9b0      	cbnz	r0, 396c8 <__lo0bits+0x54>
   3969a:	0c1b      	lsrs	r3, r3, #16
   3969c:	2010      	movs	r0, #16
   3969e:	f013 0fff 	tst.w	r3, #255	; 0xff
   396a2:	bf04      	itt	eq
   396a4:	0a1b      	lsreq	r3, r3, #8
   396a6:	3008      	addeq	r0, #8
   396a8:	071a      	lsls	r2, r3, #28
   396aa:	bf04      	itt	eq
   396ac:	091b      	lsreq	r3, r3, #4
   396ae:	3004      	addeq	r0, #4
   396b0:	079a      	lsls	r2, r3, #30
   396b2:	bf04      	itt	eq
   396b4:	089b      	lsreq	r3, r3, #2
   396b6:	3002      	addeq	r0, #2
   396b8:	07da      	lsls	r2, r3, #31
   396ba:	d403      	bmi.n	396c4 <__lo0bits+0x50>
   396bc:	085b      	lsrs	r3, r3, #1
   396be:	f100 0001 	add.w	r0, r0, #1
   396c2:	d005      	beq.n	396d0 <__lo0bits+0x5c>
   396c4:	600b      	str	r3, [r1, #0]
   396c6:	4770      	bx	lr
   396c8:	4610      	mov	r0, r2
   396ca:	e7e8      	b.n	3969e <__lo0bits+0x2a>
   396cc:	2000      	movs	r0, #0
   396ce:	4770      	bx	lr
   396d0:	2020      	movs	r0, #32
   396d2:	4770      	bx	lr

000396d4 <__i2b>:
   396d4:	b510      	push	{r4, lr}
   396d6:	460c      	mov	r4, r1
   396d8:	2101      	movs	r1, #1
   396da:	f7ff ff23 	bl	39524 <_Balloc>
   396de:	2201      	movs	r2, #1
   396e0:	6144      	str	r4, [r0, #20]
   396e2:	6102      	str	r2, [r0, #16]
   396e4:	bd10      	pop	{r4, pc}

000396e6 <__multiply>:
   396e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   396ea:	4690      	mov	r8, r2
   396ec:	690a      	ldr	r2, [r1, #16]
   396ee:	460c      	mov	r4, r1
   396f0:	f8d8 3010 	ldr.w	r3, [r8, #16]
   396f4:	429a      	cmp	r2, r3
   396f6:	bfbe      	ittt	lt
   396f8:	460b      	movlt	r3, r1
   396fa:	4644      	movlt	r4, r8
   396fc:	4698      	movlt	r8, r3
   396fe:	6927      	ldr	r7, [r4, #16]
   39700:	68a3      	ldr	r3, [r4, #8]
   39702:	f8d8 9010 	ldr.w	r9, [r8, #16]
   39706:	6861      	ldr	r1, [r4, #4]
   39708:	eb07 0609 	add.w	r6, r7, r9
   3970c:	42b3      	cmp	r3, r6
   3970e:	bfb8      	it	lt
   39710:	3101      	addlt	r1, #1
   39712:	f7ff ff07 	bl	39524 <_Balloc>
   39716:	f100 0514 	add.w	r5, r0, #20
   3971a:	2200      	movs	r2, #0
   3971c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
   39720:	462b      	mov	r3, r5
   39722:	4573      	cmp	r3, lr
   39724:	d316      	bcc.n	39754 <__multiply+0x6e>
   39726:	f104 0314 	add.w	r3, r4, #20
   3972a:	f108 0214 	add.w	r2, r8, #20
   3972e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   39732:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   39736:	9300      	str	r3, [sp, #0]
   39738:	9b00      	ldr	r3, [sp, #0]
   3973a:	9201      	str	r2, [sp, #4]
   3973c:	4293      	cmp	r3, r2
   3973e:	d80c      	bhi.n	3975a <__multiply+0x74>
   39740:	2e00      	cmp	r6, #0
   39742:	dd03      	ble.n	3974c <__multiply+0x66>
   39744:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
   39748:	2b00      	cmp	r3, #0
   3974a:	d059      	beq.n	39800 <__multiply+0x11a>
   3974c:	6106      	str	r6, [r0, #16]
   3974e:	b003      	add	sp, #12
   39750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39754:	f843 2b04 	str.w	r2, [r3], #4
   39758:	e7e3      	b.n	39722 <__multiply+0x3c>
   3975a:	f8b2 a000 	ldrh.w	sl, [r2]
   3975e:	f1ba 0f00 	cmp.w	sl, #0
   39762:	d023      	beq.n	397ac <__multiply+0xc6>
   39764:	f104 0914 	add.w	r9, r4, #20
   39768:	46ac      	mov	ip, r5
   3976a:	f04f 0800 	mov.w	r8, #0
   3976e:	f859 1b04 	ldr.w	r1, [r9], #4
   39772:	f8dc b000 	ldr.w	fp, [ip]
   39776:	b28b      	uxth	r3, r1
   39778:	454f      	cmp	r7, r9
   3977a:	fa1f fb8b 	uxth.w	fp, fp
   3977e:	fb0a b303 	mla	r3, sl, r3, fp
   39782:	ea4f 4b11 	mov.w	fp, r1, lsr #16
   39786:	f8dc 1000 	ldr.w	r1, [ip]
   3978a:	4443      	add	r3, r8
   3978c:	ea4f 4811 	mov.w	r8, r1, lsr #16
   39790:	fb0a 810b 	mla	r1, sl, fp, r8
   39794:	eb01 4113 	add.w	r1, r1, r3, lsr #16
   39798:	b29b      	uxth	r3, r3
   3979a:	ea4f 4811 	mov.w	r8, r1, lsr #16
   3979e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   397a2:	f84c 3b04 	str.w	r3, [ip], #4
   397a6:	d8e2      	bhi.n	3976e <__multiply+0x88>
   397a8:	f8cc 8000 	str.w	r8, [ip]
   397ac:	9b01      	ldr	r3, [sp, #4]
   397ae:	3204      	adds	r2, #4
   397b0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   397b4:	f1b9 0f00 	cmp.w	r9, #0
   397b8:	d020      	beq.n	397fc <__multiply+0x116>
   397ba:	682b      	ldr	r3, [r5, #0]
   397bc:	f104 0814 	add.w	r8, r4, #20
   397c0:	46ac      	mov	ip, r5
   397c2:	f04f 0a00 	mov.w	sl, #0
   397c6:	f8b8 1000 	ldrh.w	r1, [r8]
   397ca:	b29b      	uxth	r3, r3
   397cc:	f8bc b002 	ldrh.w	fp, [ip, #2]
   397d0:	fb09 b101 	mla	r1, r9, r1, fp
   397d4:	448a      	add	sl, r1
   397d6:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   397da:	f84c 3b04 	str.w	r3, [ip], #4
   397de:	f858 3b04 	ldr.w	r3, [r8], #4
   397e2:	f8bc 1000 	ldrh.w	r1, [ip]
   397e6:	0c1b      	lsrs	r3, r3, #16
   397e8:	4547      	cmp	r7, r8
   397ea:	fb09 1303 	mla	r3, r9, r3, r1
   397ee:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   397f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   397f6:	d8e6      	bhi.n	397c6 <__multiply+0xe0>
   397f8:	f8cc 3000 	str.w	r3, [ip]
   397fc:	3504      	adds	r5, #4
   397fe:	e79b      	b.n	39738 <__multiply+0x52>
   39800:	3e01      	subs	r6, #1
   39802:	e79d      	b.n	39740 <__multiply+0x5a>

00039804 <__lshift>:
   39804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   39808:	460c      	mov	r4, r1
   3980a:	ea4f 1a62 	mov.w	sl, r2, asr #5
   3980e:	4607      	mov	r7, r0
   39810:	4616      	mov	r6, r2
   39812:	6923      	ldr	r3, [r4, #16]
   39814:	6849      	ldr	r1, [r1, #4]
   39816:	eb0a 0903 	add.w	r9, sl, r3
   3981a:	68a3      	ldr	r3, [r4, #8]
   3981c:	f109 0501 	add.w	r5, r9, #1
   39820:	42ab      	cmp	r3, r5
   39822:	db33      	blt.n	3988c <__lshift+0x88>
   39824:	4638      	mov	r0, r7
   39826:	f7ff fe7d 	bl	39524 <_Balloc>
   3982a:	2300      	movs	r3, #0
   3982c:	4680      	mov	r8, r0
   3982e:	f100 0114 	add.w	r1, r0, #20
   39832:	f100 0210 	add.w	r2, r0, #16
   39836:	4618      	mov	r0, r3
   39838:	4553      	cmp	r3, sl
   3983a:	db2a      	blt.n	39892 <__lshift+0x8e>
   3983c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   39840:	f104 0314 	add.w	r3, r4, #20
   39844:	6920      	ldr	r0, [r4, #16]
   39846:	f016 021f 	ands.w	r2, r6, #31
   3984a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   3984e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   39852:	d022      	beq.n	3989a <__lshift+0x96>
   39854:	f1c2 0e20 	rsb	lr, r2, #32
   39858:	2000      	movs	r0, #0
   3985a:	681e      	ldr	r6, [r3, #0]
   3985c:	4096      	lsls	r6, r2
   3985e:	4330      	orrs	r0, r6
   39860:	f841 0b04 	str.w	r0, [r1], #4
   39864:	f853 0b04 	ldr.w	r0, [r3], #4
   39868:	459c      	cmp	ip, r3
   3986a:	fa20 f00e 	lsr.w	r0, r0, lr
   3986e:	d8f4      	bhi.n	3985a <__lshift+0x56>
   39870:	6008      	str	r0, [r1, #0]
   39872:	b108      	cbz	r0, 39878 <__lshift+0x74>
   39874:	f109 0502 	add.w	r5, r9, #2
   39878:	3d01      	subs	r5, #1
   3987a:	4638      	mov	r0, r7
   3987c:	4621      	mov	r1, r4
   3987e:	f8c8 5010 	str.w	r5, [r8, #16]
   39882:	f7ff fe83 	bl	3958c <_Bfree>
   39886:	4640      	mov	r0, r8
   39888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3988c:	3101      	adds	r1, #1
   3988e:	005b      	lsls	r3, r3, #1
   39890:	e7c6      	b.n	39820 <__lshift+0x1c>
   39892:	f842 0f04 	str.w	r0, [r2, #4]!
   39896:	3301      	adds	r3, #1
   39898:	e7ce      	b.n	39838 <__lshift+0x34>
   3989a:	3904      	subs	r1, #4
   3989c:	f853 2b04 	ldr.w	r2, [r3], #4
   398a0:	459c      	cmp	ip, r3
   398a2:	f841 2f04 	str.w	r2, [r1, #4]!
   398a6:	d8f9      	bhi.n	3989c <__lshift+0x98>
   398a8:	e7e6      	b.n	39878 <__lshift+0x74>

000398aa <__mcmp>:
   398aa:	6903      	ldr	r3, [r0, #16]
   398ac:	690a      	ldr	r2, [r1, #16]
   398ae:	1a9b      	subs	r3, r3, r2
   398b0:	b530      	push	{r4, r5, lr}
   398b2:	d10c      	bne.n	398ce <__mcmp+0x24>
   398b4:	0092      	lsls	r2, r2, #2
   398b6:	3014      	adds	r0, #20
   398b8:	3114      	adds	r1, #20
   398ba:	1884      	adds	r4, r0, r2
   398bc:	4411      	add	r1, r2
   398be:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   398c2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   398c6:	4295      	cmp	r5, r2
   398c8:	d003      	beq.n	398d2 <__mcmp+0x28>
   398ca:	d305      	bcc.n	398d8 <__mcmp+0x2e>
   398cc:	2301      	movs	r3, #1
   398ce:	4618      	mov	r0, r3
   398d0:	bd30      	pop	{r4, r5, pc}
   398d2:	42a0      	cmp	r0, r4
   398d4:	d3f3      	bcc.n	398be <__mcmp+0x14>
   398d6:	e7fa      	b.n	398ce <__mcmp+0x24>
   398d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   398dc:	e7f7      	b.n	398ce <__mcmp+0x24>

000398de <__mdiff>:
   398de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   398e2:	460d      	mov	r5, r1
   398e4:	4607      	mov	r7, r0
   398e6:	4611      	mov	r1, r2
   398e8:	4614      	mov	r4, r2
   398ea:	4628      	mov	r0, r5
   398ec:	f7ff ffdd 	bl	398aa <__mcmp>
   398f0:	1e06      	subs	r6, r0, #0
   398f2:	d108      	bne.n	39906 <__mdiff+0x28>
   398f4:	4631      	mov	r1, r6
   398f6:	4638      	mov	r0, r7
   398f8:	f7ff fe14 	bl	39524 <_Balloc>
   398fc:	2301      	movs	r3, #1
   398fe:	e9c0 3604 	strd	r3, r6, [r0, #16]
   39902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   39906:	bfa3      	ittte	ge
   39908:	4623      	movge	r3, r4
   3990a:	462c      	movge	r4, r5
   3990c:	2600      	movge	r6, #0
   3990e:	2601      	movlt	r6, #1
   39910:	bfa8      	it	ge
   39912:	461d      	movge	r5, r3
   39914:	6861      	ldr	r1, [r4, #4]
   39916:	4638      	mov	r0, r7
   39918:	f7ff fe04 	bl	39524 <_Balloc>
   3991c:	f105 0914 	add.w	r9, r5, #20
   39920:	60c6      	str	r6, [r0, #12]
   39922:	f104 0214 	add.w	r2, r4, #20
   39926:	6926      	ldr	r6, [r4, #16]
   39928:	f100 0114 	add.w	r1, r0, #20
   3992c:	692b      	ldr	r3, [r5, #16]
   3992e:	f04f 0e00 	mov.w	lr, #0
   39932:	eb02 0786 	add.w	r7, r2, r6, lsl #2
   39936:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   3993a:	f852 ab04 	ldr.w	sl, [r2], #4
   3993e:	f859 5b04 	ldr.w	r5, [r9], #4
   39942:	fa1f f38a 	uxth.w	r3, sl
   39946:	4694      	mov	ip, r2
   39948:	b2ac      	uxth	r4, r5
   3994a:	45c8      	cmp	r8, r9
   3994c:	4473      	add	r3, lr
   3994e:	eba3 0304 	sub.w	r3, r3, r4
   39952:	ea4f 4415 	mov.w	r4, r5, lsr #16
   39956:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
   3995a:	eb04 4423 	add.w	r4, r4, r3, asr #16
   3995e:	b29b      	uxth	r3, r3
   39960:	ea4f 4e24 	mov.w	lr, r4, asr #16
   39964:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   39968:	f841 4b04 	str.w	r4, [r1], #4
   3996c:	d8e5      	bhi.n	3993a <__mdiff+0x5c>
   3996e:	45bc      	cmp	ip, r7
   39970:	d304      	bcc.n	3997c <__mdiff+0x9e>
   39972:	f851 3d04 	ldr.w	r3, [r1, #-4]!
   39976:	b183      	cbz	r3, 3999a <__mdiff+0xbc>
   39978:	6106      	str	r6, [r0, #16]
   3997a:	e7c2      	b.n	39902 <__mdiff+0x24>
   3997c:	f85c 4b04 	ldr.w	r4, [ip], #4
   39980:	b2a2      	uxth	r2, r4
   39982:	4472      	add	r2, lr
   39984:	1413      	asrs	r3, r2, #16
   39986:	b292      	uxth	r2, r2
   39988:	eb03 4314 	add.w	r3, r3, r4, lsr #16
   3998c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   39990:	ea4f 4e23 	mov.w	lr, r3, asr #16
   39994:	f841 2b04 	str.w	r2, [r1], #4
   39998:	e7e9      	b.n	3996e <__mdiff+0x90>
   3999a:	3e01      	subs	r6, #1
   3999c:	e7e9      	b.n	39972 <__mdiff+0x94>

0003999e <__d2b>:
   3999e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   399a2:	ec59 8b10 	vmov	r8, r9, d0
   399a6:	f3c9 540a 	ubfx	r4, r9, #20, #11
   399aa:	460e      	mov	r6, r1
   399ac:	2101      	movs	r1, #1
   399ae:	4615      	mov	r5, r2
   399b0:	f7ff fdb8 	bl	39524 <_Balloc>
   399b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
   399b8:	4607      	mov	r7, r0
   399ba:	bb2c      	cbnz	r4, 39a08 <__d2b+0x6a>
   399bc:	9301      	str	r3, [sp, #4]
   399be:	f1b8 0300 	subs.w	r3, r8, #0
   399c2:	d026      	beq.n	39a12 <__d2b+0x74>
   399c4:	4668      	mov	r0, sp
   399c6:	9300      	str	r3, [sp, #0]
   399c8:	f7ff fe54 	bl	39674 <__lo0bits>
   399cc:	9900      	ldr	r1, [sp, #0]
   399ce:	b1f0      	cbz	r0, 39a0e <__d2b+0x70>
   399d0:	9a01      	ldr	r2, [sp, #4]
   399d2:	f1c0 0320 	rsb	r3, r0, #32
   399d6:	fa02 f303 	lsl.w	r3, r2, r3
   399da:	40c2      	lsrs	r2, r0
   399dc:	430b      	orrs	r3, r1
   399de:	9201      	str	r2, [sp, #4]
   399e0:	617b      	str	r3, [r7, #20]
   399e2:	9b01      	ldr	r3, [sp, #4]
   399e4:	2b00      	cmp	r3, #0
   399e6:	61bb      	str	r3, [r7, #24]
   399e8:	bf14      	ite	ne
   399ea:	2102      	movne	r1, #2
   399ec:	2101      	moveq	r1, #1
   399ee:	6139      	str	r1, [r7, #16]
   399f0:	b1c4      	cbz	r4, 39a24 <__d2b+0x86>
   399f2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   399f6:	4404      	add	r4, r0
   399f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   399fc:	6034      	str	r4, [r6, #0]
   399fe:	6028      	str	r0, [r5, #0]
   39a00:	4638      	mov	r0, r7
   39a02:	b003      	add	sp, #12
   39a04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   39a08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   39a0c:	e7d6      	b.n	399bc <__d2b+0x1e>
   39a0e:	6179      	str	r1, [r7, #20]
   39a10:	e7e7      	b.n	399e2 <__d2b+0x44>
   39a12:	a801      	add	r0, sp, #4
   39a14:	f7ff fe2e 	bl	39674 <__lo0bits>
   39a18:	9b01      	ldr	r3, [sp, #4]
   39a1a:	2101      	movs	r1, #1
   39a1c:	3020      	adds	r0, #32
   39a1e:	617b      	str	r3, [r7, #20]
   39a20:	6139      	str	r1, [r7, #16]
   39a22:	e7e5      	b.n	399f0 <__d2b+0x52>
   39a24:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   39a28:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   39a2c:	6030      	str	r0, [r6, #0]
   39a2e:	6918      	ldr	r0, [r3, #16]
   39a30:	f7ff fe00 	bl	39634 <__hi0bits>
   39a34:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   39a38:	e7e1      	b.n	399fe <__d2b+0x60>

00039a3a <_realloc_r>:
   39a3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   39a3c:	4607      	mov	r7, r0
   39a3e:	4614      	mov	r4, r2
   39a40:	460e      	mov	r6, r1
   39a42:	b921      	cbnz	r1, 39a4e <_realloc_r+0x14>
   39a44:	4611      	mov	r1, r2
   39a46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   39a4a:	f7f7 bc3f 	b.w	312cc <_malloc_r>
   39a4e:	b922      	cbnz	r2, 39a5a <_realloc_r+0x20>
   39a50:	4625      	mov	r5, r4
   39a52:	f7f7 fbed 	bl	31230 <_free_r>
   39a56:	4628      	mov	r0, r5
   39a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   39a5a:	f000 f8ee 	bl	39c3a <_malloc_usable_size_r>
   39a5e:	42a0      	cmp	r0, r4
   39a60:	d20f      	bcs.n	39a82 <_realloc_r+0x48>
   39a62:	4621      	mov	r1, r4
   39a64:	4638      	mov	r0, r7
   39a66:	f7f7 fc31 	bl	312cc <_malloc_r>
   39a6a:	4605      	mov	r5, r0
   39a6c:	2800      	cmp	r0, #0
   39a6e:	d0f2      	beq.n	39a56 <_realloc_r+0x1c>
   39a70:	4631      	mov	r1, r6
   39a72:	4622      	mov	r2, r4
   39a74:	f7ff faa5 	bl	38fc2 <memcpy>
   39a78:	4631      	mov	r1, r6
   39a7a:	4638      	mov	r0, r7
   39a7c:	f7f7 fbd8 	bl	31230 <_free_r>
   39a80:	e7e9      	b.n	39a56 <_realloc_r+0x1c>
   39a82:	4635      	mov	r5, r6
   39a84:	e7e7      	b.n	39a56 <_realloc_r+0x1c>

00039a86 <__ssputs_r>:
   39a86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   39a8a:	688e      	ldr	r6, [r1, #8]
   39a8c:	4682      	mov	sl, r0
   39a8e:	460c      	mov	r4, r1
   39a90:	4691      	mov	r9, r2
   39a92:	429e      	cmp	r6, r3
   39a94:	4698      	mov	r8, r3
   39a96:	d838      	bhi.n	39b0a <__ssputs_r+0x84>
   39a98:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   39a9c:	f41c 6f90 	tst.w	ip, #1152	; 0x480
   39aa0:	d031      	beq.n	39b06 <__ssputs_r+0x80>
   39aa2:	6962      	ldr	r2, [r4, #20]
   39aa4:	3301      	adds	r3, #1
   39aa6:	6825      	ldr	r5, [r4, #0]
   39aa8:	6909      	ldr	r1, [r1, #16]
   39aaa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   39aae:	1a6f      	subs	r7, r5, r1
   39ab0:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   39ab4:	443b      	add	r3, r7
   39ab6:	1055      	asrs	r5, r2, #1
   39ab8:	429d      	cmp	r5, r3
   39aba:	bf38      	it	cc
   39abc:	461d      	movcc	r5, r3
   39abe:	f41c 6f80 	tst.w	ip, #1024	; 0x400
   39ac2:	d030      	beq.n	39b26 <__ssputs_r+0xa0>
   39ac4:	4629      	mov	r1, r5
   39ac6:	f7f7 fc01 	bl	312cc <_malloc_r>
   39aca:	4606      	mov	r6, r0
   39acc:	b950      	cbnz	r0, 39ae4 <__ssputs_r+0x5e>
   39ace:	230c      	movs	r3, #12
   39ad0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   39ad4:	f8ca 3000 	str.w	r3, [sl]
   39ad8:	89a3      	ldrh	r3, [r4, #12]
   39ada:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   39ade:	81a3      	strh	r3, [r4, #12]
   39ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   39ae4:	463a      	mov	r2, r7
   39ae6:	6921      	ldr	r1, [r4, #16]
   39ae8:	f7ff fa6b 	bl	38fc2 <memcpy>
   39aec:	89a3      	ldrh	r3, [r4, #12]
   39aee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   39af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   39af6:	81a3      	strh	r3, [r4, #12]
   39af8:	6126      	str	r6, [r4, #16]
   39afa:	443e      	add	r6, r7
   39afc:	6165      	str	r5, [r4, #20]
   39afe:	1bed      	subs	r5, r5, r7
   39b00:	6026      	str	r6, [r4, #0]
   39b02:	4646      	mov	r6, r8
   39b04:	60a5      	str	r5, [r4, #8]
   39b06:	4546      	cmp	r6, r8
   39b08:	d900      	bls.n	39b0c <__ssputs_r+0x86>
   39b0a:	4646      	mov	r6, r8
   39b0c:	4632      	mov	r2, r6
   39b0e:	4649      	mov	r1, r9
   39b10:	6820      	ldr	r0, [r4, #0]
   39b12:	f7ff fa76 	bl	39002 <memmove>
   39b16:	68a3      	ldr	r3, [r4, #8]
   39b18:	2000      	movs	r0, #0
   39b1a:	1b9b      	subs	r3, r3, r6
   39b1c:	60a3      	str	r3, [r4, #8]
   39b1e:	6823      	ldr	r3, [r4, #0]
   39b20:	441e      	add	r6, r3
   39b22:	6026      	str	r6, [r4, #0]
   39b24:	e7dc      	b.n	39ae0 <__ssputs_r+0x5a>
   39b26:	462a      	mov	r2, r5
   39b28:	f7ff ff87 	bl	39a3a <_realloc_r>
   39b2c:	4606      	mov	r6, r0
   39b2e:	2800      	cmp	r0, #0
   39b30:	d1e2      	bne.n	39af8 <__ssputs_r+0x72>
   39b32:	6921      	ldr	r1, [r4, #16]
   39b34:	4650      	mov	r0, sl
   39b36:	f7f7 fb7b 	bl	31230 <_free_r>
   39b3a:	e7c8      	b.n	39ace <__ssputs_r+0x48>

00039b3c <_raise_r>:
   39b3c:	291f      	cmp	r1, #31
   39b3e:	b538      	push	{r3, r4, r5, lr}
   39b40:	4604      	mov	r4, r0
   39b42:	460d      	mov	r5, r1
   39b44:	d904      	bls.n	39b50 <_raise_r+0x14>
   39b46:	2316      	movs	r3, #22
   39b48:	6003      	str	r3, [r0, #0]
   39b4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   39b4e:	bd38      	pop	{r3, r4, r5, pc}
   39b50:	6c42      	ldr	r2, [r0, #68]	; 0x44
   39b52:	b112      	cbz	r2, 39b5a <_raise_r+0x1e>
   39b54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   39b58:	b94b      	cbnz	r3, 39b6e <_raise_r+0x32>
   39b5a:	4620      	mov	r0, r4
   39b5c:	f000 f816 	bl	39b8c <_getpid_r>
   39b60:	462a      	mov	r2, r5
   39b62:	4601      	mov	r1, r0
   39b64:	4620      	mov	r0, r4
   39b66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   39b6a:	f7f8 bfc5 	b.w	32af8 <_kill_r>
   39b6e:	2b01      	cmp	r3, #1
   39b70:	d00a      	beq.n	39b88 <_raise_r+0x4c>
   39b72:	1c59      	adds	r1, r3, #1
   39b74:	d103      	bne.n	39b7e <_raise_r+0x42>
   39b76:	2316      	movs	r3, #22
   39b78:	6003      	str	r3, [r0, #0]
   39b7a:	2001      	movs	r0, #1
   39b7c:	e7e7      	b.n	39b4e <_raise_r+0x12>
   39b7e:	2400      	movs	r4, #0
   39b80:	4628      	mov	r0, r5
   39b82:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   39b86:	4798      	blx	r3
   39b88:	2000      	movs	r0, #0
   39b8a:	e7e0      	b.n	39b4e <_raise_r+0x12>

00039b8c <_getpid_r>:
   39b8c:	f7fb bc9a 	b.w	354c4 <_getpid>

00039b90 <__sread>:
   39b90:	b510      	push	{r4, lr}
   39b92:	460c      	mov	r4, r1
   39b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   39b98:	f7f9 f816 	bl	32bc8 <_read_r>
   39b9c:	2800      	cmp	r0, #0
   39b9e:	bfab      	itete	ge
   39ba0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   39ba2:	89a3      	ldrhlt	r3, [r4, #12]
   39ba4:	181b      	addge	r3, r3, r0
   39ba6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   39baa:	bfac      	ite	ge
   39bac:	6563      	strge	r3, [r4, #84]	; 0x54
   39bae:	81a3      	strhlt	r3, [r4, #12]
   39bb0:	bd10      	pop	{r4, pc}

00039bb2 <__swrite>:
   39bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   39bb6:	461f      	mov	r7, r3
   39bb8:	898b      	ldrh	r3, [r1, #12]
   39bba:	4605      	mov	r5, r0
   39bbc:	460c      	mov	r4, r1
   39bbe:	05db      	lsls	r3, r3, #23
   39bc0:	4616      	mov	r6, r2
   39bc2:	d505      	bpl.n	39bd0 <__swrite+0x1e>
   39bc4:	2302      	movs	r3, #2
   39bc6:	2200      	movs	r2, #0
   39bc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   39bcc:	f7f8 ffea 	bl	32ba4 <_lseek_r>
   39bd0:	89a3      	ldrh	r3, [r4, #12]
   39bd2:	4632      	mov	r2, r6
   39bd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   39bd8:	4628      	mov	r0, r5
   39bda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   39bde:	81a3      	strh	r3, [r4, #12]
   39be0:	463b      	mov	r3, r7
   39be2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   39be6:	f7f8 bf99 	b.w	32b1c <_write_r>

00039bea <__sseek>:
   39bea:	b510      	push	{r4, lr}
   39bec:	460c      	mov	r4, r1
   39bee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   39bf2:	f7f8 ffd7 	bl	32ba4 <_lseek_r>
   39bf6:	1c43      	adds	r3, r0, #1
   39bf8:	89a3      	ldrh	r3, [r4, #12]
   39bfa:	bf15      	itete	ne
   39bfc:	6560      	strne	r0, [r4, #84]	; 0x54
   39bfe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   39c02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   39c06:	81a3      	strheq	r3, [r4, #12]
   39c08:	bf18      	it	ne
   39c0a:	81a3      	strhne	r3, [r4, #12]
   39c0c:	bd10      	pop	{r4, pc}

00039c0e <__sclose>:
   39c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   39c12:	f7f8 bf95 	b.w	32b40 <_close_r>

00039c16 <__ascii_mbtowc>:
   39c16:	b082      	sub	sp, #8
   39c18:	b901      	cbnz	r1, 39c1c <__ascii_mbtowc+0x6>
   39c1a:	a901      	add	r1, sp, #4
   39c1c:	b142      	cbz	r2, 39c30 <__ascii_mbtowc+0x1a>
   39c1e:	b14b      	cbz	r3, 39c34 <__ascii_mbtowc+0x1e>
   39c20:	7813      	ldrb	r3, [r2, #0]
   39c22:	600b      	str	r3, [r1, #0]
   39c24:	7812      	ldrb	r2, [r2, #0]
   39c26:	1c10      	adds	r0, r2, #0
   39c28:	bf18      	it	ne
   39c2a:	2001      	movne	r0, #1
   39c2c:	b002      	add	sp, #8
   39c2e:	4770      	bx	lr
   39c30:	4610      	mov	r0, r2
   39c32:	e7fb      	b.n	39c2c <__ascii_mbtowc+0x16>
   39c34:	f06f 0001 	mvn.w	r0, #1
   39c38:	e7f8      	b.n	39c2c <__ascii_mbtowc+0x16>

00039c3a <_malloc_usable_size_r>:
   39c3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
   39c3e:	1f18      	subs	r0, r3, #4
   39c40:	2b00      	cmp	r3, #0
   39c42:	bfbc      	itt	lt
   39c44:	580b      	ldrlt	r3, [r1, r0]
   39c46:	18c0      	addlt	r0, r0, r3
   39c48:	4770      	bx	lr

00039c4a <__ascii_wctomb>:
   39c4a:	b149      	cbz	r1, 39c60 <__ascii_wctomb+0x16>
   39c4c:	2aff      	cmp	r2, #255	; 0xff
   39c4e:	bf8d      	iteet	hi
   39c50:	238a      	movhi	r3, #138	; 0x8a
   39c52:	700a      	strbls	r2, [r1, #0]
   39c54:	2001      	movls	r0, #1
   39c56:	6003      	strhi	r3, [r0, #0]
   39c58:	bf88      	it	hi
   39c5a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   39c5e:	4770      	bx	lr
   39c60:	4608      	mov	r0, r1
   39c62:	4770      	bx	lr
