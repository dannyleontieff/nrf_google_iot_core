
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	20000c58 	.word	0x20000c58
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   4:	00001211 	.word	0x00001211
   8:	00004891 	.word	0x00004891
   c:	00001241 	.word	0x00001241
  10:	00001241 	.word	0x00001241
		if (fdtable[fd].obj == NULL) {
  14:	00001241 	.word	0x00001241
  18:	00001241 	.word	0x00001241
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
  1c:	00001241 	.word	0x00001241
	...
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
  2c:	00001055 	.word	0x00001055
  30:	00001241 	.word	0x00001241
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  34:	00000000 	.word	0x00000000
		fdtable[fd].obj = FD_OBJ_RESERVED;
  38:	0000100d 	.word	0x0000100d
  3c:	00004729 	.word	0x00004729

00000040 <_irq_vector_table>:
  40:	000011d1 000011d1 000011d1 000011d1     ................
  50:	000011d1 000011d1 000011d1 000011d1     ................
  60:	000011d1 000011d1 000011d1 000011d1     ................
  70:	000011d1 000011d1 000011d1 000011d1     ................
  80:	000011d1 000011d1 000011d1 000011d1     ................
  90:	000011d1 000011d1 000011d1 000011d1     ................
  a0:	000011d1 000011d1 000011d1 000011d1     ................
  b0:	000011d1 000011d1 000011d1 000011d1     ................
  c0:	000011d1 000011d1 000011d1 000011d1     ................
  d0:	000011d1 000011d1 000011d1 000011d1     ................
  e0:	000011d1 000011d1 000011d1 000011d1     ................
  f0:	000011d1 000011d1 000011d1 000011d1     ................
 100:	000011d1 000011d1 000011d1 000011d1     ................
 110:	000011d1 000011d1 000011d1 000011d1     ................
 120:	000011d1 000011d1 000011d1 000011d1     ................
 130:	000011d1 000011d1 000011d1 000011d1     ................
 140:	000011d1                                ....

00000144 <_vector_end>:
	...

00000200 <m_firmware_info>:
 200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
 210:	00008000 00000001 00000000 00000000     ................
 220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0000023c <__aeabi_uldivmod>:
     23c:	b953      	cbnz	r3, 254 <__aeabi_uldivmod+0x18>
     23e:	b94a      	cbnz	r2, 254 <__aeabi_uldivmod+0x18>
     240:	2900      	cmp	r1, #0
     242:	bf08      	it	eq
     244:	2800      	cmpeq	r0, #0
     246:	bf1c      	itt	ne
     248:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     24c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     250:	f000 b970 	b.w	534 <__aeabi_idiv0>
     254:	f1ad 0c08 	sub.w	ip, sp, #8
     258:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     25c:	f000 f806 	bl	26c <__udivmoddi4>
     260:	f8dd e004 	ldr.w	lr, [sp, #4]
     264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     268:	b004      	add	sp, #16
     26a:	4770      	bx	lr

0000026c <__udivmoddi4>:
     26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     270:	9e09      	ldr	r6, [sp, #36]	; 0x24
     272:	4604      	mov	r4, r0
     274:	4689      	mov	r9, r1
     276:	2b00      	cmp	r3, #0
     278:	f040 8083 	bne.w	382 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x102>
     27c:	428a      	cmp	r2, r1
     27e:	4615      	mov	r5, r2
     280:	d945      	bls.n	30e <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8e>
     282:	fab2 f282 	clz	r2, r2
     286:	b14a      	cbz	r2, 29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     288:	f1c2 0720 	rsb	r7, r2, #32
     28c:	fa01 f302 	lsl.w	r3, r1, r2
     290:	4095      	lsls	r5, r2
     292:	4094      	lsls	r4, r2
     294:	fa20 f707 	lsr.w	r7, r0, r7
     298:	ea47 0903 	orr.w	r9, r7, r3
     29c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     2a0:	0c23      	lsrs	r3, r4, #16
     2a2:	fa1f f885 	uxth.w	r8, r5
     2a6:	fbb9 fcfe 	udiv	ip, r9, lr
     2aa:	fb0e 991c 	mls	r9, lr, ip, r9
     2ae:	fb0c f108 	mul.w	r1, ip, r8
     2b2:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
     2b6:	4299      	cmp	r1, r3
     2b8:	d90a      	bls.n	2d0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x50>
     2ba:	18eb      	adds	r3, r5, r3
     2bc:	bf2c      	ite	cs
     2be:	2001      	movcs	r0, #1
     2c0:	2000      	movcc	r0, #0
     2c2:	4299      	cmp	r1, r3
     2c4:	d902      	bls.n	2cc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4c>
     2c6:	2800      	cmp	r0, #0
     2c8:	f000 811d 	beq.w	506 <CONFIG_FLASH_SIZE+0x106>
     2cc:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
     2d0:	1a59      	subs	r1, r3, r1
     2d2:	b2a3      	uxth	r3, r4
     2d4:	fbb1 f0fe 	udiv	r0, r1, lr
     2d8:	fb0e 1110 	mls	r1, lr, r0, r1
     2dc:	fb00 f808 	mul.w	r8, r0, r8
     2e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     2e4:	45a0      	cmp	r8, r4
     2e6:	d905      	bls.n	2f4 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x74>
     2e8:	192c      	adds	r4, r5, r4
     2ea:	d202      	bcs.n	2f2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x72>
     2ec:	45a0      	cmp	r8, r4
     2ee:	f200 810e 	bhi.w	50e <CONFIG_FLASH_SIZE+0x10e>
     2f2:	3801      	subs	r0, #1
     2f4:	eba4 0408 	sub.w	r4, r4, r8
     2f8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     2fc:	2700      	movs	r7, #0
     2fe:	b11e      	cbz	r6, 308 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x88>
     300:	40d4      	lsrs	r4, r2
     302:	2300      	movs	r3, #0
     304:	e9c6 4300 	strd	r4, r3, [r6]
     308:	4639      	mov	r1, r7
     30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     30e:	2a00      	cmp	r2, #0
     310:	d051      	beq.n	3b6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x136>
     312:	fab2 f282 	clz	r2, r2
     316:	2a00      	cmp	r2, #0
     318:	f040 80af 	bne.w	47a <CONFIG_FLASH_SIZE+0x7a>
     31c:	1b49      	subs	r1, r1, r5
     31e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     322:	fa1f f885 	uxth.w	r8, r5
     326:	2701      	movs	r7, #1
     328:	0c23      	lsrs	r3, r4, #16
     32a:	fbb1 fcfe 	udiv	ip, r1, lr
     32e:	fb0e 111c 	mls	r1, lr, ip, r1
     332:	fb08 f00c 	mul.w	r0, r8, ip
     336:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     33a:	4298      	cmp	r0, r3
     33c:	d90a      	bls.n	354 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd4>
     33e:	18eb      	adds	r3, r5, r3
     340:	bf2c      	ite	cs
     342:	2101      	movcs	r1, #1
     344:	2100      	movcc	r1, #0
     346:	4298      	cmp	r0, r3
     348:	d902      	bls.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     34a:	2900      	cmp	r1, #0
     34c:	f000 80d7 	beq.w	4fe <CONFIG_FLASH_SIZE+0xfe>
     350:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
     354:	1a19      	subs	r1, r3, r0
     356:	b2a3      	uxth	r3, r4
     358:	fbb1 f0fe 	udiv	r0, r1, lr
     35c:	fb0e 1110 	mls	r1, lr, r0, r1
     360:	fb08 f800 	mul.w	r8, r8, r0
     364:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     368:	45a0      	cmp	r8, r4
     36a:	d905      	bls.n	378 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xf8>
     36c:	192c      	adds	r4, r5, r4
     36e:	d202      	bcs.n	376 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xf6>
     370:	45a0      	cmp	r8, r4
     372:	f200 80c1 	bhi.w	4f8 <CONFIG_FLASH_SIZE+0xf8>
     376:	3801      	subs	r0, #1
     378:	eba4 0408 	sub.w	r4, r4, r8
     37c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     380:	e7bd      	b.n	2fe <CONFIG_PM_PARTITION_SIZE_PROVISION+0x7e>
     382:	428b      	cmp	r3, r1
     384:	d908      	bls.n	398 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x118>
     386:	2e00      	cmp	r6, #0
     388:	d074      	beq.n	474 <CONFIG_FLASH_SIZE+0x74>
     38a:	2700      	movs	r7, #0
     38c:	e9c6 0100 	strd	r0, r1, [r6]
     390:	4638      	mov	r0, r7
     392:	4639      	mov	r1, r7
     394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     398:	fab3 f783 	clz	r7, r3
     39c:	b967      	cbnz	r7, 3b8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x138>
     39e:	428b      	cmp	r3, r1
     3a0:	f0c0 80a4 	bcc.w	4ec <CONFIG_FLASH_SIZE+0xec>
     3a4:	4282      	cmp	r2, r0
     3a6:	f240 80a1 	bls.w	4ec <CONFIG_FLASH_SIZE+0xec>
     3aa:	4638      	mov	r0, r7
     3ac:	2e00      	cmp	r6, #0
     3ae:	d0ab      	beq.n	308 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x88>
     3b0:	e9c6 4900 	strd	r4, r9, [r6]
     3b4:	e7a8      	b.n	308 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x88>
     3b6:	deff      	udf	#255	; 0xff
     3b8:	f1c7 0520 	rsb	r5, r7, #32
     3bc:	40bb      	lsls	r3, r7
     3be:	fa02 fc07 	lsl.w	ip, r2, r7
     3c2:	fa01 f407 	lsl.w	r4, r1, r7
     3c6:	40ea      	lsrs	r2, r5
     3c8:	fa20 f805 	lsr.w	r8, r0, r5
     3cc:	40e9      	lsrs	r1, r5
     3ce:	fa00 fe07 	lsl.w	lr, r0, r7
     3d2:	431a      	orrs	r2, r3
     3d4:	ea48 0404 	orr.w	r4, r8, r4
     3d8:	ea4f 4812 	mov.w	r8, r2, lsr #16
     3dc:	0c20      	lsrs	r0, r4, #16
     3de:	fa1f f982 	uxth.w	r9, r2
     3e2:	fbb1 faf8 	udiv	sl, r1, r8
     3e6:	fb08 111a 	mls	r1, r8, sl, r1
     3ea:	fb0a fb09 	mul.w	fp, sl, r9
     3ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     3f2:	458b      	cmp	fp, r1
     3f4:	d90a      	bls.n	40c <CONFIG_FLASH_SIZE+0xc>
     3f6:	1851      	adds	r1, r2, r1
     3f8:	bf2c      	ite	cs
     3fa:	2301      	movcs	r3, #1
     3fc:	2300      	movcc	r3, #0
     3fe:	458b      	cmp	fp, r1
     400:	d902      	bls.n	408 <CONFIG_FLASH_SIZE+0x8>
     402:	2b00      	cmp	r3, #0
     404:	f000 8088 	beq.w	518 <CONFIG_FLASH_SIZE+0x118>
     408:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
     40c:	eba1 010b 	sub.w	r1, r1, fp
     410:	b2a4      	uxth	r4, r4
     412:	fbb1 f0f8 	udiv	r0, r1, r8
     416:	fb08 1110 	mls	r1, r8, r0, r1
     41a:	fb00 f909 	mul.w	r9, r0, r9
     41e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
     422:	4589      	cmp	r9, r1
     424:	d904      	bls.n	430 <CONFIG_FLASH_SIZE+0x30>
     426:	1851      	adds	r1, r2, r1
     428:	d201      	bcs.n	42e <CONFIG_FLASH_SIZE+0x2e>
     42a:	4589      	cmp	r9, r1
     42c:	d87b      	bhi.n	526 <CONFIG_FLASH_SIZE+0x126>
     42e:	3801      	subs	r0, #1
     430:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
     434:	eba1 0109 	sub.w	r1, r1, r9
     438:	fba0 890c 	umull	r8, r9, r0, ip
     43c:	4549      	cmp	r1, r9
     43e:	4644      	mov	r4, r8
     440:	464b      	mov	r3, r9
     442:	d302      	bcc.n	44a <CONFIG_FLASH_SIZE+0x4a>
     444:	d106      	bne.n	454 <CONFIG_FLASH_SIZE+0x54>
     446:	45c6      	cmp	lr, r8
     448:	d204      	bcs.n	454 <CONFIG_FLASH_SIZE+0x54>
     44a:	3801      	subs	r0, #1
     44c:	ebb8 040c 	subs.w	r4, r8, ip
     450:	eb69 0302 	sbc.w	r3, r9, r2
     454:	2e00      	cmp	r6, #0
     456:	d05d      	beq.n	514 <CONFIG_FLASH_SIZE+0x114>
     458:	ebbe 0204 	subs.w	r2, lr, r4
     45c:	eb61 0103 	sbc.w	r1, r1, r3
     460:	fa01 f505 	lsl.w	r5, r1, r5
     464:	fa22 f307 	lsr.w	r3, r2, r7
     468:	40f9      	lsrs	r1, r7
     46a:	2700      	movs	r7, #0
     46c:	431d      	orrs	r5, r3
     46e:	e9c6 5100 	strd	r5, r1, [r6]
     472:	e749      	b.n	308 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x88>
     474:	4637      	mov	r7, r6
     476:	4630      	mov	r0, r6
     478:	e746      	b.n	308 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x88>
     47a:	f1c2 0020 	rsb	r0, r2, #32
     47e:	4095      	lsls	r5, r2
     480:	fa01 f702 	lsl.w	r7, r1, r2
     484:	fa21 f300 	lsr.w	r3, r1, r0
     488:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     48c:	fa24 f100 	lsr.w	r1, r4, r0
     490:	fa1f f885 	uxth.w	r8, r5
     494:	4094      	lsls	r4, r2
     496:	4339      	orrs	r1, r7
     498:	fbb3 f0fe 	udiv	r0, r3, lr
     49c:	0c0f      	lsrs	r7, r1, #16
     49e:	fb0e 3310 	mls	r3, lr, r0, r3
     4a2:	fb00 fc08 	mul.w	ip, r0, r8
     4a6:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
     4aa:	459c      	cmp	ip, r3
     4ac:	d907      	bls.n	4be <CONFIG_FLASH_SIZE+0xbe>
     4ae:	18eb      	adds	r3, r5, r3
     4b0:	bf2c      	ite	cs
     4b2:	2701      	movcs	r7, #1
     4b4:	2700      	movcc	r7, #0
     4b6:	459c      	cmp	ip, r3
     4b8:	d900      	bls.n	4bc <CONFIG_FLASH_SIZE+0xbc>
     4ba:	b38f      	cbz	r7, 520 <CONFIG_FLASH_SIZE+0x120>
     4bc:	3801      	subs	r0, #1
     4be:	eba3 030c 	sub.w	r3, r3, ip
     4c2:	b289      	uxth	r1, r1
     4c4:	fbb3 f7fe 	udiv	r7, r3, lr
     4c8:	fb0e 3317 	mls	r3, lr, r7, r3
     4cc:	fb07 fc08 	mul.w	ip, r7, r8
     4d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     4d4:	458c      	cmp	ip, r1
     4d6:	d904      	bls.n	4e2 <CONFIG_FLASH_SIZE+0xe2>
     4d8:	1869      	adds	r1, r5, r1
     4da:	d201      	bcs.n	4e0 <CONFIG_FLASH_SIZE+0xe0>
     4dc:	458c      	cmp	ip, r1
     4de:	d825      	bhi.n	52c <CONFIG_FLASH_SIZE+0x12c>
     4e0:	3f01      	subs	r7, #1
     4e2:	eba1 010c 	sub.w	r1, r1, ip
     4e6:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
     4ea:	e71d      	b.n	328 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa8>
     4ec:	1a84      	subs	r4, r0, r2
     4ee:	eb61 0303 	sbc.w	r3, r1, r3
     4f2:	2001      	movs	r0, #1
     4f4:	4699      	mov	r9, r3
     4f6:	e759      	b.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     4f8:	3802      	subs	r0, #2
     4fa:	442c      	add	r4, r5
     4fc:	e73c      	b.n	378 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xf8>
     4fe:	f1ac 0c02 	sub.w	ip, ip, #2
     502:	442b      	add	r3, r5
     504:	e726      	b.n	354 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd4>
     506:	f1ac 0c02 	sub.w	ip, ip, #2
     50a:	442b      	add	r3, r5
     50c:	e6e0      	b.n	2d0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x50>
     50e:	3802      	subs	r0, #2
     510:	442c      	add	r4, r5
     512:	e6ef      	b.n	2f4 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x74>
     514:	4637      	mov	r7, r6
     516:	e6f7      	b.n	308 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x88>
     518:	f1aa 0a02 	sub.w	sl, sl, #2
     51c:	4411      	add	r1, r2
     51e:	e775      	b.n	40c <CONFIG_FLASH_SIZE+0xc>
     520:	3802      	subs	r0, #2
     522:	442b      	add	r3, r5
     524:	e7cb      	b.n	4be <CONFIG_FLASH_SIZE+0xbe>
     526:	3802      	subs	r0, #2
     528:	4411      	add	r1, r2
     52a:	e781      	b.n	430 <CONFIG_FLASH_SIZE+0x30>
     52c:	3f02      	subs	r7, #2
     52e:	4429      	add	r1, r5
     530:	e7d7      	b.n	4e2 <CONFIG_FLASH_SIZE+0xe2>
     532:	bf00      	nop

00000534 <__aeabi_idiv0>:
     534:	4770      	bx	lr
     536:	bf00      	nop

00000538 <__gnu_cmse_nonsecure_call>:
     538:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
     53c:	4627      	mov	r7, r4
     53e:	46a0      	mov	r8, r4
     540:	46a1      	mov	r9, r4
     542:	46a2      	mov	sl, r4
     544:	46a3      	mov	fp, r4
     546:	46a4      	mov	ip, r4
     548:	ed2d 8b10 	vpush	{d8-d15}
     54c:	f04f 0500 	mov.w	r5, #0
     550:	ec45 5b18 	vmov	d8, r5, r5
     554:	ec45 5a19 	vmov	s18, s19, r5, r5
     558:	ec45 5a1a 	vmov	s20, s21, r5, r5
     55c:	ec45 5a1b 	vmov	s22, s23, r5, r5
     560:	ec45 5a1c 	vmov	s24, s25, r5, r5
     564:	ec45 5a1d 	vmov	s26, s27, r5, r5
     568:	ec45 5a1e 	vmov	s28, s29, r5, r5
     56c:	ec45 5a1f 	vmov	s30, s31, r5, r5
     570:	eef1 5a10 	vmrs	r5, fpscr
     574:	f64f 7660 	movw	r6, #65376	; 0xff60
     578:	f6c0 76ff 	movt	r6, #4095	; 0xfff
     57c:	4035      	ands	r5, r6
     57e:	eee1 5a10 	vmsr	fpscr, r5
     582:	f384 8800 	msr	CPSR_f, r4
     586:	4625      	mov	r5, r4
     588:	4626      	mov	r6, r4
     58a:	47a4      	blxns	r4
     58c:	ecbd 8b10 	vpop	{d8-d15}
     590:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

00000594 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     594:	680b      	ldr	r3, [r1, #0]
     596:	3301      	adds	r3, #1
     598:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     59a:	4b01      	ldr	r3, [pc, #4]	; (5a0 <char_out+0xc>)
     59c:	681b      	ldr	r3, [r3, #0]
     59e:	4718      	bx	r3
     5a0:	20000000 	.word	0x20000000

000005a4 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     5a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     5a8:	b085      	sub	sp, #20
     5aa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     5ac:	469b      	mov	fp, r3
     5ae:	2c01      	cmp	r4, #1
     5b0:	bfb8      	it	lt
     5b2:	2401      	movlt	r4, #1
     5b4:	2b01      	cmp	r3, #1
     5b6:	bf0c      	ite	eq
     5b8:	2330      	moveq	r3, #48	; 0x30
     5ba:	2320      	movne	r3, #32
     5bc:	4616      	mov	r6, r2
     5be:	4682      	mov	sl, r0
     5c0:	4688      	mov	r8, r1
     5c2:	2501      	movs	r5, #1
     5c4:	270a      	movs	r7, #10
     5c6:	2200      	movs	r2, #0
     5c8:	f8df 906c 	ldr.w	r9, [pc, #108]	; 638 <_printk_dec_ulong+0x94>
     5cc:	9302      	str	r3, [sp, #8]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
     5ce:	fbb6 f3f9 	udiv	r3, r6, r9
     5d2:	9301      	str	r3, [sp, #4]
     5d4:	b90a      	cbnz	r2, 5da <_printk_dec_ulong+0x36>
     5d6:	45b1      	cmp	r9, r6
     5d8:	d81c      	bhi.n	614 <_printk_dec_ulong+0x70>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
     5da:	9b01      	ldr	r3, [sp, #4]
     5dc:	4641      	mov	r1, r8
     5de:	f103 0030 	add.w	r0, r3, #48	; 0x30
     5e2:	47d0      	blx	sl
			found_largest_digit = 1;
     5e4:	2201      	movs	r2, #1
			digits++;
     5e6:	3501      	adds	r5, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
     5e8:	9b01      	ldr	r3, [sp, #4]
		remaining--;
     5ea:	3f01      	subs	r7, #1
		remainder %= pos;
     5ec:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
     5f0:	230a      	movs	r3, #10
	while (pos >= 10) {
     5f2:	2f01      	cmp	r7, #1
		pos /= 10;
     5f4:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
     5f8:	d1e9      	bne.n	5ce <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
     5fa:	4641      	mov	r1, r8
     5fc:	f106 0030 	add.w	r0, r6, #48	; 0x30
     600:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
     602:	f1bb 0f03 	cmp.w	fp, #3
     606:	d102      	bne.n	60e <_printk_dec_ulong+0x6a>
		remaining = min_width - digits;
     608:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
     60a:	2c00      	cmp	r4, #0
     60c:	dc0e      	bgt.n	62c <_printk_dec_ulong+0x88>
			out(' ', ctx);
		}
	}
}
     60e:	b005      	add	sp, #20
     610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     614:	42bc      	cmp	r4, r7
     616:	dbe7      	blt.n	5e8 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
     618:	f1bb 0f02 	cmp.w	fp, #2
     61c:	d8e4      	bhi.n	5e8 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     61e:	4641      	mov	r1, r8
     620:	9802      	ldr	r0, [sp, #8]
     622:	9203      	str	r2, [sp, #12]
			digits++;
     624:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     626:	47d0      	blx	sl
			digits++;
     628:	9a03      	ldr	r2, [sp, #12]
     62a:	e7dd      	b.n	5e8 <_printk_dec_ulong+0x44>
			out(' ', ctx);
     62c:	4641      	mov	r1, r8
     62e:	2020      	movs	r0, #32
     630:	47d0      	blx	sl
     632:	3c01      	subs	r4, #1
     634:	e7e9      	b.n	60a <_printk_dec_ulong+0x66>
     636:	bf00      	nop
     638:	3b9aca00 	.word	0x3b9aca00

0000063c <__printk_hook_install>:
	_char_out = fn;
     63c:	4b01      	ldr	r3, [pc, #4]	; (644 <__printk_hook_install+0x8>)
     63e:	6018      	str	r0, [r3, #0]
}
     640:	4770      	bx	lr
     642:	bf00      	nop
     644:	20000000 	.word	0x20000000

00000648 <vprintk>:
	struct out_context ctx = { 0 };
     648:	2300      	movs	r3, #0
{
     64a:	b507      	push	{r0, r1, r2, lr}
	z_vprintk(char_out, &ctx, fmt, ap);
     64c:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
     64e:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
     650:	4803      	ldr	r0, [pc, #12]	; (660 <vprintk+0x18>)
     652:	460b      	mov	r3, r1
     654:	a901      	add	r1, sp, #4
     656:	f003 fd7a 	bl	414e <z_vprintk>
}
     65a:	b003      	add	sp, #12
     65c:	f85d fb04 	ldr.w	pc, [sp], #4
     660:	00000595 	.word	0x00000595

00000664 <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     664:	f04f 0220 	mov.w	r2, #32
     668:	f3ef 8311 	mrs	r3, BASEPRI
     66c:	f382 8811 	msr	BASEPRI, r2
     670:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     674:	2101      	movs	r1, #1
     676:	4a04      	ldr	r2, [pc, #16]	; (688 <nordicsemi_nrf91_init+0x24>)
     678:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     67c:	f383 8811 	msr	BASEPRI, r3
     680:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     684:	2000      	movs	r0, #0
     686:	4770      	bx	lr
     688:	50039000 	.word	0x50039000

0000068c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
     68c:	b120      	cbz	r0, 698 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
     68e:	4b03      	ldr	r3, [pc, #12]	; (69c <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
     690:	0180      	lsls	r0, r0, #6
     692:	f043 0301 	orr.w	r3, r3, #1
     696:	4718      	bx	r3

void arch_busy_wait(u32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
     698:	4770      	bx	lr
     69a:	bf00      	nop
     69c:	000050f0 	.word	0x000050f0

000006a0 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
     6a0:	b508      	push	{r3, lr}
     6a2:	4604      	mov	r4, r0
	__asm__ volatile(
     6a4:	f04f 0220 	mov.w	r2, #32
     6a8:	f3ef 8311 	mrs	r3, BASEPRI
     6ac:	f382 8811 	msr	BASEPRI, r2
     6b0:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
     6b4:	f004 f83a 	bl	472c <sys_clock_disable>
#endif

	sys_arch_reboot(type);
     6b8:	4620      	mov	r0, r4
     6ba:	f000 fed7 	bl	146c <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
     6be:	4803      	ldr	r0, [pc, #12]	; (6cc <sys_reboot+0x2c>)
     6c0:	f003 feb5 	bl	442e <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
     6c4:	f000 fd3c 	bl	1140 <arch_cpu_idle>
     6c8:	e7fc      	b.n	6c4 <sys_reboot+0x24>
     6ca:	bf00      	nop
     6cc:	000053a4 	.word	0x000053a4

000006d0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
     6d0:	b510      	push	{r4, lr}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     6d2:	4807      	ldr	r0, [pc, #28]	; (6f0 <uart_console_init+0x20>)
     6d4:	f001 fe9e 	bl	2414 <z_impl_device_get_binding>
	__stdout_hook_install(console_out);
     6d8:	4c06      	ldr	r4, [pc, #24]	; (6f4 <uart_console_init+0x24>)

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
     6da:	4b07      	ldr	r3, [pc, #28]	; (6f8 <uart_console_init+0x28>)
     6dc:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
     6de:	4620      	mov	r0, r4
     6e0:	f001 f8f0 	bl	18c4 <__stdout_hook_install>
	__printk_hook_install(console_out);
     6e4:	4620      	mov	r0, r4
     6e6:	f7ff ffa9 	bl	63c <__printk_hook_install>
#endif

	uart_console_hook_install();

	return 0;
}
     6ea:	2000      	movs	r0, #0
     6ec:	bd10      	pop	{r4, pc}
     6ee:	bf00      	nop
     6f0:	000053cd 	.word	0x000053cd
     6f4:	000006fd 	.word	0x000006fd
     6f8:	20000188 	.word	0x20000188

000006fc <console_out>:
	if ('\n' == c) {
     6fc:	280a      	cmp	r0, #10
{
     6fe:	b538      	push	{r3, r4, r5, lr}
     700:	4604      	mov	r4, r0
     702:	4d07      	ldr	r5, [pc, #28]	; (720 <console_out+0x24>)
	if ('\n' == c) {
     704:	d104      	bne.n	710 <console_out+0x14>
     706:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
     708:	6883      	ldr	r3, [r0, #8]
     70a:	210d      	movs	r1, #13
     70c:	685b      	ldr	r3, [r3, #4]
     70e:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
     710:	6828      	ldr	r0, [r5, #0]
     712:	6883      	ldr	r3, [r0, #8]
     714:	b2e1      	uxtb	r1, r4
     716:	685b      	ldr	r3, [r3, #4]
     718:	4798      	blx	r3
}
     71a:	4620      	mov	r0, r4
     71c:	bd38      	pop	{r3, r4, r5, pc}
     71e:	bf00      	nop
     720:	20000188 	.word	0x20000188

00000724 <clkstarted_handle.constprop.9>:
DEVICE_AND_API_INIT(clock_nrf, DT_INST_LABEL(0),
		    clk_init, &data, &config, PRE_KERNEL_1,
		    CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &clock_control_api);

static void clkstarted_handle(struct device *dev,
     724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
	struct clock_control_async_data *async_data;

	DBG(dev, type, "Clock started");
	sub_data->started = true;
     726:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
     728:	4d11      	ldr	r5, [pc, #68]	; (770 <clkstarted_handle.constprop.9+0x4c>)
static void clkstarted_handle(struct device *dev,
     72a:	4606      	mov	r6, r0
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
     72c:	68eb      	ldr	r3, [r5, #12]
	sub_data->started = true;
     72e:	fb04 3400 	mla	r4, r4, r0, r3
     732:	2301      	movs	r3, #1
     734:	7263      	strb	r3, [r4, #9]
     736:	f04f 0320 	mov.w	r3, #32
     73a:	f3ef 8111 	mrs	r1, BASEPRI
     73e:	f383 8811 	msr	BASEPRI, r3
     742:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_slist_is_empty(sys_slist_t *list);

Z_GENLIST_IS_EMPTY(slist)
     746:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
     748:	b12b      	cbz	r3, 756 <clkstarted_handle.constprop.9+0x32>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
     74a:	6860      	ldr	r0, [r4, #4]
     74c:	681a      	ldr	r2, [r3, #0]
     74e:	4283      	cmp	r3, r0
	list->head = node;
     750:	6022      	str	r2, [r4, #0]
	list->tail = node;
     752:	bf08      	it	eq
     754:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
     756:	f381 8811 	msr	BASEPRI, r1
     75a:	f3bf 8f6f 	isb	sy

	while ((async_data = list_get(&sub_data->list)) != NULL) {
     75e:	b903      	cbnz	r3, 762 <clkstarted_handle.constprop.9+0x3e>
		async_data->cb(dev, (clock_control_subsys_t)type,
				async_data->user_data);
	}
}
     760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		async_data->cb(dev, (clock_control_subsys_t)type,
     762:	e9d3 7201 	ldrd	r7, r2, [r3, #4]
     766:	4631      	mov	r1, r6
     768:	4628      	mov	r0, r5
     76a:	47b8      	blx	r7
     76c:	e7e3      	b.n	736 <clkstarted_handle.constprop.9+0x12>
     76e:	bf00      	nop
     770:	200000bc 	.word	0x200000bc

00000774 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
     774:	b508      	push	{r3, lr}
#endif
}

NRF_STATIC_INLINE bool nrf_clock_event_check(NRF_CLOCK_Type const * p_reg, nrf_clock_event_t event)
{
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
     776:	4b11      	ldr	r3, [pc, #68]	; (7bc <nrf_power_clock_isr+0x48>)
     778:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
     77a:	b16a      	cbz	r2, 798 <nrf_power_clock_isr+0x24>
    return p_reg->INTENSET & mask;
     77c:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
     780:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
     784:	07d1      	lsls	r1, r2, #31
     786:	d507      	bpl.n	798 <nrf_power_clock_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
     788:	2200      	movs	r2, #0
     78a:	601a      	str	r2, [r3, #0]
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
     78c:	4b0c      	ldr	r3, [pc, #48]	; (7c0 <nrf_power_clock_isr+0x4c>)

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
     78e:	68db      	ldr	r3, [r3, #12]
     790:	7a58      	ldrb	r0, [r3, #9]
     792:	b908      	cbnz	r0, 798 <nrf_power_clock_isr+0x24>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
     794:	f7ff ffc6 	bl	724 <clkstarted_handle.constprop.9>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
     798:	4b0a      	ldr	r3, [pc, #40]	; (7c4 <nrf_power_clock_isr+0x50>)
     79a:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
     79c:	b162      	cbz	r2, 7b8 <nrf_power_clock_isr+0x44>
    return p_reg->INTENSET & mask;
     79e:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
     7a2:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
     7a6:	0792      	lsls	r2, r2, #30
     7a8:	d506      	bpl.n	7b8 <nrf_power_clock_isr+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
     7aa:	2200      	movs	r2, #0
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started();
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
     7ac:	2001      	movs	r0, #1
     7ae:	601a      	str	r2, [r3, #0]
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
     7b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
     7b4:	f7ff bfb6 	b.w	724 <clkstarted_handle.constprop.9>
}
     7b8:	bd08      	pop	{r3, pc}
     7ba:	bf00      	nop
     7bc:	50005100 	.word	0x50005100
     7c0:	200000bc 	.word	0x200000bc
     7c4:	50005104 	.word	0x50005104

000007c8 <handle_next_tick_case>:
 * counter progresses during that time it means that 1 tick elapsed and
 * interrupt is set pending.
 */
static void handle_next_tick_case(u32_t t)
{
	set_comparator(t + 2);
     7c8:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
     7ca:	4b08      	ldr	r3, [pc, #32]	; (7ec <handle_next_tick_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     7cc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
     7d0:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
     7d4:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
     7d8:	4290      	cmp	r0, r2
     7da:	d100      	bne.n	7de <handle_next_tick_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
     7dc:	4770      	bx	lr
     7de:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
     7e2:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     7e4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
     7e8:	e7f2      	b.n	7d0 <handle_next_tick_case+0x8>
     7ea:	bf00      	nop
     7ec:	50015000 	.word	0x50015000

000007f0 <rtc1_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     7f0:	2200      	movs	r2, #0
     7f2:	4b06      	ldr	r3, [pc, #24]	; (80c <CONFIG_ISR_STACK_SIZE+0xc>)
     7f4:	601a      	str	r2, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	u32_t t = get_comparator();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
     7f6:	4a06      	ldr	r2, [pc, #24]	; (810 <CONFIG_ISR_STACK_SIZE+0x10>)
    return p_reg->CC[ch];
     7f8:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
     7fc:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
     7fe:	1ac0      	subs	r0, r0, r3
     800:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
     804:	4403      	add	r3, r0
     806:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_ticks(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
     808:	f002 bd1e 	b.w	3248 <z_clock_announce>
     80c:	50015140 	.word	0x50015140
     810:	200001a4 	.word	0x200001a4

00000814 <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
     814:	b538      	push	{r3, r4, r5, lr}
     816:	4814      	ldr	r0, [pc, #80]	; (868 <z_clock_driver_init+0x54>)
     818:	f001 fdfc 	bl	2414 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_LABEL(DT_INST(0, nordic_nrf_clock)));
	if (!clock) {
     81c:	b300      	cbz	r0, 860 <z_clock_driver_init+0x4c>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
     81e:	6883      	ldr	r3, [r0, #8]
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
     820:	2400      	movs	r4, #0
     822:	681b      	ldr	r3, [r3, #0]
     824:	2101      	movs	r1, #1
     826:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     828:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     82c:	4d0f      	ldr	r5, [pc, #60]	; (86c <z_clock_driver_init+0x58>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     82e:	4b10      	ldr	r3, [pc, #64]	; (870 <z_clock_driver_init+0x5c>)
    p_reg->PRESCALER = val;
     830:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     834:	601c      	str	r4, [r3, #0]
     836:	4b0f      	ldr	r3, [pc, #60]	; (874 <z_clock_driver_init+0x60>)
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC1_IRQn);
	int_enable();

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
     838:	2101      	movs	r1, #1
     83a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
     83e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
     842:	4622      	mov	r2, r4
     844:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
     848:	2015      	movs	r0, #21
     84a:	f000 fc23 	bl	1094 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
     84e:	2015      	movs	r0, #21
     850:	f000 fc10 	bl	1074 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
     854:	2301      	movs	r3, #1

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
     856:	4620      	mov	r0, r4
     858:	4a07      	ldr	r2, [pc, #28]	; (878 <z_clock_driver_init+0x64>)
     85a:	6013      	str	r3, [r2, #0]
     85c:	602b      	str	r3, [r5, #0]
}
     85e:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
     860:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     864:	e7fb      	b.n	85e <z_clock_driver_init+0x4a>
     866:	bf00      	nop
     868:	00005594 	.word	0x00005594
     86c:	50015000 	.word	0x50015000
     870:	50015140 	.word	0x50015140
     874:	e000e100 	.word	0xe000e100
     878:	50015008 	.word	0x50015008

0000087c <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
     87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     return p_reg->COUNTER;
     87e:	4b2c      	ldr	r3, [pc, #176]	; (930 <z_clock_set_timeout+0xb4>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
     880:	4c2c      	ldr	r4, [pc, #176]	; (934 <z_clock_set_timeout+0xb8>)
     882:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	u32_t unannounced = counter_sub(counter(), last_count);
     886:	4b2c      	ldr	r3, [pc, #176]	; (938 <z_clock_set_timeout+0xbc>)
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
     888:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
     88c:	bf08      	it	eq
     88e:	4620      	moveq	r0, r4
	u32_t unannounced = counter_sub(counter(), last_count);
     890:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
     892:	1a52      	subs	r2, r2, r1
     894:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
     898:	0212      	lsls	r2, r2, #8
     89a:	d436      	bmi.n	90a <z_clock_set_timeout+0x8e>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
     89c:	3801      	subs	r0, #1
     89e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
     8a2:	42a0      	cmp	r0, r4
     8a4:	bfa8      	it	ge
     8a6:	4620      	movge	r0, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
     8a8:	3301      	adds	r3, #1
     8aa:	4418      	add	r0, r3
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
     8ac:	42a0      	cmp	r0, r4
     8ae:	bf94      	ite	ls
     8b0:	180c      	addls	r4, r1, r0
     8b2:	190c      	addhi	r4, r1, r4
    p_reg->INTENCLR = mask;
     8b4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     8b8:	2700      	movs	r7, #0
    p_reg->INTENCLR = mask;
     8ba:	4b1d      	ldr	r3, [pc, #116]	; (930 <z_clock_set_timeout+0xb4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     8bc:	4e1f      	ldr	r6, [pc, #124]	; (93c <z_clock_set_timeout+0xc0>)
    p_reg->INTENCLR = mask;
     8be:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
     return p_reg->COUNTER;
     8c2:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    return p_reg->CC[ch];
     8c6:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     8ca:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	return (a - b) & COUNTER_MAX;
     8ce:	1a52      	subs	r2, r2, r1
     8d0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	if (counter_sub(prev_val, now) == 1) {
     8d4:	2a01      	cmp	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     8d6:	6037      	str	r7, [r6, #0]
    p_reg->CC[ch] = cc_val;
     8d8:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
     8dc:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	return (a - b) & COUNTER_MAX;
     8e0:	461d      	mov	r5, r3
	if (counter_sub(prev_val, now) == 1) {
     8e2:	d103      	bne.n	8ec <z_clock_set_timeout+0x70>
	z_impl_k_busy_wait(usec_to_wait);
     8e4:	200f      	movs	r0, #15
     8e6:	f004 fa4c 	bl	4d82 <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     8ea:	6037      	str	r7, [r6, #0]
     8ec:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     8f0:	4b13      	ldr	r3, [pc, #76]	; (940 <z_clock_set_timeout+0xc4>)
     8f2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
     8f6:	f8d5 0504 	ldr.w	r0, [r5, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
     8fa:	1a23      	subs	r3, r4, r0
     8fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (diff == 1) {
     900:	2b01      	cmp	r3, #1
     902:	d104      	bne.n	90e <z_clock_set_timeout+0x92>
		handle_next_tick_case(t);
     904:	f7ff ff60 	bl	7c8 <handle_next_tick_case>
     908:	e00b      	b.n	922 <z_clock_set_timeout+0xa6>
		ticks = 0;
     90a:	2000      	movs	r0, #0
     90c:	e7cc      	b.n	8a8 <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     90e:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
     912:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
     return p_reg->COUNTER;
     916:	f8d5 0504 	ldr.w	r0, [r5, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
     91a:	1a24      	subs	r4, r4, r0
     91c:	3c02      	subs	r4, #2
	if (diff > MAX_TICKS) {
     91e:	0223      	lsls	r3, r4, #8
     920:	d4f0      	bmi.n	904 <z_clock_set_timeout+0x88>
    p_reg->INTENSET = mask;
     922:	f44f 3280 	mov.w	r2, #65536	; 0x10000
     926:	4b02      	ldr	r3, [pc, #8]	; (930 <z_clock_set_timeout+0xb4>)
     928:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	set_protected_absolute_ticks(cyc);
}
     92c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     92e:	bf00      	nop
     930:	50015000 	.word	0x50015000
     934:	007fffff 	.word	0x007fffff
     938:	200001a4 	.word	0x200001a4
     93c:	50015140 	.word	0x50015140
     940:	e000e100 	.word	0xe000e100

00000944 <z_clock_elapsed>:
	__asm__ volatile(
     944:	f04f 0220 	mov.w	r2, #32
     948:	f3ef 8311 	mrs	r3, BASEPRI
     94c:	f382 8811 	msr	BASEPRI, r2
     950:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
     954:	4a06      	ldr	r2, [pc, #24]	; (970 <z_clock_elapsed+0x2c>)
     956:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
     95a:	4a06      	ldr	r2, [pc, #24]	; (974 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
     95c:	6812      	ldr	r2, [r2, #0]
     95e:	1a80      	subs	r0, r0, r2
     960:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
     964:	f383 8811 	msr	BASEPRI, r3
     968:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
     96c:	4770      	bx	lr
     96e:	bf00      	nop
     970:	50015000 	.word	0x50015000
     974:	200001a4 	.word	0x200001a4

00000978 <adp536x_reg_read>:


static struct device *i2c_dev;

static int adp536x_reg_read(u8_t reg, u8_t *buff)
{
     978:	b530      	push	{r4, r5, lr}
	return i2c_reg_read_byte(i2c_dev, ADP536X_I2C_ADDR, reg, buff);
     97a:	4b0d      	ldr	r3, [pc, #52]	; (9b0 <adp536x_reg_read+0x38>)
{
     97c:	b089      	sub	sp, #36	; 0x24
	return i2c_reg_read_byte(i2c_dev, ADP536X_I2C_ADDR, reg, buff);
     97e:	681c      	ldr	r4, [r3, #0]
				 const void *write_buf, size_t num_write,
				 void *read_buf, size_t num_read)
{
	struct i2c_msg msg[2];

	msg[0].buf = (u8_t *)write_buf;
     980:	f10d 0307 	add.w	r3, sp, #7
     984:	9302      	str	r3, [sp, #8]
	msg[0].len = num_write;
     986:	2301      	movs	r3, #1
	msg[0].flags = I2C_MSG_WRITE;
     988:	2200      	movs	r2, #0
	msg[0].len = num_write;
     98a:	9303      	str	r3, [sp, #12]

	msg[1].buf = (u8_t *)read_buf;
	msg[1].len = num_read;
     98c:	e9cd 1305 	strd	r1, r3, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
     990:	2307      	movs	r3, #7
     992:	f88d 0007 	strb.w	r0, [sp, #7]
	msg[0].flags = I2C_MSG_WRITE;
     996:	f88d 2010 	strb.w	r2, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
     99a:	f88d 301c 	strb.w	r3, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
     99e:	68a3      	ldr	r3, [r4, #8]
     9a0:	2202      	movs	r2, #2
     9a2:	685d      	ldr	r5, [r3, #4]
     9a4:	a902      	add	r1, sp, #8
     9a6:	2346      	movs	r3, #70	; 0x46
     9a8:	4620      	mov	r0, r4
     9aa:	47a8      	blx	r5
}
     9ac:	b009      	add	sp, #36	; 0x24
     9ae:	bd30      	pop	{r4, r5, pc}
     9b0:	200001a8 	.word	0x200001a8

000009b4 <adp536x_reg_write_mask>:
}

static int adp536x_reg_write_mask(u8_t reg_addr,
			       u32_t mask,
			       u8_t data)
{
     9b4:	b570      	push	{r4, r5, r6, lr}
     9b6:	b086      	sub	sp, #24
     9b8:	460e      	mov	r6, r1
	int err;
	u8_t tmp;

	err = adp536x_reg_read(reg_addr, &tmp);
     9ba:	f10d 0107 	add.w	r1, sp, #7
{
     9be:	4605      	mov	r5, r0
     9c0:	4614      	mov	r4, r2
	err = adp536x_reg_read(reg_addr, &tmp);
     9c2:	f7ff ffd9 	bl	978 <adp536x_reg_read>
	if (err) {
     9c6:	b9c0      	cbnz	r0, 9fa <adp536x_reg_write_mask+0x46>
	return i2c_reg_write_byte(i2c_dev, ADP536X_I2C_ADDR, reg, val);
     9c8:	4b0d      	ldr	r3, [pc, #52]	; (a00 <adp536x_reg_write_mask+0x4c>)
		return err;
	}

	tmp &= ~mask;
     9ca:	f89d 2007 	ldrb.w	r2, [sp, #7]
	return i2c_reg_write_byte(i2c_dev, ADP536X_I2C_ADDR, reg, val);
     9ce:	6818      	ldr	r0, [r3, #0]
	msg.buf = (u8_t *)buf;
     9d0:	ab02      	add	r3, sp, #8
     9d2:	9303      	str	r3, [sp, #12]
	msg.len = num_bytes;
     9d4:	2302      	movs	r3, #2
	tmp &= ~mask;
     9d6:	ea22 0206 	bic.w	r2, r2, r6
	tmp |= data;
     9da:	4322      	orrs	r2, r4
     9dc:	f88d 2007 	strb.w	r2, [sp, #7]
 * @retval -EIO General input / output error.
 */
static inline int i2c_reg_write_byte(struct device *dev, u16_t dev_addr,
				     u8_t reg_addr, u8_t value)
{
	u8_t tx_buf[2] = {reg_addr, value};
     9e0:	f88d 5008 	strb.w	r5, [sp, #8]
     9e4:	f88d 2009 	strb.w	r2, [sp, #9]
	msg.len = num_bytes;
     9e8:	9304      	str	r3, [sp, #16]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
     9ea:	f88d 3014 	strb.w	r3, [sp, #20]
	return api->transfer(dev, msgs, num_msgs, addr);
     9ee:	6883      	ldr	r3, [r0, #8]
     9f0:	2201      	movs	r2, #1
     9f2:	685c      	ldr	r4, [r3, #4]
     9f4:	a903      	add	r1, sp, #12
     9f6:	2346      	movs	r3, #70	; 0x46
     9f8:	47a0      	blx	r4

	return adp536x_reg_write(reg_addr, tmp);
}
     9fa:	b006      	add	sp, #24
     9fc:	bd70      	pop	{r4, r5, r6, pc}
     9fe:	bf00      	nop
     a00:	200001a8 	.word	0x200001a8

00000a04 <adp536x_init>:

	return 0;
}

int adp536x_init(const char *dev_name)
{
     a04:	b508      	push	{r3, lr}
     a06:	f001 fd05 	bl	2414 <z_impl_device_get_binding>
	int err = 0;

	i2c_dev = device_get_binding(dev_name);
     a0a:	4b02      	ldr	r3, [pc, #8]	; (a14 <adp536x_init+0x10>)
     a0c:	6018      	str	r0, [r3, #0]
	if (err) {
		err = -ENODEV;
	}

	return err;
}
     a0e:	2000      	movs	r0, #0
     a10:	bd08      	pop	{r3, pc}
     a12:	bf00      	nop
     a14:	200001a8 	.word	0x200001a8

00000a18 <config_regions>:
}
#endif /* CONFIG_ARM_FIRMWARE_HAS_SECURE_ENTRY_FUNCS */


static void config_regions(bool ram, size_t start, size_t end, u32_t perm)
{
     a18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const size_t region_size = ram ? RAM_SECURE_ATTRIBUTION_REGION_SIZE
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
     a1a:	2800      	cmp	r0, #0
{
     a1c:	461c      	mov	r4, r3

	for (size_t i = start; i < end; i++) {
     a1e:	460d      	mov	r5, r1
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
     a20:	bf14      	ite	ne
     a22:	f44f 5300 	movne.w	r3, #8192	; 0x2000
     a26:	f44f 4300 	moveq.w	r3, #32768	; 0x8000
	for (size_t i = start; i < end; i++) {
     a2a:	4e20      	ldr	r6, [pc, #128]	; (aac <config_regions+0x94>)
     a2c:	4295      	cmp	r5, r2
     a2e:	d332      	bcc.n	a96 <config_regions+0x7e>
		} else {
			NRF_SPU->FLASHREGION[i].PERM = perm;
		}
	}

	PRINT("%02u %02u 0x%05x 0x%05x \t", start, end - 1,
     a30:	fb02 f003 	mul.w	r0, r2, r3
     a34:	3a01      	subs	r2, #1
     a36:	9000      	str	r0, [sp, #0]
     a38:	434b      	muls	r3, r1
     a3a:	481d      	ldr	r0, [pc, #116]	; (ab0 <config_regions+0x98>)
     a3c:	f003 fcf7 	bl	442e <printk>
				region_size * start, region_size * end);
	PRINT("%s", perm & (ram ? SRAM_SECURE : FLASH_SECURE) ? "Secure\t\t" :
     a40:	4b1c      	ldr	r3, [pc, #112]	; (ab4 <config_regions+0x9c>)
     a42:	f014 0f10 	tst.w	r4, #16
     a46:	491c      	ldr	r1, [pc, #112]	; (ab8 <config_regions+0xa0>)
     a48:	481c      	ldr	r0, [pc, #112]	; (abc <config_regions+0xa4>)
     a4a:	bf08      	it	eq
     a4c:	4619      	moveq	r1, r3
     a4e:	f003 fcee 	bl	442e <printk>
								"Non-Secure\t");
	PRINT("%c", perm & (ram ? SRAM_READ : FLASH_READ)  ? 'r' : '-');
     a52:	f014 0f04 	tst.w	r4, #4
     a56:	bf14      	ite	ne
     a58:	2172      	movne	r1, #114	; 0x72
     a5a:	212d      	moveq	r1, #45	; 0x2d
     a5c:	4818      	ldr	r0, [pc, #96]	; (ac0 <config_regions+0xa8>)
     a5e:	f003 fce6 	bl	442e <printk>
	PRINT("%c", perm & (ram ? SRAM_WRITE : FLASH_WRITE) ? 'w' : '-');
     a62:	f014 0f02 	tst.w	r4, #2
     a66:	bf14      	ite	ne
     a68:	2177      	movne	r1, #119	; 0x77
     a6a:	212d      	moveq	r1, #45	; 0x2d
     a6c:	4814      	ldr	r0, [pc, #80]	; (ac0 <config_regions+0xa8>)
     a6e:	f003 fcde 	bl	442e <printk>
	PRINT("%c", perm & (ram ? SRAM_EXEC : FLASH_EXEC)  ? 'x' : '-');
     a72:	f014 0f01 	tst.w	r4, #1
     a76:	bf0c      	ite	eq
     a78:	212d      	moveq	r1, #45	; 0x2d
     a7a:	2178      	movne	r1, #120	; 0x78
     a7c:	4810      	ldr	r0, [pc, #64]	; (ac0 <config_regions+0xa8>)
     a7e:	f003 fcd6 	bl	442e <printk>
	PRINT("%c", perm & (ram ? SRAM_LOCK : FLASH_LOCK)  ? 'l' : '-');
     a82:	216c      	movs	r1, #108	; 0x6c
     a84:	480e      	ldr	r0, [pc, #56]	; (ac0 <config_regions+0xa8>)
     a86:	f003 fcd2 	bl	442e <printk>
	PRINT("\n");
     a8a:	480e      	ldr	r0, [pc, #56]	; (ac4 <config_regions+0xac>)
}
     a8c:	b003      	add	sp, #12
     a8e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	PRINT("\n");
     a92:	f003 bccc 	b.w	442e <printk>
		if (ram) {
     a96:	b128      	cbz	r0, aa4 <config_regions+0x8c>
			NRF_SPU->RAMREGION[i].PERM = perm;
     a98:	f505 77e0 	add.w	r7, r5, #448	; 0x1c0
			NRF_SPU->FLASHREGION[i].PERM = perm;
     a9c:	f846 4027 	str.w	r4, [r6, r7, lsl #2]
	for (size_t i = start; i < end; i++) {
     aa0:	3501      	adds	r5, #1
     aa2:	e7c3      	b.n	a2c <config_regions+0x14>
			NRF_SPU->FLASHREGION[i].PERM = perm;
     aa4:	f505 77c0 	add.w	r7, r5, #384	; 0x180
     aa8:	e7f8      	b.n	a9c <config_regions+0x84>
     aaa:	bf00      	nop
     aac:	50003000 	.word	0x50003000
     ab0:	000053f3 	.word	0x000053f3
     ab4:	000053e7 	.word	0x000053e7
     ab8:	000053de 	.word	0x000053de
     abc:	000054fd 	.word	0x000054fd
     ac0:	0000540d 	.word	0x0000540d
     ac4:	0000574e 	.word	0x0000574e

00000ac8 <spm_config_peripheral.constprop.1>:
		     SPU_PERIPHID_PERM_SECUREMAPPING_Split;

	return present && (usel || split);
}

static int spm_config_peripheral(u8_t id, bool dma_present)
     ac8:	b508      	push	{r3, lr}
	 * Assign DMA capabilities and lock down the attribution.
	 *
	 * Note: the function assumes that the peripheral ID matches
	 * the IRQ line.
	 */
	NVIC_DisableIRQ(id);
     aca:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     acc:	2b00      	cmp	r3, #0
     ace:	db0c      	blt.n	aea <spm_config_peripheral.constprop.1+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     ad0:	2201      	movs	r2, #1
     ad2:	f000 011f 	and.w	r1, r0, #31
     ad6:	408a      	lsls	r2, r1
     ad8:	095b      	lsrs	r3, r3, #5
     ada:	4910      	ldr	r1, [pc, #64]	; (b1c <spm_config_peripheral.constprop.1+0x54>)
     adc:	3320      	adds	r3, #32
     ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     ae2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     ae6:	f3bf 8f6f 	isb	sy
	const u32_t perm = NRF_SPU->PERIPHID[id].PERM;
     aea:	0083      	lsls	r3, r0, #2
     aec:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
     af0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
     af4:	2831      	cmp	r0, #49	; 0x31
	const u32_t perm = NRF_SPU->PERIPHID[id].PERM;
     af6:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
     afa:	d006      	beq.n	b0a <spm_config_peripheral.constprop.1+0x42>
	return present && (usel || split);
     afc:	2a00      	cmp	r2, #0
     afe:	da07      	bge.n	b10 <spm_config_peripheral.constprop.1+0x48>
	bool usel = (perm & SPU_PERIPHID_PERM_SECUREMAPPING_Msk) ==
     b00:	f002 0203 	and.w	r2, r2, #3
	return present && (usel || split);
     b04:	3a02      	subs	r2, #2
     b06:	2a01      	cmp	r2, #1
     b08:	d802      	bhi.n	b10 <spm_config_peripheral.constprop.1+0x48>

	if (usel_or_split(id)) {
		NRF_SPU->PERIPHID[id].PERM = PERIPH_PRESENT | PERIPH_NONSEC |
     b0a:	4a05      	ldr	r2, [pc, #20]	; (b20 <spm_config_peripheral.constprop.1+0x58>)
     b0c:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	}

	/* Even for non-present peripherals we force IRQs to be routed
	 * to Non-Secure state.
	 */
	irq_target_state_set(id, 0);
     b10:	2100      	movs	r1, #0
     b12:	f003 fe8c 	bl	482e <irq_target_state_set>
	return 0;
}
     b16:	2000      	movs	r0, #0
     b18:	bd08      	pop	{r3, pc}
     b1a:	bf00      	nop
     b1c:	e000e100 	.word	0xe000e100
     b20:	80000100 	.word	0x80000100

00000b24 <spm_jump>:
	tz_nonsecure_fpu_access_enable();
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */
}

void spm_jump(void)
{
     b24:	b530      	push	{r4, r5, lr}
	 * The assumption is that the MSP is located at VTOR_NS[0].
	 */
	u32_t *vtor_ns = (u32_t *)NON_SECURE_APP_ADDRESS;

	PRINT("SPM: NS image at 0x%x\n", (u32_t)vtor_ns);
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
     b26:	f44f 4440 	mov.w	r4, #49152	; 0xc000
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
     b2a:	f24c 0504 	movw	r5, #49156	; 0xc004
{
     b2e:	b085      	sub	sp, #20
	PRINT("SPM: NS image at 0x%x\n", (u32_t)vtor_ns);
     b30:	f44f 4140 	mov.w	r1, #49152	; 0xc000
     b34:	482c      	ldr	r0, [pc, #176]	; (be8 <spm_jump+0xc4>)
     b36:	f003 fc7a 	bl	442e <printk>
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
     b3a:	6821      	ldr	r1, [r4, #0]
     b3c:	482b      	ldr	r0, [pc, #172]	; (bec <spm_jump+0xc8>)
     b3e:	f003 fc76 	bl	442e <printk>
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
     b42:	6829      	ldr	r1, [r5, #0]
     b44:	482a      	ldr	r0, [pc, #168]	; (bf0 <spm_jump+0xcc>)
     b46:	f003 fc72 	bl	442e <printk>

	/* Configure Non-Secure stack */
	tz_nonsecure_setup_conf_t spm_ns_conf = {
     b4a:	2210      	movs	r2, #16
     b4c:	2100      	movs	r1, #0
     b4e:	4668      	mov	r0, sp
     b50:	f003 ff2d 	bl	49ae <memset>
		.vtor_ns = (u32_t)vtor_ns,
		.msp_ns = vtor_ns[0],
     b54:	6823      	ldr	r3, [r4, #0]
	tz_nonsecure_state_setup(spm_ns_conf);
     b56:	4668      	mov	r0, sp
	tz_nonsecure_setup_conf_t spm_ns_conf = {
     b58:	9300      	str	r3, [sp, #0]
     b5a:	9402      	str	r4, [sp, #8]
	tz_nonsecure_state_setup(spm_ns_conf);
     b5c:	f000 fe3c 	bl	17d8 <tz_nonsecure_state_setup>
	tz_nonsecure_exception_prio_config(1);
     b60:	2001      	movs	r0, #1
     b62:	f000 fe69 	bl	1838 <tz_nonsecure_exception_prio_config>
	tz_nbanked_exception_target_state_set(0);
     b66:	2000      	movs	r0, #0
     b68:	f000 fe52 	bl	1810 <tz_nbanked_exception_target_state_set>
	tz_nonsecure_system_reset_req_block(
     b6c:	2000      	movs	r0, #0
     b6e:	f000 fe77 	bl	1860 <tz_nonsecure_system_reset_req_block>
	tz_sau_configure(0, 1);
     b72:	2101      	movs	r1, #1
     b74:	2000      	movs	r0, #0
     b76:	f000 fe91 	bl	189c <tz_sau_configure>
	tz_nonsecure_fpu_access_enable();
     b7a:	f000 fe85 	bl	1888 <tz_nonsecure_fpu_access_enable>

	spm_configure_ns(&spm_ns_conf);

	/* Generate function pointer for Non-Secure function call. */
	TZ_NONSECURE_FUNC_PTR_DECLARE(reset_ns);
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
     b7e:	682c      	ldr	r4, [r5, #0]

	if (TZ_NONSECURE_FUNC_PTR_IS_NS(reset_ns)) {
		PRINT("SPM: prepare to jump to Non-Secure image.\n");
     b80:	481c      	ldr	r0, [pc, #112]	; (bf4 <spm_jump+0xd0>)
     b82:	f003 fc54 	bl	442e <printk>
		/* Note: Move UARTE0 before jumping, if it is
		 * to be used on the Non-Secure domain.
		 */

		/* Configure UARTE0 as non-secure */
		spm_config_peripheral(
     b86:	2008      	movs	r0, #8
     b88:	f7ff ff9e 	bl	ac8 <spm_config_peripheral.constprop.1>
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
     b8c:	f024 0401 	bic.w	r4, r4, #1
  __ASM volatile ("dsb 0xF":::"memory");
     b90:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     b94:	f3bf 8f6f 	isb	sy

		__DSB();
		__ISB();

		/* Jump to Non-Secure firmware */
		reset_ns();
     b98:	0864      	lsrs	r4, r4, #1
     b9a:	0064      	lsls	r4, r4, #1
     b9c:	4620      	mov	r0, r4
     b9e:	4621      	mov	r1, r4
     ba0:	4622      	mov	r2, r4
     ba2:	4623      	mov	r3, r4
     ba4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
     ba8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
     bac:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
     bb0:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
     bb4:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
     bb8:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
     bbc:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
     bc0:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
     bc4:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
     bc8:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
     bcc:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
     bd0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
     bd4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
     bd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
     bdc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
     be0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     be4:	f7ff fca8 	bl	538 <__gnu_cmse_nonsecure_call>

		CODE_UNREACHABLE;
     be8:	00005514 	.word	0x00005514
     bec:	0000552b 	.word	0x0000552b
     bf0:	00005540 	.word	0x00005540
     bf4:	0000555e 	.word	0x0000555e

00000bf8 <spm_config>:
		      (u32_t)reset_ns);
	}
}

void spm_config(void)
{
     bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("Flash regions\t\tDomain\t\tPermissions\n");
     bfc:	483b      	ldr	r0, [pc, #236]	; (cec <spm_config+0xf4>)
     bfe:	f003 fc16 	bl	442e <printk>
	config_regions(false, 0, NON_SECURE_FLASH_REGION_INDEX,
     c02:	2100      	movs	r1, #0
     c04:	f240 1317 	movw	r3, #279	; 0x117
     c08:	4608      	mov	r0, r1
     c0a:	2201      	movs	r2, #1
     c0c:	f7ff ff04 	bl	a18 <config_regions>
	config_regions(false, NON_SECURE_FLASH_REGION_INDEX,
     c10:	f240 1307 	movw	r3, #263	; 0x107
     c14:	2220      	movs	r2, #32
     c16:	2101      	movs	r1, #1
     c18:	2000      	movs	r0, #0
     c1a:	f7ff fefd 	bl	a18 <config_regions>
	PRINT("\n");
     c1e:	4834      	ldr	r0, [pc, #208]	; (cf0 <spm_config+0xf8>)
     c20:	f003 fc05 	bl	442e <printk>
	u32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
     c24:	4b33      	ldr	r3, [pc, #204]	; (cf4 <spm_config+0xfc>)
                                            bool               lock_conf)
{
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].REGION & SPU_FLASHNSC_REGION_LOCK_Msk));
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].SIZE & SPU_FLASHNSC_SIZE_LOCK_Msk));

    p_reg->FLASHNSC[flash_nsc_id].REGION = (uint32_t)region_number |
     c26:	4a34      	ldr	r2, [pc, #208]	; (cf8 <spm_config+0x100>)
     c28:	f3c3 31c4 	ubfx	r1, r3, #15, #5
     c2c:	f3c3 030e 	ubfx	r3, r3, #0, #15
     c30:	f5c3 4300 	rsb	r3, r3, #32768	; 0x8000
        (lock_conf ? SPU_FLASHNSC_REGION_LOCK_Msk : 0);
    p_reg->FLASHNSC[flash_nsc_id].SIZE = (uint32_t)flash_nsc_size |
     c34:	f3c3 1343 	ubfx	r3, r3, #5, #4
    p_reg->FLASHNSC[flash_nsc_id].REGION = (uint32_t)region_number |
     c38:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->FLASHNSC[flash_nsc_id].SIZE = (uint32_t)flash_nsc_size |
     c3c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	PRINT("Non-secure callable region 0 placed in flash region %d with size %d.\n",
     c40:	f8d2 1500 	ldr.w	r1, [r2, #1280]	; 0x500
     c44:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
     c48:	482c      	ldr	r0, [pc, #176]	; (cfc <spm_config+0x104>)
     c4a:	0152      	lsls	r2, r2, #5
     c4c:	f003 fbef 	bl	442e <printk>
	PRINT("\n");
     c50:	4827      	ldr	r0, [pc, #156]	; (cf0 <spm_config+0xf8>)
     c52:	f003 fbec 	bl	442e <printk>
	int err = spm_secure_services_init();
     c56:	f003 fd98 	bl	478a <spm_secure_services_init>
	if (err != 0) {
     c5a:	4601      	mov	r1, r0
     c5c:	b110      	cbz	r0, c64 <spm_config+0x6c>
		PRINT("Could not initialize secure services (err %d).\n", err);
     c5e:	4828      	ldr	r0, [pc, #160]	; (d00 <spm_config+0x108>)
     c60:	f003 fbe5 	bl	442e <printk>
	NRF_SPU->DPPI[0].PERM = mask;
     c64:	2400      	movs	r4, #0
	PRINT("SRAM region\t\tDomain\t\tPermissions\n");
     c66:	4827      	ldr	r0, [pc, #156]	; (d04 <spm_config+0x10c>)
     c68:	f003 fbe1 	bl	442e <printk>
	config_regions(true, 0, NON_SECURE_RAM_REGION_INDEX,
     c6c:	f240 1317 	movw	r3, #279	; 0x117
     c70:	2208      	movs	r2, #8
     c72:	2100      	movs	r1, #0
     c74:	2001      	movs	r0, #1
     c76:	f7ff fecf 	bl	a18 <config_regions>
	NRF_SPU->DPPI[0].PERM = mask;
     c7a:	4d1f      	ldr	r5, [pc, #124]	; (cf8 <spm_config+0x100>)
	config_regions(true, NON_SECURE_RAM_REGION_INDEX,
     c7c:	f240 1307 	movw	r3, #263	; 0x107
     c80:	2220      	movs	r2, #32
     c82:	2108      	movs	r1, #8
     c84:	2001      	movs	r0, #1
     c86:	f7ff fec7 	bl	a18 <config_regions>
	PRINT("\n");
     c8a:	4819      	ldr	r0, [pc, #100]	; (cf0 <spm_config+0xf8>)
     c8c:	f003 fbcf 	bl	442e <printk>
	NRF_SPU->DPPI[0].PERM = mask;
     c90:	f8c5 4480 	str.w	r4, [r5, #1152]	; 0x480
	PRINT("Peripheral\t\tDomain\t\tStatus\n");
     c94:	481c      	ldr	r0, [pc, #112]	; (d08 <spm_config+0x110>)
     c96:	f003 fbca 	bl	442e <printk>
		PRINT("%02u %-21s%s", i, periph[i].name,
     c9a:	4f1c      	ldr	r7, [pc, #112]	; (d0c <spm_config+0x114>)
		NRF_SPU->GPIOPORT[0].PERM = 0;
     c9c:	f8c5 44c0 	str.w	r4, [r5, #1216]	; 0x4c0
		PRINT("%02u %-21s%s", i, periph[i].name,
     ca0:	f8df 807c 	ldr.w	r8, [pc, #124]	; d20 <spm_config+0x128>
     ca4:	4d1a      	ldr	r5, [pc, #104]	; (d10 <spm_config+0x118>)
     ca6:	f8df 907c 	ldr.w	r9, [pc, #124]	; d24 <spm_config+0x12c>
     caa:	796e      	ldrb	r6, [r5, #5]
     cac:	682a      	ldr	r2, [r5, #0]
     cae:	2e00      	cmp	r6, #0
     cb0:	bf14      	ite	ne
     cb2:	463b      	movne	r3, r7
     cb4:	4643      	moveq	r3, r8
     cb6:	4621      	mov	r1, r4
     cb8:	4648      	mov	r0, r9
     cba:	f003 fbb8 	bl	442e <printk>
		if (!periph[i].nonsecure) {
     cbe:	b966      	cbnz	r6, cda <spm_config+0xe2>
			PRINT("\tSKIP\n");
     cc0:	4814      	ldr	r0, [pc, #80]	; (d14 <spm_config+0x11c>)
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
     cc2:	3401      	adds	r4, #1
			PRINT("\tOK\n");
     cc4:	f003 fbb3 	bl	442e <printk>
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
     cc8:	2c1a      	cmp	r4, #26
     cca:	f105 0508 	add.w	r5, r5, #8
     cce:	d1ec      	bne.n	caa <spm_config+0xb2>
	PRINT("\n");
     cd0:	4807      	ldr	r0, [pc, #28]	; (cf0 <spm_config+0xf8>)
	spm_config_flash();
	spm_config_sram();
	spm_config_peripherals();
}
     cd2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("\n");
     cd6:	f003 bbaa 	b.w	442e <printk>
		err = spm_config_peripheral(periph[i].id, false);
     cda:	7928      	ldrb	r0, [r5, #4]
     cdc:	f7ff fef4 	bl	ac8 <spm_config_peripheral.constprop.1>
		if (err) {
     ce0:	b108      	cbz	r0, ce6 <spm_config+0xee>
			PRINT("\tERROR\n");
     ce2:	480d      	ldr	r0, [pc, #52]	; (d18 <spm_config+0x120>)
     ce4:	e7ed      	b.n	cc2 <spm_config+0xca>
			PRINT("\tOK\n");
     ce6:	480d      	ldr	r0, [pc, #52]	; (d1c <spm_config+0x124>)
     ce8:	e7eb      	b.n	cc2 <spm_config+0xca>
     cea:	bf00      	nop
     cec:	0000541b 	.word	0x0000541b
     cf0:	0000574e 	.word	0x0000574e
     cf4:	00007fe0 	.word	0x00007fe0
     cf8:	50003000 	.word	0x50003000
     cfc:	0000543f 	.word	0x0000543f
     d00:	00005485 	.word	0x00005485
     d04:	000054b5 	.word	0x000054b5
     d08:	000054d7 	.word	0x000054d7
     d0c:	00005410 	.word	0x00005410
     d10:	0000510c 	.word	0x0000510c
     d14:	00005500 	.word	0x00005500
     d18:	00005507 	.word	0x00005507
     d1c:	0000550f 	.word	0x0000550f
     d20:	000053eb 	.word	0x000053eb
     d24:	000054f3 	.word	0x000054f3

00000d28 <__acle_se_spm_request_read>:
};


__TZ_NONSECURE_ENTRY_FUNC
int spm_request_read(void *destination, u32_t addr, size_t len)
{
     d28:	b510      	push	{r4, lr}
		 .size = FICR_PUBLIC_SIZE},
		{.start = FICR_RESTRICTED_ADDR,
		 .size = FICR_RESTRICTED_SIZE},
	};

	if (destination == NULL || len <= 0) {
     d2a:	2800      	cmp	r0, #0
     d2c:	d04b      	beq.n	dc6 <__acle_se_spm_request_read+0x9e>
     d2e:	2a00      	cmp	r2, #0
     d30:	d049      	beq.n	dc6 <__acle_se_spm_request_read+0x9e>

	for (size_t i = 0; i < ARRAY_SIZE(ranges); i++) {
		u32_t start = ranges[i].start;
		u32_t size = ranges[i].size;

		if (addr >= start && addr + len <= start + size) {
     d32:	4b26      	ldr	r3, [pc, #152]	; (dcc <__acle_se_spm_request_read+0xa4>)
     d34:	4299      	cmp	r1, r3
     d36:	d93c      	bls.n	db2 <__acle_se_spm_request_read+0x8a>
     d38:	1854      	adds	r4, r2, r1
     d3a:	f603 231d 	addw	r3, r3, #2589	; 0xa1d
     d3e:	429c      	cmp	r4, r3
     d40:	d83a      	bhi.n	db8 <__acle_se_spm_request_read+0x90>
			memcpy(destination, (const void *)addr, len);
     d42:	f003 fe0a 	bl	495a <memcpy>
			return 0;
     d46:	2000      	movs	r0, #0
		}
	}

	return -EPERM;
}
     d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     d4c:	4671      	mov	r1, lr
     d4e:	4672      	mov	r2, lr
     d50:	4673      	mov	r3, lr
     d52:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
     d56:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
     d5a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
     d5e:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
     d62:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
     d66:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
     d6a:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
     d6e:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
     d72:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
     d76:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
     d7a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
     d7e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
     d82:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
     d86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
     d8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
     d8e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     d92:	f38e 8c00 	msr	CPSR_fs, lr
     d96:	b410      	push	{r4}
     d98:	eef1 ca10 	vmrs	ip, fpscr
     d9c:	f64f 7460 	movw	r4, #65376	; 0xff60
     da0:	f6c0 74ff 	movt	r4, #4095	; 0xfff
     da4:	ea0c 0c04 	and.w	ip, ip, r4
     da8:	eee1 ca10 	vmsr	fpscr, ip
     dac:	bc10      	pop	{r4}
     dae:	46f4      	mov	ip, lr
     db0:	4774      	bxns	lr
		if (addr >= start && addr + len <= start + size) {
     db2:	4b07      	ldr	r3, [pc, #28]	; (dd0 <__acle_se_spm_request_read+0xa8>)
     db4:	4299      	cmp	r1, r3
     db6:	d903      	bls.n	dc0 <__acle_se_spm_request_read+0x98>
     db8:	4b06      	ldr	r3, [pc, #24]	; (dd4 <__acle_se_spm_request_read+0xac>)
     dba:	1854      	adds	r4, r2, r1
     dbc:	429c      	cmp	r4, r3
     dbe:	d9c0      	bls.n	d42 <__acle_se_spm_request_read+0x1a>
	return -EPERM;
     dc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     dc4:	e7c0      	b.n	d48 <__acle_se_spm_request_read+0x20>
		return -EINVAL;
     dc6:	f06f 0015 	mvn.w	r0, #21
     dca:	e7bd      	b.n	d48 <__acle_se_spm_request_read+0x20>
     dcc:	00ff0203 	.word	0x00ff0203
     dd0:	00ff012f 	.word	0x00ff012f
     dd4:	00ff0138 	.word	0x00ff0138

00000dd8 <__acle_se_spm_firmware_info>:


#ifdef CONFIG_SPM_SERVICE_FIND_FIRMWARE_INFO
__TZ_NONSECURE_ENTRY_FUNC
int spm_firmware_info(u32_t fw_address, struct fw_info *info)
{
     dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ddc:	4683      	mov	fp, r0
     dde:	b085      	sub	sp, #20
	const struct fw_info *tmp_info;

	if (info == NULL) {
     de0:	4689      	mov	r9, r1
     de2:	2900      	cmp	r1, #0
     de4:	d051      	beq.n	e8a <__acle_se_spm_firmware_info+0xb2>
 */
static inline const struct fw_info *fw_info_find(u32_t firmware_address)
{
	const struct fw_info *finfo;

	for (u32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
     de6:	2700      	movs	r7, #0
     de8:	f8df a0b0 	ldr.w	sl, [pc, #176]	; e9c <__acle_se_spm_firmware_info+0xc4>
	const u32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
     dec:	f8df 80b0 	ldr.w	r8, [pc, #176]	; ea0 <__acle_se_spm_firmware_info+0xc8>
     df0:	ae01      	add	r6, sp, #4
		finfo = fw_info_check(firmware_address +
						fw_info_allowed_offsets[i]);
     df2:	f85a 4b04 	ldr.w	r4, [sl], #4
	const u32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
     df6:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
		finfo = fw_info_check(firmware_address +
     dfa:	445c      	add	r4, fp
	const u32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
     dfc:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	if (memcmp(finfo->magic, fw_info_magic, CONFIG_FW_INFO_MAGIC_LEN)
     e00:	220c      	movs	r2, #12
     e02:	4631      	mov	r1, r6
     e04:	4620      	mov	r0, r4
     e06:	f003 fd81 	bl	490c <memcmp>
     e0a:	4605      	mov	r5, r0
     e0c:	b908      	cbnz	r0, e12 <__acle_se_spm_firmware_info+0x3a>
		if (finfo) {
     e0e:	2c00      	cmp	r4, #0
     e10:	d13e      	bne.n	e90 <__acle_se_spm_firmware_info+0xb8>
	for (u32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
     e12:	3701      	adds	r7, #1
     e14:	2f05      	cmp	r7, #5
     e16:	d1ec      	bne.n	df2 <__acle_se_spm_firmware_info+0x1a>
	if (tmp_info != NULL) {
		memcpy(info, tmp_info, sizeof(*tmp_info));
		return 0;
	}

	return -EFAULT;
     e18:	f06f 050d 	mvn.w	r5, #13
}
     e1c:	4628      	mov	r0, r5
     e1e:	b005      	add	sp, #20
     e20:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
     e24:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
     e28:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
     e2c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
     e30:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
     e34:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
     e38:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
     e3c:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
     e40:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
     e44:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
     e48:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
     e4c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
     e50:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
     e54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
     e58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
     e5c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e60:	4671      	mov	r1, lr
     e62:	4672      	mov	r2, lr
     e64:	4673      	mov	r3, lr
     e66:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     e6a:	f38e 8c00 	msr	CPSR_fs, lr
     e6e:	b410      	push	{r4}
     e70:	eef1 ca10 	vmrs	ip, fpscr
     e74:	f64f 7460 	movw	r4, #65376	; 0xff60
     e78:	f6c0 74ff 	movt	r4, #4095	; 0xfff
     e7c:	ea0c 0c04 	and.w	ip, ip, r4
     e80:	eee1 ca10 	vmsr	fpscr, ip
     e84:	bc10      	pop	{r4}
     e86:	46f4      	mov	ip, lr
     e88:	4774      	bxns	lr
		return -EINVAL;
     e8a:	f06f 0515 	mvn.w	r5, #21
     e8e:	e7c5      	b.n	e1c <__acle_se_spm_firmware_info+0x44>
		memcpy(info, tmp_info, sizeof(*tmp_info));
     e90:	223c      	movs	r2, #60	; 0x3c
     e92:	4621      	mov	r1, r4
     e94:	4648      	mov	r0, r9
     e96:	f003 fd60 	bl	495a <memcpy>
		return 0;
     e9a:	e7bf      	b.n	e1c <__acle_se_spm_firmware_info+0x44>
     e9c:	000051dc 	.word	0x000051dc
     ea0:	000050a0 	.word	0x000050a0

00000ea4 <nrf_cc310_platform_abort_init>:

/** @brief Function to initialize the nrf_cc310_platform abort APIs.
 */
void nrf_cc310_platform_abort_init(void)
{
	nrf_cc310_platform_set_abort(&apis);
     ea4:	4801      	ldr	r0, [pc, #4]	; (eac <nrf_cc310_platform_abort_init+0x8>)
     ea6:	f002 bc59 	b.w	375c <nrf_cc310_platform_set_abort>
     eaa:	bf00      	nop
     eac:	000051f0 	.word	0x000051f0

00000eb0 <mutex_unlock>:
}


/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock(nrf_cc310_platform_mutex_t *mutex) {
     eb0:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
     eb2:	b130      	cbz	r0, ec2 <mutex_unlock+0x12>
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
    }

    /* Ensure that the mutex has been initialized */
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
     eb4:	6843      	ldr	r3, [r0, #4]
     eb6:	b13b      	cbz	r3, ec8 <mutex_unlock+0x18>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    }

    p_mutex = (struct k_mutex *)mutex->mutex;
     eb8:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
     eba:	f001 fcad 	bl	2818 <z_impl_k_mutex_unlock>

    k_mutex_unlock(p_mutex);
    return NRF_CC310_PLATFORM_SUCCESS;
     ebe:	2000      	movs	r0, #0
}
     ec0:	bd08      	pop	{r3, pc}
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
     ec2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
     ec6:	e7fb      	b.n	ec0 <mutex_unlock+0x10>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
     ec8:	4800      	ldr	r0, [pc, #0]	; (ecc <mutex_unlock+0x1c>)
     eca:	e7f9      	b.n	ec0 <mutex_unlock+0x10>
     ecc:	ffff8fea 	.word	0xffff8fea

00000ed0 <mutex_free>:
static void mutex_free(nrf_cc310_platform_mutex_t *mutex) {
     ed0:	b538      	push	{r3, r4, r5, lr}
    if (mutex == NULL) {
     ed2:	4604      	mov	r4, r0
     ed4:	b918      	cbnz	r0, ede <mutex_free+0xe>
        platform_abort_apis.abort_fn(
     ed6:	4b0b      	ldr	r3, [pc, #44]	; (f04 <mutex_free+0x34>)
     ed8:	480b      	ldr	r0, [pc, #44]	; (f08 <mutex_free+0x38>)
     eda:	685b      	ldr	r3, [r3, #4]
     edc:	4798      	blx	r3
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
     ede:	6865      	ldr	r5, [r4, #4]
     ee0:	b155      	cbz	r5, ef8 <mutex_free+0x28>
    if ((mutex->flags & NRF_CC310_PLATFORM_MUTEX_MASK_IS_ALLOCATED) == 0) {
     ee2:	f015 0502 	ands.w	r5, r5, #2
     ee6:	6820      	ldr	r0, [r4, #0]
     ee8:	d107      	bne.n	efa <mutex_free+0x2a>
        k_mem_slab_free(&mutex_slab, mutex->mutex);
     eea:	4601      	mov	r1, r0
     eec:	4807      	ldr	r0, [pc, #28]	; (f0c <mutex_free+0x3c>)
     eee:	f001 fbf1 	bl	26d4 <k_mem_slab_free>
        mutex->mutex = NULL;
     ef2:	6025      	str	r5, [r4, #0]
    mutex->flags = NRF_CC310_PLATFORM_MUTEX_MASK_INVALID;
     ef4:	2300      	movs	r3, #0
     ef6:	6063      	str	r3, [r4, #4]
}
     ef8:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
     efa:	2214      	movs	r2, #20
     efc:	2100      	movs	r1, #0
     efe:	f003 fd56 	bl	49ae <memset>
     f02:	e7f7      	b.n	ef4 <mutex_free+0x24>
     f04:	20000090 	.word	0x20000090
     f08:	00005685 	.word	0x00005685
     f0c:	200001ac 	.word	0x200001ac

00000f10 <mutex_init>:
static void mutex_init(nrf_cc310_platform_mutex_t *mutex) {
     f10:	b510      	push	{r4, lr}
    if (mutex == NULL) {
     f12:	4604      	mov	r4, r0
     f14:	b918      	cbnz	r0, f1e <mutex_init+0xe>
        platform_abort_apis.abort_fn(
     f16:	4b14      	ldr	r3, [pc, #80]	; (f68 <mutex_init+0x58>)
     f18:	4814      	ldr	r0, [pc, #80]	; (f6c <mutex_init+0x5c>)
     f1a:	685b      	ldr	r3, [r3, #4]
     f1c:	4798      	blx	r3
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID &&
     f1e:	6863      	ldr	r3, [r4, #4]
     f20:	b9cb      	cbnz	r3, f56 <mutex_init+0x46>
     f22:	6823      	ldr	r3, [r4, #0]
     f24:	b9bb      	cbnz	r3, f56 <mutex_init+0x46>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
     f26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     f2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     f2e:	4621      	mov	r1, r4
     f30:	480f      	ldr	r0, [pc, #60]	; (f70 <mutex_init+0x60>)
     f32:	f001 fb9d 	bl	2670 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
     f36:	b908      	cbnz	r0, f3c <mutex_init+0x2c>
     f38:	6823      	ldr	r3, [r4, #0]
     f3a:	b91b      	cbnz	r3, f44 <mutex_init+0x34>
            platform_abort_apis.abort_fn(
     f3c:	4b0a      	ldr	r3, [pc, #40]	; (f68 <mutex_init+0x58>)
     f3e:	480d      	ldr	r0, [pc, #52]	; (f74 <mutex_init+0x64>)
     f40:	685b      	ldr	r3, [r3, #4]
     f42:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
     f44:	2214      	movs	r2, #20
     f46:	2100      	movs	r1, #0
     f48:	6820      	ldr	r0, [r4, #0]
     f4a:	f003 fd30 	bl	49ae <memset>
        mutex->flags |= NRF_CC310_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
     f4e:	6863      	ldr	r3, [r4, #4]
     f50:	f043 0302 	orr.w	r3, r3, #2
     f54:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
     f56:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
     f58:	f003 fe3e 	bl	4bd8 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC310_PLATFORM_MUTEX_MASK_IS_VALID;
     f5c:	6863      	ldr	r3, [r4, #4]
     f5e:	f043 0301 	orr.w	r3, r3, #1
     f62:	6063      	str	r3, [r4, #4]
}
     f64:	bd10      	pop	{r4, pc}
     f66:	bf00      	nop
     f68:	20000090 	.word	0x20000090
     f6c:	00005685 	.word	0x00005685
     f70:	200001ac 	.word	0x200001ac
     f74:	000056ab 	.word	0x000056ab

00000f78 <mutex_lock>:
static int32_t mutex_lock(nrf_cc310_platform_mutex_t *mutex) {
     f78:	b508      	push	{r3, lr}
    if(mutex == NULL) {
     f7a:	b168      	cbz	r0, f98 <mutex_lock+0x20>
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
     f7c:	6843      	ldr	r3, [r0, #4]
     f7e:	b173      	cbz	r3, f9e <mutex_lock+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
     f80:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
     f82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     f86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     f8a:	f001 fbcd 	bl	2728 <z_impl_k_mutex_lock>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_FAILED;
     f8e:	4b05      	ldr	r3, [pc, #20]	; (fa4 <mutex_lock+0x2c>)
    if (ret == 0) {
     f90:	2800      	cmp	r0, #0
        return NRF_CC310_PLATFORM_ERROR_MUTEX_FAILED;
     f92:	bf18      	it	ne
     f94:	4618      	movne	r0, r3
}
     f96:	bd08      	pop	{r3, pc}
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
     f98:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
     f9c:	e7fb      	b.n	f96 <mutex_lock+0x1e>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
     f9e:	4802      	ldr	r0, [pc, #8]	; (fa8 <mutex_lock+0x30>)
     fa0:	e7f9      	b.n	f96 <mutex_lock+0x1e>
     fa2:	bf00      	nop
     fa4:	ffff8fe9 	.word	0xffff8fe9
     fa8:	ffff8fea 	.word	0xffff8fea

00000fac <nrf_cc310_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc310_platform mutex APIs
 */
void nrf_cc310_platform_mutex_init(void)
{
     fac:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
     fae:	4906      	ldr	r1, [pc, #24]	; (fc8 <nrf_cc310_platform_mutex_init+0x1c>)
     fb0:	2340      	movs	r3, #64	; 0x40
     fb2:	2214      	movs	r2, #20
     fb4:	4805      	ldr	r0, [pc, #20]	; (fcc <nrf_cc310_platform_mutex_init+0x20>)
     fb6:	f003 fdf4 	bl	4ba2 <k_mem_slab_init>
            mutex_slab_buffer,
            sizeof(struct k_mutex),
            NUM_MUTEXES);

    nrf_cc310_platform_set_mutexes(&mutex_apis, &mutexes);
}
     fba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc310_platform_set_mutexes(&mutex_apis, &mutexes);
     fbe:	4904      	ldr	r1, [pc, #16]	; (fd0 <nrf_cc310_platform_mutex_init+0x24>)
     fc0:	4804      	ldr	r0, [pc, #16]	; (fd4 <nrf_cc310_platform_mutex_init+0x28>)
     fc2:	f002 bc03 	b.w	37cc <nrf_cc310_platform_set_mutexes>
     fc6:	bf00      	nop
     fc8:	200001c8 	.word	0x200001c8
     fcc:	200001ac 	.word	0x200001ac
     fd0:	00005208 	.word	0x00005208
     fd4:	000051f8 	.word	0x000051f8

00000fd8 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
     fd8:	4a09      	ldr	r2, [pc, #36]	; (1000 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
     fda:	490a      	ldr	r1, [pc, #40]	; (1004 <arch_swap+0x2c>)
	_current->arch.basepri = key;
     fdc:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
     fde:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
     fe0:	66d8      	str	r0, [r3, #108]	; 0x6c
	_current->arch.swap_return_value = _k_neg_eagain;
     fe2:	6719      	str	r1, [r3, #112]	; 0x70

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     fe4:	4908      	ldr	r1, [pc, #32]	; (1008 <arch_swap+0x30>)
     fe6:	684b      	ldr	r3, [r1, #4]
     fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
     fec:	604b      	str	r3, [r1, #4]
     fee:	2300      	movs	r3, #0
     ff0:	f383 8811 	msr	BASEPRI, r3
     ff4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
     ff8:	6893      	ldr	r3, [r2, #8]
}
     ffa:	6f18      	ldr	r0, [r3, #112]	; 0x70
     ffc:	4770      	bx	lr
     ffe:	bf00      	nop
    1000:	200007f8 	.word	0x200007f8
    1004:	000052a8 	.word	0x000052a8
    1008:	e000ed00 	.word	0xe000ed00

0000100c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    100c:	490f      	ldr	r1, [pc, #60]	; (104c <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
    100e:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1010:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1014:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1016:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    101a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    101e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1020:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1024:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1028:	4f09      	ldr	r7, [pc, #36]	; (1050 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    102a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    102e:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    1030:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    1032:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1034:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
    movs r3, #0
    1036:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1038:	66d3      	str	r3, [r2, #108]	; 0x6c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    103a:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    103e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    1042:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    1046:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    104a:	4770      	bx	lr
    ldr r1, =_kernel
    104c:	200007f8 	.word	0x200007f8
    ldr v4, =_SCS_ICSR
    1050:	e000ed04 	.word	0xe000ed04

00001054 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    1054:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1058:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    105a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    105e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1062:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1064:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1068:	2902      	cmp	r1, #2
    beq _oops
    106a:	d0ff      	beq.n	106c <_oops>

0000106c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    106c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    106e:	f003 fc0b 	bl	4888 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    1072:	bd01      	pop	{r0, pc}

00001074 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1074:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1076:	2b00      	cmp	r3, #0
    1078:	db08      	blt.n	108c <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    107a:	2201      	movs	r2, #1
    107c:	f000 001f 	and.w	r0, r0, #31
    1080:	fa02 f000 	lsl.w	r0, r2, r0
    1084:	4a02      	ldr	r2, [pc, #8]	; (1090 <arch_irq_enable+0x1c>)
    1086:	095b      	lsrs	r3, r3, #5
    1088:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    108c:	4770      	bx	lr
    108e:	bf00      	nop
    1090:	e000e100 	.word	0xe000e100

00001094 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1094:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1096:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
    1098:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    109c:	bfa8      	it	ge
    109e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
    10a2:	ea4f 1141 	mov.w	r1, r1, lsl #5
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    10a6:	bfb8      	it	lt
    10a8:	4b05      	ldrlt	r3, [pc, #20]	; (10c0 <z_arm_irq_priority_set+0x2c>)
    10aa:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    10ac:	bfab      	itete	ge
    10ae:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    10b2:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    10b6:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    10ba:	5419      	strblt	r1, [r3, r0]
}
    10bc:	4770      	bx	lr
    10be:	bf00      	nop
    10c0:	e000ed14 	.word	0xe000ed14

000010c4 <arch_new_thread>:
#ifdef CONFIG_INIT_STACKS
	memset(stack, 0xaa, stack_size);
#endif
#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)stack;
	thread->stack_info.size = stack_size;
    10c4:	e9c0 1218 	strd	r1, r2, [r0, #96]	; 0x60
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
    10c8:	440a      	add	r2, r1
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(Z_STACK_PTR_ALIGN(stackEnd -
    10ca:	3a20      	subs	r2, #32
    10cc:	f022 0207 	bic.w	r2, r2, #7
#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
    10d0:	6013      	str	r3, [r2, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
    10d2:	9b00      	ldr	r3, [sp, #0]
	pInitCtx->basic.pc &= 0xfffffffe;
    10d4:	4907      	ldr	r1, [pc, #28]	; (10f4 <arch_new_thread+0x30>)
	pInitCtx->basic.a2 = (u32_t)parameter1;
    10d6:	6053      	str	r3, [r2, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    10d8:	9b01      	ldr	r3, [sp, #4]
	pInitCtx->basic.pc &= 0xfffffffe;
    10da:	f021 0101 	bic.w	r1, r1, #1
	pInitCtx->basic.a3 = (u32_t)parameter2;
    10de:	6093      	str	r3, [r2, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    10e0:	9b02      	ldr	r3, [sp, #8]
	pInitCtx->basic.pc &= 0xfffffffe;
    10e2:	6191      	str	r1, [r2, #24]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    10e4:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	pInitCtx->basic.xpsr =
    10e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    10ea:	61d3      	str	r3, [r2, #28]
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (u32_t)pInitCtx;

	thread->arch.basepri = 0;
    10ec:	2300      	movs	r3, #0
	thread->callee_saved.psp = (u32_t)pInitCtx;
    10ee:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    10f0:	66c3      	str	r3, [r0, #108]	; 0x6c

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    10f2:	4770      	bx	lr
    10f4:	00004449 	.word	0x00004449

000010f8 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
    10f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    10fa:	461d      	mov	r5, r3
    10fc:	4606      	mov	r6, r0
    10fe:	460c      	mov	r4, r1
    1100:	4617      	mov	r7, r2
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    1102:	2300      	movs	r3, #0
    1104:	eee1 3a10 	vmsr	fpscr, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    1108:	f000 f9f4 	bl	14f4 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);

	_current = main_thread;
    110c:	4b08      	ldr	r3, [pc, #32]	; (1130 <arch_switch_to_main_thread+0x38>)
	start_of_main_stack =
    110e:	443c      	add	r4, r7
	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);
    1110:	f024 0407 	bic.w	r4, r4, #7
	_current = main_thread;
    1114:	609e      	str	r6, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1116:	4628      	mov	r0, r5
    1118:	f384 8809 	msr	PSP, r4
    111c:	2100      	movs	r1, #0
    111e:	b663      	cpsie	if
    1120:	f381 8811 	msr	BASEPRI, r1
    1124:	f3bf 8f6f 	isb	sy
    1128:	2200      	movs	r2, #0
    112a:	2300      	movs	r3, #0
    112c:	f003 f98c 	bl	4448 <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1130:	200007f8 	.word	0x200007f8

00001134 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1134:	4901      	ldr	r1, [pc, #4]	; (113c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1136:	2210      	movs	r2, #16
	str	r2, [r1]
    1138:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    113a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    113c:	e000ed10 	.word	0xe000ed10

00001140 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1140:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1142:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1144:	f380 8811 	msr	BASEPRI, r0
	isb
    1148:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    114c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1150:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1152:	b662      	cpsie	i
	isb
    1154:	f3bf 8f6f 	isb	sy

	bx	lr
    1158:	4770      	bx	lr
    115a:	bf00      	nop

0000115c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    115c:	bf30      	wfi
    b z_SysNmiOnReset
    115e:	f7ff bffd 	b.w	115c <z_SysNmiOnReset>
    1162:	bf00      	nop

00001164 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1164:	4a17      	ldr	r2, [pc, #92]	; (11c4 <z_arm_prep_c+0x60>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    1166:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1168:	4b17      	ldr	r3, [pc, #92]	; (11c8 <z_arm_prep_c+0x64>)
    116a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    116e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1170:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1174:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1178:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    117c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1180:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    1184:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1188:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    118c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR &= (~(FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk));
    1190:	4a0e      	ldr	r2, [pc, #56]	; (11cc <z_arm_prep_c+0x68>)
    1192:	6853      	ldr	r3, [r2, #4]
    1194:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    1198:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    119a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    119e:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    11a2:	2300      	movs	r3, #0
    11a4:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    11a8:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    11ac:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    11b0:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    11b4:	f001 f96c 	bl	2490 <z_bss_zero>
	z_data_copy();
    11b8:	f001 f974 	bl	24a4 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    11bc:	f000 f968 	bl	1490 <z_arm_interrupt_init>
	z_cstart();
    11c0:	f001 f9ae 	bl	2520 <z_cstart>
    11c4:	00000000 	.word	0x00000000
    11c8:	e000ed00 	.word	0xe000ed00
    11cc:	e000ef30 	.word	0xe000ef30

000011d0 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    11d0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    11d2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    11d4:	4a0b      	ldr	r2, [pc, #44]	; (1204 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    11d6:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    11d8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    11da:	bf1e      	ittt	ne
	movne	r1, #0
    11dc:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    11de:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    11e0:	f003 fcdd 	blne	4b9e <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    11e4:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    11e6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    11ea:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    11ee:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    11f2:	4905      	ldr	r1, [pc, #20]	; (1208 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    11f4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    11f6:	c909      	ldmia	r1!, {r0, r3}
#ifdef CONFIG_EXECUTION_BENCHMARKING
	push {r0, r3}	/* Save r0 and r3 into stack */
	bl read_timer_end_of_isr
	pop {r0, r3}	/* Restore r0 and r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    11f8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    11fa:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    11fe:	4903      	ldr	r1, [pc, #12]	; (120c <_isr_wrapper+0x3c>)
	bx r1
    1200:	4708      	bx	r1
    1202:	0000      	.short	0x0000
	ldr r2, =_kernel
    1204:	200007f8 	.word	0x200007f8
	ldr r1, =_sw_isr_table
    1208:	00004e94 	.word	0x00004e94
	ldr r1, =z_arm_int_exit
    120c:	00001451 	.word	0x00001451

00001210 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    1210:	f003 f9d0 	bl	45b4 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1214:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1216:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    121a:	4808      	ldr	r0, [pc, #32]	; (123c <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    121c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1220:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1222:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1226:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    122a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    122c:	4308      	orrs	r0, r1
    msr CONTROL, r0
    122e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1232:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1236:	f7ff ff95 	bl	1164 <z_arm_prep_c>
    123a:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    123c:	20000d98 	.word	0x20000d98

00001240 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1240:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1244:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
    1248:	4672      	mov	r2, lr

	push {r0, lr}
    124a:	b501      	push	{r0, lr}

	bl z_arm_fault
    124c:	f000 f86c 	bl	1328 <z_arm_fault>

	pop {r0, pc}
    1250:	bd01      	pop	{r0, pc}
    1252:	bf00      	nop

00001254 <mem_manage_fault.isra.2>:
	u32_t reason = K_ERR_CPU_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1254:	4b0c      	ldr	r3, [pc, #48]	; (1288 <mem_manage_fault.isra.2+0x34>)
    1256:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1258:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    125a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    125c:	0792      	lsls	r2, r2, #30
    125e:	d508      	bpl.n	1272 <mem_manage_fault.isra.2+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
    1260:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1262:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1264:	0612      	lsls	r2, r2, #24
    1266:	d504      	bpl.n	1272 <mem_manage_fault.isra.2+0x1e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
    1268:	b118      	cbz	r0, 1272 <mem_manage_fault.isra.2+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    126a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    126c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    1270:	629a      	str	r2, [r3, #40]	; 0x28

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    1272:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1274:	4b04      	ldr	r3, [pc, #16]	; (1288 <mem_manage_fault.isra.2+0x34>)
    1276:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1278:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    127a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    127c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    127e:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    1282:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    1284:	7008      	strb	r0, [r1, #0]

	return reason;
}
    1286:	4770      	bx	lr
    1288:	e000ed00 	.word	0xe000ed00

0000128c <bus_fault.isra.3>:
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    128c:	4b0d      	ldr	r3, [pc, #52]	; (12c4 <bus_fault.isra.3+0x38>)
    128e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1290:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1292:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1294:	0592      	lsls	r2, r2, #22
    1296:	d508      	bpl.n	12aa <bus_fault.isra.3+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1298:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    129a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    129c:	0412      	lsls	r2, r2, #16
    129e:	d504      	bpl.n	12aa <bus_fault.isra.3+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
    12a0:	b118      	cbz	r0, 12aa <bus_fault.isra.3+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    12a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    12a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    12a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
    12aa:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    12ac:	4b05      	ldr	r3, [pc, #20]	; (12c4 <bus_fault.isra.3+0x38>)
    12ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    12b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    12b2:	05d2      	lsls	r2, r2, #23
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    12b4:	bf58      	it	pl
    12b6:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    12b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    12ba:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    12be:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    12c0:	7008      	strb	r0, [r1, #0]

	return reason;
}
    12c2:	4770      	bx	lr
    12c4:	e000ed00 	.word	0xe000ed00

000012c8 <usage_fault.isra.4>:
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    12c8:	4b07      	ldr	r3, [pc, #28]	; (12e8 <usage_fault.isra.4+0x20>)

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;

	return reason;
}
    12ca:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    12cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    12ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    12d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    12d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    12d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    12d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    12d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    12da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    12dc:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    12e0:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    12e4:	629a      	str	r2, [r3, #40]	; 0x28
}
    12e6:	4770      	bx	lr
    12e8:	e000ed00 	.word	0xe000ed00

000012ec <secure_fault.isra.5>:
 */
static void secure_fault(const z_arch_esf_t *esf)
{
	PR_FAULT_INFO("***** SECURE FAULT *****");

	STORE_xFAR(sfar, SAU->SFAR);
    12ec:	4b0d      	ldr	r3, [pc, #52]	; (1324 <secure_fault.isra.5+0x38>)
    12ee:	699a      	ldr	r2, [r3, #24]
	if ((SAU->SFSR & SAU_SFSR_SFARVALID_Msk) != 0) {
    12f0:	695a      	ldr	r2, [r3, #20]
		PR_EXC("  Address: 0x%x", sfar);
	}

	/* bits are sticky: they stack and must be reset */
	if ((SAU->SFSR & SAU_SFSR_INVEP_Msk) != 0) {
    12f2:	695a      	ldr	r2, [r3, #20]
    12f4:	07d0      	lsls	r0, r2, #31
    12f6:	d40f      	bmi.n	1318 <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Invalid entry point");
	} else if ((SAU->SFSR & SAU_SFSR_INVIS_Msk) != 0) {
    12f8:	695a      	ldr	r2, [r3, #20]
    12fa:	0791      	lsls	r1, r2, #30
    12fc:	d40c      	bmi.n	1318 <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Invalid integrity signature");
	} else if ((SAU->SFSR & SAU_SFSR_INVER_Msk) != 0) {
    12fe:	695a      	ldr	r2, [r3, #20]
    1300:	0752      	lsls	r2, r2, #29
    1302:	d409      	bmi.n	1318 <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Invalid exception return");
	} else if ((SAU->SFSR & SAU_SFSR_AUVIOL_Msk) != 0) {
    1304:	695a      	ldr	r2, [r3, #20]
    1306:	0710      	lsls	r0, r2, #28
    1308:	d406      	bmi.n	1318 <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Attribution unit violation");
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
    130a:	695a      	ldr	r2, [r3, #20]
    130c:	06d1      	lsls	r1, r2, #27
    130e:	d403      	bmi.n	1318 <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Invalid transition");
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
    1310:	695a      	ldr	r2, [r3, #20]
    1312:	0692      	lsls	r2, r2, #26
		PR_FAULT_INFO("  Lazy state preservation");
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
    1314:	bf58      	it	pl
    1316:	695a      	ldrpl	r2, [r3, #20]
		PR_FAULT_INFO("  Lazy state error");
	}

	/* clear SFSR sticky bits */
	SAU->SFSR |= 0xFF;
    1318:	695a      	ldr	r2, [r3, #20]
    131a:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    131e:	615a      	str	r2, [r3, #20]
}
    1320:	4770      	bx	lr
    1322:	bf00      	nop
    1324:	e000edd0 	.word	0xe000edd0

00001328 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
    1328:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    132a:	4b41      	ldr	r3, [pc, #260]	; (1430 <z_arm_fault+0x108>)
{
    132c:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    132e:	685b      	ldr	r3, [r3, #4]
    1330:	2500      	movs	r5, #0
    1332:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1336:	f385 8811 	msr	BASEPRI, r5
    133a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    133e:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
    1342:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
    1346:	d11e      	bne.n	1386 <z_arm_fault+0x5e>
	if ((exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) == 0U) {
    1348:	f012 0401 	ands.w	r4, r2, #1
    134c:	d01a      	beq.n	1384 <z_arm_fault+0x5c>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    134e:	0656      	lsls	r6, r2, #25
    1350:	f002 0408 	and.w	r4, r2, #8
    1354:	d467      	bmi.n	1426 <z_arm_fault+0xfe>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    1356:	f082 0204 	eor.w	r2, r2, #4
    135a:	f3c2 0580 	ubfx	r5, r2, #2, #1
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    135e:	b164      	cbz	r4, 137a <z_arm_fault+0x52>
  __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
    1360:	f3ef 8689 	mrs	r6, PSP_NS
	*recoverable = false;
    1364:	2200      	movs	r2, #0
	switch (fault) {
    1366:	3b03      	subs	r3, #3
	*recoverable = false;
    1368:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    136c:	2b04      	cmp	r3, #4
    136e:	d84b      	bhi.n	1408 <z_arm_fault+0xe0>
    1370:	e8df f003 	tbb	[pc, r3]
    1374:	41504c0b 	.word	0x41504c0b
    1378:	48          	.byte	0x48
    1379:	00          	.byte	0x00
  __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
    137a:	f3ef 8688 	mrs	r6, MSP_NS
  return(result);
    137e:	e7f1      	b.n	1364 <z_arm_fault+0x3c>
			ptr_esf =  (z_arch_esf_t *)psp;
    1380:	460e      	mov	r6, r1
    1382:	e7ef      	b.n	1364 <z_arm_fault+0x3c>
	*nested_exc = false;
    1384:	4625      	mov	r5, r4
		return NULL;
    1386:	462e      	mov	r6, r5
    1388:	e7ec      	b.n	1364 <z_arm_fault+0x3c>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    138a:	4b29      	ldr	r3, [pc, #164]	; (1430 <z_arm_fault+0x108>)
    138c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    138e:	0792      	lsls	r2, r2, #30
    1390:	d43a      	bmi.n	1408 <z_arm_fault+0xe0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1392:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    1394:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    1398:	d008      	beq.n	13ac <z_arm_fault+0x84>
		if (SCB_MMFSR != 0) {
    139a:	3328      	adds	r3, #40	; 0x28
    139c:	781b      	ldrb	r3, [r3, #0]
    139e:	b1eb      	cbz	r3, 13dc <z_arm_fault+0xb4>
			reason = mem_manage_fault(esf, 1, recoverable);
    13a0:	2001      	movs	r0, #1
    13a2:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    13a6:	f7ff ff55 	bl	1254 <mem_manage_fault.isra.2>
    13aa:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    13ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    13b0:	b993      	cbnz	r3, 13d8 <z_arm_fault+0xb0>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    13b2:	2220      	movs	r2, #32
    13b4:	4631      	mov	r1, r6
    13b6:	a802      	add	r0, sp, #8
    13b8:	f003 facf 	bl	495a <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    13bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    13be:	b36d      	cbz	r5, 141c <z_arm_fault+0xf4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    13c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
    13c4:	b922      	cbnz	r2, 13d0 <z_arm_fault+0xa8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    13c6:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    13ca:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    13ce:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    13d0:	a902      	add	r1, sp, #8
    13d2:	4620      	mov	r0, r4
    13d4:	f003 fa56 	bl	4884 <z_arm_fatal_error>
}
    13d8:	b00b      	add	sp, #44	; 0x2c
    13da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (SCB_BFSR != 0) {
    13dc:	4b15      	ldr	r3, [pc, #84]	; (1434 <z_arm_fault+0x10c>)
    13de:	781b      	ldrb	r3, [r3, #0]
    13e0:	b12b      	cbz	r3, 13ee <z_arm_fault+0xc6>
			reason = bus_fault(esf, 1, recoverable);
    13e2:	2001      	movs	r0, #1
    13e4:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    13e8:	f7ff ff50 	bl	128c <bus_fault.isra.3>
    13ec:	e7dd      	b.n	13aa <z_arm_fault+0x82>
		} else if (SCB_UFSR != 0) {
    13ee:	4b12      	ldr	r3, [pc, #72]	; (1438 <z_arm_fault+0x110>)
    13f0:	881f      	ldrh	r7, [r3, #0]
    13f2:	b2bf      	uxth	r7, r7
    13f4:	b117      	cbz	r7, 13fc <z_arm_fault+0xd4>
		reason = usage_fault(esf);
    13f6:	f7ff ff67 	bl	12c8 <usage_fault.isra.4>
    13fa:	e7d6      	b.n	13aa <z_arm_fault+0x82>
		} else if (SAU->SFSR != 0) {
    13fc:	4b0f      	ldr	r3, [pc, #60]	; (143c <z_arm_fault+0x114>)
    13fe:	695c      	ldr	r4, [r3, #20]
    1400:	2c00      	cmp	r4, #0
    1402:	d0d3      	beq.n	13ac <z_arm_fault+0x84>
		secure_fault(esf);
    1404:	f7ff ff72 	bl	12ec <secure_fault.isra.5>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    1408:	2400      	movs	r4, #0
    140a:	e7cf      	b.n	13ac <z_arm_fault+0x84>
		reason = mem_manage_fault(esf, 0, recoverable);
    140c:	f10d 0107 	add.w	r1, sp, #7
    1410:	2000      	movs	r0, #0
    1412:	e7c8      	b.n	13a6 <z_arm_fault+0x7e>
		reason = bus_fault(esf, 0, recoverable);
    1414:	f10d 0107 	add.w	r1, sp, #7
    1418:	2000      	movs	r0, #0
    141a:	e7e5      	b.n	13e8 <z_arm_fault+0xc0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    141c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1420:	f023 0301 	bic.w	r3, r3, #1
    1424:	e7d3      	b.n	13ce <z_arm_fault+0xa6>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1426:	2c00      	cmp	r4, #0
    1428:	d1aa      	bne.n	1380 <z_arm_fault+0x58>
			ptr_esf = (z_arch_esf_t *)msp;
    142a:	4606      	mov	r6, r0
			*nested_exc = true;
    142c:	2501      	movs	r5, #1
    142e:	e799      	b.n	1364 <z_arm_fault+0x3c>
    1430:	e000ed00 	.word	0xe000ed00
    1434:	e000ed29 	.word	0xe000ed29
    1438:	e000ed2a 	.word	0xe000ed2a
    143c:	e000edd0 	.word	0xe000edd0

00001440 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1440:	4a02      	ldr	r2, [pc, #8]	; (144c <z_arm_fault_init+0xc>)
    1442:	6953      	ldr	r3, [r2, #20]
    1444:	f043 0310 	orr.w	r3, r3, #16
    1448:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    144a:	4770      	bx	lr
    144c:	e000ed00 	.word	0xe000ed00

00001450 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1450:	4b04      	ldr	r3, [pc, #16]	; (1464 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    1452:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1454:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    1456:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1458:	d003      	beq.n	1462 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    145a:	4903      	ldr	r1, [pc, #12]	; (1468 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    145c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1460:	600a      	str	r2, [r1, #0]

00001462 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1462:	4770      	bx	lr
	ldr r3, =_kernel
    1464:	200007f8 	.word	0x200007f8
	ldr r1, =_SCS_ICSR
    1468:	e000ed04 	.word	0xe000ed04

0000146c <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    146c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1470:	4905      	ldr	r1, [pc, #20]	; (1488 <sys_arch_reboot+0x1c>)
    1472:	4b06      	ldr	r3, [pc, #24]	; (148c <sys_arch_reboot+0x20>)
    1474:	68ca      	ldr	r2, [r1, #12]
    1476:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    147a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    147c:	60cb      	str	r3, [r1, #12]
    147e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    1482:	bf00      	nop
    1484:	e7fd      	b.n	1482 <sys_arch_reboot+0x16>
    1486:	bf00      	nop
    1488:	e000ed00 	.word	0xe000ed00
    148c:	05fa0004 	.word	0x05fa0004

00001490 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1490:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1492:	2120      	movs	r1, #32
    1494:	4803      	ldr	r0, [pc, #12]	; (14a4 <z_arm_interrupt_init+0x14>)
    1496:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1498:	3301      	adds	r3, #1
    149a:	2b41      	cmp	r3, #65	; 0x41
    149c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    14a0:	d1f9      	bne.n	1496 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    14a2:	4770      	bx	lr
    14a4:	e000e100 	.word	0xe000e100

000014a8 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    14a8:	b538      	push	{r3, r4, r5, lr}
    14aa:	4605      	mov	r5, r0
	__asm__ volatile(
    14ac:	f04f 0320 	mov.w	r3, #32
    14b0:	f3ef 8411 	mrs	r4, BASEPRI
    14b4:	f383 8811 	msr	BASEPRI, r3
    14b8:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    14bc:	f001 fb9a 	bl	2bf4 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    14c0:	4b0a      	ldr	r3, [pc, #40]	; (14ec <z_impl_k_thread_abort+0x44>)
    14c2:	689b      	ldr	r3, [r3, #8]
    14c4:	42ab      	cmp	r3, r5
    14c6:	d10b      	bne.n	14e0 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    14c8:	4b09      	ldr	r3, [pc, #36]	; (14f0 <z_impl_k_thread_abort+0x48>)
    14ca:	685a      	ldr	r2, [r3, #4]
    14cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
    14d0:	b912      	cbnz	r2, 14d8 <z_impl_k_thread_abort+0x30>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
    14d2:	4620      	mov	r0, r4
    14d4:	f7ff fd80 	bl	fd8 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    14d8:	685a      	ldr	r2, [r3, #4]
    14da:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    14de:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    14e0:	4620      	mov	r0, r4
}
    14e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    14e6:	f003 bb89 	b.w	4bfc <z_reschedule_irqlock>
    14ea:	bf00      	nop
    14ec:	200007f8 	.word	0x200007f8
    14f0:	e000ed00 	.word	0xe000ed00

000014f4 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    14f4:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    14f6:	4b0e      	ldr	r3, [pc, #56]	; (1530 <z_arm_configure_static_mpu_regions+0x3c>)
{
    14f8:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
    14fa:	9302      	str	r3, [sp, #8]
    14fc:	4b0d      	ldr	r3, [pc, #52]	; (1534 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    14fe:	4c0e      	ldr	r4, [pc, #56]	; (1538 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
    1500:	9303      	str	r3, [sp, #12]
    1502:	4b0e      	ldr	r3, [pc, #56]	; (153c <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1504:	4a0e      	ldr	r2, [pc, #56]	; (1540 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
    1506:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
    1508:	ab02      	add	r3, sp, #8
    150a:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    150c:	a801      	add	r0, sp, #4
    150e:	4623      	mov	r3, r4
    1510:	2101      	movs	r1, #1
    1512:	f000 f903 	bl	171c <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
    1516:	2300      	movs	r3, #0
    1518:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    151a:	4b0a      	ldr	r3, [pc, #40]	; (1544 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    151c:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    151e:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    1520:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
    1522:	9305      	str	r3, [sp, #20]
    1524:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    1526:	f000 f903 	bl	1730 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    152a:	b008      	add	sp, #32
    152c:	bd10      	pop	{r4, pc}
    152e:	bf00      	nop
    1530:	20000000 	.word	0x20000000
    1534:	00000000 	.word	0x00000000
    1538:	20010000 	.word	0x20010000
    153c:	00010006 	.word	0x00010006
    1540:	20000000 	.word	0x20000000
    1544:	20000180 	.word	0x20000180

00001548 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
    1548:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    154a:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    154c:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    154e:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    1552:	f004 031f 	and.w	r3, r4, #31
    1556:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    1558:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    155a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    155c:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    1560:	4904      	ldr	r1, [pc, #16]	; (1574 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    1562:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    1566:	f043 0301 	orr.w	r3, r3, #1
    156a:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    156c:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    156e:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    1570:	bd10      	pop	{r4, pc}
    1572:	bf00      	nop
    1574:	e000ed90 	.word	0xe000ed90

00001578 <mpu_configure_regions_and_partition.constprop.1>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    1578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    157c:	4680      	mov	r8, r0
    157e:	4689      	mov	r9, r1
    1580:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    1582:	2700      	movs	r7, #0
	MPU->RNR = index;
    1584:	4d48      	ldr	r5, [pc, #288]	; (16a8 <mpu_configure_regions_and_partition.constprop.1+0x130>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    1586:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    1588:	454f      	cmp	r7, r9
    158a:	da07      	bge.n	159c <mpu_configure_regions_and_partition.constprop.1+0x24>
		if (regions[i]->size == 0U) {
    158c:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
    1590:	685e      	ldr	r6, [r3, #4]
    1592:	b3c6      	cbz	r6, 1606 <mpu_configure_regions_and_partition.constprop.1+0x8e>
		&&
    1594:	2e1f      	cmp	r6, #31
    1596:	d805      	bhi.n	15a4 <mpu_configure_regions_and_partition.constprop.1+0x2c>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    1598:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    159c:	4620      	mov	r0, r4
    159e:	b005      	add	sp, #20
    15a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		&&
    15a4:	06f2      	lsls	r2, r6, #27
    15a6:	d1f7      	bne.n	1598 <mpu_configure_regions_and_partition.constprop.1+0x20>
		((part->start &
    15a8:	f8d3 a000 	ldr.w	sl, [r3]
		&&
    15ac:	f01a 0f1f 	tst.w	sl, #31
    15b0:	d1f2      	bne.n	1598 <mpu_configure_regions_and_partition.constprop.1+0x20>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    15b2:	4650      	mov	r0, sl
    15b4:	f003 f995 	bl	48e2 <arm_cmse_mpu_region_get>
    15b8:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    15ba:	eb06 000a 	add.w	r0, r6, sl
    15be:	3801      	subs	r0, #1
    15c0:	f003 f98f 	bl	48e2 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    15c4:	4583      	cmp	fp, r0
    15c6:	d1e7      	bne.n	1598 <mpu_configure_regions_and_partition.constprop.1+0x20>
		if ((u_reg_index == -EINVAL) ||
    15c8:	f11b 0f16 	cmn.w	fp, #22
    15cc:	d0e4      	beq.n	1598 <mpu_configure_regions_and_partition.constprop.1+0x20>
			(u_reg_index > (reg_index - 1))) {
    15ce:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    15d0:	455b      	cmp	r3, fp
    15d2:	dbe1      	blt.n	1598 <mpu_configure_regions_and_partition.constprop.1+0x20>
	MPU->RNR = index;
    15d4:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    15d8:	68e8      	ldr	r0, [r5, #12]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    15da:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
	MPU->RNR = index;
    15de:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    15e2:	692e      	ldr	r6, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    15e4:	f020 001f 	bic.w	r0, r0, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    15e8:	e9d1 3200 	ldrd	r3, r2, [r1]
    15ec:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
    15ee:	4298      	cmp	r0, r3
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    15f0:	f046 061f 	orr.w	r6, r6, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    15f4:	f102 3aff 	add.w	sl, r2, #4294967295	; 0xffffffff
		if ((regions[i]->start == u_reg_base) &&
    15f8:	d118      	bne.n	162c <mpu_configure_regions_and_partition.constprop.1+0xb4>
    15fa:	4556      	cmp	r6, sl
    15fc:	d105      	bne.n	160a <mpu_configure_regions_and_partition.constprop.1+0x92>
			mpu_configure_region(u_reg_index, regions[i]);
    15fe:	fa5f f08b 	uxtb.w	r0, fp
    1602:	f003 f94c 	bl	489e <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    1606:	3701      	adds	r7, #1
    1608:	e7be      	b.n	1588 <mpu_configure_regions_and_partition.constprop.1+0x10>
	MPU->RNR = index;
    160a:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    160e:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    1610:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    1614:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    1618:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    161a:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
    161c:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
    161e:	f003 f93e 	bl	489e <mpu_configure_region>
			if (reg_index == -EINVAL) {
    1622:	f110 0f16 	cmn.w	r0, #22
    1626:	d0b7      	beq.n	1598 <mpu_configure_regions_and_partition.constprop.1+0x20>
			reg_index++;
    1628:	1c44      	adds	r4, r0, #1
    162a:	e7ec      	b.n	1606 <mpu_configure_regions_and_partition.constprop.1+0x8e>
	MPU->RNR = index;
    162c:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    1630:	692a      	ldr	r2, [r5, #16]
    1632:	3b01      	subs	r3, #1
    1634:	f023 031f 	bic.w	r3, r3, #31
    1638:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    163c:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    163e:	4556      	cmp	r6, sl
    1640:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    1642:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
    1644:	d0eb      	beq.n	161e <mpu_configure_regions_and_partition.constprop.1+0xa6>
				mpu_configure_region(reg_index, regions[i]);
    1646:	f003 f92a 	bl	489e <mpu_configure_region>
			if (reg_index == -EINVAL) {
    164a:	f110 0f16 	cmn.w	r0, #22
    164e:	d0a3      	beq.n	1598 <mpu_configure_regions_and_partition.constprop.1+0x20>
	MPU->RNR = index;
    1650:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    1654:	68ea      	ldr	r2, [r5, #12]
    1656:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
    165a:	3e01      	subs	r6, #1
	attr->rbar = MPU->RBAR &
    165c:	f362 0304 	bfi	r3, r2, #0, #5
    1660:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    1664:	692b      	ldr	r3, [r5, #16]
    1666:	f89d 2008 	ldrb.w	r2, [sp, #8]
    166a:	085b      	lsrs	r3, r3, #1
    166c:	f363 1247 	bfi	r2, r3, #5, #3
    1670:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
    1674:	f858 2027 	ldr.w	r2, [r8, r7, lsl #2]
			reg_index++;
    1678:	3001      	adds	r0, #1
			fill_region.base = regions[i]->start +
    167a:	e9d2 3200 	ldrd	r3, r2, [r2]
    167e:	4413      	add	r3, r2
    1680:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
    1682:	f023 031f 	bic.w	r3, r3, #31
    1686:	441e      	add	r6, r3
    1688:	eba6 060a 	sub.w	r6, r6, sl
    168c:	b2c4      	uxtb	r4, r0
    168e:	f026 061f 	bic.w	r6, r6, #31

static int region_allocate_and_init(const u8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
    1692:	2c0f      	cmp	r4, #15
			fill_region.attr.r_limit =
    1694:	9603      	str	r6, [sp, #12]
    1696:	f63f af7f 	bhi.w	1598 <mpu_configure_regions_and_partition.constprop.1+0x20>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    169a:	4620      	mov	r0, r4
    169c:	4669      	mov	r1, sp
    169e:	f7ff ff53 	bl	1548 <region_init>
			reg_index++;
    16a2:	3401      	adds	r4, #1
    16a4:	e7af      	b.n	1606 <mpu_configure_regions_and_partition.constprop.1+0x8e>
    16a6:	bf00      	nop
    16a8:	e000ed90 	.word	0xe000ed90

000016ac <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    16ac:	2205      	movs	r2, #5
    16ae:	4b03      	ldr	r3, [pc, #12]	; (16bc <arm_core_mpu_enable+0x10>)
    16b0:	605a      	str	r2, [r3, #4]
    16b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    16b6:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    16ba:	4770      	bx	lr
    16bc:	e000ed90 	.word	0xe000ed90

000016c0 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    16c0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    16c4:	2200      	movs	r2, #0
    16c6:	4b01      	ldr	r3, [pc, #4]	; (16cc <arm_core_mpu_disable+0xc>)
    16c8:	605a      	str	r2, [r3, #4]
}
    16ca:	4770      	bx	lr
    16cc:	e000ed90 	.word	0xe000ed90

000016d0 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
    16d0:	b570      	push	{r4, r5, r6, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    16d2:	4d0e      	ldr	r5, [pc, #56]	; (170c <arm_mpu_init+0x3c>)
    16d4:	682e      	ldr	r6, [r5, #0]
    16d6:	2e10      	cmp	r6, #16
    16d8:	d815      	bhi.n	1706 <arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    16da:	2400      	movs	r4, #0
	arm_core_mpu_disable();
    16dc:	f7ff fff0 	bl	16c0 <arm_core_mpu_disable>
	MPU->MAIR0 =
    16e0:	4b0b      	ldr	r3, [pc, #44]	; (1710 <arm_mpu_init+0x40>)
    16e2:	4a0c      	ldr	r2, [pc, #48]	; (1714 <arm_mpu_init+0x44>)
    16e4:	631a      	str	r2, [r3, #48]	; 0x30
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    16e6:	42a6      	cmp	r6, r4
    16e8:	d105      	bne.n	16f6 <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    16ea:	4b0b      	ldr	r3, [pc, #44]	; (1718 <arm_mpu_init+0x48>)
    16ec:	701e      	strb	r6, [r3, #0]


	arm_core_mpu_enable();
    16ee:	f7ff ffdd 	bl	16ac <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    16f2:	2000      	movs	r0, #0
}
    16f4:	bd70      	pop	{r4, r5, r6, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    16f6:	6869      	ldr	r1, [r5, #4]
    16f8:	4620      	mov	r0, r4
    16fa:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    16fe:	f7ff ff23 	bl	1548 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1702:	3401      	adds	r4, #1
    1704:	e7ef      	b.n	16e6 <arm_mpu_init+0x16>
		return -1;
    1706:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    170a:	e7f3      	b.n	16f4 <arm_mpu_init+0x24>
    170c:	0000521c 	.word	0x0000521c
    1710:	e000ed90 	.word	0xe000ed90
    1714:	0044ffaa 	.word	0x0044ffaa
    1718:	20000854 	.word	0x20000854

0000171c <arm_core_mpu_configure_static_mpu_regions>:
{
    171c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    171e:	4c03      	ldr	r4, [pc, #12]	; (172c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    1720:	7822      	ldrb	r2, [r4, #0]
    1722:	f7ff ff29 	bl	1578 <mpu_configure_regions_and_partition.constprop.1>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1726:	7020      	strb	r0, [r4, #0]
}
    1728:	bd10      	pop	{r4, pc}
    172a:	bf00      	nop
    172c:	20000854 	.word	0x20000854

00001730 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    1730:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1734:	4c25      	ldr	r4, [pc, #148]	; (17cc <arm_core_mpu_mark_areas_for_dynamic_regions+0x9c>)
    1736:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1738:	4680      	mov	r8, r0
    173a:	2700      	movs	r7, #0
    173c:	46a1      	mov	r9, r4
	attr->rbar = MPU->RBAR &
    173e:	f04f 0b14 	mov.w	fp, #20
	MPU->RNR = index;
    1742:	4d23      	ldr	r5, [pc, #140]	; (17d0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1744:	4557      	cmp	r7, sl
    1746:	da1a      	bge.n	177e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    1748:	f8d8 3004 	ldr.w	r3, [r8, #4]
    174c:	9301      	str	r3, [sp, #4]
    174e:	2b00      	cmp	r3, #0
    1750:	d036      	beq.n	17c0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x90>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    1752:	f8d8 1000 	ldr.w	r1, [r8]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1756:	4608      	mov	r0, r1
    1758:	9100      	str	r1, [sp, #0]
    175a:	f003 f8c2 	bl	48e2 <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    175e:	e9dd 1300 	ldrd	r1, r3, [sp]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1762:	4606      	mov	r6, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1764:	1858      	adds	r0, r3, r1
    1766:	3801      	subs	r0, #1
    1768:	f003 f8bb 	bl	48e2 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    176c:	4286      	cmp	r6, r0
    176e:	4a19      	ldr	r2, [pc, #100]	; (17d4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
    1770:	d008      	beq.n	1784 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    1772:	2314      	movs	r3, #20
    1774:	435f      	muls	r7, r3
    1776:	f06f 0315 	mvn.w	r3, #21
    177a:	f849 3007 	str.w	r3, [r9, r7]
}
    177e:	b003      	add	sp, #12
    1780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    1784:	f116 0f16 	cmn.w	r6, #22
		dyn_reg_info[i].index =
    1788:	6026      	str	r6, [r4, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    178a:	d0f8      	beq.n	177e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    178c:	7813      	ldrb	r3, [r2, #0]
    178e:	42b3      	cmp	r3, r6
    1790:	ddf5      	ble.n	177e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
    1792:	fb0b 9307 	mla	r3, fp, r7, r9
	MPU->RNR = index;
    1796:	60ae      	str	r6, [r5, #8]
	MPU->RNR = index;
    1798:	60ae      	str	r6, [r5, #8]
	attr->rbar = MPU->RBAR &
    179a:	68e8      	ldr	r0, [r5, #12]
    179c:	7b19      	ldrb	r1, [r3, #12]
    179e:	f360 0104 	bfi	r1, r0, #0, #5
    17a2:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    17a4:	6929      	ldr	r1, [r5, #16]
    17a6:	7b18      	ldrb	r0, [r3, #12]
    17a8:	0849      	lsrs	r1, r1, #1
    17aa:	f361 1047 	bfi	r0, r1, #5, #3
    17ae:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    17b0:	68eb      	ldr	r3, [r5, #12]
    17b2:	f023 031f 	bic.w	r3, r3, #31
    17b6:	6063      	str	r3, [r4, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    17b8:	692b      	ldr	r3, [r5, #16]
    17ba:	f023 031f 	bic.w	r3, r3, #31
    17be:	6123      	str	r3, [r4, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    17c0:	3701      	adds	r7, #1
    17c2:	3414      	adds	r4, #20
    17c4:	f108 080c 	add.w	r8, r8, #12
    17c8:	e7bc      	b.n	1744 <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
    17ca:	bf00      	nop
    17cc:	200006c8 	.word	0x200006c8
    17d0:	e000ed90 	.word	0xe000ed90
    17d4:	20000854 	.word	0x20000854

000017d8 <tz_nonsecure_state_setup>:
}
#endif /* CONFIG_ARMV8_M_MAINLINE */

void tz_nonsecure_state_setup(const tz_nonsecure_setup_conf_t *p_ns_conf)
{
	configure_nonsecure_vtor_offset(p_ns_conf->vtor_ns);
    17d8:	6882      	ldr	r2, [r0, #8]
	SCB_NS->VTOR = vtor_ns;
    17da:	4b0c      	ldr	r3, [pc, #48]	; (180c <tz_nonsecure_state_setup+0x34>)
    17dc:	609a      	str	r2, [r3, #8]
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
    17de:	6803      	ldr	r3, [r0, #0]
    17e0:	f383 8888 	msr	MSP_NS, r3
  __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
    17e4:	6843      	ldr	r3, [r0, #4]
    17e6:	f383 8889 	msr	PSP_NS, r3
	configure_nonsecure_psp(p_ns_conf->psp_ns);
	/* Select which stack-pointer to use (MSP or PSP) and
	 * the privilege level for thread mode.
	 */
	configure_nonsecure_control(p_ns_conf->control_ns.spsel,
		p_ns_conf->control_ns.npriv);
    17ea:	7b02      	ldrb	r2, [r0, #12]
    17ec:	f002 0101 	and.w	r1, r2, #1
  __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
    17f0:	f3ef 8394 	mrs	r3, CONTROL_NS
	control_ns &= ~(CONTROL_SPSEL_Msk | CONTROL_nPRIV_Msk);
    17f4:	f023 0303 	bic.w	r3, r3, #3
	if (spsel_ns) {
    17f8:	0792      	lsls	r2, r2, #30
		control_ns |= CONTROL_SPSEL_Msk;
    17fa:	bf48      	it	mi
    17fc:	f043 0302 	orrmi.w	r3, r3, #2
	if (npriv_ns) {
    1800:	b109      	cbz	r1, 1806 <tz_nonsecure_state_setup+0x2e>
		control_ns |= CONTROL_nPRIV_Msk;
    1802:	f043 0301 	orr.w	r3, r3, #1
  __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
    1806:	f383 8894 	msr	CONTROL_NS, r3
}
    180a:	4770      	bx	lr
    180c:	e002ed00 	.word	0xe002ed00

00001810 <tz_nbanked_exception_target_state_set>:

void tz_nbanked_exception_target_state_set(int secure_state)
{
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1810:	4a08      	ldr	r2, [pc, #32]	; (1834 <tz_nbanked_exception_target_state_set+0x24>)
    1812:	68d3      	ldr	r3, [r2, #12]
	if (secure_state) {
    1814:	b148      	cbz	r0, 182a <tz_nbanked_exception_target_state_set+0x1a>
		aircr_payload &= ~(SCB_AIRCR_BFHFNMINS_Msk);
    1816:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    181a:	041b      	lsls	r3, r3, #16
    181c:	0c1b      	lsrs	r3, r3, #16
	} else {
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    181e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    1822:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
    1826:	60d3      	str	r3, [r2, #12]
}
    1828:	4770      	bx	lr
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    182a:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
    182c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1830:	e7f5      	b.n	181e <tz_nbanked_exception_target_state_set+0xe>
    1832:	bf00      	nop
    1834:	e000ed00 	.word	0xe000ed00

00001838 <tz_nonsecure_exception_prio_config>:

void tz_nonsecure_exception_prio_config(int secure_boost)
{
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1838:	4a08      	ldr	r2, [pc, #32]	; (185c <tz_nonsecure_exception_prio_config+0x24>)
    183a:	68d3      	ldr	r3, [r2, #12]
	if (secure_boost) {
    183c:	b140      	cbz	r0, 1850 <tz_nonsecure_exception_prio_config+0x18>
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    183e:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_PRIS_Msk;
    1840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	} else {
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    1844:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    1848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
    184c:	60d3      	str	r3, [r2, #12]
}
    184e:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
    1850:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1854:	041b      	lsls	r3, r3, #16
    1856:	0c1b      	lsrs	r3, r3, #16
    1858:	e7f4      	b.n	1844 <tz_nonsecure_exception_prio_config+0xc>
    185a:	bf00      	nop
    185c:	e000ed00 	.word	0xe000ed00

00001860 <tz_nonsecure_system_reset_req_block>:

void tz_nonsecure_system_reset_req_block(int block)
{
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1860:	4a08      	ldr	r2, [pc, #32]	; (1884 <tz_nonsecure_system_reset_req_block+0x24>)
    1862:	68d3      	ldr	r3, [r2, #12]
	if (block) {
    1864:	b140      	cbz	r0, 1878 <tz_nonsecure_system_reset_req_block+0x18>
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1866:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_SYSRESETREQS_Msk;
    1868:	f043 0308 	orr.w	r3, r3, #8
	} else {
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
	}
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    186c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    1870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
    1874:	60d3      	str	r3, [r2, #12]
}
    1876:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
    1878:	f023 0308 	bic.w	r3, r3, #8
    187c:	041b      	lsls	r3, r3, #16
    187e:	0c1b      	lsrs	r3, r3, #16
    1880:	e7f4      	b.n	186c <tz_nonsecure_system_reset_req_block+0xc>
    1882:	bf00      	nop
    1884:	e000ed00 	.word	0xe000ed00

00001888 <tz_nonsecure_fpu_access_enable>:

#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
void tz_nonsecure_fpu_access_enable(void)
{
	SCB->NSACR |=
    1888:	4a03      	ldr	r2, [pc, #12]	; (1898 <tz_nonsecure_fpu_access_enable+0x10>)
    188a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    188e:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    1892:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		(1UL << SCB_NSACR_CP10_Pos) | (1UL << SCB_NSACR_CP11_Pos);
}
    1896:	4770      	bx	lr
    1898:	e000ed00 	.word	0xe000ed00

0000189c <tz_sau_configure>:
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

void tz_sau_configure(int enable, int allns)
{
	if (enable) {
    189c:	4b08      	ldr	r3, [pc, #32]	; (18c0 <tz_sau_configure+0x24>)
  \brief   Enable SAU
  \details Enables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Enable(void)
{
    SAU->CTRL |=  (SAU_CTRL_ENABLE_Msk);
    189e:	681a      	ldr	r2, [r3, #0]
    18a0:	b118      	cbz	r0, 18aa <tz_sau_configure+0xe>
    18a2:	f042 0201 	orr.w	r2, r2, #1
	} else {
		TZ_SAU_Disable();
		if (allns) {
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
		} else {
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
    18a6:	601a      	str	r2, [r3, #0]
		}
	}
}
    18a8:	4770      	bx	lr
  \brief   Disable SAU
  \details Disables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Disable(void)
{
    SAU->CTRL &= ~(SAU_CTRL_ENABLE_Msk);
    18aa:	f022 0201 	bic.w	r2, r2, #1
    18ae:	601a      	str	r2, [r3, #0]
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
    18b0:	681a      	ldr	r2, [r3, #0]
		if (allns) {
    18b2:	b111      	cbz	r1, 18ba <tz_sau_configure+0x1e>
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
    18b4:	f042 0202 	orr.w	r2, r2, #2
    18b8:	e7f5      	b.n	18a6 <tz_sau_configure+0xa>
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
    18ba:	f022 0202 	bic.w	r2, r2, #2
    18be:	e7f2      	b.n	18a6 <tz_sau_configure+0xa>
    18c0:	e000edd0 	.word	0xe000edd0

000018c4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    18c4:	4b01      	ldr	r3, [pc, #4]	; (18cc <__stdout_hook_install+0x8>)
    18c6:	6018      	str	r0, [r3, #0]
}
    18c8:	4770      	bx	lr
    18ca:	bf00      	nop
    18cc:	20000024 	.word	0x20000024

000018d0 <thingy91_board_init>:

	return 0;
}

static int thingy91_board_init(struct device *dev)
{
    18d0:	b508      	push	{r3, lr}
	err = adp536x_init(ADP536X_I2C_DEV_NAME);
    18d2:	4812      	ldr	r0, [pc, #72]	; (191c <thingy91_board_init+0x4c>)
    18d4:	f7ff f896 	bl	a04 <adp536x_init>
	if (err) {
    18d8:	b9f0      	cbnz	r0, 1918 <thingy91_board_init+0x48>
	err = adp536x_buck_1v8_set();
    18da:	f002 ff40 	bl	475e <adp536x_buck_1v8_set>
	if (err) {
    18de:	b9d8      	cbnz	r0, 1918 <thingy91_board_init+0x48>
	err = adp536x_buckbst_3v3_set();
    18e0:	f002 ff49 	bl	4776 <adp536x_buckbst_3v3_set>
	if (err) {
    18e4:	b9c0      	cbnz	r0, 1918 <thingy91_board_init+0x48>
	err = adp536x_buckbst_enable(true);
    18e6:	2001      	movs	r0, #1
    18e8:	f002 ff4a 	bl	4780 <adp536x_buckbst_enable>
	if (err) {
    18ec:	b9a0      	cbnz	r0, 1918 <thingy91_board_init+0x48>
	err = adp536x_buck_discharge_set(true);
    18ee:	2001      	movs	r0, #1
    18f0:	f002 ff3a 	bl	4768 <adp536x_buck_discharge_set>
	if (err) {
    18f4:	b980      	cbnz	r0, 1918 <thingy91_board_init+0x48>
	err = adp536x_vbus_current_set(ADP536X_VBUS_ILIM_500mA);
    18f6:	2007      	movs	r0, #7
    18f8:	f002 ff1f 	bl	473a <adp536x_vbus_current_set>
	if (err) {
    18fc:	b960      	cbnz	r0, 1918 <thingy91_board_init+0x48>
	err = adp536x_charger_current_set(ADP536X_CHG_CURRENT_320mA);
    18fe:	201f      	movs	r0, #31
    1900:	f002 ff15 	bl	472e <adp536x_charger_current_set>
	if (err) {
    1904:	b940      	cbnz	r0, 1918 <thingy91_board_init+0x48>
	err = adp536x_oc_chg_current_set(ADP536X_OC_CHG_THRESHOLD_400mA);
    1906:	2007      	movs	r0, #7
    1908:	f002 ff22 	bl	4750 <adp536x_oc_chg_current_set>
	if (err) {
    190c:	b920      	cbnz	r0, 1918 <thingy91_board_init+0x48>
		LOG_ERR("power_mgmt_init failed with error: %d", err);
		return err;
	}

	return 0;
}
    190e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = adp536x_charging_enable(true);
    1912:	2001      	movs	r0, #1
    1914:	f002 bf17 	b.w	4746 <adp536x_charging_enable>
}
    1918:	bd08      	pop	{r3, pc}
    191a:	bf00      	nop
    191c:	000056e7 	.word	0x000056e7

00001920 <twim_2_init>:
#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
#endif

#ifdef CONFIG_I2C_2_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(2);
    1920:	b510      	push	{r4, lr}
    1922:	4604      	mov	r4, r0
    1924:	2200      	movs	r2, #0
    1926:	2101      	movs	r1, #1
    1928:	200a      	movs	r0, #10
    192a:	f7ff fbb3 	bl	1094 <z_arm_irq_priority_set>
	nrfx_err_t result = nrfx_twim_init(&get_dev_config(dev)->twim,
    192e:	6860      	ldr	r0, [r4, #4]
    1930:	4623      	mov	r3, r4
    1932:	4a06      	ldr	r2, [pc, #24]	; (194c <twim_2_init+0x2c>)
    1934:	f100 0108 	add.w	r1, r0, #8
    1938:	f000 facc 	bl	1ed4 <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
    193c:	4b04      	ldr	r3, [pc, #16]	; (1950 <twim_2_init+0x30>)
    193e:	4298      	cmp	r0, r3
I2C_NRFX_TWIM_DEVICE(2);
    1940:	bf14      	ite	ne
    1942:	f06f 000f 	mvnne.w	r0, #15
    1946:	2000      	moveq	r0, #0
    1948:	bd10      	pop	{r4, pc}
    194a:	bf00      	nop
    194c:	00001a15 	.word	0x00001a15
    1950:	0bad0000 	.word	0x0bad0000

00001954 <i2c_nrfx_twim_transfer>:
{
    1954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1958:	4604      	mov	r4, r0
    195a:	b087      	sub	sp, #28
    195c:	460d      	mov	r5, r1
    195e:	4691      	mov	r9, r2
    1960:	469a      	mov	sl, r3
	k_sem_take(&(get_dev_data(dev)->transfer_sync), K_FOREVER);
    1962:	68c0      	ldr	r0, [r0, #12]
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    1964:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1968:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    196c:	f001 fb04 	bl	2f78 <z_impl_k_sem_take>
	nrfx_twim_enable(&get_dev_config(dev)->twim);
    1970:	6860      	ldr	r0, [r4, #4]
    1972:	f000 faf3 	bl	1f5c <nrfx_twim_enable>
	for (size_t i = 0; i < num_msgs; i++) {
    1976:	2700      	movs	r7, #0
		if (res != NRFX_SUCCESS) {
    1978:	f8df 8094 	ldr.w	r8, [pc, #148]	; 1a10 <i2c_nrfx_twim_transfer+0xbc>
	for (size_t i = 0; i < num_msgs; i++) {
    197c:	454f      	cmp	r7, r9
    197e:	f8d4 b004 	ldr.w	fp, [r4, #4]
    1982:	d301      	bcc.n	1988 <i2c_nrfx_twim_transfer+0x34>
	int ret = 0;
    1984:	2500      	movs	r5, #0
    1986:	e022      	b.n	19ce <i2c_nrfx_twim_transfer+0x7a>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    1988:	7a2e      	ldrb	r6, [r5, #8]
    198a:	f016 0108 	ands.w	r1, r6, #8
    198e:	d137      	bne.n	1a00 <i2c_nrfx_twim_transfer+0xac>
		nrfx_twim_xfer_desc_t cur_xfer = {
    1990:	2212      	movs	r2, #18
    1992:	f10d 0006 	add.w	r0, sp, #6
    1996:	f003 f80a 	bl	49ae <memset>
					  NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX
    199a:	f006 0301 	and.w	r3, r6, #1
		nrfx_twim_xfer_desc_t cur_xfer = {
    199e:	f88d 3004 	strb.w	r3, [sp, #4]
    19a2:	686b      	ldr	r3, [r5, #4]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
    19a4:	f016 0f02 	tst.w	r6, #2
		nrfx_twim_xfer_desc_t cur_xfer = {
    19a8:	9302      	str	r3, [sp, #8]
    19aa:	682b      	ldr	r3, [r5, #0]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
    19ac:	bf0c      	ite	eq
    19ae:	2220      	moveq	r2, #32
    19b0:	2200      	movne	r2, #0
    19b2:	a901      	add	r1, sp, #4
    19b4:	4658      	mov	r0, fp
		nrfx_twim_xfer_desc_t cur_xfer = {
    19b6:	f88d a005 	strb.w	sl, [sp, #5]
    19ba:	9304      	str	r3, [sp, #16]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
    19bc:	f000 fafa 	bl	1fb4 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
    19c0:	4540      	cmp	r0, r8
    19c2:	d00e      	beq.n	19e2 <i2c_nrfx_twim_transfer+0x8e>
			if (res == NRFX_ERROR_BUSY) {
    19c4:	4b11      	ldr	r3, [pc, #68]	; (1a0c <i2c_nrfx_twim_transfer+0xb8>)
    19c6:	4298      	cmp	r0, r3
    19c8:	d01d      	beq.n	1a06 <i2c_nrfx_twim_transfer+0xb2>
				ret = -EIO;
    19ca:	f06f 0504 	mvn.w	r5, #4
	nrfx_twim_disable(&get_dev_config(dev)->twim);
    19ce:	6860      	ldr	r0, [r4, #4]
    19d0:	f000 fad4 	bl	1f7c <nrfx_twim_disable>
	k_sem_give(&(get_dev_data(dev)->transfer_sync));
    19d4:	68e0      	ldr	r0, [r4, #12]
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    19d6:	f001 faaf 	bl	2f38 <z_impl_k_sem_give>
}
    19da:	4628      	mov	r0, r5
    19dc:	b007      	add	sp, #28
    19de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		k_sem_take(&(get_dev_data(dev)->completion_sync), K_FOREVER);
    19e2:	68e0      	ldr	r0, [r4, #12]
    19e4:	3010      	adds	r0, #16
	return z_impl_k_sem_take(sem, timeout);
    19e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    19ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    19ee:	f001 fac3 	bl	2f78 <z_impl_k_sem_take>
		res = get_dev_data(dev)->res;
    19f2:	68e3      	ldr	r3, [r4, #12]
	return dev->driver_data;
    19f4:	350c      	adds	r5, #12
		res = get_dev_data(dev)->res;
    19f6:	6a1b      	ldr	r3, [r3, #32]
		if (res != NRFX_SUCCESS) {
    19f8:	4543      	cmp	r3, r8
    19fa:	d1e6      	bne.n	19ca <i2c_nrfx_twim_transfer+0x76>
	for (size_t i = 0; i < num_msgs; i++) {
    19fc:	3701      	adds	r7, #1
    19fe:	e7bd      	b.n	197c <i2c_nrfx_twim_transfer+0x28>
			ret = -ENOTSUP;
    1a00:	f06f 0522 	mvn.w	r5, #34	; 0x22
    1a04:	e7e3      	b.n	19ce <i2c_nrfx_twim_transfer+0x7a>
				ret = -EBUSY;
    1a06:	f06f 050f 	mvn.w	r5, #15
    1a0a:	e7e0      	b.n	19ce <i2c_nrfx_twim_transfer+0x7a>
    1a0c:	0bad000b 	.word	0x0bad000b
    1a10:	0bad0000 	.word	0x0bad0000

00001a14 <event_handler>:
	switch (p_event->type) {
    1a14:	7802      	ldrb	r2, [r0, #0]
	struct i2c_nrfx_twim_data *dev_data = get_dev_data(dev);
    1a16:	68cb      	ldr	r3, [r1, #12]
	switch (p_event->type) {
    1a18:	2a01      	cmp	r2, #1
    1a1a:	d00a      	beq.n	1a32 <event_handler+0x1e>
    1a1c:	b11a      	cbz	r2, 1a26 <event_handler+0x12>
    1a1e:	2a02      	cmp	r2, #2
    1a20:	d009      	beq.n	1a36 <event_handler+0x22>
		dev_data->res = NRFX_ERROR_INTERNAL;
    1a22:	4a06      	ldr	r2, [pc, #24]	; (1a3c <event_handler+0x28>)
    1a24:	e000      	b.n	1a28 <event_handler+0x14>
		dev_data->res = NRFX_SUCCESS;
    1a26:	4a06      	ldr	r2, [pc, #24]	; (1a40 <event_handler+0x2c>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    1a28:	621a      	str	r2, [r3, #32]
	z_impl_k_sem_give(sem);
    1a2a:	f103 0010 	add.w	r0, r3, #16
    1a2e:	f001 ba83 	b.w	2f38 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    1a32:	4a04      	ldr	r2, [pc, #16]	; (1a44 <event_handler+0x30>)
    1a34:	e7f8      	b.n	1a28 <event_handler+0x14>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    1a36:	4a04      	ldr	r2, [pc, #16]	; (1a48 <event_handler+0x34>)
    1a38:	e7f6      	b.n	1a28 <event_handler+0x14>
    1a3a:	bf00      	nop
    1a3c:	0bad0001 	.word	0x0bad0001
    1a40:	0bad0000 	.word	0x0bad0000
    1a44:	0bae0001 	.word	0x0bae0001
    1a48:	0bae0002 	.word	0x0bae0002

00001a4c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
    1a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    1a4e:	794b      	ldrb	r3, [r1, #5]
    1a50:	2b01      	cmp	r3, #1
    1a52:	d027      	beq.n	1aa4 <uarte_nrfx_configure+0x58>
    1a54:	2b03      	cmp	r3, #3
    1a56:	d122      	bne.n	1a9e <uarte_nrfx_configure+0x52>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    1a58:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    1a5a:	798b      	ldrb	r3, [r1, #6]
    1a5c:	2b03      	cmp	r3, #3
    1a5e:	d11e      	bne.n	1a9e <uarte_nrfx_configure+0x52>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    1a60:	79cc      	ldrb	r4, [r1, #7]
    1a62:	b124      	cbz	r4, 1a6e <uarte_nrfx_configure+0x22>
    1a64:	2c01      	cmp	r4, #1
    1a66:	d11a      	bne.n	1a9e <uarte_nrfx_configure+0x52>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    1a68:	6843      	ldr	r3, [r0, #4]
    1a6a:	791b      	ldrb	r3, [r3, #4]
    1a6c:	b1bb      	cbz	r3, 1a9e <uarte_nrfx_configure+0x52>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    1a6e:	790a      	ldrb	r2, [r1, #4]
    1a70:	b112      	cbz	r2, 1a78 <uarte_nrfx_configure+0x2c>
    1a72:	2a02      	cmp	r2, #2
    1a74:	d113      	bne.n	1a9e <uarte_nrfx_configure+0x52>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    1a76:	220e      	movs	r2, #14
	switch (baudrate) {
    1a78:	f647 2712 	movw	r7, #31250	; 0x7a12
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    1a7c:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    1a7e:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    1a80:	42bb      	cmp	r3, r7
	return config->uarte_regs;
    1a82:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    1a84:	d062      	beq.n	1b4c <uarte_nrfx_configure+0x100>
    1a86:	d829      	bhi.n	1adc <uarte_nrfx_configure+0x90>
    1a88:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    1a8c:	d061      	beq.n	1b52 <uarte_nrfx_configure+0x106>
    1a8e:	d814      	bhi.n	1aba <uarte_nrfx_configure+0x6e>
    1a90:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    1a94:	d05f      	beq.n	1b56 <uarte_nrfx_configure+0x10a>
    1a96:	d807      	bhi.n	1aa8 <uarte_nrfx_configure+0x5c>
    1a98:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    1a9c:	d05e      	beq.n	1b5c <uarte_nrfx_configure+0x110>
		return -ENOTSUP;
    1a9e:	f06f 0022 	mvn.w	r0, #34	; 0x22
    1aa2:	e052      	b.n	1b4a <uarte_nrfx_configure+0xfe>
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    1aa4:	2600      	movs	r6, #0
    1aa6:	e7d8      	b.n	1a5a <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    1aa8:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    1aac:	d059      	beq.n	1b62 <uarte_nrfx_configure+0x116>
    1aae:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    1ab2:	d1f4      	bne.n	1a9e <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    1ab4:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    1ab8:	e03c      	b.n	1b34 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
    1aba:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    1abe:	d053      	beq.n	1b68 <uarte_nrfx_configure+0x11c>
    1ac0:	d804      	bhi.n	1acc <uarte_nrfx_configure+0x80>
    1ac2:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    1ac6:	d1ea      	bne.n	1a9e <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    1ac8:	4b32      	ldr	r3, [pc, #200]	; (1b94 <uarte_nrfx_configure+0x148>)
    1aca:	e033      	b.n	1b34 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
    1acc:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    1ad0:	d04c      	beq.n	1b6c <uarte_nrfx_configure+0x120>
    1ad2:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    1ad6:	d1e2      	bne.n	1a9e <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    1ad8:	4b2f      	ldr	r3, [pc, #188]	; (1b98 <uarte_nrfx_configure+0x14c>)
    1ada:	e02b      	b.n	1b34 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
    1adc:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    1ae0:	d046      	beq.n	1b70 <uarte_nrfx_configure+0x124>
    1ae2:	d812      	bhi.n	1b0a <uarte_nrfx_configure+0xbe>
    1ae4:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    1ae8:	42bb      	cmp	r3, r7
    1aea:	d044      	beq.n	1b76 <uarte_nrfx_configure+0x12a>
    1aec:	d805      	bhi.n	1afa <uarte_nrfx_configure+0xae>
    1aee:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    1af2:	d1d4      	bne.n	1a9e <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    1af4:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    1af8:	e01c      	b.n	1b34 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
    1afa:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    1afe:	d03d      	beq.n	1b7c <uarte_nrfx_configure+0x130>
    1b00:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    1b04:	d1cb      	bne.n	1a9e <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    1b06:	4b25      	ldr	r3, [pc, #148]	; (1b9c <uarte_nrfx_configure+0x150>)
    1b08:	e014      	b.n	1b34 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
    1b0a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    1b0e:	d038      	beq.n	1b82 <uarte_nrfx_configure+0x136>
    1b10:	d808      	bhi.n	1b24 <uarte_nrfx_configure+0xd8>
    1b12:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    1b16:	d037      	beq.n	1b88 <uarte_nrfx_configure+0x13c>
    1b18:	4f21      	ldr	r7, [pc, #132]	; (1ba0 <uarte_nrfx_configure+0x154>)
    1b1a:	42bb      	cmp	r3, r7
    1b1c:	d1bf      	bne.n	1a9e <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    1b1e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    1b22:	e007      	b.n	1b34 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
    1b24:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    1b28:	d031      	beq.n	1b8e <uarte_nrfx_configure+0x142>
    1b2a:	4f1e      	ldr	r7, [pc, #120]	; (1ba4 <uarte_nrfx_configure+0x158>)
    1b2c:	42bb      	cmp	r3, r7
    1b2e:	d1b6      	bne.n	1a9e <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    1b30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    1b34:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
    1b38:	4334      	orrs	r4, r6
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    1b3a:	68c3      	ldr	r3, [r0, #12]
    1b3c:	4322      	orrs	r2, r4
    1b3e:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    1b40:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    1b44:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    1b48:	2000      	movs	r0, #0
}
    1b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    1b4c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    1b50:	e7f0      	b.n	1b34 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    1b52:	4b15      	ldr	r3, [pc, #84]	; (1ba8 <uarte_nrfx_configure+0x15c>)
    1b54:	e7ee      	b.n	1b34 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = 0x00027000;
    1b56:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    1b5a:	e7eb      	b.n	1b34 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = 0x00014000;
    1b5c:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    1b60:	e7e8      	b.n	1b34 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    1b62:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    1b66:	e7e5      	b.n	1b34 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    1b68:	4b10      	ldr	r3, [pc, #64]	; (1bac <uarte_nrfx_configure+0x160>)
    1b6a:	e7e3      	b.n	1b34 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    1b6c:	4b10      	ldr	r3, [pc, #64]	; (1bb0 <uarte_nrfx_configure+0x164>)
    1b6e:	e7e1      	b.n	1b34 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    1b70:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    1b74:	e7de      	b.n	1b34 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    1b76:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    1b7a:	e7db      	b.n	1b34 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    1b7c:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    1b80:	e7d8      	b.n	1b34 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    1b82:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    1b86:	e7d5      	b.n	1b34 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    1b88:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    1b8c:	e7d2      	b.n	1b34 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    1b8e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    1b92:	e7cf      	b.n	1b34 <uarte_nrfx_configure+0xe8>
    1b94:	00275000 	.word	0x00275000
    1b98:	0075c000 	.word	0x0075c000
    1b9c:	013a9000 	.word	0x013a9000
    1ba0:	0003d090 	.word	0x0003d090
    1ba4:	000f4240 	.word	0x000f4240
    1ba8:	0013b000 	.word	0x0013b000
    1bac:	003af000 	.word	0x003af000
    1bb0:	004ea000 	.word	0x004ea000

00001bb4 <uarte_instance_init.isra.3>:

NRF_STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    1bb4:	2201      	movs	r2, #1
	.irq_update		= uarte_nrfx_irq_update,
	.irq_callback_set	= uarte_nrfx_irq_callback_set,
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int uarte_instance_init(struct device *dev,
    1bb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1bb8:	2703      	movs	r7, #3
    1bba:	460d      	mov	r5, r1
	return config->uarte_regs;
    1bbc:	6843      	ldr	r3, [r0, #4]
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);

	nrf_gpio_pin_write(config->pseltxd, 1);
    1bbe:	6809      	ldr	r1, [r1, #0]
	return config->uarte_regs;
    1bc0:	681c      	ldr	r4, [r3, #0]
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    1bc2:	4b21      	ldr	r3, [pc, #132]	; (1c48 <uarte_instance_init.isra.3+0x94>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    1bc4:	408a      	lsls	r2, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
    1bc6:	68c6      	ldr	r6, [r0, #12]
    p_reg->OUTSET = set_mask;
    1bc8:	609a      	str	r2, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1bca:	f101 0280 	add.w	r2, r1, #128	; 0x80
    1bce:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    1bd2:	686a      	ldr	r2, [r5, #4]
    1bd4:	1c57      	adds	r7, r2, #1
    1bd6:	bf1e      	ittt	ne
    1bd8:	f04f 0c00 	movne.w	ip, #0
    1bdc:	f102 0780 	addne.w	r7, r2, #128	; 0x80
    1be0:	f843 c027 	strne.w	ip, [r3, r7, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
    1be4:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
    1be8:	68a9      	ldr	r1, [r5, #8]
    p_reg->PSEL.RXD = pselrxd;
    1bea:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    1bee:	1c4a      	adds	r2, r1, #1
    1bf0:	d015      	beq.n	1c1e <uarte_instance_init.isra.3+0x6a>
	    config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    1bf2:	68ea      	ldr	r2, [r5, #12]
	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
    1bf4:	1c57      	adds	r7, r2, #1
    1bf6:	d012      	beq.n	1c1e <uarte_instance_init.isra.3+0x6a>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    1bf8:	2701      	movs	r7, #1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1bfa:	f04f 0c03 	mov.w	ip, #3
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    1bfe:	4097      	lsls	r7, r2
    p_reg->OUTSET = set_mask;
    1c00:	609f      	str	r7, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1c02:	f102 0780 	add.w	r7, r2, #128	; 0x80
    1c06:	f843 c027 	str.w	ip, [r3, r7, lsl #2]
    1c0a:	f04f 0c00 	mov.w	ip, #0
    1c0e:	f101 0780 	add.w	r7, r1, #128	; 0x80
    1c12:	f843 c027 	str.w	ip, [r3, r7, lsl #2]
    p_reg->PSEL.RTS = pselrts;
    1c16:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    1c1a:	f8c4 1510 	str.w	r1, [r4, #1296]	; 0x510
		nrf_uarte_hwfc_pins_set(uarte,
					config->pselrts,
					config->pselcts);
	}

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    1c1e:	4631      	mov	r1, r6
    1c20:	f7ff ff14 	bl	1a4c <uarte_nrfx_configure>
	if (err) {
    1c24:	b970      	cbnz	r0, 1c44 <uarte_instance_init.isra.3+0x90>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    1c26:	2308      	movs	r3, #8
    1c28:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	}
#endif
	/* Enable receiver and transmitter */
	nrf_uarte_enable(uarte);

	if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    1c2c:	686b      	ldr	r3, [r5, #4]
    1c2e:	3301      	adds	r3, #1
    1c30:	d008      	beq.n	1c44 <uarte_instance_init.isra.3+0x90>
NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    p_reg->RXD.MAXCNT = length;
    1c32:	2301      	movs	r3, #1
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    1c34:	360c      	adds	r6, #12
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1c36:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    1c3a:	f8c4 6534 	str.w	r6, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    1c3e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1c42:	6023      	str	r3, [r4, #0]
		/* switch off transmitter to save an energy */
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);
	}
#endif
	return 0;
}
    1c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c46:	bf00      	nop
    1c48:	50842500 	.word	0x50842500

00001c4c <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    1c4c:	b530      	push	{r4, r5, lr}
    1c4e:	b085      	sub	sp, #20
    1c50:	4605      	mov	r5, r0
    1c52:	466c      	mov	r4, sp
    1c54:	4b04      	ldr	r3, [pc, #16]	; (1c68 <uarte_0_init+0x1c>)
    1c56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    1c58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    1c5c:	4621      	mov	r1, r4
    1c5e:	4628      	mov	r0, r5
    1c60:	f7ff ffa8 	bl	1bb4 <uarte_instance_init.isra.3>
    1c64:	b005      	add	sp, #20
    1c66:	bd30      	pop	{r4, r5, pc}
    1c68:	000050ac 	.word	0x000050ac

00001c6c <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    1c6c:	b530      	push	{r4, r5, lr}
    1c6e:	b085      	sub	sp, #20
    1c70:	4605      	mov	r5, r0
    1c72:	466c      	mov	r4, sp
    1c74:	4b04      	ldr	r3, [pc, #16]	; (1c88 <uarte_1_init+0x1c>)
    1c76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    1c78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    1c7c:	4621      	mov	r1, r4
    1c7e:	4628      	mov	r0, r5
    1c80:	f7ff ff98 	bl	1bb4 <uarte_instance_init.isra.3>
    1c84:	b005      	add	sp, #20
    1c86:	bd30      	pop	{r4, r5, pc}
    1c88:	000050bc 	.word	0x000050bc

00001c8c <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(struct device *dev)
{
    1c8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    1c90:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
    1c92:	4c21      	ldr	r4, [pc, #132]	; (1d18 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							u32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const u32_t ext_api_magic[] = {EXT_API_MAGIC};
    1c94:	4e21      	ldr	r6, [pc, #132]	; (1d1c <check_ext_api_requests+0x90>)
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    1c96:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
    1c9a:	f8df 9088 	ldr.w	r9, [pc, #136]	; 1d24 <check_ext_api_requests+0x98>
{
    1c9e:	b085      	sub	sp, #20
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    1ca0:	45a8      	cmp	r8, r5
    1ca2:	d803      	bhi.n	1cac <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
    1ca4:	2000      	movs	r0, #0
    1ca6:	b005      	add	sp, #20
    1ca8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((u32_t)*(ext_api_req->ext_api))
    1cac:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1cae:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    1cb2:	681f      	ldr	r7, [r3, #0]
    1cb4:	ab01      	add	r3, sp, #4
    1cb6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
    1cba:	220c      	movs	r2, #12
    1cbc:	4619      	mov	r1, r3
    1cbe:	4638      	mov	r0, r7
    1cc0:	f002 fe24 	bl	490c <memcmp>
    1cc4:	b990      	cbnz	r0, 1cec <check_ext_api_requests+0x60>
    1cc6:	b18f      	cbz	r7, 1cec <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    1cc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const u32_t req_id = ext_api_req->request.ext_api_id;
    1cca:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    1ccc:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
    1cce:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    1cd0:	4291      	cmp	r1, r2
    1cd2:	d10b      	bne.n	1cec <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
    1cd4:	699a      	ldr	r2, [r3, #24]
	const u32_t req_min_version = ext_api_req->request.ext_api_version;
    1cd6:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
    1cd8:	4291      	cmp	r1, r2
    1cda:	d807      	bhi.n	1cec <check_ext_api_requests+0x60>
	const u32_t req_max_version = ext_api_req->ext_api_max_version;
    1cdc:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
    1cde:	4291      	cmp	r1, r2
    1ce0:	d904      	bls.n	1cec <check_ext_api_requests+0x60>
	const u32_t req_flags = ext_api_req->request.ext_api_flags;
    1ce2:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    1ce4:	695b      	ldr	r3, [r3, #20]
    1ce6:	ea32 0303 	bics.w	r3, r2, r3
    1cea:	d00a      	beq.n	1d02 <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
    1cec:	6a27      	ldr	r7, [r4, #32]
    1cee:	b167      	cbz	r7, 1d0a <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
    1cf0:	480b      	ldr	r0, [pc, #44]	; (1d20 <check_ext_api_requests+0x94>)
    1cf2:	f002 fb9c 	bl	442e <printk>
			k_panic();
    1cf6:	4040      	eors	r0, r0
    1cf8:	f380 8811 	msr	BASEPRI, r0
    1cfc:	f04f 0004 	mov.w	r0, #4
    1d00:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
    1d02:	68e3      	ldr	r3, [r4, #12]
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    1d04:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
    1d06:	441c      	add	r4, r3
    1d08:	e7ca      	b.n	1ca0 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
    1d0a:	4648      	mov	r0, r9
    1d0c:	f002 fb8f 	bl	442e <printk>
			*ext_api_req->ext_api = NULL;
    1d10:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1d12:	601f      	str	r7, [r3, #0]
    1d14:	e7f5      	b.n	1d02 <check_ext_api_requests+0x76>
    1d16:	bf00      	nop
    1d18:	0000023c 	.word	0x0000023c
    1d1c:	000050cc 	.word	0x000050cc
    1d20:	000056f4 	.word	0x000056f4
    1d24:	0000571d 	.word	0x0000571d

00001d28 <nrf91_errata_31>:
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    1d28:	4b06      	ldr	r3, [pc, #24]	; (1d44 <nrf91_errata_31+0x1c>)
    1d2a:	6818      	ldr	r0, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    1d2c:	3b04      	subs	r3, #4
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    1d2e:	681b      	ldr	r3, [r3, #0]
    1d30:	2b09      	cmp	r3, #9
    1d32:	d105      	bne.n	1d40 <nrf91_errata_31+0x18>
            {
                switch(var2)
    1d34:	3801      	subs	r0, #1
    1d36:	2801      	cmp	r0, #1
    1d38:	bf8c      	ite	hi
    1d3a:	2000      	movhi	r0, #0
    1d3c:	2001      	movls	r0, #1
    1d3e:	4770      	bx	lr
                    case 0x02ul:
                        return true;
                }
            }
        #endif
        return false;
    1d40:	2000      	movs	r0, #0
    #endif
}
    1d42:	4770      	bx	lr
    1d44:	00ff0134 	.word	0x00ff0134

00001d48 <nrf91_errata_14>:
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    1d48:	4b05      	ldr	r3, [pc, #20]	; (1d60 <nrf91_errata_14+0x18>)
    1d4a:	6818      	ldr	r0, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    1d4c:	3b04      	subs	r3, #4
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    1d4e:	681b      	ldr	r3, [r3, #0]
    1d50:	2b09      	cmp	r3, #9
    1d52:	d103      	bne.n	1d5c <nrf91_errata_14+0x14>
            {
                switch(var2)
    1d54:	1e43      	subs	r3, r0, #1
    1d56:	4258      	negs	r0, r3
    1d58:	4158      	adcs	r0, r3
    1d5a:	4770      	bx	lr
                    case 0x02ul:
                        return false;
                }
            }
        #endif
        return false;
    1d5c:	2000      	movs	r0, #0
    #endif
}
    1d5e:	4770      	bx	lr
    1d60:	00ff0134 	.word	0x00ff0134

00001d64 <SystemInit>:
        /* Perform Secure-mode initialization routines. */

        /* Set all ARM SAU regions to NonSecure if TrustZone extensions are enabled.
        * Nordic SPU should handle Secure Attribution tasks */
        #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
    1d64:	4a4e      	ldr	r2, [pc, #312]	; (1ea0 <SystemInit+0x13c>)
{
    1d66:	b508      	push	{r3, lr}
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
    1d68:	6813      	ldr	r3, [r2, #0]
    1d6a:	f043 0302 	orr.w	r3, r3, #2
    1d6e:	6013      	str	r3, [r2, #0]
        #endif
        
        /* Workaround for Errata 6 "POWER: SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_6()){
    1d70:	f7ff ffda 	bl	1d28 <nrf91_errata_31>
    1d74:	b130      	cbz	r0, 1d84 <SystemInit+0x20>
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
    1d76:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1d7a:	2200      	movs	r2, #0
    1d7c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
    1d80:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        }

        /* Workaround for Errata 14 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_14()){
    1d84:	f7ff ffe0 	bl	1d48 <nrf91_errata_14>
    1d88:	b130      	cbz	r0, 1d98 <SystemInit+0x34>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
    1d8a:	2301      	movs	r3, #1
    1d8c:	4a45      	ldr	r2, [pc, #276]	; (1ea4 <SystemInit+0x140>)
    1d8e:	6013      	str	r3, [r2, #0]
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    1d90:	f6a2 2238 	subw	r2, r2, #2616	; 0xa38
    1d94:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
{
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    1d98:	4b43      	ldr	r3, [pc, #268]	; (1ea8 <SystemInit+0x144>)
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    1d9a:	681b      	ldr	r3, [r3, #0]
    1d9c:	2b09      	cmp	r3, #9
    1d9e:	d107      	bne.n	1db0 <SystemInit+0x4c>
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    1da0:	4b42      	ldr	r3, [pc, #264]	; (1eac <SystemInit+0x148>)
            {
                switch(var2)
    1da2:	681b      	ldr	r3, [r3, #0]
    1da4:	2b02      	cmp	r3, #2
        }

        /* Workaround for Errata 15 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_15()){
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    1da6:	bf02      	ittt	eq
    1da8:	2201      	moveq	r2, #1
    1daa:	4b41      	ldreq	r3, [pc, #260]	; (1eb0 <SystemInit+0x14c>)
    1dac:	f8c3 2578 	streq.w	r2, [r3, #1400]	; 0x578
        }

        /* Workaround for Errata 20 "RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_20()){
    1db0:	f7ff ffca 	bl	1d48 <nrf91_errata_14>
    1db4:	b110      	cbz	r0, 1dbc <SystemInit+0x58>
            *((volatile uint32_t *)0x5003AEE4) = 0xE;
    1db6:	220e      	movs	r2, #14
    1db8:	4b3e      	ldr	r3, [pc, #248]	; (1eb4 <SystemInit+0x150>)
    1dba:	601a      	str	r2, [r3, #0]
        }

        /* Workaround for Errata 31 "XOSC32k Startup Failure" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_31()){
    1dbc:	f7ff ffb4 	bl	1d28 <nrf91_errata_31>
    1dc0:	b120      	cbz	r0, 1dcc <SystemInit+0x68>
            *((volatile uint32_t *)0x5000470Cul) = 0x0;
    1dc2:	2200      	movs	r2, #0
    1dc4:	4b3c      	ldr	r3, [pc, #240]	; (1eb8 <SystemInit+0x154>)
    1dc6:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x50004710ul) = 0x1;
    1dc8:	2201      	movs	r2, #1
    1dca:	605a      	str	r2, [r3, #4]
{
    1dcc:	2200      	movs	r2, #0
    1dce:	00d3      	lsls	r3, r2, #3
    1dd0:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    1dd4:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    1dd8:	3101      	adds	r1, #1
    1dda:	d008      	beq.n	1dee <SystemInit+0x8a>
          #if defined ( __ICCARM__ )
              #pragma diag_suppress=Pa082
          #endif
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    1ddc:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    1de0:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    1de2:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    1de6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    1dea:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    1dec:	d1ef      	bne.n	1dce <SystemInit+0x6a>
    }
    
    
    bool uicr_HFXOSRC_erased()
    {
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    1dee:	4b33      	ldr	r3, [pc, #204]	; (1ebc <SystemInit+0x158>)
    1df0:	69da      	ldr	r2, [r3, #28]
    1df2:	07d1      	lsls	r1, r2, #31
    1df4:	d53b      	bpl.n	1e6e <SystemInit+0x10a>
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1df6:	4b32      	ldr	r3, [pc, #200]	; (1ec0 <SystemInit+0x15c>)
    1df8:	4619      	mov	r1, r3
    1dfa:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    1dfe:	2a01      	cmp	r2, #1
    1e00:	d1fb      	bne.n	1dfa <SystemInit+0x96>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
    1e02:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1e06:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
    1e0a:	2b01      	cmp	r3, #1
    1e0c:	d1fb      	bne.n	1e06 <SystemInit+0xa2>
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    1e0e:	4b2b      	ldr	r3, [pc, #172]	; (1ebc <SystemInit+0x158>)
    1e10:	69da      	ldr	r2, [r3, #28]
    1e12:	07d2      	lsls	r2, r2, #31
    1e14:	d508      	bpl.n	1e28 <SystemInit+0xc4>
            uicr_erased_value = NRF_UICR_S->HFXOSRC;
    1e16:	69da      	ldr	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1e18:	4929      	ldr	r1, [pc, #164]	; (1ec0 <SystemInit+0x15c>)
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    1e1a:	f022 0201 	bic.w	r2, r2, #1
            NRF_UICR_S->HFXOSRC = uicr_new_value;
    1e1e:	61da      	str	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1e20:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
    1e24:	2a01      	cmp	r2, #1
    1e26:	d1fb      	bne.n	1e20 <SystemInit+0xbc>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
    1e28:	6a1a      	ldr	r2, [r3, #32]
    1e2a:	3201      	adds	r2, #1
    1e2c:	d10a      	bne.n	1e44 <SystemInit+0xe0>
            uicr_erased_value = NRF_UICR_S->HFXOCNT;
    1e2e:	6a1a      	ldr	r2, [r3, #32]
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
    1e30:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    1e34:	f042 0220 	orr.w	r2, r2, #32
            NRF_UICR_S->HFXOCNT = uicr_new_value;
    1e38:	621a      	str	r2, [r3, #32]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1e3a:	4a21      	ldr	r2, [pc, #132]	; (1ec0 <SystemInit+0x15c>)
    1e3c:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    1e40:	2b01      	cmp	r3, #1
    1e42:	d1fb      	bne.n	1e3c <SystemInit+0xd8>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
    1e44:	2200      	movs	r2, #0
    1e46:	4b1e      	ldr	r3, [pc, #120]	; (1ec0 <SystemInit+0x15c>)
    1e48:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1e4c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    1e50:	2a01      	cmp	r2, #1
    1e52:	d1fb      	bne.n	1e4c <SystemInit+0xe8>
  __ASM volatile ("dsb 0xF":::"memory");
    1e54:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1e58:	491a      	ldr	r1, [pc, #104]	; (1ec4 <SystemInit+0x160>)
    1e5a:	4b1b      	ldr	r3, [pc, #108]	; (1ec8 <SystemInit+0x164>)
    1e5c:	68ca      	ldr	r2, [r1, #12]
    1e5e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1e62:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1e64:	60cb      	str	r3, [r1, #12]
    1e66:	f3bf 8f4f 	dsb	sy
    __NOP();
    1e6a:	bf00      	nop
    1e6c:	e7fd      	b.n	1e6a <SystemInit+0x106>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
    1e6e:	6a1b      	ldr	r3, [r3, #32]
    1e70:	3301      	adds	r3, #1
    1e72:	d0c0      	beq.n	1df6 <SystemInit+0x92>
        SCB->NSACR |= (3UL << 10);
    1e74:	4b13      	ldr	r3, [pc, #76]	; (1ec4 <SystemInit+0x160>)
    1e76:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    1e7a:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
    1e7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
    1e82:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1e86:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    1e8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    1e8e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1e92:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
    1e96:	4b0d      	ldr	r3, [pc, #52]	; (1ecc <SystemInit+0x168>)
    1e98:	4a0d      	ldr	r2, [pc, #52]	; (1ed0 <SystemInit+0x16c>)
    1e9a:	601a      	str	r2, [r3, #0]
}
    1e9c:	bd08      	pop	{r3, pc}
    1e9e:	bf00      	nop
    1ea0:	e000edd0 	.word	0xe000edd0
    1ea4:	50004a38 	.word	0x50004a38
    1ea8:	00ff0130 	.word	0x00ff0130
    1eac:	00ff0134 	.word	0x00ff0134
    1eb0:	50004000 	.word	0x50004000
    1eb4:	5003aee4 	.word	0x5003aee4
    1eb8:	5000470c 	.word	0x5000470c
    1ebc:	00ff8000 	.word	0x00ff8000
    1ec0:	50039000 	.word	0x50039000
    1ec4:	e000ed00 	.word	0xe000ed00
    1ec8:	05fa0004 	.word	0x05fa0004
    1ecc:	20000070 	.word	0x20000070
    1ed0:	03d09000 	.word	0x03d09000

00001ed4 <nrfx_twim_init>:
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(p_config->scl != p_config->sda);
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    1ed4:	f04f 0c34 	mov.w	ip, #52	; 0x34
{
    1ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    1eda:	7906      	ldrb	r6, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    1edc:	4d1b      	ldr	r5, [pc, #108]	; (1f4c <nrfx_twim_init+0x78>)
    1ede:	fb0c fc06 	mul.w	ip, ip, r6
    1ee2:	eb05 040c 	add.w	r4, r5, ip
    1ee6:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
    1eea:	bb67      	cbnz	r7, 1f46 <nrfx_twim_init+0x72>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler         = event_handler;
    1eec:	f845 200c 	str.w	r2, [r5, ip]
    1ef0:	f240 6c0c 	movw	ip, #1548	; 0x60c
    p_cb->p_context       = p_context;
    1ef4:	6063      	str	r3, [r4, #4]
    p_cb->int_mask        = 0;
    p_cb->repeated        = false;
    p_cb->busy            = false;
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    1ef6:	7b4b      	ldrb	r3, [r1, #13]
    p_cb->int_mask        = 0;
    1ef8:	60a7      	str	r7, [r4, #8]
    p_cb->repeated        = false;
    1efa:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    p_cb->busy            = false;
    1efe:	f884 702f 	strb.w	r7, [r4, #47]	; 0x2f
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    1f02:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32

    /* To secure correct signal levels on the pins used by the TWI
       master when the system is in OFF mode, and when the TWI master is
       disabled, these pins must be configured in the GPIO peripheral.
    */
    TWIM_PIN_INIT(p_config->scl);
    1f06:	680c      	ldr	r4, [r1, #0]
    1f08:	4f11      	ldr	r7, [pc, #68]	; (1f50 <nrfx_twim_init+0x7c>)
    1f0a:	f104 0380 	add.w	r3, r4, #128	; 0x80
    1f0e:	f847 c023 	str.w	ip, [r7, r3, lsl #2]
    TWIM_PIN_INIT(p_config->sda);
    1f12:	684b      	ldr	r3, [r1, #4]

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    1f14:	6800      	ldr	r0, [r0, #0]
    1f16:	f103 0e80 	add.w	lr, r3, #128	; 0x80
    1f1a:	f847 c02e 	str.w	ip, [r7, lr, lsl #2]

NRF_STATIC_INLINE void nrf_twim_pins_set(NRF_TWIM_Type * p_reg,
                                         uint32_t scl_pin,
                                         uint32_t sda_pin)
{
    p_reg->PSEL.SCL = scl_pin;
    1f1e:	f8c0 4508 	str.w	r4, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    1f22:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
    nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
    nrf_twim_frequency_set(p_twim,
        (nrf_twim_frequency_t)p_config->frequency);
    1f26:	688b      	ldr	r3, [r1, #8]
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
    1f28:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524

    if (p_cb->handler)
    1f2c:	b11a      	cbz	r2, 1f36 <nrfx_twim_init+0x62>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twim),
            p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
    1f2e:	f340 3007 	sbfx	r0, r0, #12, #8
    1f32:	f7ff f89f 	bl	1074 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    1f36:	2334      	movs	r3, #52	; 0x34
    1f38:	fb03 5506 	mla	r5, r3, r6, r5
    1f3c:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    1f3e:	4805      	ldr	r0, [pc, #20]	; (1f54 <nrfx_twim_init+0x80>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    1f40:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
    1f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return err_code;
    1f46:	4804      	ldr	r0, [pc, #16]	; (1f58 <nrfx_twim_init+0x84>)
    1f48:	e7fc      	b.n	1f44 <nrfx_twim_init+0x70>
    1f4a:	bf00      	nop
    1f4c:	200006dc 	.word	0x200006dc
    1f50:	50842500 	.word	0x50842500
    1f54:	0bad0000 	.word	0x0bad0000
    1f58:	0bad0005 	.word	0x0bad0005

00001f5c <nrfx_twim_enable>:
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    1f5c:	2106      	movs	r1, #6
void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);

    nrf_twim_enable(p_instance->p_twim);
    1f5e:	6802      	ldr	r2, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    1f60:	7903      	ldrb	r3, [r0, #4]
    1f62:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    1f66:	2134      	movs	r1, #52	; 0x34
    1f68:	4a03      	ldr	r2, [pc, #12]	; (1f78 <nrfx_twim_enable+0x1c>)
    1f6a:	fb01 2303 	mla	r3, r1, r3, r2
    1f6e:	2202      	movs	r2, #2
    1f70:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
    1f74:	4770      	bx	lr
    1f76:	bf00      	nop
    1f78:	200006dc 	.word	0x200006dc

00001f7c <nrfx_twim_disable>:
void nrfx_twim_disable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    1f7c:	6802      	ldr	r2, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    1f7e:	7903      	ldrb	r3, [r0, #4]
    p_cb->int_mask = 0;
    1f80:	2034      	movs	r0, #52	; 0x34
    1f82:	490a      	ldr	r1, [pc, #40]	; (1fac <nrfx_twim_disable+0x30>)
    1f84:	fb00 1303 	mla	r3, r0, r3, r1
    1f88:	2000      	movs	r0, #0
    p_reg->INTENCLR = mask;
    1f8a:	4909      	ldr	r1, [pc, #36]	; (1fb0 <nrfx_twim_disable+0x34>)
    1f8c:	6098      	str	r0, [r3, #8]
    1f8e:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    1f92:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
    1f96:	f421 51bc 	bic.w	r1, r1, #6016	; 0x1780
    1f9a:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    1f9e:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    nrf_twim_shorts_disable(p_twim, NRF_TWIM_ALL_SHORTS_MASK);
    nrf_twim_disable(p_twim);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    1fa2:	2201      	movs	r2, #1
    1fa4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance disabled: %d.", p_instance->drv_inst_idx);
}
    1fa8:	4770      	bx	lr
    1faa:	bf00      	nop
    1fac:	200006dc 	.word	0x200006dc
    1fb0:	019c0202 	.word	0x019c0202

00001fb4 <nrfx_twim_xfer>:


nrfx_err_t nrfx_twim_xfer(nrfx_twim_t           const * p_instance,
                          nrfx_twim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
    1fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p_cb->error = false;
    1fb8:	f04f 0e34 	mov.w	lr, #52	; 0x34
    1fbc:	2300      	movs	r3, #0
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
                                     p_xfer_desc->primary_length,
                                     p_xfer_desc->secondary_length));

    nrfx_err_t err_code = NRFX_SUCCESS;
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    1fbe:	f890 c004 	ldrb.w	ip, [r0, #4]
    p_cb->error = false;
    1fc2:	4ea4      	ldr	r6, [pc, #656]	; (2254 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x254>)
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
    1fc4:	6804      	ldr	r4, [r0, #0]
    p_cb->error = false;
    1fc6:	fb0e 6e0c 	mla	lr, lr, ip, r6
    1fca:	f88e 302e 	strb.w	r3, [lr, #46]	; 0x2e

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    1fce:	68cb      	ldr	r3, [r1, #12]
{
    1fd0:	460d      	mov	r5, r1
    1fd2:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    if (!nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    1fd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
{
    1fda:	4617      	mov	r7, r2
    if (!nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    1fdc:	d003      	beq.n	1fe6 <nrfx_twim_xfer+0x32>
        return err_code;
    1fde:	4d9e      	ldr	r5, [pc, #632]	; (2258 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x258>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    1fe0:	4628      	mov	r0, r5
    1fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    p_reg->INTENCLR = mask;
    1fe6:	4b9d      	ldr	r3, [pc, #628]	; (225c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x25c>)
    1fe8:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    if (p_cb->busy)
    1fec:	f89e 302f 	ldrb.w	r3, [lr, #47]	; 0x2f
    1ff0:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    1ff4:	b12b      	cbz	r3, 2002 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    1ff6:	f8de 3008 	ldr.w	r3, [lr, #8]
        return err_code;
    1ffa:	4d99      	ldr	r5, [pc, #612]	; (2260 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x260>)
    p_reg->INTENSET = mask;
    1ffc:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    2000:	e7ee      	b.n	1fe0 <nrfx_twim_xfer+0x2c>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
    2002:	f012 0f14 	tst.w	r2, #20
    2006:	bf0c      	ite	eq
    2008:	2301      	moveq	r3, #1
    200a:	2300      	movne	r3, #0
    p_cb->xfer_desc = *p_xfer_desc;
    200c:	4689      	mov	r9, r1
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
    200e:	f88e 302f 	strb.w	r3, [lr, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
    2012:	f10e 080c 	add.w	r8, lr, #12
    2016:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
    201a:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
    201e:	f8d9 3000 	ldr.w	r3, [r9]
    p_cb->flags = flags;
    2022:	f8ce 7020 	str.w	r7, [lr, #32]
    p_cb->xfer_desc = *p_xfer_desc;
    2026:	f8c8 3000 	str.w	r3, [r8]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
    202a:	f3c7 1300 	ubfx	r3, r7, #4, #1
    202e:	f88e 3030 	strb.w	r3, [lr, #48]	; 0x30
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
    2032:	786b      	ldrb	r3, [r5, #1]
    switch (p_xfer_desc->type)
    2034:	782a      	ldrb	r2, [r5, #0]
    2036:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
    203a:	f017 0301 	ands.w	r3, r7, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
    203e:	bf18      	it	ne
    2040:	2301      	movne	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2042:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
    2046:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
    204a:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
    204e:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
    2052:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
    2056:	f017 0302 	ands.w	r3, r7, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
    205a:	bf18      	it	ne
    205c:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
    205e:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
    2062:	2a03      	cmp	r2, #3
    2064:	f200 80aa 	bhi.w	21bc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1bc>
    2068:	e8df f002 	tbb	[pc, r2]
    206c:	025e9579 	.word	0x025e9579
    2070:	6929      	ldr	r1, [r5, #16]
    2072:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    2076:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    207a:	d1b0      	bne.n	1fde <nrfx_twim_xfer+0x2a>
    p_reg->SHORTS = mask;
    207c:	f44f 7380 	mov.w	r3, #256	; 0x100
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2080:	68e8      	ldr	r0, [r5, #12]
    p_reg->SHORTS = mask;
    2082:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    2086:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2088:	f8c4 0544 	str.w	r0, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    208c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2090:	2001      	movs	r0, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2092:	2300      	movs	r3, #0
    2094:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2098:	6220      	str	r0, [r4, #32]
    209a:	60a0      	str	r0, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    209c:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
    20a0:	2800      	cmp	r0, #0
    20a2:	d0fb      	beq.n	209c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x9c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    20a4:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    20a8:	68ab      	ldr	r3, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    20aa:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    20ae:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    20b2:	2334      	movs	r3, #52	; 0x34
    20b4:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    20b8:	fb03 630c 	mla	r3, r3, ip, r6
    20bc:	6099      	str	r1, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    20be:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
    20c0:	4d68      	ldr	r5, [pc, #416]	; (2264 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x264>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
    20c2:	0738      	lsls	r0, r7, #28
    20c4:	d403      	bmi.n	20ce <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xce>
    20c6:	2a03      	cmp	r2, #3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    20c8:	bf1c      	itt	ne
    20ca:	2201      	movne	r2, #1
    20cc:	50e2      	strne	r2, [r4, r3]
    if (p_cb->handler)
    20ce:	2334      	movs	r3, #52	; 0x34
    20d0:	fb03 f30c 	mul.w	r3, r3, ip
    20d4:	18f2      	adds	r2, r6, r3
    20d6:	58f3      	ldr	r3, [r6, r3]
    20d8:	2b00      	cmp	r3, #0
    20da:	d172      	bne.n	21c2 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1c2>
                transmission_finished = true;
    20dc:	2101      	movs	r1, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    20de:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    20e2:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    20e6:	2800      	cmp	r0, #0
    20e8:	f040 8083 	bne.w	21f2 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1f2>
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
    20ec:	3200      	adds	r2, #0
    20ee:	bf18      	it	ne
    20f0:	2201      	movne	r2, #1
    20f2:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    20f6:	2800      	cmp	r0, #0
    20f8:	d07f      	beq.n	21fa <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1fa>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    20fa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    20fe:	f8d4 e160 	ldr.w	lr, [r4, #352]	; 0x160
    return p_reg->SHORTS;
    2102:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
    2106:	f1be 0f00 	cmp.w	lr, #0
    210a:	d002      	beq.n	2112 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x112>
    210c:	f410 7f00 	tst.w	r0, #512	; 0x200
    2110:	d105      	bne.n	211e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x11e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2112:	6221      	str	r1, [r4, #32]
    2114:	6161      	str	r1, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    2116:	f1be 0f00 	cmp.w	lr, #0
    211a:	d0e0      	beq.n	20de <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xde>
                    transmission_finished = false;
    211c:	2200      	movs	r2, #0
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    211e:	05c0      	lsls	r0, r0, #23
    2120:	d56b      	bpl.n	21fa <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1fa>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2122:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
                    transmission_finished = false;
    2126:	e7da      	b.n	20de <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xde>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    2128:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    212a:	68e9      	ldr	r1, [r5, #12]
    212c:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2130:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    2134:	692b      	ldr	r3, [r5, #16]
    2136:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    213a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    213e:	f47f af4e 	bne.w	1fde <nrfx_twim_xfer+0x2a>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    2142:	68a9      	ldr	r1, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    2144:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
    2148:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
    214c:	f8c4 1538 	str.w	r1, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    2150:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    2154:	2334      	movs	r3, #52	; 0x34
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    2156:	fb03 630c 	mla	r3, r3, ip, r6
    215a:	2102      	movs	r1, #2
    215c:	e012      	b.n	2184 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x184>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    215e:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2160:	68e9      	ldr	r1, [r5, #12]
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
    2162:	f017 0f20 	tst.w	r7, #32
    2166:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    216a:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    216e:	f04f 0334 	mov.w	r3, #52	; 0x34
    2172:	d00b      	beq.n	218c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x18c>
    p_reg->SHORTS = mask;
    2174:	f44f 7180 	mov.w	r1, #256	; 0x100
    2178:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    217c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    2180:	fb03 630c 	mla	r3, r3, ip, r6
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    2184:	6099      	str	r1, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2186:	2301      	movs	r3, #1
    2188:	6223      	str	r3, [r4, #32]
    218a:	e798      	b.n	20be <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xbe>
    p_reg->SHORTS = mask;
    218c:	f44f 7100 	mov.w	r1, #512	; 0x200
    2190:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    2194:	e7df      	b.n	2156 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x156>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    2196:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    2198:	68e9      	ldr	r1, [r5, #12]
    219a:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    219e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    21a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    21a6:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    21aa:	2334      	movs	r3, #52	; 0x34
    21ac:	2102      	movs	r1, #2
    21ae:	fb03 630c 	mla	r3, r3, ip, r6
    21b2:	6099      	str	r1, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    21b4:	2301      	movs	r3, #1
    21b6:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
    21b8:	2300      	movs	r3, #0
    21ba:	e781      	b.n	20c0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xc0>
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    21bc:	2308      	movs	r3, #8
        err_code = NRFX_ERROR_INVALID_PARAM;
    21be:	4d2a      	ldr	r5, [pc, #168]	; (2268 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x268>)
    21c0:	e77f      	b.n	20c2 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xc2>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
    21c2:	0779      	lsls	r1, r7, #29
            p_cb->int_mask = 0;
    21c4:	bf44      	itt	mi
    21c6:	2300      	movmi	r3, #0
    21c8:	6093      	strmi	r3, [r2, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
    21ca:	067b      	lsls	r3, r7, #25
    21cc:	d406      	bmi.n	21dc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1dc>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
    21ce:	2334      	movs	r3, #52	; 0x34
    21d0:	fb03 630c 	mla	r3, r3, ip, r6
    21d4:	689a      	ldr	r2, [r3, #8]
    21d6:	f042 0202 	orr.w	r2, r2, #2
    21da:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
    21dc:	2334      	movs	r3, #52	; 0x34
    21de:	fb03 660c 	mla	r6, r3, ip, r6
    21e2:	68b3      	ldr	r3, [r6, #8]
    21e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    21e8:	60b3      	str	r3, [r6, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    21ea:	68b3      	ldr	r3, [r6, #8]
    p_reg->INTENSET = mask;
    21ec:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    21f0:	e6f6      	b.n	1fe0 <nrfx_twim_xfer+0x2c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    21f2:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
                transmission_finished = true;
    21f6:	2201      	movs	r2, #1
    21f8:	e77b      	b.n	20f2 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xf2>
        } while (!transmission_finished);
    21fa:	2a00      	cmp	r2, #0
    21fc:	f43f af6f 	beq.w	20de <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xde>
        p_cb->busy = false;
    2200:	2134      	movs	r1, #52	; 0x34
    2202:	2000      	movs	r0, #0
    2204:	fb01 620c 	mla	r2, r1, ip, r6
    uint32_t error_source = p_reg->ERRORSRC;
    2208:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    220c:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
    2210:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
    2214:	b18b      	cbz	r3, 223a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x23a>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    2216:	4a15      	ldr	r2, [pc, #84]	; (226c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x26c>)
    2218:	f013 0f01 	tst.w	r3, #1
    221c:	4d14      	ldr	r5, [pc, #80]	; (2270 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x270>)
    221e:	bf18      	it	ne
    2220:	4615      	movne	r5, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    2222:	f013 0f02 	tst.w	r3, #2
    2226:	f102 0201 	add.w	r2, r2, #1
    222a:	bf18      	it	ne
    222c:	4615      	movne	r5, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    222e:	f013 0f04 	tst.w	r3, #4
    2232:	4b10      	ldr	r3, [pc, #64]	; (2274 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x274>)
    2234:	bf18      	it	ne
    2236:	461d      	movne	r5, r3
    2238:	e6d2      	b.n	1fe0 <nrfx_twim_xfer+0x2c>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
    223a:	067b      	lsls	r3, r7, #25
    223c:	f53f aed0 	bmi.w	1fe0 <nrfx_twim_xfer+0x2c>
                !xfer_completeness_check(p_twim, p_cb))
    2240:	fb0c 6101 	mla	r1, ip, r1, r6
    2244:	4620      	mov	r0, r4
    2246:	f002 fc5f 	bl	4b08 <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
    224a:	4b09      	ldr	r3, [pc, #36]	; (2270 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x270>)
    224c:	2800      	cmp	r0, #0
    224e:	bf08      	it	eq
    2250:	461d      	moveq	r5, r3
    2252:	e6c5      	b.n	1fe0 <nrfx_twim_xfer+0x2c>
    2254:	200006dc 	.word	0x200006dc
    2258:	0bad000a 	.word	0x0bad000a
    225c:	019c0202 	.word	0x019c0202
    2260:	0bad000b 	.word	0x0bad000b
    2264:	0bad0000 	.word	0x0bad0000
    2268:	0bad0004 	.word	0x0bad0004
    226c:	0bae0000 	.word	0x0bae0000
    2270:	0bad0001 	.word	0x0bad0001
    2274:	0bae0002 	.word	0x0bae0002

00002278 <nrfx_twim_2_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_TWIM2_ENABLED)
void nrfx_twim_2_irq_handler(void)
{
    2278:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    227a:	4b56      	ldr	r3, [pc, #344]	; (23d4 <nrfx_twim_2_irq_handler+0x15c>)
    227c:	b087      	sub	sp, #28
    227e:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    2282:	461d      	mov	r5, r3
    2284:	4c54      	ldr	r4, [pc, #336]	; (23d8 <nrfx_twim_2_irq_handler+0x160>)
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    2286:	b1ea      	cbz	r2, 22c4 <nrfx_twim_2_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2288:	2200      	movs	r2, #0
    228a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    228e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    2292:	b9ba      	cbnz	r2, 22c4 <nrfx_twim_2_irq_handler+0x4c>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
    2294:	68a2      	ldr	r2, [r4, #8]
    p_reg->INTENCLR = mask;
    2296:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    229a:	2202      	movs	r2, #2
    229c:	60a2      	str	r2, [r4, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    229e:	68a2      	ldr	r2, [r4, #8]
    p_reg->INTENSET = mask;
    22a0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    22a4:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
    22a8:	b11a      	cbz	r2, 22b2 <nrfx_twim_2_irq_handler+0x3a>
    return p_reg->SHORTS;
    22aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    22ae:	059e      	lsls	r6, r3, #22
    22b0:	d403      	bmi.n	22ba <nrfx_twim_2_irq_handler+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    22b2:	2201      	movs	r2, #1
    22b4:	4b47      	ldr	r3, [pc, #284]	; (23d4 <nrfx_twim_2_irq_handler+0x15c>)
    22b6:	621a      	str	r2, [r3, #32]
    22b8:	615a      	str	r2, [r3, #20]
            p_cb->error = true;
    22ba:	2301      	movs	r3, #1
    22bc:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    twim_irq_handler(NRF_TWIM2, &m_cb[NRFX_TWIM2_INST_IDX]);
}
    22c0:	b007      	add	sp, #28
    22c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    22c4:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    22c8:	2b00      	cmp	r3, #0
    22ca:	d04e      	beq.n	236a <nrfx_twim_2_irq_handler+0xf2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    22cc:	2300      	movs	r3, #0
    22ce:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
    22d2:	6a23      	ldr	r3, [r4, #32]
    22d4:	065d      	lsls	r5, r3, #25
    22d6:	d40a      	bmi.n	22ee <nrfx_twim_2_irq_handler+0x76>
    22d8:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    22dc:	b93b      	cbnz	r3, 22ee <nrfx_twim_2_irq_handler+0x76>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
    22de:	493e      	ldr	r1, [pc, #248]	; (23d8 <nrfx_twim_2_irq_handler+0x160>)
    22e0:	483c      	ldr	r0, [pc, #240]	; (23d4 <nrfx_twim_2_irq_handler+0x15c>)
    22e2:	f002 fc11 	bl	4b08 <xfer_completeness_check>
    22e6:	f080 0001 	eor.w	r0, r0, #1
    22ea:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
    22ee:	6a23      	ldr	r3, [r4, #32]
    22f0:	f013 0704 	ands.w	r7, r3, #4
    22f4:	d11e      	bne.n	2334 <nrfx_twim_2_irq_handler+0xbc>
            event.xfer_desc = p_cb->xfer_desc;
    22f6:	4e39      	ldr	r6, [pc, #228]	; (23dc <nrfx_twim_2_irq_handler+0x164>)
    22f8:	ad01      	add	r5, sp, #4
    22fa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    22fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    22fe:	6833      	ldr	r3, [r6, #0]
    2300:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
    2304:	602b      	str	r3, [r5, #0]
    2306:	4b33      	ldr	r3, [pc, #204]	; (23d4 <nrfx_twim_2_irq_handler+0x15c>)
    2308:	f8c3 7160 	str.w	r7, [r3, #352]	; 0x160
    230c:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
    2310:	f1bc 0f00 	cmp.w	ip, #0
    2314:	d002      	beq.n	231c <nrfx_twim_2_irq_handler+0xa4>
    2316:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    231a:	b15a      	cbz	r2, 2334 <nrfx_twim_2_irq_handler+0xbc>
    p_reg->SHORTS = mask;
    231c:	2200      	movs	r2, #0
    231e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                p_cb->int_mask = 0;
    2322:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
    2324:	4a2e      	ldr	r2, [pc, #184]	; (23e0 <nrfx_twim_2_irq_handler+0x168>)
    2326:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    232a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    232e:	4b2d      	ldr	r3, [pc, #180]	; (23e4 <nrfx_twim_2_irq_handler+0x16c>)
    2330:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    uint32_t error_source = p_reg->ERRORSRC;
    2334:	4a27      	ldr	r2, [pc, #156]	; (23d4 <nrfx_twim_2_irq_handler+0x15c>)
    2336:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
    233a:	0798      	lsls	r0, r3, #30
    p_reg->ERRORSRC = error_source;
    233c:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
    2340:	d53a      	bpl.n	23b8 <nrfx_twim_2_irq_handler+0x140>
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
    2342:	2301      	movs	r3, #1
        event.type = NRFX_TWIM_EVT_DONE;
    2344:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
    2348:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    234c:	b90b      	cbnz	r3, 2352 <nrfx_twim_2_irq_handler+0xda>
        p_cb->busy = false;
    234e:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    2352:	6a23      	ldr	r3, [r4, #32]
    2354:	075b      	lsls	r3, r3, #29
    2356:	d503      	bpl.n	2360 <nrfx_twim_2_irq_handler+0xe8>
    2358:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    235c:	2b00      	cmp	r3, #0
    235e:	d0af      	beq.n	22c0 <nrfx_twim_2_irq_handler+0x48>
        p_cb->handler(&event, p_cb->p_context);
    2360:	e9d4 3100 	ldrd	r3, r1, [r4]
    2364:	4668      	mov	r0, sp
    2366:	4798      	blx	r3
}
    2368:	e7aa      	b.n	22c0 <nrfx_twim_2_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    236a:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
    236e:	7b23      	ldrb	r3, [r4, #12]
    2370:	b983      	cbnz	r3, 2394 <nrfx_twim_2_irq_handler+0x11c>
            event.xfer_desc = p_cb->xfer_desc;
    2372:	4f1a      	ldr	r7, [pc, #104]	; (23dc <nrfx_twim_2_irq_handler+0x164>)
    2374:	ae01      	add	r6, sp, #4
    2376:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    2378:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    237a:	683b      	ldr	r3, [r7, #0]
    237c:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
    237e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    2382:	2b00      	cmp	r3, #0
    2384:	d1d6      	bne.n	2334 <nrfx_twim_2_irq_handler+0xbc>
    p_reg->SHORTS = mask;
    2386:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
    238a:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    238c:	4b14      	ldr	r3, [pc, #80]	; (23e0 <nrfx_twim_2_irq_handler+0x168>)
    238e:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    2392:	e7ca      	b.n	232a <nrfx_twim_2_irq_handler+0xb2>
    p_reg->SHORTS = mask;
    2394:	f44f 7300 	mov.w	r3, #512	; 0x200
    2398:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
    239c:	f240 2302 	movw	r3, #514	; 0x202
    23a0:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    23a2:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
    23a6:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    23aa:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
    23ac:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    23b0:	2301      	movs	r3, #1
    23b2:	60ab      	str	r3, [r5, #8]
    23b4:	622b      	str	r3, [r5, #32]
            return;
    23b6:	e783      	b.n	22c0 <nrfx_twim_2_irq_handler+0x48>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
    23b8:	0759      	lsls	r1, r3, #29
    23ba:	d501      	bpl.n	23c0 <nrfx_twim_2_irq_handler+0x148>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
    23bc:	2302      	movs	r3, #2
    23be:	e7c1      	b.n	2344 <nrfx_twim_2_irq_handler+0xcc>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
    23c0:	07da      	lsls	r2, r3, #31
    23c2:	d501      	bpl.n	23c8 <nrfx_twim_2_irq_handler+0x150>
        event.type = NRFX_TWIM_EVT_OVERRUN;
    23c4:	2303      	movs	r3, #3
    23c6:	e7bd      	b.n	2344 <nrfx_twim_2_irq_handler+0xcc>
    else if (p_cb->error)
    23c8:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    23cc:	2b00      	cmp	r3, #0
    23ce:	d0b9      	beq.n	2344 <nrfx_twim_2_irq_handler+0xcc>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
    23d0:	2304      	movs	r3, #4
    23d2:	e7b7      	b.n	2344 <nrfx_twim_2_irq_handler+0xcc>
    23d4:	5000a000 	.word	0x5000a000
    23d8:	200006dc 	.word	0x200006dc
    23dc:	200006e8 	.word	0x200006e8
    23e0:	019c0202 	.word	0x019c0202
    23e4:	e000e100 	.word	0xe000e100

000023e8 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(s32_t level)
{
    23e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			if (dev) {
				/* Initialization failed. Clear the API struct
				 * so that device_get_binding() will not succeed
				 * for it.
				 */
				dev->driver_api = NULL;
    23ea:	2700      	movs	r7, #0
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    23ec:	4b08      	ldr	r3, [pc, #32]	; (2410 <z_sys_init_run_level+0x28>)
    23ee:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    23f2:	3001      	adds	r0, #1
    23f4:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    23f8:	42a6      	cmp	r6, r4
    23fa:	d800      	bhi.n	23fe <z_sys_init_run_level+0x16>
			}
		}
	}
}
    23fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		retval = entry->init(dev);
    23fe:	e9d4 3500 	ldrd	r3, r5, [r4]
    2402:	4628      	mov	r0, r5
    2404:	4798      	blx	r3
		if (retval != 0) {
    2406:	b108      	cbz	r0, 240c <z_sys_init_run_level+0x24>
			if (dev) {
    2408:	b105      	cbz	r5, 240c <z_sys_init_run_level+0x24>
				dev->driver_api = NULL;
    240a:	60af      	str	r7, [r5, #8]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    240c:	3408      	adds	r4, #8
    240e:	e7f3      	b.n	23f8 <z_sys_init_run_level+0x10>
    2410:	00005294 	.word	0x00005294

00002414 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
    2414:	4b0f      	ldr	r3, [pc, #60]	; (2454 <z_impl_device_get_binding+0x40>)
{
    2416:	b570      	push	{r4, r5, r6, lr}
    2418:	4605      	mov	r5, r0
    241a:	461e      	mov	r6, r3
	for (dev = __device_start; dev != __device_end; dev++) {
    241c:	4c0e      	ldr	r4, [pc, #56]	; (2458 <z_impl_device_get_binding+0x44>)
    241e:	429c      	cmp	r4, r3
    2420:	d104      	bne.n	242c <z_impl_device_get_binding+0x18>
		    (dev->name == name)) {
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
    2422:	4c0d      	ldr	r4, [pc, #52]	; (2458 <z_impl_device_get_binding+0x44>)
    2424:	42b4      	cmp	r4, r6
    2426:	d108      	bne.n	243a <z_impl_device_get_binding+0x26>
		    (strcmp(name, dev->name) == 0)) {
			return dev;
		}
	}

	return NULL;
    2428:	2400      	movs	r4, #0
    242a:	e010      	b.n	244e <z_impl_device_get_binding+0x3a>
		if ((dev->driver_api != NULL) &&
    242c:	68a2      	ldr	r2, [r4, #8]
    242e:	b112      	cbz	r2, 2436 <z_impl_device_get_binding+0x22>
    2430:	6822      	ldr	r2, [r4, #0]
    2432:	42aa      	cmp	r2, r5
    2434:	d00b      	beq.n	244e <z_impl_device_get_binding+0x3a>
	for (dev = __device_start; dev != __device_end; dev++) {
    2436:	3410      	adds	r4, #16
    2438:	e7f1      	b.n	241e <z_impl_device_get_binding+0xa>
		if ((dev->driver_api != NULL) &&
    243a:	68a3      	ldr	r3, [r4, #8]
    243c:	b90b      	cbnz	r3, 2442 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    243e:	3410      	adds	r4, #16
    2440:	e7f0      	b.n	2424 <z_impl_device_get_binding+0x10>
		    (strcmp(name, dev->name) == 0)) {
    2442:	6821      	ldr	r1, [r4, #0]
    2444:	4628      	mov	r0, r5
    2446:	f002 fa55 	bl	48f4 <strcmp>
		if ((dev->driver_api != NULL) &&
    244a:	2800      	cmp	r0, #0
    244c:	d1f7      	bne.n	243e <z_impl_device_get_binding+0x2a>
}
    244e:	4620      	mov	r0, r4
    2450:	bd70      	pop	{r4, r5, r6, pc}
    2452:	bf00      	nop
    2454:	2000011c 	.word	0x2000011c
    2458:	200000bc 	.word	0x200000bc

0000245c <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    245c:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    245e:	4d0b      	ldr	r5, [pc, #44]	; (248c <idle+0x30>)
    2460:	f04f 0220 	mov.w	r2, #32
    2464:	f3ef 8311 	mrs	r3, BASEPRI
    2468:	f382 8811 	msr	BASEPRI, r2
    246c:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
    2470:	f002 fc9f 	bl	4db2 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    2474:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
    2476:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    2478:	2802      	cmp	r0, #2
    247a:	bfd8      	it	le
    247c:	4608      	movle	r0, r1
    247e:	f002 fca8 	bl	4dd2 <z_set_timeout_expiry>
	_kernel.idle = ticks;
    2482:	622c      	str	r4, [r5, #32]
    2484:	f7fe fe5c 	bl	1140 <arch_cpu_idle>
    2488:	e7ea      	b.n	2460 <idle+0x4>
    248a:	bf00      	nop
    248c:	200007f8 	.word	0x200007f8

00002490 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    2490:	4802      	ldr	r0, [pc, #8]	; (249c <z_bss_zero+0xc>)
    2492:	4a03      	ldr	r2, [pc, #12]	; (24a0 <z_bss_zero+0x10>)
    2494:	2100      	movs	r1, #0
    2496:	1a12      	subs	r2, r2, r0
    2498:	f002 ba89 	b.w	49ae <memset>
    249c:	20000180 	.word	0x20000180
    24a0:	20000858 	.word	0x20000858

000024a4 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    24a4:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    24a6:	4806      	ldr	r0, [pc, #24]	; (24c0 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    24a8:	4a06      	ldr	r2, [pc, #24]	; (24c4 <z_data_copy+0x20>)
    24aa:	4907      	ldr	r1, [pc, #28]	; (24c8 <z_data_copy+0x24>)
    24ac:	1a12      	subs	r2, r2, r0
    24ae:	f002 fa54 	bl	495a <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    24b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    24b6:	4a05      	ldr	r2, [pc, #20]	; (24cc <z_data_copy+0x28>)
    24b8:	4905      	ldr	r1, [pc, #20]	; (24d0 <z_data_copy+0x2c>)
    24ba:	4806      	ldr	r0, [pc, #24]	; (24d4 <z_data_copy+0x30>)
    24bc:	f002 ba4d 	b.w	495a <memcpy>
    24c0:	20000000 	.word	0x20000000
    24c4:	20000180 	.word	0x20000180
    24c8:	000057ac 	.word	0x000057ac
    24cc:	00000000 	.word	0x00000000
    24d0:	000057ac 	.word	0x000057ac
    24d4:	20000000 	.word	0x20000000

000024d8 <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
    24d8:	2201      	movs	r2, #1
{
    24da:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    24dc:	4b0b      	ldr	r3, [pc, #44]	; (250c <bg_thread_main+0x34>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    24de:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    24e0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    24e2:	f7ff ff81 	bl	23e8 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    24e6:	4a0a      	ldr	r2, [pc, #40]	; (2510 <bg_thread_main+0x38>)
    24e8:	490a      	ldr	r1, [pc, #40]	; (2514 <bg_thread_main+0x3c>)
    24ea:	480b      	ldr	r0, [pc, #44]	; (2518 <bg_thread_main+0x40>)
    24ec:	f001 ff9f 	bl	442e <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    24f0:	2003      	movs	r0, #3
    24f2:	f7ff ff79 	bl	23e8 <z_sys_init_run_level>

	z_init_static_threads();
    24f6:	f000 fd8f 	bl	3018 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    24fa:	f001 fe11 	bl	4120 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    24fe:	4a07      	ldr	r2, [pc, #28]	; (251c <bg_thread_main+0x44>)
    2500:	7b13      	ldrb	r3, [r2, #12]
    2502:	f023 0301 	bic.w	r3, r3, #1
    2506:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    2508:	bd08      	pop	{r3, pc}
    250a:	bf00      	nop
    250c:	20000855 	.word	0x20000855
    2510:	000053e6 	.word	0x000053e6
    2514:	0000575b 	.word	0x0000575b
    2518:	0000577b 	.word	0x0000577b
    251c:	20000784 	.word	0x20000784

00002520 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    2520:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(z_interrupt_stacks[0])) +
    2524:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 2620 <z_cstart+0x100>
    2528:	b0a5      	sub	sp, #148	; 0x94
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    252a:	f389 8808 	msr	MSP, r9
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    252e:	2400      	movs	r4, #0
    2530:	23e0      	movs	r3, #224	; 0xe0
    2532:	4d34      	ldr	r5, [pc, #208]	; (2604 <z_cstart+0xe4>)
	z_setup_new_thread(&z_main_thread, z_main_stack,
    2534:	f04f 0b01 	mov.w	fp, #1
    2538:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    253c:	77ec      	strb	r4, [r5, #31]
    253e:	762c      	strb	r4, [r5, #24]
    2540:	766c      	strb	r4, [r5, #25]
    2542:	76ac      	strb	r4, [r5, #26]
    2544:	76ec      	strb	r4, [r5, #27]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    2546:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
    2548:	4e2f      	ldr	r6, [pc, #188]	; (2608 <z_cstart+0xe8>)
    254a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    254e:	626b      	str	r3, [r5, #36]	; 0x24
		      SCB_SHCSR_BUSFAULTENA_Msk;
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* Enable Secure Fault */
	SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
    2550:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
    2552:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 2624 <z_cstart+0x104>
    2556:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    255a:	626b      	str	r3, [r5, #36]	; 0x24
	/* Clear BFAR before setting BusFaults to target Non-Secure state. */
	SCB->BFAR = 0;
    255c:	63ac      	str	r4, [r5, #56]	; 0x38

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    255e:	f7fe ff6f 	bl	1440 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    2562:	f7fe fde7 	bl	1134 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    2566:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    256a:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    256c:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    256e:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = 0;
#endif

	_current_cpu->current = dummy_thread;
    2572:	4d26      	ldr	r5, [pc, #152]	; (260c <z_cstart+0xec>)
	dummy_thread->base.user_options = K_ESSENTIAL;
    2574:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	_current_cpu->current = dummy_thread;
    2578:	ab07      	add	r3, sp, #28
    257a:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    257c:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
    257e:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
    2582:	f7ff ff31 	bl	23e8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    2586:	2001      	movs	r0, #1
    2588:	f7ff ff2e 	bl	23e8 <z_sys_init_run_level>
	z_setup_new_thread(&z_main_thread, z_main_stack,
    258c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 2628 <z_cstart+0x108>
	z_sched_init();
    2590:	f000 fc54 	bl	2e3c <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
    2594:	4b1e      	ldr	r3, [pc, #120]	; (2610 <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
    2596:	626e      	str	r6, [r5, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
    2598:	f44f 6280 	mov.w	r2, #1024	; 0x400
    259c:	4641      	mov	r1, r8
    259e:	9305      	str	r3, [sp, #20]
    25a0:	4630      	mov	r0, r6
    25a2:	4653      	mov	r3, sl
    25a4:	e9cd 4b03 	strd	r4, fp, [sp, #12]
    25a8:	e9cd 4401 	strd	r4, r4, [sp, #4]
    25ac:	9400      	str	r4, [sp, #0]
    25ae:	f000 fd0d 	bl	2fcc <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    25b2:	7b73      	ldrb	r3, [r6, #13]
	z_ready_thread(&z_main_thread);
    25b4:	4630      	mov	r0, r6
    25b6:	f023 0304 	bic.w	r3, r3, #4
    25ba:	7373      	strb	r3, [r6, #13]
    25bc:	f002 fb3a 	bl	4c34 <z_ready_thread>
	z_setup_new_thread(thread, stack,
    25c0:	230f      	movs	r3, #15
    25c2:	4f14      	ldr	r7, [pc, #80]	; (2614 <z_cstart+0xf4>)
    25c4:	e9cd 4302 	strd	r4, r3, [sp, #8]
    25c8:	f44f 72a0 	mov.w	r2, #320	; 0x140
    25cc:	4b12      	ldr	r3, [pc, #72]	; (2618 <z_cstart+0xf8>)
    25ce:	4913      	ldr	r1, [pc, #76]	; (261c <z_cstart+0xfc>)
    25d0:	4638      	mov	r0, r7
    25d2:	e9cd b404 	strd	fp, r4, [sp, #16]
    25d6:	e9cd 4400 	strd	r4, r4, [sp]
    25da:	f000 fcf7 	bl	2fcc <z_setup_new_thread>
    25de:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    25e0:	60ef      	str	r7, [r5, #12]
    25e2:	f023 0304 	bic.w	r3, r3, #4
    25e6:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    25e8:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
    25ec:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
    25f0:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
    25f2:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
    25f6:	4653      	mov	r3, sl
    25f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    25fc:	4641      	mov	r1, r8
    25fe:	4630      	mov	r0, r6
    2600:	f7fe fd7a 	bl	10f8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    2604:	e000ed00 	.word	0xe000ed00
    2608:	20000784 	.word	0x20000784
    260c:	200007f8 	.word	0x200007f8
    2610:	000057a2 	.word	0x000057a2
    2614:	20000710 	.word	0x20000710
    2618:	0000245d 	.word	0x0000245d
    261c:	20000c58 	.word	0x20000c58
    2620:	20001598 	.word	0x20001598
    2624:	000024d9 	.word	0x000024d9
    2628:	20000858 	.word	0x20000858

0000262c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
    262c:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    262e:	4b0e      	ldr	r3, [pc, #56]	; (2668 <init_mem_slab_module+0x3c>)
    2630:	4c0e      	ldr	r4, [pc, #56]	; (266c <init_mem_slab_module+0x40>)
    2632:	42a3      	cmp	r3, r4
    2634:	d301      	bcc.n	263a <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
    2636:	2000      	movs	r0, #0
	return rc;
}
    2638:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    263a:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    263e:	ea41 0200 	orr.w	r2, r1, r0
    2642:	f012 0203 	ands.w	r2, r2, #3
    2646:	d10b      	bne.n	2660 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    2648:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    264a:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    264c:	42aa      	cmp	r2, r5
    264e:	d101      	bne.n	2654 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    2650:	331c      	adds	r3, #28
    2652:	e7ee      	b.n	2632 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    2654:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    2656:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
    2658:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
    265a:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    265c:	4401      	add	r1, r0
    265e:	e7f5      	b.n	264c <init_mem_slab_module+0x20>
		return -EINVAL;
    2660:	f06f 0015 	mvn.w	r0, #21
	return rc;
    2664:	e7e8      	b.n	2638 <init_mem_slab_module+0xc>
    2666:	bf00      	nop
    2668:	2000011c 	.word	0x2000011c
    266c:	2000011c 	.word	0x2000011c

00002670 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    2670:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
    2672:	460c      	mov	r4, r1
    2674:	4616      	mov	r6, r2
    2676:	461f      	mov	r7, r3
    2678:	f04f 0320 	mov.w	r3, #32
    267c:	f3ef 8111 	mrs	r1, BASEPRI
    2680:	f383 8811 	msr	BASEPRI, r3
    2684:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
    2688:	6943      	ldr	r3, [r0, #20]
    268a:	b15b      	cbz	r3, 26a4 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
    268c:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    268e:	681b      	ldr	r3, [r3, #0]
    2690:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    2692:	6983      	ldr	r3, [r0, #24]
    2694:	3301      	adds	r3, #1
    2696:	6183      	str	r3, [r0, #24]
		result = 0;
    2698:	2000      	movs	r0, #0
	__asm__ volatile(
    269a:	f381 8811 	msr	BASEPRI, r1
    269e:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
    26a2:	e011      	b.n	26c8 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    26a4:	ea56 0207 	orrs.w	r2, r6, r7
    26a8:	d103      	bne.n	26b2 <k_mem_slab_alloc+0x42>
		*mem = NULL;
    26aa:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    26ac:	f06f 000b 	mvn.w	r0, #11
    26b0:	e7f3      	b.n	269a <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
    26b2:	4602      	mov	r2, r0
    26b4:	e9cd 6700 	strd	r6, r7, [sp]
    26b8:	4804      	ldr	r0, [pc, #16]	; (26cc <k_mem_slab_alloc+0x5c>)
    26ba:	f000 fb67 	bl	2d8c <z_pend_curr>
		if (result == 0) {
    26be:	b918      	cbnz	r0, 26c8 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
    26c0:	4b03      	ldr	r3, [pc, #12]	; (26d0 <k_mem_slab_alloc+0x60>)
    26c2:	689b      	ldr	r3, [r3, #8]
    26c4:	695b      	ldr	r3, [r3, #20]
    26c6:	6023      	str	r3, [r4, #0]
}
    26c8:	b002      	add	sp, #8
    26ca:	bdd0      	pop	{r4, r6, r7, pc}
    26cc:	20000856 	.word	0x20000856
    26d0:	200007f8 	.word	0x200007f8

000026d4 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    26d4:	b570      	push	{r4, r5, r6, lr}
    26d6:	4604      	mov	r4, r0
    26d8:	460d      	mov	r5, r1
	__asm__ volatile(
    26da:	f04f 0320 	mov.w	r3, #32
    26de:	f3ef 8611 	mrs	r6, BASEPRI
    26e2:	f383 8811 	msr	BASEPRI, r3
    26e6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    26ea:	f002 fb17 	bl	4d1c <z_unpend_first_thread>

	if (pending_thread != NULL) {
    26ee:	b158      	cbz	r0, 2708 <k_mem_slab_free+0x34>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    26f0:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    26f2:	682a      	ldr	r2, [r5, #0]
    26f4:	6701      	str	r1, [r0, #112]	; 0x70
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    26f6:	6142      	str	r2, [r0, #20]
		z_ready_thread(pending_thread);
    26f8:	f002 fa9c 	bl	4c34 <z_ready_thread>
		z_reschedule(&lock, key);
    26fc:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
    26fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
    2702:	4808      	ldr	r0, [pc, #32]	; (2724 <k_mem_slab_free+0x50>)
    2704:	f002 ba6f 	b.w	4be6 <z_reschedule>
		**(char ***)mem = slab->free_list;
    2708:	682b      	ldr	r3, [r5, #0]
    270a:	6962      	ldr	r2, [r4, #20]
    270c:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
    270e:	682b      	ldr	r3, [r5, #0]
    2710:	6163      	str	r3, [r4, #20]
		slab->num_used--;
    2712:	69a3      	ldr	r3, [r4, #24]
    2714:	3b01      	subs	r3, #1
    2716:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    2718:	f386 8811 	msr	BASEPRI, r6
    271c:	f3bf 8f6f 	isb	sy
}
    2720:	bd70      	pop	{r4, r5, r6, pc}
    2722:	bf00      	nop
    2724:	20000856 	.word	0x20000856

00002728 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    2728:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    272c:	4604      	mov	r4, r0
    272e:	4616      	mov	r6, r2
    2730:	461f      	mov	r7, r3
	__asm__ volatile(
    2732:	f04f 0320 	mov.w	r3, #32
    2736:	f3ef 8811 	mrs	r8, BASEPRI
    273a:	f383 8811 	msr	BASEPRI, r3
    273e:	f3bf 8f6f 	isb	sy
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    2742:	68c3      	ldr	r3, [r0, #12]
    2744:	4a32      	ldr	r2, [pc, #200]	; (2810 <z_impl_k_mutex_lock+0xe8>)
    2746:	b16b      	cbz	r3, 2764 <z_impl_k_mutex_lock+0x3c>
    2748:	6880      	ldr	r0, [r0, #8]
    274a:	6891      	ldr	r1, [r2, #8]
    274c:	4288      	cmp	r0, r1
    274e:	d019      	beq.n	2784 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    2750:	ea56 0307 	orrs.w	r3, r6, r7
    2754:	d118      	bne.n	2788 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    2756:	f388 8811 	msr	BASEPRI, r8
    275a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
    275e:	f06f 000f 	mvn.w	r0, #15
    2762:	e00c      	b.n	277e <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    2764:	6891      	ldr	r1, [r2, #8]
    2766:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    276a:	3301      	adds	r3, #1
    276c:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    276e:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    2770:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    2772:	60a3      	str	r3, [r4, #8]
    2774:	f388 8811 	msr	BASEPRI, r8
    2778:	f3bf 8f6f 	isb	sy
		return 0;
    277c:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
    277e:	b002      	add	sp, #8
    2780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    2784:	6921      	ldr	r1, [r4, #16]
    2786:	e7f0      	b.n	276a <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    2788:	f990 300e 	ldrsb.w	r3, [r0, #14]
    278c:	f991 100e 	ldrsb.w	r1, [r1, #14]
    2790:	4299      	cmp	r1, r3
    2792:	bfa8      	it	ge
    2794:	4619      	movge	r1, r3
    2796:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    279a:	4299      	cmp	r1, r3
    279c:	da2c      	bge.n	27f8 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
    279e:	f000 fb09 	bl	2db4 <z_set_prio>
    27a2:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    27a4:	e9cd 6700 	strd	r6, r7, [sp]
    27a8:	4622      	mov	r2, r4
    27aa:	4641      	mov	r1, r8
    27ac:	4819      	ldr	r0, [pc, #100]	; (2814 <z_impl_k_mutex_lock+0xec>)
    27ae:	f000 faed 	bl	2d8c <z_pend_curr>
	if (got_mutex == 0) {
    27b2:	2800      	cmp	r0, #0
    27b4:	d0e3      	beq.n	277e <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    27b6:	f04f 0320 	mov.w	r3, #32
    27ba:	f3ef 8611 	mrs	r6, BASEPRI
    27be:	f383 8811 	msr	BASEPRI, r3
    27c2:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    27c6:	6823      	ldr	r3, [r4, #0]
    27c8:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    27ca:	429c      	cmp	r4, r3
    27cc:	d007      	beq.n	27de <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    27ce:	b133      	cbz	r3, 27de <z_impl_k_mutex_lock+0xb6>
    27d0:	f993 300e 	ldrsb.w	r3, [r3, #14]
    27d4:	4299      	cmp	r1, r3
    27d6:	bfa8      	it	ge
    27d8:	4619      	movge	r1, r3
    27da:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    27de:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    27e0:	f990 300e 	ldrsb.w	r3, [r0, #14]
    27e4:	4299      	cmp	r1, r3
    27e6:	d109      	bne.n	27fc <z_impl_k_mutex_lock+0xd4>
	if (resched) {
    27e8:	b16d      	cbz	r5, 2806 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    27ea:	4631      	mov	r1, r6
    27ec:	4809      	ldr	r0, [pc, #36]	; (2814 <z_impl_k_mutex_lock+0xec>)
    27ee:	f002 f9fa 	bl	4be6 <z_reschedule>
	return -EAGAIN;
    27f2:	f06f 000a 	mvn.w	r0, #10
    27f6:	e7c2      	b.n	277e <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    27f8:	2500      	movs	r5, #0
    27fa:	e7d3      	b.n	27a4 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
    27fc:	f000 fada 	bl	2db4 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    2800:	2800      	cmp	r0, #0
    2802:	d1f2      	bne.n	27ea <z_impl_k_mutex_lock+0xc2>
    2804:	e7f0      	b.n	27e8 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
    2806:	f386 8811 	msr	BASEPRI, r6
    280a:	f3bf 8f6f 	isb	sy
    280e:	e7f0      	b.n	27f2 <z_impl_k_mutex_lock+0xca>
    2810:	200007f8 	.word	0x200007f8
    2814:	20000856 	.word	0x20000856

00002818 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    2818:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	CHECKIF(mutex->owner == NULL) {
    281a:	6883      	ldr	r3, [r0, #8]
{
    281c:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    281e:	2b00      	cmp	r3, #0
    2820:	d036      	beq.n	2890 <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    2822:	4a1e      	ldr	r2, [pc, #120]	; (289c <z_impl_k_mutex_unlock+0x84>)
    2824:	6892      	ldr	r2, [r2, #8]
    2826:	4293      	cmp	r3, r2
    2828:	d135      	bne.n	2896 <z_impl_k_mutex_unlock+0x7e>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    282a:	7bda      	ldrb	r2, [r3, #15]
    282c:	3a01      	subs	r2, #1
    282e:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
    2830:	68c3      	ldr	r3, [r0, #12]
    2832:	2b01      	cmp	r3, #1
    2834:	d005      	beq.n	2842 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    2836:	3b01      	subs	r3, #1
    2838:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
    283a:	f000 f8c3 	bl	29c4 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
    283e:	2000      	movs	r0, #0
}
    2840:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    2842:	f04f 0320 	mov.w	r3, #32
    2846:	f3ef 8511 	mrs	r5, BASEPRI
    284a:	f383 8811 	msr	BASEPRI, r3
    284e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    2852:	6901      	ldr	r1, [r0, #16]
    2854:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    2856:	f990 300e 	ldrsb.w	r3, [r0, #14]
    285a:	4299      	cmp	r1, r3
    285c:	d001      	beq.n	2862 <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
    285e:	f000 faa9 	bl	2db4 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    2862:	4620      	mov	r0, r4
    2864:	f002 fa5a 	bl	4d1c <z_unpend_first_thread>
	mutex->owner = new_owner;
    2868:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    286a:	b158      	cbz	r0, 2884 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
    286c:	f990 200e 	ldrsb.w	r2, [r0, #14]
    2870:	6122      	str	r2, [r4, #16]
    2872:	2200      	movs	r2, #0
    2874:	6702      	str	r2, [r0, #112]	; 0x70
		z_ready_thread(new_owner);
    2876:	f002 f9dd 	bl	4c34 <z_ready_thread>
		z_reschedule(&lock, key);
    287a:	4629      	mov	r1, r5
    287c:	4808      	ldr	r0, [pc, #32]	; (28a0 <z_impl_k_mutex_unlock+0x88>)
    287e:	f002 f9b2 	bl	4be6 <z_reschedule>
    2882:	e7da      	b.n	283a <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    2884:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    2886:	f385 8811 	msr	BASEPRI, r5
    288a:	f3bf 8f6f 	isb	sy
    288e:	e7d4      	b.n	283a <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    2890:	f06f 0015 	mvn.w	r0, #21
    2894:	e7d4      	b.n	2840 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    2896:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    289a:	e7d1      	b.n	2840 <z_impl_k_mutex_unlock+0x28>
    289c:	200007f8 	.word	0x200007f8
    28a0:	20000856 	.word	0x20000856

000028a4 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    28a4:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    28a6:	4c08      	ldr	r4, [pc, #32]	; (28c8 <z_reset_time_slice+0x24>)
    28a8:	6823      	ldr	r3, [r4, #0]
    28aa:	b15b      	cbz	r3, 28c4 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    28ac:	f7fe f84a 	bl	944 <z_clock_elapsed>
    28b0:	6823      	ldr	r3, [r4, #0]
    28b2:	4a06      	ldr	r2, [pc, #24]	; (28cc <z_reset_time_slice+0x28>)
    28b4:	4418      	add	r0, r3
    28b6:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    28b8:	2100      	movs	r1, #0
	}
}
    28ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
    28be:	4618      	mov	r0, r3
    28c0:	f002 ba87 	b.w	4dd2 <z_set_timeout_expiry>
}
    28c4:	bd10      	pop	{r4, pc}
    28c6:	bf00      	nop
    28c8:	20000830 	.word	0x20000830
    28cc:	200007f8 	.word	0x200007f8

000028d0 <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
    28d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    28d2:	460d      	mov	r5, r1
	__asm__ volatile(
    28d4:	f04f 0320 	mov.w	r3, #32
    28d8:	f3ef 8411 	mrs	r4, BASEPRI
    28dc:	f383 8811 	msr	BASEPRI, r3
    28e0:	f3bf 8f6f 	isb	sy
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
    28e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    28e8:	f240 36e7 	movw	r6, #999	; 0x3e7
    28ec:	2700      	movs	r7, #0
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    28ee:	2200      	movs	r2, #0
    28f0:	fbe1 6700 	umlal	r6, r7, r1, r0
    28f4:	4b09      	ldr	r3, [pc, #36]	; (291c <k_sched_time_slice_set+0x4c>)
    28f6:	4630      	mov	r0, r6
    28f8:	611a      	str	r2, [r3, #16]
    28fa:	4639      	mov	r1, r7
    28fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2900:	2300      	movs	r3, #0
    2902:	f7fd fc9b 	bl	23c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    2906:	4b06      	ldr	r3, [pc, #24]	; (2920 <k_sched_time_slice_set+0x50>)
    2908:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    290a:	4b06      	ldr	r3, [pc, #24]	; (2924 <k_sched_time_slice_set+0x54>)
    290c:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    290e:	f7ff ffc9 	bl	28a4 <z_reset_time_slice>
	__asm__ volatile(
    2912:	f384 8811 	msr	BASEPRI, r4
    2916:	f3bf 8f6f 	isb	sy
	}
}
    291a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    291c:	200007f8 	.word	0x200007f8
    2920:	20000830 	.word	0x20000830
    2924:	2000082c 	.word	0x2000082c

00002928 <k_sched_lock>:
	__asm__ volatile(
    2928:	f04f 0320 	mov.w	r3, #32
    292c:	f3ef 8111 	mrs	r1, BASEPRI
    2930:	f383 8811 	msr	BASEPRI, r3
    2934:	f3bf 8f6f 	isb	sy
    2938:	4b04      	ldr	r3, [pc, #16]	; (294c <k_sched_lock+0x24>)
    293a:	689a      	ldr	r2, [r3, #8]
    293c:	7bd3      	ldrb	r3, [r2, #15]
    293e:	3b01      	subs	r3, #1
    2940:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    2942:	f381 8811 	msr	BASEPRI, r1
    2946:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    294a:	4770      	bx	lr
    294c:	200007f8 	.word	0x200007f8

00002950 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    2950:	4b09      	ldr	r3, [pc, #36]	; (2978 <z_priq_dumb_remove+0x28>)
    2952:	f103 0228 	add.w	r2, r3, #40	; 0x28
    2956:	4282      	cmp	r2, r0
    2958:	d105      	bne.n	2966 <z_priq_dumb_remove+0x16>
    295a:	689b      	ldr	r3, [r3, #8]
    295c:	428b      	cmp	r3, r1
    295e:	d102      	bne.n	2966 <z_priq_dumb_remove+0x16>
    2960:	7b4b      	ldrb	r3, [r1, #13]
    2962:	06db      	lsls	r3, r3, #27
    2964:	d106      	bne.n	2974 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    2966:	e9d1 3200 	ldrd	r3, r2, [r1]
    296a:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    296c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    296e:	2300      	movs	r3, #0
	node->prev = NULL;
    2970:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    2974:	4770      	bx	lr
    2976:	bf00      	nop
    2978:	200007f8 	.word	0x200007f8

0000297c <update_cache>:
{
    297c:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    297e:	4c10      	ldr	r4, [pc, #64]	; (29c0 <update_cache+0x44>)
{
    2980:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    2982:	f104 0028 	add.w	r0, r4, #40	; 0x28
    2986:	f002 f94f 	bl	4c28 <z_priq_dumb_best>
    298a:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
    298c:	68a3      	ldr	r3, [r4, #8]
    298e:	7b59      	ldrb	r1, [r3, #13]
    2990:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
    2992:	bf44      	itt	mi
    2994:	f041 0108 	orrmi.w	r1, r1, #8
    2998:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
    299a:	b905      	cbnz	r5, 299e <update_cache+0x22>
    299c:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
    299e:	b94e      	cbnz	r6, 29b4 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
    29a0:	7b5a      	ldrb	r2, [r3, #13]
    29a2:	06d2      	lsls	r2, r2, #27
    29a4:	d106      	bne.n	29b4 <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    29a6:	69aa      	ldr	r2, [r5, #24]
    29a8:	b922      	cbnz	r2, 29b4 <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
    29aa:	89da      	ldrh	r2, [r3, #14]
    29ac:	2a7f      	cmp	r2, #127	; 0x7f
    29ae:	d901      	bls.n	29b4 <update_cache+0x38>
		_kernel.ready_q.cache = _current;
    29b0:	6263      	str	r3, [r4, #36]	; 0x24
}
    29b2:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
    29b4:	42ab      	cmp	r3, r5
    29b6:	d001      	beq.n	29bc <update_cache+0x40>
			z_reset_time_slice();
    29b8:	f7ff ff74 	bl	28a4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    29bc:	6265      	str	r5, [r4, #36]	; 0x24
}
    29be:	e7f8      	b.n	29b2 <update_cache+0x36>
    29c0:	200007f8 	.word	0x200007f8

000029c4 <k_sched_unlock>:
{
    29c4:	b510      	push	{r4, lr}
	__asm__ volatile(
    29c6:	f04f 0320 	mov.w	r3, #32
    29ca:	f3ef 8411 	mrs	r4, BASEPRI
    29ce:	f383 8811 	msr	BASEPRI, r3
    29d2:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    29d6:	4b08      	ldr	r3, [pc, #32]	; (29f8 <k_sched_unlock+0x34>)
		update_cache(0);
    29d8:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    29da:	689a      	ldr	r2, [r3, #8]
    29dc:	7bd3      	ldrb	r3, [r2, #15]
    29de:	3301      	adds	r3, #1
    29e0:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    29e2:	f7ff ffcb 	bl	297c <update_cache>
	__asm__ volatile(
    29e6:	f384 8811 	msr	BASEPRI, r4
    29ea:	f3bf 8f6f 	isb	sy
}
    29ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    29f2:	f002 b90f 	b.w	4c14 <z_reschedule_unlocked>
    29f6:	bf00      	nop
    29f8:	200007f8 	.word	0x200007f8

000029fc <ready_thread>:
{
    29fc:	b470      	push	{r4, r5, r6}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    29fe:	7b43      	ldrb	r3, [r0, #13]
    2a00:	06db      	lsls	r3, r3, #27
    2a02:	d127      	bne.n	2a54 <ready_thread+0x58>
	if (z_is_thread_ready(thread)) {
    2a04:	6983      	ldr	r3, [r0, #24]
    2a06:	bb2b      	cbnz	r3, 2a54 <ready_thread+0x58>
	return list->head == list;
    2a08:	4a13      	ldr	r2, [pc, #76]	; (2a58 <ready_thread+0x5c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2a0a:	f102 0128 	add.w	r1, r2, #40	; 0x28
    2a0e:	e9d2 340a 	ldrd	r3, r4, [r2, #40]	; 0x28
    2a12:	428b      	cmp	r3, r1
    2a14:	d018      	beq.n	2a48 <ready_thread+0x4c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2a16:	b1bb      	cbz	r3, 2a48 <ready_thread+0x4c>
	if (thread_1->base.prio < thread_2->base.prio) {
    2a18:	f990 500e 	ldrsb.w	r5, [r0, #14]
    2a1c:	f993 600e 	ldrsb.w	r6, [r3, #14]
    2a20:	42ae      	cmp	r6, r5
    2a22:	dd0c      	ble.n	2a3e <ready_thread+0x42>
	node->prev = successor->prev;
    2a24:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    2a26:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    2a2a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    2a2c:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    2a2e:	7b43      	ldrb	r3, [r0, #13]
    2a30:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2a34:	7343      	strb	r3, [r0, #13]
}
    2a36:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    2a38:	2000      	movs	r0, #0
    2a3a:	f7ff bf9f 	b.w	297c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    2a3e:	429c      	cmp	r4, r3
    2a40:	d002      	beq.n	2a48 <ready_thread+0x4c>
    2a42:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2a44:	2b00      	cmp	r3, #0
    2a46:	d1e9      	bne.n	2a1c <ready_thread+0x20>
	node->prev = list->tail;
    2a48:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
    2a4c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    2a4e:	6018      	str	r0, [r3, #0]
	list->tail = node;
    2a50:	62d0      	str	r0, [r2, #44]	; 0x2c
    2a52:	e7ec      	b.n	2a2e <ready_thread+0x32>
}
    2a54:	bc70      	pop	{r4, r5, r6}
    2a56:	4770      	bx	lr
    2a58:	200007f8 	.word	0x200007f8

00002a5c <z_sched_start>:
{
    2a5c:	b510      	push	{r4, lr}
	__asm__ volatile(
    2a5e:	f04f 0320 	mov.w	r3, #32
    2a62:	f3ef 8411 	mrs	r4, BASEPRI
    2a66:	f383 8811 	msr	BASEPRI, r3
    2a6a:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
    2a6e:	7b43      	ldrb	r3, [r0, #13]
    2a70:	0759      	lsls	r1, r3, #29
    2a72:	d404      	bmi.n	2a7e <z_sched_start+0x22>
	__asm__ volatile(
    2a74:	f384 8811 	msr	BASEPRI, r4
    2a78:	f3bf 8f6f 	isb	sy
}
    2a7c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    2a7e:	f023 0304 	bic.w	r3, r3, #4
    2a82:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    2a84:	f7ff ffba 	bl	29fc <ready_thread>
	z_reschedule(&sched_spinlock, key);
    2a88:	4621      	mov	r1, r4
}
    2a8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    2a8e:	4801      	ldr	r0, [pc, #4]	; (2a94 <z_sched_start+0x38>)
    2a90:	f002 b8a9 	b.w	4be6 <z_reschedule>
    2a94:	20000856 	.word	0x20000856

00002a98 <z_move_thread_to_end_of_prio_q>:
{
    2a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a9a:	4604      	mov	r4, r0
	__asm__ volatile(
    2a9c:	f04f 0320 	mov.w	r3, #32
    2aa0:	f3ef 8511 	mrs	r5, BASEPRI
    2aa4:	f383 8811 	msr	BASEPRI, r3
    2aa8:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    2aac:	f990 300d 	ldrsb.w	r3, [r0, #13]
    2ab0:	2b00      	cmp	r3, #0
    2ab2:	da03      	bge.n	2abc <z_move_thread_to_end_of_prio_q+0x24>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    2ab4:	4601      	mov	r1, r0
    2ab6:	4818      	ldr	r0, [pc, #96]	; (2b18 <z_move_thread_to_end_of_prio_q+0x80>)
    2ab8:	f7ff ff4a 	bl	2950 <z_priq_dumb_remove>
	return list->head == list;
    2abc:	4a17      	ldr	r2, [pc, #92]	; (2b1c <z_move_thread_to_end_of_prio_q+0x84>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2abe:	f102 0128 	add.w	r1, r2, #40	; 0x28
    2ac2:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
    2ac6:	428b      	cmp	r3, r1
    2ac8:	d01f      	beq.n	2b0a <z_move_thread_to_end_of_prio_q+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2aca:	b1f3      	cbz	r3, 2b0a <z_move_thread_to_end_of_prio_q+0x72>
	if (thread_1->base.prio < thread_2->base.prio) {
    2acc:	f994 600e 	ldrsb.w	r6, [r4, #14]
    2ad0:	f993 700e 	ldrsb.w	r7, [r3, #14]
    2ad4:	42b7      	cmp	r7, r6
    2ad6:	dd13      	ble.n	2b00 <z_move_thread_to_end_of_prio_q+0x68>
	node->prev = successor->prev;
    2ad8:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    2ada:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
    2ade:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    2ae0:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
    2ae2:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
    2ae4:	6890      	ldr	r0, [r2, #8]
    2ae6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2aea:	7363      	strb	r3, [r4, #13]
    2aec:	1b03      	subs	r3, r0, r4
    2aee:	4258      	negs	r0, r3
    2af0:	4158      	adcs	r0, r3
    2af2:	f7ff ff43 	bl	297c <update_cache>
	__asm__ volatile(
    2af6:	f385 8811 	msr	BASEPRI, r5
    2afa:	f3bf 8f6f 	isb	sy
}
    2afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    2b00:	4298      	cmp	r0, r3
    2b02:	d002      	beq.n	2b0a <z_move_thread_to_end_of_prio_q+0x72>
    2b04:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2b06:	2b00      	cmp	r3, #0
    2b08:	d1e2      	bne.n	2ad0 <z_move_thread_to_end_of_prio_q+0x38>
	node->prev = list->tail;
    2b0a:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
    2b0e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    2b10:	601c      	str	r4, [r3, #0]
	list->tail = node;
    2b12:	62d4      	str	r4, [r2, #44]	; 0x2c
    2b14:	e7e5      	b.n	2ae2 <z_move_thread_to_end_of_prio_q+0x4a>
    2b16:	bf00      	nop
    2b18:	20000820 	.word	0x20000820
    2b1c:	200007f8 	.word	0x200007f8

00002b20 <z_time_slice>:
	if (pending_current == _current) {
    2b20:	4a15      	ldr	r2, [pc, #84]	; (2b78 <z_time_slice+0x58>)
    2b22:	4916      	ldr	r1, [pc, #88]	; (2b7c <z_time_slice+0x5c>)
{
    2b24:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
    2b26:	680c      	ldr	r4, [r1, #0]
    2b28:	6893      	ldr	r3, [r2, #8]
    2b2a:	42a3      	cmp	r3, r4
    2b2c:	4614      	mov	r4, r2
    2b2e:	d103      	bne.n	2b38 <z_time_slice+0x18>
}
    2b30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
    2b34:	f7ff beb6 	b.w	28a4 <z_reset_time_slice>
	pending_current = NULL;
    2b38:	2500      	movs	r5, #0
    2b3a:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
    2b3c:	4910      	ldr	r1, [pc, #64]	; (2b80 <z_time_slice+0x60>)
    2b3e:	6809      	ldr	r1, [r1, #0]
    2b40:	b1b9      	cbz	r1, 2b72 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
    2b42:	89d9      	ldrh	r1, [r3, #14]
    2b44:	297f      	cmp	r1, #127	; 0x7f
    2b46:	d814      	bhi.n	2b72 <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    2b48:	490e      	ldr	r1, [pc, #56]	; (2b84 <z_time_slice+0x64>)
    2b4a:	f993 500e 	ldrsb.w	r5, [r3, #14]
    2b4e:	6809      	ldr	r1, [r1, #0]
    2b50:	428d      	cmp	r5, r1
    2b52:	db0e      	blt.n	2b72 <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
    2b54:	490c      	ldr	r1, [pc, #48]	; (2b88 <z_time_slice+0x68>)
    2b56:	428b      	cmp	r3, r1
    2b58:	d00b      	beq.n	2b72 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
    2b5a:	6999      	ldr	r1, [r3, #24]
    2b5c:	b949      	cbnz	r1, 2b72 <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
    2b5e:	6911      	ldr	r1, [r2, #16]
    2b60:	4281      	cmp	r1, r0
    2b62:	dc03      	bgt.n	2b6c <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
    2b64:	4618      	mov	r0, r3
    2b66:	f7ff ff97 	bl	2a98 <z_move_thread_to_end_of_prio_q>
    2b6a:	e7e1      	b.n	2b30 <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
    2b6c:	1a09      	subs	r1, r1, r0
    2b6e:	6111      	str	r1, [r2, #16]
}
    2b70:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
    2b72:	2300      	movs	r3, #0
    2b74:	6123      	str	r3, [r4, #16]
    2b76:	e7fb      	b.n	2b70 <z_time_slice+0x50>
    2b78:	200007f8 	.word	0x200007f8
    2b7c:	20000828 	.word	0x20000828
    2b80:	20000830 	.word	0x20000830
    2b84:	2000082c 	.word	0x2000082c
    2b88:	20000710 	.word	0x20000710

00002b8c <z_impl_k_thread_suspend>:
{
    2b8c:	b570      	push	{r4, r5, r6, lr}
    2b8e:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    2b90:	3018      	adds	r0, #24
    2b92:	f002 f8f8 	bl	4d86 <z_abort_timeout>
	__asm__ volatile(
    2b96:	f04f 0320 	mov.w	r3, #32
    2b9a:	f3ef 8611 	mrs	r6, BASEPRI
    2b9e:	f383 8811 	msr	BASEPRI, r3
    2ba2:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    2ba6:	f994 300d 	ldrsb.w	r3, [r4, #13]
    2baa:	2b00      	cmp	r3, #0
    2bac:	da07      	bge.n	2bbe <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    2bae:	4621      	mov	r1, r4
    2bb0:	480e      	ldr	r0, [pc, #56]	; (2bec <z_impl_k_thread_suspend+0x60>)
    2bb2:	f7ff fecd 	bl	2950 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    2bb6:	7b63      	ldrb	r3, [r4, #13]
    2bb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2bbc:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    2bbe:	4d0c      	ldr	r5, [pc, #48]	; (2bf0 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    2bc0:	7b63      	ldrb	r3, [r4, #13]
    2bc2:	68a8      	ldr	r0, [r5, #8]
    2bc4:	f043 0310 	orr.w	r3, r3, #16
    2bc8:	7363      	strb	r3, [r4, #13]
    2bca:	1b03      	subs	r3, r0, r4
    2bcc:	4258      	negs	r0, r3
    2bce:	4158      	adcs	r0, r3
    2bd0:	f7ff fed4 	bl	297c <update_cache>
	__asm__ volatile(
    2bd4:	f386 8811 	msr	BASEPRI, r6
    2bd8:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    2bdc:	68ab      	ldr	r3, [r5, #8]
    2bde:	42a3      	cmp	r3, r4
    2be0:	d103      	bne.n	2bea <z_impl_k_thread_suspend+0x5e>
}
    2be2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    2be6:	f002 b815 	b.w	4c14 <z_reschedule_unlocked>
}
    2bea:	bd70      	pop	{r4, r5, r6, pc}
    2bec:	20000820 	.word	0x20000820
    2bf0:	200007f8 	.word	0x200007f8

00002bf4 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
    2bf4:	6d83      	ldr	r3, [r0, #88]	; 0x58
{
    2bf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2bfa:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    2bfc:	b103      	cbz	r3, 2c00 <z_thread_single_abort+0xc>
		thread->fn_abort();
    2bfe:	4798      	blx	r3
    2c00:	f104 0018 	add.w	r0, r4, #24
    2c04:	f002 f8bf 	bl	4d86 <z_abort_timeout>
	__asm__ volatile(
    2c08:	f04f 0320 	mov.w	r3, #32
    2c0c:	f3ef 8611 	mrs	r6, BASEPRI
    2c10:	f383 8811 	msr	BASEPRI, r3
    2c14:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    2c18:	7b63      	ldrb	r3, [r4, #13]
    2c1a:	06d8      	lsls	r0, r3, #27
    2c1c:	d123      	bne.n	2c66 <z_thread_single_abort+0x72>
		if (z_is_thread_ready(thread)) {
    2c1e:	69a2      	ldr	r2, [r4, #24]
    2c20:	bb0a      	cbnz	r2, 2c66 <z_thread_single_abort+0x72>
			if (z_is_thread_queued(thread)) {
    2c22:	0619      	lsls	r1, r3, #24
    2c24:	d507      	bpl.n	2c36 <z_thread_single_abort+0x42>
				_priq_run_remove(&_kernel.ready_q.runq,
    2c26:	4621      	mov	r1, r4
    2c28:	481e      	ldr	r0, [pc, #120]	; (2ca4 <z_thread_single_abort+0xb0>)
    2c2a:	f7ff fe91 	bl	2950 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    2c2e:	7b63      	ldrb	r3, [r4, #13]
    2c30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2c34:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
    2c36:	4b1c      	ldr	r3, [pc, #112]	; (2ca8 <z_thread_single_abort+0xb4>)
    2c38:	6898      	ldr	r0, [r3, #8]
    2c3a:	1b02      	subs	r2, r0, r4
    2c3c:	4250      	negs	r0, r2
    2c3e:	4150      	adcs	r0, r2
    2c40:	f7ff fe9c 	bl	297c <update_cache>
			waiter->base.pended_on = NULL;
    2c44:	2700      	movs	r7, #0
		thread->base.thread_state |= mask;
    2c46:	7b63      	ldrb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    2c48:	f104 0828 	add.w	r8, r4, #40	; 0x28
    2c4c:	f043 0308 	orr.w	r3, r3, #8
    2c50:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    2c52:	6aa5      	ldr	r5, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2c54:	4545      	cmp	r5, r8
    2c56:	d000      	beq.n	2c5a <z_thread_single_abort+0x66>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
    2c58:	b995      	cbnz	r5, 2c80 <z_thread_single_abort+0x8c>
	__asm__ volatile(
    2c5a:	f386 8811 	msr	BASEPRI, r6
    2c5e:	f3bf 8f6f 	isb	sy
}
    2c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
    2c66:	079b      	lsls	r3, r3, #30
    2c68:	d5ec      	bpl.n	2c44 <z_thread_single_abort+0x50>
				_priq_wait_remove(&pended_on(thread)->waitq,
    2c6a:	4621      	mov	r1, r4
    2c6c:	68a0      	ldr	r0, [r4, #8]
    2c6e:	f7ff fe6f 	bl	2950 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    2c72:	7b63      	ldrb	r3, [r4, #13]
    2c74:	f023 0302 	bic.w	r3, r3, #2
    2c78:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
    2c7a:	2300      	movs	r3, #0
    2c7c:	60a3      	str	r3, [r4, #8]
    2c7e:	e7e1      	b.n	2c44 <z_thread_single_abort+0x50>
    2c80:	f105 0018 	add.w	r0, r5, #24
    2c84:	f002 f87f 	bl	4d86 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
    2c88:	68a8      	ldr	r0, [r5, #8]
    2c8a:	4629      	mov	r1, r5
    2c8c:	f7ff fe60 	bl	2950 <z_priq_dumb_remove>
    2c90:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
    2c92:	60af      	str	r7, [r5, #8]
    2c94:	f023 0302 	bic.w	r3, r3, #2
    2c98:	736b      	strb	r3, [r5, #13]
    2c9a:	672f      	str	r7, [r5, #112]	; 0x70
			ready_thread(waiter);
    2c9c:	4628      	mov	r0, r5
    2c9e:	f7ff fead 	bl	29fc <ready_thread>
    2ca2:	e7d6      	b.n	2c52 <z_thread_single_abort+0x5e>
    2ca4:	20000820 	.word	0x20000820
    2ca8:	200007f8 	.word	0x200007f8

00002cac <unready_thread>:
{
    2cac:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    2cae:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
    2cb2:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    2cb4:	2b00      	cmp	r3, #0
    2cb6:	da07      	bge.n	2cc8 <unready_thread+0x1c>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    2cb8:	4601      	mov	r1, r0
    2cba:	4808      	ldr	r0, [pc, #32]	; (2cdc <unready_thread+0x30>)
    2cbc:	f7ff fe48 	bl	2950 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    2cc0:	7b63      	ldrb	r3, [r4, #13]
    2cc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2cc6:	7363      	strb	r3, [r4, #13]
	update_cache(thread == _current);
    2cc8:	4b05      	ldr	r3, [pc, #20]	; (2ce0 <unready_thread+0x34>)
    2cca:	6898      	ldr	r0, [r3, #8]
    2ccc:	1b03      	subs	r3, r0, r4
    2cce:	4258      	negs	r0, r3
    2cd0:	4158      	adcs	r0, r3
}
    2cd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    2cd6:	f7ff be51 	b.w	297c <update_cache>
    2cda:	bf00      	nop
    2cdc:	20000820 	.word	0x20000820
    2ce0:	200007f8 	.word	0x200007f8

00002ce4 <z_tick_sleep.part.21>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
    2ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ce6:	4606      	mov	r6, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
    2ce8:	f002 f88d 	bl	4e06 <z_tick_get_32>
    2cec:	1834      	adds	r4, r6, r0
	__asm__ volatile(
    2cee:	f04f 0320 	mov.w	r3, #32
    2cf2:	f3ef 8711 	mrs	r7, BASEPRI
    2cf6:	f383 8811 	msr	BASEPRI, r3
    2cfa:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    2cfe:	4d0d      	ldr	r5, [pc, #52]	; (2d34 <z_tick_sleep.part.21+0x50>)
    2d00:	4b0d      	ldr	r3, [pc, #52]	; (2d38 <z_tick_sleep.part.21+0x54>)
    2d02:	68a8      	ldr	r0, [r5, #8]
    2d04:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
    2d06:	f001 ffd1 	bl	4cac <z_remove_thread_from_ready_q>
	z_add_thread_timeout(_current, timeout);
    2d0a:	68a8      	ldr	r0, [r5, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    2d0c:	490b      	ldr	r1, [pc, #44]	; (2d3c <z_tick_sleep.part.21+0x58>)
    2d0e:	4632      	mov	r2, r6
    2d10:	17f3      	asrs	r3, r6, #31
    2d12:	3018      	adds	r0, #24
    2d14:	f000 fa1e 	bl	3154 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    2d18:	68aa      	ldr	r2, [r5, #8]
	ret = arch_swap(key);
    2d1a:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
    2d1c:	7b53      	ldrb	r3, [r2, #13]
    2d1e:	f043 0310 	orr.w	r3, r3, #16
    2d22:	7353      	strb	r3, [r2, #13]
    2d24:	f7fe f958 	bl	fd8 <arch_swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
    2d28:	f002 f86d 	bl	4e06 <z_tick_get_32>
    2d2c:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
    2d2e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    2d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d34:	200007f8 	.word	0x200007f8
    2d38:	20000828 	.word	0x20000828
    2d3c:	00004c55 	.word	0x00004c55

00002d40 <pend>:
{
    2d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2d44:	4606      	mov	r6, r0
    2d46:	4614      	mov	r4, r2
    2d48:	461d      	mov	r5, r3
    2d4a:	f04f 0320 	mov.w	r3, #32
    2d4e:	f3ef 8711 	mrs	r7, BASEPRI
    2d52:	f383 8811 	msr	BASEPRI, r3
    2d56:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    2d5a:	f001 ffb7 	bl	4ccc <add_to_waitq_locked>
	__asm__ volatile(
    2d5e:	f387 8811 	msr	BASEPRI, r7
    2d62:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    2d66:	1c6b      	adds	r3, r5, #1
    2d68:	bf08      	it	eq
    2d6a:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
    2d6e:	d008      	beq.n	2d82 <pend+0x42>
    2d70:	4622      	mov	r2, r4
    2d72:	462b      	mov	r3, r5
    2d74:	f106 0018 	add.w	r0, r6, #24
    2d78:	4903      	ldr	r1, [pc, #12]	; (2d88 <pend+0x48>)
}
    2d7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2d7e:	f000 b9e9 	b.w	3154 <z_add_timeout>
    2d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2d86:	bf00      	nop
    2d88:	00004c55 	.word	0x00004c55

00002d8c <z_pend_curr>:
{
    2d8c:	b510      	push	{r4, lr}
    2d8e:	460c      	mov	r4, r1
	pending_current = _current;
    2d90:	4b06      	ldr	r3, [pc, #24]	; (2dac <z_pend_curr+0x20>)
{
    2d92:	4611      	mov	r1, r2
	pending_current = _current;
    2d94:	6898      	ldr	r0, [r3, #8]
    2d96:	4b06      	ldr	r3, [pc, #24]	; (2db0 <z_pend_curr+0x24>)
    2d98:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    2d9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    2d9e:	f7ff ffcf 	bl	2d40 <pend>
    2da2:	4620      	mov	r0, r4
}
    2da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2da8:	f7fe b916 	b.w	fd8 <arch_swap>
    2dac:	200007f8 	.word	0x200007f8
    2db0:	20000828 	.word	0x20000828

00002db4 <z_set_prio>:
{
    2db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2db8:	4604      	mov	r4, r0
	__asm__ volatile(
    2dba:	f04f 0320 	mov.w	r3, #32
    2dbe:	f3ef 8811 	mrs	r8, BASEPRI
    2dc2:	f383 8811 	msr	BASEPRI, r3
    2dc6:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    2dca:	7b43      	ldrb	r3, [r0, #13]
    2dcc:	b24e      	sxtb	r6, r1
    2dce:	06db      	lsls	r3, r3, #27
    2dd0:	d12e      	bne.n	2e30 <z_set_prio+0x7c>
		if (need_sched) {
    2dd2:	6983      	ldr	r3, [r0, #24]
    2dd4:	bb63      	cbnz	r3, 2e30 <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
    2dd6:	4d18      	ldr	r5, [pc, #96]	; (2e38 <z_set_prio+0x84>)
    2dd8:	4601      	mov	r1, r0
    2dda:	f105 0728 	add.w	r7, r5, #40	; 0x28
    2dde:	4638      	mov	r0, r7
    2de0:	f7ff fdb6 	bl	2950 <z_priq_dumb_remove>
	return list->head == list;
    2de4:	6aab      	ldr	r3, [r5, #40]	; 0x28
				thread->base.prio = prio;
    2de6:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2de8:	42bb      	cmp	r3, r7
    2dea:	462a      	mov	r2, r5
    2dec:	d019      	beq.n	2e22 <z_set_prio+0x6e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2dee:	b1c3      	cbz	r3, 2e22 <z_set_prio+0x6e>
    2df0:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
    2df2:	f993 000e 	ldrsb.w	r0, [r3, #14]
    2df6:	42b0      	cmp	r0, r6
    2df8:	dd0e      	ble.n	2e18 <z_set_prio+0x64>
	node->prev = successor->prev;
    2dfa:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    2dfc:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    2e00:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    2e02:	605c      	str	r4, [r3, #4]
			update_cache(1);
    2e04:	2001      	movs	r0, #1
    2e06:	f7ff fdb9 	bl	297c <update_cache>
    2e0a:	2001      	movs	r0, #1
	__asm__ volatile(
    2e0c:	f388 8811 	msr	BASEPRI, r8
    2e10:	f3bf 8f6f 	isb	sy
}
    2e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (node == list->tail) ? NULL : node->next;
    2e18:	4299      	cmp	r1, r3
    2e1a:	d002      	beq.n	2e22 <z_set_prio+0x6e>
    2e1c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2e1e:	2b00      	cmp	r3, #0
    2e20:	d1e7      	bne.n	2df2 <z_set_prio+0x3e>
	node->prev = list->tail;
    2e22:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
    2e24:	6027      	str	r7, [r4, #0]
	node->prev = list->tail;
    2e26:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    2e28:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    2e2a:	601c      	str	r4, [r3, #0]
	list->tail = node;
    2e2c:	62d4      	str	r4, [r2, #44]	; 0x2c
    2e2e:	e7e9      	b.n	2e04 <z_set_prio+0x50>
			thread->base.prio = prio;
    2e30:	73a6      	strb	r6, [r4, #14]
    2e32:	2000      	movs	r0, #0
    2e34:	e7ea      	b.n	2e0c <z_set_prio+0x58>
    2e36:	bf00      	nop
    2e38:	200007f8 	.word	0x200007f8

00002e3c <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    2e3c:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    2e3e:	4b04      	ldr	r3, [pc, #16]	; (2e50 <z_sched_init+0x14>)
    2e40:	4608      	mov	r0, r1
    2e42:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    2e46:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    2e4a:	f7ff bd41 	b.w	28d0 <k_sched_time_slice_set>
    2e4e:	bf00      	nop
    2e50:	200007f8 	.word	0x200007f8

00002e54 <z_impl_k_yield>:
{
    2e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
    2e56:	4c23      	ldr	r4, [pc, #140]	; (2ee4 <z_impl_k_yield+0x90>)
    2e58:	4b23      	ldr	r3, [pc, #140]	; (2ee8 <z_impl_k_yield+0x94>)
    2e5a:	68a2      	ldr	r2, [r4, #8]
    2e5c:	429a      	cmp	r2, r3
    2e5e:	d029      	beq.n	2eb4 <z_impl_k_yield+0x60>
	__asm__ volatile(
    2e60:	f04f 0320 	mov.w	r3, #32
    2e64:	f3ef 8611 	mrs	r6, BASEPRI
    2e68:	f383 8811 	msr	BASEPRI, r3
    2e6c:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
    2e70:	f104 0528 	add.w	r5, r4, #40	; 0x28
    2e74:	68a1      	ldr	r1, [r4, #8]
    2e76:	4628      	mov	r0, r5
    2e78:	f7ff fd6a 	bl	2950 <z_priq_dumb_remove>
	return list->head == list;
    2e7c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
    2e7e:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2e80:	42aa      	cmp	r2, r5
    2e82:	d028      	beq.n	2ed6 <z_impl_k_yield+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2e84:	b33a      	cbz	r2, 2ed6 <z_impl_k_yield+0x82>
    2e86:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
    2e88:	f993 100e 	ldrsb.w	r1, [r3, #14]
    2e8c:	f992 700e 	ldrsb.w	r7, [r2, #14]
    2e90:	428f      	cmp	r7, r1
    2e92:	dd1b      	ble.n	2ecc <z_impl_k_yield+0x78>
	node->prev = successor->prev;
    2e94:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    2e96:	e9c3 2100 	strd	r2, r1, [r3]
	successor->prev->next = node;
    2e9a:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    2e9c:	6053      	str	r3, [r2, #4]
	thread->base.thread_state |= states;
    2e9e:	7b5a      	ldrb	r2, [r3, #13]
			update_cache(1);
    2ea0:	2001      	movs	r0, #1
    2ea2:	f062 027f 	orn	r2, r2, #127	; 0x7f
    2ea6:	735a      	strb	r2, [r3, #13]
    2ea8:	f7ff fd68 	bl	297c <update_cache>
	__asm__ volatile(
    2eac:	f386 8811 	msr	BASEPRI, r6
    2eb0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    2eb4:	f04f 0320 	mov.w	r3, #32
    2eb8:	f3ef 8011 	mrs	r0, BASEPRI
    2ebc:	f383 8811 	msr	BASEPRI, r3
    2ec0:	f3bf 8f6f 	isb	sy
}
    2ec4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    2ec8:	f7fe b886 	b.w	fd8 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    2ecc:	4282      	cmp	r2, r0
    2ece:	d002      	beq.n	2ed6 <z_impl_k_yield+0x82>
    2ed0:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2ed2:	2a00      	cmp	r2, #0
    2ed4:	d1da      	bne.n	2e8c <z_impl_k_yield+0x38>
	node->prev = list->tail;
    2ed6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	node->next = list;
    2ed8:	601d      	str	r5, [r3, #0]
	node->prev = list->tail;
    2eda:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
    2edc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2ede:	6013      	str	r3, [r2, #0]
	list->tail = node;
    2ee0:	62e3      	str	r3, [r4, #44]	; 0x2c
    2ee2:	e7dc      	b.n	2e9e <z_impl_k_yield+0x4a>
    2ee4:	200007f8 	.word	0x200007f8
    2ee8:	20000710 	.word	0x20000710

00002eec <z_impl_k_sleep>:
{
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    2eec:	3101      	adds	r1, #1
    2eee:	bf08      	it	eq
    2ef0:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    2ef4:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    2ef6:	d106      	bne.n	2f06 <z_impl_k_sleep+0x1a>
		k_thread_suspend(_current);
    2ef8:	4b0b      	ldr	r3, [pc, #44]	; (2f28 <z_impl_k_sleep+0x3c>)
    2efa:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    2efc:	f7ff fe46 	bl	2b8c <z_impl_k_thread_suspend>
		return (s32_t) K_TICKS_FOREVER;
    2f00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	ticks = timeout.ticks;
#endif

	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
    2f04:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
    2f06:	4604      	mov	r4, r0
	if (ticks == 0) {
    2f08:	b948      	cbnz	r0, 2f1e <z_impl_k_sleep+0x32>
	z_impl_k_yield();
    2f0a:	f7ff ffa3 	bl	2e54 <z_impl_k_yield>
		} else {
			return (t * to_hz + off) / from_hz;
    2f0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    2f12:	fb84 3400 	smull	r3, r4, r4, r0
    2f16:	0bd8      	lsrs	r0, r3, #15
    2f18:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
    2f1c:	e7f2      	b.n	2f04 <z_impl_k_sleep+0x18>
    2f1e:	f7ff fee1 	bl	2ce4 <z_tick_sleep.part.21>
    2f22:	4604      	mov	r4, r0
    2f24:	e7f3      	b.n	2f0e <z_impl_k_sleep+0x22>
    2f26:	bf00      	nop
    2f28:	200007f8 	.word	0x200007f8

00002f2c <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    2f2c:	4b01      	ldr	r3, [pc, #4]	; (2f34 <z_impl_k_current_get+0x8>)
    2f2e:	6898      	ldr	r0, [r3, #8]
    2f30:	4770      	bx	lr
    2f32:	bf00      	nop
    2f34:	200007f8 	.word	0x200007f8

00002f38 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    2f38:	b538      	push	{r3, r4, r5, lr}
    2f3a:	4604      	mov	r4, r0
    2f3c:	f04f 0320 	mov.w	r3, #32
    2f40:	f3ef 8511 	mrs	r5, BASEPRI
    2f44:	f383 8811 	msr	BASEPRI, r3
    2f48:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
    2f4c:	f001 fee6 	bl	4d1c <z_unpend_first_thread>

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);

	if (thread != NULL) {
    2f50:	b148      	cbz	r0, 2f66 <z_impl_k_sem_give+0x2e>
    2f52:	2200      	movs	r2, #0
    2f54:	6702      	str	r2, [r0, #112]	; 0x70
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    2f56:	f001 fe6d 	bl	4c34 <z_ready_thread>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
    2f5a:	4629      	mov	r1, r5
}
    2f5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    2f60:	4804      	ldr	r0, [pc, #16]	; (2f74 <z_impl_k_sem_give+0x3c>)
    2f62:	f001 be40 	b.w	4be6 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    2f66:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    2f6a:	429a      	cmp	r2, r3
    2f6c:	bf18      	it	ne
    2f6e:	3301      	addne	r3, #1
    2f70:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
    2f72:	e7f2      	b.n	2f5a <z_impl_k_sem_give+0x22>
    2f74:	20000856 	.word	0x20000856

00002f78 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    2f78:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2f7a:	4614      	mov	r4, r2
    2f7c:	461d      	mov	r5, r3
    2f7e:	f04f 0320 	mov.w	r3, #32
    2f82:	f3ef 8111 	mrs	r1, BASEPRI
    2f86:	f383 8811 	msr	BASEPRI, r3
    2f8a:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
    2f8e:	6883      	ldr	r3, [r0, #8]
    2f90:	b143      	cbz	r3, 2fa4 <z_impl_k_sem_take+0x2c>
		sem->count--;
    2f92:	3b01      	subs	r3, #1
    2f94:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    2f96:	f381 8811 	msr	BASEPRI, r1
    2f9a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    2f9e:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
    2fa0:	b003      	add	sp, #12
    2fa2:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    2fa4:	ea54 0305 	orrs.w	r3, r4, r5
    2fa8:	d106      	bne.n	2fb8 <z_impl_k_sem_take+0x40>
    2faa:	f381 8811 	msr	BASEPRI, r1
    2fae:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    2fb2:	f06f 000f 	mvn.w	r0, #15
		goto out;
    2fb6:	e7f3      	b.n	2fa0 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    2fb8:	4602      	mov	r2, r0
    2fba:	e9cd 4500 	strd	r4, r5, [sp]
    2fbe:	4802      	ldr	r0, [pc, #8]	; (2fc8 <z_impl_k_sem_take+0x50>)
    2fc0:	f7ff fee4 	bl	2d8c <z_pend_curr>
	return ret;
    2fc4:	e7ec      	b.n	2fa0 <z_impl_k_sem_take+0x28>
    2fc6:	bf00      	nop
    2fc8:	20000856 	.word	0x20000856

00002fcc <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
    2fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
	sys_dlist_init(&w->waitq);
    2fce:	f100 0528 	add.w	r5, r0, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    2fd2:	e9c0 550a 	strd	r5, r5, [r0, #40]	; 0x28
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
	thread_base->thread_state = (u8_t)initial_state;
    2fd6:	2504      	movs	r5, #4
    2fd8:	7345      	strb	r5, [r0, #13]

	thread_base->prio = priority;

	thread_base->sched_locked = 0U;
    2fda:	2500      	movs	r5, #0
{
    2fdc:	4604      	mov	r4, r0
    2fde:	b087      	sub	sp, #28
    2fe0:	e9dd 670f 	ldrd	r6, r7, [sp, #60]	; 0x3c
	thread_base->prio = priority;
    2fe4:	7386      	strb	r6, [r0, #14]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    2fe6:	e9cd 6703 	strd	r6, r7, [sp, #12]
    2fea:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	thread_base->user_options = (u8_t)options;
    2fec:	7307      	strb	r7, [r0, #12]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    2fee:	9602      	str	r6, [sp, #8]
    2ff0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	thread_base->sched_locked = 0U;
    2ff2:	73c5      	strb	r5, [r0, #15]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    2ff4:	9601      	str	r6, [sp, #4]
    2ff6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	node->prev = NULL;
    2ff8:	e9c0 5506 	strd	r5, r5, [r0, #24]
    2ffc:	9600      	str	r6, [sp, #0]
    2ffe:	f7fe f861 	bl	10c4 <arch_new_thread>
	if (!_current) {
    3002:	4b04      	ldr	r3, [pc, #16]	; (3014 <z_setup_new_thread+0x48>)
	new_thread->fn_abort = NULL;
    3004:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
	if (!_current) {
    3008:	689b      	ldr	r3, [r3, #8]
    300a:	b103      	cbz	r3, 300e <z_setup_new_thread+0x42>
	new_thread->resource_pool = _current->resource_pool;
    300c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    300e:	66a3      	str	r3, [r4, #104]	; 0x68
}
    3010:	b007      	add	sp, #28
    3012:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3014:	200007f8 	.word	0x200007f8

00003018 <z_init_static_threads>:
{
    3018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    301c:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 30dc <z_init_static_threads+0xc4>
    3020:	4d2c      	ldr	r5, [pc, #176]	; (30d4 <z_init_static_threads+0xbc>)
    3022:	46c8      	mov	r8, r9
{
    3024:	b089      	sub	sp, #36	; 0x24
	_FOREACH_STATIC_THREAD(thread_data) {
    3026:	454d      	cmp	r5, r9
    3028:	f105 0430 	add.w	r4, r5, #48	; 0x30
    302c:	d30f      	bcc.n	304e <z_init_static_threads+0x36>
	k_sched_lock();
    302e:	f7ff fc7b 	bl	2928 <k_sched_lock>
			return (u32_t)((t * to_hz + off) / from_hz);
    3032:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    3036:	f240 3ae7 	movw	sl, #999	; 0x3e7
    303a:	f04f 0b00 	mov.w	fp, #0
	_FOREACH_STATIC_THREAD(thread_data) {
    303e:	4c25      	ldr	r4, [pc, #148]	; (30d4 <z_init_static_threads+0xbc>)
    3040:	4544      	cmp	r4, r8
    3042:	d321      	bcc.n	3088 <z_init_static_threads+0x70>
}
    3044:	b009      	add	sp, #36	; 0x24
    3046:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
    304a:	f7ff bcbb 	b.w	29c4 <k_sched_unlock>
		z_setup_new_thread(
    304e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    3052:	9305      	str	r3, [sp, #20]
    3054:	f854 3c10 	ldr.w	r3, [r4, #-16]
    3058:	9304      	str	r3, [sp, #16]
    305a:	f854 3c14 	ldr.w	r3, [r4, #-20]
    305e:	9303      	str	r3, [sp, #12]
    3060:	f854 3c18 	ldr.w	r3, [r4, #-24]
    3064:	9302      	str	r3, [sp, #8]
    3066:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    306a:	9301      	str	r3, [sp, #4]
    306c:	f854 3c20 	ldr.w	r3, [r4, #-32]
    3070:	9300      	str	r3, [sp, #0]
    3072:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    3076:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    307a:	f7ff ffa7 	bl	2fcc <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    307e:	f854 3c30 	ldr.w	r3, [r4, #-48]
    3082:	655d      	str	r5, [r3, #84]	; 0x54
    3084:	4625      	mov	r5, r4
    3086:	e7ce      	b.n	3026 <z_init_static_threads+0xe>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    3088:	6a61      	ldr	r1, [r4, #36]	; 0x24
    308a:	1c4b      	adds	r3, r1, #1
    308c:	d017      	beq.n	30be <z_init_static_threads+0xa6>
    308e:	4656      	mov	r6, sl
    3090:	465f      	mov	r7, fp
					    K_MSEC(thread_data->init_delay));
    3092:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    3096:	fbc9 6701 	smlal	r6, r7, r9, r1
    309a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    309e:	2300      	movs	r3, #0
    30a0:	4630      	mov	r0, r6
    30a2:	4639      	mov	r1, r7
    30a4:	f7fd f8ca 	bl	23c <__aeabi_uldivmod>
    30a8:	2300      	movs	r3, #0
    30aa:	9006      	str	r0, [sp, #24]
    30ac:	9307      	str	r3, [sp, #28]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    30ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    30b2:	4313      	orrs	r3, r2
			schedule_new_thread(thread_data->init_thread,
    30b4:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    30b6:	d104      	bne.n	30c2 <z_init_static_threads+0xaa>
	z_sched_start(thread);
    30b8:	4628      	mov	r0, r5
    30ba:	f7ff fccf 	bl	2a5c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    30be:	3430      	adds	r4, #48	; 0x30
    30c0:	e7be      	b.n	3040 <z_init_static_threads+0x28>
    30c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    30c6:	4904      	ldr	r1, [pc, #16]	; (30d8 <z_init_static_threads+0xc0>)
    30c8:	f105 0018 	add.w	r0, r5, #24
    30cc:	f000 f842 	bl	3154 <z_add_timeout>
    30d0:	e7f5      	b.n	30be <z_init_static_threads+0xa6>
    30d2:	bf00      	nop
    30d4:	2000011c 	.word	0x2000011c
    30d8:	00004c55 	.word	0x00004c55
    30dc:	2000011c 	.word	0x2000011c

000030e0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    30e0:	4b03      	ldr	r3, [pc, #12]	; (30f0 <elapsed+0x10>)
    30e2:	681b      	ldr	r3, [r3, #0]
    30e4:	b90b      	cbnz	r3, 30ea <elapsed+0xa>
    30e6:	f7fd bc2d 	b.w	944 <z_clock_elapsed>
}
    30ea:	2000      	movs	r0, #0
    30ec:	4770      	bx	lr
    30ee:	bf00      	nop
    30f0:	20000834 	.word	0x20000834

000030f4 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    30f4:	6803      	ldr	r3, [r0, #0]
    30f6:	b140      	cbz	r0, 310a <remove_timeout+0x16>
    30f8:	4a07      	ldr	r2, [pc, #28]	; (3118 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
    30fa:	6852      	ldr	r2, [r2, #4]
    30fc:	4290      	cmp	r0, r2
    30fe:	d004      	beq.n	310a <remove_timeout+0x16>
	if (next(t) != NULL) {
    3100:	b11b      	cbz	r3, 310a <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
    3102:	689a      	ldr	r2, [r3, #8]
    3104:	6881      	ldr	r1, [r0, #8]
    3106:	440a      	add	r2, r1
    3108:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
    310a:	6842      	ldr	r2, [r0, #4]
    310c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    310e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    3110:	2300      	movs	r3, #0
	node->prev = NULL;
    3112:	e9c0 3300 	strd	r3, r3, [r0]
}
    3116:	4770      	bx	lr
    3118:	20000074 	.word	0x20000074

0000311c <next_timeout>:
	return list->head == list;
    311c:	4b0b      	ldr	r3, [pc, #44]	; (314c <next_timeout+0x30>)

static s32_t next_timeout(void)
{
    311e:	b510      	push	{r4, lr}
    3120:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3122:	429c      	cmp	r4, r3
    3124:	bf08      	it	eq
    3126:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
    3128:	f7ff ffda 	bl	30e0 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    312c:	b154      	cbz	r4, 3144 <next_timeout+0x28>
    312e:	68a3      	ldr	r3, [r4, #8]
    3130:	1a18      	subs	r0, r3, r0
    3132:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    3136:	4b06      	ldr	r3, [pc, #24]	; (3150 <next_timeout+0x34>)
    3138:	691b      	ldr	r3, [r3, #16]
    313a:	b113      	cbz	r3, 3142 <next_timeout+0x26>
    313c:	4298      	cmp	r0, r3
    313e:	bfa8      	it	ge
    3140:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    3142:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    3144:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    3148:	e7f5      	b.n	3136 <next_timeout+0x1a>
    314a:	bf00      	nop
    314c:	20000074 	.word	0x20000074
    3150:	200007f8 	.word	0x200007f8

00003154 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    3154:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3158:	9101      	str	r1, [sp, #4]
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    315a:	1c59      	adds	r1, r3, #1
    315c:	bf08      	it	eq
    315e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    3162:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3164:	d061      	beq.n	322a <z_add_timeout+0xd6>
	}

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
    3166:	1c54      	adds	r4, r2, #1
    3168:	f143 0500 	adc.w	r5, r3, #0

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    316c:	f06f 0301 	mvn.w	r3, #1
    3170:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    3174:	ebb3 0804 	subs.w	r8, r3, r4
    3178:	eb6b 0905 	sbc.w	r9, fp, r5
    317c:	f1b8 0f00 	cmp.w	r8, #0
    3180:	f179 0300 	sbcs.w	r3, r9, #0
    3184:	db0f      	blt.n	31a6 <z_add_timeout+0x52>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
    3186:	f7ff ffab 	bl	30e0 <elapsed>
    318a:	f06f 0301 	mvn.w	r3, #1
    318e:	4a2c      	ldr	r2, [pc, #176]	; (3240 <z_add_timeout+0xec>)
    3190:	e9d2 1c00 	ldrd	r1, ip, [r2]
    3194:	1a5b      	subs	r3, r3, r1
    3196:	eb6b 020c 	sbc.w	r2, fp, ip
    319a:	1b1e      	subs	r6, r3, r4
    319c:	eb62 0705 	sbc.w	r7, r2, r5
    31a0:	1a34      	subs	r4, r6, r0
    31a2:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    31a6:	9b01      	ldr	r3, [sp, #4]
    31a8:	f8ca 300c 	str.w	r3, [sl, #12]
	__asm__ volatile(
    31ac:	f04f 0320 	mov.w	r3, #32
    31b0:	f3ef 8611 	mrs	r6, BASEPRI
    31b4:	f383 8811 	msr	BASEPRI, r3
    31b8:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    31bc:	f7ff ff90 	bl	30e0 <elapsed>
	ticks = MAX(1, ticks);
    31c0:	2c01      	cmp	r4, #1
    31c2:	f175 0300 	sbcs.w	r3, r5, #0
    31c6:	bfb8      	it	lt
    31c8:	2401      	movlt	r4, #1
	return list->head == list;
    31ca:	4b1e      	ldr	r3, [pc, #120]	; (3244 <z_add_timeout+0xf0>)
		to->dticks = ticks + elapsed();
    31cc:	4404      	add	r4, r0
    31ce:	681a      	ldr	r2, [r3, #0]
    31d0:	f8ca 4008 	str.w	r4, [sl, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    31d4:	429a      	cmp	r2, r3
    31d6:	d001      	beq.n	31dc <z_add_timeout+0x88>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    31d8:	685c      	ldr	r4, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    31da:	b952      	cbnz	r2, 31f2 <z_add_timeout+0x9e>
	node->prev = list->tail;
    31dc:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    31de:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
    31e2:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
    31e6:	685a      	ldr	r2, [r3, #4]
    31e8:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    31ec:	f8c3 a004 	str.w	sl, [r3, #4]
    31f0:	e00d      	b.n	320e <z_add_timeout+0xba>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
    31f2:	6890      	ldr	r0, [r2, #8]
    31f4:	f8da 1008 	ldr.w	r1, [sl, #8]
    31f8:	4288      	cmp	r0, r1
    31fa:	dd19      	ble.n	3230 <z_add_timeout+0xdc>
				t->dticks -= to->dticks;
    31fc:	1a41      	subs	r1, r0, r1
    31fe:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
    3200:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    3202:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
    3206:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    320a:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
    320e:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3210:	429a      	cmp	r2, r3
    3212:	d006      	beq.n	3222 <z_add_timeout+0xce>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    3214:	4592      	cmp	sl, r2
    3216:	d104      	bne.n	3222 <z_add_timeout+0xce>
			z_clock_set_timeout(next_timeout(), false);
    3218:	f7ff ff80 	bl	311c <next_timeout>
    321c:	2100      	movs	r1, #0
    321e:	f7fd fb2d 	bl	87c <z_clock_set_timeout>
	__asm__ volatile(
    3222:	f386 8811 	msr	BASEPRI, r6
    3226:	f3bf 8f6f 	isb	sy
		}
	}
}
    322a:	b003      	add	sp, #12
    322c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
    3230:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    3232:	4294      	cmp	r4, r2
    3234:	f8ca 1008 	str.w	r1, [sl, #8]
    3238:	d0d0      	beq.n	31dc <z_add_timeout+0x88>
    323a:	6812      	ldr	r2, [r2, #0]
    323c:	e7cd      	b.n	31da <z_add_timeout+0x86>
    323e:	bf00      	nop
    3240:	20000180 	.word	0x20000180
    3244:	20000074 	.word	0x20000074

00003248 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
    3248:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    324c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    324e:	f7ff fc67 	bl	2b20 <z_time_slice>
	__asm__ volatile(
    3252:	f04f 0320 	mov.w	r3, #32
    3256:	f3ef 8511 	mrs	r5, BASEPRI
    325a:	f383 8811 	msr	BASEPRI, r3
    325e:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    3262:	4f21      	ldr	r7, [pc, #132]	; (32e8 <z_clock_announce+0xa0>)
    3264:	4e21      	ldr	r6, [pc, #132]	; (32ec <z_clock_announce+0xa4>)
    3266:	46b8      	mov	r8, r7
	return list->head == list;
    3268:	f8df 9084 	ldr.w	r9, [pc, #132]	; 32f0 <z_clock_announce+0xa8>
    326c:	6034      	str	r4, [r6, #0]
    326e:	f8d9 4000 	ldr.w	r4, [r9]
    3272:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3274:	454c      	cmp	r4, r9
    3276:	e9d7 bc00 	ldrd	fp, ip, [r7]
    327a:	d005      	beq.n	3288 <z_clock_announce+0x40>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    327c:	b124      	cbz	r4, 3288 <z_clock_announce+0x40>
    327e:	68a3      	ldr	r3, [r4, #8]
    3280:	4293      	cmp	r3, r2
    3282:	dd14      	ble.n	32ae <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    3284:	1a9b      	subs	r3, r3, r2
    3286:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    3288:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    328a:	eb1b 0002 	adds.w	r0, fp, r2
    328e:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
    3292:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
    3296:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
    3298:	f7ff ff40 	bl	311c <next_timeout>
    329c:	4621      	mov	r1, r4
    329e:	f7fd faed 	bl	87c <z_clock_set_timeout>
	__asm__ volatile(
    32a2:	f385 8811 	msr	BASEPRI, r5
    32a6:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    32aa:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
    32ae:	eb1b 0003 	adds.w	r0, fp, r3
    32b2:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
    32b6:	1ad3      	subs	r3, r2, r3
    32b8:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    32ba:	2300      	movs	r3, #0
		curr_tick += dt;
    32bc:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
    32c0:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
    32c2:	4620      	mov	r0, r4
    32c4:	f7ff ff16 	bl	30f4 <remove_timeout>
    32c8:	f385 8811 	msr	BASEPRI, r5
    32cc:	f3bf 8f6f 	isb	sy
		t->fn(t);
    32d0:	68e3      	ldr	r3, [r4, #12]
    32d2:	4798      	blx	r3
	__asm__ volatile(
    32d4:	f04f 0320 	mov.w	r3, #32
    32d8:	f3ef 8511 	mrs	r5, BASEPRI
    32dc:	f383 8811 	msr	BASEPRI, r3
    32e0:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    32e4:	e7c3      	b.n	326e <z_clock_announce+0x26>
    32e6:	bf00      	nop
    32e8:	20000180 	.word	0x20000180
    32ec:	20000834 	.word	0x20000834
    32f0:	20000074 	.word	0x20000074

000032f4 <z_tick_get>:

s64_t z_tick_get(void)
{
    32f4:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
    32f8:	f04f 0320 	mov.w	r3, #32
    32fc:	f3ef 8411 	mrs	r4, BASEPRI
    3300:	f383 8811 	msr	BASEPRI, r3
    3304:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
    3308:	f7fd fb1c 	bl	944 <z_clock_elapsed>
    330c:	4b07      	ldr	r3, [pc, #28]	; (332c <z_tick_get+0x38>)
    330e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3312:	eb12 0b00 	adds.w	fp, r2, r0
    3316:	f143 0c00 	adc.w	ip, r3, #0
    331a:	4658      	mov	r0, fp
    331c:	4661      	mov	r1, ip
	__asm__ volatile(
    331e:	f384 8811 	msr	BASEPRI, r4
    3322:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    3326:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
    332a:	bf00      	nop
    332c:	20000180 	.word	0x20000180

00003330 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(struct device *unused)
{
    3330:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    3332:	4c06      	ldr	r4, [pc, #24]	; (334c <statics_init+0x1c>)
    3334:	4d06      	ldr	r5, [pc, #24]	; (3350 <statics_init+0x20>)
    3336:	42ac      	cmp	r4, r5
    3338:	d301      	bcc.n	333e <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
    333a:	2000      	movs	r0, #0
    333c:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    333e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    3342:	4620      	mov	r0, r4
    3344:	f001 fd63 	bl	4e0e <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    3348:	3414      	adds	r4, #20
    334a:	e7f4      	b.n	3336 <statics_init+0x6>
    334c:	2000011c 	.word	0x2000011c
    3350:	2000011c 	.word	0x2000011c

00003354 <CC_PalMemCopyPlat>:
    3354:	f001 baea 	b.w	492c <memmove>

00003358 <CC_PalMemSetZeroPlat>:
    3358:	460a      	mov	r2, r1
    335a:	2100      	movs	r1, #0
    335c:	f001 bb27 	b.w	49ae <memset>

00003360 <CC_PalInit>:
    3360:	b510      	push	{r4, lr}
    3362:	4811      	ldr	r0, [pc, #68]	; (33a8 <CC_PalInit+0x48>)
    3364:	f000 f848 	bl	33f8 <CC_PalMutexCreate>
    3368:	b100      	cbz	r0, 336c <CC_PalInit+0xc>
    336a:	bd10      	pop	{r4, pc}
    336c:	480f      	ldr	r0, [pc, #60]	; (33ac <CC_PalInit+0x4c>)
    336e:	f000 f843 	bl	33f8 <CC_PalMutexCreate>
    3372:	2800      	cmp	r0, #0
    3374:	d1f9      	bne.n	336a <CC_PalInit+0xa>
    3376:	4c0e      	ldr	r4, [pc, #56]	; (33b0 <CC_PalInit+0x50>)
    3378:	4620      	mov	r0, r4
    337a:	f000 f83d 	bl	33f8 <CC_PalMutexCreate>
    337e:	2800      	cmp	r0, #0
    3380:	d1f3      	bne.n	336a <CC_PalInit+0xa>
    3382:	4b0c      	ldr	r3, [pc, #48]	; (33b4 <CC_PalInit+0x54>)
    3384:	480c      	ldr	r0, [pc, #48]	; (33b8 <CC_PalInit+0x58>)
    3386:	601c      	str	r4, [r3, #0]
    3388:	f000 f836 	bl	33f8 <CC_PalMutexCreate>
    338c:	4601      	mov	r1, r0
    338e:	2800      	cmp	r0, #0
    3390:	d1eb      	bne.n	336a <CC_PalInit+0xa>
    3392:	f000 f82d 	bl	33f0 <CC_PalDmaInit>
    3396:	4604      	mov	r4, r0
    3398:	b108      	cbz	r0, 339e <CC_PalInit+0x3e>
    339a:	4620      	mov	r0, r4
    339c:	bd10      	pop	{r4, pc}
    339e:	f000 f851 	bl	3444 <CC_PalPowerSaveModeInit>
    33a2:	4620      	mov	r0, r4
    33a4:	e7fa      	b.n	339c <CC_PalInit+0x3c>
    33a6:	bf00      	nop
    33a8:	20000088 	.word	0x20000088
    33ac:	2000007c 	.word	0x2000007c
    33b0:	20000084 	.word	0x20000084
    33b4:	2000008c 	.word	0x2000008c
    33b8:	20000080 	.word	0x20000080

000033bc <CC_PalTerminate>:
    33bc:	b508      	push	{r3, lr}
    33be:	4808      	ldr	r0, [pc, #32]	; (33e0 <CC_PalTerminate+0x24>)
    33c0:	f000 f824 	bl	340c <CC_PalMutexDestroy>
    33c4:	4807      	ldr	r0, [pc, #28]	; (33e4 <CC_PalTerminate+0x28>)
    33c6:	f000 f821 	bl	340c <CC_PalMutexDestroy>
    33ca:	4807      	ldr	r0, [pc, #28]	; (33e8 <CC_PalTerminate+0x2c>)
    33cc:	f000 f81e 	bl	340c <CC_PalMutexDestroy>
    33d0:	4806      	ldr	r0, [pc, #24]	; (33ec <CC_PalTerminate+0x30>)
    33d2:	f000 f81b 	bl	340c <CC_PalMutexDestroy>
    33d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    33da:	f000 b80b 	b.w	33f4 <CC_PalDmaTerminate>
    33de:	bf00      	nop
    33e0:	20000088 	.word	0x20000088
    33e4:	2000007c 	.word	0x2000007c
    33e8:	20000084 	.word	0x20000084
    33ec:	20000080 	.word	0x20000080

000033f0 <CC_PalDmaInit>:
    33f0:	2000      	movs	r0, #0
    33f2:	4770      	bx	lr

000033f4 <CC_PalDmaTerminate>:
    33f4:	4770      	bx	lr
    33f6:	bf00      	nop

000033f8 <CC_PalMutexCreate>:
    33f8:	b508      	push	{r3, lr}
    33fa:	4b03      	ldr	r3, [pc, #12]	; (3408 <CC_PalMutexCreate+0x10>)
    33fc:	6802      	ldr	r2, [r0, #0]
    33fe:	681b      	ldr	r3, [r3, #0]
    3400:	6810      	ldr	r0, [r2, #0]
    3402:	4798      	blx	r3
    3404:	2000      	movs	r0, #0
    3406:	bd08      	pop	{r3, pc}
    3408:	20000098 	.word	0x20000098

0000340c <CC_PalMutexDestroy>:
    340c:	b508      	push	{r3, lr}
    340e:	4b03      	ldr	r3, [pc, #12]	; (341c <CC_PalMutexDestroy+0x10>)
    3410:	6802      	ldr	r2, [r0, #0]
    3412:	685b      	ldr	r3, [r3, #4]
    3414:	6810      	ldr	r0, [r2, #0]
    3416:	4798      	blx	r3
    3418:	2000      	movs	r0, #0
    341a:	bd08      	pop	{r3, pc}
    341c:	20000098 	.word	0x20000098

00003420 <CC_PalMutexLock>:
    3420:	6802      	ldr	r2, [r0, #0]
    3422:	4b02      	ldr	r3, [pc, #8]	; (342c <CC_PalMutexLock+0xc>)
    3424:	6810      	ldr	r0, [r2, #0]
    3426:	689b      	ldr	r3, [r3, #8]
    3428:	4718      	bx	r3
    342a:	bf00      	nop
    342c:	20000098 	.word	0x20000098

00003430 <CC_PalMutexUnlock>:
    3430:	b508      	push	{r3, lr}
    3432:	4b03      	ldr	r3, [pc, #12]	; (3440 <CC_PalMutexUnlock+0x10>)
    3434:	6802      	ldr	r2, [r0, #0]
    3436:	68db      	ldr	r3, [r3, #12]
    3438:	6810      	ldr	r0, [r2, #0]
    343a:	4798      	blx	r3
    343c:	2000      	movs	r0, #0
    343e:	bd08      	pop	{r3, pc}
    3440:	20000098 	.word	0x20000098

00003444 <CC_PalPowerSaveModeInit>:
    3444:	b570      	push	{r4, r5, r6, lr}
    3446:	4c09      	ldr	r4, [pc, #36]	; (346c <CC_PalPowerSaveModeInit+0x28>)
    3448:	4d09      	ldr	r5, [pc, #36]	; (3470 <CC_PalPowerSaveModeInit+0x2c>)
    344a:	6920      	ldr	r0, [r4, #16]
    344c:	68ab      	ldr	r3, [r5, #8]
    344e:	4798      	blx	r3
    3450:	b118      	cbz	r0, 345a <CC_PalPowerSaveModeInit+0x16>
    3452:	4b08      	ldr	r3, [pc, #32]	; (3474 <CC_PalPowerSaveModeInit+0x30>)
    3454:	4808      	ldr	r0, [pc, #32]	; (3478 <CC_PalPowerSaveModeInit+0x34>)
    3456:	685b      	ldr	r3, [r3, #4]
    3458:	4798      	blx	r3
    345a:	2100      	movs	r1, #0
    345c:	4a07      	ldr	r2, [pc, #28]	; (347c <CC_PalPowerSaveModeInit+0x38>)
    345e:	68eb      	ldr	r3, [r5, #12]
    3460:	6011      	str	r1, [r2, #0]
    3462:	6920      	ldr	r0, [r4, #16]
    3464:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3468:	4718      	bx	r3
    346a:	bf00      	nop
    346c:	200000a8 	.word	0x200000a8
    3470:	20000098 	.word	0x20000098
    3474:	20000090 	.word	0x20000090
    3478:	000052ac 	.word	0x000052ac
    347c:	20000838 	.word	0x20000838

00003480 <CC_PalPowerSaveModeSelect>:
    3480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3482:	4c1a      	ldr	r4, [pc, #104]	; (34ec <CC_PalPowerSaveModeSelect+0x6c>)
    3484:	4d1a      	ldr	r5, [pc, #104]	; (34f0 <CC_PalPowerSaveModeSelect+0x70>)
    3486:	4607      	mov	r7, r0
    3488:	68ab      	ldr	r3, [r5, #8]
    348a:	6920      	ldr	r0, [r4, #16]
    348c:	4798      	blx	r3
    348e:	b9e8      	cbnz	r0, 34cc <CC_PalPowerSaveModeSelect+0x4c>
    3490:	4e18      	ldr	r6, [pc, #96]	; (34f4 <CC_PalPowerSaveModeSelect+0x74>)
    3492:	6833      	ldr	r3, [r6, #0]
    3494:	b97f      	cbnz	r7, 34b6 <CC_PalPowerSaveModeSelect+0x36>
    3496:	b93b      	cbnz	r3, 34a8 <CC_PalPowerSaveModeSelect+0x28>
    3498:	2001      	movs	r0, #1
    349a:	4a17      	ldr	r2, [pc, #92]	; (34f8 <CC_PalPowerSaveModeSelect+0x78>)
    349c:	4917      	ldr	r1, [pc, #92]	; (34fc <CC_PalPowerSaveModeSelect+0x7c>)
    349e:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    34a2:	680a      	ldr	r2, [r1, #0]
    34a4:	2a00      	cmp	r2, #0
    34a6:	d1fc      	bne.n	34a2 <CC_PalPowerSaveModeSelect+0x22>
    34a8:	3301      	adds	r3, #1
    34aa:	6033      	str	r3, [r6, #0]
    34ac:	68eb      	ldr	r3, [r5, #12]
    34ae:	6920      	ldr	r0, [r4, #16]
    34b0:	4798      	blx	r3
    34b2:	2000      	movs	r0, #0
    34b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    34b6:	2b00      	cmp	r3, #0
    34b8:	d0f8      	beq.n	34ac <CC_PalPowerSaveModeSelect+0x2c>
    34ba:	2b01      	cmp	r3, #1
    34bc:	d008      	beq.n	34d0 <CC_PalPowerSaveModeSelect+0x50>
    34be:	3b01      	subs	r3, #1
    34c0:	6033      	str	r3, [r6, #0]
    34c2:	6920      	ldr	r0, [r4, #16]
    34c4:	68eb      	ldr	r3, [r5, #12]
    34c6:	4798      	blx	r3
    34c8:	2000      	movs	r0, #0
    34ca:	e7f3      	b.n	34b4 <CC_PalPowerSaveModeSelect+0x34>
    34cc:	480c      	ldr	r0, [pc, #48]	; (3500 <CC_PalPowerSaveModeSelect+0x80>)
    34ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    34d0:	4a0a      	ldr	r2, [pc, #40]	; (34fc <CC_PalPowerSaveModeSelect+0x7c>)
    34d2:	6813      	ldr	r3, [r2, #0]
    34d4:	2b00      	cmp	r3, #0
    34d6:	d1fc      	bne.n	34d2 <CC_PalPowerSaveModeSelect+0x52>
    34d8:	4a07      	ldr	r2, [pc, #28]	; (34f8 <CC_PalPowerSaveModeSelect+0x78>)
    34da:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    34de:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    34e2:	f000 f821 	bl	3528 <CC_HalMaskInterrupt>
    34e6:	6833      	ldr	r3, [r6, #0]
    34e8:	e7e9      	b.n	34be <CC_PalPowerSaveModeSelect+0x3e>
    34ea:	bf00      	nop
    34ec:	200000a8 	.word	0x200000a8
    34f0:	20000098 	.word	0x20000098
    34f4:	20000838 	.word	0x20000838
    34f8:	50840000 	.word	0x50840000
    34fc:	50841910 	.word	0x50841910
    3500:	ffff8fe9 	.word	0xffff8fe9

00003504 <CC_HalInit>:
    3504:	2000      	movs	r0, #0
    3506:	4770      	bx	lr

00003508 <CC_HalTerminate>:
    3508:	2000      	movs	r0, #0
    350a:	4770      	bx	lr

0000350c <CC_HalClearInterruptBit>:
    350c:	0543      	lsls	r3, r0, #21
    350e:	d503      	bpl.n	3518 <CC_HalClearInterruptBit+0xc>
    3510:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3514:	4b02      	ldr	r3, [pc, #8]	; (3520 <CC_HalClearInterruptBit+0x14>)
    3516:	601a      	str	r2, [r3, #0]
    3518:	4b02      	ldr	r3, [pc, #8]	; (3524 <CC_HalClearInterruptBit+0x18>)
    351a:	6018      	str	r0, [r3, #0]
    351c:	4770      	bx	lr
    351e:	bf00      	nop
    3520:	50841108 	.word	0x50841108
    3524:	50841a08 	.word	0x50841a08

00003528 <CC_HalMaskInterrupt>:
    3528:	4b01      	ldr	r3, [pc, #4]	; (3530 <CC_HalMaskInterrupt+0x8>)
    352a:	6018      	str	r0, [r3, #0]
    352c:	4770      	bx	lr
    352e:	bf00      	nop
    3530:	50841a04 	.word	0x50841a04

00003534 <CC_HalWaitInterruptRND>:
    3534:	b108      	cbz	r0, 353a <CC_HalWaitInterruptRND+0x6>
    3536:	f000 b803 	b.w	3540 <CC_PalWaitInterruptRND>
    353a:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
    353e:	4770      	bx	lr

00003540 <CC_PalWaitInterruptRND>:
    3540:	4602      	mov	r2, r0
    3542:	4807      	ldr	r0, [pc, #28]	; (3560 <CC_PalWaitInterruptRND+0x20>)
    3544:	6803      	ldr	r3, [r0, #0]
    3546:	4213      	tst	r3, r2
    3548:	d0fc      	beq.n	3544 <CC_PalWaitInterruptRND+0x4>
    354a:	b121      	cbz	r1, 3556 <CC_PalWaitInterruptRND+0x16>
    354c:	4b05      	ldr	r3, [pc, #20]	; (3564 <CC_PalWaitInterruptRND+0x24>)
    354e:	4806      	ldr	r0, [pc, #24]	; (3568 <CC_PalWaitInterruptRND+0x28>)
    3550:	681b      	ldr	r3, [r3, #0]
    3552:	600b      	str	r3, [r1, #0]
    3554:	6003      	str	r3, [r0, #0]
    3556:	4b05      	ldr	r3, [pc, #20]	; (356c <CC_PalWaitInterruptRND+0x2c>)
    3558:	2000      	movs	r0, #0
    355a:	601a      	str	r2, [r3, #0]
    355c:	4770      	bx	lr
    355e:	bf00      	nop
    3560:	50841a00 	.word	0x50841a00
    3564:	50841104 	.word	0x50841104
    3568:	50841108 	.word	0x50841108
    356c:	50841a08 	.word	0x50841a08

00003570 <mbedtls_platform_setup>:
    3570:	f000 b8a0 	b.w	36b4 <nrf_cc310_platform_init>

00003574 <mbedtls_platform_zeroize>:
    3574:	b130      	cbz	r0, 3584 <mbedtls_platform_zeroize+0x10>
    3576:	b129      	cbz	r1, 3584 <mbedtls_platform_zeroize+0x10>
    3578:	2300      	movs	r3, #0
    357a:	4401      	add	r1, r0
    357c:	7003      	strb	r3, [r0, #0]
    357e:	3001      	adds	r0, #1
    3580:	4281      	cmp	r1, r0
    3582:	d1fb      	bne.n	357c <mbedtls_platform_zeroize+0x8>
    3584:	4770      	bx	lr
    3586:	bf00      	nop

00003588 <mbedtls_hardware_poll>:
    3588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    358c:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
    3590:	460f      	mov	r7, r1
    3592:	9205      	str	r2, [sp, #20]
    3594:	2100      	movs	r1, #0
    3596:	4614      	mov	r4, r2
    3598:	a812      	add	r0, sp, #72	; 0x48
    359a:	f44f 7208 	mov.w	r2, #544	; 0x220
    359e:	461e      	mov	r6, r3
    35a0:	f001 fa05 	bl	49ae <memset>
    35a4:	2300      	movs	r3, #0
    35a6:	a808      	add	r0, sp, #32
    35a8:	4619      	mov	r1, r3
    35aa:	2228      	movs	r2, #40	; 0x28
    35ac:	9306      	str	r3, [sp, #24]
    35ae:	f001 f9fe 	bl	49ae <memset>
    35b2:	2f00      	cmp	r7, #0
    35b4:	d03c      	beq.n	3630 <mbedtls_hardware_poll+0xa8>
    35b6:	2e00      	cmp	r6, #0
    35b8:	d03a      	beq.n	3630 <mbedtls_hardware_poll+0xa8>
    35ba:	2c00      	cmp	r4, #0
    35bc:	d038      	beq.n	3630 <mbedtls_hardware_poll+0xa8>
    35be:	2104      	movs	r1, #4
    35c0:	a806      	add	r0, sp, #24
    35c2:	f7ff fec9 	bl	3358 <CC_PalMemSetZeroPlat>
    35c6:	a808      	add	r0, sp, #32
    35c8:	2128      	movs	r1, #40	; 0x28
    35ca:	f7ff fec5 	bl	3358 <CC_PalMemSetZeroPlat>
    35ce:	a808      	add	r0, sp, #32
    35d0:	f000 f832 	bl	3638 <RNG_PLAT_SetUserRngParameters>
    35d4:	b178      	cbz	r0, 35f6 <mbedtls_hardware_poll+0x6e>
    35d6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    35da:	a812      	add	r0, sp, #72	; 0x48
    35dc:	f44f 7108 	mov.w	r1, #544	; 0x220
    35e0:	f7ff ffc8 	bl	3574 <mbedtls_platform_zeroize>
    35e4:	a806      	add	r0, sp, #24
    35e6:	2104      	movs	r1, #4
    35e8:	f7ff ffc4 	bl	3574 <mbedtls_platform_zeroize>
    35ec:	4628      	mov	r0, r5
    35ee:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
    35f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    35f6:	ab12      	add	r3, sp, #72	; 0x48
    35f8:	f10d 081c 	add.w	r8, sp, #28
    35fc:	9003      	str	r0, [sp, #12]
    35fe:	e9cd 6301 	strd	r6, r3, [sp, #4]
    3602:	4602      	mov	r2, r0
    3604:	ab05      	add	r3, sp, #20
    3606:	a908      	add	r1, sp, #32
    3608:	f8cd 8000 	str.w	r8, [sp]
    360c:	a806      	add	r0, sp, #24
    360e:	f000 fce9 	bl	3fe4 <LLF_RND_GetTrngSource>
    3612:	2800      	cmp	r0, #0
    3614:	d1df      	bne.n	35d6 <mbedtls_hardware_poll+0x4e>
    3616:	6833      	ldr	r3, [r6, #0]
    3618:	42a3      	cmp	r3, r4
    361a:	d3dc      	bcc.n	35d6 <mbedtls_hardware_poll+0x4e>
    361c:	f8d8 1000 	ldr.w	r1, [r8]
    3620:	4605      	mov	r5, r0
    3622:	3108      	adds	r1, #8
    3624:	4638      	mov	r0, r7
    3626:	4622      	mov	r2, r4
    3628:	f7ff fe94 	bl	3354 <CC_PalMemCopyPlat>
    362c:	6034      	str	r4, [r6, #0]
    362e:	e7d4      	b.n	35da <mbedtls_hardware_poll+0x52>
    3630:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    3634:	e7da      	b.n	35ec <mbedtls_hardware_poll+0x64>
    3636:	bf00      	nop

00003638 <RNG_PLAT_SetUserRngParameters>:
    3638:	231c      	movs	r3, #28
    363a:	b530      	push	{r4, r5, lr}
    363c:	b083      	sub	sp, #12
    363e:	a902      	add	r1, sp, #8
    3640:	f841 3d04 	str.w	r3, [r1, #-4]!
    3644:	4604      	mov	r4, r0
    3646:	f000 f9b1 	bl	39ac <CC_PalTrngParamGet>
    364a:	4605      	mov	r5, r0
    364c:	b9d8      	cbnz	r0, 3686 <RNG_PLAT_SetUserRngParameters+0x4e>
    364e:	9b01      	ldr	r3, [sp, #4]
    3650:	2b1c      	cmp	r3, #28
    3652:	d11b      	bne.n	368c <RNG_PLAT_SetUserRngParameters+0x54>
    3654:	e9d4 3200 	ldrd	r3, r2, [r4]
    3658:	2101      	movs	r1, #1
    365a:	3300      	adds	r3, #0
    365c:	61e1      	str	r1, [r4, #28]
    365e:	bf18      	it	ne
    3660:	2301      	movne	r3, #1
    3662:	b10a      	cbz	r2, 3668 <RNG_PLAT_SetUserRngParameters+0x30>
    3664:	f043 0302 	orr.w	r3, r3, #2
    3668:	68a2      	ldr	r2, [r4, #8]
    366a:	b932      	cbnz	r2, 367a <RNG_PLAT_SetUserRngParameters+0x42>
    366c:	68e2      	ldr	r2, [r4, #12]
    366e:	b9aa      	cbnz	r2, 369c <RNG_PLAT_SetUserRngParameters+0x64>
    3670:	e9c4 3208 	strd	r3, r2, [r4, #32]
    3674:	b93b      	cbnz	r3, 3686 <RNG_PLAT_SetUserRngParameters+0x4e>
    3676:	4d0d      	ldr	r5, [pc, #52]	; (36ac <RNG_PLAT_SetUserRngParameters+0x74>)
    3678:	e009      	b.n	368e <RNG_PLAT_SetUserRngParameters+0x56>
    367a:	68e2      	ldr	r2, [r4, #12]
    367c:	f043 0304 	orr.w	r3, r3, #4
    3680:	b962      	cbnz	r2, 369c <RNG_PLAT_SetUserRngParameters+0x64>
    3682:	e9c4 3208 	strd	r3, r2, [r4, #32]
    3686:	4628      	mov	r0, r5
    3688:	b003      	add	sp, #12
    368a:	bd30      	pop	{r4, r5, pc}
    368c:	4d08      	ldr	r5, [pc, #32]	; (36b0 <RNG_PLAT_SetUserRngParameters+0x78>)
    368e:	4620      	mov	r0, r4
    3690:	211c      	movs	r1, #28
    3692:	f7ff fe61 	bl	3358 <CC_PalMemSetZeroPlat>
    3696:	4628      	mov	r0, r5
    3698:	b003      	add	sp, #12
    369a:	bd30      	pop	{r4, r5, pc}
    369c:	2200      	movs	r2, #0
    369e:	4628      	mov	r0, r5
    36a0:	f043 0308 	orr.w	r3, r3, #8
    36a4:	e9c4 3208 	strd	r3, r2, [r4, #32]
    36a8:	b003      	add	sp, #12
    36aa:	bd30      	pop	{r4, r5, pc}
    36ac:	00f00c0e 	.word	0x00f00c0e
    36b0:	00f00c37 	.word	0x00f00c37

000036b4 <nrf_cc310_platform_init>:
    36b4:	b510      	push	{r4, lr}
    36b6:	4c0c      	ldr	r4, [pc, #48]	; (36e8 <nrf_cc310_platform_init+0x34>)
    36b8:	6823      	ldr	r3, [r4, #0]
    36ba:	b113      	cbz	r3, 36c2 <nrf_cc310_platform_init+0xe>
    36bc:	4b0b      	ldr	r3, [pc, #44]	; (36ec <nrf_cc310_platform_init+0x38>)
    36be:	681b      	ldr	r3, [r3, #0]
    36c0:	b96b      	cbnz	r3, 36de <nrf_cc310_platform_init+0x2a>
    36c2:	f000 f931 	bl	3928 <CC_LibInit>
    36c6:	b138      	cbz	r0, 36d8 <nrf_cc310_platform_init+0x24>
    36c8:	3801      	subs	r0, #1
    36ca:	2806      	cmp	r0, #6
    36cc:	bf96      	itet	ls
    36ce:	4b08      	ldrls	r3, [pc, #32]	; (36f0 <nrf_cc310_platform_init+0x3c>)
    36d0:	4808      	ldrhi	r0, [pc, #32]	; (36f4 <nrf_cc310_platform_init+0x40>)
    36d2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
    36d6:	bd10      	pop	{r4, pc}
    36d8:	2201      	movs	r2, #1
    36da:	4b04      	ldr	r3, [pc, #16]	; (36ec <nrf_cc310_platform_init+0x38>)
    36dc:	601a      	str	r2, [r3, #0]
    36de:	2301      	movs	r3, #1
    36e0:	2000      	movs	r0, #0
    36e2:	6023      	str	r3, [r4, #0]
    36e4:	bd10      	pop	{r4, pc}
    36e6:	bf00      	nop
    36e8:	2000083c 	.word	0x2000083c
    36ec:	20000840 	.word	0x20000840
    36f0:	000052cc 	.word	0x000052cc
    36f4:	ffff8ffe 	.word	0xffff8ffe

000036f8 <nrf_cc310_platform_init_no_rng>:
    36f8:	b510      	push	{r4, lr}
    36fa:	4c09      	ldr	r4, [pc, #36]	; (3720 <nrf_cc310_platform_init_no_rng+0x28>)
    36fc:	6823      	ldr	r3, [r4, #0]
    36fe:	b11b      	cbz	r3, 3708 <nrf_cc310_platform_init_no_rng+0x10>
    3700:	2301      	movs	r3, #1
    3702:	2000      	movs	r0, #0
    3704:	6023      	str	r3, [r4, #0]
    3706:	bd10      	pop	{r4, pc}
    3708:	f000 f87c 	bl	3804 <CC_LibInitNoRng>
    370c:	2800      	cmp	r0, #0
    370e:	d0f7      	beq.n	3700 <nrf_cc310_platform_init_no_rng+0x8>
    3710:	3801      	subs	r0, #1
    3712:	2806      	cmp	r0, #6
    3714:	bf96      	itet	ls
    3716:	4b03      	ldrls	r3, [pc, #12]	; (3724 <nrf_cc310_platform_init_no_rng+0x2c>)
    3718:	4803      	ldrhi	r0, [pc, #12]	; (3728 <nrf_cc310_platform_init_no_rng+0x30>)
    371a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
    371e:	bd10      	pop	{r4, pc}
    3720:	2000083c 	.word	0x2000083c
    3724:	000052cc 	.word	0x000052cc
    3728:	ffff8ffe 	.word	0xffff8ffe

0000372c <nrf_cc310_platform_abort>:
    372c:	f3bf 8f4f 	dsb	sy
    3730:	4905      	ldr	r1, [pc, #20]	; (3748 <nrf_cc310_platform_abort+0x1c>)
    3732:	4b06      	ldr	r3, [pc, #24]	; (374c <nrf_cc310_platform_abort+0x20>)
    3734:	68ca      	ldr	r2, [r1, #12]
    3736:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    373a:	4313      	orrs	r3, r2
    373c:	60cb      	str	r3, [r1, #12]
    373e:	f3bf 8f4f 	dsb	sy
    3742:	bf00      	nop
    3744:	e7fd      	b.n	3742 <nrf_cc310_platform_abort+0x16>
    3746:	bf00      	nop
    3748:	e000ed00 	.word	0xe000ed00
    374c:	05fa0004 	.word	0x05fa0004

00003750 <CC_PalAbort>:
    3750:	4b01      	ldr	r3, [pc, #4]	; (3758 <CC_PalAbort+0x8>)
    3752:	685b      	ldr	r3, [r3, #4]
    3754:	4718      	bx	r3
    3756:	bf00      	nop
    3758:	20000090 	.word	0x20000090

0000375c <nrf_cc310_platform_set_abort>:
    375c:	4b02      	ldr	r3, [pc, #8]	; (3768 <nrf_cc310_platform_set_abort+0xc>)
    375e:	e9d0 1200 	ldrd	r1, r2, [r0]
    3762:	e9c3 1200 	strd	r1, r2, [r3]
    3766:	4770      	bx	lr
    3768:	20000090 	.word	0x20000090

0000376c <mutex_free>:
    376c:	4770      	bx	lr
    376e:	bf00      	nop

00003770 <mutex_unlock>:
    3770:	b510      	push	{r4, lr}
    3772:	4604      	mov	r4, r0
    3774:	b120      	cbz	r0, 3780 <mutex_unlock+0x10>
    3776:	f3bf 8f5f 	dmb	sy
    377a:	2000      	movs	r0, #0
    377c:	6020      	str	r0, [r4, #0]
    377e:	bd10      	pop	{r4, pc}
    3780:	4803      	ldr	r0, [pc, #12]	; (3790 <mutex_unlock+0x20>)
    3782:	f7ff ffe5 	bl	3750 <CC_PalAbort>
    3786:	f3bf 8f5f 	dmb	sy
    378a:	2000      	movs	r0, #0
    378c:	6020      	str	r0, [r4, #0]
    378e:	bd10      	pop	{r4, pc}
    3790:	0000530c 	.word	0x0000530c

00003794 <mutex_init>:
    3794:	b510      	push	{r4, lr}
    3796:	4604      	mov	r4, r0
    3798:	b110      	cbz	r0, 37a0 <mutex_init+0xc>
    379a:	2300      	movs	r3, #0
    379c:	6023      	str	r3, [r4, #0]
    379e:	bd10      	pop	{r4, pc}
    37a0:	4802      	ldr	r0, [pc, #8]	; (37ac <mutex_init+0x18>)
    37a2:	f7ff ffd5 	bl	3750 <CC_PalAbort>
    37a6:	2300      	movs	r3, #0
    37a8:	6023      	str	r3, [r4, #0]
    37aa:	bd10      	pop	{r4, pc}
    37ac:	000052e8 	.word	0x000052e8

000037b0 <mutex_lock>:
    37b0:	b150      	cbz	r0, 37c8 <mutex_lock+0x18>
    37b2:	2201      	movs	r2, #1
    37b4:	e8d0 3fef 	ldaex	r3, [r0]
    37b8:	e8c0 2fe1 	stlex	r1, r2, [r0]
    37bc:	2900      	cmp	r1, #0
    37be:	d1f9      	bne.n	37b4 <mutex_lock+0x4>
    37c0:	2b01      	cmp	r3, #1
    37c2:	d0f7      	beq.n	37b4 <mutex_lock+0x4>
    37c4:	f3bf 8f5f 	dmb	sy
    37c8:	2000      	movs	r0, #0
    37ca:	4770      	bx	lr

000037cc <nrf_cc310_platform_set_mutexes>:
    37cc:	b470      	push	{r4, r5, r6}
    37ce:	4b0b      	ldr	r3, [pc, #44]	; (37fc <nrf_cc310_platform_set_mutexes+0x30>)
    37d0:	6806      	ldr	r6, [r0, #0]
    37d2:	68c2      	ldr	r2, [r0, #12]
    37d4:	e9d0 5401 	ldrd	r5, r4, [r0, #4]
    37d8:	e9c3 4202 	strd	r4, r2, [r3, #8]
    37dc:	e9c3 6500 	strd	r6, r5, [r3]
    37e0:	e9d1 0203 	ldrd	r0, r2, [r1, #12]
    37e4:	680e      	ldr	r6, [r1, #0]
    37e6:	4b06      	ldr	r3, [pc, #24]	; (3800 <nrf_cc310_platform_set_mutexes+0x34>)
    37e8:	e9d1 5401 	ldrd	r5, r4, [r1, #4]
    37ec:	e9c3 6500 	strd	r6, r5, [r3]
    37f0:	e9c3 4002 	strd	r4, r0, [r3, #8]
    37f4:	611a      	str	r2, [r3, #16]
    37f6:	bc70      	pop	{r4, r5, r6}
    37f8:	4770      	bx	lr
    37fa:	bf00      	nop
    37fc:	20000098 	.word	0x20000098
    3800:	200000a8 	.word	0x200000a8

00003804 <CC_LibInitNoRng>:
    3804:	b510      	push	{r4, lr}
    3806:	f7ff fe7d 	bl	3504 <CC_HalInit>
    380a:	b970      	cbnz	r0, 382a <CC_LibInitNoRng+0x26>
    380c:	f7ff fda8 	bl	3360 <CC_PalInit>
    3810:	b980      	cbnz	r0, 3834 <CC_LibInitNoRng+0x30>
    3812:	f7ff fe35 	bl	3480 <CC_PalPowerSaveModeSelect>
    3816:	b980      	cbnz	r0, 383a <CC_LibInitNoRng+0x36>
    3818:	4b11      	ldr	r3, [pc, #68]	; (3860 <CC_LibInitNoRng+0x5c>)
    381a:	681b      	ldr	r3, [r3, #0]
    381c:	0e1b      	lsrs	r3, r3, #24
    381e:	2bf0      	cmp	r3, #240	; 0xf0
    3820:	d00d      	beq.n	383e <CC_LibInitNoRng+0x3a>
    3822:	2406      	movs	r4, #6
    3824:	f7ff fe70 	bl	3508 <CC_HalTerminate>
    3828:	e000      	b.n	382c <CC_LibInitNoRng+0x28>
    382a:	2403      	movs	r4, #3
    382c:	f7ff fdc6 	bl	33bc <CC_PalTerminate>
    3830:	4620      	mov	r0, r4
    3832:	bd10      	pop	{r4, pc}
    3834:	2404      	movs	r4, #4
    3836:	4620      	mov	r0, r4
    3838:	bd10      	pop	{r4, pc}
    383a:	2400      	movs	r4, #0
    383c:	e7f2      	b.n	3824 <CC_LibInitNoRng+0x20>
    383e:	4a09      	ldr	r2, [pc, #36]	; (3864 <CC_LibInitNoRng+0x60>)
    3840:	4b09      	ldr	r3, [pc, #36]	; (3868 <CC_LibInitNoRng+0x64>)
    3842:	6812      	ldr	r2, [r2, #0]
    3844:	429a      	cmp	r2, r3
    3846:	d001      	beq.n	384c <CC_LibInitNoRng+0x48>
    3848:	2407      	movs	r4, #7
    384a:	e7eb      	b.n	3824 <CC_LibInitNoRng+0x20>
    384c:	2001      	movs	r0, #1
    384e:	f7ff fe17 	bl	3480 <CC_PalPowerSaveModeSelect>
    3852:	2800      	cmp	r0, #0
    3854:	d1f1      	bne.n	383a <CC_LibInitNoRng+0x36>
    3856:	4b05      	ldr	r3, [pc, #20]	; (386c <CC_LibInitNoRng+0x68>)
    3858:	4604      	mov	r4, r0
    385a:	6018      	str	r0, [r3, #0]
    385c:	e7e8      	b.n	3830 <CC_LibInitNoRng+0x2c>
    385e:	bf00      	nop
    3860:	50841928 	.word	0x50841928
    3864:	50841a24 	.word	0x50841a24
    3868:	20e00000 	.word	0x20e00000
    386c:	50841a0c 	.word	0x50841a0c

00003870 <CC_LibInitRngModule>:
    3870:	b530      	push	{r4, r5, lr}
    3872:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
    3876:	f44f 7208 	mov.w	r2, #544	; 0x220
    387a:	2100      	movs	r1, #0
    387c:	a80c      	add	r0, sp, #48	; 0x30
    387e:	f001 f896 	bl	49ae <memset>
    3882:	2300      	movs	r3, #0
    3884:	a802      	add	r0, sp, #8
    3886:	4619      	mov	r1, r3
    3888:	2228      	movs	r2, #40	; 0x28
    388a:	9301      	str	r3, [sp, #4]
    388c:	f001 f88f 	bl	49ae <memset>
    3890:	a802      	add	r0, sp, #8
    3892:	f7ff fed1 	bl	3638 <RNG_PLAT_SetUserRngParameters>
    3896:	b118      	cbz	r0, 38a0 <CC_LibInitRngModule+0x30>
    3898:	2005      	movs	r0, #5
    389a:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
    389e:	bd30      	pop	{r4, r5, pc}
    38a0:	4d1c      	ldr	r5, [pc, #112]	; (3914 <CC_LibInitRngModule+0xa4>)
    38a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    38a6:	6828      	ldr	r0, [r5, #0]
    38a8:	f7ff fdba 	bl	3420 <CC_PalMutexLock>
    38ac:	4604      	mov	r4, r0
    38ae:	b9f0      	cbnz	r0, 38ee <CC_LibInitRngModule+0x7e>
    38b0:	2000      	movs	r0, #0
    38b2:	f7ff fde5 	bl	3480 <CC_PalPowerSaveModeSelect>
    38b6:	b9b0      	cbnz	r0, 38e6 <CC_LibInitRngModule+0x76>
    38b8:	aa0c      	add	r2, sp, #48	; 0x30
    38ba:	a902      	add	r1, sp, #8
    38bc:	a801      	add	r0, sp, #4
    38be:	f000 fbd5 	bl	406c <LLF_RND_RunTrngStartupTest>
    38c2:	4604      	mov	r4, r0
    38c4:	2001      	movs	r0, #1
    38c6:	f7ff fddb 	bl	3480 <CC_PalPowerSaveModeSelect>
    38ca:	b9f0      	cbnz	r0, 390a <CC_LibInitRngModule+0x9a>
    38cc:	6828      	ldr	r0, [r5, #0]
    38ce:	f7ff fdaf 	bl	3430 <CC_PalMutexUnlock>
    38d2:	b110      	cbz	r0, 38da <CC_LibInitRngModule+0x6a>
    38d4:	4810      	ldr	r0, [pc, #64]	; (3918 <CC_LibInitRngModule+0xa8>)
    38d6:	f7ff ff3b 	bl	3750 <CC_PalAbort>
    38da:	4620      	mov	r0, r4
    38dc:	2c00      	cmp	r4, #0
    38de:	d1db      	bne.n	3898 <CC_LibInitRngModule+0x28>
    38e0:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
    38e4:	bd30      	pop	{r4, r5, pc}
    38e6:	480d      	ldr	r0, [pc, #52]	; (391c <CC_LibInitRngModule+0xac>)
    38e8:	f7ff ff32 	bl	3750 <CC_PalAbort>
    38ec:	e7e4      	b.n	38b8 <CC_LibInitRngModule+0x48>
    38ee:	480c      	ldr	r0, [pc, #48]	; (3920 <CC_LibInitRngModule+0xb0>)
    38f0:	f7ff ff2e 	bl	3750 <CC_PalAbort>
    38f4:	2c01      	cmp	r4, #1
    38f6:	d1db      	bne.n	38b0 <CC_LibInitRngModule+0x40>
    38f8:	6828      	ldr	r0, [r5, #0]
    38fa:	f7ff fd99 	bl	3430 <CC_PalMutexUnlock>
    38fe:	2800      	cmp	r0, #0
    3900:	d0ca      	beq.n	3898 <CC_LibInitRngModule+0x28>
    3902:	4805      	ldr	r0, [pc, #20]	; (3918 <CC_LibInitRngModule+0xa8>)
    3904:	f7ff ff24 	bl	3750 <CC_PalAbort>
    3908:	e7c6      	b.n	3898 <CC_LibInitRngModule+0x28>
    390a:	4806      	ldr	r0, [pc, #24]	; (3924 <CC_LibInitRngModule+0xb4>)
    390c:	f7ff ff20 	bl	3750 <CC_PalAbort>
    3910:	e7dc      	b.n	38cc <CC_LibInitRngModule+0x5c>
    3912:	bf00      	nop
    3914:	2000008c 	.word	0x2000008c
    3918:	00005344 	.word	0x00005344
    391c:	0000535c 	.word	0x0000535c
    3920:	0000532c 	.word	0x0000532c
    3924:	0000537c 	.word	0x0000537c

00003928 <CC_LibInit>:
    3928:	b508      	push	{r3, lr}
    392a:	f7ff fdeb 	bl	3504 <CC_HalInit>
    392e:	b118      	cbz	r0, 3938 <CC_LibInit+0x10>
    3930:	f7ff fd44 	bl	33bc <CC_PalTerminate>
    3934:	2003      	movs	r0, #3
    3936:	bd08      	pop	{r3, pc}
    3938:	f7ff fd12 	bl	3360 <CC_PalInit>
    393c:	b968      	cbnz	r0, 395a <CC_LibInit+0x32>
    393e:	f7ff fd9f 	bl	3480 <CC_PalPowerSaveModeSelect>
    3942:	b960      	cbnz	r0, 395e <CC_LibInit+0x36>
    3944:	4b15      	ldr	r3, [pc, #84]	; (399c <CC_LibInit+0x74>)
    3946:	681b      	ldr	r3, [r3, #0]
    3948:	0e1b      	lsrs	r3, r3, #24
    394a:	2bf0      	cmp	r3, #240	; 0xf0
    394c:	d012      	beq.n	3974 <CC_LibInit+0x4c>
    394e:	f7ff fddb 	bl	3508 <CC_HalTerminate>
    3952:	f7ff fd33 	bl	33bc <CC_PalTerminate>
    3956:	2006      	movs	r0, #6
    3958:	bd08      	pop	{r3, pc}
    395a:	2004      	movs	r0, #4
    395c:	bd08      	pop	{r3, pc}
    395e:	f7ff fdd3 	bl	3508 <CC_HalTerminate>
    3962:	f7ff fd2b 	bl	33bc <CC_PalTerminate>
    3966:	f7ff ff83 	bl	3870 <CC_LibInitRngModule>
    396a:	2800      	cmp	r0, #0
    396c:	bf0c      	ite	eq
    396e:	2000      	moveq	r0, #0
    3970:	2005      	movne	r0, #5
    3972:	bd08      	pop	{r3, pc}
    3974:	4a0a      	ldr	r2, [pc, #40]	; (39a0 <CC_LibInit+0x78>)
    3976:	4b0b      	ldr	r3, [pc, #44]	; (39a4 <CC_LibInit+0x7c>)
    3978:	6812      	ldr	r2, [r2, #0]
    397a:	429a      	cmp	r2, r3
    397c:	d005      	beq.n	398a <CC_LibInit+0x62>
    397e:	f7ff fdc3 	bl	3508 <CC_HalTerminate>
    3982:	f7ff fd1b 	bl	33bc <CC_PalTerminate>
    3986:	2007      	movs	r0, #7
    3988:	bd08      	pop	{r3, pc}
    398a:	2001      	movs	r0, #1
    398c:	f7ff fd78 	bl	3480 <CC_PalPowerSaveModeSelect>
    3990:	2800      	cmp	r0, #0
    3992:	d1e4      	bne.n	395e <CC_LibInit+0x36>
    3994:	4b04      	ldr	r3, [pc, #16]	; (39a8 <CC_LibInit+0x80>)
    3996:	6018      	str	r0, [r3, #0]
    3998:	e7e5      	b.n	3966 <CC_LibInit+0x3e>
    399a:	bf00      	nop
    399c:	50841928 	.word	0x50841928
    39a0:	50841a24 	.word	0x50841a24
    39a4:	20e00000 	.word	0x20e00000
    39a8:	50841a0c 	.word	0x50841a0c

000039ac <CC_PalTrngParamGet>:
    39ac:	b118      	cbz	r0, 39b6 <CC_PalTrngParamGet+0xa>
    39ae:	b111      	cbz	r1, 39b6 <CC_PalTrngParamGet+0xa>
    39b0:	680b      	ldr	r3, [r1, #0]
    39b2:	2b1c      	cmp	r3, #28
    39b4:	d001      	beq.n	39ba <CC_PalTrngParamGet+0xe>
    39b6:	2001      	movs	r0, #1
    39b8:	4770      	bx	lr
    39ba:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    39be:	4a3a      	ldr	r2, [pc, #232]	; (3aa8 <CC_PalTrngParamGet+0xfc>)
    39c0:	f8d3 1c10 	ldr.w	r1, [r3, #3088]	; 0xc10
    39c4:	4291      	cmp	r1, r2
    39c6:	d05a      	beq.n	3a7e <CC_PalTrngParamGet+0xd2>
    39c8:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
    39cc:	3201      	adds	r2, #1
    39ce:	d056      	beq.n	3a7e <CC_PalTrngParamGet+0xd2>
    39d0:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
    39d4:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    39d8:	6002      	str	r2, [r0, #0]
    39da:	f8d3 1c14 	ldr.w	r1, [r3, #3092]	; 0xc14
    39de:	4a33      	ldr	r2, [pc, #204]	; (3aac <CC_PalTrngParamGet+0x100>)
    39e0:	4291      	cmp	r1, r2
    39e2:	d05e      	beq.n	3aa2 <CC_PalTrngParamGet+0xf6>
    39e4:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
    39e8:	3201      	adds	r2, #1
    39ea:	d05a      	beq.n	3aa2 <CC_PalTrngParamGet+0xf6>
    39ec:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
    39f0:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    39f4:	6042      	str	r2, [r0, #4]
    39f6:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    39fa:	f512 7f94 	cmn.w	r2, #296	; 0x128
    39fe:	d04d      	beq.n	3a9c <CC_PalTrngParamGet+0xf0>
    3a00:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    3a04:	3201      	adds	r2, #1
    3a06:	d049      	beq.n	3a9c <CC_PalTrngParamGet+0xf0>
    3a08:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    3a0c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    3a10:	6082      	str	r2, [r0, #8]
    3a12:	f8d3 1c1c 	ldr.w	r1, [r3, #3100]	; 0xc1c
    3a16:	4a26      	ldr	r2, [pc, #152]	; (3ab0 <CC_PalTrngParamGet+0x104>)
    3a18:	4291      	cmp	r1, r2
    3a1a:	d03c      	beq.n	3a96 <CC_PalTrngParamGet+0xea>
    3a1c:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
    3a20:	3201      	adds	r2, #1
    3a22:	d038      	beq.n	3a96 <CC_PalTrngParamGet+0xea>
    3a24:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
    3a28:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    3a2c:	60c2      	str	r2, [r0, #12]
    3a2e:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    3a32:	3270      	adds	r2, #112	; 0x70
    3a34:	d02d      	beq.n	3a92 <CC_PalTrngParamGet+0xe6>
    3a36:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    3a3a:	3201      	adds	r2, #1
    3a3c:	d029      	beq.n	3a92 <CC_PalTrngParamGet+0xe6>
    3a3e:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    3a42:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    3a46:	6102      	str	r2, [r0, #16]
    3a48:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    3a4c:	32af      	adds	r2, #175	; 0xaf
    3a4e:	d01e      	beq.n	3a8e <CC_PalTrngParamGet+0xe2>
    3a50:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    3a54:	3201      	adds	r2, #1
    3a56:	d01a      	beq.n	3a8e <CC_PalTrngParamGet+0xe2>
    3a58:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    3a5c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    3a60:	6142      	str	r2, [r0, #20]
    3a62:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
    3a66:	4a13      	ldr	r2, [pc, #76]	; (3ab4 <CC_PalTrngParamGet+0x108>)
    3a68:	4291      	cmp	r1, r2
    3a6a:	d00b      	beq.n	3a84 <CC_PalTrngParamGet+0xd8>
    3a6c:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
    3a70:	3201      	adds	r2, #1
    3a72:	d007      	beq.n	3a84 <CC_PalTrngParamGet+0xd8>
    3a74:	f8d3 3c08 	ldr.w	r3, [r3, #3080]	; 0xc08
    3a78:	6183      	str	r3, [r0, #24]
    3a7a:	2000      	movs	r0, #0
    3a7c:	4770      	bx	lr
    3a7e:	f640 02fc 	movw	r2, #2300	; 0x8fc
    3a82:	e7a7      	b.n	39d4 <CC_PalTrngParamGet+0x28>
    3a84:	f240 3337 	movw	r3, #823	; 0x337
    3a88:	6183      	str	r3, [r0, #24]
    3a8a:	2000      	movs	r0, #0
    3a8c:	4770      	bx	lr
    3a8e:	2251      	movs	r2, #81	; 0x51
    3a90:	e7e4      	b.n	3a5c <CC_PalTrngParamGet+0xb0>
    3a92:	2290      	movs	r2, #144	; 0x90
    3a94:	e7d5      	b.n	3a42 <CC_PalTrngParamGet+0x96>
    3a96:	f642 1204 	movw	r2, #10500	; 0x2904
    3a9a:	e7c5      	b.n	3a28 <CC_PalTrngParamGet+0x7c>
    3a9c:	f640 62d8 	movw	r2, #3800	; 0xed8
    3aa0:	e7b4      	b.n	3a0c <CC_PalTrngParamGet+0x60>
    3aa2:	f242 02d0 	movw	r2, #8400	; 0x20d0
    3aa6:	e7a3      	b.n	39f0 <CC_PalTrngParamGet+0x44>
    3aa8:	fffff8fc 	.word	0xfffff8fc
    3aac:	ffff20d0 	.word	0xffff20d0
    3ab0:	ffff2904 	.word	0xffff2904
    3ab4:	fffff337 	.word	0xfffff337

00003ab8 <LLF_RND_AdaptiveProportionTest>:
    3ab8:	b3a8      	cbz	r0, 3b26 <LLF_RND_AdaptiveProportionTest+0x6e>
    3aba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3abe:	1e4c      	subs	r4, r1, #1
    3ac0:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
    3ac4:	d22c      	bcs.n	3b20 <LLF_RND_AdaptiveProportionTest+0x68>
    3ac6:	b35b      	cbz	r3, 3b20 <LLF_RND_AdaptiveProportionTest+0x68>
    3ac8:	b352      	cbz	r2, 3b20 <LLF_RND_AdaptiveProportionTest+0x68>
    3aca:	f04f 0c00 	mov.w	ip, #0
    3ace:	00c9      	lsls	r1, r1, #3
    3ad0:	46e6      	mov	lr, ip
    3ad2:	4665      	mov	r5, ip
    3ad4:	4664      	mov	r4, ip
    3ad6:	1e4f      	subs	r7, r1, #1
    3ad8:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    3adc:	e00c      	b.n	3af8 <LLF_RND_AdaptiveProportionTest+0x40>
    3ade:	42ab      	cmp	r3, r5
    3ae0:	d016      	beq.n	3b10 <LLF_RND_AdaptiveProportionTest+0x58>
    3ae2:	458e      	cmp	lr, r1
    3ae4:	d101      	bne.n	3aea <LLF_RND_AdaptiveProportionTest+0x32>
    3ae6:	f10c 0c01 	add.w	ip, ip, #1
    3aea:	45a8      	cmp	r8, r5
    3aec:	d016      	beq.n	3b1c <LLF_RND_AdaptiveProportionTest+0x64>
    3aee:	3401      	adds	r4, #1
    3af0:	42bc      	cmp	r4, r7
    3af2:	f105 0501 	add.w	r5, r5, #1
    3af6:	d818      	bhi.n	3b2a <LLF_RND_AdaptiveProportionTest+0x72>
    3af8:	0961      	lsrs	r1, r4, #5
    3afa:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    3afe:	f004 061f 	and.w	r6, r4, #31
    3b02:	40f1      	lsrs	r1, r6
    3b04:	2e1f      	cmp	r6, #31
    3b06:	bf18      	it	ne
    3b08:	f001 0101 	andne.w	r1, r1, #1
    3b0c:	2c00      	cmp	r4, #0
    3b0e:	d1e6      	bne.n	3ade <LLF_RND_AdaptiveProportionTest+0x26>
    3b10:	2500      	movs	r5, #0
    3b12:	45a8      	cmp	r8, r5
    3b14:	468e      	mov	lr, r1
    3b16:	f04f 0c01 	mov.w	ip, #1
    3b1a:	d1e8      	bne.n	3aee <LLF_RND_AdaptiveProportionTest+0x36>
    3b1c:	4562      	cmp	r2, ip
    3b1e:	d2e6      	bcs.n	3aee <LLF_RND_AdaptiveProportionTest+0x36>
    3b20:	4803      	ldr	r0, [pc, #12]	; (3b30 <LLF_RND_AdaptiveProportionTest+0x78>)
    3b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3b26:	4802      	ldr	r0, [pc, #8]	; (3b30 <LLF_RND_AdaptiveProportionTest+0x78>)
    3b28:	4770      	bx	lr
    3b2a:	2000      	movs	r0, #0
    3b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3b30:	00f10c37 	.word	0x00f10c37

00003b34 <getTrngSource>:
    3b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3b38:	b08f      	sub	sp, #60	; 0x3c
    3b3a:	460d      	mov	r5, r1
    3b3c:	e9dd 4119 	ldrd	r4, r1, [sp, #100]	; 0x64
    3b40:	4683      	mov	fp, r0
    3b42:	2900      	cmp	r1, #0
    3b44:	d157      	bne.n	3bf6 <getTrngSource+0xc2>
    3b46:	6929      	ldr	r1, [r5, #16]
    3b48:	9103      	str	r1, [sp, #12]
    3b4a:	2100      	movs	r1, #0
    3b4c:	601c      	str	r4, [r3, #0]
    3b4e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    3b50:	6019      	str	r1, [r3, #0]
    3b52:	2a00      	cmp	r2, #0
    3b54:	f000 8122 	beq.w	3d9c <getTrngSource+0x268>
    3b58:	4a81      	ldr	r2, [pc, #516]	; (3d60 <getTrngSource+0x22c>)
    3b5a:	4b82      	ldr	r3, [pc, #520]	; (3d64 <getTrngSource+0x230>)
    3b5c:	6811      	ldr	r1, [r2, #0]
    3b5e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    3b60:	681b      	ldr	r3, [r3, #0]
    3b62:	429a      	cmp	r2, r3
    3b64:	d157      	bne.n	3c16 <getTrngSource+0xe2>
    3b66:	290a      	cmp	r1, #10
    3b68:	d155      	bne.n	3c16 <getTrngSource+0xe2>
    3b6a:	f89b 3003 	ldrb.w	r3, [fp, #3]
    3b6e:	9306      	str	r3, [sp, #24]
    3b70:	9903      	ldr	r1, [sp, #12]
    3b72:	2304      	movs	r3, #4
    3b74:	4608      	mov	r0, r1
    3b76:	4a7c      	ldr	r2, [pc, #496]	; (3d68 <getTrngSource+0x234>)
    3b78:	9302      	str	r3, [sp, #8]
    3b7a:	fba2 0200 	umull	r0, r2, r2, r0
    3b7e:	0892      	lsrs	r2, r2, #2
    3b80:	00cb      	lsls	r3, r1, #3
    3b82:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    3b86:	f104 0008 	add.w	r0, r4, #8
    3b8a:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
    3b8e:	3b01      	subs	r3, #1
    3b90:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 3d64 <getTrngSource+0x230>
    3b94:	f8df a200 	ldr.w	sl, [pc, #512]	; 3d98 <getTrngSource+0x264>
    3b98:	9004      	str	r0, [sp, #16]
    3b9a:	9200      	str	r2, [sp, #0]
    3b9c:	9305      	str	r3, [sp, #20]
    3b9e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    3ba0:	9c03      	ldr	r4, [sp, #12]
    3ba2:	601c      	str	r4, [r3, #0]
    3ba4:	2c00      	cmp	r4, #0
    3ba6:	f000 80cc 	beq.w	3d42 <getTrngSource+0x20e>
    3baa:	2600      	movs	r6, #0
    3bac:	9f04      	ldr	r7, [sp, #16]
    3bae:	f000 faa9 	bl	4104 <LLF_RND_TurnOffTrng>
    3bb2:	2300      	movs	r3, #0
    3bb4:	9307      	str	r3, [sp, #28]
    3bb6:	9b06      	ldr	r3, [sp, #24]
    3bb8:	f1bb 0f00 	cmp.w	fp, #0
    3bbc:	d03a      	beq.n	3c34 <getTrngSource+0x100>
    3bbe:	2d00      	cmp	r5, #0
    3bc0:	d034      	beq.n	3c2c <getTrngSource+0xf8>
    3bc2:	bb53      	cbnz	r3, 3c1a <getTrngSource+0xe6>
    3bc4:	005b      	lsls	r3, r3, #1
    3bc6:	9306      	str	r3, [sp, #24]
    3bc8:	f1bb 0f00 	cmp.w	fp, #0
    3bcc:	d036      	beq.n	3c3c <getTrngSource+0x108>
    3bce:	2d00      	cmp	r5, #0
    3bd0:	d034      	beq.n	3c3c <getTrngSource+0x108>
    3bd2:	b1e3      	cbz	r3, 3c0e <getTrngSource+0xda>
    3bd4:	a906      	add	r1, sp, #24
    3bd6:	4628      	mov	r0, r5
    3bd8:	f000 fa84 	bl	40e4 <LLF_RND_GetFastestRosc>
    3bdc:	2800      	cmp	r0, #0
    3bde:	f000 817d 	beq.w	3edc <getTrngSource+0x3a8>
    3be2:	4b62      	ldr	r3, [pc, #392]	; (3d6c <getTrngSource+0x238>)
    3be4:	4298      	cmp	r0, r3
    3be6:	d012      	beq.n	3c0e <getTrngSource+0xda>
    3be8:	9000      	str	r0, [sp, #0]
    3bea:	f000 fa8b 	bl	4104 <LLF_RND_TurnOffTrng>
    3bee:	9800      	ldr	r0, [sp, #0]
    3bf0:	b00f      	add	sp, #60	; 0x3c
    3bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3bf6:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    3bfa:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
    3bfe:	3001      	adds	r0, #1
    3c00:	bf0c      	ite	eq
    3c02:	f44f 7104 	moveq.w	r1, #528	; 0x210
    3c06:	f8d1 1c0c 	ldrne.w	r1, [r1, #3084]	; 0xc0c
    3c0a:	9103      	str	r1, [sp, #12]
    3c0c:	e79d      	b.n	3b4a <getTrngSource+0x16>
    3c0e:	6a2b      	ldr	r3, [r5, #32]
    3c10:	b973      	cbnz	r3, 3c30 <getTrngSource+0xfc>
    3c12:	4856      	ldr	r0, [pc, #344]	; (3d6c <getTrngSource+0x238>)
    3c14:	e7e8      	b.n	3be8 <getTrngSource+0xb4>
    3c16:	4856      	ldr	r0, [pc, #344]	; (3d70 <getTrngSource+0x23c>)
    3c18:	e7e6      	b.n	3be8 <getTrngSource+0xb4>
    3c1a:	a906      	add	r1, sp, #24
    3c1c:	4628      	mov	r0, r5
    3c1e:	f000 fa61 	bl	40e4 <LLF_RND_GetFastestRosc>
    3c22:	b168      	cbz	r0, 3c40 <getTrngSource+0x10c>
    3c24:	4b53      	ldr	r3, [pc, #332]	; (3d74 <getTrngSource+0x240>)
    3c26:	4298      	cmp	r0, r3
    3c28:	d0de      	beq.n	3be8 <getTrngSource+0xb4>
    3c2a:	9b06      	ldr	r3, [sp, #24]
    3c2c:	2b08      	cmp	r3, #8
    3c2e:	d1c9      	bne.n	3bc4 <getTrngSource+0x90>
    3c30:	4851      	ldr	r0, [pc, #324]	; (3d78 <getTrngSource+0x244>)
    3c32:	e7d9      	b.n	3be8 <getTrngSource+0xb4>
    3c34:	2b08      	cmp	r3, #8
    3c36:	d0fb      	beq.n	3c30 <getTrngSource+0xfc>
    3c38:	005b      	lsls	r3, r3, #1
    3c3a:	9306      	str	r3, [sp, #24]
    3c3c:	484f      	ldr	r0, [pc, #316]	; (3d7c <getTrngSource+0x248>)
    3c3e:	e7d3      	b.n	3be8 <getTrngSource+0xb4>
    3c40:	4629      	mov	r1, r5
    3c42:	9806      	ldr	r0, [sp, #24]
    3c44:	f000 fa30 	bl	40a8 <LLF_RND_GetRoscSampleCnt>
    3c48:	2800      	cmp	r0, #0
    3c4a:	d1eb      	bne.n	3c24 <getTrngSource+0xf0>
    3c4c:	9b06      	ldr	r3, [sp, #24]
    3c4e:	2b08      	cmp	r3, #8
    3c50:	f000 810e 	beq.w	3e70 <getTrngSource+0x33c>
    3c54:	2b04      	cmp	r3, #4
    3c56:	f000 8131 	beq.w	3ebc <getTrngSource+0x388>
    3c5a:	f1a3 0302 	sub.w	r3, r3, #2
    3c5e:	fab3 f383 	clz	r3, r3
    3c62:	095b      	lsrs	r3, r3, #5
    3c64:	9301      	str	r3, [sp, #4]
    3c66:	2301      	movs	r3, #1
    3c68:	4619      	mov	r1, r3
    3c6a:	4a45      	ldr	r2, [pc, #276]	; (3d80 <getTrngSource+0x24c>)
    3c6c:	6013      	str	r3, [r2, #0]
    3c6e:	f842 3c84 	str.w	r3, [r2, #-132]
    3c72:	4b43      	ldr	r3, [pc, #268]	; (3d80 <getTrngSource+0x24c>)
    3c74:	6019      	str	r1, [r3, #0]
    3c76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3c78:	f8c9 3000 	str.w	r3, [r9]
    3c7c:	f8d9 2000 	ldr.w	r2, [r9]
    3c80:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3c82:	429a      	cmp	r2, r3
    3c84:	d1f5      	bne.n	3c72 <getTrngSource+0x13e>
    3c86:	f04f 0800 	mov.w	r8, #0
    3c8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3c8e:	f8ca 8000 	str.w	r8, [sl]
    3c92:	f7ff fc3b 	bl	350c <CC_HalClearInterruptBit>
    3c96:	4a3b      	ldr	r2, [pc, #236]	; (3d84 <getTrngSource+0x250>)
    3c98:	4b3b      	ldr	r3, [pc, #236]	; (3d88 <getTrngSource+0x254>)
    3c9a:	4640      	mov	r0, r8
    3c9c:	601a      	str	r2, [r3, #0]
    3c9e:	f7ff fc43 	bl	3528 <CC_HalMaskInterrupt>
    3ca2:	220a      	movs	r2, #10
    3ca4:	9801      	ldr	r0, [sp, #4]
    3ca6:	4939      	ldr	r1, [pc, #228]	; (3d8c <getTrngSource+0x258>)
    3ca8:	4b2d      	ldr	r3, [pc, #180]	; (3d60 <getTrngSource+0x22c>)
    3caa:	6008      	str	r0, [r1, #0]
    3cac:	601a      	str	r2, [r3, #0]
    3cae:	692a      	ldr	r2, [r5, #16]
    3cb0:	f1a8 3855 	sub.w	r8, r8, #1431655765	; 0x55555555
    3cb4:	fba8 1202 	umull	r1, r2, r8, r2
    3cb8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3cba:	0912      	lsrs	r2, r2, #4
    3cbc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3cc0:	03db      	lsls	r3, r3, #15
    3cc2:	fb03 f302 	mul.w	r3, r3, r2
    3cc6:	4a32      	ldr	r2, [pc, #200]	; (3d90 <getTrngSource+0x25c>)
    3cc8:	099b      	lsrs	r3, r3, #6
    3cca:	6013      	str	r3, [r2, #0]
    3ccc:	2301      	movs	r3, #1
    3cce:	f8ca 3000 	str.w	r3, [sl]
    3cd2:	9906      	ldr	r1, [sp, #24]
    3cd4:	f8db 2000 	ldr.w	r2, [fp]
    3cd8:	020b      	lsls	r3, r1, #8
    3cda:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    3cde:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    3ce2:	4313      	orrs	r3, r2
    3ce4:	f8cb 3000 	str.w	r3, [fp]
    3ce8:	a807      	add	r0, sp, #28
    3cea:	f000 f9cd 	bl	4088 <LLF_RND_WaitRngInterrupt>
    3cee:	2800      	cmp	r0, #0
    3cf0:	d198      	bne.n	3c24 <getTrngSource+0xf0>
    3cf2:	4b28      	ldr	r3, [pc, #160]	; (3d94 <getTrngSource+0x260>)
    3cf4:	fba8 2804 	umull	r2, r8, r8, r4
    3cf8:	681a      	ldr	r2, [r3, #0]
    3cfa:	3314      	adds	r3, #20
    3cfc:	9208      	str	r2, [sp, #32]
    3cfe:	f853 2c10 	ldr.w	r2, [r3, #-16]
    3d02:	ebb6 0f98 	cmp.w	r6, r8, lsr #2
    3d06:	9209      	str	r2, [sp, #36]	; 0x24
    3d08:	f853 2c0c 	ldr.w	r2, [r3, #-12]
    3d0c:	920a      	str	r2, [sp, #40]	; 0x28
    3d0e:	f853 2c08 	ldr.w	r2, [r3, #-8]
    3d12:	920b      	str	r2, [sp, #44]	; 0x2c
    3d14:	f853 2c04 	ldr.w	r2, [r3, #-4]
    3d18:	920c      	str	r2, [sp, #48]	; 0x30
    3d1a:	681b      	ldr	r3, [r3, #0]
    3d1c:	930d      	str	r3, [sp, #52]	; 0x34
    3d1e:	d101      	bne.n	3d24 <getTrngSource+0x1f0>
    3d20:	9b00      	ldr	r3, [sp, #0]
    3d22:	b99b      	cbnz	r3, 3d4c <getTrngSource+0x218>
    3d24:	4638      	mov	r0, r7
    3d26:	2218      	movs	r2, #24
    3d28:	a908      	add	r1, sp, #32
    3d2a:	f7ff fb13 	bl	3354 <CC_PalMemCopyPlat>
    3d2e:	3c18      	subs	r4, #24
    3d30:	3718      	adds	r7, #24
    3d32:	3601      	adds	r6, #1
    3d34:	2c00      	cmp	r4, #0
    3d36:	f47f af3a 	bne.w	3bae <getTrngSource+0x7a>
    3d3a:	9b04      	ldr	r3, [sp, #16]
    3d3c:	2b00      	cmp	r3, #0
    3d3e:	f040 809a 	bne.w	3e76 <getTrngSource+0x342>
    3d42:	2300      	movs	r3, #0
    3d44:	9a18      	ldr	r2, [sp, #96]	; 0x60
    3d46:	6013      	str	r3, [r2, #0]
    3d48:	9b06      	ldr	r3, [sp, #24]
    3d4a:	e76f      	b.n	3c2c <getTrngSource+0xf8>
    3d4c:	461a      	mov	r2, r3
    3d4e:	4638      	mov	r0, r7
    3d50:	a908      	add	r1, sp, #32
    3d52:	1ae4      	subs	r4, r4, r3
    3d54:	f7ff fafe 	bl	3354 <CC_PalMemCopyPlat>
    3d58:	9b00      	ldr	r3, [sp, #0]
    3d5a:	441f      	add	r7, r3
    3d5c:	e7e9      	b.n	3d32 <getTrngSource+0x1fe>
    3d5e:	bf00      	nop
    3d60:	50841138 	.word	0x50841138
    3d64:	50841130 	.word	0x50841130
    3d68:	aaaaaaab 	.word	0xaaaaaaab
    3d6c:	00f10c31 	.word	0x00f10c31
    3d70:	00f10c30 	.word	0x00f10c30
    3d74:	00f10c02 	.word	0x00f10c02
    3d78:	00f10c32 	.word	0x00f10c32
    3d7c:	00f10c35 	.word	0x00f10c35
    3d80:	508411c4 	.word	0x508411c4
    3d84:	0ffffffe 	.word	0x0ffffffe
    3d88:	50841100 	.word	0x50841100
    3d8c:	5084110c 	.word	0x5084110c
    3d90:	508411d8 	.word	0x508411d8
    3d94:	50841114 	.word	0x50841114
    3d98:	5084112c 	.word	0x5084112c
    3d9c:	f1bb 0f00 	cmp.w	fp, #0
    3da0:	f43f af4c 	beq.w	3c3c <getTrngSource+0x108>
    3da4:	2d00      	cmp	r5, #0
    3da6:	f43f af49 	beq.w	3c3c <getTrngSource+0x108>
    3daa:	2301      	movs	r3, #1
    3dac:	a90e      	add	r1, sp, #56	; 0x38
    3dae:	f841 3d20 	str.w	r3, [r1, #-32]!
    3db2:	f8cb 2000 	str.w	r2, [fp]
    3db6:	4628      	mov	r0, r5
    3db8:	f000 f994 	bl	40e4 <LLF_RND_GetFastestRosc>
    3dbc:	2800      	cmp	r0, #0
    3dbe:	f47f af13 	bne.w	3be8 <getTrngSource+0xb4>
    3dc2:	4629      	mov	r1, r5
    3dc4:	9806      	ldr	r0, [sp, #24]
    3dc6:	f000 f96f 	bl	40a8 <LLF_RND_GetRoscSampleCnt>
    3dca:	2800      	cmp	r0, #0
    3dcc:	f47f af0c 	bne.w	3be8 <getTrngSource+0xb4>
    3dd0:	9f06      	ldr	r7, [sp, #24]
    3dd2:	2f08      	cmp	r7, #8
    3dd4:	f000 80eb 	beq.w	3fae <getTrngSource+0x47a>
    3dd8:	2f04      	cmp	r7, #4
    3dda:	f000 80ea 	beq.w	3fb2 <getTrngSource+0x47e>
    3dde:	f1a7 0702 	sub.w	r7, r7, #2
    3de2:	fab7 f787 	clz	r7, r7
    3de6:	097f      	lsrs	r7, r7, #5
    3de8:	2201      	movs	r2, #1
    3dea:	4616      	mov	r6, r2
    3dec:	4b73      	ldr	r3, [pc, #460]	; (3fbc <getTrngSource+0x488>)
    3dee:	4974      	ldr	r1, [pc, #464]	; (3fc0 <getTrngSource+0x48c>)
    3df0:	601a      	str	r2, [r3, #0]
    3df2:	4618      	mov	r0, r3
    3df4:	600a      	str	r2, [r1, #0]
    3df6:	3b94      	subs	r3, #148	; 0x94
    3df8:	6006      	str	r6, [r0, #0]
    3dfa:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    3dfc:	601a      	str	r2, [r3, #0]
    3dfe:	6819      	ldr	r1, [r3, #0]
    3e00:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    3e02:	4291      	cmp	r1, r2
    3e04:	d1f8      	bne.n	3df8 <getTrngSource+0x2c4>
    3e06:	f04f 0800 	mov.w	r8, #0
    3e0a:	4b6e      	ldr	r3, [pc, #440]	; (3fc4 <getTrngSource+0x490>)
    3e0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3e10:	f8c3 8000 	str.w	r8, [r3]
    3e14:	f7ff fb7a 	bl	350c <CC_HalClearInterruptBit>
    3e18:	4b6b      	ldr	r3, [pc, #428]	; (3fc8 <getTrngSource+0x494>)
    3e1a:	4a6c      	ldr	r2, [pc, #432]	; (3fcc <getTrngSource+0x498>)
    3e1c:	4640      	mov	r0, r8
    3e1e:	601a      	str	r2, [r3, #0]
    3e20:	f7ff fb82 	bl	3528 <CC_HalMaskInterrupt>
    3e24:	220a      	movs	r2, #10
    3e26:	496a      	ldr	r1, [pc, #424]	; (3fd0 <getTrngSource+0x49c>)
    3e28:	4b6a      	ldr	r3, [pc, #424]	; (3fd4 <getTrngSource+0x4a0>)
    3e2a:	600f      	str	r7, [r1, #0]
    3e2c:	601a      	str	r2, [r3, #0]
    3e2e:	991a      	ldr	r1, [sp, #104]	; 0x68
    3e30:	692b      	ldr	r3, [r5, #16]
    3e32:	2901      	cmp	r1, #1
    3e34:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    3e36:	f000 80b1 	beq.w	3f9c <getTrngSource+0x468>
    3e3a:	4967      	ldr	r1, [pc, #412]	; (3fd8 <getTrngSource+0x4a4>)
    3e3c:	fba1 1303 	umull	r1, r3, r1, r3
    3e40:	091b      	lsrs	r3, r3, #4
    3e42:	2101      	movs	r1, #1
    3e44:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    3e48:	03d2      	lsls	r2, r2, #15
    3e4a:	fb03 f302 	mul.w	r3, r3, r2
    3e4e:	4a63      	ldr	r2, [pc, #396]	; (3fdc <getTrngSource+0x4a8>)
    3e50:	099b      	lsrs	r3, r3, #6
    3e52:	6013      	str	r3, [r2, #0]
    3e54:	4b5b      	ldr	r3, [pc, #364]	; (3fc4 <getTrngSource+0x490>)
    3e56:	6019      	str	r1, [r3, #0]
    3e58:	9906      	ldr	r1, [sp, #24]
    3e5a:	f8db 2000 	ldr.w	r2, [fp]
    3e5e:	020b      	lsls	r3, r1, #8
    3e60:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    3e64:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    3e68:	4313      	orrs	r3, r2
    3e6a:	f8cb 3000 	str.w	r3, [fp]
    3e6e:	e67f      	b.n	3b70 <getTrngSource+0x3c>
    3e70:	2303      	movs	r3, #3
    3e72:	9301      	str	r3, [sp, #4]
    3e74:	e6f7      	b.n	3c66 <getTrngSource+0x132>
    3e76:	9b03      	ldr	r3, [sp, #12]
    3e78:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
    3e7c:	f63f af61 	bhi.w	3d42 <getTrngSource+0x20e>
    3e80:	e9dd 7c04 	ldrd	r7, ip, [sp, #16]
    3e84:	4620      	mov	r0, r4
    3e86:	4623      	mov	r3, r4
    3e88:	696e      	ldr	r6, [r5, #20]
    3e8a:	e004      	b.n	3e96 <getTrngSource+0x362>
    3e8c:	2001      	movs	r0, #1
    3e8e:	3301      	adds	r3, #1
    3e90:	4563      	cmp	r3, ip
    3e92:	4614      	mov	r4, r2
    3e94:	d815      	bhi.n	3ec2 <getTrngSource+0x38e>
    3e96:	095a      	lsrs	r2, r3, #5
    3e98:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
    3e9c:	f003 011f 	and.w	r1, r3, #31
    3ea0:	40ca      	lsrs	r2, r1
    3ea2:	291f      	cmp	r1, #31
    3ea4:	bf18      	it	ne
    3ea6:	f002 0201 	andne.w	r2, r2, #1
    3eaa:	2b00      	cmp	r3, #0
    3eac:	d0ee      	beq.n	3e8c <getTrngSource+0x358>
    3eae:	42a2      	cmp	r2, r4
    3eb0:	d1ec      	bne.n	3e8c <getTrngSource+0x358>
    3eb2:	3001      	adds	r0, #1
    3eb4:	4286      	cmp	r6, r0
    3eb6:	d1ea      	bne.n	3e8e <getTrngSource+0x35a>
    3eb8:	4849      	ldr	r0, [pc, #292]	; (3fe0 <getTrngSource+0x4ac>)
    3eba:	e00b      	b.n	3ed4 <getTrngSource+0x3a0>
    3ebc:	2302      	movs	r3, #2
    3ebe:	9301      	str	r3, [sp, #4]
    3ec0:	e6d1      	b.n	3c66 <getTrngSource+0x132>
    3ec2:	f44f 6380 	mov.w	r3, #1024	; 0x400
    3ec6:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
    3eca:	69aa      	ldr	r2, [r5, #24]
    3ecc:	f7ff fdf4 	bl	3ab8 <LLF_RND_AdaptiveProportionTest>
    3ed0:	2800      	cmp	r0, #0
    3ed2:	d05d      	beq.n	3f90 <getTrngSource+0x45c>
    3ed4:	2300      	movs	r3, #0
    3ed6:	9a18      	ldr	r2, [sp, #96]	; 0x60
    3ed8:	6013      	str	r3, [r2, #0]
    3eda:	e6a3      	b.n	3c24 <getTrngSource+0xf0>
    3edc:	4629      	mov	r1, r5
    3ede:	9806      	ldr	r0, [sp, #24]
    3ee0:	f000 f8e2 	bl	40a8 <LLF_RND_GetRoscSampleCnt>
    3ee4:	2800      	cmp	r0, #0
    3ee6:	f47f ae7c 	bne.w	3be2 <getTrngSource+0xae>
    3eea:	9c06      	ldr	r4, [sp, #24]
    3eec:	2c08      	cmp	r4, #8
    3eee:	d051      	beq.n	3f94 <getTrngSource+0x460>
    3ef0:	2c04      	cmp	r4, #4
    3ef2:	d051      	beq.n	3f98 <getTrngSource+0x464>
    3ef4:	f1a4 0402 	sub.w	r4, r4, #2
    3ef8:	fab4 f484 	clz	r4, r4
    3efc:	0964      	lsrs	r4, r4, #5
    3efe:	2301      	movs	r3, #1
    3f00:	461e      	mov	r6, r3
    3f02:	4619      	mov	r1, r3
    3f04:	4a2d      	ldr	r2, [pc, #180]	; (3fbc <getTrngSource+0x488>)
    3f06:	6013      	str	r3, [r2, #0]
    3f08:	f842 3c84 	str.w	r3, [r2, #-132]
    3f0c:	4b2b      	ldr	r3, [pc, #172]	; (3fbc <getTrngSource+0x488>)
    3f0e:	6019      	str	r1, [r3, #0]
    3f10:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3f12:	f8c9 3000 	str.w	r3, [r9]
    3f16:	f8d9 2000 	ldr.w	r2, [r9]
    3f1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3f1c:	429a      	cmp	r2, r3
    3f1e:	d1f5      	bne.n	3f0c <getTrngSource+0x3d8>
    3f20:	2700      	movs	r7, #0
    3f22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3f26:	f8ca 7000 	str.w	r7, [sl]
    3f2a:	f7ff faef 	bl	350c <CC_HalClearInterruptBit>
    3f2e:	4b26      	ldr	r3, [pc, #152]	; (3fc8 <getTrngSource+0x494>)
    3f30:	4a26      	ldr	r2, [pc, #152]	; (3fcc <getTrngSource+0x498>)
    3f32:	4638      	mov	r0, r7
    3f34:	601a      	str	r2, [r3, #0]
    3f36:	f7ff faf7 	bl	3528 <CC_HalMaskInterrupt>
    3f3a:	220a      	movs	r2, #10
    3f3c:	4924      	ldr	r1, [pc, #144]	; (3fd0 <getTrngSource+0x49c>)
    3f3e:	4b25      	ldr	r3, [pc, #148]	; (3fd4 <getTrngSource+0x4a0>)
    3f40:	600c      	str	r4, [r1, #0]
    3f42:	601a      	str	r2, [r3, #0]
    3f44:	692a      	ldr	r2, [r5, #16]
    3f46:	4924      	ldr	r1, [pc, #144]	; (3fd8 <getTrngSource+0x4a4>)
    3f48:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3f4a:	fba1 1202 	umull	r1, r2, r1, r2
    3f4e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3f52:	0912      	lsrs	r2, r2, #4
    3f54:	03db      	lsls	r3, r3, #15
    3f56:	fb03 f302 	mul.w	r3, r3, r2
    3f5a:	4a20      	ldr	r2, [pc, #128]	; (3fdc <getTrngSource+0x4a8>)
    3f5c:	099b      	lsrs	r3, r3, #6
    3f5e:	6013      	str	r3, [r2, #0]
    3f60:	f8ca 6000 	str.w	r6, [sl]
    3f64:	9b06      	ldr	r3, [sp, #24]
    3f66:	f8db 1000 	ldr.w	r1, [fp]
    3f6a:	021a      	lsls	r2, r3, #8
    3f6c:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
    3f70:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
    3f74:	431a      	orrs	r2, r3
    3f76:	0a13      	lsrs	r3, r2, #8
    3f78:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    3f7c:	4313      	orrs	r3, r2
    3f7e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3f82:	f8cb 3000 	str.w	r3, [fp]
    3f86:	9b02      	ldr	r3, [sp, #8]
    3f88:	3b01      	subs	r3, #1
    3f8a:	9302      	str	r3, [sp, #8]
    3f8c:	f47f ae07 	bne.w	3b9e <getTrngSource+0x6a>
    3f90:	2000      	movs	r0, #0
    3f92:	e629      	b.n	3be8 <getTrngSource+0xb4>
    3f94:	2403      	movs	r4, #3
    3f96:	e7b2      	b.n	3efe <getTrngSource+0x3ca>
    3f98:	2402      	movs	r4, #2
    3f9a:	e7b0      	b.n	3efe <getTrngSource+0x3ca>
    3f9c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    3fa0:	f8d3 1c0c 	ldr.w	r1, [r3, #3084]	; 0xc0c
    3fa4:	3101      	adds	r1, #1
    3fa6:	d006      	beq.n	3fb6 <getTrngSource+0x482>
    3fa8:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
    3fac:	e745      	b.n	3e3a <getTrngSource+0x306>
    3fae:	2703      	movs	r7, #3
    3fb0:	e71a      	b.n	3de8 <getTrngSource+0x2b4>
    3fb2:	2702      	movs	r7, #2
    3fb4:	e718      	b.n	3de8 <getTrngSource+0x2b4>
    3fb6:	2316      	movs	r3, #22
    3fb8:	e743      	b.n	3e42 <getTrngSource+0x30e>
    3fba:	bf00      	nop
    3fbc:	508411c4 	.word	0x508411c4
    3fc0:	50841140 	.word	0x50841140
    3fc4:	5084112c 	.word	0x5084112c
    3fc8:	50841100 	.word	0x50841100
    3fcc:	0ffffffe 	.word	0x0ffffffe
    3fd0:	5084110c 	.word	0x5084110c
    3fd4:	50841138 	.word	0x50841138
    3fd8:	aaaaaaab 	.word	0xaaaaaaab
    3fdc:	508411d8 	.word	0x508411d8
    3fe0:	00f10c36 	.word	0x00f10c36

00003fe4 <LLF_RND_GetTrngSource>:
    3fe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3fe8:	4c1b      	ldr	r4, [pc, #108]	; (4058 <LLF_RND_GetTrngSource+0x74>)
    3fea:	b085      	sub	sp, #20
    3fec:	4607      	mov	r7, r0
    3fee:	e9dd 560d 	ldrd	r5, r6, [sp, #52]	; 0x34
    3ff2:	4688      	mov	r8, r1
    3ff4:	6820      	ldr	r0, [r4, #0]
    3ff6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3ffa:	4691      	mov	r9, r2
    3ffc:	f7ff fa10 	bl	3420 <CC_PalMutexLock>
    4000:	bb28      	cbnz	r0, 404e <LLF_RND_GetTrngSource+0x6a>
    4002:	2000      	movs	r0, #0
    4004:	f7ff fa3c 	bl	3480 <CC_PalPowerSaveModeSelect>
    4008:	b9e8      	cbnz	r0, 4046 <LLF_RND_GetTrngSource+0x62>
    400a:	2300      	movs	r3, #0
    400c:	e9cd 5600 	strd	r5, r6, [sp]
    4010:	9302      	str	r3, [sp, #8]
    4012:	464a      	mov	r2, r9
    4014:	4641      	mov	r1, r8
    4016:	4638      	mov	r0, r7
    4018:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    401a:	f7ff fd8b 	bl	3b34 <getTrngSource>
    401e:	4605      	mov	r5, r0
    4020:	2001      	movs	r0, #1
    4022:	f7ff fa2d 	bl	3480 <CC_PalPowerSaveModeSelect>
    4026:	b950      	cbnz	r0, 403e <LLF_RND_GetTrngSource+0x5a>
    4028:	6820      	ldr	r0, [r4, #0]
    402a:	f7ff fa01 	bl	3430 <CC_PalMutexUnlock>
    402e:	b110      	cbz	r0, 4036 <LLF_RND_GetTrngSource+0x52>
    4030:	480a      	ldr	r0, [pc, #40]	; (405c <LLF_RND_GetTrngSource+0x78>)
    4032:	f7ff fb8d 	bl	3750 <CC_PalAbort>
    4036:	4628      	mov	r0, r5
    4038:	b005      	add	sp, #20
    403a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    403e:	4808      	ldr	r0, [pc, #32]	; (4060 <LLF_RND_GetTrngSource+0x7c>)
    4040:	f7ff fb86 	bl	3750 <CC_PalAbort>
    4044:	e7f0      	b.n	4028 <LLF_RND_GetTrngSource+0x44>
    4046:	4807      	ldr	r0, [pc, #28]	; (4064 <LLF_RND_GetTrngSource+0x80>)
    4048:	f7ff fb82 	bl	3750 <CC_PalAbort>
    404c:	e7dd      	b.n	400a <LLF_RND_GetTrngSource+0x26>
    404e:	4806      	ldr	r0, [pc, #24]	; (4068 <LLF_RND_GetTrngSource+0x84>)
    4050:	f7ff fb7e 	bl	3750 <CC_PalAbort>
    4054:	e7d5      	b.n	4002 <LLF_RND_GetTrngSource+0x1e>
    4056:	bf00      	nop
    4058:	2000008c 	.word	0x2000008c
    405c:	00005344 	.word	0x00005344
    4060:	0000537c 	.word	0x0000537c
    4064:	0000535c 	.word	0x0000535c
    4068:	0000532c 	.word	0x0000532c

0000406c <LLF_RND_RunTrngStartupTest>:
    406c:	b510      	push	{r4, lr}
    406e:	2401      	movs	r4, #1
    4070:	b086      	sub	sp, #24
    4072:	ab05      	add	r3, sp, #20
    4074:	e9cd 2401 	strd	r2, r4, [sp, #4]
    4078:	9300      	str	r3, [sp, #0]
    407a:	2200      	movs	r2, #0
    407c:	ab04      	add	r3, sp, #16
    407e:	f7ff fd59 	bl	3b34 <getTrngSource>
    4082:	b006      	add	sp, #24
    4084:	bd10      	pop	{r4, pc}
    4086:	bf00      	nop

00004088 <LLF_RND_WaitRngInterrupt>:
    4088:	b508      	push	{r3, lr}
    408a:	4601      	mov	r1, r0
    408c:	f44f 6080 	mov.w	r0, #1024	; 0x400
    4090:	f7ff fa50 	bl	3534 <CC_HalWaitInterruptRND>
    4094:	2300      	movs	r3, #0
    4096:	4902      	ldr	r1, [pc, #8]	; (40a0 <LLF_RND_WaitRngInterrupt+0x18>)
    4098:	4a02      	ldr	r2, [pc, #8]	; (40a4 <LLF_RND_WaitRngInterrupt+0x1c>)
    409a:	600b      	str	r3, [r1, #0]
    409c:	6013      	str	r3, [r2, #0]
    409e:	bd08      	pop	{r3, pc}
    40a0:	508411c8 	.word	0x508411c8
    40a4:	5084112c 	.word	0x5084112c

000040a8 <LLF_RND_GetRoscSampleCnt>:
    40a8:	3801      	subs	r0, #1
    40aa:	2807      	cmp	r0, #7
    40ac:	d815      	bhi.n	40da <LLF_RND_GetRoscSampleCnt+0x32>
    40ae:	e8df f000 	tbb	[pc, r0]
    40b2:	0c10      	.short	0x0c10
    40b4:	14140814 	.word	0x14140814
    40b8:	0414      	.short	0x0414
    40ba:	68cb      	ldr	r3, [r1, #12]
    40bc:	2000      	movs	r0, #0
    40be:	624b      	str	r3, [r1, #36]	; 0x24
    40c0:	4770      	bx	lr
    40c2:	688b      	ldr	r3, [r1, #8]
    40c4:	2000      	movs	r0, #0
    40c6:	624b      	str	r3, [r1, #36]	; 0x24
    40c8:	4770      	bx	lr
    40ca:	684b      	ldr	r3, [r1, #4]
    40cc:	2000      	movs	r0, #0
    40ce:	624b      	str	r3, [r1, #36]	; 0x24
    40d0:	4770      	bx	lr
    40d2:	680b      	ldr	r3, [r1, #0]
    40d4:	2000      	movs	r0, #0
    40d6:	624b      	str	r3, [r1, #36]	; 0x24
    40d8:	4770      	bx	lr
    40da:	4801      	ldr	r0, [pc, #4]	; (40e0 <LLF_RND_GetRoscSampleCnt+0x38>)
    40dc:	4770      	bx	lr
    40de:	bf00      	nop
    40e0:	00f10c31 	.word	0x00f10c31

000040e4 <LLF_RND_GetFastestRosc>:
    40e4:	680b      	ldr	r3, [r1, #0]
    40e6:	e002      	b.n	40ee <LLF_RND_GetFastestRosc+0xa>
    40e8:	2b08      	cmp	r3, #8
    40ea:	600b      	str	r3, [r1, #0]
    40ec:	d806      	bhi.n	40fc <LLF_RND_GetFastestRosc+0x18>
    40ee:	6a02      	ldr	r2, [r0, #32]
    40f0:	4213      	tst	r3, r2
    40f2:	ea4f 0343 	mov.w	r3, r3, lsl #1
    40f6:	d0f7      	beq.n	40e8 <LLF_RND_GetFastestRosc+0x4>
    40f8:	2000      	movs	r0, #0
    40fa:	4770      	bx	lr
    40fc:	4800      	ldr	r0, [pc, #0]	; (4100 <LLF_RND_GetFastestRosc+0x1c>)
    40fe:	4770      	bx	lr
    4100:	00f10c31 	.word	0x00f10c31

00004104 <LLF_RND_TurnOffTrng>:
    4104:	2300      	movs	r3, #0
    4106:	4904      	ldr	r1, [pc, #16]	; (4118 <LLF_RND_TurnOffTrng+0x14>)
    4108:	4a04      	ldr	r2, [pc, #16]	; (411c <LLF_RND_TurnOffTrng+0x18>)
    410a:	600b      	str	r3, [r1, #0]
    410c:	f44f 6080 	mov.w	r0, #1024	; 0x400
    4110:	6013      	str	r3, [r2, #0]
    4112:	f7ff b9fb 	b.w	350c <CC_HalClearInterruptBit>
    4116:	bf00      	nop
    4118:	5084112c 	.word	0x5084112c
    411c:	508411c4 	.word	0x508411c4

00004120 <main>:
 *  0 kB  |---------------------|
 */


void main(void)
{
    4120:	b508      	push	{r3, lr}
	spm_config();
    4122:	f7fc fd69 	bl	bf8 <spm_config>
	spm_jump();
}
    4126:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	spm_jump();
    412a:	f7fc bcfb 	b.w	b24 <spm_jump>

0000412e <arch_printk_char_out>:
}
    412e:	2000      	movs	r0, #0
    4130:	4770      	bx	lr

00004132 <print_err>:
{
    4132:	b570      	push	{r4, r5, r6, lr}
    4134:	460d      	mov	r5, r1
    4136:	4604      	mov	r4, r0
	out('E', ctx);
    4138:	2045      	movs	r0, #69	; 0x45
    413a:	47a0      	blx	r4
	out('R', ctx);
    413c:	4629      	mov	r1, r5
    413e:	2052      	movs	r0, #82	; 0x52
    4140:	47a0      	blx	r4
	out('R', ctx);
    4142:	4629      	mov	r1, r5
    4144:	4623      	mov	r3, r4
}
    4146:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
    414a:	2052      	movs	r0, #82	; 0x52
    414c:	4718      	bx	r3

0000414e <z_vprintk>:
{
    414e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
    4152:	f04f 0800 	mov.w	r8, #0
{
    4156:	4606      	mov	r6, r0
    4158:	460f      	mov	r7, r1
	int min_width = -1;
    415a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    415e:	46c1      	mov	r9, r8
{
    4160:	b08b      	sub	sp, #44	; 0x2c
    4162:	461c      	mov	r4, r3
	while (*fmt) {
    4164:	1e53      	subs	r3, r2, #1
    4166:	9302      	str	r3, [sp, #8]
			might_format = 0;
    4168:	2500      	movs	r5, #0
					break;
    416a:	e005      	b.n	4178 <z_vprintk+0x2a>
		if (!might_format) {
    416c:	b96d      	cbnz	r5, 418a <z_vprintk+0x3c>
			if (*fmt != '%') {
    416e:	2825      	cmp	r0, #37	; 0x25
    4170:	f000 814f 	beq.w	4412 <z_vprintk+0x2c4>
				out((int)*fmt, ctx);
    4174:	4639      	mov	r1, r7
    4176:	47b0      	blx	r6
	while (*fmt) {
    4178:	9b02      	ldr	r3, [sp, #8]
    417a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    417e:	9302      	str	r3, [sp, #8]
    4180:	2800      	cmp	r0, #0
    4182:	d1f3      	bne.n	416c <z_vprintk+0x1e>
}
    4184:	b00b      	add	sp, #44	; 0x2c
    4186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
    418a:	2864      	cmp	r0, #100	; 0x64
    418c:	d06e      	beq.n	426c <z_vprintk+0x11e>
    418e:	d81a      	bhi.n	41c6 <z_vprintk+0x78>
    4190:	2839      	cmp	r0, #57	; 0x39
    4192:	d80a      	bhi.n	41aa <z_vprintk+0x5c>
    4194:	2831      	cmp	r0, #49	; 0x31
    4196:	d260      	bcs.n	425a <z_vprintk+0x10c>
    4198:	282d      	cmp	r0, #45	; 0x2d
    419a:	f000 8140 	beq.w	441e <z_vprintk+0x2d0>
    419e:	2830      	cmp	r0, #48	; 0x30
    41a0:	d04c      	beq.n	423c <z_vprintk+0xee>
    41a2:	2825      	cmp	r0, #37	; 0x25
    41a4:	d107      	bne.n	41b6 <z_vprintk+0x68>
				out((int)'%', ctx);
    41a6:	4639      	mov	r1, r7
    41a8:	e00b      	b.n	41c2 <z_vprintk+0x74>
			switch (*fmt) {
    41aa:	2858      	cmp	r0, #88	; 0x58
    41ac:	f000 80bb 	beq.w	4326 <z_vprintk+0x1d8>
    41b0:	2863      	cmp	r0, #99	; 0x63
    41b2:	f000 812a 	beq.w	440a <z_vprintk+0x2bc>
					out((int)'%', ctx);
    41b6:	4639      	mov	r1, r7
    41b8:	2025      	movs	r0, #37	; 0x25
    41ba:	47b0      	blx	r6
					out((int)*fmt, ctx);
    41bc:	4639      	mov	r1, r7
    41be:	9b02      	ldr	r3, [sp, #8]
    41c0:	7818      	ldrb	r0, [r3, #0]
    41c2:	47b0      	blx	r6
    41c4:	e7d0      	b.n	4168 <z_vprintk+0x1a>
			switch (*fmt) {
    41c6:	2870      	cmp	r0, #112	; 0x70
    41c8:	f000 80a3 	beq.w	4312 <z_vprintk+0x1c4>
    41cc:	d811      	bhi.n	41f2 <z_vprintk+0xa4>
    41ce:	2869      	cmp	r0, #105	; 0x69
    41d0:	d04c      	beq.n	426c <z_vprintk+0x11e>
    41d2:	286c      	cmp	r0, #108	; 0x6c
    41d4:	d105      	bne.n	41e2 <z_vprintk+0x94>
				} else if (*fmt == 'l' && length_mod == 'l') {
    41d6:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    41da:	d12a      	bne.n	4232 <z_vprintk+0xe4>
					length_mod = 'L';
    41dc:	f04f 084c 	mov.w	r8, #76	; 0x4c
    41e0:	e7ca      	b.n	4178 <z_vprintk+0x2a>
			switch (*fmt) {
    41e2:	2868      	cmp	r0, #104	; 0x68
    41e4:	d1e7      	bne.n	41b6 <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
    41e6:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
    41ea:	d122      	bne.n	4232 <z_vprintk+0xe4>
					length_mod = 'H';
    41ec:	f04f 0848 	mov.w	r8, #72	; 0x48
    41f0:	e7c2      	b.n	4178 <z_vprintk+0x2a>
			switch (*fmt) {
    41f2:	2875      	cmp	r0, #117	; 0x75
    41f4:	d071      	beq.n	42da <z_vprintk+0x18c>
    41f6:	d818      	bhi.n	422a <z_vprintk+0xdc>
    41f8:	2873      	cmp	r0, #115	; 0x73
    41fa:	d1dc      	bne.n	41b6 <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
    41fc:	f854 5b04 	ldr.w	r5, [r4], #4
				while (*s) {
    4200:	46ab      	mov	fp, r5
    4202:	465b      	mov	r3, fp
    4204:	f81b 0b01 	ldrb.w	r0, [fp], #1
    4208:	2800      	cmp	r0, #0
    420a:	f040 80fb 	bne.w	4404 <z_vprintk+0x2b6>
				if (padding == PAD_SPACE_AFTER) {
    420e:	f1b9 0f03 	cmp.w	r9, #3
    4212:	f040 810a 	bne.w	442a <z_vprintk+0x2dc>
					int remaining = min_width - (s - start);
    4216:	1b5d      	subs	r5, r3, r5
    4218:	ebaa 0505 	sub.w	r5, sl, r5
					while (remaining-- > 0) {
    421c:	2d00      	cmp	r5, #0
    421e:	dda3      	ble.n	4168 <z_vprintk+0x1a>
						out(' ', ctx);
    4220:	4639      	mov	r1, r7
    4222:	2020      	movs	r0, #32
    4224:	47b0      	blx	r6
    4226:	3d01      	subs	r5, #1
    4228:	e7f8      	b.n	421c <z_vprintk+0xce>
			switch (*fmt) {
    422a:	2878      	cmp	r0, #120	; 0x78
    422c:	d07b      	beq.n	4326 <z_vprintk+0x1d8>
    422e:	287a      	cmp	r0, #122	; 0x7a
    4230:	d1c1      	bne.n	41b6 <z_vprintk+0x68>
				} else if (length_mod == 0) {
    4232:	f1b8 0f00 	cmp.w	r8, #0
    4236:	d1be      	bne.n	41b6 <z_vprintk+0x68>
    4238:	4680      	mov	r8, r0
    423a:	e79d      	b.n	4178 <z_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
    423c:	f1ba 0f00 	cmp.w	sl, #0
    4240:	da0e      	bge.n	4260 <z_vprintk+0x112>
    4242:	f1b9 0f00 	cmp.w	r9, #0
    4246:	f000 80ed 	beq.w	4424 <z_vprintk+0x2d6>
					min_width = *fmt - '0';
    424a:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    424e:	f1b9 0f00 	cmp.w	r9, #0
    4252:	bf08      	it	eq
    4254:	f04f 0902 	moveq.w	r9, #2
    4258:	e78e      	b.n	4178 <z_vprintk+0x2a>
				if (min_width < 0) {
    425a:	f1ba 0f00 	cmp.w	sl, #0
    425e:	dbf4      	blt.n	424a <z_vprintk+0xfc>
					min_width = 10 * min_width + *fmt - '0';
    4260:	230a      	movs	r3, #10
    4262:	fb03 0a0a 	mla	sl, r3, sl, r0
    4266:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
    426a:	e7f0      	b.n	424e <z_vprintk+0x100>
				if (length_mod == 'z') {
    426c:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
    4270:	d102      	bne.n	4278 <z_vprintk+0x12a>
					d = va_arg(ap, int);
    4272:	f854 5b04 	ldr.w	r5, [r4], #4
    4276:	e01f      	b.n	42b8 <z_vprintk+0x16a>
				} else if (length_mod == 'l') {
    4278:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    427c:	d0f9      	beq.n	4272 <z_vprintk+0x124>
				} else if (length_mod == 'L') {
    427e:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    4282:	d1f6      	bne.n	4272 <z_vprintk+0x124>
					long long lld = va_arg(ap, long long);
    4284:	3407      	adds	r4, #7
    4286:	f024 0407 	bic.w	r4, r4, #7
    428a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (lld > __LONG_MAX__ ||
    428e:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
    4292:	9106      	str	r1, [sp, #24]
    4294:	f143 0100 	adc.w	r1, r3, #0
    4298:	9107      	str	r1, [sp, #28]
    429a:	2100      	movs	r1, #0
    429c:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
    42a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    42a4:	4561      	cmp	r1, ip
    42a6:	bf08      	it	eq
    42a8:	4558      	cmpeq	r0, fp
    42aa:	d204      	bcs.n	42b6 <z_vprintk+0x168>
						print_err(out, ctx);
    42ac:	4639      	mov	r1, r7
    42ae:	4630      	mov	r0, r6
    42b0:	f7ff ff3f 	bl	4132 <print_err>
						break;
    42b4:	e758      	b.n	4168 <z_vprintk+0x1a>
					d = lld;
    42b6:	4615      	mov	r5, r2
				if (d < 0) {
    42b8:	2d00      	cmp	r5, #0
    42ba:	da05      	bge.n	42c8 <z_vprintk+0x17a>
					out((int)'-', ctx);
    42bc:	4639      	mov	r1, r7
    42be:	202d      	movs	r0, #45	; 0x2d
    42c0:	47b0      	blx	r6
					d = -d;
    42c2:	426d      	negs	r5, r5
					min_width--;
    42c4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
    42c8:	464b      	mov	r3, r9
    42ca:	462a      	mov	r2, r5
    42cc:	f8cd a000 	str.w	sl, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
    42d0:	4639      	mov	r1, r7
    42d2:	4630      	mov	r0, r6
    42d4:	f7fc f966 	bl	5a4 <_printk_dec_ulong>
				break;
    42d8:	e746      	b.n	4168 <z_vprintk+0x1a>
				if (length_mod == 'z') {
    42da:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
    42de:	d102      	bne.n	42e6 <z_vprintk+0x198>
					u = va_arg(ap, unsigned int);
    42e0:	f854 2b04 	ldr.w	r2, [r4], #4
    42e4:	e011      	b.n	430a <z_vprintk+0x1bc>
				} else if (length_mod == 'l') {
    42e6:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    42ea:	d0f9      	beq.n	42e0 <z_vprintk+0x192>
				} else if (length_mod == 'L') {
    42ec:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    42f0:	d1f6      	bne.n	42e0 <z_vprintk+0x192>
					if (llu > ~0UL) {
    42f2:	2100      	movs	r1, #0
    42f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
					unsigned long long llu =
    42f8:	3407      	adds	r4, #7
    42fa:	f024 0407 	bic.w	r4, r4, #7
    42fe:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
    4302:	4299      	cmp	r1, r3
    4304:	bf08      	it	eq
    4306:	4290      	cmpeq	r0, r2
    4308:	d3d0      	bcc.n	42ac <z_vprintk+0x15e>
				_printk_dec_ulong(out, ctx, u, padding,
    430a:	f8cd a000 	str.w	sl, [sp]
    430e:	464b      	mov	r3, r9
    4310:	e7de      	b.n	42d0 <z_vprintk+0x182>
				out('0', ctx);
    4312:	4639      	mov	r1, r7
    4314:	2030      	movs	r0, #48	; 0x30
    4316:	47b0      	blx	r6
				out('x', ctx);
    4318:	4639      	mov	r1, r7
    431a:	2078      	movs	r0, #120	; 0x78
    431c:	47b0      	blx	r6
					min_width = 8;
    431e:	f04f 0a08 	mov.w	sl, #8
				padding = PAD_ZERO_BEFORE;
    4322:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
    4326:	9b02      	ldr	r3, [sp, #8]
    4328:	781b      	ldrb	r3, [r3, #0]
    432a:	2b70      	cmp	r3, #112	; 0x70
    432c:	d104      	bne.n	4338 <z_vprintk+0x1ea>
					x = va_arg(ap, unsigned int);
    432e:	f854 3b04 	ldr.w	r3, [r4], #4
    4332:	9304      	str	r3, [sp, #16]
    4334:	2300      	movs	r3, #0
    4336:	e00d      	b.n	4354 <z_vprintk+0x206>
				} else if (length_mod == 'l') {
    4338:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    433c:	d0f7      	beq.n	432e <z_vprintk+0x1e0>
				} else if (length_mod == 'L') {
    433e:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    4342:	d1f4      	bne.n	432e <z_vprintk+0x1e0>
					x = va_arg(ap, unsigned long long);
    4344:	3407      	adds	r4, #7
    4346:	f024 0307 	bic.w	r3, r4, #7
    434a:	461c      	mov	r4, r3
    434c:	f854 2b08 	ldr.w	r2, [r4], #8
    4350:	685b      	ldr	r3, [r3, #4]
    4352:	9204      	str	r2, [sp, #16]
	int digits = 0;
    4354:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
    4356:	2210      	movs	r2, #16
	int shift = sizeof(num) * 8;
    4358:	f04f 0b40 	mov.w	fp, #64	; 0x40
	int digits = 0;
    435c:	9103      	str	r1, [sp, #12]
	int found_largest_digit = 0;
    435e:	9105      	str	r1, [sp, #20]
		shift -= 4;
    4360:	f1ab 0b04 	sub.w	fp, fp, #4
		nibble = (num >> shift) & 0xf;
    4364:	9804      	ldr	r0, [sp, #16]
    4366:	f1cb 0c20 	rsb	ip, fp, #32
    436a:	f1ab 0120 	sub.w	r1, fp, #32
    436e:	fa20 f00b 	lsr.w	r0, r0, fp
    4372:	fa03 fc0c 	lsl.w	ip, r3, ip
    4376:	ea40 000c 	orr.w	r0, r0, ip
    437a:	fa23 f101 	lsr.w	r1, r3, r1
    437e:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
    4380:	f010 000f 	ands.w	r0, r0, #15
    4384:	d106      	bne.n	4394 <z_vprintk+0x246>
    4386:	9905      	ldr	r1, [sp, #20]
    4388:	b911      	cbnz	r1, 4390 <z_vprintk+0x242>
    438a:	f1bb 0f00 	cmp.w	fp, #0
    438e:	d122      	bne.n	43d6 <z_vprintk+0x288>
			nibble += nibble > 9 ? 87 : 48;
    4390:	2130      	movs	r1, #48	; 0x30
    4392:	e003      	b.n	439c <z_vprintk+0x24e>
    4394:	2809      	cmp	r0, #9
    4396:	bf8c      	ite	hi
    4398:	2157      	movhi	r1, #87	; 0x57
    439a:	2130      	movls	r1, #48	; 0x30
    439c:	4408      	add	r0, r1
			out((int)nibble, ctx);
    439e:	b240      	sxtb	r0, r0
    43a0:	4639      	mov	r1, r7
    43a2:	9308      	str	r3, [sp, #32]
    43a4:	9205      	str	r2, [sp, #20]
    43a6:	47b0      	blx	r6
			digits++;
    43a8:	9b03      	ldr	r3, [sp, #12]
	while (shift >= 4) {
    43aa:	9a05      	ldr	r2, [sp, #20]
			digits++;
    43ac:	3301      	adds	r3, #1
    43ae:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
    43b0:	9b08      	ldr	r3, [sp, #32]
    43b2:	f1bb 0f00 	cmp.w	fp, #0
    43b6:	d123      	bne.n	4400 <z_vprintk+0x2b2>
	if (padding == PAD_SPACE_AFTER) {
    43b8:	f1b9 0f03 	cmp.w	r9, #3
    43bc:	f47f aed4 	bne.w	4168 <z_vprintk+0x1a>
		remaining = min_width * 2 - digits;
    43c0:	9b03      	ldr	r3, [sp, #12]
    43c2:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
    43c6:	2d00      	cmp	r5, #0
    43c8:	f77f aece 	ble.w	4168 <z_vprintk+0x1a>
			out(' ', ctx);
    43cc:	4639      	mov	r1, r7
    43ce:	2020      	movs	r0, #32
    43d0:	47b0      	blx	r6
    43d2:	3d01      	subs	r5, #1
    43d4:	e7f7      	b.n	43c6 <z_vprintk+0x278>
		if (remaining-- <= min_width) {
    43d6:	1e51      	subs	r1, r2, #1
    43d8:	4592      	cmp	sl, r2
    43da:	9108      	str	r1, [sp, #32]
    43dc:	db07      	blt.n	43ee <z_vprintk+0x2a0>
			if (padding == PAD_ZERO_BEFORE) {
    43de:	f1b9 0f01 	cmp.w	r9, #1
    43e2:	d106      	bne.n	43f2 <z_vprintk+0x2a4>
				out('0', ctx);
    43e4:	4639      	mov	r1, r7
    43e6:	2030      	movs	r0, #48	; 0x30
    43e8:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
    43ea:	47b0      	blx	r6
    43ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
			nibble += nibble > 9 ? 87 : 48;
    43ee:	9a08      	ldr	r2, [sp, #32]
    43f0:	e7b6      	b.n	4360 <z_vprintk+0x212>
			} else if (padding == PAD_SPACE_BEFORE) {
    43f2:	f1b9 0f02 	cmp.w	r9, #2
    43f6:	d1fa      	bne.n	43ee <z_vprintk+0x2a0>
    43f8:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
    43fa:	4639      	mov	r1, r7
    43fc:	2020      	movs	r0, #32
    43fe:	e7f4      	b.n	43ea <z_vprintk+0x29c>
			found_largest_digit = 1;
    4400:	9505      	str	r5, [sp, #20]
    4402:	e7ad      	b.n	4360 <z_vprintk+0x212>
					out((int)(*s++), ctx);
    4404:	4639      	mov	r1, r7
    4406:	47b0      	blx	r6
    4408:	e6fb      	b.n	4202 <z_vprintk+0xb4>
				out(c, ctx);
    440a:	4639      	mov	r1, r7
    440c:	f854 0b04 	ldr.w	r0, [r4], #4
    4410:	e6d7      	b.n	41c2 <z_vprintk+0x74>
				length_mod = 0;
    4412:	46a8      	mov	r8, r5
				padding = PAD_NONE;
    4414:	46a9      	mov	r9, r5
				min_width = -1;
    4416:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				might_format = 1;
    441a:	2501      	movs	r5, #1
    441c:	e6ac      	b.n	4178 <z_vprintk+0x2a>
				padding = PAD_SPACE_AFTER;
    441e:	f04f 0903 	mov.w	r9, #3
    4422:	e6a9      	b.n	4178 <z_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
    4424:	f04f 0901 	mov.w	r9, #1
    4428:	e6a6      	b.n	4178 <z_vprintk+0x2a>
			might_format = 0;
    442a:	4605      	mov	r5, r0
		++fmt;
    442c:	e6a4      	b.n	4178 <z_vprintk+0x2a>

0000442e <printk>:
{
    442e:	b40f      	push	{r0, r1, r2, r3}
    4430:	b507      	push	{r0, r1, r2, lr}
    4432:	a904      	add	r1, sp, #16
    4434:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    4438:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    443a:	f7fc f905 	bl	648 <vprintk>
}
    443e:	b003      	add	sp, #12
    4440:	f85d eb04 	ldr.w	lr, [sp], #4
    4444:	b004      	add	sp, #16
    4446:	4770      	bx	lr

00004448 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    4448:	4604      	mov	r4, r0
    444a:	b508      	push	{r3, lr}
    444c:	4608      	mov	r0, r1
    444e:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    4450:	461a      	mov	r2, r3
    4452:	47a0      	blx	r4
	return z_impl_k_current_get();
    4454:	f7fe fd6a 	bl	2f2c <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    4458:	f7fd f826 	bl	14a8 <z_impl_k_thread_abort>

0000445c <chunk_field>:
}

static inline size_t chunk_field(struct z_heap *h, chunkid_t c,
				 enum chunk_fields f)
{
	void *cmem = &h->buf[c];
    445c:	6803      	ldr	r3, [r0, #0]
    445e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3

	if (big_heap(h)) {
    4462:	6883      	ldr	r3, [r0, #8]
    4464:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((u32_t *)cmem)[f];
    4468:	bf2c      	ite	cs
    446a:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((u16_t *)cmem)[f];
    446e:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
    4472:	4770      	bx	lr

00004474 <chunk_set>:

static inline void chunk_set(struct z_heap *h, chunkid_t c,
			     enum chunk_fields f, chunkid_t val)
{
    4474:	b510      	push	{r4, lr}
	CHECK(c >= h->chunk0 && c < h->len);
	CHECK((val & ~((h->size_mask << 1) + 1)) == 0);
	CHECK((val & h->size_mask) < h->len);

	void *cmem = &h->buf[c];
    4476:	6804      	ldr	r4, [r0, #0]

	if (big_heap(h)) {
    4478:	6880      	ldr	r0, [r0, #8]
	void *cmem = &h->buf[c];
    447a:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if (big_heap(h)) {
    447e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((u32_t *)cmem)[f] = (u32_t) val;
    4482:	bf2c      	ite	cs
    4484:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		((u16_t *)cmem)[f] = (u16_t) val;
    4488:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
    448c:	bd10      	pop	{r4, pc}

0000448e <free_list_add>:
		chunk_set(h, second, FREE_PREV, first);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    448e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4492:	4604      	mov	r4, r0
	return (chunk_field(h, c, SIZE_AND_USED) & ~h->size_mask) != 0;
}

static ALWAYS_INLINE chunkid_t size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
    4494:	2200      	movs	r2, #0
    4496:	460d      	mov	r5, r1
    4498:	f7ff ffe0 	bl	445c <chunk_field>
    449c:	68e3      	ldr	r3, [r4, #12]
    449e:	4018      	ands	r0, r3
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    44a0:	68a3      	ldr	r3, [r4, #8]
}

static int bucket_idx(struct z_heap *h, size_t sz)
{
	/* A chunk of size 2 is the minimum size on big heaps */
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
    44a2:	fab0 f280 	clz	r2, r0
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    44a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    44aa:	bf34      	ite	cc
    44ac:	2000      	movcc	r0, #0
    44ae:	2001      	movcs	r0, #1
	int b = bucket_idx(h, size(h, c));

	if (h->buckets[b].list_size++ == 0) {
    44b0:	6863      	ldr	r3, [r4, #4]
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
    44b2:	f1c0 001f 	rsb	r0, r0, #31
    44b6:	1a80      	subs	r0, r0, r2
    44b8:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
    44bc:	684a      	ldr	r2, [r1, #4]
    44be:	1c56      	adds	r6, r2, #1
    44c0:	604e      	str	r6, [r1, #4]
    44c2:	b9a2      	cbnz	r2, 44ee <free_list_add+0x60>
		CHECK(h->buckets[b].next == 0);
		CHECK((h->avail_buckets & (1 << b)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << b);
    44c4:	2201      	movs	r2, #1
    44c6:	fa02 f100 	lsl.w	r1, r2, r0
    44ca:	6962      	ldr	r2, [r4, #20]
    44cc:	430a      	orrs	r2, r1
    44ce:	6162      	str	r2, [r4, #20]
		h->buckets[b].next = c;
		chunk_set(h, c, FREE_PREV, c);
    44d0:	4629      	mov	r1, r5
		h->buckets[b].next = c;
    44d2:	f843 5030 	str.w	r5, [r3, r0, lsl #3]
		chunk_set(h, c, FREE_PREV, c);
    44d6:	2202      	movs	r2, #2
    44d8:	462b      	mov	r3, r5
    44da:	4620      	mov	r0, r4
    44dc:	f7ff ffca 	bl	4474 <chunk_set>
		chunk_set(h, c, FREE_NEXT, c);
    44e0:	2203      	movs	r2, #3
    44e2:	4629      	mov	r1, r5
		chunkid_t first = free_prev(h, second);

		chunk_set(h, c, FREE_PREV, first);
		chunk_set(h, c, FREE_NEXT, second);
		chunk_set(h, first, FREE_NEXT, c);
		chunk_set(h, second, FREE_PREV, c);
    44e4:	4620      	mov	r0, r4
	}

	CHECK(h->avail_buckets & (1 << bucket_idx(h, size(h, c))));
}
    44e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		chunk_set(h, second, FREE_PREV, c);
    44ea:	f7ff bfc3 	b.w	4474 <chunk_set>
		chunkid_t second = h->buckets[b].next;
    44ee:	f853 6030 	ldr.w	r6, [r3, r0, lsl #3]
	return chunk_field(h, c, FREE_PREV);
    44f2:	2202      	movs	r2, #2
    44f4:	4631      	mov	r1, r6
    44f6:	4620      	mov	r0, r4
    44f8:	f7ff ffb0 	bl	445c <chunk_field>
    44fc:	4607      	mov	r7, r0
		chunk_set(h, c, FREE_PREV, first);
    44fe:	4603      	mov	r3, r0
    4500:	2202      	movs	r2, #2
    4502:	4629      	mov	r1, r5
    4504:	4620      	mov	r0, r4
    4506:	f7ff ffb5 	bl	4474 <chunk_set>
		chunk_set(h, c, FREE_NEXT, second);
    450a:	4633      	mov	r3, r6
    450c:	2203      	movs	r2, #3
    450e:	4629      	mov	r1, r5
    4510:	4620      	mov	r0, r4
    4512:	f7ff ffaf 	bl	4474 <chunk_set>
		chunk_set(h, first, FREE_NEXT, c);
    4516:	2203      	movs	r2, #3
    4518:	4639      	mov	r1, r7
    451a:	462b      	mov	r3, r5
    451c:	4620      	mov	r0, r4
    451e:	f7ff ffa9 	bl	4474 <chunk_set>
		chunk_set(h, second, FREE_PREV, c);
    4522:	2202      	movs	r2, #2
    4524:	4631      	mov	r1, r6
    4526:	e7dd      	b.n	44e4 <free_list_add+0x56>

00004528 <sys_heap_init>:

	return NULL;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    4528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if __SIZEOF_SIZE_T__ > 4
	CHECK(bytes < 0x800000000ULL);
#endif

	/* Round the start up, the end down */
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
    452a:	1dcc      	adds	r4, r1, #7
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
    452c:	4411      	add	r1, r2

	heap->heap = (struct z_heap *)addr;
	h->buf = (u64_t *)addr;
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
	h->len = buf_sz;
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
    452e:	f647 72ff 	movw	r2, #32767	; 0x7fff
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
    4532:	f024 0407 	bic.w	r4, r4, #7
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
    4536:	f021 0107 	bic.w	r1, r1, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    453a:	1b09      	subs	r1, r1, r4
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
    453c:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    4540:	ea4f 03d1 	mov.w	r3, r1, lsr #3
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
    4544:	bf2c      	ite	cs
    4546:	f06f 4100 	mvncs.w	r1, #2147483648	; 0x80000000
    454a:	4611      	movcc	r1, r2
	heap->heap = (struct z_heap *)addr;
    454c:	6004      	str	r4, [r0, #0]
	h->avail_buckets = 0;
    454e:	2000      	movs	r0, #0
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    4550:	4293      	cmp	r3, r2
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
    4552:	60e1      	str	r1, [r4, #12]
    4554:	bf94      	ite	ls
    4556:	2100      	movls	r1, #0
    4558:	2101      	movhi	r1, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
    455a:	fab3 f683 	clz	r6, r3
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    455e:	4617      	mov	r7, r2
				* sizeof(struct z_heap_bucket));

	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);

	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
		heap->heap->buckets[i].list_size = 0;
    4560:	4684      	mov	ip, r0
				* sizeof(struct z_heap_bucket));
    4562:	f1c1 0120 	rsb	r1, r1, #32
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
    4566:	f104 0518 	add.w	r5, r4, #24
				* sizeof(struct z_heap_bucket));
    456a:	1b89      	subs	r1, r1, r6
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
    456c:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
	h->len = buf_sz;
    4570:	e9c4 5301 	strd	r5, r3, [r4, #4]
	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
    4574:	3103      	adds	r1, #3
	h->buf = (u64_t *)addr;
    4576:	6024      	str	r4, [r4, #0]
	h->avail_buckets = 0;
    4578:	6160      	str	r0, [r4, #20]
	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
    457a:	6121      	str	r1, [r4, #16]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    457c:	68a2      	ldr	r2, [r4, #8]
    457e:	42ba      	cmp	r2, r7
    4580:	bf94      	ite	ls
    4582:	2200      	movls	r2, #0
    4584:	2201      	movhi	r2, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
    4586:	f1c2 021f 	rsb	r2, r2, #31
    458a:	1b92      	subs	r2, r2, r6
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
    458c:	4290      	cmp	r0, r2
    458e:	dd0a      	ble.n	45a6 <sys_heap_init+0x7e>
		heap->heap->buckets[i].next = 0;
	}

	chunk_set(h, h->chunk0, SIZE_AND_USED, buf_sz - h->chunk0);
    4590:	1a5b      	subs	r3, r3, r1
    4592:	4620      	mov	r0, r4
    4594:	2200      	movs	r2, #0
    4596:	f7ff ff6d 	bl	4474 <chunk_set>
	free_list_add(h, h->chunk0);
    459a:	6921      	ldr	r1, [r4, #16]
    459c:	4620      	mov	r0, r4
}
    459e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, h->chunk0);
    45a2:	f7ff bf74 	b.w	448e <free_list_add>
		heap->heap->buckets[i].list_size = 0;
    45a6:	f8c5 c004 	str.w	ip, [r5, #4]
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
    45aa:	3001      	adds	r0, #1
		heap->heap->buckets[i].next = 0;
    45ac:	f845 cb08 	str.w	ip, [r5], #8
    45b0:	e7e4      	b.n	457c <sys_heap_init+0x54>

000045b2 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    45b2:	4770      	bx	lr

000045b4 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
    45b4:	f7fd bbd6 	b.w	1d64 <SystemInit>

000045b8 <get_status>:
	if (data->started) {
    45b8:	220c      	movs	r2, #12
	data = get_sub_data(dev, type);
    45ba:	68c3      	ldr	r3, [r0, #12]
	return &data->subsys[type];
    45bc:	b2c9      	uxtb	r1, r1
	if (data->started) {
    45be:	fb02 3101 	mla	r1, r2, r1, r3
    45c2:	7a4b      	ldrb	r3, [r1, #9]
    45c4:	b923      	cbnz	r3, 45d0 <get_status+0x18>
	if (data->ref > 0) {
    45c6:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
    45c8:	fab0 f080 	clz	r0, r0
    45cc:	0940      	lsrs	r0, r0, #5
    45ce:	4770      	bx	lr
    45d0:	2002      	movs	r0, #2
}
    45d2:	4770      	bx	lr

000045d4 <clock_stop>:
{
    45d4:	b570      	push	{r4, r5, r6, lr}
    45d6:	b2c9      	uxtb	r1, r1
	config = get_sub_config(dev, type);
    45d8:	6844      	ldr	r4, [r0, #4]
	data = get_sub_data(dev, type);
    45da:	68c5      	ldr	r5, [r0, #12]
	__asm__ volatile(
    45dc:	f04f 0320 	mov.w	r3, #32
    45e0:	f3ef 8611 	mrs	r6, BASEPRI
    45e4:	f383 8811 	msr	BASEPRI, r3
    45e8:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
    45ec:	220c      	movs	r2, #12
    45ee:	434a      	muls	r2, r1
    45f0:	18ab      	adds	r3, r5, r2
    45f2:	7a18      	ldrb	r0, [r3, #8]
    45f4:	b190      	cbz	r0, 461c <clock_stop+0x48>
	data->ref--;
    45f6:	3801      	subs	r0, #1
    45f8:	b2c0      	uxtb	r0, r0
    45fa:	7218      	strb	r0, [r3, #8]
	if (data->ref == 0) {
    45fc:	b988      	cbnz	r0, 4622 <clock_stop+0x4e>
		nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
    45fe:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4602:	2101      	movs	r1, #1
	list->head = NULL;
    4604:	50a8      	str	r0, [r5, r2]
    4606:	78e2      	ldrb	r2, [r4, #3]
	list->tail = NULL;
    4608:	6058      	str	r0, [r3, #4]
    460a:	f102 2250 	add.w	r2, r2, #1342197760	; 0x50005000
    460e:	6011      	str	r1, [r2, #0]
		data->started = false;
    4610:	7258      	strb	r0, [r3, #9]
	__asm__ volatile(
    4612:	f386 8811 	msr	BASEPRI, r6
    4616:	f3bf 8f6f 	isb	sy
}
    461a:	bd70      	pop	{r4, r5, r6, pc}
		err = -EALREADY;
    461c:	f06f 0044 	mvn.w	r0, #68	; 0x44
    4620:	e7f7      	b.n	4612 <clock_stop+0x3e>
	int err = 0;
    4622:	2000      	movs	r0, #0
    4624:	e7f5      	b.n	4612 <clock_stop+0x3e>

00004626 <clock_async_start>:
{
    4626:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	config = get_sub_config(dev, type);
    462a:	6846      	ldr	r6, [r0, #4]
	return &config->subsys[type];
    462c:	b2cf      	uxtb	r7, r1
	clk_data = get_sub_data(dev, type);
    462e:	f8d0 e00c 	ldr.w	lr, [r0, #12]
	if ((data != NULL)
    4632:	b14a      	cbz	r2, 4648 <clock_async_start+0x22>
	sys_snode_t *item = sys_slist_peek_head(list);
    4634:	230c      	movs	r3, #12
    4636:	437b      	muls	r3, r7
    4638:	f85e 3003 	ldr.w	r3, [lr, r3]
		if (item == node) {
    463c:	429a      	cmp	r2, r3
    463e:	d052      	beq.n	46e6 <clock_async_start+0xc0>
Z_GENLIST_PEEK_NEXT(slist, snode)
    4640:	b113      	cbz	r3, 4648 <clock_async_start+0x22>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    4642:	681b      	ldr	r3, [r3, #0]
	} while (item);
    4644:	2b00      	cmp	r3, #0
    4646:	d1f9      	bne.n	463c <clock_async_start+0x16>
	__asm__ volatile(
    4648:	f04f 0320 	mov.w	r3, #32
    464c:	f3ef 8c11 	mrs	ip, BASEPRI
    4650:	f383 8811 	msr	BASEPRI, r3
    4654:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
    4658:	250c      	movs	r5, #12
    465a:	437d      	muls	r5, r7
    465c:	eb0e 0305 	add.w	r3, lr, r5
    4660:	7a1c      	ldrb	r4, [r3, #8]
    4662:	3401      	adds	r4, #1
    4664:	b2e4      	uxtb	r4, r4
    4666:	721c      	strb	r4, [r3, #8]
	__asm__ volatile(
    4668:	f38c 8811 	msr	BASEPRI, ip
    466c:	f3bf 8f6f 	isb	sy
	if (data) {
    4670:	b35a      	cbz	r2, 46ca <clock_async_start+0xa4>
    p_reg->INTENCLR = mask;
    4672:	f04f 2c50 	mov.w	ip, #1342197760	; 0x50005000
    4676:	f04f 0803 	mov.w	r8, #3
    467a:	f8cc 8308 	str.w	r8, [ip, #776]	; 0x308
		already_started = clk_data->started;
    467e:	f893 c009 	ldrb.w	ip, [r3, #9]
		if (!already_started) {
    4682:	f1bc 0f00 	cmp.w	ip, #0
    4686:	d115      	bne.n	46b4 <clock_async_start+0x8e>
	__asm__ volatile(
    4688:	f04f 0820 	mov.w	r8, #32
    468c:	f3ef 8911 	mrs	r9, BASEPRI
    4690:	f388 8811 	msr	BASEPRI, r8
    4694:	f3bf 8f6f 	isb	sy
	parent->next = child;
    4698:	f8c2 c000 	str.w	ip, [r2]
Z_GENLIST_APPEND(slist, snode)
    469c:	f8d3 8004 	ldr.w	r8, [r3, #4]
    46a0:	f1b8 0f00 	cmp.w	r8, #0
    46a4:	d11b      	bne.n	46de <clock_async_start+0xb8>
	list->tail = node;
    46a6:	605a      	str	r2, [r3, #4]
	list->head = node;
    46a8:	f84e 2005 	str.w	r2, [lr, r5]
	__asm__ volatile(
    46ac:	f389 8811 	msr	BASEPRI, r9
    46b0:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
    46b4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    46b8:	2503      	movs	r5, #3
    46ba:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		if (already_started) {
    46be:	f1bc 0f00 	cmp.w	ip, #0
    46c2:	d002      	beq.n	46ca <clock_async_start+0xa4>
			data->cb(dev, subsys, data->user_data);
    46c4:	e9d2 3201 	ldrd	r3, r2, [r2, #4]
    46c8:	4798      	blx	r3
	if (ref == 1) {
    46ca:	2c01      	cmp	r4, #1
    46cc:	d105      	bne.n	46da <clock_async_start+0xb4>
		nrf_clock_task_trigger(NRF_CLOCK, config->start_tsk);
    46ce:	eb06 0687 	add.w	r6, r6, r7, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    46d2:	78b3      	ldrb	r3, [r6, #2]
    46d4:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    46d8:	601c      	str	r4, [r3, #0]
	return 0;
    46da:	2000      	movs	r0, #0
    46dc:	e005      	b.n	46ea <clock_async_start+0xc4>
	parent->next = child;
    46de:	f8c8 2000 	str.w	r2, [r8]
	list->tail = node;
    46e2:	605a      	str	r2, [r3, #4]
    46e4:	e7e2      	b.n	46ac <clock_async_start+0x86>
		return -EBUSY;
    46e6:	f06f 000f 	mvn.w	r0, #15
}
    46ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000046ee <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
    46ee:	2200      	movs	r2, #0
    46f0:	f7ff bf99 	b.w	4626 <clock_async_start>

000046f4 <clk_init>:
{
    46f4:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    46f6:	2200      	movs	r2, #0
{
    46f8:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    46fa:	2101      	movs	r1, #1
    46fc:	2005      	movs	r0, #5
    46fe:	f7fc fcc9 	bl	1094 <z_arm_irq_priority_set>
	irq_enable(DT_INST_IRQN(0));
    4702:	2005      	movs	r0, #5
    4704:	f7fc fcb6 	bl	1074 <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    4708:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    470c:	2202      	movs	r2, #2
    470e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
    4712:	2203      	movs	r2, #3
	list->head = NULL;
    4714:	2000      	movs	r0, #0
    4716:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		sys_slist_init(&(get_sub_data(dev, i)->list));
    471a:	68e3      	ldr	r3, [r4, #12]
	list->tail = NULL;
    471c:	e9c3 0000 	strd	r0, r0, [r3]
    4720:	68e3      	ldr	r3, [r4, #12]
    4722:	e9c3 0003 	strd	r0, r0, [r3, #12]
}
    4726:	bd10      	pop	{r4, pc}

00004728 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    4728:	4770      	bx	lr

0000472a <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    472a:	4770      	bx	lr

0000472c <sys_clock_disable>:
    472c:	4770      	bx	lr

0000472e <adp536x_charger_current_set>:
	return adp536x_reg_write_mask(ADP536X_CHG_CURRENT_SET,
    472e:	f000 021f 	and.w	r2, r0, #31
    4732:	211f      	movs	r1, #31
    4734:	2004      	movs	r0, #4
    4736:	f7fc b93d 	b.w	9b4 <adp536x_reg_write_mask>

0000473a <adp536x_vbus_current_set>:
	return adp536x_reg_write_mask(ADP536X_CHG_VBUS_ILIM,
    473a:	f000 0207 	and.w	r2, r0, #7
    473e:	2107      	movs	r1, #7
    4740:	2002      	movs	r0, #2
    4742:	f7fc b937 	b.w	9b4 <adp536x_reg_write_mask>

00004746 <adp536x_charging_enable>:
	return adp536x_reg_write_mask(ADP536X_CHG_FUNC,
    4746:	4602      	mov	r2, r0
    4748:	2101      	movs	r1, #1
    474a:	2007      	movs	r0, #7
    474c:	f7fc b932 	b.w	9b4 <adp536x_reg_write_mask>

00004750 <adp536x_oc_chg_current_set>:
					ADP536X_BAT_OC_CHG_OC_CHG(value));
    4750:	0142      	lsls	r2, r0, #5
	return adp536x_reg_write_mask(ADP536X_BAT_OC_CHG,
    4752:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
    4756:	21e0      	movs	r1, #224	; 0xe0
    4758:	2015      	movs	r0, #21
    475a:	f7fc b92b 	b.w	9b4 <adp536x_reg_write_mask>

0000475e <adp536x_buck_1v8_set>:
	return adp536x_reg_write_mask(ADP536X_BUCK_OUTPUT,
    475e:	2218      	movs	r2, #24
    4760:	213f      	movs	r1, #63	; 0x3f
    4762:	202a      	movs	r0, #42	; 0x2a
    4764:	f7fc b926 	b.w	9b4 <adp536x_reg_write_mask>

00004768 <adp536x_buck_discharge_set>:
				ADP536X_BUCK_CFG_DISCHG_BUCK(enable));
    4768:	0042      	lsls	r2, r0, #1
	return adp536x_reg_write_mask(ADP536X_BUCK_CFG,
    476a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    476e:	2102      	movs	r1, #2
    4770:	2029      	movs	r0, #41	; 0x29
    4772:	f7fc b91f 	b.w	9b4 <adp536x_reg_write_mask>

00004776 <adp536x_buckbst_3v3_set>:
	return adp536x_reg_write_mask(ADP536X_BUCKBST_OUTPUT,
    4776:	2213      	movs	r2, #19
    4778:	213f      	movs	r1, #63	; 0x3f
    477a:	202c      	movs	r0, #44	; 0x2c
    477c:	f7fc b91a 	b.w	9b4 <adp536x_reg_write_mask>

00004780 <adp536x_buckbst_enable>:
	return adp536x_reg_write_mask(ADP536X_BUCKBST_CFG,
    4780:	4602      	mov	r2, r0
    4782:	2101      	movs	r1, #1
    4784:	202b      	movs	r0, #43	; 0x2b
    4786:	f7fc b915 	b.w	9b4 <adp536x_reg_write_mask>

0000478a <spm_secure_services_init>:
	mbedtls_platform_context platform_ctx = {0};
    478a:	2300      	movs	r3, #0
{
    478c:	b507      	push	{r0, r1, r2, lr}
	err = mbedtls_platform_setup(&platform_ctx);
    478e:	a801      	add	r0, sp, #4
	mbedtls_platform_context platform_ctx = {0};
    4790:	f88d 3004 	strb.w	r3, [sp, #4]
	err = mbedtls_platform_setup(&platform_ctx);
    4794:	f7fe feec 	bl	3570 <mbedtls_platform_setup>
}
    4798:	b003      	add	sp, #12
    479a:	f85d fb04 	ldr.w	pc, [sp], #4

0000479e <__acle_se_spm_request_random_number>:
	if (len != MBEDTLS_ENTROPY_MAX_GATHER) {
    479e:	2990      	cmp	r1, #144	; 0x90
{
    47a0:	b508      	push	{r3, lr}
    47a2:	4613      	mov	r3, r2
	if (len != MBEDTLS_ENTROPY_MAX_GATHER) {
    47a4:	d139      	bne.n	481a <__acle_se_spm_request_random_number+0x7c>
	err = mbedtls_hardware_poll(NULL, output, len, olen);
    47a6:	460a      	mov	r2, r1
    47a8:	4601      	mov	r1, r0
    47aa:	2000      	movs	r0, #0
    47ac:	f7fe feec 	bl	3588 <mbedtls_hardware_poll>
}
    47b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    47b4:	4671      	mov	r1, lr
    47b6:	4672      	mov	r2, lr
    47b8:	4673      	mov	r3, lr
    47ba:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    47be:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    47c2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    47c6:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
    47ca:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
    47ce:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
    47d2:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
    47d6:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
    47da:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
    47de:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
    47e2:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
    47e6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    47ea:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    47ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    47f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    47f6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    47fa:	f38e 8c00 	msr	CPSR_fs, lr
    47fe:	b410      	push	{r4}
    4800:	eef1 ca10 	vmrs	ip, fpscr
    4804:	f64f 7460 	movw	r4, #65376	; 0xff60
    4808:	f6c0 74ff 	movt	r4, #4095	; 0xfff
    480c:	ea0c 0c04 	and.w	ip, ip, r4
    4810:	eee1 ca10 	vmsr	fpscr, ip
    4814:	bc10      	pop	{r4}
    4816:	46f4      	mov	ip, lr
    4818:	4774      	bxns	lr
		return -EINVAL;
    481a:	f06f 0015 	mvn.w	r0, #21
    481e:	e7c7      	b.n	47b0 <__acle_se_spm_request_random_number+0x12>

00004820 <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    4820:	2000      	movs	r0, #0
    4822:	f7fb bf3d 	b.w	6a0 <sys_reboot>

00004826 <z_irq_spurious>:
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    4826:	2100      	movs	r1, #0
    4828:	2001      	movs	r0, #1
    482a:	f000 b82b 	b.w	4884 <z_arm_fatal_error>

0000482e <irq_target_state_set>:
 *
 * @return N/A
 */
void irq_target_state_set(unsigned int irq, int secure_state)
{
	if (secure_state) {
    482e:	b243      	sxtb	r3, r0
    4830:	b1a9      	cbz	r1, 485e <irq_target_state_set+0x30>
  if ((int32_t)(IRQn) >= 0)
    4832:	2b00      	cmp	r3, #0
    4834:	db12      	blt.n	485c <irq_target_state_set+0x2e>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] &= ~((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    4836:	2101      	movs	r1, #1
    4838:	095b      	lsrs	r3, r3, #5
    483a:	009b      	lsls	r3, r3, #2
    483c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    4840:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    4844:	f8d3 2280 	ldr.w	r2, [r3, #640]	; 0x280
    4848:	f000 001f 	and.w	r0, r0, #31
    484c:	fa01 f000 	lsl.w	r0, r1, r0
    4850:	ea22 0200 	bic.w	r2, r2, r0
    4854:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
    return((uint32_t)(((NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
    4858:	f8d3 3280 	ldr.w	r3, [r3, #640]	; 0x280
		/* Set target state to Non-Secure */
		if (NVIC_SetTargetState(irq) != 1) {
			__ASSERT(0, "NVIC SetTargetState error");
		}
	}
}
    485c:	4770      	bx	lr
  if ((int32_t)(IRQn) >= 0)
    485e:	2b00      	cmp	r3, #0
    4860:	dbfc      	blt.n	485c <irq_target_state_set+0x2e>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    4862:	2201      	movs	r2, #1
    4864:	095b      	lsrs	r3, r3, #5
    4866:	009b      	lsls	r3, r3, #2
    4868:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    486c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    4870:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
    4874:	f000 001f 	and.w	r0, r0, #31
    4878:	fa02 f000 	lsl.w	r0, r2, r0
    487c:	4308      	orrs	r0, r1
    487e:	f8c3 0280 	str.w	r0, [r3, #640]	; 0x280
    4882:	e7e9      	b.n	4858 <irq_target_state_set+0x2a>

00004884 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    4884:	f000 b970 	b.w	4b68 <z_fatal_error>

00004888 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    4888:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    488a:	6800      	ldr	r0, [r0, #0]
    488c:	f000 b96c 	b.w	4b68 <z_fatal_error>

00004890 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    4890:	b508      	push	{r3, lr}
	handler();
    4892:	f7fc fc63 	bl	115c <z_SysNmiOnReset>
	z_arm_int_exit();
}
    4896:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    489a:	f7fc bdd9 	b.w	1450 <z_arm_exc_exit>

0000489e <mpu_configure_region>:
{
    489e:	b530      	push	{r4, r5, lr}
	region_conf.base = new_region->start;
    48a0:	680b      	ldr	r3, [r1, #0]
{
    48a2:	b085      	sub	sp, #20
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    48a4:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
    48a6:	f89d 2008 	ldrb.w	r2, [sp, #8]
    48aa:	890d      	ldrh	r5, [r1, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    48ac:	3c01      	subs	r4, #1
	region_conf.base = new_region->start;
    48ae:	9300      	str	r3, [sp, #0]
	p_attr->mair_idx = attr->mair_idx;
    48b0:	8949      	ldrh	r1, [r1, #10]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    48b2:	f023 031f 	bic.w	r3, r3, #31
    48b6:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    48b8:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
    48bc:	f361 1247 	bfi	r2, r1, #5, #3
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    48c0:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
    48c4:	280f      	cmp	r0, #15
	p_attr->mair_idx = attr->mair_idx;
    48c6:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    48ca:	9303      	str	r3, [sp, #12]
    48cc:	4604      	mov	r4, r0
    48ce:	d805      	bhi.n	48dc <mpu_configure_region+0x3e>
	region_init(index, region_conf);
    48d0:	4669      	mov	r1, sp
    48d2:	f7fc fe39 	bl	1548 <region_init>
}
    48d6:	4620      	mov	r0, r4
    48d8:	b005      	add	sp, #20
    48da:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    48dc:	f06f 0415 	mvn.w	r4, #21
	return region_allocate_and_init(index,
    48e0:	e7f9      	b.n	48d6 <mpu_configure_region+0x38>

000048e2 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    48e2:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    48e6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    48ea:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
    48ec:	bf08      	it	eq
    48ee:	f06f 0015 	mvneq.w	r0, #21
    48f2:	4770      	bx	lr

000048f4 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    48f4:	3801      	subs	r0, #1
    48f6:	3901      	subs	r1, #1
    48f8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    48fc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    4900:	4293      	cmp	r3, r2
    4902:	d101      	bne.n	4908 <strcmp+0x14>
    4904:	2b00      	cmp	r3, #0
    4906:	d1f7      	bne.n	48f8 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    4908:	1a98      	subs	r0, r3, r2
    490a:	4770      	bx	lr

0000490c <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    490c:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    490e:	b15a      	cbz	r2, 4928 <memcmp+0x1c>
    4910:	3901      	subs	r1, #1
    4912:	1884      	adds	r4, r0, r2
    4914:	f810 2b01 	ldrb.w	r2, [r0], #1
    4918:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    491c:	42a0      	cmp	r0, r4
    491e:	d001      	beq.n	4924 <memcmp+0x18>
    4920:	429a      	cmp	r2, r3
    4922:	d0f7      	beq.n	4914 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    4924:	1ad0      	subs	r0, r2, r3
}
    4926:	bd10      	pop	{r4, pc}
		return 0;
    4928:	4610      	mov	r0, r2
    492a:	e7fc      	b.n	4926 <memcmp+0x1a>

0000492c <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    492c:	1a43      	subs	r3, r0, r1
    492e:	4293      	cmp	r3, r2
{
    4930:	b510      	push	{r4, lr}
    4932:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    4936:	d308      	bcc.n	494a <memmove+0x1e>
	char *dest = d;
    4938:	4602      	mov	r2, r0
    493a:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    493c:	429a      	cmp	r2, r3
    493e:	d00b      	beq.n	4958 <memmove+0x2c>
			*dest = *src;
    4940:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    4944:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
    4948:	e7f8      	b.n	493c <memmove+0x10>
    494a:	440a      	add	r2, r1
			dest[n] = src[n];
    494c:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
    4950:	428a      	cmp	r2, r1
			dest[n] = src[n];
    4952:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
    4956:	d1f9      	bne.n	494c <memmove+0x20>
		}
	}

	return d;
}
    4958:	bd10      	pop	{r4, pc}

0000495a <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    495a:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    495c:	ea81 0400 	eor.w	r4, r1, r0
    4960:	07a5      	lsls	r5, r4, #30
    4962:	4603      	mov	r3, r0
    4964:	d00b      	beq.n	497e <memcpy+0x24>
    4966:	3b01      	subs	r3, #1
    4968:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    496a:	4291      	cmp	r1, r2
    496c:	d11a      	bne.n	49a4 <memcpy+0x4a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    496e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    4970:	2a00      	cmp	r2, #0
    4972:	d0fc      	beq.n	496e <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    4974:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
    4978:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
    497a:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
    497e:	079c      	lsls	r4, r3, #30
    4980:	d1f6      	bne.n	4970 <memcpy+0x16>
    4982:	0895      	lsrs	r5, r2, #2
    4984:	00ac      	lsls	r4, r5, #2
    4986:	1f1e      	subs	r6, r3, #4
    4988:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    498a:	42b9      	cmp	r1, r7
    498c:	d105      	bne.n	499a <memcpy+0x40>
    498e:	f06f 0603 	mvn.w	r6, #3
    4992:	4423      	add	r3, r4
    4994:	fb06 2205 	mla	r2, r6, r5, r2
    4998:	e7e5      	b.n	4966 <memcpy+0xc>
			*(d_word++) = *(s_word++);
    499a:	f851 cb04 	ldr.w	ip, [r1], #4
    499e:	f846 cf04 	str.w	ip, [r6, #4]!
			n -= sizeof(mem_word_t);
    49a2:	e7f2      	b.n	498a <memcpy+0x30>
		*(d_byte++) = *(s_byte++);
    49a4:	f811 4b01 	ldrb.w	r4, [r1], #1
    49a8:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    49ac:	e7dd      	b.n	496a <memcpy+0x10>

000049ae <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    49ae:	4603      	mov	r3, r0
{
    49b0:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
    49b2:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    49b4:	079c      	lsls	r4, r3, #30
    49b6:	d110      	bne.n	49da <memset+0x2c>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    49b8:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    49bc:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    49c0:	0894      	lsrs	r4, r2, #2
    49c2:	eb03 0684 	add.w	r6, r3, r4, lsl #2
    49c6:	42b3      	cmp	r3, r6
    49c8:	d10d      	bne.n	49e6 <memset+0x38>
    49ca:	f06f 0503 	mvn.w	r5, #3
    49ce:	fb05 2404 	mla	r4, r5, r4, r2
    49d2:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    49d4:	42a3      	cmp	r3, r4
    49d6:	d109      	bne.n	49ec <memset+0x3e>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    49d8:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    49da:	2a00      	cmp	r2, #0
    49dc:	d0fc      	beq.n	49d8 <memset+0x2a>
		*(d_byte++) = c_byte;
    49de:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    49e2:	3a01      	subs	r2, #1
    49e4:	e7e6      	b.n	49b4 <memset+0x6>
		*(d_word++) = c_word;
    49e6:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
    49ea:	e7ec      	b.n	49c6 <memset+0x18>
		*(d_byte++) = c_byte;
    49ec:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    49f0:	e7f0      	b.n	49d4 <memset+0x26>

000049f2 <_stdout_hook_default>:
}
    49f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    49f6:	4770      	bx	lr

000049f8 <i2c_nrfx_twim_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
    49f8:	07ca      	lsls	r2, r1, #31
	nrfx_twim_t const *inst = &(get_dev_config(dev)->twim);
    49fa:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & dev_config) {
    49fc:	d405      	bmi.n	4a0a <i2c_nrfx_twim_configure+0x12>
	switch (I2C_SPEED_GET(dev_config)) {
    49fe:	f3c1 0242 	ubfx	r2, r1, #1, #3
    4a02:	2a01      	cmp	r2, #1
    4a04:	d004      	beq.n	4a10 <i2c_nrfx_twim_configure+0x18>
    4a06:	2a02      	cmp	r2, #2
    4a08:	d00b      	beq.n	4a22 <i2c_nrfx_twim_configure+0x2a>
		return -EINVAL;
    4a0a:	f06f 0015 	mvn.w	r0, #21
}
    4a0e:	4770      	bx	lr
    p_reg->FREQUENCY = frequency;
    4a10:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_100K);
    4a14:	681b      	ldr	r3, [r3, #0]
    4a16:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	get_dev_data(dev)->dev_config = dev_config;
    4a1a:	68c3      	ldr	r3, [r0, #12]
	return 0;
    4a1c:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
    4a1e:	6259      	str	r1, [r3, #36]	; 0x24
	return 0;
    4a20:	4770      	bx	lr
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_400K);
    4a22:	681b      	ldr	r3, [r3, #0]
    4a24:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
    4a28:	e7f5      	b.n	4a16 <i2c_nrfx_twim_configure+0x1e>

00004a2a <uarte_nrfx_config_get>:
{
    4a2a:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    4a2c:	68c2      	ldr	r2, [r0, #12]
    4a2e:	e892 0003 	ldmia.w	r2, {r0, r1}
    4a32:	e883 0003 	stmia.w	r3, {r0, r1}
}
    4a36:	2000      	movs	r0, #0
    4a38:	4770      	bx	lr

00004a3a <uarte_nrfx_err_check>:
	return config->uarte_regs;
    4a3a:	6843      	ldr	r3, [r0, #4]
    4a3c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    4a3e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    4a42:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    4a46:	4770      	bx	lr

00004a48 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    4a48:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    4a4a:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
    4a4c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4a4e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    4a52:	b138      	cbz	r0, 4a64 <uarte_nrfx_poll_in+0x1c>
	*c = data->rx_data;
    4a54:	7b12      	ldrb	r2, [r2, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4a56:	2000      	movs	r0, #0
    4a58:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4a5a:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4a5c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4a60:	601a      	str	r2, [r3, #0]
	return 0;
    4a62:	4770      	bx	lr
		return -1;
    4a64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    4a68:	4770      	bx	lr

00004a6a <uarte_nrfx_poll_out>:
{
    4a6a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
    4a6e:	6843      	ldr	r3, [r0, #4]
{
    4a70:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
    4a74:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    4a76:	68c6      	ldr	r6, [r0, #12]
	if (!k_is_in_isr()) {
    4a78:	f000 f97d 	bl	4d76 <k_is_in_isr>
    4a7c:	b9c0      	cbnz	r0, 4ab0 <uarte_nrfx_poll_out+0x46>
    4a7e:	2564      	movs	r5, #100	; 0x64
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    4a80:	f04f 0801 	mov.w	r8, #1
    4a84:	f106 0708 	add.w	r7, r6, #8
    4a88:	e8d7 3fef 	ldaex	r3, [r7]
    4a8c:	2b00      	cmp	r3, #0
    4a8e:	d103      	bne.n	4a98 <uarte_nrfx_poll_out+0x2e>
    4a90:	e8c7 8fe2 	stlex	r2, r8, [r7]
    4a94:	2a00      	cmp	r2, #0
    4a96:	d1f7      	bne.n	4a88 <uarte_nrfx_poll_out+0x1e>
		while (atomic_cas((atomic_t *) lock,
    4a98:	d00c      	beq.n	4ab4 <uarte_nrfx_poll_out+0x4a>
	return z_impl_k_sleep(timeout);
    4a9a:	2021      	movs	r0, #33	; 0x21
    4a9c:	2100      	movs	r1, #0
    4a9e:	3d01      	subs	r5, #1
    4aa0:	f7fe fa24 	bl	2eec <z_impl_k_sleep>
			if (--safety_cnt == 0) {
    4aa4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    4aa8:	d1ee      	bne.n	4a88 <uarte_nrfx_poll_out+0x1e>
}
    4aaa:	b002      	add	sp, #8
    4aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*lock = 1;
    4ab0:	2301      	movs	r3, #1
    4ab2:	60b3      	str	r3, [r6, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4ab4:	2300      	movs	r3, #0
    4ab6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    4aba:	f10d 0307 	add.w	r3, sp, #7
    4abe:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    4ac2:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4ac4:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    p_reg->TXD.MAXCNT = length;
    4ac8:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4acc:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4ace:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX),
    4ad2:	b923      	cbnz	r3, 4ade <uarte_nrfx_poll_out+0x74>
    4ad4:	2001      	movs	r0, #1
    4ad6:	f000 f815 	bl	4b04 <nrfx_busy_wait>
    4ada:	3d01      	subs	r5, #1
    4adc:	d1f7      	bne.n	4ace <uarte_nrfx_poll_out+0x64>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4ade:	2301      	movs	r3, #1
    4ae0:	60e3      	str	r3, [r4, #12]
	*lock = 0;
    4ae2:	2300      	movs	r3, #0
    4ae4:	60b3      	str	r3, [r6, #8]
    4ae6:	e7e0      	b.n	4aaa <uarte_nrfx_poll_out+0x40>

00004ae8 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    4ae8:	b508      	push	{r3, lr}
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
	sys_arch_reboot(0);
    4aea:	2000      	movs	r0, #0
    4aec:	f7fc fcbe 	bl	146c <sys_arch_reboot>

00004af0 <hw_cc310_init>:
#include <nrf_cc310_platform.h>

#if CONFIG_HW_CC310

static int hw_cc310_init(struct device *dev)
{
    4af0:	b508      	push	{r3, lr}
	int res;

	__ASSERT_NO_MSG(dev != NULL);

	/* Set the RTOS abort APIs */
	nrf_cc310_platform_abort_init();
    4af2:	f7fc f9d7 	bl	ea4 <nrf_cc310_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc310_platform_mutex_init();
    4af6:	f7fc fa59 	bl	fac <nrf_cc310_platform_mutex_init>
	res = nrf_cc310_platform_init();
#else
	res = nrf_cc310_platform_init_no_rng();
#endif
	return res;
}
    4afa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc310_platform_init_no_rng();
    4afe:	f7fe bdfb 	b.w	36f8 <nrf_cc310_platform_init_no_rng>

00004b02 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    4b02:	4700      	bx	r0

00004b04 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    4b04:	f000 b93d 	b.w	4d82 <z_impl_k_busy_wait>

00004b08 <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
    4b08:	7b0b      	ldrb	r3, [r1, #12]
    4b0a:	2b03      	cmp	r3, #3
    4b0c:	d82a      	bhi.n	4b64 <xfer_completeness_check+0x5c>
    4b0e:	e8df f003 	tbb	[pc, r3]
    4b12:	2622      	.short	0x2622
    4b14:	021a      	.short	0x021a
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    4b16:	688b      	ldr	r3, [r1, #8]
    4b18:	035a      	lsls	r2, r3, #13
    4b1a:	d504      	bpl.n	4b26 <xfer_completeness_check+0x1e>
    return p_reg->TXD.AMOUNT;
    4b1c:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
    4b20:	690a      	ldr	r2, [r1, #16]
    4b22:	429a      	cmp	r2, r3
    4b24:	d107      	bne.n	4b36 <xfer_completeness_check+0x2e>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    4b26:	688b      	ldr	r3, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
    4b28:	035b      	lsls	r3, r3, #13
    4b2a:	d41b      	bmi.n	4b64 <xfer_completeness_check+0x5c>
    4b2c:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
    4b30:	694a      	ldr	r2, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
    4b32:	429a      	cmp	r2, r3
    4b34:	d016      	beq.n	4b64 <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    4b36:	2300      	movs	r3, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    4b38:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    4b3a:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    4b3e:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
    4b42:	4618      	mov	r0, r3
    4b44:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
    4b46:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
    4b4a:	690a      	ldr	r2, [r1, #16]
    4b4c:	429a      	cmp	r2, r3
    4b4e:	d1f2      	bne.n	4b36 <xfer_completeness_check+0x2e>
    return p_reg->RXD.AMOUNT;
    4b50:	f8d0 353c 	ldr.w	r3, [r0, #1340]	; 0x53c
    4b54:	e7ec      	b.n	4b30 <xfer_completeness_check+0x28>
    return p_reg->TXD.AMOUNT;
    4b56:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
    4b5a:	690a      	ldr	r2, [r1, #16]
    4b5c:	e7e9      	b.n	4b32 <xfer_completeness_check+0x2a>
    return p_reg->RXD.AMOUNT;
    4b5e:	f8d0 353c 	ldr.w	r3, [r0, #1340]	; 0x53c
    4b62:	e7fa      	b.n	4b5a <xfer_completeness_check+0x52>
    bool transfer_complete = true;
    4b64:	2001      	movs	r0, #1
}
    4b66:	4770      	bx	lr

00004b68 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    4b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b6a:	4606      	mov	r6, r0
    4b6c:	460f      	mov	r7, r1
	__asm__ volatile(
    4b6e:	f04f 0320 	mov.w	r3, #32
    4b72:	f3ef 8511 	mrs	r5, BASEPRI
    4b76:	f383 8811 	msr	BASEPRI, r3
    4b7a:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    4b7e:	f7fe f9d5 	bl	2f2c <z_impl_k_current_get>
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
    4b82:	4639      	mov	r1, r7
    4b84:	4604      	mov	r4, r0
    4b86:	4630      	mov	r0, r6
    4b88:	f7ff ffae 	bl	4ae8 <k_sys_fatal_error_handler>
	__asm__ volatile(
    4b8c:	f385 8811 	msr	BASEPRI, r5
    4b90:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    4b94:	4620      	mov	r0, r4
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
    4b96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4b9a:	f7fc bc85 	b.w	14a8 <z_impl_k_thread_abort>

00004b9e <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
    4b9e:	f7ff bdc4 	b.w	472a <z_clock_idle_exit>

00004ba2 <k_mem_slab_init>:
{
    4ba2:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    4ba4:	2400      	movs	r4, #0
    4ba6:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    4ba8:	ea41 0402 	orr.w	r4, r1, r2
    4bac:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    4bb0:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
    4bb4:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    4bb6:	d10c      	bne.n	4bd2 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
    4bb8:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    4bba:	42a3      	cmp	r3, r4
    4bbc:	d103      	bne.n	4bc6 <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
    4bbe:	e9c0 0000 	strd	r0, r0, [r0]
    4bc2:	2000      	movs	r0, #0
}
    4bc4:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    4bc6:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    4bc8:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
    4bca:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
    4bcc:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    4bce:	4411      	add	r1, r2
    4bd0:	e7f3      	b.n	4bba <k_mem_slab_init+0x18>
		return -EINVAL;
    4bd2:	f06f 0015 	mvn.w	r0, #21
	return rc;
    4bd6:	e7f5      	b.n	4bc4 <k_mem_slab_init+0x22>

00004bd8 <z_impl_k_mutex_init>:
{
    4bd8:	4603      	mov	r3, r0
	mutex->owner = NULL;
    4bda:	2000      	movs	r0, #0
    4bdc:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
    4be0:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
    4be4:	4770      	bx	lr

00004be6 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    4be6:	b921      	cbnz	r1, 4bf2 <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4be8:	f3ef 8005 	mrs	r0, IPSR
    4bec:	b908      	cbnz	r0, 4bf2 <z_reschedule+0xc>
    4bee:	f7fc b9f3 	b.w	fd8 <arch_swap>
    4bf2:	f381 8811 	msr	BASEPRI, r1
    4bf6:	f3bf 8f6f 	isb	sy
}
    4bfa:	4770      	bx	lr

00004bfc <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    4bfc:	4603      	mov	r3, r0
    4bfe:	b920      	cbnz	r0, 4c0a <z_reschedule_irqlock+0xe>
    4c00:	f3ef 8205 	mrs	r2, IPSR
    4c04:	b90a      	cbnz	r2, 4c0a <z_reschedule_irqlock+0xe>
    4c06:	f7fc b9e7 	b.w	fd8 <arch_swap>
    4c0a:	f383 8811 	msr	BASEPRI, r3
    4c0e:	f3bf 8f6f 	isb	sy
}
    4c12:	4770      	bx	lr

00004c14 <z_reschedule_unlocked>:
	__asm__ volatile(
    4c14:	f04f 0320 	mov.w	r3, #32
    4c18:	f3ef 8011 	mrs	r0, BASEPRI
    4c1c:	f383 8811 	msr	BASEPRI, r3
    4c20:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    4c24:	f7ff bfea 	b.w	4bfc <z_reschedule_irqlock>

00004c28 <z_priq_dumb_best>:
	return list->head == list;
    4c28:	6803      	ldr	r3, [r0, #0]
}
    4c2a:	4298      	cmp	r0, r3
    4c2c:	bf14      	ite	ne
    4c2e:	4618      	movne	r0, r3
    4c30:	2000      	moveq	r0, #0
    4c32:	4770      	bx	lr

00004c34 <z_ready_thread>:
{
    4c34:	b510      	push	{r4, lr}
    4c36:	f04f 0320 	mov.w	r3, #32
    4c3a:	f3ef 8411 	mrs	r4, BASEPRI
    4c3e:	f383 8811 	msr	BASEPRI, r3
    4c42:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
    4c46:	f7fd fed9 	bl	29fc <ready_thread>
	__asm__ volatile(
    4c4a:	f384 8811 	msr	BASEPRI, r4
    4c4e:	f3bf 8f6f 	isb	sy
}
    4c52:	bd10      	pop	{r4, pc}

00004c54 <z_thread_timeout>:
	if (thread->base.pended_on != NULL) {
    4c54:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
    4c58:	b570      	push	{r4, r5, r6, lr}
    4c5a:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    4c5c:	f1a0 0518 	sub.w	r5, r0, #24
	if (thread->base.pended_on != NULL) {
    4c60:	b1cb      	cbz	r3, 4c96 <z_thread_timeout+0x42>
	__asm__ volatile(
    4c62:	f04f 0320 	mov.w	r3, #32
    4c66:	f3ef 8611 	mrs	r6, BASEPRI
    4c6a:	f383 8811 	msr	BASEPRI, r3
    4c6e:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    4c72:	4629      	mov	r1, r5
    4c74:	f850 0c10 	ldr.w	r0, [r0, #-16]
    4c78:	f7fd fe6a 	bl	2950 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    4c7c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    4c80:	f023 0302 	bic.w	r3, r3, #2
    4c84:	f804 3c0b 	strb.w	r3, [r4, #-11]
		thread->base.pended_on = NULL;
    4c88:	2300      	movs	r3, #0
    4c8a:	f844 3c10 	str.w	r3, [r4, #-16]
	__asm__ volatile(
    4c8e:	f386 8811 	msr	BASEPRI, r6
    4c92:	f3bf 8f6f 	isb	sy
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    4c96:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	z_ready_thread(thread);
    4c9a:	4628      	mov	r0, r5
    4c9c:	f023 0314 	bic.w	r3, r3, #20
    4ca0:	f804 3c0b 	strb.w	r3, [r4, #-11]
}
    4ca4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
    4ca8:	f7ff bfc4 	b.w	4c34 <z_ready_thread>

00004cac <z_remove_thread_from_ready_q>:
{
    4cac:	b510      	push	{r4, lr}
	__asm__ volatile(
    4cae:	f04f 0320 	mov.w	r3, #32
    4cb2:	f3ef 8411 	mrs	r4, BASEPRI
    4cb6:	f383 8811 	msr	BASEPRI, r3
    4cba:	f3bf 8f6f 	isb	sy
		unready_thread(thread);
    4cbe:	f7fd fff5 	bl	2cac <unready_thread>
	__asm__ volatile(
    4cc2:	f384 8811 	msr	BASEPRI, r4
    4cc6:	f3bf 8f6f 	isb	sy
}
    4cca:	bd10      	pop	{r4, pc}

00004ccc <add_to_waitq_locked>:
{
    4ccc:	b538      	push	{r3, r4, r5, lr}
    4cce:	4604      	mov	r4, r0
    4cd0:	460d      	mov	r5, r1
	unready_thread(thread);
    4cd2:	f7fd ffeb 	bl	2cac <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    4cd6:	7b63      	ldrb	r3, [r4, #13]
    4cd8:	f043 0302 	orr.w	r3, r3, #2
    4cdc:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    4cde:	b17d      	cbz	r5, 4d00 <add_to_waitq_locked+0x34>
    4ce0:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    4ce2:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4ce4:	429d      	cmp	r5, r3
    4ce6:	d012      	beq.n	4d0e <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4ce8:	b18b      	cbz	r3, 4d0e <add_to_waitq_locked+0x42>
	if (thread_1->base.prio < thread_2->base.prio) {
    4cea:	f994 200e 	ldrsb.w	r2, [r4, #14]
    4cee:	f993 100e 	ldrsb.w	r1, [r3, #14]
    4cf2:	4291      	cmp	r1, r2
    4cf4:	dd05      	ble.n	4d02 <add_to_waitq_locked+0x36>
	node->prev = successor->prev;
    4cf6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4cf8:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    4cfc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4cfe:	605c      	str	r4, [r3, #4]
}
    4d00:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    4d02:	6869      	ldr	r1, [r5, #4]
    4d04:	428b      	cmp	r3, r1
    4d06:	d002      	beq.n	4d0e <add_to_waitq_locked+0x42>
    4d08:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4d0a:	2b00      	cmp	r3, #0
    4d0c:	d1ef      	bne.n	4cee <add_to_waitq_locked+0x22>
	node->prev = list->tail;
    4d0e:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    4d10:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
    4d12:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    4d14:	686b      	ldr	r3, [r5, #4]
    4d16:	601c      	str	r4, [r3, #0]
	list->tail = node;
    4d18:	606c      	str	r4, [r5, #4]
}
    4d1a:	e7f1      	b.n	4d00 <add_to_waitq_locked+0x34>

00004d1c <z_unpend_first_thread>:
{
    4d1c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    4d1e:	f04f 0320 	mov.w	r3, #32
    4d22:	f3ef 8211 	mrs	r2, BASEPRI
    4d26:	f383 8811 	msr	BASEPRI, r3
    4d2a:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    4d2e:	f7ff ff7b 	bl	4c28 <z_priq_dumb_best>
    4d32:	4604      	mov	r4, r0
	__asm__ volatile(
    4d34:	f382 8811 	msr	BASEPRI, r2
    4d38:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    4d3c:	b1c8      	cbz	r0, 4d72 <z_unpend_first_thread+0x56>
	__asm__ volatile(
    4d3e:	f04f 0320 	mov.w	r3, #32
    4d42:	f3ef 8511 	mrs	r5, BASEPRI
    4d46:	f383 8811 	msr	BASEPRI, r3
    4d4a:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    4d4e:	4601      	mov	r1, r0
    4d50:	6880      	ldr	r0, [r0, #8]
    4d52:	f7fd fdfd 	bl	2950 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    4d56:	7b63      	ldrb	r3, [r4, #13]
    4d58:	f023 0302 	bic.w	r3, r3, #2
    4d5c:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
    4d5e:	2300      	movs	r3, #0
    4d60:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    4d62:	f385 8811 	msr	BASEPRI, r5
    4d66:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
    4d6a:	f104 0018 	add.w	r0, r4, #24
    4d6e:	f000 f80a 	bl	4d86 <z_abort_timeout>
}
    4d72:	4620      	mov	r0, r4
    4d74:	bd38      	pop	{r3, r4, r5, pc}

00004d76 <k_is_in_isr>:
    4d76:	f3ef 8005 	mrs	r0, IPSR
}
    4d7a:	3000      	adds	r0, #0
    4d7c:	bf18      	it	ne
    4d7e:	2001      	movne	r0, #1
    4d80:	4770      	bx	lr

00004d82 <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
    4d82:	f7fb bc83 	b.w	68c <arch_busy_wait>

00004d86 <z_abort_timeout>:
{
    4d86:	b510      	push	{r4, lr}
	__asm__ volatile(
    4d88:	f04f 0220 	mov.w	r2, #32
    4d8c:	f3ef 8411 	mrs	r4, BASEPRI
    4d90:	f382 8811 	msr	BASEPRI, r2
    4d94:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    4d98:	6803      	ldr	r3, [r0, #0]
    4d9a:	b13b      	cbz	r3, 4dac <z_abort_timeout+0x26>
			remove_timeout(to);
    4d9c:	f7fe f9aa 	bl	30f4 <remove_timeout>
			ret = 0;
    4da0:	2000      	movs	r0, #0
	__asm__ volatile(
    4da2:	f384 8811 	msr	BASEPRI, r4
    4da6:	f3bf 8f6f 	isb	sy
}
    4daa:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    4dac:	f06f 0015 	mvn.w	r0, #21
    4db0:	e7f7      	b.n	4da2 <z_abort_timeout+0x1c>

00004db2 <z_get_next_timeout_expiry>:
{
    4db2:	b510      	push	{r4, lr}
	__asm__ volatile(
    4db4:	f04f 0320 	mov.w	r3, #32
    4db8:	f3ef 8411 	mrs	r4, BASEPRI
    4dbc:	f383 8811 	msr	BASEPRI, r3
    4dc0:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    4dc4:	f7fe f9aa 	bl	311c <next_timeout>
	__asm__ volatile(
    4dc8:	f384 8811 	msr	BASEPRI, r4
    4dcc:	f3bf 8f6f 	isb	sy
}
    4dd0:	bd10      	pop	{r4, pc}

00004dd2 <z_set_timeout_expiry>:
{
    4dd2:	b570      	push	{r4, r5, r6, lr}
    4dd4:	4604      	mov	r4, r0
    4dd6:	460e      	mov	r6, r1
	__asm__ volatile(
    4dd8:	f04f 0320 	mov.w	r3, #32
    4ddc:	f3ef 8511 	mrs	r5, BASEPRI
    4de0:	f383 8811 	msr	BASEPRI, r3
    4de4:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
    4de8:	f7fe f998 	bl	311c <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    4dec:	2801      	cmp	r0, #1
    4dee:	dd05      	ble.n	4dfc <z_set_timeout_expiry+0x2a>
    4df0:	42a0      	cmp	r0, r4
    4df2:	dd03      	ble.n	4dfc <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
    4df4:	4631      	mov	r1, r6
    4df6:	4620      	mov	r0, r4
    4df8:	f7fb fd40 	bl	87c <z_clock_set_timeout>
	__asm__ volatile(
    4dfc:	f385 8811 	msr	BASEPRI, r5
    4e00:	f3bf 8f6f 	isb	sy
}
    4e04:	bd70      	pop	{r4, r5, r6, pc}

00004e06 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
    4e06:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
    4e08:	f7fe fa74 	bl	32f4 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
    4e0c:	bd08      	pop	{r3, pc}

00004e0e <k_heap_init>:
{
    4e0e:	b410      	push	{r4}
    4e10:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    4e14:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    4e18:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
    4e1c:	f7ff bb84 	b.w	4528 <sys_heap_init>

00004e20 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
    4e20:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

00005940 <spm_request_read-0x26a0>:
	...

00007fe0 <spm_request_read>:
    7fe0:	e97f e97f 	sg
    7fe4:	f7f8 bea0 	b.w	d28 <__acle_se_spm_request_read>

00007fe8 <spm_firmware_info>:
    7fe8:	e97f e97f 	sg
    7fec:	f7f8 bef4 	b.w	dd8 <__acle_se_spm_firmware_info>

00007ff0 <spm_request_random_number>:
    7ff0:	e97f e97f 	sg
    7ff4:	f7fc bbd3 	b.w	479e <__acle_se_spm_request_random_number>
	...
