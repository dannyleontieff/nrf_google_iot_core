
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	20000be8 	.word	0x20000be8
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   4:	00001171 	.word	0x00001171
   8:	00004071 	.word	0x00004071
   c:	000011a1 	.word	0x000011a1
  10:	000011a1 	.word	0x000011a1
		if (fdtable[fd].obj == NULL) {
  14:	000011a1 	.word	0x000011a1
  18:	000011a1 	.word	0x000011a1
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
  1c:	000011a1 	.word	0x000011a1
	...
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
  2c:	00000fb5 	.word	0x00000fb5
  30:	000011a1 	.word	0x000011a1
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  34:	00000000 	.word	0x00000000
		fdtable[fd].obj = FD_OBJ_RESERVED;
  38:	00000f6d 	.word	0x00000f6d
  3c:	00003f65 	.word	0x00003f65

00000040 <_irq_vector_table>:
  40:	00001131 00001131 00001131 00001131     1...1...1...1...
  50:	00001131 00001131 00001131 00001131     1...1...1...1...
  60:	00001131 00001131 00001131 00001131     1...1...1...1...
  70:	00001131 00001131 00001131 00001131     1...1...1...1...
  80:	00001131 00001131 00001131 00001131     1...1...1...1...
  90:	00001131 00001131 00001131 00001131     1...1...1...1...
  a0:	00001131 00001131 00001131 00001131     1...1...1...1...
  b0:	00001131 00001131 00001131 00001131     1...1...1...1...
  c0:	00001131 00001131 00001131 00001131     1...1...1...1...
  d0:	00001131 00001131 00001131 00001131     1...1...1...1...
  e0:	00001131 00001131 00001131 00001131     1...1...1...1...
  f0:	00001131 00001131 00001131 00001131     1...1...1...1...
 100:	00001131 00001131 00001131 00001131     1...1...1...1...
 110:	00001131 00001131 00001131 00001131     1...1...1...1...
 120:	00001131 00001131 00001131 00001131     1...1...1...1...
 130:	00001131 00001131 00001131 00001131     1...1...1...1...
 140:	00001131                                1...

00000144 <_vector_end>:
	...

00000200 <m_firmware_info>:
 200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
 210:	00008000 00000001 00000000 00000000     ................
 220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0000023c <__aeabi_uldivmod>:
     23c:	b953      	cbnz	r3, 254 <__aeabi_uldivmod+0x18>
     23e:	b94a      	cbnz	r2, 254 <__aeabi_uldivmod+0x18>
     240:	2900      	cmp	r1, #0
     242:	bf08      	it	eq
     244:	2800      	cmpeq	r0, #0
     246:	bf1c      	itt	ne
     248:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     24c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     250:	f000 b970 	b.w	534 <__aeabi_idiv0>
     254:	f1ad 0c08 	sub.w	ip, sp, #8
     258:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     25c:	f000 f806 	bl	26c <__udivmoddi4>
     260:	f8dd e004 	ldr.w	lr, [sp, #4]
     264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     268:	b004      	add	sp, #16
     26a:	4770      	bx	lr

0000026c <__udivmoddi4>:
     26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     270:	9e09      	ldr	r6, [sp, #36]	; 0x24
     272:	4604      	mov	r4, r0
     274:	4689      	mov	r9, r1
     276:	2b00      	cmp	r3, #0
     278:	f040 8083 	bne.w	382 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x102>
     27c:	428a      	cmp	r2, r1
     27e:	4615      	mov	r5, r2
     280:	d945      	bls.n	30e <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8e>
     282:	fab2 f282 	clz	r2, r2
     286:	b14a      	cbz	r2, 29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     288:	f1c2 0720 	rsb	r7, r2, #32
     28c:	fa01 f302 	lsl.w	r3, r1, r2
     290:	4095      	lsls	r5, r2
     292:	4094      	lsls	r4, r2
     294:	fa20 f707 	lsr.w	r7, r0, r7
     298:	ea47 0903 	orr.w	r9, r7, r3
     29c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     2a0:	0c23      	lsrs	r3, r4, #16
     2a2:	fa1f f885 	uxth.w	r8, r5
     2a6:	fbb9 fcfe 	udiv	ip, r9, lr
     2aa:	fb0e 991c 	mls	r9, lr, ip, r9
     2ae:	fb0c f108 	mul.w	r1, ip, r8
     2b2:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
     2b6:	4299      	cmp	r1, r3
     2b8:	d90a      	bls.n	2d0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x50>
     2ba:	18eb      	adds	r3, r5, r3
     2bc:	bf2c      	ite	cs
     2be:	2001      	movcs	r0, #1
     2c0:	2000      	movcc	r0, #0
     2c2:	4299      	cmp	r1, r3
     2c4:	d902      	bls.n	2cc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4c>
     2c6:	2800      	cmp	r0, #0
     2c8:	f000 811d 	beq.w	506 <CONFIG_FLASH_SIZE+0x106>
     2cc:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
     2d0:	1a59      	subs	r1, r3, r1
     2d2:	b2a3      	uxth	r3, r4
     2d4:	fbb1 f0fe 	udiv	r0, r1, lr
     2d8:	fb0e 1110 	mls	r1, lr, r0, r1
     2dc:	fb00 f808 	mul.w	r8, r0, r8
     2e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     2e4:	45a0      	cmp	r8, r4
     2e6:	d905      	bls.n	2f4 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x74>
     2e8:	192c      	adds	r4, r5, r4
     2ea:	d202      	bcs.n	2f2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x72>
     2ec:	45a0      	cmp	r8, r4
     2ee:	f200 810e 	bhi.w	50e <CONFIG_FLASH_SIZE+0x10e>
     2f2:	3801      	subs	r0, #1
     2f4:	eba4 0408 	sub.w	r4, r4, r8
     2f8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     2fc:	2700      	movs	r7, #0
     2fe:	b11e      	cbz	r6, 308 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x88>
     300:	40d4      	lsrs	r4, r2
     302:	2300      	movs	r3, #0
     304:	e9c6 4300 	strd	r4, r3, [r6]
     308:	4639      	mov	r1, r7
     30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     30e:	2a00      	cmp	r2, #0
     310:	d051      	beq.n	3b6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x136>
     312:	fab2 f282 	clz	r2, r2
     316:	2a00      	cmp	r2, #0
     318:	f040 80af 	bne.w	47a <CONFIG_FLASH_SIZE+0x7a>
     31c:	1b49      	subs	r1, r1, r5
     31e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     322:	fa1f f885 	uxth.w	r8, r5
     326:	2701      	movs	r7, #1
     328:	0c23      	lsrs	r3, r4, #16
     32a:	fbb1 fcfe 	udiv	ip, r1, lr
     32e:	fb0e 111c 	mls	r1, lr, ip, r1
     332:	fb08 f00c 	mul.w	r0, r8, ip
     336:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     33a:	4298      	cmp	r0, r3
     33c:	d90a      	bls.n	354 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd4>
     33e:	18eb      	adds	r3, r5, r3
     340:	bf2c      	ite	cs
     342:	2101      	movcs	r1, #1
     344:	2100      	movcc	r1, #0
     346:	4298      	cmp	r0, r3
     348:	d902      	bls.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     34a:	2900      	cmp	r1, #0
     34c:	f000 80d7 	beq.w	4fe <CONFIG_FLASH_SIZE+0xfe>
     350:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
     354:	1a19      	subs	r1, r3, r0
     356:	b2a3      	uxth	r3, r4
     358:	fbb1 f0fe 	udiv	r0, r1, lr
     35c:	fb0e 1110 	mls	r1, lr, r0, r1
     360:	fb08 f800 	mul.w	r8, r8, r0
     364:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     368:	45a0      	cmp	r8, r4
     36a:	d905      	bls.n	378 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xf8>
     36c:	192c      	adds	r4, r5, r4
     36e:	d202      	bcs.n	376 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xf6>
     370:	45a0      	cmp	r8, r4
     372:	f200 80c1 	bhi.w	4f8 <CONFIG_FLASH_SIZE+0xf8>
     376:	3801      	subs	r0, #1
     378:	eba4 0408 	sub.w	r4, r4, r8
     37c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     380:	e7bd      	b.n	2fe <CONFIG_PM_PARTITION_SIZE_PROVISION+0x7e>
     382:	428b      	cmp	r3, r1
     384:	d908      	bls.n	398 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x118>
     386:	2e00      	cmp	r6, #0
     388:	d074      	beq.n	474 <CONFIG_FLASH_SIZE+0x74>
     38a:	2700      	movs	r7, #0
     38c:	e9c6 0100 	strd	r0, r1, [r6]
     390:	4638      	mov	r0, r7
     392:	4639      	mov	r1, r7
     394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     398:	fab3 f783 	clz	r7, r3
     39c:	b967      	cbnz	r7, 3b8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x138>
     39e:	428b      	cmp	r3, r1
     3a0:	f0c0 80a4 	bcc.w	4ec <CONFIG_FLASH_SIZE+0xec>
     3a4:	4282      	cmp	r2, r0
     3a6:	f240 80a1 	bls.w	4ec <CONFIG_FLASH_SIZE+0xec>
     3aa:	4638      	mov	r0, r7
     3ac:	2e00      	cmp	r6, #0
     3ae:	d0ab      	beq.n	308 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x88>
     3b0:	e9c6 4900 	strd	r4, r9, [r6]
     3b4:	e7a8      	b.n	308 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x88>
     3b6:	deff      	udf	#255	; 0xff
     3b8:	f1c7 0520 	rsb	r5, r7, #32
     3bc:	40bb      	lsls	r3, r7
     3be:	fa02 fc07 	lsl.w	ip, r2, r7
     3c2:	fa01 f407 	lsl.w	r4, r1, r7
     3c6:	40ea      	lsrs	r2, r5
     3c8:	fa20 f805 	lsr.w	r8, r0, r5
     3cc:	40e9      	lsrs	r1, r5
     3ce:	fa00 fe07 	lsl.w	lr, r0, r7
     3d2:	431a      	orrs	r2, r3
     3d4:	ea48 0404 	orr.w	r4, r8, r4
     3d8:	ea4f 4812 	mov.w	r8, r2, lsr #16
     3dc:	0c20      	lsrs	r0, r4, #16
     3de:	fa1f f982 	uxth.w	r9, r2
     3e2:	fbb1 faf8 	udiv	sl, r1, r8
     3e6:	fb08 111a 	mls	r1, r8, sl, r1
     3ea:	fb0a fb09 	mul.w	fp, sl, r9
     3ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     3f2:	458b      	cmp	fp, r1
     3f4:	d90a      	bls.n	40c <CONFIG_FLASH_SIZE+0xc>
     3f6:	1851      	adds	r1, r2, r1
     3f8:	bf2c      	ite	cs
     3fa:	2301      	movcs	r3, #1
     3fc:	2300      	movcc	r3, #0
     3fe:	458b      	cmp	fp, r1
     400:	d902      	bls.n	408 <CONFIG_FLASH_SIZE+0x8>
     402:	2b00      	cmp	r3, #0
     404:	f000 8088 	beq.w	518 <CONFIG_FLASH_SIZE+0x118>
     408:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
     40c:	eba1 010b 	sub.w	r1, r1, fp
     410:	b2a4      	uxth	r4, r4
     412:	fbb1 f0f8 	udiv	r0, r1, r8
     416:	fb08 1110 	mls	r1, r8, r0, r1
     41a:	fb00 f909 	mul.w	r9, r0, r9
     41e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
     422:	4589      	cmp	r9, r1
     424:	d904      	bls.n	430 <CONFIG_FLASH_SIZE+0x30>
     426:	1851      	adds	r1, r2, r1
     428:	d201      	bcs.n	42e <CONFIG_FLASH_SIZE+0x2e>
     42a:	4589      	cmp	r9, r1
     42c:	d87b      	bhi.n	526 <CONFIG_FLASH_SIZE+0x126>
     42e:	3801      	subs	r0, #1
     430:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
     434:	eba1 0109 	sub.w	r1, r1, r9
     438:	fba0 890c 	umull	r8, r9, r0, ip
     43c:	4549      	cmp	r1, r9
     43e:	4644      	mov	r4, r8
     440:	464b      	mov	r3, r9
     442:	d302      	bcc.n	44a <CONFIG_FLASH_SIZE+0x4a>
     444:	d106      	bne.n	454 <CONFIG_FLASH_SIZE+0x54>
     446:	45c6      	cmp	lr, r8
     448:	d204      	bcs.n	454 <CONFIG_FLASH_SIZE+0x54>
     44a:	3801      	subs	r0, #1
     44c:	ebb8 040c 	subs.w	r4, r8, ip
     450:	eb69 0302 	sbc.w	r3, r9, r2
     454:	2e00      	cmp	r6, #0
     456:	d05d      	beq.n	514 <CONFIG_FLASH_SIZE+0x114>
     458:	ebbe 0204 	subs.w	r2, lr, r4
     45c:	eb61 0103 	sbc.w	r1, r1, r3
     460:	fa01 f505 	lsl.w	r5, r1, r5
     464:	fa22 f307 	lsr.w	r3, r2, r7
     468:	40f9      	lsrs	r1, r7
     46a:	2700      	movs	r7, #0
     46c:	431d      	orrs	r5, r3
     46e:	e9c6 5100 	strd	r5, r1, [r6]
     472:	e749      	b.n	308 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x88>
     474:	4637      	mov	r7, r6
     476:	4630      	mov	r0, r6
     478:	e746      	b.n	308 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x88>
     47a:	f1c2 0020 	rsb	r0, r2, #32
     47e:	4095      	lsls	r5, r2
     480:	fa01 f702 	lsl.w	r7, r1, r2
     484:	fa21 f300 	lsr.w	r3, r1, r0
     488:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     48c:	fa24 f100 	lsr.w	r1, r4, r0
     490:	fa1f f885 	uxth.w	r8, r5
     494:	4094      	lsls	r4, r2
     496:	4339      	orrs	r1, r7
     498:	fbb3 f0fe 	udiv	r0, r3, lr
     49c:	0c0f      	lsrs	r7, r1, #16
     49e:	fb0e 3310 	mls	r3, lr, r0, r3
     4a2:	fb00 fc08 	mul.w	ip, r0, r8
     4a6:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
     4aa:	459c      	cmp	ip, r3
     4ac:	d907      	bls.n	4be <CONFIG_FLASH_SIZE+0xbe>
     4ae:	18eb      	adds	r3, r5, r3
     4b0:	bf2c      	ite	cs
     4b2:	2701      	movcs	r7, #1
     4b4:	2700      	movcc	r7, #0
     4b6:	459c      	cmp	ip, r3
     4b8:	d900      	bls.n	4bc <CONFIG_FLASH_SIZE+0xbc>
     4ba:	b38f      	cbz	r7, 520 <CONFIG_FLASH_SIZE+0x120>
     4bc:	3801      	subs	r0, #1
     4be:	eba3 030c 	sub.w	r3, r3, ip
     4c2:	b289      	uxth	r1, r1
     4c4:	fbb3 f7fe 	udiv	r7, r3, lr
     4c8:	fb0e 3317 	mls	r3, lr, r7, r3
     4cc:	fb07 fc08 	mul.w	ip, r7, r8
     4d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     4d4:	458c      	cmp	ip, r1
     4d6:	d904      	bls.n	4e2 <CONFIG_FLASH_SIZE+0xe2>
     4d8:	1869      	adds	r1, r5, r1
     4da:	d201      	bcs.n	4e0 <CONFIG_FLASH_SIZE+0xe0>
     4dc:	458c      	cmp	ip, r1
     4de:	d825      	bhi.n	52c <CONFIG_FLASH_SIZE+0x12c>
     4e0:	3f01      	subs	r7, #1
     4e2:	eba1 010c 	sub.w	r1, r1, ip
     4e6:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
     4ea:	e71d      	b.n	328 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa8>
     4ec:	1a84      	subs	r4, r0, r2
     4ee:	eb61 0303 	sbc.w	r3, r1, r3
     4f2:	2001      	movs	r0, #1
     4f4:	4699      	mov	r9, r3
     4f6:	e759      	b.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     4f8:	3802      	subs	r0, #2
     4fa:	442c      	add	r4, r5
     4fc:	e73c      	b.n	378 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xf8>
     4fe:	f1ac 0c02 	sub.w	ip, ip, #2
     502:	442b      	add	r3, r5
     504:	e726      	b.n	354 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd4>
     506:	f1ac 0c02 	sub.w	ip, ip, #2
     50a:	442b      	add	r3, r5
     50c:	e6e0      	b.n	2d0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x50>
     50e:	3802      	subs	r0, #2
     510:	442c      	add	r4, r5
     512:	e6ef      	b.n	2f4 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x74>
     514:	4637      	mov	r7, r6
     516:	e6f7      	b.n	308 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x88>
     518:	f1aa 0a02 	sub.w	sl, sl, #2
     51c:	4411      	add	r1, r2
     51e:	e775      	b.n	40c <CONFIG_FLASH_SIZE+0xc>
     520:	3802      	subs	r0, #2
     522:	442b      	add	r3, r5
     524:	e7cb      	b.n	4be <CONFIG_FLASH_SIZE+0xbe>
     526:	3802      	subs	r0, #2
     528:	4411      	add	r1, r2
     52a:	e781      	b.n	430 <CONFIG_FLASH_SIZE+0x30>
     52c:	3f02      	subs	r7, #2
     52e:	4429      	add	r1, r5
     530:	e7d7      	b.n	4e2 <CONFIG_FLASH_SIZE+0xe2>
     532:	bf00      	nop

00000534 <__aeabi_idiv0>:
     534:	4770      	bx	lr
     536:	bf00      	nop

00000538 <__gnu_cmse_nonsecure_call>:
     538:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
     53c:	4627      	mov	r7, r4
     53e:	46a0      	mov	r8, r4
     540:	46a1      	mov	r9, r4
     542:	46a2      	mov	sl, r4
     544:	46a3      	mov	fp, r4
     546:	46a4      	mov	ip, r4
     548:	ed2d 8b10 	vpush	{d8-d15}
     54c:	f04f 0500 	mov.w	r5, #0
     550:	ec45 5b18 	vmov	d8, r5, r5
     554:	ec45 5a19 	vmov	s18, s19, r5, r5
     558:	ec45 5a1a 	vmov	s20, s21, r5, r5
     55c:	ec45 5a1b 	vmov	s22, s23, r5, r5
     560:	ec45 5a1c 	vmov	s24, s25, r5, r5
     564:	ec45 5a1d 	vmov	s26, s27, r5, r5
     568:	ec45 5a1e 	vmov	s28, s29, r5, r5
     56c:	ec45 5a1f 	vmov	s30, s31, r5, r5
     570:	eef1 5a10 	vmrs	r5, fpscr
     574:	f64f 7660 	movw	r6, #65376	; 0xff60
     578:	f6c0 76ff 	movt	r6, #4095	; 0xfff
     57c:	4035      	ands	r5, r6
     57e:	eee1 5a10 	vmsr	fpscr, r5
     582:	f384 8800 	msr	CPSR_f, r4
     586:	4625      	mov	r5, r4
     588:	4626      	mov	r6, r4
     58a:	47a4      	blxns	r4
     58c:	ecbd 8b10 	vpop	{d8-d15}
     590:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

00000594 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     594:	680b      	ldr	r3, [r1, #0]
     596:	3301      	adds	r3, #1
     598:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     59a:	4b01      	ldr	r3, [pc, #4]	; (5a0 <char_out+0xc>)
     59c:	681b      	ldr	r3, [r3, #0]
     59e:	4718      	bx	r3
     5a0:	20000000 	.word	0x20000000

000005a4 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     5a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     5a8:	b085      	sub	sp, #20
     5aa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     5ac:	469b      	mov	fp, r3
     5ae:	2c01      	cmp	r4, #1
     5b0:	bfb8      	it	lt
     5b2:	2401      	movlt	r4, #1
     5b4:	2b01      	cmp	r3, #1
     5b6:	bf0c      	ite	eq
     5b8:	2330      	moveq	r3, #48	; 0x30
     5ba:	2320      	movne	r3, #32
     5bc:	4616      	mov	r6, r2
     5be:	4682      	mov	sl, r0
     5c0:	4688      	mov	r8, r1
     5c2:	2501      	movs	r5, #1
     5c4:	270a      	movs	r7, #10
     5c6:	2200      	movs	r2, #0
     5c8:	f8df 906c 	ldr.w	r9, [pc, #108]	; 638 <_printk_dec_ulong+0x94>
     5cc:	9302      	str	r3, [sp, #8]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
     5ce:	fbb6 f3f9 	udiv	r3, r6, r9
     5d2:	9301      	str	r3, [sp, #4]
     5d4:	b90a      	cbnz	r2, 5da <_printk_dec_ulong+0x36>
     5d6:	45b1      	cmp	r9, r6
     5d8:	d81c      	bhi.n	614 <_printk_dec_ulong+0x70>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
     5da:	9b01      	ldr	r3, [sp, #4]
     5dc:	4641      	mov	r1, r8
     5de:	f103 0030 	add.w	r0, r3, #48	; 0x30
     5e2:	47d0      	blx	sl
			found_largest_digit = 1;
     5e4:	2201      	movs	r2, #1
			digits++;
     5e6:	3501      	adds	r5, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
     5e8:	9b01      	ldr	r3, [sp, #4]
		remaining--;
     5ea:	3f01      	subs	r7, #1
		remainder %= pos;
     5ec:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
     5f0:	230a      	movs	r3, #10
	while (pos >= 10) {
     5f2:	2f01      	cmp	r7, #1
		pos /= 10;
     5f4:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
     5f8:	d1e9      	bne.n	5ce <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
     5fa:	4641      	mov	r1, r8
     5fc:	f106 0030 	add.w	r0, r6, #48	; 0x30
     600:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
     602:	f1bb 0f03 	cmp.w	fp, #3
     606:	d102      	bne.n	60e <_printk_dec_ulong+0x6a>
		remaining = min_width - digits;
     608:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
     60a:	2c00      	cmp	r4, #0
     60c:	dc0e      	bgt.n	62c <_printk_dec_ulong+0x88>
			out(' ', ctx);
		}
	}
}
     60e:	b005      	add	sp, #20
     610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     614:	42bc      	cmp	r4, r7
     616:	dbe7      	blt.n	5e8 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
     618:	f1bb 0f02 	cmp.w	fp, #2
     61c:	d8e4      	bhi.n	5e8 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     61e:	4641      	mov	r1, r8
     620:	9802      	ldr	r0, [sp, #8]
     622:	9203      	str	r2, [sp, #12]
			digits++;
     624:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     626:	47d0      	blx	sl
			digits++;
     628:	9a03      	ldr	r2, [sp, #12]
     62a:	e7dd      	b.n	5e8 <_printk_dec_ulong+0x44>
			out(' ', ctx);
     62c:	4641      	mov	r1, r8
     62e:	2020      	movs	r0, #32
     630:	47d0      	blx	sl
     632:	3c01      	subs	r4, #1
     634:	e7e9      	b.n	60a <_printk_dec_ulong+0x66>
     636:	bf00      	nop
     638:	3b9aca00 	.word	0x3b9aca00

0000063c <__printk_hook_install>:
	_char_out = fn;
     63c:	4b01      	ldr	r3, [pc, #4]	; (644 <__printk_hook_install+0x8>)
     63e:	6018      	str	r0, [r3, #0]
}
     640:	4770      	bx	lr
     642:	bf00      	nop
     644:	20000000 	.word	0x20000000

00000648 <vprintk>:
	struct out_context ctx = { 0 };
     648:	2300      	movs	r3, #0
{
     64a:	b507      	push	{r0, r1, r2, lr}
	z_vprintk(char_out, &ctx, fmt, ap);
     64c:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
     64e:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
     650:	4803      	ldr	r0, [pc, #12]	; (660 <vprintk+0x18>)
     652:	460b      	mov	r3, r1
     654:	a901      	add	r1, sp, #4
     656:	f003 f998 	bl	398a <z_vprintk>
}
     65a:	b003      	add	sp, #12
     65c:	f85d fb04 	ldr.w	pc, [sp], #4
     660:	00000595 	.word	0x00000595

00000664 <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     664:	f04f 0220 	mov.w	r2, #32
     668:	f3ef 8311 	mrs	r3, BASEPRI
     66c:	f382 8811 	msr	BASEPRI, r2
     670:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     674:	2101      	movs	r1, #1
     676:	4a04      	ldr	r2, [pc, #16]	; (688 <nordicsemi_nrf91_init+0x24>)
     678:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     67c:	f383 8811 	msr	BASEPRI, r3
     680:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     684:	2000      	movs	r0, #0
     686:	4770      	bx	lr
     688:	50039000 	.word	0x50039000

0000068c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
     68c:	b120      	cbz	r0, 698 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
     68e:	4b03      	ldr	r3, [pc, #12]	; (69c <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
     690:	0180      	lsls	r0, r0, #6
     692:	f043 0301 	orr.w	r3, r3, #1
     696:	4718      	bx	r3

void arch_busy_wait(u32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
     698:	4770      	bx	lr
     69a:	bf00      	nop
     69c:	00004830 	.word	0x00004830

000006a0 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
     6a0:	b508      	push	{r3, lr}
     6a2:	4604      	mov	r4, r0
	__asm__ volatile(
     6a4:	f04f 0220 	mov.w	r2, #32
     6a8:	f3ef 8311 	mrs	r3, BASEPRI
     6ac:	f382 8811 	msr	BASEPRI, r2
     6b0:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
     6b4:	f003 fc58 	bl	3f68 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
     6b8:	4620      	mov	r0, r4
     6ba:	f000 fe87 	bl	13cc <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
     6be:	4803      	ldr	r0, [pc, #12]	; (6cc <sys_reboot+0x2c>)
     6c0:	f003 fad3 	bl	3c6a <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
     6c4:	f000 fcec 	bl	10a0 <arch_cpu_idle>
     6c8:	e7fc      	b.n	6c4 <sys_reboot+0x24>
     6ca:	bf00      	nop
     6cc:	00004ab8 	.word	0x00004ab8

000006d0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
     6d0:	b510      	push	{r4, lr}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     6d2:	4807      	ldr	r0, [pc, #28]	; (6f0 <uart_console_init+0x20>)
     6d4:	f001 fb06 	bl	1ce4 <z_impl_device_get_binding>
	__stdout_hook_install(console_out);
     6d8:	4c06      	ldr	r4, [pc, #24]	; (6f4 <uart_console_init+0x24>)

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
     6da:	4b07      	ldr	r3, [pc, #28]	; (6f8 <uart_console_init+0x28>)
     6dc:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
     6de:	4620      	mov	r0, r4
     6e0:	f001 f8a0 	bl	1824 <__stdout_hook_install>
	__printk_hook_install(console_out);
     6e4:	4620      	mov	r0, r4
     6e6:	f7ff ffa9 	bl	63c <__printk_hook_install>
#endif

	uart_console_hook_install();

	return 0;
}
     6ea:	2000      	movs	r0, #0
     6ec:	bd10      	pop	{r4, pc}
     6ee:	bf00      	nop
     6f0:	00004ae1 	.word	0x00004ae1
     6f4:	000006fd 	.word	0x000006fd
     6f8:	20000150 	.word	0x20000150

000006fc <console_out>:
	if ('\n' == c) {
     6fc:	280a      	cmp	r0, #10
{
     6fe:	b538      	push	{r3, r4, r5, lr}
     700:	4604      	mov	r4, r0
     702:	4d07      	ldr	r5, [pc, #28]	; (720 <console_out+0x24>)
	if ('\n' == c) {
     704:	d104      	bne.n	710 <console_out+0x14>
     706:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
     708:	6883      	ldr	r3, [r0, #8]
     70a:	210d      	movs	r1, #13
     70c:	685b      	ldr	r3, [r3, #4]
     70e:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
     710:	6828      	ldr	r0, [r5, #0]
     712:	6883      	ldr	r3, [r0, #8]
     714:	b2e1      	uxtb	r1, r4
     716:	685b      	ldr	r3, [r3, #4]
     718:	4798      	blx	r3
}
     71a:	4620      	mov	r0, r4
     71c:	bd38      	pop	{r3, r4, r5, pc}
     71e:	bf00      	nop
     720:	20000150 	.word	0x20000150

00000724 <clkstarted_handle.constprop.9>:
DEVICE_AND_API_INIT(clock_nrf, DT_INST_LABEL(0),
		    clk_init, &data, &config, PRE_KERNEL_1,
		    CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &clock_control_api);

static void clkstarted_handle(struct device *dev,
     724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
	struct clock_control_async_data *async_data;

	DBG(dev, type, "Clock started");
	sub_data->started = true;
     726:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
     728:	4d11      	ldr	r5, [pc, #68]	; (770 <clkstarted_handle.constprop.9+0x4c>)
static void clkstarted_handle(struct device *dev,
     72a:	4606      	mov	r6, r0
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
     72c:	68eb      	ldr	r3, [r5, #12]
	sub_data->started = true;
     72e:	fb04 3400 	mla	r4, r4, r0, r3
     732:	2301      	movs	r3, #1
     734:	7263      	strb	r3, [r4, #9]
     736:	f04f 0320 	mov.w	r3, #32
     73a:	f3ef 8111 	mrs	r1, BASEPRI
     73e:	f383 8811 	msr	BASEPRI, r3
     742:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_slist_is_empty(sys_slist_t *list);

Z_GENLIST_IS_EMPTY(slist)
     746:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
     748:	b12b      	cbz	r3, 756 <clkstarted_handle.constprop.9+0x32>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
     74a:	6860      	ldr	r0, [r4, #4]
     74c:	681a      	ldr	r2, [r3, #0]
     74e:	4283      	cmp	r3, r0
	list->head = node;
     750:	6022      	str	r2, [r4, #0]
	list->tail = node;
     752:	bf08      	it	eq
     754:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
     756:	f381 8811 	msr	BASEPRI, r1
     75a:	f3bf 8f6f 	isb	sy

	while ((async_data = list_get(&sub_data->list)) != NULL) {
     75e:	b903      	cbnz	r3, 762 <clkstarted_handle.constprop.9+0x3e>
		async_data->cb(dev, (clock_control_subsys_t)type,
				async_data->user_data);
	}
}
     760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		async_data->cb(dev, (clock_control_subsys_t)type,
     762:	e9d3 7201 	ldrd	r7, r2, [r3, #4]
     766:	4631      	mov	r1, r6
     768:	4628      	mov	r0, r5
     76a:	47b8      	blx	r7
     76c:	e7e3      	b.n	736 <clkstarted_handle.constprop.9+0x12>
     76e:	bf00      	nop
     770:	20000094 	.word	0x20000094

00000774 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
     774:	b508      	push	{r3, lr}
#endif
}

NRF_STATIC_INLINE bool nrf_clock_event_check(NRF_CLOCK_Type const * p_reg, nrf_clock_event_t event)
{
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
     776:	4b11      	ldr	r3, [pc, #68]	; (7bc <nrf_power_clock_isr+0x48>)
     778:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
     77a:	b16a      	cbz	r2, 798 <nrf_power_clock_isr+0x24>
    return p_reg->INTENSET & mask;
     77c:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
     780:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
     784:	07d1      	lsls	r1, r2, #31
     786:	d507      	bpl.n	798 <nrf_power_clock_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
     788:	2200      	movs	r2, #0
     78a:	601a      	str	r2, [r3, #0]
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
     78c:	4b0c      	ldr	r3, [pc, #48]	; (7c0 <nrf_power_clock_isr+0x4c>)

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
     78e:	68db      	ldr	r3, [r3, #12]
     790:	7a58      	ldrb	r0, [r3, #9]
     792:	b908      	cbnz	r0, 798 <nrf_power_clock_isr+0x24>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
     794:	f7ff ffc6 	bl	724 <clkstarted_handle.constprop.9>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
     798:	4b0a      	ldr	r3, [pc, #40]	; (7c4 <nrf_power_clock_isr+0x50>)
     79a:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
     79c:	b162      	cbz	r2, 7b8 <nrf_power_clock_isr+0x44>
    return p_reg->INTENSET & mask;
     79e:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
     7a2:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
     7a6:	0792      	lsls	r2, r2, #30
     7a8:	d506      	bpl.n	7b8 <nrf_power_clock_isr+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
     7aa:	2200      	movs	r2, #0
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started();
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
     7ac:	2001      	movs	r0, #1
     7ae:	601a      	str	r2, [r3, #0]
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
     7b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
     7b4:	f7ff bfb6 	b.w	724 <clkstarted_handle.constprop.9>
}
     7b8:	bd08      	pop	{r3, pc}
     7ba:	bf00      	nop
     7bc:	50005100 	.word	0x50005100
     7c0:	20000094 	.word	0x20000094
     7c4:	50005104 	.word	0x50005104

000007c8 <handle_next_tick_case>:
 * counter progresses during that time it means that 1 tick elapsed and
 * interrupt is set pending.
 */
static void handle_next_tick_case(u32_t t)
{
	set_comparator(t + 2);
     7c8:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
     7ca:	4b08      	ldr	r3, [pc, #32]	; (7ec <handle_next_tick_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     7cc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
     7d0:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
     7d4:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
     7d8:	4290      	cmp	r0, r2
     7da:	d100      	bne.n	7de <handle_next_tick_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
     7dc:	4770      	bx	lr
     7de:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
     7e2:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     7e4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
     7e8:	e7f2      	b.n	7d0 <handle_next_tick_case+0x8>
     7ea:	bf00      	nop
     7ec:	50015000 	.word	0x50015000

000007f0 <rtc1_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     7f0:	2200      	movs	r2, #0
     7f2:	4b06      	ldr	r3, [pc, #24]	; (80c <CONFIG_ISR_STACK_SIZE+0xc>)
     7f4:	601a      	str	r2, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	u32_t t = get_comparator();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
     7f6:	4a06      	ldr	r2, [pc, #24]	; (810 <CONFIG_ISR_STACK_SIZE+0x10>)
    return p_reg->CC[ch];
     7f8:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
     7fc:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
     7fe:	1ac0      	subs	r0, r0, r3
     800:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
     804:	4403      	add	r3, r0
     806:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_ticks(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
     808:	f002 b93c 	b.w	2a84 <z_clock_announce>
     80c:	50015140 	.word	0x50015140
     810:	2000016c 	.word	0x2000016c

00000814 <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
     814:	b538      	push	{r3, r4, r5, lr}
     816:	4814      	ldr	r0, [pc, #80]	; (868 <z_clock_driver_init+0x54>)
     818:	f001 fa64 	bl	1ce4 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_LABEL(DT_INST(0, nordic_nrf_clock)));
	if (!clock) {
     81c:	b300      	cbz	r0, 860 <z_clock_driver_init+0x4c>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
     81e:	6883      	ldr	r3, [r0, #8]
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
     820:	2400      	movs	r4, #0
     822:	681b      	ldr	r3, [r3, #0]
     824:	2101      	movs	r1, #1
     826:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     828:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     82c:	4d0f      	ldr	r5, [pc, #60]	; (86c <z_clock_driver_init+0x58>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     82e:	4b10      	ldr	r3, [pc, #64]	; (870 <z_clock_driver_init+0x5c>)
    p_reg->PRESCALER = val;
     830:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     834:	601c      	str	r4, [r3, #0]
     836:	4b0f      	ldr	r3, [pc, #60]	; (874 <z_clock_driver_init+0x60>)
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC1_IRQn);
	int_enable();

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
     838:	2101      	movs	r1, #1
     83a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
     83e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
     842:	4622      	mov	r2, r4
     844:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
     848:	2015      	movs	r0, #21
     84a:	f000 fbd3 	bl	ff4 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
     84e:	2015      	movs	r0, #21
     850:	f000 fbc0 	bl	fd4 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
     854:	2301      	movs	r3, #1

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
     856:	4620      	mov	r0, r4
     858:	4a07      	ldr	r2, [pc, #28]	; (878 <z_clock_driver_init+0x64>)
     85a:	6013      	str	r3, [r2, #0]
     85c:	602b      	str	r3, [r5, #0]
}
     85e:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
     860:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     864:	e7fb      	b.n	85e <z_clock_driver_init+0x4a>
     866:	bf00      	nop
     868:	00004ca8 	.word	0x00004ca8
     86c:	50015000 	.word	0x50015000
     870:	50015140 	.word	0x50015140
     874:	e000e100 	.word	0xe000e100
     878:	50015008 	.word	0x50015008

0000087c <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
     87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     return p_reg->COUNTER;
     87e:	4b2c      	ldr	r3, [pc, #176]	; (930 <z_clock_set_timeout+0xb4>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
     880:	4c2c      	ldr	r4, [pc, #176]	; (934 <z_clock_set_timeout+0xb8>)
     882:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	u32_t unannounced = counter_sub(counter(), last_count);
     886:	4b2c      	ldr	r3, [pc, #176]	; (938 <z_clock_set_timeout+0xbc>)
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
     888:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
     88c:	bf08      	it	eq
     88e:	4620      	moveq	r0, r4
	u32_t unannounced = counter_sub(counter(), last_count);
     890:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
     892:	1a52      	subs	r2, r2, r1
     894:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
     898:	0212      	lsls	r2, r2, #8
     89a:	d436      	bmi.n	90a <z_clock_set_timeout+0x8e>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
     89c:	3801      	subs	r0, #1
     89e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
     8a2:	42a0      	cmp	r0, r4
     8a4:	bfa8      	it	ge
     8a6:	4620      	movge	r0, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
     8a8:	3301      	adds	r3, #1
     8aa:	4418      	add	r0, r3
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
     8ac:	42a0      	cmp	r0, r4
     8ae:	bf94      	ite	ls
     8b0:	180c      	addls	r4, r1, r0
     8b2:	190c      	addhi	r4, r1, r4
    p_reg->INTENCLR = mask;
     8b4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     8b8:	2700      	movs	r7, #0
    p_reg->INTENCLR = mask;
     8ba:	4b1d      	ldr	r3, [pc, #116]	; (930 <z_clock_set_timeout+0xb4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     8bc:	4e1f      	ldr	r6, [pc, #124]	; (93c <z_clock_set_timeout+0xc0>)
    p_reg->INTENCLR = mask;
     8be:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
     return p_reg->COUNTER;
     8c2:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    return p_reg->CC[ch];
     8c6:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     8ca:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	return (a - b) & COUNTER_MAX;
     8ce:	1a52      	subs	r2, r2, r1
     8d0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	if (counter_sub(prev_val, now) == 1) {
     8d4:	2a01      	cmp	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     8d6:	6037      	str	r7, [r6, #0]
    p_reg->CC[ch] = cc_val;
     8d8:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
     8dc:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	return (a - b) & COUNTER_MAX;
     8e0:	461d      	mov	r5, r3
	if (counter_sub(prev_val, now) == 1) {
     8e2:	d103      	bne.n	8ec <z_clock_set_timeout+0x70>
	z_impl_k_busy_wait(usec_to_wait);
     8e4:	200f      	movs	r0, #15
     8e6:	f003 fdf2 	bl	44ce <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     8ea:	6037      	str	r7, [r6, #0]
     8ec:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     8f0:	4b13      	ldr	r3, [pc, #76]	; (940 <z_clock_set_timeout+0xc4>)
     8f2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
     8f6:	f8d5 0504 	ldr.w	r0, [r5, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
     8fa:	1a23      	subs	r3, r4, r0
     8fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (diff == 1) {
     900:	2b01      	cmp	r3, #1
     902:	d104      	bne.n	90e <z_clock_set_timeout+0x92>
		handle_next_tick_case(t);
     904:	f7ff ff60 	bl	7c8 <handle_next_tick_case>
     908:	e00b      	b.n	922 <z_clock_set_timeout+0xa6>
		ticks = 0;
     90a:	2000      	movs	r0, #0
     90c:	e7cc      	b.n	8a8 <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     90e:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
     912:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
     return p_reg->COUNTER;
     916:	f8d5 0504 	ldr.w	r0, [r5, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
     91a:	1a24      	subs	r4, r4, r0
     91c:	3c02      	subs	r4, #2
	if (diff > MAX_TICKS) {
     91e:	0223      	lsls	r3, r4, #8
     920:	d4f0      	bmi.n	904 <z_clock_set_timeout+0x88>
    p_reg->INTENSET = mask;
     922:	f44f 3280 	mov.w	r2, #65536	; 0x10000
     926:	4b02      	ldr	r3, [pc, #8]	; (930 <z_clock_set_timeout+0xb4>)
     928:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	set_protected_absolute_ticks(cyc);
}
     92c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     92e:	bf00      	nop
     930:	50015000 	.word	0x50015000
     934:	007fffff 	.word	0x007fffff
     938:	2000016c 	.word	0x2000016c
     93c:	50015140 	.word	0x50015140
     940:	e000e100 	.word	0xe000e100

00000944 <z_clock_elapsed>:
	__asm__ volatile(
     944:	f04f 0220 	mov.w	r2, #32
     948:	f3ef 8311 	mrs	r3, BASEPRI
     94c:	f382 8811 	msr	BASEPRI, r2
     950:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
     954:	4a06      	ldr	r2, [pc, #24]	; (970 <z_clock_elapsed+0x2c>)
     956:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
     95a:	4a06      	ldr	r2, [pc, #24]	; (974 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
     95c:	6812      	ldr	r2, [r2, #0]
     95e:	1a80      	subs	r0, r0, r2
     960:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
     964:	f383 8811 	msr	BASEPRI, r3
     968:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
     96c:	4770      	bx	lr
     96e:	bf00      	nop
     970:	50015000 	.word	0x50015000
     974:	2000016c 	.word	0x2000016c

00000978 <config_regions>:
}
#endif /* CONFIG_ARM_FIRMWARE_HAS_SECURE_ENTRY_FUNCS */


static void config_regions(bool ram, size_t start, size_t end, u32_t perm)
{
     978:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const size_t region_size = ram ? RAM_SECURE_ATTRIBUTION_REGION_SIZE
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
     97a:	2800      	cmp	r0, #0
{
     97c:	461c      	mov	r4, r3

	for (size_t i = start; i < end; i++) {
     97e:	460d      	mov	r5, r1
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
     980:	bf14      	ite	ne
     982:	f44f 5300 	movne.w	r3, #8192	; 0x2000
     986:	f44f 4300 	moveq.w	r3, #32768	; 0x8000
	for (size_t i = start; i < end; i++) {
     98a:	4e20      	ldr	r6, [pc, #128]	; (a0c <config_regions+0x94>)
     98c:	4295      	cmp	r5, r2
     98e:	d332      	bcc.n	9f6 <config_regions+0x7e>
		} else {
			NRF_SPU->FLASHREGION[i].PERM = perm;
		}
	}

	PRINT("%02u %02u 0x%05x 0x%05x \t", start, end - 1,
     990:	fb02 f003 	mul.w	r0, r2, r3
     994:	3a01      	subs	r2, #1
     996:	9000      	str	r0, [sp, #0]
     998:	434b      	muls	r3, r1
     99a:	481d      	ldr	r0, [pc, #116]	; (a10 <config_regions+0x98>)
     99c:	f003 f965 	bl	3c6a <printk>
				region_size * start, region_size * end);
	PRINT("%s", perm & (ram ? SRAM_SECURE : FLASH_SECURE) ? "Secure\t\t" :
     9a0:	4b1c      	ldr	r3, [pc, #112]	; (a14 <config_regions+0x9c>)
     9a2:	f014 0f10 	tst.w	r4, #16
     9a6:	491c      	ldr	r1, [pc, #112]	; (a18 <config_regions+0xa0>)
     9a8:	481c      	ldr	r0, [pc, #112]	; (a1c <config_regions+0xa4>)
     9aa:	bf08      	it	eq
     9ac:	4619      	moveq	r1, r3
     9ae:	f003 f95c 	bl	3c6a <printk>
								"Non-Secure\t");
	PRINT("%c", perm & (ram ? SRAM_READ : FLASH_READ)  ? 'r' : '-');
     9b2:	f014 0f04 	tst.w	r4, #4
     9b6:	bf14      	ite	ne
     9b8:	2172      	movne	r1, #114	; 0x72
     9ba:	212d      	moveq	r1, #45	; 0x2d
     9bc:	4818      	ldr	r0, [pc, #96]	; (a20 <config_regions+0xa8>)
     9be:	f003 f954 	bl	3c6a <printk>
	PRINT("%c", perm & (ram ? SRAM_WRITE : FLASH_WRITE) ? 'w' : '-');
     9c2:	f014 0f02 	tst.w	r4, #2
     9c6:	bf14      	ite	ne
     9c8:	2177      	movne	r1, #119	; 0x77
     9ca:	212d      	moveq	r1, #45	; 0x2d
     9cc:	4814      	ldr	r0, [pc, #80]	; (a20 <config_regions+0xa8>)
     9ce:	f003 f94c 	bl	3c6a <printk>
	PRINT("%c", perm & (ram ? SRAM_EXEC : FLASH_EXEC)  ? 'x' : '-');
     9d2:	f014 0f01 	tst.w	r4, #1
     9d6:	bf0c      	ite	eq
     9d8:	212d      	moveq	r1, #45	; 0x2d
     9da:	2178      	movne	r1, #120	; 0x78
     9dc:	4810      	ldr	r0, [pc, #64]	; (a20 <config_regions+0xa8>)
     9de:	f003 f944 	bl	3c6a <printk>
	PRINT("%c", perm & (ram ? SRAM_LOCK : FLASH_LOCK)  ? 'l' : '-');
     9e2:	216c      	movs	r1, #108	; 0x6c
     9e4:	480e      	ldr	r0, [pc, #56]	; (a20 <config_regions+0xa8>)
     9e6:	f003 f940 	bl	3c6a <printk>
	PRINT("\n");
     9ea:	480e      	ldr	r0, [pc, #56]	; (a24 <config_regions+0xac>)
}
     9ec:	b003      	add	sp, #12
     9ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	PRINT("\n");
     9f2:	f003 b93a 	b.w	3c6a <printk>
		if (ram) {
     9f6:	b128      	cbz	r0, a04 <config_regions+0x8c>
			NRF_SPU->RAMREGION[i].PERM = perm;
     9f8:	f505 77e0 	add.w	r7, r5, #448	; 0x1c0
			NRF_SPU->FLASHREGION[i].PERM = perm;
     9fc:	f846 4027 	str.w	r4, [r6, r7, lsl #2]
	for (size_t i = start; i < end; i++) {
     a00:	3501      	adds	r5, #1
     a02:	e7c3      	b.n	98c <config_regions+0x14>
			NRF_SPU->FLASHREGION[i].PERM = perm;
     a04:	f505 77c0 	add.w	r7, r5, #384	; 0x180
     a08:	e7f8      	b.n	9fc <config_regions+0x84>
     a0a:	bf00      	nop
     a0c:	50003000 	.word	0x50003000
     a10:	00004b07 	.word	0x00004b07
     a14:	00004afb 	.word	0x00004afb
     a18:	00004af2 	.word	0x00004af2
     a1c:	00004c11 	.word	0x00004c11
     a20:	00004b21 	.word	0x00004b21
     a24:	00004e5c 	.word	0x00004e5c

00000a28 <spm_config_peripheral.constprop.1>:
		     SPU_PERIPHID_PERM_SECUREMAPPING_Split;

	return present && (usel || split);
}

static int spm_config_peripheral(u8_t id, bool dma_present)
     a28:	b508      	push	{r3, lr}
	 * Assign DMA capabilities and lock down the attribution.
	 *
	 * Note: the function assumes that the peripheral ID matches
	 * the IRQ line.
	 */
	NVIC_DisableIRQ(id);
     a2a:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     a2c:	2b00      	cmp	r3, #0
     a2e:	db0c      	blt.n	a4a <spm_config_peripheral.constprop.1+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     a30:	2201      	movs	r2, #1
     a32:	f000 011f 	and.w	r1, r0, #31
     a36:	408a      	lsls	r2, r1
     a38:	095b      	lsrs	r3, r3, #5
     a3a:	4910      	ldr	r1, [pc, #64]	; (a7c <spm_config_peripheral.constprop.1+0x54>)
     a3c:	3320      	adds	r3, #32
     a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     a42:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     a46:	f3bf 8f6f 	isb	sy
	const u32_t perm = NRF_SPU->PERIPHID[id].PERM;
     a4a:	0083      	lsls	r3, r0, #2
     a4c:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
     a50:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
     a54:	2831      	cmp	r0, #49	; 0x31
	const u32_t perm = NRF_SPU->PERIPHID[id].PERM;
     a56:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
     a5a:	d006      	beq.n	a6a <spm_config_peripheral.constprop.1+0x42>
	return present && (usel || split);
     a5c:	2a00      	cmp	r2, #0
     a5e:	da07      	bge.n	a70 <spm_config_peripheral.constprop.1+0x48>
	bool usel = (perm & SPU_PERIPHID_PERM_SECUREMAPPING_Msk) ==
     a60:	f002 0203 	and.w	r2, r2, #3
	return present && (usel || split);
     a64:	3a02      	subs	r2, #2
     a66:	2a01      	cmp	r2, #1
     a68:	d802      	bhi.n	a70 <spm_config_peripheral.constprop.1+0x48>

	if (usel_or_split(id)) {
		NRF_SPU->PERIPHID[id].PERM = PERIPH_PRESENT | PERIPH_NONSEC |
     a6a:	4a05      	ldr	r2, [pc, #20]	; (a80 <spm_config_peripheral.constprop.1+0x58>)
     a6c:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	}

	/* Even for non-present peripherals we force IRQs to be routed
	 * to Non-Secure state.
	 */
	irq_target_state_set(id, 0);
     a70:	2100      	movs	r1, #0
     a72:	f003 facc 	bl	400e <irq_target_state_set>
	return 0;
}
     a76:	2000      	movs	r0, #0
     a78:	bd08      	pop	{r3, pc}
     a7a:	bf00      	nop
     a7c:	e000e100 	.word	0xe000e100
     a80:	80000100 	.word	0x80000100

00000a84 <spm_jump>:
	tz_nonsecure_fpu_access_enable();
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */
}

void spm_jump(void)
{
     a84:	b530      	push	{r4, r5, lr}
	 * The assumption is that the MSP is located at VTOR_NS[0].
	 */
	u32_t *vtor_ns = (u32_t *)NON_SECURE_APP_ADDRESS;

	PRINT("SPM: NS image at 0x%x\n", (u32_t)vtor_ns);
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
     a86:	f44f 4440 	mov.w	r4, #49152	; 0xc000
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
     a8a:	f24c 0504 	movw	r5, #49156	; 0xc004
{
     a8e:	b085      	sub	sp, #20
	PRINT("SPM: NS image at 0x%x\n", (u32_t)vtor_ns);
     a90:	f44f 4140 	mov.w	r1, #49152	; 0xc000
     a94:	482c      	ldr	r0, [pc, #176]	; (b48 <spm_jump+0xc4>)
     a96:	f003 f8e8 	bl	3c6a <printk>
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
     a9a:	6821      	ldr	r1, [r4, #0]
     a9c:	482b      	ldr	r0, [pc, #172]	; (b4c <spm_jump+0xc8>)
     a9e:	f003 f8e4 	bl	3c6a <printk>
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
     aa2:	6829      	ldr	r1, [r5, #0]
     aa4:	482a      	ldr	r0, [pc, #168]	; (b50 <spm_jump+0xcc>)
     aa6:	f003 f8e0 	bl	3c6a <printk>

	/* Configure Non-Secure stack */
	tz_nonsecure_setup_conf_t spm_ns_conf = {
     aaa:	2210      	movs	r2, #16
     aac:	2100      	movs	r1, #0
     aae:	4668      	mov	r0, sp
     ab0:	f003 fb6d 	bl	418e <memset>
		.vtor_ns = (u32_t)vtor_ns,
		.msp_ns = vtor_ns[0],
     ab4:	6823      	ldr	r3, [r4, #0]
	tz_nonsecure_state_setup(spm_ns_conf);
     ab6:	4668      	mov	r0, sp
	tz_nonsecure_setup_conf_t spm_ns_conf = {
     ab8:	9300      	str	r3, [sp, #0]
     aba:	9402      	str	r4, [sp, #8]
	tz_nonsecure_state_setup(spm_ns_conf);
     abc:	f000 fe3c 	bl	1738 <tz_nonsecure_state_setup>
	tz_nonsecure_exception_prio_config(1);
     ac0:	2001      	movs	r0, #1
     ac2:	f000 fe69 	bl	1798 <tz_nonsecure_exception_prio_config>
	tz_nbanked_exception_target_state_set(0);
     ac6:	2000      	movs	r0, #0
     ac8:	f000 fe52 	bl	1770 <tz_nbanked_exception_target_state_set>
	tz_nonsecure_system_reset_req_block(
     acc:	2000      	movs	r0, #0
     ace:	f000 fe77 	bl	17c0 <tz_nonsecure_system_reset_req_block>
	tz_sau_configure(0, 1);
     ad2:	2101      	movs	r1, #1
     ad4:	2000      	movs	r0, #0
     ad6:	f000 fe91 	bl	17fc <tz_sau_configure>
	tz_nonsecure_fpu_access_enable();
     ada:	f000 fe85 	bl	17e8 <tz_nonsecure_fpu_access_enable>

	spm_configure_ns(&spm_ns_conf);

	/* Generate function pointer for Non-Secure function call. */
	TZ_NONSECURE_FUNC_PTR_DECLARE(reset_ns);
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
     ade:	682c      	ldr	r4, [r5, #0]

	if (TZ_NONSECURE_FUNC_PTR_IS_NS(reset_ns)) {
		PRINT("SPM: prepare to jump to Non-Secure image.\n");
     ae0:	481c      	ldr	r0, [pc, #112]	; (b54 <spm_jump+0xd0>)
     ae2:	f003 f8c2 	bl	3c6a <printk>
		/* Note: Move UARTE0 before jumping, if it is
		 * to be used on the Non-Secure domain.
		 */

		/* Configure UARTE0 as non-secure */
		spm_config_peripheral(
     ae6:	2008      	movs	r0, #8
     ae8:	f7ff ff9e 	bl	a28 <spm_config_peripheral.constprop.1>
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
     aec:	f024 0401 	bic.w	r4, r4, #1
  __ASM volatile ("dsb 0xF":::"memory");
     af0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     af4:	f3bf 8f6f 	isb	sy

		__DSB();
		__ISB();

		/* Jump to Non-Secure firmware */
		reset_ns();
     af8:	0864      	lsrs	r4, r4, #1
     afa:	0064      	lsls	r4, r4, #1
     afc:	4620      	mov	r0, r4
     afe:	4621      	mov	r1, r4
     b00:	4622      	mov	r2, r4
     b02:	4623      	mov	r3, r4
     b04:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
     b08:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
     b0c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
     b10:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
     b14:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
     b18:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
     b1c:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
     b20:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
     b24:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
     b28:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
     b2c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
     b30:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
     b34:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
     b38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
     b3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
     b40:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     b44:	f7ff fcf8 	bl	538 <__gnu_cmse_nonsecure_call>

		CODE_UNREACHABLE;
     b48:	00004c28 	.word	0x00004c28
     b4c:	00004c3f 	.word	0x00004c3f
     b50:	00004c54 	.word	0x00004c54
     b54:	00004c72 	.word	0x00004c72

00000b58 <spm_config>:
		      (u32_t)reset_ns);
	}
}

void spm_config(void)
{
     b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("Flash regions\t\tDomain\t\tPermissions\n");
     b5c:	483b      	ldr	r0, [pc, #236]	; (c4c <spm_config+0xf4>)
     b5e:	f003 f884 	bl	3c6a <printk>
	config_regions(false, 0, NON_SECURE_FLASH_REGION_INDEX,
     b62:	2100      	movs	r1, #0
     b64:	f240 1317 	movw	r3, #279	; 0x117
     b68:	4608      	mov	r0, r1
     b6a:	2201      	movs	r2, #1
     b6c:	f7ff ff04 	bl	978 <config_regions>
	config_regions(false, NON_SECURE_FLASH_REGION_INDEX,
     b70:	f240 1307 	movw	r3, #263	; 0x107
     b74:	2220      	movs	r2, #32
     b76:	2101      	movs	r1, #1
     b78:	2000      	movs	r0, #0
     b7a:	f7ff fefd 	bl	978 <config_regions>
	PRINT("\n");
     b7e:	4834      	ldr	r0, [pc, #208]	; (c50 <spm_config+0xf8>)
     b80:	f003 f873 	bl	3c6a <printk>
	u32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
     b84:	4b33      	ldr	r3, [pc, #204]	; (c54 <spm_config+0xfc>)
                                            bool               lock_conf)
{
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].REGION & SPU_FLASHNSC_REGION_LOCK_Msk));
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].SIZE & SPU_FLASHNSC_SIZE_LOCK_Msk));

    p_reg->FLASHNSC[flash_nsc_id].REGION = (uint32_t)region_number |
     b86:	4a34      	ldr	r2, [pc, #208]	; (c58 <spm_config+0x100>)
     b88:	f3c3 31c4 	ubfx	r1, r3, #15, #5
     b8c:	f3c3 030e 	ubfx	r3, r3, #0, #15
     b90:	f5c3 4300 	rsb	r3, r3, #32768	; 0x8000
        (lock_conf ? SPU_FLASHNSC_REGION_LOCK_Msk : 0);
    p_reg->FLASHNSC[flash_nsc_id].SIZE = (uint32_t)flash_nsc_size |
     b94:	f3c3 1343 	ubfx	r3, r3, #5, #4
    p_reg->FLASHNSC[flash_nsc_id].REGION = (uint32_t)region_number |
     b98:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->FLASHNSC[flash_nsc_id].SIZE = (uint32_t)flash_nsc_size |
     b9c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	PRINT("Non-secure callable region 0 placed in flash region %d with size %d.\n",
     ba0:	f8d2 1500 	ldr.w	r1, [r2, #1280]	; 0x500
     ba4:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
     ba8:	482c      	ldr	r0, [pc, #176]	; (c5c <spm_config+0x104>)
     baa:	0152      	lsls	r2, r2, #5
     bac:	f003 f85d 	bl	3c6a <printk>
	PRINT("\n");
     bb0:	4827      	ldr	r0, [pc, #156]	; (c50 <spm_config+0xf8>)
     bb2:	f003 f85a 	bl	3c6a <printk>
	int err = spm_secure_services_init();
     bb6:	f003 f9d8 	bl	3f6a <spm_secure_services_init>
	if (err != 0) {
     bba:	4601      	mov	r1, r0
     bbc:	b110      	cbz	r0, bc4 <spm_config+0x6c>
		PRINT("Could not initialize secure services (err %d).\n", err);
     bbe:	4828      	ldr	r0, [pc, #160]	; (c60 <spm_config+0x108>)
     bc0:	f003 f853 	bl	3c6a <printk>
	NRF_SPU->DPPI[0].PERM = mask;
     bc4:	2400      	movs	r4, #0
	PRINT("SRAM region\t\tDomain\t\tPermissions\n");
     bc6:	4827      	ldr	r0, [pc, #156]	; (c64 <spm_config+0x10c>)
     bc8:	f003 f84f 	bl	3c6a <printk>
	config_regions(true, 0, NON_SECURE_RAM_REGION_INDEX,
     bcc:	f240 1317 	movw	r3, #279	; 0x117
     bd0:	2208      	movs	r2, #8
     bd2:	2100      	movs	r1, #0
     bd4:	2001      	movs	r0, #1
     bd6:	f7ff fecf 	bl	978 <config_regions>
	NRF_SPU->DPPI[0].PERM = mask;
     bda:	4d1f      	ldr	r5, [pc, #124]	; (c58 <spm_config+0x100>)
	config_regions(true, NON_SECURE_RAM_REGION_INDEX,
     bdc:	f240 1307 	movw	r3, #263	; 0x107
     be0:	2220      	movs	r2, #32
     be2:	2108      	movs	r1, #8
     be4:	2001      	movs	r0, #1
     be6:	f7ff fec7 	bl	978 <config_regions>
	PRINT("\n");
     bea:	4819      	ldr	r0, [pc, #100]	; (c50 <spm_config+0xf8>)
     bec:	f003 f83d 	bl	3c6a <printk>
	NRF_SPU->DPPI[0].PERM = mask;
     bf0:	f8c5 4480 	str.w	r4, [r5, #1152]	; 0x480
	PRINT("Peripheral\t\tDomain\t\tStatus\n");
     bf4:	481c      	ldr	r0, [pc, #112]	; (c68 <spm_config+0x110>)
     bf6:	f003 f838 	bl	3c6a <printk>
		PRINT("%02u %-21s%s", i, periph[i].name,
     bfa:	4f1c      	ldr	r7, [pc, #112]	; (c6c <spm_config+0x114>)
		NRF_SPU->GPIOPORT[0].PERM = 0;
     bfc:	f8c5 44c0 	str.w	r4, [r5, #1216]	; 0x4c0
		PRINT("%02u %-21s%s", i, periph[i].name,
     c00:	f8df 807c 	ldr.w	r8, [pc, #124]	; c80 <spm_config+0x128>
     c04:	4d1a      	ldr	r5, [pc, #104]	; (c70 <spm_config+0x118>)
     c06:	f8df 907c 	ldr.w	r9, [pc, #124]	; c84 <spm_config+0x12c>
     c0a:	796e      	ldrb	r6, [r5, #5]
     c0c:	682a      	ldr	r2, [r5, #0]
     c0e:	2e00      	cmp	r6, #0
     c10:	bf14      	ite	ne
     c12:	463b      	movne	r3, r7
     c14:	4643      	moveq	r3, r8
     c16:	4621      	mov	r1, r4
     c18:	4648      	mov	r0, r9
     c1a:	f003 f826 	bl	3c6a <printk>
		if (!periph[i].nonsecure) {
     c1e:	b966      	cbnz	r6, c3a <spm_config+0xe2>
			PRINT("\tSKIP\n");
     c20:	4814      	ldr	r0, [pc, #80]	; (c74 <spm_config+0x11c>)
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
     c22:	3401      	adds	r4, #1
			PRINT("\tOK\n");
     c24:	f003 f821 	bl	3c6a <printk>
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
     c28:	2c1a      	cmp	r4, #26
     c2a:	f105 0508 	add.w	r5, r5, #8
     c2e:	d1ec      	bne.n	c0a <spm_config+0xb2>
	PRINT("\n");
     c30:	4807      	ldr	r0, [pc, #28]	; (c50 <spm_config+0xf8>)
	spm_config_flash();
	spm_config_sram();
	spm_config_peripherals();
}
     c32:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("\n");
     c36:	f003 b818 	b.w	3c6a <printk>
		err = spm_config_peripheral(periph[i].id, false);
     c3a:	7928      	ldrb	r0, [r5, #4]
     c3c:	f7ff fef4 	bl	a28 <spm_config_peripheral.constprop.1>
		if (err) {
     c40:	b108      	cbz	r0, c46 <spm_config+0xee>
			PRINT("\tERROR\n");
     c42:	480d      	ldr	r0, [pc, #52]	; (c78 <spm_config+0x120>)
     c44:	e7ed      	b.n	c22 <spm_config+0xca>
			PRINT("\tOK\n");
     c46:	480d      	ldr	r0, [pc, #52]	; (c7c <spm_config+0x124>)
     c48:	e7eb      	b.n	c22 <spm_config+0xca>
     c4a:	bf00      	nop
     c4c:	00004b2f 	.word	0x00004b2f
     c50:	00004e5c 	.word	0x00004e5c
     c54:	00007fe0 	.word	0x00007fe0
     c58:	50003000 	.word	0x50003000
     c5c:	00004b53 	.word	0x00004b53
     c60:	00004b99 	.word	0x00004b99
     c64:	00004bc9 	.word	0x00004bc9
     c68:	00004beb 	.word	0x00004beb
     c6c:	00004b24 	.word	0x00004b24
     c70:	0000484c 	.word	0x0000484c
     c74:	00004c14 	.word	0x00004c14
     c78:	00004c1b 	.word	0x00004c1b
     c7c:	00004c23 	.word	0x00004c23
     c80:	00004aff 	.word	0x00004aff
     c84:	00004c07 	.word	0x00004c07

00000c88 <__acle_se_spm_request_read>:
};


__TZ_NONSECURE_ENTRY_FUNC
int spm_request_read(void *destination, u32_t addr, size_t len)
{
     c88:	b510      	push	{r4, lr}
		 .size = FICR_PUBLIC_SIZE},
		{.start = FICR_RESTRICTED_ADDR,
		 .size = FICR_RESTRICTED_SIZE},
	};

	if (destination == NULL || len <= 0) {
     c8a:	2800      	cmp	r0, #0
     c8c:	d04b      	beq.n	d26 <__acle_se_spm_request_read+0x9e>
     c8e:	2a00      	cmp	r2, #0
     c90:	d049      	beq.n	d26 <__acle_se_spm_request_read+0x9e>

	for (size_t i = 0; i < ARRAY_SIZE(ranges); i++) {
		u32_t start = ranges[i].start;
		u32_t size = ranges[i].size;

		if (addr >= start && addr + len <= start + size) {
     c92:	4b26      	ldr	r3, [pc, #152]	; (d2c <__acle_se_spm_request_read+0xa4>)
     c94:	4299      	cmp	r1, r3
     c96:	d93c      	bls.n	d12 <__acle_se_spm_request_read+0x8a>
     c98:	1854      	adds	r4, r2, r1
     c9a:	f603 231d 	addw	r3, r3, #2589	; 0xa1d
     c9e:	429c      	cmp	r4, r3
     ca0:	d83a      	bhi.n	d18 <__acle_se_spm_request_read+0x90>
			memcpy(destination, (const void *)addr, len);
     ca2:	f003 fa4a 	bl	413a <memcpy>
			return 0;
     ca6:	2000      	movs	r0, #0
		}
	}

	return -EPERM;
}
     ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     cac:	4671      	mov	r1, lr
     cae:	4672      	mov	r2, lr
     cb0:	4673      	mov	r3, lr
     cb2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
     cb6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
     cba:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
     cbe:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
     cc2:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
     cc6:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
     cca:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
     cce:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
     cd2:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
     cd6:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
     cda:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
     cde:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
     ce2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
     ce6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
     cea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
     cee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     cf2:	f38e 8c00 	msr	CPSR_fs, lr
     cf6:	b410      	push	{r4}
     cf8:	eef1 ca10 	vmrs	ip, fpscr
     cfc:	f64f 7460 	movw	r4, #65376	; 0xff60
     d00:	f6c0 74ff 	movt	r4, #4095	; 0xfff
     d04:	ea0c 0c04 	and.w	ip, ip, r4
     d08:	eee1 ca10 	vmsr	fpscr, ip
     d0c:	bc10      	pop	{r4}
     d0e:	46f4      	mov	ip, lr
     d10:	4774      	bxns	lr
		if (addr >= start && addr + len <= start + size) {
     d12:	4b07      	ldr	r3, [pc, #28]	; (d30 <__acle_se_spm_request_read+0xa8>)
     d14:	4299      	cmp	r1, r3
     d16:	d903      	bls.n	d20 <__acle_se_spm_request_read+0x98>
     d18:	4b06      	ldr	r3, [pc, #24]	; (d34 <__acle_se_spm_request_read+0xac>)
     d1a:	1854      	adds	r4, r2, r1
     d1c:	429c      	cmp	r4, r3
     d1e:	d9c0      	bls.n	ca2 <__acle_se_spm_request_read+0x1a>
	return -EPERM;
     d20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     d24:	e7c0      	b.n	ca8 <__acle_se_spm_request_read+0x20>
		return -EINVAL;
     d26:	f06f 0015 	mvn.w	r0, #21
     d2a:	e7bd      	b.n	ca8 <__acle_se_spm_request_read+0x20>
     d2c:	00ff0203 	.word	0x00ff0203
     d30:	00ff012f 	.word	0x00ff012f
     d34:	00ff0138 	.word	0x00ff0138

00000d38 <__acle_se_spm_firmware_info>:


#ifdef CONFIG_SPM_SERVICE_FIND_FIRMWARE_INFO
__TZ_NONSECURE_ENTRY_FUNC
int spm_firmware_info(u32_t fw_address, struct fw_info *info)
{
     d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d3c:	4683      	mov	fp, r0
     d3e:	b085      	sub	sp, #20
	const struct fw_info *tmp_info;

	if (info == NULL) {
     d40:	4689      	mov	r9, r1
     d42:	2900      	cmp	r1, #0
     d44:	d051      	beq.n	dea <__acle_se_spm_firmware_info+0xb2>
 */
static inline const struct fw_info *fw_info_find(u32_t firmware_address)
{
	const struct fw_info *finfo;

	for (u32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
     d46:	2700      	movs	r7, #0
     d48:	f8df a0b0 	ldr.w	sl, [pc, #176]	; dfc <__acle_se_spm_firmware_info+0xc4>
	const u32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
     d4c:	f8df 80b0 	ldr.w	r8, [pc, #176]	; e00 <__acle_se_spm_firmware_info+0xc8>
     d50:	ae01      	add	r6, sp, #4
		finfo = fw_info_check(firmware_address +
						fw_info_allowed_offsets[i]);
     d52:	f85a 4b04 	ldr.w	r4, [sl], #4
	const u32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
     d56:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
		finfo = fw_info_check(firmware_address +
     d5a:	445c      	add	r4, fp
	const u32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
     d5c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	if (memcmp(finfo->magic, fw_info_magic, CONFIG_FW_INFO_MAGIC_LEN)
     d60:	220c      	movs	r2, #12
     d62:	4631      	mov	r1, r6
     d64:	4620      	mov	r0, r4
     d66:	f003 f9c1 	bl	40ec <memcmp>
     d6a:	4605      	mov	r5, r0
     d6c:	b908      	cbnz	r0, d72 <__acle_se_spm_firmware_info+0x3a>
		if (finfo) {
     d6e:	2c00      	cmp	r4, #0
     d70:	d13e      	bne.n	df0 <__acle_se_spm_firmware_info+0xb8>
	for (u32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
     d72:	3701      	adds	r7, #1
     d74:	2f05      	cmp	r7, #5
     d76:	d1ec      	bne.n	d52 <__acle_se_spm_firmware_info+0x1a>
	if (tmp_info != NULL) {
		memcpy(info, tmp_info, sizeof(*tmp_info));
		return 0;
	}

	return -EFAULT;
     d78:	f06f 050d 	mvn.w	r5, #13
}
     d7c:	4628      	mov	r0, r5
     d7e:	b005      	add	sp, #20
     d80:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
     d84:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
     d88:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
     d8c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
     d90:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
     d94:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
     d98:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
     d9c:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
     da0:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
     da4:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
     da8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
     dac:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
     db0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
     db4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
     db8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
     dbc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     dc0:	4671      	mov	r1, lr
     dc2:	4672      	mov	r2, lr
     dc4:	4673      	mov	r3, lr
     dc6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     dca:	f38e 8c00 	msr	CPSR_fs, lr
     dce:	b410      	push	{r4}
     dd0:	eef1 ca10 	vmrs	ip, fpscr
     dd4:	f64f 7460 	movw	r4, #65376	; 0xff60
     dd8:	f6c0 74ff 	movt	r4, #4095	; 0xfff
     ddc:	ea0c 0c04 	and.w	ip, ip, r4
     de0:	eee1 ca10 	vmsr	fpscr, ip
     de4:	bc10      	pop	{r4}
     de6:	46f4      	mov	ip, lr
     de8:	4774      	bxns	lr
		return -EINVAL;
     dea:	f06f 0515 	mvn.w	r5, #21
     dee:	e7c5      	b.n	d7c <__acle_se_spm_firmware_info+0x44>
		memcpy(info, tmp_info, sizeof(*tmp_info));
     df0:	223c      	movs	r2, #60	; 0x3c
     df2:	4621      	mov	r1, r4
     df4:	4648      	mov	r0, r9
     df6:	f003 f9a0 	bl	413a <memcpy>
		return 0;
     dfa:	e7bf      	b.n	d7c <__acle_se_spm_firmware_info+0x44>
     dfc:	0000491c 	.word	0x0000491c
     e00:	000047e0 	.word	0x000047e0

00000e04 <nrf_cc310_platform_abort_init>:

/** @brief Function to initialize the nrf_cc310_platform abort APIs.
 */
void nrf_cc310_platform_abort_init(void)
{
	nrf_cc310_platform_set_abort(&apis);
     e04:	4801      	ldr	r0, [pc, #4]	; (e0c <nrf_cc310_platform_abort_init+0x8>)
     e06:	f002 b8c7 	b.w	2f98 <nrf_cc310_platform_set_abort>
     e0a:	bf00      	nop
     e0c:	00004930 	.word	0x00004930

00000e10 <mutex_unlock>:
}


/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock(nrf_cc310_platform_mutex_t *mutex) {
     e10:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
     e12:	b130      	cbz	r0, e22 <mutex_unlock+0x12>
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
    }

    /* Ensure that the mutex has been initialized */
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
     e14:	6843      	ldr	r3, [r0, #4]
     e16:	b13b      	cbz	r3, e28 <mutex_unlock+0x18>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    }

    p_mutex = (struct k_mutex *)mutex->mutex;
     e18:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
     e1a:	f001 f965 	bl	20e8 <z_impl_k_mutex_unlock>

    k_mutex_unlock(p_mutex);
    return NRF_CC310_PLATFORM_SUCCESS;
     e1e:	2000      	movs	r0, #0
}
     e20:	bd08      	pop	{r3, pc}
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
     e22:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
     e26:	e7fb      	b.n	e20 <mutex_unlock+0x10>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
     e28:	4800      	ldr	r0, [pc, #0]	; (e2c <mutex_unlock+0x1c>)
     e2a:	e7f9      	b.n	e20 <mutex_unlock+0x10>
     e2c:	ffff8fea 	.word	0xffff8fea

00000e30 <mutex_free>:
static void mutex_free(nrf_cc310_platform_mutex_t *mutex) {
     e30:	b538      	push	{r3, r4, r5, lr}
    if (mutex == NULL) {
     e32:	4604      	mov	r4, r0
     e34:	b918      	cbnz	r0, e3e <mutex_free+0xe>
        platform_abort_apis.abort_fn(
     e36:	4b0b      	ldr	r3, [pc, #44]	; (e64 <mutex_free+0x34>)
     e38:	480b      	ldr	r0, [pc, #44]	; (e68 <mutex_free+0x38>)
     e3a:	685b      	ldr	r3, [r3, #4]
     e3c:	4798      	blx	r3
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
     e3e:	6865      	ldr	r5, [r4, #4]
     e40:	b155      	cbz	r5, e58 <mutex_free+0x28>
    if ((mutex->flags & NRF_CC310_PLATFORM_MUTEX_MASK_IS_ALLOCATED) == 0) {
     e42:	f015 0502 	ands.w	r5, r5, #2
     e46:	6820      	ldr	r0, [r4, #0]
     e48:	d107      	bne.n	e5a <mutex_free+0x2a>
        k_mem_slab_free(&mutex_slab, mutex->mutex);
     e4a:	4601      	mov	r1, r0
     e4c:	4807      	ldr	r0, [pc, #28]	; (e6c <mutex_free+0x3c>)
     e4e:	f001 f8a9 	bl	1fa4 <k_mem_slab_free>
        mutex->mutex = NULL;
     e52:	6025      	str	r5, [r4, #0]
    mutex->flags = NRF_CC310_PLATFORM_MUTEX_MASK_INVALID;
     e54:	2300      	movs	r3, #0
     e56:	6063      	str	r3, [r4, #4]
}
     e58:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
     e5a:	2214      	movs	r2, #20
     e5c:	2100      	movs	r1, #0
     e5e:	f003 f996 	bl	418e <memset>
     e62:	e7f7      	b.n	e54 <mutex_free+0x24>
     e64:	20000068 	.word	0x20000068
     e68:	00004d99 	.word	0x00004d99
     e6c:	20000170 	.word	0x20000170

00000e70 <mutex_init>:
static void mutex_init(nrf_cc310_platform_mutex_t *mutex) {
     e70:	b510      	push	{r4, lr}
    if (mutex == NULL) {
     e72:	4604      	mov	r4, r0
     e74:	b918      	cbnz	r0, e7e <mutex_init+0xe>
        platform_abort_apis.abort_fn(
     e76:	4b14      	ldr	r3, [pc, #80]	; (ec8 <mutex_init+0x58>)
     e78:	4814      	ldr	r0, [pc, #80]	; (ecc <mutex_init+0x5c>)
     e7a:	685b      	ldr	r3, [r3, #4]
     e7c:	4798      	blx	r3
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID &&
     e7e:	6863      	ldr	r3, [r4, #4]
     e80:	b9cb      	cbnz	r3, eb6 <mutex_init+0x46>
     e82:	6823      	ldr	r3, [r4, #0]
     e84:	b9bb      	cbnz	r3, eb6 <mutex_init+0x46>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
     e86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     e8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     e8e:	4621      	mov	r1, r4
     e90:	480f      	ldr	r0, [pc, #60]	; (ed0 <mutex_init+0x60>)
     e92:	f001 f855 	bl	1f40 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
     e96:	b908      	cbnz	r0, e9c <mutex_init+0x2c>
     e98:	6823      	ldr	r3, [r4, #0]
     e9a:	b91b      	cbnz	r3, ea4 <mutex_init+0x34>
            platform_abort_apis.abort_fn(
     e9c:	4b0a      	ldr	r3, [pc, #40]	; (ec8 <mutex_init+0x58>)
     e9e:	480d      	ldr	r0, [pc, #52]	; (ed4 <mutex_init+0x64>)
     ea0:	685b      	ldr	r3, [r3, #4]
     ea2:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
     ea4:	2214      	movs	r2, #20
     ea6:	2100      	movs	r1, #0
     ea8:	6820      	ldr	r0, [r4, #0]
     eaa:	f003 f970 	bl	418e <memset>
        mutex->flags |= NRF_CC310_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
     eae:	6863      	ldr	r3, [r4, #4]
     eb0:	f043 0302 	orr.w	r3, r3, #2
     eb4:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
     eb6:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
     eb8:	f003 fa34 	bl	4324 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC310_PLATFORM_MUTEX_MASK_IS_VALID;
     ebc:	6863      	ldr	r3, [r4, #4]
     ebe:	f043 0301 	orr.w	r3, r3, #1
     ec2:	6063      	str	r3, [r4, #4]
}
     ec4:	bd10      	pop	{r4, pc}
     ec6:	bf00      	nop
     ec8:	20000068 	.word	0x20000068
     ecc:	00004d99 	.word	0x00004d99
     ed0:	20000170 	.word	0x20000170
     ed4:	00004dbf 	.word	0x00004dbf

00000ed8 <mutex_lock>:
static int32_t mutex_lock(nrf_cc310_platform_mutex_t *mutex) {
     ed8:	b508      	push	{r3, lr}
    if(mutex == NULL) {
     eda:	b168      	cbz	r0, ef8 <mutex_lock+0x20>
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
     edc:	6843      	ldr	r3, [r0, #4]
     ede:	b173      	cbz	r3, efe <mutex_lock+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
     ee0:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
     ee2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     ee6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     eea:	f001 f885 	bl	1ff8 <z_impl_k_mutex_lock>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_FAILED;
     eee:	4b05      	ldr	r3, [pc, #20]	; (f04 <mutex_lock+0x2c>)
    if (ret == 0) {
     ef0:	2800      	cmp	r0, #0
        return NRF_CC310_PLATFORM_ERROR_MUTEX_FAILED;
     ef2:	bf18      	it	ne
     ef4:	4618      	movne	r0, r3
}
     ef6:	bd08      	pop	{r3, pc}
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
     ef8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
     efc:	e7fb      	b.n	ef6 <mutex_lock+0x1e>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
     efe:	4802      	ldr	r0, [pc, #8]	; (f08 <mutex_lock+0x30>)
     f00:	e7f9      	b.n	ef6 <mutex_lock+0x1e>
     f02:	bf00      	nop
     f04:	ffff8fe9 	.word	0xffff8fe9
     f08:	ffff8fea 	.word	0xffff8fea

00000f0c <nrf_cc310_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc310_platform mutex APIs
 */
void nrf_cc310_platform_mutex_init(void)
{
     f0c:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
     f0e:	4906      	ldr	r1, [pc, #24]	; (f28 <nrf_cc310_platform_mutex_init+0x1c>)
     f10:	2340      	movs	r3, #64	; 0x40
     f12:	2214      	movs	r2, #20
     f14:	4805      	ldr	r0, [pc, #20]	; (f2c <nrf_cc310_platform_mutex_init+0x20>)
     f16:	f003 f9ea 	bl	42ee <k_mem_slab_init>
            mutex_slab_buffer,
            sizeof(struct k_mutex),
            NUM_MUTEXES);

    nrf_cc310_platform_set_mutexes(&mutex_apis, &mutexes);
}
     f1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc310_platform_set_mutexes(&mutex_apis, &mutexes);
     f1e:	4904      	ldr	r1, [pc, #16]	; (f30 <nrf_cc310_platform_mutex_init+0x24>)
     f20:	4804      	ldr	r0, [pc, #16]	; (f34 <nrf_cc310_platform_mutex_init+0x28>)
     f22:	f002 b871 	b.w	3008 <nrf_cc310_platform_set_mutexes>
     f26:	bf00      	nop
     f28:	2000018c 	.word	0x2000018c
     f2c:	20000170 	.word	0x20000170
     f30:	00004948 	.word	0x00004948
     f34:	00004938 	.word	0x00004938

00000f38 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
     f38:	4a09      	ldr	r2, [pc, #36]	; (f60 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
     f3a:	490a      	ldr	r1, [pc, #40]	; (f64 <arch_swap+0x2c>)
	_current->arch.basepri = key;
     f3c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
     f3e:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
     f40:	66d8      	str	r0, [r3, #108]	; 0x6c
	_current->arch.swap_return_value = _k_neg_eagain;
     f42:	6719      	str	r1, [r3, #112]	; 0x70

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     f44:	4908      	ldr	r1, [pc, #32]	; (f68 <arch_swap+0x30>)
     f46:	684b      	ldr	r3, [r1, #4]
     f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
     f4c:	604b      	str	r3, [r1, #4]
     f4e:	2300      	movs	r3, #0
     f50:	f383 8811 	msr	BASEPRI, r3
     f54:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
     f58:	6893      	ldr	r3, [r2, #8]
}
     f5a:	6f18      	ldr	r0, [r3, #112]	; 0x70
     f5c:	4770      	bx	lr
     f5e:	bf00      	nop
     f60:	20000788 	.word	0x20000788
     f64:	000049bc 	.word	0x000049bc
     f68:	e000ed00 	.word	0xe000ed00

00000f6c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
     f6c:	490f      	ldr	r1, [pc, #60]	; (fac <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
     f6e:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
     f70:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
     f74:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
     f76:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
     f7a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     f7e:	2020      	movs	r0, #32
    msr BASEPRI, r0
     f80:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
     f84:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
     f88:	4f09      	ldr	r7, [pc, #36]	; (fb0 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
     f8a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
     f8e:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
     f90:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
     f92:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
     f94:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
    movs r3, #0
     f96:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
     f98:	66d3      	str	r3, [r2, #108]	; 0x6c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
     f9a:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
     f9e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
     fa2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
     fa6:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
     faa:	4770      	bx	lr
    ldr r1, =_kernel
     fac:	20000788 	.word	0x20000788
    ldr v4, =_SCS_ICSR
     fb0:	e000ed04 	.word	0xe000ed04

00000fb4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
     fb4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
     fb8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
     fba:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
     fbe:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
     fc2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
     fc4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
     fc8:	2902      	cmp	r1, #2
    beq _oops
     fca:	d0ff      	beq.n	fcc <_oops>

00000fcc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
     fcc:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
     fce:	f003 f84b 	bl	4068 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
     fd2:	bd01      	pop	{r0, pc}

00000fd4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
     fd4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     fd6:	2b00      	cmp	r3, #0
     fd8:	db08      	blt.n	fec <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     fda:	2201      	movs	r2, #1
     fdc:	f000 001f 	and.w	r0, r0, #31
     fe0:	fa02 f000 	lsl.w	r0, r2, r0
     fe4:	4a02      	ldr	r2, [pc, #8]	; (ff0 <arch_irq_enable+0x1c>)
     fe6:	095b      	lsrs	r3, r3, #5
     fe8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
     fec:	4770      	bx	lr
     fee:	bf00      	nop
     ff0:	e000e100 	.word	0xe000e100

00000ff4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
     ff4:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
     ff6:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
     ff8:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     ffc:	bfa8      	it	ge
     ffe:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
    1002:	ea4f 1141 	mov.w	r1, r1, lsl #5
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1006:	bfb8      	it	lt
    1008:	4b05      	ldrlt	r3, [pc, #20]	; (1020 <z_arm_irq_priority_set+0x2c>)
    100a:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    100c:	bfab      	itete	ge
    100e:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1012:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1016:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    101a:	5419      	strblt	r1, [r3, r0]
}
    101c:	4770      	bx	lr
    101e:	bf00      	nop
    1020:	e000ed14 	.word	0xe000ed14

00001024 <arch_new_thread>:
#ifdef CONFIG_INIT_STACKS
	memset(stack, 0xaa, stack_size);
#endif
#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)stack;
	thread->stack_info.size = stack_size;
    1024:	e9c0 1218 	strd	r1, r2, [r0, #96]	; 0x60
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
    1028:	440a      	add	r2, r1
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(Z_STACK_PTR_ALIGN(stackEnd -
    102a:	3a20      	subs	r2, #32
    102c:	f022 0207 	bic.w	r2, r2, #7
#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
    1030:	6013      	str	r3, [r2, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
    1032:	9b00      	ldr	r3, [sp, #0]
	pInitCtx->basic.pc &= 0xfffffffe;
    1034:	4907      	ldr	r1, [pc, #28]	; (1054 <arch_new_thread+0x30>)
	pInitCtx->basic.a2 = (u32_t)parameter1;
    1036:	6053      	str	r3, [r2, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    1038:	9b01      	ldr	r3, [sp, #4]
	pInitCtx->basic.pc &= 0xfffffffe;
    103a:	f021 0101 	bic.w	r1, r1, #1
	pInitCtx->basic.a3 = (u32_t)parameter2;
    103e:	6093      	str	r3, [r2, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    1040:	9b02      	ldr	r3, [sp, #8]
	pInitCtx->basic.pc &= 0xfffffffe;
    1042:	6191      	str	r1, [r2, #24]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    1044:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	pInitCtx->basic.xpsr =
    1046:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    104a:	61d3      	str	r3, [r2, #28]
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (u32_t)pInitCtx;

	thread->arch.basepri = 0;
    104c:	2300      	movs	r3, #0
	thread->callee_saved.psp = (u32_t)pInitCtx;
    104e:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1050:	66c3      	str	r3, [r0, #108]	; 0x6c

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1052:	4770      	bx	lr
    1054:	00003c85 	.word	0x00003c85

00001058 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
    1058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    105a:	461d      	mov	r5, r3
    105c:	4606      	mov	r6, r0
    105e:	460c      	mov	r4, r1
    1060:	4617      	mov	r7, r2
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    1062:	2300      	movs	r3, #0
    1064:	eee1 3a10 	vmsr	fpscr, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    1068:	f000 f9f4 	bl	1454 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);

	_current = main_thread;
    106c:	4b08      	ldr	r3, [pc, #32]	; (1090 <arch_switch_to_main_thread+0x38>)
	start_of_main_stack =
    106e:	443c      	add	r4, r7
	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);
    1070:	f024 0407 	bic.w	r4, r4, #7
	_current = main_thread;
    1074:	609e      	str	r6, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1076:	4628      	mov	r0, r5
    1078:	f384 8809 	msr	PSP, r4
    107c:	2100      	movs	r1, #0
    107e:	b663      	cpsie	if
    1080:	f381 8811 	msr	BASEPRI, r1
    1084:	f3bf 8f6f 	isb	sy
    1088:	2200      	movs	r2, #0
    108a:	2300      	movs	r3, #0
    108c:	f002 fdfa 	bl	3c84 <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1090:	20000788 	.word	0x20000788

00001094 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1094:	4901      	ldr	r1, [pc, #4]	; (109c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1096:	2210      	movs	r2, #16
	str	r2, [r1]
    1098:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    109a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    109c:	e000ed10 	.word	0xe000ed10

000010a0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    10a0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    10a2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    10a4:	f380 8811 	msr	BASEPRI, r0
	isb
    10a8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    10ac:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    10b0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    10b2:	b662      	cpsie	i
	isb
    10b4:	f3bf 8f6f 	isb	sy

	bx	lr
    10b8:	4770      	bx	lr
    10ba:	bf00      	nop

000010bc <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    10bc:	bf30      	wfi
    b z_SysNmiOnReset
    10be:	f7ff bffd 	b.w	10bc <z_SysNmiOnReset>
    10c2:	bf00      	nop

000010c4 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    10c4:	4a17      	ldr	r2, [pc, #92]	; (1124 <z_arm_prep_c+0x60>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    10c6:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    10c8:	4b17      	ldr	r3, [pc, #92]	; (1128 <z_arm_prep_c+0x64>)
    10ca:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    10ce:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    10d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    10d4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    10d8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    10dc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    10e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    10e4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    10e8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    10ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR &= (~(FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk));
    10f0:	4a0e      	ldr	r2, [pc, #56]	; (112c <z_arm_prep_c+0x68>)
    10f2:	6853      	ldr	r3, [r2, #4]
    10f4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    10f8:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    10fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    10fe:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    1102:	2300      	movs	r3, #0
    1104:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    1108:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    110c:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    1110:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1114:	f000 fe24 	bl	1d60 <z_bss_zero>
	z_data_copy();
    1118:	f000 fe2c 	bl	1d74 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    111c:	f000 f968 	bl	13f0 <z_arm_interrupt_init>
	z_cstart();
    1120:	f000 fe66 	bl	1df0 <z_cstart>
    1124:	00000000 	.word	0x00000000
    1128:	e000ed00 	.word	0xe000ed00
    112c:	e000ef30 	.word	0xe000ef30

00001130 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1130:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    1132:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1134:	4a0b      	ldr	r2, [pc, #44]	; (1164 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1136:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    1138:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    113a:	bf1e      	ittt	ne
	movne	r1, #0
    113c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    113e:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    1140:	f003 f8d3 	blne	42ea <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1144:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1146:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    114a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    114e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1152:	4905      	ldr	r1, [pc, #20]	; (1168 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1154:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1156:	c909      	ldmia	r1!, {r0, r3}
#ifdef CONFIG_EXECUTION_BENCHMARKING
	push {r0, r3}	/* Save r0 and r3 into stack */
	bl read_timer_end_of_isr
	pop {r0, r3}	/* Restore r0 and r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    1158:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    115a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    115e:	4903      	ldr	r1, [pc, #12]	; (116c <_isr_wrapper+0x3c>)
	bx r1
    1160:	4708      	bx	r1
    1162:	0000      	.short	0x0000
	ldr r2, =_kernel
    1164:	20000788 	.word	0x20000788
	ldr r1, =_sw_isr_table
    1168:	000045d0 	.word	0x000045d0
	ldr r1, =z_arm_int_exit
    116c:	000013b1 	.word	0x000013b1

00001170 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    1170:	f002 fe3e 	bl	3df0 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1174:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1176:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    117a:	4808      	ldr	r0, [pc, #32]	; (119c <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    117c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1180:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1182:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1186:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    118a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    118c:	4308      	orrs	r0, r1
    msr CONTROL, r0
    118e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1192:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1196:	f7ff ff95 	bl	10c4 <z_arm_prep_c>
    119a:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    119c:	20000d28 	.word	0x20000d28

000011a0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    11a0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    11a4:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
    11a8:	4672      	mov	r2, lr

	push {r0, lr}
    11aa:	b501      	push	{r0, lr}

	bl z_arm_fault
    11ac:	f000 f86c 	bl	1288 <z_arm_fault>

	pop {r0, pc}
    11b0:	bd01      	pop	{r0, pc}
    11b2:	bf00      	nop

000011b4 <mem_manage_fault.isra.2>:
	u32_t reason = K_ERR_CPU_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    11b4:	4b0c      	ldr	r3, [pc, #48]	; (11e8 <mem_manage_fault.isra.2+0x34>)
    11b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    11b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    11ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    11bc:	0792      	lsls	r2, r2, #30
    11be:	d508      	bpl.n	11d2 <mem_manage_fault.isra.2+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
    11c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    11c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    11c4:	0612      	lsls	r2, r2, #24
    11c6:	d504      	bpl.n	11d2 <mem_manage_fault.isra.2+0x1e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
    11c8:	b118      	cbz	r0, 11d2 <mem_manage_fault.isra.2+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    11ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    11cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    11d0:	629a      	str	r2, [r3, #40]	; 0x28

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    11d2:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    11d4:	4b04      	ldr	r3, [pc, #16]	; (11e8 <mem_manage_fault.isra.2+0x34>)
    11d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    11d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    11da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    11dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    11de:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    11e2:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    11e4:	7008      	strb	r0, [r1, #0]

	return reason;
}
    11e6:	4770      	bx	lr
    11e8:	e000ed00 	.word	0xe000ed00

000011ec <bus_fault.isra.3>:
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    11ec:	4b0d      	ldr	r3, [pc, #52]	; (1224 <bus_fault.isra.3+0x38>)
    11ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    11f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    11f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    11f4:	0592      	lsls	r2, r2, #22
    11f6:	d508      	bpl.n	120a <bus_fault.isra.3+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    11f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    11fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    11fc:	0412      	lsls	r2, r2, #16
    11fe:	d504      	bpl.n	120a <bus_fault.isra.3+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
    1200:	b118      	cbz	r0, 120a <bus_fault.isra.3+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1202:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1204:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1208:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
    120a:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    120c:	4b05      	ldr	r3, [pc, #20]	; (1224 <bus_fault.isra.3+0x38>)
    120e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1210:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1212:	05d2      	lsls	r2, r2, #23
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1214:	bf58      	it	pl
    1216:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1218:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    121a:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    121e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    1220:	7008      	strb	r0, [r1, #0]

	return reason;
}
    1222:	4770      	bx	lr
    1224:	e000ed00 	.word	0xe000ed00

00001228 <usage_fault.isra.4>:
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1228:	4b07      	ldr	r3, [pc, #28]	; (1248 <usage_fault.isra.4+0x20>)

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;

	return reason;
}
    122a:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    122c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    122e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    1230:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1232:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1234:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1236:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1238:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    123a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    123c:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1240:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1244:	629a      	str	r2, [r3, #40]	; 0x28
}
    1246:	4770      	bx	lr
    1248:	e000ed00 	.word	0xe000ed00

0000124c <secure_fault.isra.5>:
 */
static void secure_fault(const z_arch_esf_t *esf)
{
	PR_FAULT_INFO("***** SECURE FAULT *****");

	STORE_xFAR(sfar, SAU->SFAR);
    124c:	4b0d      	ldr	r3, [pc, #52]	; (1284 <secure_fault.isra.5+0x38>)
    124e:	699a      	ldr	r2, [r3, #24]
	if ((SAU->SFSR & SAU_SFSR_SFARVALID_Msk) != 0) {
    1250:	695a      	ldr	r2, [r3, #20]
		PR_EXC("  Address: 0x%x", sfar);
	}

	/* bits are sticky: they stack and must be reset */
	if ((SAU->SFSR & SAU_SFSR_INVEP_Msk) != 0) {
    1252:	695a      	ldr	r2, [r3, #20]
    1254:	07d0      	lsls	r0, r2, #31
    1256:	d40f      	bmi.n	1278 <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Invalid entry point");
	} else if ((SAU->SFSR & SAU_SFSR_INVIS_Msk) != 0) {
    1258:	695a      	ldr	r2, [r3, #20]
    125a:	0791      	lsls	r1, r2, #30
    125c:	d40c      	bmi.n	1278 <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Invalid integrity signature");
	} else if ((SAU->SFSR & SAU_SFSR_INVER_Msk) != 0) {
    125e:	695a      	ldr	r2, [r3, #20]
    1260:	0752      	lsls	r2, r2, #29
    1262:	d409      	bmi.n	1278 <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Invalid exception return");
	} else if ((SAU->SFSR & SAU_SFSR_AUVIOL_Msk) != 0) {
    1264:	695a      	ldr	r2, [r3, #20]
    1266:	0710      	lsls	r0, r2, #28
    1268:	d406      	bmi.n	1278 <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Attribution unit violation");
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
    126a:	695a      	ldr	r2, [r3, #20]
    126c:	06d1      	lsls	r1, r2, #27
    126e:	d403      	bmi.n	1278 <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Invalid transition");
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
    1270:	695a      	ldr	r2, [r3, #20]
    1272:	0692      	lsls	r2, r2, #26
		PR_FAULT_INFO("  Lazy state preservation");
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
    1274:	bf58      	it	pl
    1276:	695a      	ldrpl	r2, [r3, #20]
		PR_FAULT_INFO("  Lazy state error");
	}

	/* clear SFSR sticky bits */
	SAU->SFSR |= 0xFF;
    1278:	695a      	ldr	r2, [r3, #20]
    127a:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    127e:	615a      	str	r2, [r3, #20]
}
    1280:	4770      	bx	lr
    1282:	bf00      	nop
    1284:	e000edd0 	.word	0xe000edd0

00001288 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
    1288:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    128a:	4b41      	ldr	r3, [pc, #260]	; (1390 <z_arm_fault+0x108>)
{
    128c:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    128e:	685b      	ldr	r3, [r3, #4]
    1290:	2500      	movs	r5, #0
    1292:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1296:	f385 8811 	msr	BASEPRI, r5
    129a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    129e:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
    12a2:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
    12a6:	d11e      	bne.n	12e6 <z_arm_fault+0x5e>
	if ((exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) == 0U) {
    12a8:	f012 0401 	ands.w	r4, r2, #1
    12ac:	d01a      	beq.n	12e4 <z_arm_fault+0x5c>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    12ae:	0656      	lsls	r6, r2, #25
    12b0:	f002 0408 	and.w	r4, r2, #8
    12b4:	d467      	bmi.n	1386 <z_arm_fault+0xfe>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    12b6:	f082 0204 	eor.w	r2, r2, #4
    12ba:	f3c2 0580 	ubfx	r5, r2, #2, #1
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    12be:	b164      	cbz	r4, 12da <z_arm_fault+0x52>
  __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
    12c0:	f3ef 8689 	mrs	r6, PSP_NS
	*recoverable = false;
    12c4:	2200      	movs	r2, #0
	switch (fault) {
    12c6:	3b03      	subs	r3, #3
	*recoverable = false;
    12c8:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    12cc:	2b04      	cmp	r3, #4
    12ce:	d84b      	bhi.n	1368 <z_arm_fault+0xe0>
    12d0:	e8df f003 	tbb	[pc, r3]
    12d4:	41504c0b 	.word	0x41504c0b
    12d8:	48          	.byte	0x48
    12d9:	00          	.byte	0x00
  __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
    12da:	f3ef 8688 	mrs	r6, MSP_NS
  return(result);
    12de:	e7f1      	b.n	12c4 <z_arm_fault+0x3c>
			ptr_esf =  (z_arch_esf_t *)psp;
    12e0:	460e      	mov	r6, r1
    12e2:	e7ef      	b.n	12c4 <z_arm_fault+0x3c>
	*nested_exc = false;
    12e4:	4625      	mov	r5, r4
		return NULL;
    12e6:	462e      	mov	r6, r5
    12e8:	e7ec      	b.n	12c4 <z_arm_fault+0x3c>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    12ea:	4b29      	ldr	r3, [pc, #164]	; (1390 <z_arm_fault+0x108>)
    12ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    12ee:	0792      	lsls	r2, r2, #30
    12f0:	d43a      	bmi.n	1368 <z_arm_fault+0xe0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    12f2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    12f4:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    12f8:	d008      	beq.n	130c <z_arm_fault+0x84>
		if (SCB_MMFSR != 0) {
    12fa:	3328      	adds	r3, #40	; 0x28
    12fc:	781b      	ldrb	r3, [r3, #0]
    12fe:	b1eb      	cbz	r3, 133c <z_arm_fault+0xb4>
			reason = mem_manage_fault(esf, 1, recoverable);
    1300:	2001      	movs	r0, #1
    1302:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    1306:	f7ff ff55 	bl	11b4 <mem_manage_fault.isra.2>
    130a:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    130c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1310:	b993      	cbnz	r3, 1338 <z_arm_fault+0xb0>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1312:	2220      	movs	r2, #32
    1314:	4631      	mov	r1, r6
    1316:	a802      	add	r0, sp, #8
    1318:	f002 ff0f 	bl	413a <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    131c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    131e:	b36d      	cbz	r5, 137c <z_arm_fault+0xf4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1320:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1324:	b922      	cbnz	r2, 1330 <z_arm_fault+0xa8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1326:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    132a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    132e:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    1330:	a902      	add	r1, sp, #8
    1332:	4620      	mov	r0, r4
    1334:	f002 fe96 	bl	4064 <z_arm_fatal_error>
}
    1338:	b00b      	add	sp, #44	; 0x2c
    133a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (SCB_BFSR != 0) {
    133c:	4b15      	ldr	r3, [pc, #84]	; (1394 <z_arm_fault+0x10c>)
    133e:	781b      	ldrb	r3, [r3, #0]
    1340:	b12b      	cbz	r3, 134e <z_arm_fault+0xc6>
			reason = bus_fault(esf, 1, recoverable);
    1342:	2001      	movs	r0, #1
    1344:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    1348:	f7ff ff50 	bl	11ec <bus_fault.isra.3>
    134c:	e7dd      	b.n	130a <z_arm_fault+0x82>
		} else if (SCB_UFSR != 0) {
    134e:	4b12      	ldr	r3, [pc, #72]	; (1398 <z_arm_fault+0x110>)
    1350:	881f      	ldrh	r7, [r3, #0]
    1352:	b2bf      	uxth	r7, r7
    1354:	b117      	cbz	r7, 135c <z_arm_fault+0xd4>
		reason = usage_fault(esf);
    1356:	f7ff ff67 	bl	1228 <usage_fault.isra.4>
    135a:	e7d6      	b.n	130a <z_arm_fault+0x82>
		} else if (SAU->SFSR != 0) {
    135c:	4b0f      	ldr	r3, [pc, #60]	; (139c <z_arm_fault+0x114>)
    135e:	695c      	ldr	r4, [r3, #20]
    1360:	2c00      	cmp	r4, #0
    1362:	d0d3      	beq.n	130c <z_arm_fault+0x84>
		secure_fault(esf);
    1364:	f7ff ff72 	bl	124c <secure_fault.isra.5>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    1368:	2400      	movs	r4, #0
    136a:	e7cf      	b.n	130c <z_arm_fault+0x84>
		reason = mem_manage_fault(esf, 0, recoverable);
    136c:	f10d 0107 	add.w	r1, sp, #7
    1370:	2000      	movs	r0, #0
    1372:	e7c8      	b.n	1306 <z_arm_fault+0x7e>
		reason = bus_fault(esf, 0, recoverable);
    1374:	f10d 0107 	add.w	r1, sp, #7
    1378:	2000      	movs	r0, #0
    137a:	e7e5      	b.n	1348 <z_arm_fault+0xc0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    137c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1380:	f023 0301 	bic.w	r3, r3, #1
    1384:	e7d3      	b.n	132e <z_arm_fault+0xa6>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1386:	2c00      	cmp	r4, #0
    1388:	d1aa      	bne.n	12e0 <z_arm_fault+0x58>
			ptr_esf = (z_arch_esf_t *)msp;
    138a:	4606      	mov	r6, r0
			*nested_exc = true;
    138c:	2501      	movs	r5, #1
    138e:	e799      	b.n	12c4 <z_arm_fault+0x3c>
    1390:	e000ed00 	.word	0xe000ed00
    1394:	e000ed29 	.word	0xe000ed29
    1398:	e000ed2a 	.word	0xe000ed2a
    139c:	e000edd0 	.word	0xe000edd0

000013a0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    13a0:	4a02      	ldr	r2, [pc, #8]	; (13ac <z_arm_fault_init+0xc>)
    13a2:	6953      	ldr	r3, [r2, #20]
    13a4:	f043 0310 	orr.w	r3, r3, #16
    13a8:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    13aa:	4770      	bx	lr
    13ac:	e000ed00 	.word	0xe000ed00

000013b0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    13b0:	4b04      	ldr	r3, [pc, #16]	; (13c4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    13b2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    13b4:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    13b6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    13b8:	d003      	beq.n	13c2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    13ba:	4903      	ldr	r1, [pc, #12]	; (13c8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    13bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    13c0:	600a      	str	r2, [r1, #0]

000013c2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    13c2:	4770      	bx	lr
	ldr r3, =_kernel
    13c4:	20000788 	.word	0x20000788
	ldr r1, =_SCS_ICSR
    13c8:	e000ed04 	.word	0xe000ed04

000013cc <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    13cc:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    13d0:	4905      	ldr	r1, [pc, #20]	; (13e8 <sys_arch_reboot+0x1c>)
    13d2:	4b06      	ldr	r3, [pc, #24]	; (13ec <sys_arch_reboot+0x20>)
    13d4:	68ca      	ldr	r2, [r1, #12]
    13d6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    13da:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    13dc:	60cb      	str	r3, [r1, #12]
    13de:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    13e2:	bf00      	nop
    13e4:	e7fd      	b.n	13e2 <sys_arch_reboot+0x16>
    13e6:	bf00      	nop
    13e8:	e000ed00 	.word	0xe000ed00
    13ec:	05fa0004 	.word	0x05fa0004

000013f0 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    13f0:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    13f2:	2120      	movs	r1, #32
    13f4:	4803      	ldr	r0, [pc, #12]	; (1404 <z_arm_interrupt_init+0x14>)
    13f6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    13f8:	3301      	adds	r3, #1
    13fa:	2b41      	cmp	r3, #65	; 0x41
    13fc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1400:	d1f9      	bne.n	13f6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1402:	4770      	bx	lr
    1404:	e000e100 	.word	0xe000e100

00001408 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    1408:	b538      	push	{r3, r4, r5, lr}
    140a:	4605      	mov	r5, r0
	__asm__ volatile(
    140c:	f04f 0320 	mov.w	r3, #32
    1410:	f3ef 8411 	mrs	r4, BASEPRI
    1414:	f383 8811 	msr	BASEPRI, r3
    1418:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    141c:	f001 f852 	bl	24c4 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    1420:	4b0a      	ldr	r3, [pc, #40]	; (144c <z_impl_k_thread_abort+0x44>)
    1422:	689b      	ldr	r3, [r3, #8]
    1424:	42ab      	cmp	r3, r5
    1426:	d10b      	bne.n	1440 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    1428:	4b09      	ldr	r3, [pc, #36]	; (1450 <z_impl_k_thread_abort+0x48>)
    142a:	685a      	ldr	r2, [r3, #4]
    142c:	f3c2 0208 	ubfx	r2, r2, #0, #9
    1430:	b912      	cbnz	r2, 1438 <z_impl_k_thread_abort+0x30>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
    1432:	4620      	mov	r0, r4
    1434:	f7ff fd80 	bl	f38 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1438:	685a      	ldr	r2, [r3, #4]
    143a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    143e:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    1440:	4620      	mov	r0, r4
}
    1442:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    1446:	f002 bf7f 	b.w	4348 <z_reschedule_irqlock>
    144a:	bf00      	nop
    144c:	20000788 	.word	0x20000788
    1450:	e000ed00 	.word	0xe000ed00

00001454 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    1454:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    1456:	4b0e      	ldr	r3, [pc, #56]	; (1490 <z_arm_configure_static_mpu_regions+0x3c>)
{
    1458:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
    145a:	9302      	str	r3, [sp, #8]
    145c:	4b0d      	ldr	r3, [pc, #52]	; (1494 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    145e:	4c0e      	ldr	r4, [pc, #56]	; (1498 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
    1460:	9303      	str	r3, [sp, #12]
    1462:	4b0e      	ldr	r3, [pc, #56]	; (149c <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1464:	4a0e      	ldr	r2, [pc, #56]	; (14a0 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
    1466:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
    1468:	ab02      	add	r3, sp, #8
    146a:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    146c:	a801      	add	r0, sp, #4
    146e:	4623      	mov	r3, r4
    1470:	2101      	movs	r1, #1
    1472:	f000 f903 	bl	167c <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
    1476:	2300      	movs	r3, #0
    1478:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    147a:	4b0a      	ldr	r3, [pc, #40]	; (14a4 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    147c:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    147e:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    1480:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
    1482:	9305      	str	r3, [sp, #20]
    1484:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    1486:	f000 f903 	bl	1690 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    148a:	b008      	add	sp, #32
    148c:	bd10      	pop	{r4, pc}
    148e:	bf00      	nop
    1490:	20000000 	.word	0x20000000
    1494:	00000000 	.word	0x00000000
    1498:	20010000 	.word	0x20010000
    149c:	00010006 	.word	0x00010006
    14a0:	20000000 	.word	0x20000000
    14a4:	20000148 	.word	0x20000148

000014a8 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
    14a8:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    14aa:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    14ac:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    14ae:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    14b2:	f004 031f 	and.w	r3, r4, #31
    14b6:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    14b8:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    14ba:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    14bc:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    14c0:	4904      	ldr	r1, [pc, #16]	; (14d4 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    14c2:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    14c6:	f043 0301 	orr.w	r3, r3, #1
    14ca:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    14cc:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    14ce:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    14d0:	bd10      	pop	{r4, pc}
    14d2:	bf00      	nop
    14d4:	e000ed90 	.word	0xe000ed90

000014d8 <mpu_configure_regions_and_partition.constprop.1>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    14d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    14dc:	4680      	mov	r8, r0
    14de:	4689      	mov	r9, r1
    14e0:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    14e2:	2700      	movs	r7, #0
	MPU->RNR = index;
    14e4:	4d48      	ldr	r5, [pc, #288]	; (1608 <mpu_configure_regions_and_partition.constprop.1+0x130>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    14e6:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    14e8:	454f      	cmp	r7, r9
    14ea:	da07      	bge.n	14fc <mpu_configure_regions_and_partition.constprop.1+0x24>
		if (regions[i]->size == 0U) {
    14ec:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
    14f0:	685e      	ldr	r6, [r3, #4]
    14f2:	b3c6      	cbz	r6, 1566 <mpu_configure_regions_and_partition.constprop.1+0x8e>
		&&
    14f4:	2e1f      	cmp	r6, #31
    14f6:	d805      	bhi.n	1504 <mpu_configure_regions_and_partition.constprop.1+0x2c>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    14f8:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    14fc:	4620      	mov	r0, r4
    14fe:	b005      	add	sp, #20
    1500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		&&
    1504:	06f2      	lsls	r2, r6, #27
    1506:	d1f7      	bne.n	14f8 <mpu_configure_regions_and_partition.constprop.1+0x20>
		((part->start &
    1508:	f8d3 a000 	ldr.w	sl, [r3]
		&&
    150c:	f01a 0f1f 	tst.w	sl, #31
    1510:	d1f2      	bne.n	14f8 <mpu_configure_regions_and_partition.constprop.1+0x20>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1512:	4650      	mov	r0, sl
    1514:	f002 fdd5 	bl	40c2 <arm_cmse_mpu_region_get>
    1518:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    151a:	eb06 000a 	add.w	r0, r6, sl
    151e:	3801      	subs	r0, #1
    1520:	f002 fdcf 	bl	40c2 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    1524:	4583      	cmp	fp, r0
    1526:	d1e7      	bne.n	14f8 <mpu_configure_regions_and_partition.constprop.1+0x20>
		if ((u_reg_index == -EINVAL) ||
    1528:	f11b 0f16 	cmn.w	fp, #22
    152c:	d0e4      	beq.n	14f8 <mpu_configure_regions_and_partition.constprop.1+0x20>
			(u_reg_index > (reg_index - 1))) {
    152e:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    1530:	455b      	cmp	r3, fp
    1532:	dbe1      	blt.n	14f8 <mpu_configure_regions_and_partition.constprop.1+0x20>
	MPU->RNR = index;
    1534:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    1538:	68e8      	ldr	r0, [r5, #12]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    153a:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
	MPU->RNR = index;
    153e:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    1542:	692e      	ldr	r6, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    1544:	f020 001f 	bic.w	r0, r0, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    1548:	e9d1 3200 	ldrd	r3, r2, [r1]
    154c:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
    154e:	4298      	cmp	r0, r3
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    1550:	f046 061f 	orr.w	r6, r6, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    1554:	f102 3aff 	add.w	sl, r2, #4294967295	; 0xffffffff
		if ((regions[i]->start == u_reg_base) &&
    1558:	d118      	bne.n	158c <mpu_configure_regions_and_partition.constprop.1+0xb4>
    155a:	4556      	cmp	r6, sl
    155c:	d105      	bne.n	156a <mpu_configure_regions_and_partition.constprop.1+0x92>
			mpu_configure_region(u_reg_index, regions[i]);
    155e:	fa5f f08b 	uxtb.w	r0, fp
    1562:	f002 fd8c 	bl	407e <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    1566:	3701      	adds	r7, #1
    1568:	e7be      	b.n	14e8 <mpu_configure_regions_and_partition.constprop.1+0x10>
	MPU->RNR = index;
    156a:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    156e:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    1570:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    1574:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    1578:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    157a:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
    157c:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
    157e:	f002 fd7e 	bl	407e <mpu_configure_region>
			if (reg_index == -EINVAL) {
    1582:	f110 0f16 	cmn.w	r0, #22
    1586:	d0b7      	beq.n	14f8 <mpu_configure_regions_and_partition.constprop.1+0x20>
			reg_index++;
    1588:	1c44      	adds	r4, r0, #1
    158a:	e7ec      	b.n	1566 <mpu_configure_regions_and_partition.constprop.1+0x8e>
	MPU->RNR = index;
    158c:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    1590:	692a      	ldr	r2, [r5, #16]
    1592:	3b01      	subs	r3, #1
    1594:	f023 031f 	bic.w	r3, r3, #31
    1598:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    159c:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    159e:	4556      	cmp	r6, sl
    15a0:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    15a2:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
    15a4:	d0eb      	beq.n	157e <mpu_configure_regions_and_partition.constprop.1+0xa6>
				mpu_configure_region(reg_index, regions[i]);
    15a6:	f002 fd6a 	bl	407e <mpu_configure_region>
			if (reg_index == -EINVAL) {
    15aa:	f110 0f16 	cmn.w	r0, #22
    15ae:	d0a3      	beq.n	14f8 <mpu_configure_regions_and_partition.constprop.1+0x20>
	MPU->RNR = index;
    15b0:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    15b4:	68ea      	ldr	r2, [r5, #12]
    15b6:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
    15ba:	3e01      	subs	r6, #1
	attr->rbar = MPU->RBAR &
    15bc:	f362 0304 	bfi	r3, r2, #0, #5
    15c0:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    15c4:	692b      	ldr	r3, [r5, #16]
    15c6:	f89d 2008 	ldrb.w	r2, [sp, #8]
    15ca:	085b      	lsrs	r3, r3, #1
    15cc:	f363 1247 	bfi	r2, r3, #5, #3
    15d0:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
    15d4:	f858 2027 	ldr.w	r2, [r8, r7, lsl #2]
			reg_index++;
    15d8:	3001      	adds	r0, #1
			fill_region.base = regions[i]->start +
    15da:	e9d2 3200 	ldrd	r3, r2, [r2]
    15de:	4413      	add	r3, r2
    15e0:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
    15e2:	f023 031f 	bic.w	r3, r3, #31
    15e6:	441e      	add	r6, r3
    15e8:	eba6 060a 	sub.w	r6, r6, sl
    15ec:	b2c4      	uxtb	r4, r0
    15ee:	f026 061f 	bic.w	r6, r6, #31

static int region_allocate_and_init(const u8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
    15f2:	2c0f      	cmp	r4, #15
			fill_region.attr.r_limit =
    15f4:	9603      	str	r6, [sp, #12]
    15f6:	f63f af7f 	bhi.w	14f8 <mpu_configure_regions_and_partition.constprop.1+0x20>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    15fa:	4620      	mov	r0, r4
    15fc:	4669      	mov	r1, sp
    15fe:	f7ff ff53 	bl	14a8 <region_init>
			reg_index++;
    1602:	3401      	adds	r4, #1
    1604:	e7af      	b.n	1566 <mpu_configure_regions_and_partition.constprop.1+0x8e>
    1606:	bf00      	nop
    1608:	e000ed90 	.word	0xe000ed90

0000160c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    160c:	2205      	movs	r2, #5
    160e:	4b03      	ldr	r3, [pc, #12]	; (161c <arm_core_mpu_enable+0x10>)
    1610:	605a      	str	r2, [r3, #4]
    1612:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1616:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    161a:	4770      	bx	lr
    161c:	e000ed90 	.word	0xe000ed90

00001620 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1620:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1624:	2200      	movs	r2, #0
    1626:	4b01      	ldr	r3, [pc, #4]	; (162c <arm_core_mpu_disable+0xc>)
    1628:	605a      	str	r2, [r3, #4]
}
    162a:	4770      	bx	lr
    162c:	e000ed90 	.word	0xe000ed90

00001630 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
    1630:	b570      	push	{r4, r5, r6, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1632:	4d0e      	ldr	r5, [pc, #56]	; (166c <arm_mpu_init+0x3c>)
    1634:	682e      	ldr	r6, [r5, #0]
    1636:	2e10      	cmp	r6, #16
    1638:	d815      	bhi.n	1666 <arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    163a:	2400      	movs	r4, #0
	arm_core_mpu_disable();
    163c:	f7ff fff0 	bl	1620 <arm_core_mpu_disable>
	MPU->MAIR0 =
    1640:	4b0b      	ldr	r3, [pc, #44]	; (1670 <arm_mpu_init+0x40>)
    1642:	4a0c      	ldr	r2, [pc, #48]	; (1674 <arm_mpu_init+0x44>)
    1644:	631a      	str	r2, [r3, #48]	; 0x30
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1646:	42a6      	cmp	r6, r4
    1648:	d105      	bne.n	1656 <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    164a:	4b0b      	ldr	r3, [pc, #44]	; (1678 <arm_mpu_init+0x48>)
    164c:	701e      	strb	r6, [r3, #0]


	arm_core_mpu_enable();
    164e:	f7ff ffdd 	bl	160c <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    1652:	2000      	movs	r0, #0
}
    1654:	bd70      	pop	{r4, r5, r6, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    1656:	6869      	ldr	r1, [r5, #4]
    1658:	4620      	mov	r0, r4
    165a:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    165e:	f7ff ff23 	bl	14a8 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1662:	3401      	adds	r4, #1
    1664:	e7ef      	b.n	1646 <arm_mpu_init+0x16>
		return -1;
    1666:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    166a:	e7f3      	b.n	1654 <arm_mpu_init+0x24>
    166c:	0000495c 	.word	0x0000495c
    1670:	e000ed90 	.word	0xe000ed90
    1674:	0044ffaa 	.word	0x0044ffaa
    1678:	200007e4 	.word	0x200007e4

0000167c <arm_core_mpu_configure_static_mpu_regions>:
{
    167c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    167e:	4c03      	ldr	r4, [pc, #12]	; (168c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    1680:	7822      	ldrb	r2, [r4, #0]
    1682:	f7ff ff29 	bl	14d8 <mpu_configure_regions_and_partition.constprop.1>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1686:	7020      	strb	r0, [r4, #0]
}
    1688:	bd10      	pop	{r4, pc}
    168a:	bf00      	nop
    168c:	200007e4 	.word	0x200007e4

00001690 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    1690:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1694:	4c25      	ldr	r4, [pc, #148]	; (172c <arm_core_mpu_mark_areas_for_dynamic_regions+0x9c>)
    1696:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1698:	4680      	mov	r8, r0
    169a:	2700      	movs	r7, #0
    169c:	46a1      	mov	r9, r4
	attr->rbar = MPU->RBAR &
    169e:	f04f 0b14 	mov.w	fp, #20
	MPU->RNR = index;
    16a2:	4d23      	ldr	r5, [pc, #140]	; (1730 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    16a4:	4557      	cmp	r7, sl
    16a6:	da1a      	bge.n	16de <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    16a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
    16ac:	9301      	str	r3, [sp, #4]
    16ae:	2b00      	cmp	r3, #0
    16b0:	d036      	beq.n	1720 <arm_core_mpu_mark_areas_for_dynamic_regions+0x90>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    16b2:	f8d8 1000 	ldr.w	r1, [r8]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    16b6:	4608      	mov	r0, r1
    16b8:	9100      	str	r1, [sp, #0]
    16ba:	f002 fd02 	bl	40c2 <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    16be:	e9dd 1300 	ldrd	r1, r3, [sp]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    16c2:	4606      	mov	r6, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    16c4:	1858      	adds	r0, r3, r1
    16c6:	3801      	subs	r0, #1
    16c8:	f002 fcfb 	bl	40c2 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    16cc:	4286      	cmp	r6, r0
    16ce:	4a19      	ldr	r2, [pc, #100]	; (1734 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
    16d0:	d008      	beq.n	16e4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    16d2:	2314      	movs	r3, #20
    16d4:	435f      	muls	r7, r3
    16d6:	f06f 0315 	mvn.w	r3, #21
    16da:	f849 3007 	str.w	r3, [r9, r7]
}
    16de:	b003      	add	sp, #12
    16e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    16e4:	f116 0f16 	cmn.w	r6, #22
		dyn_reg_info[i].index =
    16e8:	6026      	str	r6, [r4, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    16ea:	d0f8      	beq.n	16de <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    16ec:	7813      	ldrb	r3, [r2, #0]
    16ee:	42b3      	cmp	r3, r6
    16f0:	ddf5      	ble.n	16de <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
    16f2:	fb0b 9307 	mla	r3, fp, r7, r9
	MPU->RNR = index;
    16f6:	60ae      	str	r6, [r5, #8]
	MPU->RNR = index;
    16f8:	60ae      	str	r6, [r5, #8]
	attr->rbar = MPU->RBAR &
    16fa:	68e8      	ldr	r0, [r5, #12]
    16fc:	7b19      	ldrb	r1, [r3, #12]
    16fe:	f360 0104 	bfi	r1, r0, #0, #5
    1702:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    1704:	6929      	ldr	r1, [r5, #16]
    1706:	7b18      	ldrb	r0, [r3, #12]
    1708:	0849      	lsrs	r1, r1, #1
    170a:	f361 1047 	bfi	r0, r1, #5, #3
    170e:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    1710:	68eb      	ldr	r3, [r5, #12]
    1712:	f023 031f 	bic.w	r3, r3, #31
    1716:	6063      	str	r3, [r4, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    1718:	692b      	ldr	r3, [r5, #16]
    171a:	f023 031f 	bic.w	r3, r3, #31
    171e:	6123      	str	r3, [r4, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1720:	3701      	adds	r7, #1
    1722:	3414      	adds	r4, #20
    1724:	f108 080c 	add.w	r8, r8, #12
    1728:	e7bc      	b.n	16a4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
    172a:	bf00      	nop
    172c:	2000068c 	.word	0x2000068c
    1730:	e000ed90 	.word	0xe000ed90
    1734:	200007e4 	.word	0x200007e4

00001738 <tz_nonsecure_state_setup>:
}
#endif /* CONFIG_ARMV8_M_MAINLINE */

void tz_nonsecure_state_setup(const tz_nonsecure_setup_conf_t *p_ns_conf)
{
	configure_nonsecure_vtor_offset(p_ns_conf->vtor_ns);
    1738:	6882      	ldr	r2, [r0, #8]
	SCB_NS->VTOR = vtor_ns;
    173a:	4b0c      	ldr	r3, [pc, #48]	; (176c <tz_nonsecure_state_setup+0x34>)
    173c:	609a      	str	r2, [r3, #8]
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
    173e:	6803      	ldr	r3, [r0, #0]
    1740:	f383 8888 	msr	MSP_NS, r3
  __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
    1744:	6843      	ldr	r3, [r0, #4]
    1746:	f383 8889 	msr	PSP_NS, r3
	configure_nonsecure_psp(p_ns_conf->psp_ns);
	/* Select which stack-pointer to use (MSP or PSP) and
	 * the privilege level for thread mode.
	 */
	configure_nonsecure_control(p_ns_conf->control_ns.spsel,
		p_ns_conf->control_ns.npriv);
    174a:	7b02      	ldrb	r2, [r0, #12]
    174c:	f002 0101 	and.w	r1, r2, #1
  __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
    1750:	f3ef 8394 	mrs	r3, CONTROL_NS
	control_ns &= ~(CONTROL_SPSEL_Msk | CONTROL_nPRIV_Msk);
    1754:	f023 0303 	bic.w	r3, r3, #3
	if (spsel_ns) {
    1758:	0792      	lsls	r2, r2, #30
		control_ns |= CONTROL_SPSEL_Msk;
    175a:	bf48      	it	mi
    175c:	f043 0302 	orrmi.w	r3, r3, #2
	if (npriv_ns) {
    1760:	b109      	cbz	r1, 1766 <tz_nonsecure_state_setup+0x2e>
		control_ns |= CONTROL_nPRIV_Msk;
    1762:	f043 0301 	orr.w	r3, r3, #1
  __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
    1766:	f383 8894 	msr	CONTROL_NS, r3
}
    176a:	4770      	bx	lr
    176c:	e002ed00 	.word	0xe002ed00

00001770 <tz_nbanked_exception_target_state_set>:

void tz_nbanked_exception_target_state_set(int secure_state)
{
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1770:	4a08      	ldr	r2, [pc, #32]	; (1794 <tz_nbanked_exception_target_state_set+0x24>)
    1772:	68d3      	ldr	r3, [r2, #12]
	if (secure_state) {
    1774:	b148      	cbz	r0, 178a <tz_nbanked_exception_target_state_set+0x1a>
		aircr_payload &= ~(SCB_AIRCR_BFHFNMINS_Msk);
    1776:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    177a:	041b      	lsls	r3, r3, #16
    177c:	0c1b      	lsrs	r3, r3, #16
	} else {
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    177e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    1782:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
    1786:	60d3      	str	r3, [r2, #12]
}
    1788:	4770      	bx	lr
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    178a:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
    178c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1790:	e7f5      	b.n	177e <tz_nbanked_exception_target_state_set+0xe>
    1792:	bf00      	nop
    1794:	e000ed00 	.word	0xe000ed00

00001798 <tz_nonsecure_exception_prio_config>:

void tz_nonsecure_exception_prio_config(int secure_boost)
{
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1798:	4a08      	ldr	r2, [pc, #32]	; (17bc <tz_nonsecure_exception_prio_config+0x24>)
    179a:	68d3      	ldr	r3, [r2, #12]
	if (secure_boost) {
    179c:	b140      	cbz	r0, 17b0 <tz_nonsecure_exception_prio_config+0x18>
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    179e:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_PRIS_Msk;
    17a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	} else {
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    17a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    17a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
    17ac:	60d3      	str	r3, [r2, #12]
}
    17ae:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
    17b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    17b4:	041b      	lsls	r3, r3, #16
    17b6:	0c1b      	lsrs	r3, r3, #16
    17b8:	e7f4      	b.n	17a4 <tz_nonsecure_exception_prio_config+0xc>
    17ba:	bf00      	nop
    17bc:	e000ed00 	.word	0xe000ed00

000017c0 <tz_nonsecure_system_reset_req_block>:

void tz_nonsecure_system_reset_req_block(int block)
{
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    17c0:	4a08      	ldr	r2, [pc, #32]	; (17e4 <tz_nonsecure_system_reset_req_block+0x24>)
    17c2:	68d3      	ldr	r3, [r2, #12]
	if (block) {
    17c4:	b140      	cbz	r0, 17d8 <tz_nonsecure_system_reset_req_block+0x18>
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    17c6:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_SYSRESETREQS_Msk;
    17c8:	f043 0308 	orr.w	r3, r3, #8
	} else {
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
	}
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    17cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    17d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
    17d4:	60d3      	str	r3, [r2, #12]
}
    17d6:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
    17d8:	f023 0308 	bic.w	r3, r3, #8
    17dc:	041b      	lsls	r3, r3, #16
    17de:	0c1b      	lsrs	r3, r3, #16
    17e0:	e7f4      	b.n	17cc <tz_nonsecure_system_reset_req_block+0xc>
    17e2:	bf00      	nop
    17e4:	e000ed00 	.word	0xe000ed00

000017e8 <tz_nonsecure_fpu_access_enable>:

#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
void tz_nonsecure_fpu_access_enable(void)
{
	SCB->NSACR |=
    17e8:	4a03      	ldr	r2, [pc, #12]	; (17f8 <tz_nonsecure_fpu_access_enable+0x10>)
    17ea:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    17ee:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    17f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		(1UL << SCB_NSACR_CP10_Pos) | (1UL << SCB_NSACR_CP11_Pos);
}
    17f6:	4770      	bx	lr
    17f8:	e000ed00 	.word	0xe000ed00

000017fc <tz_sau_configure>:
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

void tz_sau_configure(int enable, int allns)
{
	if (enable) {
    17fc:	4b08      	ldr	r3, [pc, #32]	; (1820 <tz_sau_configure+0x24>)
  \brief   Enable SAU
  \details Enables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Enable(void)
{
    SAU->CTRL |=  (SAU_CTRL_ENABLE_Msk);
    17fe:	681a      	ldr	r2, [r3, #0]
    1800:	b118      	cbz	r0, 180a <tz_sau_configure+0xe>
    1802:	f042 0201 	orr.w	r2, r2, #1
	} else {
		TZ_SAU_Disable();
		if (allns) {
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
		} else {
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
    1806:	601a      	str	r2, [r3, #0]
		}
	}
}
    1808:	4770      	bx	lr
  \brief   Disable SAU
  \details Disables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Disable(void)
{
    SAU->CTRL &= ~(SAU_CTRL_ENABLE_Msk);
    180a:	f022 0201 	bic.w	r2, r2, #1
    180e:	601a      	str	r2, [r3, #0]
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
    1810:	681a      	ldr	r2, [r3, #0]
		if (allns) {
    1812:	b111      	cbz	r1, 181a <tz_sau_configure+0x1e>
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
    1814:	f042 0202 	orr.w	r2, r2, #2
    1818:	e7f5      	b.n	1806 <tz_sau_configure+0xa>
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
    181a:	f022 0202 	bic.w	r2, r2, #2
    181e:	e7f2      	b.n	1806 <tz_sau_configure+0xa>
    1820:	e000edd0 	.word	0xe000edd0

00001824 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    1824:	4b01      	ldr	r3, [pc, #4]	; (182c <__stdout_hook_install+0x8>)
    1826:	6018      	str	r0, [r3, #0]
}
    1828:	4770      	bx	lr
    182a:	bf00      	nop
    182c:	20000024 	.word	0x20000024

00001830 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
    1830:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    1832:	794b      	ldrb	r3, [r1, #5]
    1834:	2b01      	cmp	r3, #1
    1836:	d027      	beq.n	1888 <uarte_nrfx_configure+0x58>
    1838:	2b03      	cmp	r3, #3
    183a:	d122      	bne.n	1882 <uarte_nrfx_configure+0x52>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    183c:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    183e:	798b      	ldrb	r3, [r1, #6]
    1840:	2b03      	cmp	r3, #3
    1842:	d11e      	bne.n	1882 <uarte_nrfx_configure+0x52>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    1844:	79cc      	ldrb	r4, [r1, #7]
    1846:	b124      	cbz	r4, 1852 <uarte_nrfx_configure+0x22>
    1848:	2c01      	cmp	r4, #1
    184a:	d11a      	bne.n	1882 <uarte_nrfx_configure+0x52>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    184c:	6843      	ldr	r3, [r0, #4]
    184e:	791b      	ldrb	r3, [r3, #4]
    1850:	b1bb      	cbz	r3, 1882 <uarte_nrfx_configure+0x52>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    1852:	790a      	ldrb	r2, [r1, #4]
    1854:	b112      	cbz	r2, 185c <uarte_nrfx_configure+0x2c>
    1856:	2a02      	cmp	r2, #2
    1858:	d113      	bne.n	1882 <uarte_nrfx_configure+0x52>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    185a:	220e      	movs	r2, #14
	switch (baudrate) {
    185c:	f647 2712 	movw	r7, #31250	; 0x7a12
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    1860:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    1862:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    1864:	42bb      	cmp	r3, r7
	return config->uarte_regs;
    1866:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    1868:	d062      	beq.n	1930 <uarte_nrfx_configure+0x100>
    186a:	d829      	bhi.n	18c0 <uarte_nrfx_configure+0x90>
    186c:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    1870:	d061      	beq.n	1936 <uarte_nrfx_configure+0x106>
    1872:	d814      	bhi.n	189e <uarte_nrfx_configure+0x6e>
    1874:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    1878:	d05f      	beq.n	193a <uarte_nrfx_configure+0x10a>
    187a:	d807      	bhi.n	188c <uarte_nrfx_configure+0x5c>
    187c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    1880:	d05e      	beq.n	1940 <uarte_nrfx_configure+0x110>
		return -ENOTSUP;
    1882:	f06f 0022 	mvn.w	r0, #34	; 0x22
    1886:	e052      	b.n	192e <uarte_nrfx_configure+0xfe>
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    1888:	2600      	movs	r6, #0
    188a:	e7d8      	b.n	183e <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    188c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    1890:	d059      	beq.n	1946 <uarte_nrfx_configure+0x116>
    1892:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    1896:	d1f4      	bne.n	1882 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    1898:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    189c:	e03c      	b.n	1918 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
    189e:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    18a2:	d053      	beq.n	194c <uarte_nrfx_configure+0x11c>
    18a4:	d804      	bhi.n	18b0 <uarte_nrfx_configure+0x80>
    18a6:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    18aa:	d1ea      	bne.n	1882 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    18ac:	4b32      	ldr	r3, [pc, #200]	; (1978 <uarte_nrfx_configure+0x148>)
    18ae:	e033      	b.n	1918 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
    18b0:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    18b4:	d04c      	beq.n	1950 <uarte_nrfx_configure+0x120>
    18b6:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    18ba:	d1e2      	bne.n	1882 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    18bc:	4b2f      	ldr	r3, [pc, #188]	; (197c <uarte_nrfx_configure+0x14c>)
    18be:	e02b      	b.n	1918 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
    18c0:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    18c4:	d046      	beq.n	1954 <uarte_nrfx_configure+0x124>
    18c6:	d812      	bhi.n	18ee <uarte_nrfx_configure+0xbe>
    18c8:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    18cc:	42bb      	cmp	r3, r7
    18ce:	d044      	beq.n	195a <uarte_nrfx_configure+0x12a>
    18d0:	d805      	bhi.n	18de <uarte_nrfx_configure+0xae>
    18d2:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    18d6:	d1d4      	bne.n	1882 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    18d8:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    18dc:	e01c      	b.n	1918 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
    18de:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    18e2:	d03d      	beq.n	1960 <uarte_nrfx_configure+0x130>
    18e4:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    18e8:	d1cb      	bne.n	1882 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    18ea:	4b25      	ldr	r3, [pc, #148]	; (1980 <uarte_nrfx_configure+0x150>)
    18ec:	e014      	b.n	1918 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
    18ee:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    18f2:	d038      	beq.n	1966 <uarte_nrfx_configure+0x136>
    18f4:	d808      	bhi.n	1908 <uarte_nrfx_configure+0xd8>
    18f6:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    18fa:	d037      	beq.n	196c <uarte_nrfx_configure+0x13c>
    18fc:	4f21      	ldr	r7, [pc, #132]	; (1984 <uarte_nrfx_configure+0x154>)
    18fe:	42bb      	cmp	r3, r7
    1900:	d1bf      	bne.n	1882 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    1902:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    1906:	e007      	b.n	1918 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
    1908:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    190c:	d031      	beq.n	1972 <uarte_nrfx_configure+0x142>
    190e:	4f1e      	ldr	r7, [pc, #120]	; (1988 <uarte_nrfx_configure+0x158>)
    1910:	42bb      	cmp	r3, r7
    1912:	d1b6      	bne.n	1882 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    1914:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    1918:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
    191c:	4334      	orrs	r4, r6
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    191e:	68c3      	ldr	r3, [r0, #12]
    1920:	4322      	orrs	r2, r4
    1922:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    1924:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    1928:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    192c:	2000      	movs	r0, #0
}
    192e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    1930:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    1934:	e7f0      	b.n	1918 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    1936:	4b15      	ldr	r3, [pc, #84]	; (198c <uarte_nrfx_configure+0x15c>)
    1938:	e7ee      	b.n	1918 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = 0x00027000;
    193a:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    193e:	e7eb      	b.n	1918 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = 0x00014000;
    1940:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    1944:	e7e8      	b.n	1918 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    1946:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    194a:	e7e5      	b.n	1918 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    194c:	4b10      	ldr	r3, [pc, #64]	; (1990 <uarte_nrfx_configure+0x160>)
    194e:	e7e3      	b.n	1918 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    1950:	4b10      	ldr	r3, [pc, #64]	; (1994 <uarte_nrfx_configure+0x164>)
    1952:	e7e1      	b.n	1918 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    1954:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    1958:	e7de      	b.n	1918 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    195a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    195e:	e7db      	b.n	1918 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    1960:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    1964:	e7d8      	b.n	1918 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    1966:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    196a:	e7d5      	b.n	1918 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    196c:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    1970:	e7d2      	b.n	1918 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    1972:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    1976:	e7cf      	b.n	1918 <uarte_nrfx_configure+0xe8>
    1978:	00275000 	.word	0x00275000
    197c:	0075c000 	.word	0x0075c000
    1980:	013a9000 	.word	0x013a9000
    1984:	0003d090 	.word	0x0003d090
    1988:	000f4240 	.word	0x000f4240
    198c:	0013b000 	.word	0x0013b000
    1990:	003af000 	.word	0x003af000
    1994:	004ea000 	.word	0x004ea000

00001998 <uarte_instance_init.isra.3>:

NRF_STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    1998:	2201      	movs	r2, #1
	.irq_update		= uarte_nrfx_irq_update,
	.irq_callback_set	= uarte_nrfx_irq_callback_set,
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int uarte_instance_init(struct device *dev,
    199a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    199c:	2703      	movs	r7, #3
    199e:	460d      	mov	r5, r1
	return config->uarte_regs;
    19a0:	6843      	ldr	r3, [r0, #4]
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);

	nrf_gpio_pin_write(config->pseltxd, 1);
    19a2:	6809      	ldr	r1, [r1, #0]
	return config->uarte_regs;
    19a4:	681c      	ldr	r4, [r3, #0]
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    19a6:	4b21      	ldr	r3, [pc, #132]	; (1a2c <uarte_instance_init.isra.3+0x94>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    19a8:	408a      	lsls	r2, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
    19aa:	68c6      	ldr	r6, [r0, #12]
    p_reg->OUTSET = set_mask;
    19ac:	609a      	str	r2, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    19ae:	f101 0280 	add.w	r2, r1, #128	; 0x80
    19b2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    19b6:	686a      	ldr	r2, [r5, #4]
    19b8:	1c57      	adds	r7, r2, #1
    19ba:	bf1e      	ittt	ne
    19bc:	f04f 0c00 	movne.w	ip, #0
    19c0:	f102 0780 	addne.w	r7, r2, #128	; 0x80
    19c4:	f843 c027 	strne.w	ip, [r3, r7, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
    19c8:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
    19cc:	68a9      	ldr	r1, [r5, #8]
    p_reg->PSEL.RXD = pselrxd;
    19ce:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    19d2:	1c4a      	adds	r2, r1, #1
    19d4:	d015      	beq.n	1a02 <uarte_instance_init.isra.3+0x6a>
	    config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    19d6:	68ea      	ldr	r2, [r5, #12]
	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
    19d8:	1c57      	adds	r7, r2, #1
    19da:	d012      	beq.n	1a02 <uarte_instance_init.isra.3+0x6a>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    19dc:	2701      	movs	r7, #1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    19de:	f04f 0c03 	mov.w	ip, #3
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    19e2:	4097      	lsls	r7, r2
    p_reg->OUTSET = set_mask;
    19e4:	609f      	str	r7, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    19e6:	f102 0780 	add.w	r7, r2, #128	; 0x80
    19ea:	f843 c027 	str.w	ip, [r3, r7, lsl #2]
    19ee:	f04f 0c00 	mov.w	ip, #0
    19f2:	f101 0780 	add.w	r7, r1, #128	; 0x80
    19f6:	f843 c027 	str.w	ip, [r3, r7, lsl #2]
    p_reg->PSEL.RTS = pselrts;
    19fa:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    19fe:	f8c4 1510 	str.w	r1, [r4, #1296]	; 0x510
		nrf_uarte_hwfc_pins_set(uarte,
					config->pselrts,
					config->pselcts);
	}

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    1a02:	4631      	mov	r1, r6
    1a04:	f7ff ff14 	bl	1830 <uarte_nrfx_configure>
	if (err) {
    1a08:	b970      	cbnz	r0, 1a28 <uarte_instance_init.isra.3+0x90>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    1a0a:	2308      	movs	r3, #8
    1a0c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	}
#endif
	/* Enable receiver and transmitter */
	nrf_uarte_enable(uarte);

	if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    1a10:	686b      	ldr	r3, [r5, #4]
    1a12:	3301      	adds	r3, #1
    1a14:	d008      	beq.n	1a28 <uarte_instance_init.isra.3+0x90>
NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    p_reg->RXD.MAXCNT = length;
    1a16:	2301      	movs	r3, #1
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    1a18:	360c      	adds	r6, #12
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1a1a:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    1a1e:	f8c4 6534 	str.w	r6, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    1a22:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1a26:	6023      	str	r3, [r4, #0]
		/* switch off transmitter to save an energy */
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);
	}
#endif
	return 0;
}
    1a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1a2a:	bf00      	nop
    1a2c:	50842500 	.word	0x50842500

00001a30 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    1a30:	b530      	push	{r4, r5, lr}
    1a32:	b085      	sub	sp, #20
    1a34:	4605      	mov	r5, r0
    1a36:	466c      	mov	r4, sp
    1a38:	4b04      	ldr	r3, [pc, #16]	; (1a4c <uarte_0_init+0x1c>)
    1a3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    1a3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    1a40:	4621      	mov	r1, r4
    1a42:	4628      	mov	r0, r5
    1a44:	f7ff ffa8 	bl	1998 <uarte_instance_init.isra.3>
    1a48:	b005      	add	sp, #20
    1a4a:	bd30      	pop	{r4, r5, pc}
    1a4c:	000047ec 	.word	0x000047ec

00001a50 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    1a50:	b530      	push	{r4, r5, lr}
    1a52:	b085      	sub	sp, #20
    1a54:	4605      	mov	r5, r0
    1a56:	466c      	mov	r4, sp
    1a58:	4b04      	ldr	r3, [pc, #16]	; (1a6c <uarte_1_init+0x1c>)
    1a5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    1a5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    1a60:	4621      	mov	r1, r4
    1a62:	4628      	mov	r0, r5
    1a64:	f7ff ff98 	bl	1998 <uarte_instance_init.isra.3>
    1a68:	b005      	add	sp, #20
    1a6a:	bd30      	pop	{r4, r5, pc}
    1a6c:	000047fc 	.word	0x000047fc

00001a70 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(struct device *dev)
{
    1a70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    1a74:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
    1a76:	4c21      	ldr	r4, [pc, #132]	; (1afc <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							u32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const u32_t ext_api_magic[] = {EXT_API_MAGIC};
    1a78:	4e21      	ldr	r6, [pc, #132]	; (1b00 <check_ext_api_requests+0x90>)
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    1a7a:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
    1a7e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 1b08 <check_ext_api_requests+0x98>
{
    1a82:	b085      	sub	sp, #20
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    1a84:	45a8      	cmp	r8, r5
    1a86:	d803      	bhi.n	1a90 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
    1a88:	2000      	movs	r0, #0
    1a8a:	b005      	add	sp, #20
    1a8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((u32_t)*(ext_api_req->ext_api))
    1a90:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1a92:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    1a96:	681f      	ldr	r7, [r3, #0]
    1a98:	ab01      	add	r3, sp, #4
    1a9a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
    1a9e:	220c      	movs	r2, #12
    1aa0:	4619      	mov	r1, r3
    1aa2:	4638      	mov	r0, r7
    1aa4:	f002 fb22 	bl	40ec <memcmp>
    1aa8:	b990      	cbnz	r0, 1ad0 <check_ext_api_requests+0x60>
    1aaa:	b18f      	cbz	r7, 1ad0 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    1aac:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const u32_t req_id = ext_api_req->request.ext_api_id;
    1aae:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    1ab0:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
    1ab2:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    1ab4:	4291      	cmp	r1, r2
    1ab6:	d10b      	bne.n	1ad0 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
    1ab8:	699a      	ldr	r2, [r3, #24]
	const u32_t req_min_version = ext_api_req->request.ext_api_version;
    1aba:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
    1abc:	4291      	cmp	r1, r2
    1abe:	d807      	bhi.n	1ad0 <check_ext_api_requests+0x60>
	const u32_t req_max_version = ext_api_req->ext_api_max_version;
    1ac0:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
    1ac2:	4291      	cmp	r1, r2
    1ac4:	d904      	bls.n	1ad0 <check_ext_api_requests+0x60>
	const u32_t req_flags = ext_api_req->request.ext_api_flags;
    1ac6:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    1ac8:	695b      	ldr	r3, [r3, #20]
    1aca:	ea32 0303 	bics.w	r3, r2, r3
    1ace:	d00a      	beq.n	1ae6 <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
    1ad0:	6a27      	ldr	r7, [r4, #32]
    1ad2:	b167      	cbz	r7, 1aee <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
    1ad4:	480b      	ldr	r0, [pc, #44]	; (1b04 <check_ext_api_requests+0x94>)
    1ad6:	f002 f8c8 	bl	3c6a <printk>
			k_panic();
    1ada:	4040      	eors	r0, r0
    1adc:	f380 8811 	msr	BASEPRI, r0
    1ae0:	f04f 0004 	mov.w	r0, #4
    1ae4:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
    1ae6:	68e3      	ldr	r3, [r4, #12]
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    1ae8:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
    1aea:	441c      	add	r4, r3
    1aec:	e7ca      	b.n	1a84 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
    1aee:	4648      	mov	r0, r9
    1af0:	f002 f8bb 	bl	3c6a <printk>
			*ext_api_req->ext_api = NULL;
    1af4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1af6:	601f      	str	r7, [r3, #0]
    1af8:	e7f5      	b.n	1ae6 <check_ext_api_requests+0x76>
    1afa:	bf00      	nop
    1afc:	0000023c 	.word	0x0000023c
    1b00:	0000480c 	.word	0x0000480c
    1b04:	00004e02 	.word	0x00004e02
    1b08:	00004e2b 	.word	0x00004e2b

00001b0c <nrf91_errata_31>:
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    1b0c:	4b06      	ldr	r3, [pc, #24]	; (1b28 <nrf91_errata_31+0x1c>)
    1b0e:	6818      	ldr	r0, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    1b10:	3b04      	subs	r3, #4
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    1b12:	681b      	ldr	r3, [r3, #0]
    1b14:	2b09      	cmp	r3, #9
    1b16:	d105      	bne.n	1b24 <nrf91_errata_31+0x18>
            {
                switch(var2)
    1b18:	3801      	subs	r0, #1
    1b1a:	2801      	cmp	r0, #1
    1b1c:	bf8c      	ite	hi
    1b1e:	2000      	movhi	r0, #0
    1b20:	2001      	movls	r0, #1
    1b22:	4770      	bx	lr
                    case 0x02ul:
                        return true;
                }
            }
        #endif
        return false;
    1b24:	2000      	movs	r0, #0
    #endif
}
    1b26:	4770      	bx	lr
    1b28:	00ff0134 	.word	0x00ff0134

00001b2c <nrf91_errata_14>:
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    1b2c:	4b05      	ldr	r3, [pc, #20]	; (1b44 <nrf91_errata_14+0x18>)
    1b2e:	6818      	ldr	r0, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    1b30:	3b04      	subs	r3, #4
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    1b32:	681b      	ldr	r3, [r3, #0]
    1b34:	2b09      	cmp	r3, #9
    1b36:	d103      	bne.n	1b40 <nrf91_errata_14+0x14>
            {
                switch(var2)
    1b38:	1e43      	subs	r3, r0, #1
    1b3a:	4258      	negs	r0, r3
    1b3c:	4158      	adcs	r0, r3
    1b3e:	4770      	bx	lr
                    case 0x02ul:
                        return false;
                }
            }
        #endif
        return false;
    1b40:	2000      	movs	r0, #0
    #endif
}
    1b42:	4770      	bx	lr
    1b44:	00ff0134 	.word	0x00ff0134

00001b48 <SystemInit>:
        /* Perform Secure-mode initialization routines. */

        /* Set all ARM SAU regions to NonSecure if TrustZone extensions are enabled.
        * Nordic SPU should handle Secure Attribution tasks */
        #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
    1b48:	4a4e      	ldr	r2, [pc, #312]	; (1c84 <SystemInit+0x13c>)
{
    1b4a:	b508      	push	{r3, lr}
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
    1b4c:	6813      	ldr	r3, [r2, #0]
    1b4e:	f043 0302 	orr.w	r3, r3, #2
    1b52:	6013      	str	r3, [r2, #0]
        #endif
        
        /* Workaround for Errata 6 "POWER: SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_6()){
    1b54:	f7ff ffda 	bl	1b0c <nrf91_errata_31>
    1b58:	b130      	cbz	r0, 1b68 <SystemInit+0x20>
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
    1b5a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1b5e:	2200      	movs	r2, #0
    1b60:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
    1b64:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        }

        /* Workaround for Errata 14 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_14()){
    1b68:	f7ff ffe0 	bl	1b2c <nrf91_errata_14>
    1b6c:	b130      	cbz	r0, 1b7c <SystemInit+0x34>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
    1b6e:	2301      	movs	r3, #1
    1b70:	4a45      	ldr	r2, [pc, #276]	; (1c88 <SystemInit+0x140>)
    1b72:	6013      	str	r3, [r2, #0]
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    1b74:	f6a2 2238 	subw	r2, r2, #2616	; 0xa38
    1b78:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
{
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    1b7c:	4b43      	ldr	r3, [pc, #268]	; (1c8c <SystemInit+0x144>)
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    1b7e:	681b      	ldr	r3, [r3, #0]
    1b80:	2b09      	cmp	r3, #9
    1b82:	d107      	bne.n	1b94 <SystemInit+0x4c>
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    1b84:	4b42      	ldr	r3, [pc, #264]	; (1c90 <SystemInit+0x148>)
            {
                switch(var2)
    1b86:	681b      	ldr	r3, [r3, #0]
    1b88:	2b02      	cmp	r3, #2
        }

        /* Workaround for Errata 15 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_15()){
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    1b8a:	bf02      	ittt	eq
    1b8c:	2201      	moveq	r2, #1
    1b8e:	4b41      	ldreq	r3, [pc, #260]	; (1c94 <SystemInit+0x14c>)
    1b90:	f8c3 2578 	streq.w	r2, [r3, #1400]	; 0x578
        }

        /* Workaround for Errata 20 "RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_20()){
    1b94:	f7ff ffca 	bl	1b2c <nrf91_errata_14>
    1b98:	b110      	cbz	r0, 1ba0 <SystemInit+0x58>
            *((volatile uint32_t *)0x5003AEE4) = 0xE;
    1b9a:	220e      	movs	r2, #14
    1b9c:	4b3e      	ldr	r3, [pc, #248]	; (1c98 <SystemInit+0x150>)
    1b9e:	601a      	str	r2, [r3, #0]
        }

        /* Workaround for Errata 31 "XOSC32k Startup Failure" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_31()){
    1ba0:	f7ff ffb4 	bl	1b0c <nrf91_errata_31>
    1ba4:	b120      	cbz	r0, 1bb0 <SystemInit+0x68>
            *((volatile uint32_t *)0x5000470Cul) = 0x0;
    1ba6:	2200      	movs	r2, #0
    1ba8:	4b3c      	ldr	r3, [pc, #240]	; (1c9c <SystemInit+0x154>)
    1baa:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x50004710ul) = 0x1;
    1bac:	2201      	movs	r2, #1
    1bae:	605a      	str	r2, [r3, #4]
{
    1bb0:	2200      	movs	r2, #0
    1bb2:	00d3      	lsls	r3, r2, #3
    1bb4:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    1bb8:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    1bbc:	3101      	adds	r1, #1
    1bbe:	d008      	beq.n	1bd2 <SystemInit+0x8a>
          #if defined ( __ICCARM__ )
              #pragma diag_suppress=Pa082
          #endif
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    1bc0:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    1bc4:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    1bc6:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    1bca:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    1bce:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    1bd0:	d1ef      	bne.n	1bb2 <SystemInit+0x6a>
    }
    
    
    bool uicr_HFXOSRC_erased()
    {
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    1bd2:	4b33      	ldr	r3, [pc, #204]	; (1ca0 <SystemInit+0x158>)
    1bd4:	69da      	ldr	r2, [r3, #28]
    1bd6:	07d1      	lsls	r1, r2, #31
    1bd8:	d53b      	bpl.n	1c52 <SystemInit+0x10a>
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1bda:	4b32      	ldr	r3, [pc, #200]	; (1ca4 <SystemInit+0x15c>)
    1bdc:	4619      	mov	r1, r3
    1bde:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    1be2:	2a01      	cmp	r2, #1
    1be4:	d1fb      	bne.n	1bde <SystemInit+0x96>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
    1be6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1bea:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
    1bee:	2b01      	cmp	r3, #1
    1bf0:	d1fb      	bne.n	1bea <SystemInit+0xa2>
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    1bf2:	4b2b      	ldr	r3, [pc, #172]	; (1ca0 <SystemInit+0x158>)
    1bf4:	69da      	ldr	r2, [r3, #28]
    1bf6:	07d2      	lsls	r2, r2, #31
    1bf8:	d508      	bpl.n	1c0c <SystemInit+0xc4>
            uicr_erased_value = NRF_UICR_S->HFXOSRC;
    1bfa:	69da      	ldr	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1bfc:	4929      	ldr	r1, [pc, #164]	; (1ca4 <SystemInit+0x15c>)
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    1bfe:	f022 0201 	bic.w	r2, r2, #1
            NRF_UICR_S->HFXOSRC = uicr_new_value;
    1c02:	61da      	str	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1c04:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
    1c08:	2a01      	cmp	r2, #1
    1c0a:	d1fb      	bne.n	1c04 <SystemInit+0xbc>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
    1c0c:	6a1a      	ldr	r2, [r3, #32]
    1c0e:	3201      	adds	r2, #1
    1c10:	d10a      	bne.n	1c28 <SystemInit+0xe0>
            uicr_erased_value = NRF_UICR_S->HFXOCNT;
    1c12:	6a1a      	ldr	r2, [r3, #32]
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
    1c14:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    1c18:	f042 0220 	orr.w	r2, r2, #32
            NRF_UICR_S->HFXOCNT = uicr_new_value;
    1c1c:	621a      	str	r2, [r3, #32]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1c1e:	4a21      	ldr	r2, [pc, #132]	; (1ca4 <SystemInit+0x15c>)
    1c20:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    1c24:	2b01      	cmp	r3, #1
    1c26:	d1fb      	bne.n	1c20 <SystemInit+0xd8>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
    1c28:	2200      	movs	r2, #0
    1c2a:	4b1e      	ldr	r3, [pc, #120]	; (1ca4 <SystemInit+0x15c>)
    1c2c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1c30:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    1c34:	2a01      	cmp	r2, #1
    1c36:	d1fb      	bne.n	1c30 <SystemInit+0xe8>
  __ASM volatile ("dsb 0xF":::"memory");
    1c38:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1c3c:	491a      	ldr	r1, [pc, #104]	; (1ca8 <SystemInit+0x160>)
    1c3e:	4b1b      	ldr	r3, [pc, #108]	; (1cac <SystemInit+0x164>)
    1c40:	68ca      	ldr	r2, [r1, #12]
    1c42:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1c46:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1c48:	60cb      	str	r3, [r1, #12]
    1c4a:	f3bf 8f4f 	dsb	sy
    __NOP();
    1c4e:	bf00      	nop
    1c50:	e7fd      	b.n	1c4e <SystemInit+0x106>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
    1c52:	6a1b      	ldr	r3, [r3, #32]
    1c54:	3301      	adds	r3, #1
    1c56:	d0c0      	beq.n	1bda <SystemInit+0x92>
        SCB->NSACR |= (3UL << 10);
    1c58:	4b13      	ldr	r3, [pc, #76]	; (1ca8 <SystemInit+0x160>)
    1c5a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    1c5e:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
    1c62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
    1c66:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1c6a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    1c6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    1c72:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1c76:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
    1c7a:	4b0d      	ldr	r3, [pc, #52]	; (1cb0 <SystemInit+0x168>)
    1c7c:	4a0d      	ldr	r2, [pc, #52]	; (1cb4 <SystemInit+0x16c>)
    1c7e:	601a      	str	r2, [r3, #0]
}
    1c80:	bd08      	pop	{r3, pc}
    1c82:	bf00      	nop
    1c84:	e000edd0 	.word	0xe000edd0
    1c88:	50004a38 	.word	0x50004a38
    1c8c:	00ff0130 	.word	0x00ff0130
    1c90:	00ff0134 	.word	0x00ff0134
    1c94:	50004000 	.word	0x50004000
    1c98:	5003aee4 	.word	0x5003aee4
    1c9c:	5000470c 	.word	0x5000470c
    1ca0:	00ff8000 	.word	0x00ff8000
    1ca4:	50039000 	.word	0x50039000
    1ca8:	e000ed00 	.word	0xe000ed00
    1cac:	05fa0004 	.word	0x05fa0004
    1cb0:	20000048 	.word	0x20000048
    1cb4:	03d09000 	.word	0x03d09000

00001cb8 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(s32_t level)
{
    1cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			if (dev) {
				/* Initialization failed. Clear the API struct
				 * so that device_get_binding() will not succeed
				 * for it.
				 */
				dev->driver_api = NULL;
    1cba:	2700      	movs	r7, #0
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    1cbc:	4b08      	ldr	r3, [pc, #32]	; (1ce0 <z_sys_init_run_level+0x28>)
    1cbe:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    1cc2:	3001      	adds	r0, #1
    1cc4:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    1cc8:	42a6      	cmp	r6, r4
    1cca:	d800      	bhi.n	1cce <z_sys_init_run_level+0x16>
			}
		}
	}
}
    1ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		retval = entry->init(dev);
    1cce:	e9d4 3500 	ldrd	r3, r5, [r4]
    1cd2:	4628      	mov	r0, r5
    1cd4:	4798      	blx	r3
		if (retval != 0) {
    1cd6:	b108      	cbz	r0, 1cdc <z_sys_init_run_level+0x24>
			if (dev) {
    1cd8:	b105      	cbz	r5, 1cdc <z_sys_init_run_level+0x24>
				dev->driver_api = NULL;
    1cda:	60af      	str	r7, [r5, #8]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    1cdc:	3408      	adds	r4, #8
    1cde:	e7f3      	b.n	1cc8 <z_sys_init_run_level+0x10>
    1ce0:	000049a8 	.word	0x000049a8

00001ce4 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
    1ce4:	4b0f      	ldr	r3, [pc, #60]	; (1d24 <z_impl_device_get_binding+0x40>)
{
    1ce6:	b570      	push	{r4, r5, r6, lr}
    1ce8:	4605      	mov	r5, r0
    1cea:	461e      	mov	r6, r3
	for (dev = __device_start; dev != __device_end; dev++) {
    1cec:	4c0e      	ldr	r4, [pc, #56]	; (1d28 <z_impl_device_get_binding+0x44>)
    1cee:	429c      	cmp	r4, r3
    1cf0:	d104      	bne.n	1cfc <z_impl_device_get_binding+0x18>
		    (dev->name == name)) {
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
    1cf2:	4c0d      	ldr	r4, [pc, #52]	; (1d28 <z_impl_device_get_binding+0x44>)
    1cf4:	42b4      	cmp	r4, r6
    1cf6:	d108      	bne.n	1d0a <z_impl_device_get_binding+0x26>
		    (strcmp(name, dev->name) == 0)) {
			return dev;
		}
	}

	return NULL;
    1cf8:	2400      	movs	r4, #0
    1cfa:	e010      	b.n	1d1e <z_impl_device_get_binding+0x3a>
		if ((dev->driver_api != NULL) &&
    1cfc:	68a2      	ldr	r2, [r4, #8]
    1cfe:	b112      	cbz	r2, 1d06 <z_impl_device_get_binding+0x22>
    1d00:	6822      	ldr	r2, [r4, #0]
    1d02:	42aa      	cmp	r2, r5
    1d04:	d00b      	beq.n	1d1e <z_impl_device_get_binding+0x3a>
	for (dev = __device_start; dev != __device_end; dev++) {
    1d06:	3410      	adds	r4, #16
    1d08:	e7f1      	b.n	1cee <z_impl_device_get_binding+0xa>
		if ((dev->driver_api != NULL) &&
    1d0a:	68a3      	ldr	r3, [r4, #8]
    1d0c:	b90b      	cbnz	r3, 1d12 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    1d0e:	3410      	adds	r4, #16
    1d10:	e7f0      	b.n	1cf4 <z_impl_device_get_binding+0x10>
		    (strcmp(name, dev->name) == 0)) {
    1d12:	6821      	ldr	r1, [r4, #0]
    1d14:	4628      	mov	r0, r5
    1d16:	f002 f9dd 	bl	40d4 <strcmp>
		if ((dev->driver_api != NULL) &&
    1d1a:	2800      	cmp	r0, #0
    1d1c:	d1f7      	bne.n	1d0e <z_impl_device_get_binding+0x2a>
}
    1d1e:	4620      	mov	r0, r4
    1d20:	bd70      	pop	{r4, r5, r6, pc}
    1d22:	bf00      	nop
    1d24:	200000e4 	.word	0x200000e4
    1d28:	20000094 	.word	0x20000094

00001d2c <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    1d2c:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    1d2e:	4d0b      	ldr	r5, [pc, #44]	; (1d5c <idle+0x30>)
    1d30:	f04f 0220 	mov.w	r2, #32
    1d34:	f3ef 8311 	mrs	r3, BASEPRI
    1d38:	f382 8811 	msr	BASEPRI, r2
    1d3c:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
    1d40:	f002 fbdd 	bl	44fe <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    1d44:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
    1d46:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    1d48:	2802      	cmp	r0, #2
    1d4a:	bfd8      	it	le
    1d4c:	4608      	movle	r0, r1
    1d4e:	f002 fbe6 	bl	451e <z_set_timeout_expiry>
	_kernel.idle = ticks;
    1d52:	622c      	str	r4, [r5, #32]
    1d54:	f7ff f9a4 	bl	10a0 <arch_cpu_idle>
    1d58:	e7ea      	b.n	1d30 <idle+0x4>
    1d5a:	bf00      	nop
    1d5c:	20000788 	.word	0x20000788

00001d60 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    1d60:	4802      	ldr	r0, [pc, #8]	; (1d6c <z_bss_zero+0xc>)
    1d62:	4a03      	ldr	r2, [pc, #12]	; (1d70 <z_bss_zero+0x10>)
    1d64:	2100      	movs	r1, #0
    1d66:	1a12      	subs	r2, r2, r0
    1d68:	f002 ba11 	b.w	418e <memset>
    1d6c:	20000148 	.word	0x20000148
    1d70:	200007e8 	.word	0x200007e8

00001d74 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    1d74:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    1d76:	4806      	ldr	r0, [pc, #24]	; (1d90 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    1d78:	4a06      	ldr	r2, [pc, #24]	; (1d94 <z_data_copy+0x20>)
    1d7a:	4907      	ldr	r1, [pc, #28]	; (1d98 <z_data_copy+0x24>)
    1d7c:	1a12      	subs	r2, r2, r0
    1d7e:	f002 f9dc 	bl	413a <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    1d82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    1d86:	4a05      	ldr	r2, [pc, #20]	; (1d9c <z_data_copy+0x28>)
    1d88:	4905      	ldr	r1, [pc, #20]	; (1da0 <z_data_copy+0x2c>)
    1d8a:	4806      	ldr	r0, [pc, #24]	; (1da4 <z_data_copy+0x30>)
    1d8c:	f002 b9d5 	b.w	413a <memcpy>
    1d90:	20000000 	.word	0x20000000
    1d94:	20000148 	.word	0x20000148
    1d98:	00004ebc 	.word	0x00004ebc
    1d9c:	00000000 	.word	0x00000000
    1da0:	00004ebc 	.word	0x00004ebc
    1da4:	20000000 	.word	0x20000000

00001da8 <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
    1da8:	2201      	movs	r2, #1
{
    1daa:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    1dac:	4b0b      	ldr	r3, [pc, #44]	; (1ddc <bg_thread_main+0x34>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    1dae:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    1db0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    1db2:	f7ff ff81 	bl	1cb8 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    1db6:	4a0a      	ldr	r2, [pc, #40]	; (1de0 <bg_thread_main+0x38>)
    1db8:	490a      	ldr	r1, [pc, #40]	; (1de4 <bg_thread_main+0x3c>)
    1dba:	480b      	ldr	r0, [pc, #44]	; (1de8 <bg_thread_main+0x40>)
    1dbc:	f001 ff55 	bl	3c6a <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    1dc0:	2003      	movs	r0, #3
    1dc2:	f7ff ff79 	bl	1cb8 <z_sys_init_run_level>

	z_init_static_threads();
    1dc6:	f000 fd45 	bl	2854 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    1dca:	f001 fdc7 	bl	395c <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    1dce:	4a07      	ldr	r2, [pc, #28]	; (1dec <bg_thread_main+0x44>)
    1dd0:	7b13      	ldrb	r3, [r2, #12]
    1dd2:	f023 0301 	bic.w	r3, r3, #1
    1dd6:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    1dd8:	bd08      	pop	{r3, pc}
    1dda:	bf00      	nop
    1ddc:	200007e5 	.word	0x200007e5
    1de0:	00004afa 	.word	0x00004afa
    1de4:	00004e69 	.word	0x00004e69
    1de8:	00004e89 	.word	0x00004e89
    1dec:	20000714 	.word	0x20000714

00001df0 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    1df0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(z_interrupt_stacks[0])) +
    1df4:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 1ef0 <z_cstart+0x100>
    1df8:	b0a5      	sub	sp, #148	; 0x94
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    1dfa:	f389 8808 	msr	MSP, r9
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1dfe:	2400      	movs	r4, #0
    1e00:	23e0      	movs	r3, #224	; 0xe0
    1e02:	4d34      	ldr	r5, [pc, #208]	; (1ed4 <z_cstart+0xe4>)
	z_setup_new_thread(&z_main_thread, z_main_stack,
    1e04:	f04f 0b01 	mov.w	fp, #1
    1e08:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    1e0c:	77ec      	strb	r4, [r5, #31]
    1e0e:	762c      	strb	r4, [r5, #24]
    1e10:	766c      	strb	r4, [r5, #25]
    1e12:	76ac      	strb	r4, [r5, #26]
    1e14:	76ec      	strb	r4, [r5, #27]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    1e16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
    1e18:	4e2f      	ldr	r6, [pc, #188]	; (1ed8 <z_cstart+0xe8>)
    1e1a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    1e1e:	626b      	str	r3, [r5, #36]	; 0x24
		      SCB_SHCSR_BUSFAULTENA_Msk;
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* Enable Secure Fault */
	SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
    1e20:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
    1e22:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 1ef4 <z_cstart+0x104>
    1e26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    1e2a:	626b      	str	r3, [r5, #36]	; 0x24
	/* Clear BFAR before setting BusFaults to target Non-Secure state. */
	SCB->BFAR = 0;
    1e2c:	63ac      	str	r4, [r5, #56]	; 0x38

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    1e2e:	f7ff fab7 	bl	13a0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    1e32:	f7ff f92f 	bl	1094 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    1e36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1e3a:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    1e3c:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    1e3e:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = 0;
#endif

	_current_cpu->current = dummy_thread;
    1e42:	4d26      	ldr	r5, [pc, #152]	; (1edc <z_cstart+0xec>)
	dummy_thread->base.user_options = K_ESSENTIAL;
    1e44:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	_current_cpu->current = dummy_thread;
    1e48:	ab07      	add	r3, sp, #28
    1e4a:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    1e4c:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
    1e4e:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
    1e52:	f7ff ff31 	bl	1cb8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    1e56:	2001      	movs	r0, #1
    1e58:	f7ff ff2e 	bl	1cb8 <z_sys_init_run_level>
	z_setup_new_thread(&z_main_thread, z_main_stack,
    1e5c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 1ef8 <z_cstart+0x108>
	z_sched_init();
    1e60:	f000 fc54 	bl	270c <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
    1e64:	4b1e      	ldr	r3, [pc, #120]	; (1ee0 <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
    1e66:	626e      	str	r6, [r5, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
    1e68:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1e6c:	4641      	mov	r1, r8
    1e6e:	9305      	str	r3, [sp, #20]
    1e70:	4630      	mov	r0, r6
    1e72:	4653      	mov	r3, sl
    1e74:	e9cd 4b03 	strd	r4, fp, [sp, #12]
    1e78:	e9cd 4401 	strd	r4, r4, [sp, #4]
    1e7c:	9400      	str	r4, [sp, #0]
    1e7e:	f000 fcc3 	bl	2808 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    1e82:	7b73      	ldrb	r3, [r6, #13]
	z_ready_thread(&z_main_thread);
    1e84:	4630      	mov	r0, r6
    1e86:	f023 0304 	bic.w	r3, r3, #4
    1e8a:	7373      	strb	r3, [r6, #13]
    1e8c:	f002 fa78 	bl	4380 <z_ready_thread>
	z_setup_new_thread(thread, stack,
    1e90:	230f      	movs	r3, #15
    1e92:	4f14      	ldr	r7, [pc, #80]	; (1ee4 <z_cstart+0xf4>)
    1e94:	e9cd 4302 	strd	r4, r3, [sp, #8]
    1e98:	f44f 72a0 	mov.w	r2, #320	; 0x140
    1e9c:	4b12      	ldr	r3, [pc, #72]	; (1ee8 <z_cstart+0xf8>)
    1e9e:	4913      	ldr	r1, [pc, #76]	; (1eec <z_cstart+0xfc>)
    1ea0:	4638      	mov	r0, r7
    1ea2:	e9cd b404 	strd	fp, r4, [sp, #16]
    1ea6:	e9cd 4400 	strd	r4, r4, [sp]
    1eaa:	f000 fcad 	bl	2808 <z_setup_new_thread>
    1eae:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    1eb0:	60ef      	str	r7, [r5, #12]
    1eb2:	f023 0304 	bic.w	r3, r3, #4
    1eb6:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    1eb8:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
    1ebc:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
    1ec0:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
    1ec2:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
    1ec6:	4653      	mov	r3, sl
    1ec8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1ecc:	4641      	mov	r1, r8
    1ece:	4630      	mov	r0, r6
    1ed0:	f7ff f8c2 	bl	1058 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    1ed4:	e000ed00 	.word	0xe000ed00
    1ed8:	20000714 	.word	0x20000714
    1edc:	20000788 	.word	0x20000788
    1ee0:	00004eb0 	.word	0x00004eb0
    1ee4:	200006a0 	.word	0x200006a0
    1ee8:	00001d2d 	.word	0x00001d2d
    1eec:	20000be8 	.word	0x20000be8
    1ef0:	20001528 	.word	0x20001528
    1ef4:	00001da9 	.word	0x00001da9
    1ef8:	200007e8 	.word	0x200007e8

00001efc <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
    1efc:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    1efe:	4b0e      	ldr	r3, [pc, #56]	; (1f38 <init_mem_slab_module+0x3c>)
    1f00:	4c0e      	ldr	r4, [pc, #56]	; (1f3c <init_mem_slab_module+0x40>)
    1f02:	42a3      	cmp	r3, r4
    1f04:	d301      	bcc.n	1f0a <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
    1f06:	2000      	movs	r0, #0
	return rc;
}
    1f08:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    1f0a:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    1f0e:	ea41 0200 	orr.w	r2, r1, r0
    1f12:	f012 0203 	ands.w	r2, r2, #3
    1f16:	d10b      	bne.n	1f30 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    1f18:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    1f1a:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    1f1c:	42aa      	cmp	r2, r5
    1f1e:	d101      	bne.n	1f24 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    1f20:	331c      	adds	r3, #28
    1f22:	e7ee      	b.n	1f02 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    1f24:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    1f26:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
    1f28:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
    1f2a:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    1f2c:	4401      	add	r1, r0
    1f2e:	e7f5      	b.n	1f1c <init_mem_slab_module+0x20>
		return -EINVAL;
    1f30:	f06f 0015 	mvn.w	r0, #21
	return rc;
    1f34:	e7e8      	b.n	1f08 <init_mem_slab_module+0xc>
    1f36:	bf00      	nop
    1f38:	200000e4 	.word	0x200000e4
    1f3c:	200000e4 	.word	0x200000e4

00001f40 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    1f40:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
    1f42:	460c      	mov	r4, r1
    1f44:	4616      	mov	r6, r2
    1f46:	461f      	mov	r7, r3
    1f48:	f04f 0320 	mov.w	r3, #32
    1f4c:	f3ef 8111 	mrs	r1, BASEPRI
    1f50:	f383 8811 	msr	BASEPRI, r3
    1f54:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
    1f58:	6943      	ldr	r3, [r0, #20]
    1f5a:	b15b      	cbz	r3, 1f74 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
    1f5c:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    1f5e:	681b      	ldr	r3, [r3, #0]
    1f60:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    1f62:	6983      	ldr	r3, [r0, #24]
    1f64:	3301      	adds	r3, #1
    1f66:	6183      	str	r3, [r0, #24]
		result = 0;
    1f68:	2000      	movs	r0, #0
	__asm__ volatile(
    1f6a:	f381 8811 	msr	BASEPRI, r1
    1f6e:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
    1f72:	e011      	b.n	1f98 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    1f74:	ea56 0207 	orrs.w	r2, r6, r7
    1f78:	d103      	bne.n	1f82 <k_mem_slab_alloc+0x42>
		*mem = NULL;
    1f7a:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    1f7c:	f06f 000b 	mvn.w	r0, #11
    1f80:	e7f3      	b.n	1f6a <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
    1f82:	4602      	mov	r2, r0
    1f84:	e9cd 6700 	strd	r6, r7, [sp]
    1f88:	4804      	ldr	r0, [pc, #16]	; (1f9c <k_mem_slab_alloc+0x5c>)
    1f8a:	f000 fb67 	bl	265c <z_pend_curr>
		if (result == 0) {
    1f8e:	b918      	cbnz	r0, 1f98 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
    1f90:	4b03      	ldr	r3, [pc, #12]	; (1fa0 <k_mem_slab_alloc+0x60>)
    1f92:	689b      	ldr	r3, [r3, #8]
    1f94:	695b      	ldr	r3, [r3, #20]
    1f96:	6023      	str	r3, [r4, #0]
}
    1f98:	b002      	add	sp, #8
    1f9a:	bdd0      	pop	{r4, r6, r7, pc}
    1f9c:	200007e6 	.word	0x200007e6
    1fa0:	20000788 	.word	0x20000788

00001fa4 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    1fa4:	b570      	push	{r4, r5, r6, lr}
    1fa6:	4604      	mov	r4, r0
    1fa8:	460d      	mov	r5, r1
	__asm__ volatile(
    1faa:	f04f 0320 	mov.w	r3, #32
    1fae:	f3ef 8611 	mrs	r6, BASEPRI
    1fb2:	f383 8811 	msr	BASEPRI, r3
    1fb6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    1fba:	f002 fa55 	bl	4468 <z_unpend_first_thread>

	if (pending_thread != NULL) {
    1fbe:	b158      	cbz	r0, 1fd8 <k_mem_slab_free+0x34>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    1fc0:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    1fc2:	682a      	ldr	r2, [r5, #0]
    1fc4:	6701      	str	r1, [r0, #112]	; 0x70
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    1fc6:	6142      	str	r2, [r0, #20]
		z_ready_thread(pending_thread);
    1fc8:	f002 f9da 	bl	4380 <z_ready_thread>
		z_reschedule(&lock, key);
    1fcc:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
    1fce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
    1fd2:	4808      	ldr	r0, [pc, #32]	; (1ff4 <k_mem_slab_free+0x50>)
    1fd4:	f002 b9ad 	b.w	4332 <z_reschedule>
		**(char ***)mem = slab->free_list;
    1fd8:	682b      	ldr	r3, [r5, #0]
    1fda:	6962      	ldr	r2, [r4, #20]
    1fdc:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
    1fde:	682b      	ldr	r3, [r5, #0]
    1fe0:	6163      	str	r3, [r4, #20]
		slab->num_used--;
    1fe2:	69a3      	ldr	r3, [r4, #24]
    1fe4:	3b01      	subs	r3, #1
    1fe6:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    1fe8:	f386 8811 	msr	BASEPRI, r6
    1fec:	f3bf 8f6f 	isb	sy
}
    1ff0:	bd70      	pop	{r4, r5, r6, pc}
    1ff2:	bf00      	nop
    1ff4:	200007e6 	.word	0x200007e6

00001ff8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    1ff8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    1ffc:	4604      	mov	r4, r0
    1ffe:	4616      	mov	r6, r2
    2000:	461f      	mov	r7, r3
	__asm__ volatile(
    2002:	f04f 0320 	mov.w	r3, #32
    2006:	f3ef 8811 	mrs	r8, BASEPRI
    200a:	f383 8811 	msr	BASEPRI, r3
    200e:	f3bf 8f6f 	isb	sy
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    2012:	68c3      	ldr	r3, [r0, #12]
    2014:	4a32      	ldr	r2, [pc, #200]	; (20e0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xe0>)
    2016:	b16b      	cbz	r3, 2034 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x34>
    2018:	6880      	ldr	r0, [r0, #8]
    201a:	6891      	ldr	r1, [r2, #8]
    201c:	4288      	cmp	r0, r1
    201e:	d019      	beq.n	2054 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x54>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    2020:	ea56 0307 	orrs.w	r3, r6, r7
    2024:	d118      	bne.n	2058 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x58>
	__asm__ volatile(
    2026:	f388 8811 	msr	BASEPRI, r8
    202a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
    202e:	f06f 000f 	mvn.w	r0, #15
    2032:	e00c      	b.n	204e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4e>
					_current->base.prio :
    2034:	6891      	ldr	r1, [r2, #8]
    2036:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    203a:	3301      	adds	r3, #1
    203c:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    203e:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    2040:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    2042:	60a3      	str	r3, [r4, #8]
    2044:	f388 8811 	msr	BASEPRI, r8
    2048:	f3bf 8f6f 	isb	sy
		return 0;
    204c:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
    204e:	b002      	add	sp, #8
    2050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    2054:	6921      	ldr	r1, [r4, #16]
    2056:	e7f0      	b.n	203a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    2058:	f990 300e 	ldrsb.w	r3, [r0, #14]
    205c:	f991 100e 	ldrsb.w	r1, [r1, #14]
    2060:	4299      	cmp	r1, r3
    2062:	bfa8      	it	ge
    2064:	4619      	movge	r1, r3
    2066:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    206a:	4299      	cmp	r1, r3
    206c:	da2c      	bge.n	20c8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xc8>
		return z_set_prio(mutex->owner, new_prio);
    206e:	f000 fb09 	bl	2684 <z_set_prio>
    2072:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    2074:	e9cd 6700 	strd	r6, r7, [sp]
    2078:	4622      	mov	r2, r4
    207a:	4641      	mov	r1, r8
    207c:	4819      	ldr	r0, [pc, #100]	; (20e4 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xe4>)
    207e:	f000 faed 	bl	265c <z_pend_curr>
	if (got_mutex == 0) {
    2082:	2800      	cmp	r0, #0
    2084:	d0e3      	beq.n	204e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4e>
	__asm__ volatile(
    2086:	f04f 0320 	mov.w	r3, #32
    208a:	f3ef 8611 	mrs	r6, BASEPRI
    208e:	f383 8811 	msr	BASEPRI, r3
    2092:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    2096:	6823      	ldr	r3, [r4, #0]
    2098:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    209a:	429c      	cmp	r4, r3
    209c:	d007      	beq.n	20ae <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xae>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    209e:	b133      	cbz	r3, 20ae <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xae>
    20a0:	f993 300e 	ldrsb.w	r3, [r3, #14]
    20a4:	4299      	cmp	r1, r3
    20a6:	bfa8      	it	ge
    20a8:	4619      	movge	r1, r3
    20aa:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    20ae:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    20b0:	f990 300e 	ldrsb.w	r3, [r0, #14]
    20b4:	4299      	cmp	r1, r3
    20b6:	d109      	bne.n	20cc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xcc>
	if (resched) {
    20b8:	b16d      	cbz	r5, 20d6 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xd6>
		z_reschedule(&lock, key);
    20ba:	4631      	mov	r1, r6
    20bc:	4809      	ldr	r0, [pc, #36]	; (20e4 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xe4>)
    20be:	f002 f938 	bl	4332 <z_reschedule>
	return -EAGAIN;
    20c2:	f06f 000a 	mvn.w	r0, #10
    20c6:	e7c2      	b.n	204e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4e>
	bool resched = false;
    20c8:	2500      	movs	r5, #0
    20ca:	e7d3      	b.n	2074 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x74>
		return z_set_prio(mutex->owner, new_prio);
    20cc:	f000 fada 	bl	2684 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    20d0:	2800      	cmp	r0, #0
    20d2:	d1f2      	bne.n	20ba <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xba>
    20d4:	e7f0      	b.n	20b8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xb8>
	__asm__ volatile(
    20d6:	f386 8811 	msr	BASEPRI, r6
    20da:	f3bf 8f6f 	isb	sy
    20de:	e7f0      	b.n	20c2 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xc2>
    20e0:	20000788 	.word	0x20000788
    20e4:	200007e6 	.word	0x200007e6

000020e8 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    20e8:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	CHECKIF(mutex->owner == NULL) {
    20ea:	6883      	ldr	r3, [r0, #8]
{
    20ec:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    20ee:	2b00      	cmp	r3, #0
    20f0:	d036      	beq.n	2160 <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    20f2:	4a1e      	ldr	r2, [pc, #120]	; (216c <z_impl_k_mutex_unlock+0x84>)
    20f4:	6892      	ldr	r2, [r2, #8]
    20f6:	4293      	cmp	r3, r2
    20f8:	d135      	bne.n	2166 <z_impl_k_mutex_unlock+0x7e>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    20fa:	7bda      	ldrb	r2, [r3, #15]
    20fc:	3a01      	subs	r2, #1
    20fe:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
    2100:	68c3      	ldr	r3, [r0, #12]
    2102:	2b01      	cmp	r3, #1
    2104:	d005      	beq.n	2112 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    2106:	3b01      	subs	r3, #1
    2108:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
    210a:	f000 f8c3 	bl	2294 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
    210e:	2000      	movs	r0, #0
}
    2110:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    2112:	f04f 0320 	mov.w	r3, #32
    2116:	f3ef 8511 	mrs	r5, BASEPRI
    211a:	f383 8811 	msr	BASEPRI, r3
    211e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    2122:	6901      	ldr	r1, [r0, #16]
    2124:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    2126:	f990 300e 	ldrsb.w	r3, [r0, #14]
    212a:	4299      	cmp	r1, r3
    212c:	d001      	beq.n	2132 <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
    212e:	f000 faa9 	bl	2684 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    2132:	4620      	mov	r0, r4
    2134:	f002 f998 	bl	4468 <z_unpend_first_thread>
	mutex->owner = new_owner;
    2138:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    213a:	b158      	cbz	r0, 2154 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
    213c:	f990 200e 	ldrsb.w	r2, [r0, #14]
    2140:	6122      	str	r2, [r4, #16]
    2142:	2200      	movs	r2, #0
    2144:	6702      	str	r2, [r0, #112]	; 0x70
		z_ready_thread(new_owner);
    2146:	f002 f91b 	bl	4380 <z_ready_thread>
		z_reschedule(&lock, key);
    214a:	4629      	mov	r1, r5
    214c:	4808      	ldr	r0, [pc, #32]	; (2170 <z_impl_k_mutex_unlock+0x88>)
    214e:	f002 f8f0 	bl	4332 <z_reschedule>
    2152:	e7da      	b.n	210a <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    2154:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    2156:	f385 8811 	msr	BASEPRI, r5
    215a:	f3bf 8f6f 	isb	sy
    215e:	e7d4      	b.n	210a <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    2160:	f06f 0015 	mvn.w	r0, #21
    2164:	e7d4      	b.n	2110 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    2166:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    216a:	e7d1      	b.n	2110 <z_impl_k_mutex_unlock+0x28>
    216c:	20000788 	.word	0x20000788
    2170:	200007e6 	.word	0x200007e6

00002174 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    2174:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    2176:	4c08      	ldr	r4, [pc, #32]	; (2198 <z_reset_time_slice+0x24>)
    2178:	6823      	ldr	r3, [r4, #0]
    217a:	b15b      	cbz	r3, 2194 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    217c:	f7fe fbe2 	bl	944 <z_clock_elapsed>
    2180:	6823      	ldr	r3, [r4, #0]
    2182:	4a06      	ldr	r2, [pc, #24]	; (219c <z_reset_time_slice+0x28>)
    2184:	4418      	add	r0, r3
    2186:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    2188:	2100      	movs	r1, #0
	}
}
    218a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
    218e:	4618      	mov	r0, r3
    2190:	f002 b9c5 	b.w	451e <z_set_timeout_expiry>
}
    2194:	bd10      	pop	{r4, pc}
    2196:	bf00      	nop
    2198:	200007c0 	.word	0x200007c0
    219c:	20000788 	.word	0x20000788

000021a0 <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
    21a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21a2:	460d      	mov	r5, r1
	__asm__ volatile(
    21a4:	f04f 0320 	mov.w	r3, #32
    21a8:	f3ef 8411 	mrs	r4, BASEPRI
    21ac:	f383 8811 	msr	BASEPRI, r3
    21b0:	f3bf 8f6f 	isb	sy
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
    21b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    21b8:	f240 36e7 	movw	r6, #999	; 0x3e7
    21bc:	2700      	movs	r7, #0
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    21be:	2200      	movs	r2, #0
    21c0:	fbe1 6700 	umlal	r6, r7, r1, r0
    21c4:	4b09      	ldr	r3, [pc, #36]	; (21ec <k_sched_time_slice_set+0x4c>)
    21c6:	4630      	mov	r0, r6
    21c8:	611a      	str	r2, [r3, #16]
    21ca:	4639      	mov	r1, r7
    21cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    21d0:	2300      	movs	r3, #0
    21d2:	f7fe f833 	bl	23c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    21d6:	4b06      	ldr	r3, [pc, #24]	; (21f0 <k_sched_time_slice_set+0x50>)
    21d8:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    21da:	4b06      	ldr	r3, [pc, #24]	; (21f4 <k_sched_time_slice_set+0x54>)
    21dc:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    21de:	f7ff ffc9 	bl	2174 <z_reset_time_slice>
	__asm__ volatile(
    21e2:	f384 8811 	msr	BASEPRI, r4
    21e6:	f3bf 8f6f 	isb	sy
	}
}
    21ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    21ec:	20000788 	.word	0x20000788
    21f0:	200007c0 	.word	0x200007c0
    21f4:	200007bc 	.word	0x200007bc

000021f8 <k_sched_lock>:
	__asm__ volatile(
    21f8:	f04f 0320 	mov.w	r3, #32
    21fc:	f3ef 8111 	mrs	r1, BASEPRI
    2200:	f383 8811 	msr	BASEPRI, r3
    2204:	f3bf 8f6f 	isb	sy
    2208:	4b04      	ldr	r3, [pc, #16]	; (221c <k_sched_lock+0x24>)
    220a:	689a      	ldr	r2, [r3, #8]
    220c:	7bd3      	ldrb	r3, [r2, #15]
    220e:	3b01      	subs	r3, #1
    2210:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    2212:	f381 8811 	msr	BASEPRI, r1
    2216:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    221a:	4770      	bx	lr
    221c:	20000788 	.word	0x20000788

00002220 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    2220:	4b09      	ldr	r3, [pc, #36]	; (2248 <z_priq_dumb_remove+0x28>)
    2222:	f103 0228 	add.w	r2, r3, #40	; 0x28
    2226:	4282      	cmp	r2, r0
    2228:	d105      	bne.n	2236 <z_priq_dumb_remove+0x16>
    222a:	689b      	ldr	r3, [r3, #8]
    222c:	428b      	cmp	r3, r1
    222e:	d102      	bne.n	2236 <z_priq_dumb_remove+0x16>
    2230:	7b4b      	ldrb	r3, [r1, #13]
    2232:	06db      	lsls	r3, r3, #27
    2234:	d106      	bne.n	2244 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    2236:	e9d1 3200 	ldrd	r3, r2, [r1]
    223a:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    223c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    223e:	2300      	movs	r3, #0
	node->prev = NULL;
    2240:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    2244:	4770      	bx	lr
    2246:	bf00      	nop
    2248:	20000788 	.word	0x20000788

0000224c <update_cache>:
{
    224c:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    224e:	4c10      	ldr	r4, [pc, #64]	; (2290 <update_cache+0x44>)
{
    2250:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    2252:	f104 0028 	add.w	r0, r4, #40	; 0x28
    2256:	f002 f88d 	bl	4374 <z_priq_dumb_best>
    225a:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
    225c:	68a3      	ldr	r3, [r4, #8]
    225e:	7b59      	ldrb	r1, [r3, #13]
    2260:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
    2262:	bf44      	itt	mi
    2264:	f041 0108 	orrmi.w	r1, r1, #8
    2268:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
    226a:	b905      	cbnz	r5, 226e <update_cache+0x22>
    226c:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
    226e:	b94e      	cbnz	r6, 2284 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
    2270:	7b5a      	ldrb	r2, [r3, #13]
    2272:	06d2      	lsls	r2, r2, #27
    2274:	d106      	bne.n	2284 <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    2276:	69aa      	ldr	r2, [r5, #24]
    2278:	b922      	cbnz	r2, 2284 <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
    227a:	89da      	ldrh	r2, [r3, #14]
    227c:	2a7f      	cmp	r2, #127	; 0x7f
    227e:	d901      	bls.n	2284 <update_cache+0x38>
		_kernel.ready_q.cache = _current;
    2280:	6263      	str	r3, [r4, #36]	; 0x24
}
    2282:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
    2284:	42ab      	cmp	r3, r5
    2286:	d001      	beq.n	228c <update_cache+0x40>
			z_reset_time_slice();
    2288:	f7ff ff74 	bl	2174 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    228c:	6265      	str	r5, [r4, #36]	; 0x24
}
    228e:	e7f8      	b.n	2282 <update_cache+0x36>
    2290:	20000788 	.word	0x20000788

00002294 <k_sched_unlock>:
{
    2294:	b510      	push	{r4, lr}
	__asm__ volatile(
    2296:	f04f 0320 	mov.w	r3, #32
    229a:	f3ef 8411 	mrs	r4, BASEPRI
    229e:	f383 8811 	msr	BASEPRI, r3
    22a2:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    22a6:	4b08      	ldr	r3, [pc, #32]	; (22c8 <k_sched_unlock+0x34>)
		update_cache(0);
    22a8:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    22aa:	689a      	ldr	r2, [r3, #8]
    22ac:	7bd3      	ldrb	r3, [r2, #15]
    22ae:	3301      	adds	r3, #1
    22b0:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    22b2:	f7ff ffcb 	bl	224c <update_cache>
	__asm__ volatile(
    22b6:	f384 8811 	msr	BASEPRI, r4
    22ba:	f3bf 8f6f 	isb	sy
}
    22be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    22c2:	f002 b84d 	b.w	4360 <z_reschedule_unlocked>
    22c6:	bf00      	nop
    22c8:	20000788 	.word	0x20000788

000022cc <ready_thread>:
{
    22cc:	b470      	push	{r4, r5, r6}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    22ce:	7b43      	ldrb	r3, [r0, #13]
    22d0:	06db      	lsls	r3, r3, #27
    22d2:	d127      	bne.n	2324 <ready_thread+0x58>
	if (z_is_thread_ready(thread)) {
    22d4:	6983      	ldr	r3, [r0, #24]
    22d6:	bb2b      	cbnz	r3, 2324 <ready_thread+0x58>
	return list->head == list;
    22d8:	4a13      	ldr	r2, [pc, #76]	; (2328 <ready_thread+0x5c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    22da:	f102 0128 	add.w	r1, r2, #40	; 0x28
    22de:	e9d2 340a 	ldrd	r3, r4, [r2, #40]	; 0x28
    22e2:	428b      	cmp	r3, r1
    22e4:	d018      	beq.n	2318 <ready_thread+0x4c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    22e6:	b1bb      	cbz	r3, 2318 <ready_thread+0x4c>
	if (thread_1->base.prio < thread_2->base.prio) {
    22e8:	f990 500e 	ldrsb.w	r5, [r0, #14]
    22ec:	f993 600e 	ldrsb.w	r6, [r3, #14]
    22f0:	42ae      	cmp	r6, r5
    22f2:	dd0c      	ble.n	230e <ready_thread+0x42>
	node->prev = successor->prev;
    22f4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    22f6:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    22fa:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    22fc:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    22fe:	7b43      	ldrb	r3, [r0, #13]
    2300:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2304:	7343      	strb	r3, [r0, #13]
}
    2306:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    2308:	2000      	movs	r0, #0
    230a:	f7ff bf9f 	b.w	224c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    230e:	429c      	cmp	r4, r3
    2310:	d002      	beq.n	2318 <ready_thread+0x4c>
    2312:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2314:	2b00      	cmp	r3, #0
    2316:	d1e9      	bne.n	22ec <ready_thread+0x20>
	node->prev = list->tail;
    2318:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
    231c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    231e:	6018      	str	r0, [r3, #0]
	list->tail = node;
    2320:	62d0      	str	r0, [r2, #44]	; 0x2c
    2322:	e7ec      	b.n	22fe <ready_thread+0x32>
}
    2324:	bc70      	pop	{r4, r5, r6}
    2326:	4770      	bx	lr
    2328:	20000788 	.word	0x20000788

0000232c <z_sched_start>:
{
    232c:	b510      	push	{r4, lr}
	__asm__ volatile(
    232e:	f04f 0320 	mov.w	r3, #32
    2332:	f3ef 8411 	mrs	r4, BASEPRI
    2336:	f383 8811 	msr	BASEPRI, r3
    233a:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
    233e:	7b43      	ldrb	r3, [r0, #13]
    2340:	0759      	lsls	r1, r3, #29
    2342:	d404      	bmi.n	234e <z_sched_start+0x22>
	__asm__ volatile(
    2344:	f384 8811 	msr	BASEPRI, r4
    2348:	f3bf 8f6f 	isb	sy
}
    234c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    234e:	f023 0304 	bic.w	r3, r3, #4
    2352:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    2354:	f7ff ffba 	bl	22cc <ready_thread>
	z_reschedule(&sched_spinlock, key);
    2358:	4621      	mov	r1, r4
}
    235a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    235e:	4801      	ldr	r0, [pc, #4]	; (2364 <z_sched_start+0x38>)
    2360:	f001 bfe7 	b.w	4332 <z_reschedule>
    2364:	200007e6 	.word	0x200007e6

00002368 <z_move_thread_to_end_of_prio_q>:
{
    2368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    236a:	4604      	mov	r4, r0
	__asm__ volatile(
    236c:	f04f 0320 	mov.w	r3, #32
    2370:	f3ef 8511 	mrs	r5, BASEPRI
    2374:	f383 8811 	msr	BASEPRI, r3
    2378:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    237c:	f990 300d 	ldrsb.w	r3, [r0, #13]
    2380:	2b00      	cmp	r3, #0
    2382:	da03      	bge.n	238c <z_move_thread_to_end_of_prio_q+0x24>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    2384:	4601      	mov	r1, r0
    2386:	4818      	ldr	r0, [pc, #96]	; (23e8 <z_move_thread_to_end_of_prio_q+0x80>)
    2388:	f7ff ff4a 	bl	2220 <z_priq_dumb_remove>
	return list->head == list;
    238c:	4a17      	ldr	r2, [pc, #92]	; (23ec <z_move_thread_to_end_of_prio_q+0x84>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    238e:	f102 0128 	add.w	r1, r2, #40	; 0x28
    2392:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
    2396:	428b      	cmp	r3, r1
    2398:	d01f      	beq.n	23da <z_move_thread_to_end_of_prio_q+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    239a:	b1f3      	cbz	r3, 23da <z_move_thread_to_end_of_prio_q+0x72>
	if (thread_1->base.prio < thread_2->base.prio) {
    239c:	f994 600e 	ldrsb.w	r6, [r4, #14]
    23a0:	f993 700e 	ldrsb.w	r7, [r3, #14]
    23a4:	42b7      	cmp	r7, r6
    23a6:	dd13      	ble.n	23d0 <z_move_thread_to_end_of_prio_q+0x68>
	node->prev = successor->prev;
    23a8:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    23aa:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
    23ae:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    23b0:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
    23b2:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
    23b4:	6890      	ldr	r0, [r2, #8]
    23b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    23ba:	7363      	strb	r3, [r4, #13]
    23bc:	1b03      	subs	r3, r0, r4
    23be:	4258      	negs	r0, r3
    23c0:	4158      	adcs	r0, r3
    23c2:	f7ff ff43 	bl	224c <update_cache>
	__asm__ volatile(
    23c6:	f385 8811 	msr	BASEPRI, r5
    23ca:	f3bf 8f6f 	isb	sy
}
    23ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    23d0:	4298      	cmp	r0, r3
    23d2:	d002      	beq.n	23da <z_move_thread_to_end_of_prio_q+0x72>
    23d4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    23d6:	2b00      	cmp	r3, #0
    23d8:	d1e2      	bne.n	23a0 <z_move_thread_to_end_of_prio_q+0x38>
	node->prev = list->tail;
    23da:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
    23de:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    23e0:	601c      	str	r4, [r3, #0]
	list->tail = node;
    23e2:	62d4      	str	r4, [r2, #44]	; 0x2c
    23e4:	e7e5      	b.n	23b2 <z_move_thread_to_end_of_prio_q+0x4a>
    23e6:	bf00      	nop
    23e8:	200007b0 	.word	0x200007b0
    23ec:	20000788 	.word	0x20000788

000023f0 <z_time_slice>:
	if (pending_current == _current) {
    23f0:	4a15      	ldr	r2, [pc, #84]	; (2448 <z_time_slice+0x58>)
    23f2:	4916      	ldr	r1, [pc, #88]	; (244c <z_time_slice+0x5c>)
{
    23f4:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
    23f6:	680c      	ldr	r4, [r1, #0]
    23f8:	6893      	ldr	r3, [r2, #8]
    23fa:	42a3      	cmp	r3, r4
    23fc:	4614      	mov	r4, r2
    23fe:	d103      	bne.n	2408 <z_time_slice+0x18>
}
    2400:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
    2404:	f7ff beb6 	b.w	2174 <z_reset_time_slice>
	pending_current = NULL;
    2408:	2500      	movs	r5, #0
    240a:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
    240c:	4910      	ldr	r1, [pc, #64]	; (2450 <z_time_slice+0x60>)
    240e:	6809      	ldr	r1, [r1, #0]
    2410:	b1b9      	cbz	r1, 2442 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
    2412:	89d9      	ldrh	r1, [r3, #14]
    2414:	297f      	cmp	r1, #127	; 0x7f
    2416:	d814      	bhi.n	2442 <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    2418:	490e      	ldr	r1, [pc, #56]	; (2454 <z_time_slice+0x64>)
    241a:	f993 500e 	ldrsb.w	r5, [r3, #14]
    241e:	6809      	ldr	r1, [r1, #0]
    2420:	428d      	cmp	r5, r1
    2422:	db0e      	blt.n	2442 <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
    2424:	490c      	ldr	r1, [pc, #48]	; (2458 <z_time_slice+0x68>)
    2426:	428b      	cmp	r3, r1
    2428:	d00b      	beq.n	2442 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
    242a:	6999      	ldr	r1, [r3, #24]
    242c:	b949      	cbnz	r1, 2442 <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
    242e:	6911      	ldr	r1, [r2, #16]
    2430:	4281      	cmp	r1, r0
    2432:	dc03      	bgt.n	243c <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
    2434:	4618      	mov	r0, r3
    2436:	f7ff ff97 	bl	2368 <z_move_thread_to_end_of_prio_q>
    243a:	e7e1      	b.n	2400 <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
    243c:	1a09      	subs	r1, r1, r0
    243e:	6111      	str	r1, [r2, #16]
}
    2440:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
    2442:	2300      	movs	r3, #0
    2444:	6123      	str	r3, [r4, #16]
    2446:	e7fb      	b.n	2440 <z_time_slice+0x50>
    2448:	20000788 	.word	0x20000788
    244c:	200007b8 	.word	0x200007b8
    2450:	200007c0 	.word	0x200007c0
    2454:	200007bc 	.word	0x200007bc
    2458:	200006a0 	.word	0x200006a0

0000245c <z_impl_k_thread_suspend>:
{
    245c:	b570      	push	{r4, r5, r6, lr}
    245e:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    2460:	3018      	adds	r0, #24
    2462:	f002 f836 	bl	44d2 <z_abort_timeout>
	__asm__ volatile(
    2466:	f04f 0320 	mov.w	r3, #32
    246a:	f3ef 8611 	mrs	r6, BASEPRI
    246e:	f383 8811 	msr	BASEPRI, r3
    2472:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    2476:	f994 300d 	ldrsb.w	r3, [r4, #13]
    247a:	2b00      	cmp	r3, #0
    247c:	da07      	bge.n	248e <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    247e:	4621      	mov	r1, r4
    2480:	480e      	ldr	r0, [pc, #56]	; (24bc <z_impl_k_thread_suspend+0x60>)
    2482:	f7ff fecd 	bl	2220 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    2486:	7b63      	ldrb	r3, [r4, #13]
    2488:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    248c:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    248e:	4d0c      	ldr	r5, [pc, #48]	; (24c0 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    2490:	7b63      	ldrb	r3, [r4, #13]
    2492:	68a8      	ldr	r0, [r5, #8]
    2494:	f043 0310 	orr.w	r3, r3, #16
    2498:	7363      	strb	r3, [r4, #13]
    249a:	1b03      	subs	r3, r0, r4
    249c:	4258      	negs	r0, r3
    249e:	4158      	adcs	r0, r3
    24a0:	f7ff fed4 	bl	224c <update_cache>
	__asm__ volatile(
    24a4:	f386 8811 	msr	BASEPRI, r6
    24a8:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    24ac:	68ab      	ldr	r3, [r5, #8]
    24ae:	42a3      	cmp	r3, r4
    24b0:	d103      	bne.n	24ba <z_impl_k_thread_suspend+0x5e>
}
    24b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    24b6:	f001 bf53 	b.w	4360 <z_reschedule_unlocked>
}
    24ba:	bd70      	pop	{r4, r5, r6, pc}
    24bc:	200007b0 	.word	0x200007b0
    24c0:	20000788 	.word	0x20000788

000024c4 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
    24c4:	6d83      	ldr	r3, [r0, #88]	; 0x58
{
    24c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    24ca:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    24cc:	b103      	cbz	r3, 24d0 <z_thread_single_abort+0xc>
		thread->fn_abort();
    24ce:	4798      	blx	r3
    24d0:	f104 0018 	add.w	r0, r4, #24
    24d4:	f001 fffd 	bl	44d2 <z_abort_timeout>
	__asm__ volatile(
    24d8:	f04f 0320 	mov.w	r3, #32
    24dc:	f3ef 8611 	mrs	r6, BASEPRI
    24e0:	f383 8811 	msr	BASEPRI, r3
    24e4:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    24e8:	7b63      	ldrb	r3, [r4, #13]
    24ea:	06d8      	lsls	r0, r3, #27
    24ec:	d123      	bne.n	2536 <z_thread_single_abort+0x72>
		if (z_is_thread_ready(thread)) {
    24ee:	69a2      	ldr	r2, [r4, #24]
    24f0:	bb0a      	cbnz	r2, 2536 <z_thread_single_abort+0x72>
			if (z_is_thread_queued(thread)) {
    24f2:	0619      	lsls	r1, r3, #24
    24f4:	d507      	bpl.n	2506 <z_thread_single_abort+0x42>
				_priq_run_remove(&_kernel.ready_q.runq,
    24f6:	4621      	mov	r1, r4
    24f8:	481e      	ldr	r0, [pc, #120]	; (2574 <z_thread_single_abort+0xb0>)
    24fa:	f7ff fe91 	bl	2220 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    24fe:	7b63      	ldrb	r3, [r4, #13]
    2500:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2504:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
    2506:	4b1c      	ldr	r3, [pc, #112]	; (2578 <z_thread_single_abort+0xb4>)
    2508:	6898      	ldr	r0, [r3, #8]
    250a:	1b02      	subs	r2, r0, r4
    250c:	4250      	negs	r0, r2
    250e:	4150      	adcs	r0, r2
    2510:	f7ff fe9c 	bl	224c <update_cache>
			waiter->base.pended_on = NULL;
    2514:	2700      	movs	r7, #0
		thread->base.thread_state |= mask;
    2516:	7b63      	ldrb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    2518:	f104 0828 	add.w	r8, r4, #40	; 0x28
    251c:	f043 0308 	orr.w	r3, r3, #8
    2520:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    2522:	6aa5      	ldr	r5, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2524:	4545      	cmp	r5, r8
    2526:	d000      	beq.n	252a <z_thread_single_abort+0x66>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
    2528:	b995      	cbnz	r5, 2550 <z_thread_single_abort+0x8c>
	__asm__ volatile(
    252a:	f386 8811 	msr	BASEPRI, r6
    252e:	f3bf 8f6f 	isb	sy
}
    2532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
    2536:	079b      	lsls	r3, r3, #30
    2538:	d5ec      	bpl.n	2514 <z_thread_single_abort+0x50>
				_priq_wait_remove(&pended_on(thread)->waitq,
    253a:	4621      	mov	r1, r4
    253c:	68a0      	ldr	r0, [r4, #8]
    253e:	f7ff fe6f 	bl	2220 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    2542:	7b63      	ldrb	r3, [r4, #13]
    2544:	f023 0302 	bic.w	r3, r3, #2
    2548:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
    254a:	2300      	movs	r3, #0
    254c:	60a3      	str	r3, [r4, #8]
    254e:	e7e1      	b.n	2514 <z_thread_single_abort+0x50>
    2550:	f105 0018 	add.w	r0, r5, #24
    2554:	f001 ffbd 	bl	44d2 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
    2558:	68a8      	ldr	r0, [r5, #8]
    255a:	4629      	mov	r1, r5
    255c:	f7ff fe60 	bl	2220 <z_priq_dumb_remove>
    2560:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
    2562:	60af      	str	r7, [r5, #8]
    2564:	f023 0302 	bic.w	r3, r3, #2
    2568:	736b      	strb	r3, [r5, #13]
    256a:	672f      	str	r7, [r5, #112]	; 0x70
			ready_thread(waiter);
    256c:	4628      	mov	r0, r5
    256e:	f7ff fead 	bl	22cc <ready_thread>
    2572:	e7d6      	b.n	2522 <z_thread_single_abort+0x5e>
    2574:	200007b0 	.word	0x200007b0
    2578:	20000788 	.word	0x20000788

0000257c <unready_thread>:
{
    257c:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    257e:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
    2582:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    2584:	2b00      	cmp	r3, #0
    2586:	da07      	bge.n	2598 <unready_thread+0x1c>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    2588:	4601      	mov	r1, r0
    258a:	4808      	ldr	r0, [pc, #32]	; (25ac <unready_thread+0x30>)
    258c:	f7ff fe48 	bl	2220 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    2590:	7b63      	ldrb	r3, [r4, #13]
    2592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2596:	7363      	strb	r3, [r4, #13]
	update_cache(thread == _current);
    2598:	4b05      	ldr	r3, [pc, #20]	; (25b0 <unready_thread+0x34>)
    259a:	6898      	ldr	r0, [r3, #8]
    259c:	1b03      	subs	r3, r0, r4
    259e:	4258      	negs	r0, r3
    25a0:	4158      	adcs	r0, r3
}
    25a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    25a6:	f7ff be51 	b.w	224c <update_cache>
    25aa:	bf00      	nop
    25ac:	200007b0 	.word	0x200007b0
    25b0:	20000788 	.word	0x20000788

000025b4 <z_tick_sleep.part.21>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
    25b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    25b6:	4606      	mov	r6, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
    25b8:	f001 ffcb 	bl	4552 <z_tick_get_32>
    25bc:	1834      	adds	r4, r6, r0
	__asm__ volatile(
    25be:	f04f 0320 	mov.w	r3, #32
    25c2:	f3ef 8711 	mrs	r7, BASEPRI
    25c6:	f383 8811 	msr	BASEPRI, r3
    25ca:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    25ce:	4d0d      	ldr	r5, [pc, #52]	; (2604 <z_tick_sleep.part.21+0x50>)
    25d0:	4b0d      	ldr	r3, [pc, #52]	; (2608 <z_tick_sleep.part.21+0x54>)
    25d2:	68a8      	ldr	r0, [r5, #8]
    25d4:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
    25d6:	f001 ff0f 	bl	43f8 <z_remove_thread_from_ready_q>
	z_add_thread_timeout(_current, timeout);
    25da:	68a8      	ldr	r0, [r5, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    25dc:	490b      	ldr	r1, [pc, #44]	; (260c <z_tick_sleep.part.21+0x58>)
    25de:	4632      	mov	r2, r6
    25e0:	17f3      	asrs	r3, r6, #31
    25e2:	3018      	adds	r0, #24
    25e4:	f000 f9d4 	bl	2990 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    25e8:	68aa      	ldr	r2, [r5, #8]
	ret = arch_swap(key);
    25ea:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
    25ec:	7b53      	ldrb	r3, [r2, #13]
    25ee:	f043 0310 	orr.w	r3, r3, #16
    25f2:	7353      	strb	r3, [r2, #13]
    25f4:	f7fe fca0 	bl	f38 <arch_swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
    25f8:	f001 ffab 	bl	4552 <z_tick_get_32>
    25fc:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
    25fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    2602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2604:	20000788 	.word	0x20000788
    2608:	200007b8 	.word	0x200007b8
    260c:	000043a1 	.word	0x000043a1

00002610 <pend>:
{
    2610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2614:	4606      	mov	r6, r0
    2616:	4614      	mov	r4, r2
    2618:	461d      	mov	r5, r3
    261a:	f04f 0320 	mov.w	r3, #32
    261e:	f3ef 8711 	mrs	r7, BASEPRI
    2622:	f383 8811 	msr	BASEPRI, r3
    2626:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    262a:	f001 fef5 	bl	4418 <add_to_waitq_locked>
	__asm__ volatile(
    262e:	f387 8811 	msr	BASEPRI, r7
    2632:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    2636:	1c6b      	adds	r3, r5, #1
    2638:	bf08      	it	eq
    263a:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
    263e:	d008      	beq.n	2652 <pend+0x42>
    2640:	4622      	mov	r2, r4
    2642:	462b      	mov	r3, r5
    2644:	f106 0018 	add.w	r0, r6, #24
    2648:	4903      	ldr	r1, [pc, #12]	; (2658 <pend+0x48>)
}
    264a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    264e:	f000 b99f 	b.w	2990 <z_add_timeout>
    2652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2656:	bf00      	nop
    2658:	000043a1 	.word	0x000043a1

0000265c <z_pend_curr>:
{
    265c:	b510      	push	{r4, lr}
    265e:	460c      	mov	r4, r1
	pending_current = _current;
    2660:	4b06      	ldr	r3, [pc, #24]	; (267c <z_pend_curr+0x20>)
{
    2662:	4611      	mov	r1, r2
	pending_current = _current;
    2664:	6898      	ldr	r0, [r3, #8]
    2666:	4b06      	ldr	r3, [pc, #24]	; (2680 <z_pend_curr+0x24>)
    2668:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    266a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    266e:	f7ff ffcf 	bl	2610 <pend>
    2672:	4620      	mov	r0, r4
}
    2674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2678:	f7fe bc5e 	b.w	f38 <arch_swap>
    267c:	20000788 	.word	0x20000788
    2680:	200007b8 	.word	0x200007b8

00002684 <z_set_prio>:
{
    2684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2688:	4604      	mov	r4, r0
	__asm__ volatile(
    268a:	f04f 0320 	mov.w	r3, #32
    268e:	f3ef 8811 	mrs	r8, BASEPRI
    2692:	f383 8811 	msr	BASEPRI, r3
    2696:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    269a:	7b43      	ldrb	r3, [r0, #13]
    269c:	b24e      	sxtb	r6, r1
    269e:	06db      	lsls	r3, r3, #27
    26a0:	d12e      	bne.n	2700 <z_set_prio+0x7c>
		if (need_sched) {
    26a2:	6983      	ldr	r3, [r0, #24]
    26a4:	bb63      	cbnz	r3, 2700 <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
    26a6:	4d18      	ldr	r5, [pc, #96]	; (2708 <z_set_prio+0x84>)
    26a8:	4601      	mov	r1, r0
    26aa:	f105 0728 	add.w	r7, r5, #40	; 0x28
    26ae:	4638      	mov	r0, r7
    26b0:	f7ff fdb6 	bl	2220 <z_priq_dumb_remove>
	return list->head == list;
    26b4:	6aab      	ldr	r3, [r5, #40]	; 0x28
				thread->base.prio = prio;
    26b6:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    26b8:	42bb      	cmp	r3, r7
    26ba:	462a      	mov	r2, r5
    26bc:	d019      	beq.n	26f2 <z_set_prio+0x6e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    26be:	b1c3      	cbz	r3, 26f2 <z_set_prio+0x6e>
    26c0:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
    26c2:	f993 000e 	ldrsb.w	r0, [r3, #14]
    26c6:	42b0      	cmp	r0, r6
    26c8:	dd0e      	ble.n	26e8 <z_set_prio+0x64>
	node->prev = successor->prev;
    26ca:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    26cc:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    26d0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    26d2:	605c      	str	r4, [r3, #4]
			update_cache(1);
    26d4:	2001      	movs	r0, #1
    26d6:	f7ff fdb9 	bl	224c <update_cache>
    26da:	2001      	movs	r0, #1
	__asm__ volatile(
    26dc:	f388 8811 	msr	BASEPRI, r8
    26e0:	f3bf 8f6f 	isb	sy
}
    26e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (node == list->tail) ? NULL : node->next;
    26e8:	4299      	cmp	r1, r3
    26ea:	d002      	beq.n	26f2 <z_set_prio+0x6e>
    26ec:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    26ee:	2b00      	cmp	r3, #0
    26f0:	d1e7      	bne.n	26c2 <z_set_prio+0x3e>
	node->prev = list->tail;
    26f2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
    26f4:	6027      	str	r7, [r4, #0]
	node->prev = list->tail;
    26f6:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    26f8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    26fa:	601c      	str	r4, [r3, #0]
	list->tail = node;
    26fc:	62d4      	str	r4, [r2, #44]	; 0x2c
    26fe:	e7e9      	b.n	26d4 <z_set_prio+0x50>
			thread->base.prio = prio;
    2700:	73a6      	strb	r6, [r4, #14]
    2702:	2000      	movs	r0, #0
    2704:	e7ea      	b.n	26dc <z_set_prio+0x58>
    2706:	bf00      	nop
    2708:	20000788 	.word	0x20000788

0000270c <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    270c:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    270e:	4b04      	ldr	r3, [pc, #16]	; (2720 <z_sched_init+0x14>)
    2710:	4608      	mov	r0, r1
    2712:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    2716:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    271a:	f7ff bd41 	b.w	21a0 <k_sched_time_slice_set>
    271e:	bf00      	nop
    2720:	20000788 	.word	0x20000788

00002724 <z_impl_k_yield>:
{
    2724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
    2726:	4c23      	ldr	r4, [pc, #140]	; (27b4 <z_impl_k_yield+0x90>)
    2728:	4b23      	ldr	r3, [pc, #140]	; (27b8 <z_impl_k_yield+0x94>)
    272a:	68a2      	ldr	r2, [r4, #8]
    272c:	429a      	cmp	r2, r3
    272e:	d029      	beq.n	2784 <z_impl_k_yield+0x60>
	__asm__ volatile(
    2730:	f04f 0320 	mov.w	r3, #32
    2734:	f3ef 8611 	mrs	r6, BASEPRI
    2738:	f383 8811 	msr	BASEPRI, r3
    273c:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
    2740:	f104 0528 	add.w	r5, r4, #40	; 0x28
    2744:	68a1      	ldr	r1, [r4, #8]
    2746:	4628      	mov	r0, r5
    2748:	f7ff fd6a 	bl	2220 <z_priq_dumb_remove>
	return list->head == list;
    274c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
    274e:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2750:	42aa      	cmp	r2, r5
    2752:	d028      	beq.n	27a6 <z_impl_k_yield+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2754:	b33a      	cbz	r2, 27a6 <z_impl_k_yield+0x82>
    2756:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
    2758:	f993 100e 	ldrsb.w	r1, [r3, #14]
    275c:	f992 700e 	ldrsb.w	r7, [r2, #14]
    2760:	428f      	cmp	r7, r1
    2762:	dd1b      	ble.n	279c <z_impl_k_yield+0x78>
	node->prev = successor->prev;
    2764:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    2766:	e9c3 2100 	strd	r2, r1, [r3]
	successor->prev->next = node;
    276a:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    276c:	6053      	str	r3, [r2, #4]
	thread->base.thread_state |= states;
    276e:	7b5a      	ldrb	r2, [r3, #13]
			update_cache(1);
    2770:	2001      	movs	r0, #1
    2772:	f062 027f 	orn	r2, r2, #127	; 0x7f
    2776:	735a      	strb	r2, [r3, #13]
    2778:	f7ff fd68 	bl	224c <update_cache>
	__asm__ volatile(
    277c:	f386 8811 	msr	BASEPRI, r6
    2780:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    2784:	f04f 0320 	mov.w	r3, #32
    2788:	f3ef 8011 	mrs	r0, BASEPRI
    278c:	f383 8811 	msr	BASEPRI, r3
    2790:	f3bf 8f6f 	isb	sy
}
    2794:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    2798:	f7fe bbce 	b.w	f38 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    279c:	4282      	cmp	r2, r0
    279e:	d002      	beq.n	27a6 <z_impl_k_yield+0x82>
    27a0:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    27a2:	2a00      	cmp	r2, #0
    27a4:	d1da      	bne.n	275c <z_impl_k_yield+0x38>
	node->prev = list->tail;
    27a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	node->next = list;
    27a8:	601d      	str	r5, [r3, #0]
	node->prev = list->tail;
    27aa:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
    27ac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    27ae:	6013      	str	r3, [r2, #0]
	list->tail = node;
    27b0:	62e3      	str	r3, [r4, #44]	; 0x2c
    27b2:	e7dc      	b.n	276e <z_impl_k_yield+0x4a>
    27b4:	20000788 	.word	0x20000788
    27b8:	200006a0 	.word	0x200006a0

000027bc <z_impl_k_sleep>:
{
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    27bc:	3101      	adds	r1, #1
    27be:	bf08      	it	eq
    27c0:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    27c4:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    27c6:	d106      	bne.n	27d6 <z_impl_k_sleep+0x1a>
		k_thread_suspend(_current);
    27c8:	4b0b      	ldr	r3, [pc, #44]	; (27f8 <z_impl_k_sleep+0x3c>)
    27ca:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    27cc:	f7ff fe46 	bl	245c <z_impl_k_thread_suspend>
		return (s32_t) K_TICKS_FOREVER;
    27d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	ticks = timeout.ticks;
#endif

	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
    27d4:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
    27d6:	4604      	mov	r4, r0
	if (ticks == 0) {
    27d8:	b948      	cbnz	r0, 27ee <z_impl_k_sleep+0x32>
	z_impl_k_yield();
    27da:	f7ff ffa3 	bl	2724 <z_impl_k_yield>
		} else {
			return (t * to_hz + off) / from_hz;
    27de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    27e2:	fb84 3400 	smull	r3, r4, r4, r0
    27e6:	0bd8      	lsrs	r0, r3, #15
    27e8:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
    27ec:	e7f2      	b.n	27d4 <z_impl_k_sleep+0x18>
    27ee:	f7ff fee1 	bl	25b4 <z_tick_sleep.part.21>
    27f2:	4604      	mov	r4, r0
    27f4:	e7f3      	b.n	27de <z_impl_k_sleep+0x22>
    27f6:	bf00      	nop
    27f8:	20000788 	.word	0x20000788

000027fc <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    27fc:	4b01      	ldr	r3, [pc, #4]	; (2804 <z_impl_k_current_get+0x8>)
    27fe:	6898      	ldr	r0, [r3, #8]
    2800:	4770      	bx	lr
    2802:	bf00      	nop
    2804:	20000788 	.word	0x20000788

00002808 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
    2808:	b5f0      	push	{r4, r5, r6, r7, lr}
	sys_dlist_init(&w->waitq);
    280a:	f100 0528 	add.w	r5, r0, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    280e:	e9c0 550a 	strd	r5, r5, [r0, #40]	; 0x28
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
	thread_base->thread_state = (u8_t)initial_state;
    2812:	2504      	movs	r5, #4
    2814:	7345      	strb	r5, [r0, #13]

	thread_base->prio = priority;

	thread_base->sched_locked = 0U;
    2816:	2500      	movs	r5, #0
{
    2818:	4604      	mov	r4, r0
    281a:	b087      	sub	sp, #28
    281c:	e9dd 670f 	ldrd	r6, r7, [sp, #60]	; 0x3c
	thread_base->prio = priority;
    2820:	7386      	strb	r6, [r0, #14]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    2822:	e9cd 6703 	strd	r6, r7, [sp, #12]
    2826:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	thread_base->user_options = (u8_t)options;
    2828:	7307      	strb	r7, [r0, #12]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    282a:	9602      	str	r6, [sp, #8]
    282c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	thread_base->sched_locked = 0U;
    282e:	73c5      	strb	r5, [r0, #15]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    2830:	9601      	str	r6, [sp, #4]
    2832:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	node->prev = NULL;
    2834:	e9c0 5506 	strd	r5, r5, [r0, #24]
    2838:	9600      	str	r6, [sp, #0]
    283a:	f7fe fbf3 	bl	1024 <arch_new_thread>
	if (!_current) {
    283e:	4b04      	ldr	r3, [pc, #16]	; (2850 <z_setup_new_thread+0x48>)
	new_thread->fn_abort = NULL;
    2840:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
	if (!_current) {
    2844:	689b      	ldr	r3, [r3, #8]
    2846:	b103      	cbz	r3, 284a <z_setup_new_thread+0x42>
	new_thread->resource_pool = _current->resource_pool;
    2848:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    284a:	66a3      	str	r3, [r4, #104]	; 0x68
}
    284c:	b007      	add	sp, #28
    284e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2850:	20000788 	.word	0x20000788

00002854 <z_init_static_threads>:
{
    2854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    2858:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 2918 <z_init_static_threads+0xc4>
    285c:	4d2c      	ldr	r5, [pc, #176]	; (2910 <z_init_static_threads+0xbc>)
    285e:	46c8      	mov	r8, r9
{
    2860:	b089      	sub	sp, #36	; 0x24
	_FOREACH_STATIC_THREAD(thread_data) {
    2862:	454d      	cmp	r5, r9
    2864:	f105 0430 	add.w	r4, r5, #48	; 0x30
    2868:	d30f      	bcc.n	288a <z_init_static_threads+0x36>
	k_sched_lock();
    286a:	f7ff fcc5 	bl	21f8 <k_sched_lock>
			return (u32_t)((t * to_hz + off) / from_hz);
    286e:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    2872:	f240 3ae7 	movw	sl, #999	; 0x3e7
    2876:	f04f 0b00 	mov.w	fp, #0
	_FOREACH_STATIC_THREAD(thread_data) {
    287a:	4c25      	ldr	r4, [pc, #148]	; (2910 <z_init_static_threads+0xbc>)
    287c:	4544      	cmp	r4, r8
    287e:	d321      	bcc.n	28c4 <z_init_static_threads+0x70>
}
    2880:	b009      	add	sp, #36	; 0x24
    2882:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
    2886:	f7ff bd05 	b.w	2294 <k_sched_unlock>
		z_setup_new_thread(
    288a:	f854 3c04 	ldr.w	r3, [r4, #-4]
    288e:	9305      	str	r3, [sp, #20]
    2890:	f854 3c10 	ldr.w	r3, [r4, #-16]
    2894:	9304      	str	r3, [sp, #16]
    2896:	f854 3c14 	ldr.w	r3, [r4, #-20]
    289a:	9303      	str	r3, [sp, #12]
    289c:	f854 3c18 	ldr.w	r3, [r4, #-24]
    28a0:	9302      	str	r3, [sp, #8]
    28a2:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    28a6:	9301      	str	r3, [sp, #4]
    28a8:	f854 3c20 	ldr.w	r3, [r4, #-32]
    28ac:	9300      	str	r3, [sp, #0]
    28ae:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    28b2:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    28b6:	f7ff ffa7 	bl	2808 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    28ba:	f854 3c30 	ldr.w	r3, [r4, #-48]
    28be:	655d      	str	r5, [r3, #84]	; 0x54
    28c0:	4625      	mov	r5, r4
    28c2:	e7ce      	b.n	2862 <z_init_static_threads+0xe>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    28c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    28c6:	1c4b      	adds	r3, r1, #1
    28c8:	d017      	beq.n	28fa <z_init_static_threads+0xa6>
    28ca:	4656      	mov	r6, sl
    28cc:	465f      	mov	r7, fp
					    K_MSEC(thread_data->init_delay));
    28ce:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    28d2:	fbc9 6701 	smlal	r6, r7, r9, r1
    28d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    28da:	2300      	movs	r3, #0
    28dc:	4630      	mov	r0, r6
    28de:	4639      	mov	r1, r7
    28e0:	f7fd fcac 	bl	23c <__aeabi_uldivmod>
    28e4:	2300      	movs	r3, #0
    28e6:	9006      	str	r0, [sp, #24]
    28e8:	9307      	str	r3, [sp, #28]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    28ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    28ee:	4313      	orrs	r3, r2
			schedule_new_thread(thread_data->init_thread,
    28f0:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    28f2:	d104      	bne.n	28fe <z_init_static_threads+0xaa>
	z_sched_start(thread);
    28f4:	4628      	mov	r0, r5
    28f6:	f7ff fd19 	bl	232c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    28fa:	3430      	adds	r4, #48	; 0x30
    28fc:	e7be      	b.n	287c <z_init_static_threads+0x28>
    28fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    2902:	4904      	ldr	r1, [pc, #16]	; (2914 <z_init_static_threads+0xc0>)
    2904:	f105 0018 	add.w	r0, r5, #24
    2908:	f000 f842 	bl	2990 <z_add_timeout>
    290c:	e7f5      	b.n	28fa <z_init_static_threads+0xa6>
    290e:	bf00      	nop
    2910:	200000e4 	.word	0x200000e4
    2914:	000043a1 	.word	0x000043a1
    2918:	200000e4 	.word	0x200000e4

0000291c <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    291c:	4b03      	ldr	r3, [pc, #12]	; (292c <elapsed+0x10>)
    291e:	681b      	ldr	r3, [r3, #0]
    2920:	b90b      	cbnz	r3, 2926 <elapsed+0xa>
    2922:	f7fe b80f 	b.w	944 <z_clock_elapsed>
}
    2926:	2000      	movs	r0, #0
    2928:	4770      	bx	lr
    292a:	bf00      	nop
    292c:	200007c4 	.word	0x200007c4

00002930 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    2930:	6803      	ldr	r3, [r0, #0]
    2932:	b140      	cbz	r0, 2946 <remove_timeout+0x16>
    2934:	4a07      	ldr	r2, [pc, #28]	; (2954 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
    2936:	6852      	ldr	r2, [r2, #4]
    2938:	4290      	cmp	r0, r2
    293a:	d004      	beq.n	2946 <remove_timeout+0x16>
	if (next(t) != NULL) {
    293c:	b11b      	cbz	r3, 2946 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
    293e:	689a      	ldr	r2, [r3, #8]
    2940:	6881      	ldr	r1, [r0, #8]
    2942:	440a      	add	r2, r1
    2944:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
    2946:	6842      	ldr	r2, [r0, #4]
    2948:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    294a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    294c:	2300      	movs	r3, #0
	node->prev = NULL;
    294e:	e9c0 3300 	strd	r3, r3, [r0]
}
    2952:	4770      	bx	lr
    2954:	2000004c 	.word	0x2000004c

00002958 <next_timeout>:
	return list->head == list;
    2958:	4b0b      	ldr	r3, [pc, #44]	; (2988 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
    295a:	b510      	push	{r4, lr}
    295c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    295e:	429c      	cmp	r4, r3
    2960:	bf08      	it	eq
    2962:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
    2964:	f7ff ffda 	bl	291c <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    2968:	b154      	cbz	r4, 2980 <next_timeout+0x28>
    296a:	68a3      	ldr	r3, [r4, #8]
    296c:	1a18      	subs	r0, r3, r0
    296e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    2972:	4b06      	ldr	r3, [pc, #24]	; (298c <next_timeout+0x34>)
    2974:	691b      	ldr	r3, [r3, #16]
    2976:	b113      	cbz	r3, 297e <next_timeout+0x26>
    2978:	4298      	cmp	r0, r3
    297a:	bfa8      	it	ge
    297c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    297e:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    2980:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    2984:	e7f5      	b.n	2972 <next_timeout+0x1a>
    2986:	bf00      	nop
    2988:	2000004c 	.word	0x2000004c
    298c:	20000788 	.word	0x20000788

00002990 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    2990:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2994:	9101      	str	r1, [sp, #4]
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    2996:	1c59      	adds	r1, r3, #1
    2998:	bf08      	it	eq
    299a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    299e:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    29a0:	d061      	beq.n	2a66 <z_add_timeout+0xd6>
	}

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
    29a2:	1c54      	adds	r4, r2, #1
    29a4:	f143 0500 	adc.w	r5, r3, #0

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    29a8:	f06f 0301 	mvn.w	r3, #1
    29ac:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    29b0:	ebb3 0804 	subs.w	r8, r3, r4
    29b4:	eb6b 0905 	sbc.w	r9, fp, r5
    29b8:	f1b8 0f00 	cmp.w	r8, #0
    29bc:	f179 0300 	sbcs.w	r3, r9, #0
    29c0:	db0f      	blt.n	29e2 <z_add_timeout+0x52>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
    29c2:	f7ff ffab 	bl	291c <elapsed>
    29c6:	f06f 0301 	mvn.w	r3, #1
    29ca:	4a2c      	ldr	r2, [pc, #176]	; (2a7c <z_add_timeout+0xec>)
    29cc:	e9d2 1c00 	ldrd	r1, ip, [r2]
    29d0:	1a5b      	subs	r3, r3, r1
    29d2:	eb6b 020c 	sbc.w	r2, fp, ip
    29d6:	1b1e      	subs	r6, r3, r4
    29d8:	eb62 0705 	sbc.w	r7, r2, r5
    29dc:	1a34      	subs	r4, r6, r0
    29de:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    29e2:	9b01      	ldr	r3, [sp, #4]
    29e4:	f8ca 300c 	str.w	r3, [sl, #12]
    29e8:	f04f 0320 	mov.w	r3, #32
    29ec:	f3ef 8611 	mrs	r6, BASEPRI
    29f0:	f383 8811 	msr	BASEPRI, r3
    29f4:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    29f8:	f7ff ff90 	bl	291c <elapsed>
	ticks = MAX(1, ticks);
    29fc:	2c01      	cmp	r4, #1
    29fe:	f175 0300 	sbcs.w	r3, r5, #0
    2a02:	bfb8      	it	lt
    2a04:	2401      	movlt	r4, #1
	return list->head == list;
    2a06:	4b1e      	ldr	r3, [pc, #120]	; (2a80 <z_add_timeout+0xf0>)
		to->dticks = ticks + elapsed();
    2a08:	4404      	add	r4, r0
    2a0a:	681a      	ldr	r2, [r3, #0]
    2a0c:	f8ca 4008 	str.w	r4, [sl, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2a10:	429a      	cmp	r2, r3
    2a12:	d001      	beq.n	2a18 <z_add_timeout+0x88>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    2a14:	685c      	ldr	r4, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    2a16:	b952      	cbnz	r2, 2a2e <z_add_timeout+0x9e>
	node->prev = list->tail;
    2a18:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    2a1a:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
    2a1e:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
    2a22:	685a      	ldr	r2, [r3, #4]
    2a24:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    2a28:	f8c3 a004 	str.w	sl, [r3, #4]
    2a2c:	e00d      	b.n	2a4a <z_add_timeout+0xba>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
    2a2e:	6890      	ldr	r0, [r2, #8]
    2a30:	f8da 1008 	ldr.w	r1, [sl, #8]
    2a34:	4288      	cmp	r0, r1
    2a36:	dd19      	ble.n	2a6c <z_add_timeout+0xdc>
				t->dticks -= to->dticks;
    2a38:	1a41      	subs	r1, r0, r1
    2a3a:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
    2a3c:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    2a3e:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
    2a42:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    2a46:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
    2a4a:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2a4c:	429a      	cmp	r2, r3
    2a4e:	d006      	beq.n	2a5e <z_add_timeout+0xce>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    2a50:	4592      	cmp	sl, r2
    2a52:	d104      	bne.n	2a5e <z_add_timeout+0xce>
			z_clock_set_timeout(next_timeout(), false);
    2a54:	f7ff ff80 	bl	2958 <next_timeout>
    2a58:	2100      	movs	r1, #0
    2a5a:	f7fd ff0f 	bl	87c <z_clock_set_timeout>
	__asm__ volatile(
    2a5e:	f386 8811 	msr	BASEPRI, r6
    2a62:	f3bf 8f6f 	isb	sy
		}
	}
}
    2a66:	b003      	add	sp, #12
    2a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
    2a6c:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    2a6e:	4294      	cmp	r4, r2
    2a70:	f8ca 1008 	str.w	r1, [sl, #8]
    2a74:	d0d0      	beq.n	2a18 <z_add_timeout+0x88>
    2a76:	6812      	ldr	r2, [r2, #0]
    2a78:	e7cd      	b.n	2a16 <z_add_timeout+0x86>
    2a7a:	bf00      	nop
    2a7c:	20000148 	.word	0x20000148
    2a80:	2000004c 	.word	0x2000004c

00002a84 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
    2a84:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    2a88:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    2a8a:	f7ff fcb1 	bl	23f0 <z_time_slice>
	__asm__ volatile(
    2a8e:	f04f 0320 	mov.w	r3, #32
    2a92:	f3ef 8511 	mrs	r5, BASEPRI
    2a96:	f383 8811 	msr	BASEPRI, r3
    2a9a:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    2a9e:	4f21      	ldr	r7, [pc, #132]	; (2b24 <z_clock_announce+0xa0>)
    2aa0:	4e21      	ldr	r6, [pc, #132]	; (2b28 <z_clock_announce+0xa4>)
    2aa2:	46b8      	mov	r8, r7
	return list->head == list;
    2aa4:	f8df 9084 	ldr.w	r9, [pc, #132]	; 2b2c <z_clock_announce+0xa8>
    2aa8:	6034      	str	r4, [r6, #0]
    2aaa:	f8d9 4000 	ldr.w	r4, [r9]
    2aae:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2ab0:	454c      	cmp	r4, r9
    2ab2:	e9d7 bc00 	ldrd	fp, ip, [r7]
    2ab6:	d005      	beq.n	2ac4 <z_clock_announce+0x40>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    2ab8:	b124      	cbz	r4, 2ac4 <z_clock_announce+0x40>
    2aba:	68a3      	ldr	r3, [r4, #8]
    2abc:	4293      	cmp	r3, r2
    2abe:	dd14      	ble.n	2aea <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    2ac0:	1a9b      	subs	r3, r3, r2
    2ac2:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    2ac4:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    2ac6:	eb1b 0002 	adds.w	r0, fp, r2
    2aca:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
    2ace:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
    2ad2:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
    2ad4:	f7ff ff40 	bl	2958 <next_timeout>
    2ad8:	4621      	mov	r1, r4
    2ada:	f7fd fecf 	bl	87c <z_clock_set_timeout>
	__asm__ volatile(
    2ade:	f385 8811 	msr	BASEPRI, r5
    2ae2:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    2ae6:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
    2aea:	eb1b 0003 	adds.w	r0, fp, r3
    2aee:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
    2af2:	1ad3      	subs	r3, r2, r3
    2af4:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    2af6:	2300      	movs	r3, #0
		curr_tick += dt;
    2af8:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
    2afc:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
    2afe:	4620      	mov	r0, r4
    2b00:	f7ff ff16 	bl	2930 <remove_timeout>
    2b04:	f385 8811 	msr	BASEPRI, r5
    2b08:	f3bf 8f6f 	isb	sy
		t->fn(t);
    2b0c:	68e3      	ldr	r3, [r4, #12]
    2b0e:	4798      	blx	r3
	__asm__ volatile(
    2b10:	f04f 0320 	mov.w	r3, #32
    2b14:	f3ef 8511 	mrs	r5, BASEPRI
    2b18:	f383 8811 	msr	BASEPRI, r3
    2b1c:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    2b20:	e7c3      	b.n	2aaa <z_clock_announce+0x26>
    2b22:	bf00      	nop
    2b24:	20000148 	.word	0x20000148
    2b28:	200007c4 	.word	0x200007c4
    2b2c:	2000004c 	.word	0x2000004c

00002b30 <z_tick_get>:

s64_t z_tick_get(void)
{
    2b30:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
    2b34:	f04f 0320 	mov.w	r3, #32
    2b38:	f3ef 8411 	mrs	r4, BASEPRI
    2b3c:	f383 8811 	msr	BASEPRI, r3
    2b40:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
    2b44:	f7fd fefe 	bl	944 <z_clock_elapsed>
    2b48:	4b07      	ldr	r3, [pc, #28]	; (2b68 <z_tick_get+0x38>)
    2b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
    2b4e:	eb12 0b00 	adds.w	fp, r2, r0
    2b52:	f143 0c00 	adc.w	ip, r3, #0
    2b56:	4658      	mov	r0, fp
    2b58:	4661      	mov	r1, ip
	__asm__ volatile(
    2b5a:	f384 8811 	msr	BASEPRI, r4
    2b5e:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    2b62:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
    2b66:	bf00      	nop
    2b68:	20000148 	.word	0x20000148

00002b6c <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(struct device *unused)
{
    2b6c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    2b6e:	4c06      	ldr	r4, [pc, #24]	; (2b88 <statics_init+0x1c>)
    2b70:	4d06      	ldr	r5, [pc, #24]	; (2b8c <statics_init+0x20>)
    2b72:	42ac      	cmp	r4, r5
    2b74:	d301      	bcc.n	2b7a <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
    2b76:	2000      	movs	r0, #0
    2b78:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    2b7a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    2b7e:	4620      	mov	r0, r4
    2b80:	f001 fceb 	bl	455a <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    2b84:	3414      	adds	r4, #20
    2b86:	e7f4      	b.n	2b72 <statics_init+0x6>
    2b88:	200000e4 	.word	0x200000e4
    2b8c:	200000e4 	.word	0x200000e4

00002b90 <CC_PalMemCopyPlat>:
    2b90:	f001 babc 	b.w	410c <memmove>

00002b94 <CC_PalMemSetZeroPlat>:
    2b94:	460a      	mov	r2, r1
    2b96:	2100      	movs	r1, #0
    2b98:	f001 baf9 	b.w	418e <memset>

00002b9c <CC_PalInit>:
    2b9c:	b510      	push	{r4, lr}
    2b9e:	4811      	ldr	r0, [pc, #68]	; (2be4 <CC_PalInit+0x48>)
    2ba0:	f000 f848 	bl	2c34 <CC_PalMutexCreate>
    2ba4:	b100      	cbz	r0, 2ba8 <CC_PalInit+0xc>
    2ba6:	bd10      	pop	{r4, pc}
    2ba8:	480f      	ldr	r0, [pc, #60]	; (2be8 <CC_PalInit+0x4c>)
    2baa:	f000 f843 	bl	2c34 <CC_PalMutexCreate>
    2bae:	2800      	cmp	r0, #0
    2bb0:	d1f9      	bne.n	2ba6 <CC_PalInit+0xa>
    2bb2:	4c0e      	ldr	r4, [pc, #56]	; (2bec <CC_PalInit+0x50>)
    2bb4:	4620      	mov	r0, r4
    2bb6:	f000 f83d 	bl	2c34 <CC_PalMutexCreate>
    2bba:	2800      	cmp	r0, #0
    2bbc:	d1f3      	bne.n	2ba6 <CC_PalInit+0xa>
    2bbe:	4b0c      	ldr	r3, [pc, #48]	; (2bf0 <CC_PalInit+0x54>)
    2bc0:	480c      	ldr	r0, [pc, #48]	; (2bf4 <CC_PalInit+0x58>)
    2bc2:	601c      	str	r4, [r3, #0]
    2bc4:	f000 f836 	bl	2c34 <CC_PalMutexCreate>
    2bc8:	4601      	mov	r1, r0
    2bca:	2800      	cmp	r0, #0
    2bcc:	d1eb      	bne.n	2ba6 <CC_PalInit+0xa>
    2bce:	f000 f82d 	bl	2c2c <CC_PalDmaInit>
    2bd2:	4604      	mov	r4, r0
    2bd4:	b108      	cbz	r0, 2bda <CC_PalInit+0x3e>
    2bd6:	4620      	mov	r0, r4
    2bd8:	bd10      	pop	{r4, pc}
    2bda:	f000 f851 	bl	2c80 <CC_PalPowerSaveModeInit>
    2bde:	4620      	mov	r0, r4
    2be0:	e7fa      	b.n	2bd8 <CC_PalInit+0x3c>
    2be2:	bf00      	nop
    2be4:	20000060 	.word	0x20000060
    2be8:	20000054 	.word	0x20000054
    2bec:	2000005c 	.word	0x2000005c
    2bf0:	20000064 	.word	0x20000064
    2bf4:	20000058 	.word	0x20000058

00002bf8 <CC_PalTerminate>:
    2bf8:	b508      	push	{r3, lr}
    2bfa:	4808      	ldr	r0, [pc, #32]	; (2c1c <CC_PalTerminate+0x24>)
    2bfc:	f000 f824 	bl	2c48 <CC_PalMutexDestroy>
    2c00:	4807      	ldr	r0, [pc, #28]	; (2c20 <CC_PalTerminate+0x28>)
    2c02:	f000 f821 	bl	2c48 <CC_PalMutexDestroy>
    2c06:	4807      	ldr	r0, [pc, #28]	; (2c24 <CC_PalTerminate+0x2c>)
    2c08:	f000 f81e 	bl	2c48 <CC_PalMutexDestroy>
    2c0c:	4806      	ldr	r0, [pc, #24]	; (2c28 <CC_PalTerminate+0x30>)
    2c0e:	f000 f81b 	bl	2c48 <CC_PalMutexDestroy>
    2c12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    2c16:	f000 b80b 	b.w	2c30 <CC_PalDmaTerminate>
    2c1a:	bf00      	nop
    2c1c:	20000060 	.word	0x20000060
    2c20:	20000054 	.word	0x20000054
    2c24:	2000005c 	.word	0x2000005c
    2c28:	20000058 	.word	0x20000058

00002c2c <CC_PalDmaInit>:
    2c2c:	2000      	movs	r0, #0
    2c2e:	4770      	bx	lr

00002c30 <CC_PalDmaTerminate>:
    2c30:	4770      	bx	lr
    2c32:	bf00      	nop

00002c34 <CC_PalMutexCreate>:
    2c34:	b508      	push	{r3, lr}
    2c36:	4b03      	ldr	r3, [pc, #12]	; (2c44 <CC_PalMutexCreate+0x10>)
    2c38:	6802      	ldr	r2, [r0, #0]
    2c3a:	681b      	ldr	r3, [r3, #0]
    2c3c:	6810      	ldr	r0, [r2, #0]
    2c3e:	4798      	blx	r3
    2c40:	2000      	movs	r0, #0
    2c42:	bd08      	pop	{r3, pc}
    2c44:	20000070 	.word	0x20000070

00002c48 <CC_PalMutexDestroy>:
    2c48:	b508      	push	{r3, lr}
    2c4a:	4b03      	ldr	r3, [pc, #12]	; (2c58 <CC_PalMutexDestroy+0x10>)
    2c4c:	6802      	ldr	r2, [r0, #0]
    2c4e:	685b      	ldr	r3, [r3, #4]
    2c50:	6810      	ldr	r0, [r2, #0]
    2c52:	4798      	blx	r3
    2c54:	2000      	movs	r0, #0
    2c56:	bd08      	pop	{r3, pc}
    2c58:	20000070 	.word	0x20000070

00002c5c <CC_PalMutexLock>:
    2c5c:	6802      	ldr	r2, [r0, #0]
    2c5e:	4b02      	ldr	r3, [pc, #8]	; (2c68 <CC_PalMutexLock+0xc>)
    2c60:	6810      	ldr	r0, [r2, #0]
    2c62:	689b      	ldr	r3, [r3, #8]
    2c64:	4718      	bx	r3
    2c66:	bf00      	nop
    2c68:	20000070 	.word	0x20000070

00002c6c <CC_PalMutexUnlock>:
    2c6c:	b508      	push	{r3, lr}
    2c6e:	4b03      	ldr	r3, [pc, #12]	; (2c7c <CC_PalMutexUnlock+0x10>)
    2c70:	6802      	ldr	r2, [r0, #0]
    2c72:	68db      	ldr	r3, [r3, #12]
    2c74:	6810      	ldr	r0, [r2, #0]
    2c76:	4798      	blx	r3
    2c78:	2000      	movs	r0, #0
    2c7a:	bd08      	pop	{r3, pc}
    2c7c:	20000070 	.word	0x20000070

00002c80 <CC_PalPowerSaveModeInit>:
    2c80:	b570      	push	{r4, r5, r6, lr}
    2c82:	4c09      	ldr	r4, [pc, #36]	; (2ca8 <CC_PalPowerSaveModeInit+0x28>)
    2c84:	4d09      	ldr	r5, [pc, #36]	; (2cac <CC_PalPowerSaveModeInit+0x2c>)
    2c86:	6920      	ldr	r0, [r4, #16]
    2c88:	68ab      	ldr	r3, [r5, #8]
    2c8a:	4798      	blx	r3
    2c8c:	b118      	cbz	r0, 2c96 <CC_PalPowerSaveModeInit+0x16>
    2c8e:	4b08      	ldr	r3, [pc, #32]	; (2cb0 <CC_PalPowerSaveModeInit+0x30>)
    2c90:	4808      	ldr	r0, [pc, #32]	; (2cb4 <CC_PalPowerSaveModeInit+0x34>)
    2c92:	685b      	ldr	r3, [r3, #4]
    2c94:	4798      	blx	r3
    2c96:	2100      	movs	r1, #0
    2c98:	4a07      	ldr	r2, [pc, #28]	; (2cb8 <CC_PalPowerSaveModeInit+0x38>)
    2c9a:	68eb      	ldr	r3, [r5, #12]
    2c9c:	6011      	str	r1, [r2, #0]
    2c9e:	6920      	ldr	r0, [r4, #16]
    2ca0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2ca4:	4718      	bx	r3
    2ca6:	bf00      	nop
    2ca8:	20000080 	.word	0x20000080
    2cac:	20000070 	.word	0x20000070
    2cb0:	20000068 	.word	0x20000068
    2cb4:	000049c0 	.word	0x000049c0
    2cb8:	200007c8 	.word	0x200007c8

00002cbc <CC_PalPowerSaveModeSelect>:
    2cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2cbe:	4c1a      	ldr	r4, [pc, #104]	; (2d28 <CC_PalPowerSaveModeSelect+0x6c>)
    2cc0:	4d1a      	ldr	r5, [pc, #104]	; (2d2c <CC_PalPowerSaveModeSelect+0x70>)
    2cc2:	4607      	mov	r7, r0
    2cc4:	68ab      	ldr	r3, [r5, #8]
    2cc6:	6920      	ldr	r0, [r4, #16]
    2cc8:	4798      	blx	r3
    2cca:	b9e8      	cbnz	r0, 2d08 <CC_PalPowerSaveModeSelect+0x4c>
    2ccc:	4e18      	ldr	r6, [pc, #96]	; (2d30 <CC_PalPowerSaveModeSelect+0x74>)
    2cce:	6833      	ldr	r3, [r6, #0]
    2cd0:	b97f      	cbnz	r7, 2cf2 <CC_PalPowerSaveModeSelect+0x36>
    2cd2:	b93b      	cbnz	r3, 2ce4 <CC_PalPowerSaveModeSelect+0x28>
    2cd4:	2001      	movs	r0, #1
    2cd6:	4a17      	ldr	r2, [pc, #92]	; (2d34 <CC_PalPowerSaveModeSelect+0x78>)
    2cd8:	4917      	ldr	r1, [pc, #92]	; (2d38 <CC_PalPowerSaveModeSelect+0x7c>)
    2cda:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    2cde:	680a      	ldr	r2, [r1, #0]
    2ce0:	2a00      	cmp	r2, #0
    2ce2:	d1fc      	bne.n	2cde <CC_PalPowerSaveModeSelect+0x22>
    2ce4:	3301      	adds	r3, #1
    2ce6:	6033      	str	r3, [r6, #0]
    2ce8:	68eb      	ldr	r3, [r5, #12]
    2cea:	6920      	ldr	r0, [r4, #16]
    2cec:	4798      	blx	r3
    2cee:	2000      	movs	r0, #0
    2cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2cf2:	2b00      	cmp	r3, #0
    2cf4:	d0f8      	beq.n	2ce8 <CC_PalPowerSaveModeSelect+0x2c>
    2cf6:	2b01      	cmp	r3, #1
    2cf8:	d008      	beq.n	2d0c <CC_PalPowerSaveModeSelect+0x50>
    2cfa:	3b01      	subs	r3, #1
    2cfc:	6033      	str	r3, [r6, #0]
    2cfe:	6920      	ldr	r0, [r4, #16]
    2d00:	68eb      	ldr	r3, [r5, #12]
    2d02:	4798      	blx	r3
    2d04:	2000      	movs	r0, #0
    2d06:	e7f3      	b.n	2cf0 <CC_PalPowerSaveModeSelect+0x34>
    2d08:	480c      	ldr	r0, [pc, #48]	; (2d3c <CC_PalPowerSaveModeSelect+0x80>)
    2d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d0c:	4a0a      	ldr	r2, [pc, #40]	; (2d38 <CC_PalPowerSaveModeSelect+0x7c>)
    2d0e:	6813      	ldr	r3, [r2, #0]
    2d10:	2b00      	cmp	r3, #0
    2d12:	d1fc      	bne.n	2d0e <CC_PalPowerSaveModeSelect+0x52>
    2d14:	4a07      	ldr	r2, [pc, #28]	; (2d34 <CC_PalPowerSaveModeSelect+0x78>)
    2d16:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    2d1a:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    2d1e:	f000 f821 	bl	2d64 <CC_HalMaskInterrupt>
    2d22:	6833      	ldr	r3, [r6, #0]
    2d24:	e7e9      	b.n	2cfa <CC_PalPowerSaveModeSelect+0x3e>
    2d26:	bf00      	nop
    2d28:	20000080 	.word	0x20000080
    2d2c:	20000070 	.word	0x20000070
    2d30:	200007c8 	.word	0x200007c8
    2d34:	50840000 	.word	0x50840000
    2d38:	50841910 	.word	0x50841910
    2d3c:	ffff8fe9 	.word	0xffff8fe9

00002d40 <CC_HalInit>:
    2d40:	2000      	movs	r0, #0
    2d42:	4770      	bx	lr

00002d44 <CC_HalTerminate>:
    2d44:	2000      	movs	r0, #0
    2d46:	4770      	bx	lr

00002d48 <CC_HalClearInterruptBit>:
    2d48:	0543      	lsls	r3, r0, #21
    2d4a:	d503      	bpl.n	2d54 <CC_HalClearInterruptBit+0xc>
    2d4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2d50:	4b02      	ldr	r3, [pc, #8]	; (2d5c <CC_HalClearInterruptBit+0x14>)
    2d52:	601a      	str	r2, [r3, #0]
    2d54:	4b02      	ldr	r3, [pc, #8]	; (2d60 <CC_HalClearInterruptBit+0x18>)
    2d56:	6018      	str	r0, [r3, #0]
    2d58:	4770      	bx	lr
    2d5a:	bf00      	nop
    2d5c:	50841108 	.word	0x50841108
    2d60:	50841a08 	.word	0x50841a08

00002d64 <CC_HalMaskInterrupt>:
    2d64:	4b01      	ldr	r3, [pc, #4]	; (2d6c <CC_HalMaskInterrupt+0x8>)
    2d66:	6018      	str	r0, [r3, #0]
    2d68:	4770      	bx	lr
    2d6a:	bf00      	nop
    2d6c:	50841a04 	.word	0x50841a04

00002d70 <CC_HalWaitInterruptRND>:
    2d70:	b108      	cbz	r0, 2d76 <CC_HalWaitInterruptRND+0x6>
    2d72:	f000 b803 	b.w	2d7c <CC_PalWaitInterruptRND>
    2d76:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
    2d7a:	4770      	bx	lr

00002d7c <CC_PalWaitInterruptRND>:
    2d7c:	4602      	mov	r2, r0
    2d7e:	4807      	ldr	r0, [pc, #28]	; (2d9c <CC_PalWaitInterruptRND+0x20>)
    2d80:	6803      	ldr	r3, [r0, #0]
    2d82:	4213      	tst	r3, r2
    2d84:	d0fc      	beq.n	2d80 <CC_PalWaitInterruptRND+0x4>
    2d86:	b121      	cbz	r1, 2d92 <CC_PalWaitInterruptRND+0x16>
    2d88:	4b05      	ldr	r3, [pc, #20]	; (2da0 <CC_PalWaitInterruptRND+0x24>)
    2d8a:	4806      	ldr	r0, [pc, #24]	; (2da4 <CC_PalWaitInterruptRND+0x28>)
    2d8c:	681b      	ldr	r3, [r3, #0]
    2d8e:	600b      	str	r3, [r1, #0]
    2d90:	6003      	str	r3, [r0, #0]
    2d92:	4b05      	ldr	r3, [pc, #20]	; (2da8 <CC_PalWaitInterruptRND+0x2c>)
    2d94:	2000      	movs	r0, #0
    2d96:	601a      	str	r2, [r3, #0]
    2d98:	4770      	bx	lr
    2d9a:	bf00      	nop
    2d9c:	50841a00 	.word	0x50841a00
    2da0:	50841104 	.word	0x50841104
    2da4:	50841108 	.word	0x50841108
    2da8:	50841a08 	.word	0x50841a08

00002dac <mbedtls_platform_setup>:
    2dac:	f000 b8a0 	b.w	2ef0 <nrf_cc310_platform_init>

00002db0 <mbedtls_platform_zeroize>:
    2db0:	b130      	cbz	r0, 2dc0 <mbedtls_platform_zeroize+0x10>
    2db2:	b129      	cbz	r1, 2dc0 <mbedtls_platform_zeroize+0x10>
    2db4:	2300      	movs	r3, #0
    2db6:	4401      	add	r1, r0
    2db8:	7003      	strb	r3, [r0, #0]
    2dba:	3001      	adds	r0, #1
    2dbc:	4281      	cmp	r1, r0
    2dbe:	d1fb      	bne.n	2db8 <mbedtls_platform_zeroize+0x8>
    2dc0:	4770      	bx	lr
    2dc2:	bf00      	nop

00002dc4 <mbedtls_hardware_poll>:
    2dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2dc8:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
    2dcc:	460f      	mov	r7, r1
    2dce:	9205      	str	r2, [sp, #20]
    2dd0:	2100      	movs	r1, #0
    2dd2:	4614      	mov	r4, r2
    2dd4:	a812      	add	r0, sp, #72	; 0x48
    2dd6:	f44f 7208 	mov.w	r2, #544	; 0x220
    2dda:	461e      	mov	r6, r3
    2ddc:	f001 f9d7 	bl	418e <memset>
    2de0:	2300      	movs	r3, #0
    2de2:	a808      	add	r0, sp, #32
    2de4:	4619      	mov	r1, r3
    2de6:	2228      	movs	r2, #40	; 0x28
    2de8:	9306      	str	r3, [sp, #24]
    2dea:	f001 f9d0 	bl	418e <memset>
    2dee:	2f00      	cmp	r7, #0
    2df0:	d03c      	beq.n	2e6c <mbedtls_hardware_poll+0xa8>
    2df2:	2e00      	cmp	r6, #0
    2df4:	d03a      	beq.n	2e6c <mbedtls_hardware_poll+0xa8>
    2df6:	2c00      	cmp	r4, #0
    2df8:	d038      	beq.n	2e6c <mbedtls_hardware_poll+0xa8>
    2dfa:	2104      	movs	r1, #4
    2dfc:	a806      	add	r0, sp, #24
    2dfe:	f7ff fec9 	bl	2b94 <CC_PalMemSetZeroPlat>
    2e02:	a808      	add	r0, sp, #32
    2e04:	2128      	movs	r1, #40	; 0x28
    2e06:	f7ff fec5 	bl	2b94 <CC_PalMemSetZeroPlat>
    2e0a:	a808      	add	r0, sp, #32
    2e0c:	f000 f832 	bl	2e74 <RNG_PLAT_SetUserRngParameters>
    2e10:	b178      	cbz	r0, 2e32 <mbedtls_hardware_poll+0x6e>
    2e12:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    2e16:	a812      	add	r0, sp, #72	; 0x48
    2e18:	f44f 7108 	mov.w	r1, #544	; 0x220
    2e1c:	f7ff ffc8 	bl	2db0 <mbedtls_platform_zeroize>
    2e20:	a806      	add	r0, sp, #24
    2e22:	2104      	movs	r1, #4
    2e24:	f7ff ffc4 	bl	2db0 <mbedtls_platform_zeroize>
    2e28:	4628      	mov	r0, r5
    2e2a:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
    2e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2e32:	ab12      	add	r3, sp, #72	; 0x48
    2e34:	f10d 081c 	add.w	r8, sp, #28
    2e38:	9003      	str	r0, [sp, #12]
    2e3a:	e9cd 6301 	strd	r6, r3, [sp, #4]
    2e3e:	4602      	mov	r2, r0
    2e40:	ab05      	add	r3, sp, #20
    2e42:	a908      	add	r1, sp, #32
    2e44:	f8cd 8000 	str.w	r8, [sp]
    2e48:	a806      	add	r0, sp, #24
    2e4a:	f000 fce9 	bl	3820 <LLF_RND_GetTrngSource>
    2e4e:	2800      	cmp	r0, #0
    2e50:	d1df      	bne.n	2e12 <mbedtls_hardware_poll+0x4e>
    2e52:	6833      	ldr	r3, [r6, #0]
    2e54:	42a3      	cmp	r3, r4
    2e56:	d3dc      	bcc.n	2e12 <mbedtls_hardware_poll+0x4e>
    2e58:	f8d8 1000 	ldr.w	r1, [r8]
    2e5c:	4605      	mov	r5, r0
    2e5e:	3108      	adds	r1, #8
    2e60:	4638      	mov	r0, r7
    2e62:	4622      	mov	r2, r4
    2e64:	f7ff fe94 	bl	2b90 <CC_PalMemCopyPlat>
    2e68:	6034      	str	r4, [r6, #0]
    2e6a:	e7d4      	b.n	2e16 <mbedtls_hardware_poll+0x52>
    2e6c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    2e70:	e7da      	b.n	2e28 <mbedtls_hardware_poll+0x64>
    2e72:	bf00      	nop

00002e74 <RNG_PLAT_SetUserRngParameters>:
    2e74:	231c      	movs	r3, #28
    2e76:	b530      	push	{r4, r5, lr}
    2e78:	b083      	sub	sp, #12
    2e7a:	a902      	add	r1, sp, #8
    2e7c:	f841 3d04 	str.w	r3, [r1, #-4]!
    2e80:	4604      	mov	r4, r0
    2e82:	f000 f9b1 	bl	31e8 <CC_PalTrngParamGet>
    2e86:	4605      	mov	r5, r0
    2e88:	b9d8      	cbnz	r0, 2ec2 <RNG_PLAT_SetUserRngParameters+0x4e>
    2e8a:	9b01      	ldr	r3, [sp, #4]
    2e8c:	2b1c      	cmp	r3, #28
    2e8e:	d11b      	bne.n	2ec8 <RNG_PLAT_SetUserRngParameters+0x54>
    2e90:	e9d4 3200 	ldrd	r3, r2, [r4]
    2e94:	2101      	movs	r1, #1
    2e96:	3300      	adds	r3, #0
    2e98:	61e1      	str	r1, [r4, #28]
    2e9a:	bf18      	it	ne
    2e9c:	2301      	movne	r3, #1
    2e9e:	b10a      	cbz	r2, 2ea4 <RNG_PLAT_SetUserRngParameters+0x30>
    2ea0:	f043 0302 	orr.w	r3, r3, #2
    2ea4:	68a2      	ldr	r2, [r4, #8]
    2ea6:	b932      	cbnz	r2, 2eb6 <RNG_PLAT_SetUserRngParameters+0x42>
    2ea8:	68e2      	ldr	r2, [r4, #12]
    2eaa:	b9aa      	cbnz	r2, 2ed8 <RNG_PLAT_SetUserRngParameters+0x64>
    2eac:	e9c4 3208 	strd	r3, r2, [r4, #32]
    2eb0:	b93b      	cbnz	r3, 2ec2 <RNG_PLAT_SetUserRngParameters+0x4e>
    2eb2:	4d0d      	ldr	r5, [pc, #52]	; (2ee8 <RNG_PLAT_SetUserRngParameters+0x74>)
    2eb4:	e009      	b.n	2eca <RNG_PLAT_SetUserRngParameters+0x56>
    2eb6:	68e2      	ldr	r2, [r4, #12]
    2eb8:	f043 0304 	orr.w	r3, r3, #4
    2ebc:	b962      	cbnz	r2, 2ed8 <RNG_PLAT_SetUserRngParameters+0x64>
    2ebe:	e9c4 3208 	strd	r3, r2, [r4, #32]
    2ec2:	4628      	mov	r0, r5
    2ec4:	b003      	add	sp, #12
    2ec6:	bd30      	pop	{r4, r5, pc}
    2ec8:	4d08      	ldr	r5, [pc, #32]	; (2eec <RNG_PLAT_SetUserRngParameters+0x78>)
    2eca:	4620      	mov	r0, r4
    2ecc:	211c      	movs	r1, #28
    2ece:	f7ff fe61 	bl	2b94 <CC_PalMemSetZeroPlat>
    2ed2:	4628      	mov	r0, r5
    2ed4:	b003      	add	sp, #12
    2ed6:	bd30      	pop	{r4, r5, pc}
    2ed8:	2200      	movs	r2, #0
    2eda:	4628      	mov	r0, r5
    2edc:	f043 0308 	orr.w	r3, r3, #8
    2ee0:	e9c4 3208 	strd	r3, r2, [r4, #32]
    2ee4:	b003      	add	sp, #12
    2ee6:	bd30      	pop	{r4, r5, pc}
    2ee8:	00f00c0e 	.word	0x00f00c0e
    2eec:	00f00c37 	.word	0x00f00c37

00002ef0 <nrf_cc310_platform_init>:
    2ef0:	b510      	push	{r4, lr}
    2ef2:	4c0c      	ldr	r4, [pc, #48]	; (2f24 <nrf_cc310_platform_init+0x34>)
    2ef4:	6823      	ldr	r3, [r4, #0]
    2ef6:	b113      	cbz	r3, 2efe <nrf_cc310_platform_init+0xe>
    2ef8:	4b0b      	ldr	r3, [pc, #44]	; (2f28 <nrf_cc310_platform_init+0x38>)
    2efa:	681b      	ldr	r3, [r3, #0]
    2efc:	b96b      	cbnz	r3, 2f1a <nrf_cc310_platform_init+0x2a>
    2efe:	f000 f931 	bl	3164 <CC_LibInit>
    2f02:	b138      	cbz	r0, 2f14 <nrf_cc310_platform_init+0x24>
    2f04:	3801      	subs	r0, #1
    2f06:	2806      	cmp	r0, #6
    2f08:	bf96      	itet	ls
    2f0a:	4b08      	ldrls	r3, [pc, #32]	; (2f2c <nrf_cc310_platform_init+0x3c>)
    2f0c:	4808      	ldrhi	r0, [pc, #32]	; (2f30 <nrf_cc310_platform_init+0x40>)
    2f0e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
    2f12:	bd10      	pop	{r4, pc}
    2f14:	2201      	movs	r2, #1
    2f16:	4b04      	ldr	r3, [pc, #16]	; (2f28 <nrf_cc310_platform_init+0x38>)
    2f18:	601a      	str	r2, [r3, #0]
    2f1a:	2301      	movs	r3, #1
    2f1c:	2000      	movs	r0, #0
    2f1e:	6023      	str	r3, [r4, #0]
    2f20:	bd10      	pop	{r4, pc}
    2f22:	bf00      	nop
    2f24:	200007cc 	.word	0x200007cc
    2f28:	200007d0 	.word	0x200007d0
    2f2c:	000049e0 	.word	0x000049e0
    2f30:	ffff8ffe 	.word	0xffff8ffe

00002f34 <nrf_cc310_platform_init_no_rng>:
    2f34:	b510      	push	{r4, lr}
    2f36:	4c09      	ldr	r4, [pc, #36]	; (2f5c <nrf_cc310_platform_init_no_rng+0x28>)
    2f38:	6823      	ldr	r3, [r4, #0]
    2f3a:	b11b      	cbz	r3, 2f44 <nrf_cc310_platform_init_no_rng+0x10>
    2f3c:	2301      	movs	r3, #1
    2f3e:	2000      	movs	r0, #0
    2f40:	6023      	str	r3, [r4, #0]
    2f42:	bd10      	pop	{r4, pc}
    2f44:	f000 f87c 	bl	3040 <CC_LibInitNoRng>
    2f48:	2800      	cmp	r0, #0
    2f4a:	d0f7      	beq.n	2f3c <nrf_cc310_platform_init_no_rng+0x8>
    2f4c:	3801      	subs	r0, #1
    2f4e:	2806      	cmp	r0, #6
    2f50:	bf96      	itet	ls
    2f52:	4b03      	ldrls	r3, [pc, #12]	; (2f60 <nrf_cc310_platform_init_no_rng+0x2c>)
    2f54:	4803      	ldrhi	r0, [pc, #12]	; (2f64 <nrf_cc310_platform_init_no_rng+0x30>)
    2f56:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
    2f5a:	bd10      	pop	{r4, pc}
    2f5c:	200007cc 	.word	0x200007cc
    2f60:	000049e0 	.word	0x000049e0
    2f64:	ffff8ffe 	.word	0xffff8ffe

00002f68 <nrf_cc310_platform_abort>:
    2f68:	f3bf 8f4f 	dsb	sy
    2f6c:	4905      	ldr	r1, [pc, #20]	; (2f84 <nrf_cc310_platform_abort+0x1c>)
    2f6e:	4b06      	ldr	r3, [pc, #24]	; (2f88 <nrf_cc310_platform_abort+0x20>)
    2f70:	68ca      	ldr	r2, [r1, #12]
    2f72:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2f76:	4313      	orrs	r3, r2
    2f78:	60cb      	str	r3, [r1, #12]
    2f7a:	f3bf 8f4f 	dsb	sy
    2f7e:	bf00      	nop
    2f80:	e7fd      	b.n	2f7e <nrf_cc310_platform_abort+0x16>
    2f82:	bf00      	nop
    2f84:	e000ed00 	.word	0xe000ed00
    2f88:	05fa0004 	.word	0x05fa0004

00002f8c <CC_PalAbort>:
    2f8c:	4b01      	ldr	r3, [pc, #4]	; (2f94 <CC_PalAbort+0x8>)
    2f8e:	685b      	ldr	r3, [r3, #4]
    2f90:	4718      	bx	r3
    2f92:	bf00      	nop
    2f94:	20000068 	.word	0x20000068

00002f98 <nrf_cc310_platform_set_abort>:
    2f98:	4b02      	ldr	r3, [pc, #8]	; (2fa4 <nrf_cc310_platform_set_abort+0xc>)
    2f9a:	e9d0 1200 	ldrd	r1, r2, [r0]
    2f9e:	e9c3 1200 	strd	r1, r2, [r3]
    2fa2:	4770      	bx	lr
    2fa4:	20000068 	.word	0x20000068

00002fa8 <mutex_free>:
    2fa8:	4770      	bx	lr
    2faa:	bf00      	nop

00002fac <mutex_unlock>:
    2fac:	b510      	push	{r4, lr}
    2fae:	4604      	mov	r4, r0
    2fb0:	b120      	cbz	r0, 2fbc <mutex_unlock+0x10>
    2fb2:	f3bf 8f5f 	dmb	sy
    2fb6:	2000      	movs	r0, #0
    2fb8:	6020      	str	r0, [r4, #0]
    2fba:	bd10      	pop	{r4, pc}
    2fbc:	4803      	ldr	r0, [pc, #12]	; (2fcc <mutex_unlock+0x20>)
    2fbe:	f7ff ffe5 	bl	2f8c <CC_PalAbort>
    2fc2:	f3bf 8f5f 	dmb	sy
    2fc6:	2000      	movs	r0, #0
    2fc8:	6020      	str	r0, [r4, #0]
    2fca:	bd10      	pop	{r4, pc}
    2fcc:	00004a20 	.word	0x00004a20

00002fd0 <mutex_init>:
    2fd0:	b510      	push	{r4, lr}
    2fd2:	4604      	mov	r4, r0
    2fd4:	b110      	cbz	r0, 2fdc <mutex_init+0xc>
    2fd6:	2300      	movs	r3, #0
    2fd8:	6023      	str	r3, [r4, #0]
    2fda:	bd10      	pop	{r4, pc}
    2fdc:	4802      	ldr	r0, [pc, #8]	; (2fe8 <mutex_init+0x18>)
    2fde:	f7ff ffd5 	bl	2f8c <CC_PalAbort>
    2fe2:	2300      	movs	r3, #0
    2fe4:	6023      	str	r3, [r4, #0]
    2fe6:	bd10      	pop	{r4, pc}
    2fe8:	000049fc 	.word	0x000049fc

00002fec <mutex_lock>:
    2fec:	b150      	cbz	r0, 3004 <mutex_lock+0x18>
    2fee:	2201      	movs	r2, #1
    2ff0:	e8d0 3fef 	ldaex	r3, [r0]
    2ff4:	e8c0 2fe1 	stlex	r1, r2, [r0]
    2ff8:	2900      	cmp	r1, #0
    2ffa:	d1f9      	bne.n	2ff0 <mutex_lock+0x4>
    2ffc:	2b01      	cmp	r3, #1
    2ffe:	d0f7      	beq.n	2ff0 <mutex_lock+0x4>
    3000:	f3bf 8f5f 	dmb	sy
    3004:	2000      	movs	r0, #0
    3006:	4770      	bx	lr

00003008 <nrf_cc310_platform_set_mutexes>:
    3008:	b470      	push	{r4, r5, r6}
    300a:	4b0b      	ldr	r3, [pc, #44]	; (3038 <nrf_cc310_platform_set_mutexes+0x30>)
    300c:	6806      	ldr	r6, [r0, #0]
    300e:	68c2      	ldr	r2, [r0, #12]
    3010:	e9d0 5401 	ldrd	r5, r4, [r0, #4]
    3014:	e9c3 4202 	strd	r4, r2, [r3, #8]
    3018:	e9c3 6500 	strd	r6, r5, [r3]
    301c:	e9d1 0203 	ldrd	r0, r2, [r1, #12]
    3020:	680e      	ldr	r6, [r1, #0]
    3022:	4b06      	ldr	r3, [pc, #24]	; (303c <nrf_cc310_platform_set_mutexes+0x34>)
    3024:	e9d1 5401 	ldrd	r5, r4, [r1, #4]
    3028:	e9c3 6500 	strd	r6, r5, [r3]
    302c:	e9c3 4002 	strd	r4, r0, [r3, #8]
    3030:	611a      	str	r2, [r3, #16]
    3032:	bc70      	pop	{r4, r5, r6}
    3034:	4770      	bx	lr
    3036:	bf00      	nop
    3038:	20000070 	.word	0x20000070
    303c:	20000080 	.word	0x20000080

00003040 <CC_LibInitNoRng>:
    3040:	b510      	push	{r4, lr}
    3042:	f7ff fe7d 	bl	2d40 <CC_HalInit>
    3046:	b970      	cbnz	r0, 3066 <CC_LibInitNoRng+0x26>
    3048:	f7ff fda8 	bl	2b9c <CC_PalInit>
    304c:	b980      	cbnz	r0, 3070 <CC_LibInitNoRng+0x30>
    304e:	f7ff fe35 	bl	2cbc <CC_PalPowerSaveModeSelect>
    3052:	b980      	cbnz	r0, 3076 <CC_LibInitNoRng+0x36>
    3054:	4b11      	ldr	r3, [pc, #68]	; (309c <CC_LibInitNoRng+0x5c>)
    3056:	681b      	ldr	r3, [r3, #0]
    3058:	0e1b      	lsrs	r3, r3, #24
    305a:	2bf0      	cmp	r3, #240	; 0xf0
    305c:	d00d      	beq.n	307a <CC_LibInitNoRng+0x3a>
    305e:	2406      	movs	r4, #6
    3060:	f7ff fe70 	bl	2d44 <CC_HalTerminate>
    3064:	e000      	b.n	3068 <CC_LibInitNoRng+0x28>
    3066:	2403      	movs	r4, #3
    3068:	f7ff fdc6 	bl	2bf8 <CC_PalTerminate>
    306c:	4620      	mov	r0, r4
    306e:	bd10      	pop	{r4, pc}
    3070:	2404      	movs	r4, #4
    3072:	4620      	mov	r0, r4
    3074:	bd10      	pop	{r4, pc}
    3076:	2400      	movs	r4, #0
    3078:	e7f2      	b.n	3060 <CC_LibInitNoRng+0x20>
    307a:	4a09      	ldr	r2, [pc, #36]	; (30a0 <CC_LibInitNoRng+0x60>)
    307c:	4b09      	ldr	r3, [pc, #36]	; (30a4 <CC_LibInitNoRng+0x64>)
    307e:	6812      	ldr	r2, [r2, #0]
    3080:	429a      	cmp	r2, r3
    3082:	d001      	beq.n	3088 <CC_LibInitNoRng+0x48>
    3084:	2407      	movs	r4, #7
    3086:	e7eb      	b.n	3060 <CC_LibInitNoRng+0x20>
    3088:	2001      	movs	r0, #1
    308a:	f7ff fe17 	bl	2cbc <CC_PalPowerSaveModeSelect>
    308e:	2800      	cmp	r0, #0
    3090:	d1f1      	bne.n	3076 <CC_LibInitNoRng+0x36>
    3092:	4b05      	ldr	r3, [pc, #20]	; (30a8 <CC_LibInitNoRng+0x68>)
    3094:	4604      	mov	r4, r0
    3096:	6018      	str	r0, [r3, #0]
    3098:	e7e8      	b.n	306c <CC_LibInitNoRng+0x2c>
    309a:	bf00      	nop
    309c:	50841928 	.word	0x50841928
    30a0:	50841a24 	.word	0x50841a24
    30a4:	20e00000 	.word	0x20e00000
    30a8:	50841a0c 	.word	0x50841a0c

000030ac <CC_LibInitRngModule>:
    30ac:	b530      	push	{r4, r5, lr}
    30ae:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
    30b2:	f44f 7208 	mov.w	r2, #544	; 0x220
    30b6:	2100      	movs	r1, #0
    30b8:	a80c      	add	r0, sp, #48	; 0x30
    30ba:	f001 f868 	bl	418e <memset>
    30be:	2300      	movs	r3, #0
    30c0:	a802      	add	r0, sp, #8
    30c2:	4619      	mov	r1, r3
    30c4:	2228      	movs	r2, #40	; 0x28
    30c6:	9301      	str	r3, [sp, #4]
    30c8:	f001 f861 	bl	418e <memset>
    30cc:	a802      	add	r0, sp, #8
    30ce:	f7ff fed1 	bl	2e74 <RNG_PLAT_SetUserRngParameters>
    30d2:	b118      	cbz	r0, 30dc <CC_LibInitRngModule+0x30>
    30d4:	2005      	movs	r0, #5
    30d6:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
    30da:	bd30      	pop	{r4, r5, pc}
    30dc:	4d1c      	ldr	r5, [pc, #112]	; (3150 <CC_LibInitRngModule+0xa4>)
    30de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    30e2:	6828      	ldr	r0, [r5, #0]
    30e4:	f7ff fdba 	bl	2c5c <CC_PalMutexLock>
    30e8:	4604      	mov	r4, r0
    30ea:	b9f0      	cbnz	r0, 312a <CC_LibInitRngModule+0x7e>
    30ec:	2000      	movs	r0, #0
    30ee:	f7ff fde5 	bl	2cbc <CC_PalPowerSaveModeSelect>
    30f2:	b9b0      	cbnz	r0, 3122 <CC_LibInitRngModule+0x76>
    30f4:	aa0c      	add	r2, sp, #48	; 0x30
    30f6:	a902      	add	r1, sp, #8
    30f8:	a801      	add	r0, sp, #4
    30fa:	f000 fbd5 	bl	38a8 <LLF_RND_RunTrngStartupTest>
    30fe:	4604      	mov	r4, r0
    3100:	2001      	movs	r0, #1
    3102:	f7ff fddb 	bl	2cbc <CC_PalPowerSaveModeSelect>
    3106:	b9f0      	cbnz	r0, 3146 <CC_LibInitRngModule+0x9a>
    3108:	6828      	ldr	r0, [r5, #0]
    310a:	f7ff fdaf 	bl	2c6c <CC_PalMutexUnlock>
    310e:	b110      	cbz	r0, 3116 <CC_LibInitRngModule+0x6a>
    3110:	4810      	ldr	r0, [pc, #64]	; (3154 <CC_LibInitRngModule+0xa8>)
    3112:	f7ff ff3b 	bl	2f8c <CC_PalAbort>
    3116:	4620      	mov	r0, r4
    3118:	2c00      	cmp	r4, #0
    311a:	d1db      	bne.n	30d4 <CC_LibInitRngModule+0x28>
    311c:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
    3120:	bd30      	pop	{r4, r5, pc}
    3122:	480d      	ldr	r0, [pc, #52]	; (3158 <CC_LibInitRngModule+0xac>)
    3124:	f7ff ff32 	bl	2f8c <CC_PalAbort>
    3128:	e7e4      	b.n	30f4 <CC_LibInitRngModule+0x48>
    312a:	480c      	ldr	r0, [pc, #48]	; (315c <CC_LibInitRngModule+0xb0>)
    312c:	f7ff ff2e 	bl	2f8c <CC_PalAbort>
    3130:	2c01      	cmp	r4, #1
    3132:	d1db      	bne.n	30ec <CC_LibInitRngModule+0x40>
    3134:	6828      	ldr	r0, [r5, #0]
    3136:	f7ff fd99 	bl	2c6c <CC_PalMutexUnlock>
    313a:	2800      	cmp	r0, #0
    313c:	d0ca      	beq.n	30d4 <CC_LibInitRngModule+0x28>
    313e:	4805      	ldr	r0, [pc, #20]	; (3154 <CC_LibInitRngModule+0xa8>)
    3140:	f7ff ff24 	bl	2f8c <CC_PalAbort>
    3144:	e7c6      	b.n	30d4 <CC_LibInitRngModule+0x28>
    3146:	4806      	ldr	r0, [pc, #24]	; (3160 <CC_LibInitRngModule+0xb4>)
    3148:	f7ff ff20 	bl	2f8c <CC_PalAbort>
    314c:	e7dc      	b.n	3108 <CC_LibInitRngModule+0x5c>
    314e:	bf00      	nop
    3150:	20000064 	.word	0x20000064
    3154:	00004a58 	.word	0x00004a58
    3158:	00004a70 	.word	0x00004a70
    315c:	00004a40 	.word	0x00004a40
    3160:	00004a90 	.word	0x00004a90

00003164 <CC_LibInit>:
    3164:	b508      	push	{r3, lr}
    3166:	f7ff fdeb 	bl	2d40 <CC_HalInit>
    316a:	b118      	cbz	r0, 3174 <CC_LibInit+0x10>
    316c:	f7ff fd44 	bl	2bf8 <CC_PalTerminate>
    3170:	2003      	movs	r0, #3
    3172:	bd08      	pop	{r3, pc}
    3174:	f7ff fd12 	bl	2b9c <CC_PalInit>
    3178:	b968      	cbnz	r0, 3196 <CC_LibInit+0x32>
    317a:	f7ff fd9f 	bl	2cbc <CC_PalPowerSaveModeSelect>
    317e:	b960      	cbnz	r0, 319a <CC_LibInit+0x36>
    3180:	4b15      	ldr	r3, [pc, #84]	; (31d8 <CC_LibInit+0x74>)
    3182:	681b      	ldr	r3, [r3, #0]
    3184:	0e1b      	lsrs	r3, r3, #24
    3186:	2bf0      	cmp	r3, #240	; 0xf0
    3188:	d012      	beq.n	31b0 <CC_LibInit+0x4c>
    318a:	f7ff fddb 	bl	2d44 <CC_HalTerminate>
    318e:	f7ff fd33 	bl	2bf8 <CC_PalTerminate>
    3192:	2006      	movs	r0, #6
    3194:	bd08      	pop	{r3, pc}
    3196:	2004      	movs	r0, #4
    3198:	bd08      	pop	{r3, pc}
    319a:	f7ff fdd3 	bl	2d44 <CC_HalTerminate>
    319e:	f7ff fd2b 	bl	2bf8 <CC_PalTerminate>
    31a2:	f7ff ff83 	bl	30ac <CC_LibInitRngModule>
    31a6:	2800      	cmp	r0, #0
    31a8:	bf0c      	ite	eq
    31aa:	2000      	moveq	r0, #0
    31ac:	2005      	movne	r0, #5
    31ae:	bd08      	pop	{r3, pc}
    31b0:	4a0a      	ldr	r2, [pc, #40]	; (31dc <CC_LibInit+0x78>)
    31b2:	4b0b      	ldr	r3, [pc, #44]	; (31e0 <CC_LibInit+0x7c>)
    31b4:	6812      	ldr	r2, [r2, #0]
    31b6:	429a      	cmp	r2, r3
    31b8:	d005      	beq.n	31c6 <CC_LibInit+0x62>
    31ba:	f7ff fdc3 	bl	2d44 <CC_HalTerminate>
    31be:	f7ff fd1b 	bl	2bf8 <CC_PalTerminate>
    31c2:	2007      	movs	r0, #7
    31c4:	bd08      	pop	{r3, pc}
    31c6:	2001      	movs	r0, #1
    31c8:	f7ff fd78 	bl	2cbc <CC_PalPowerSaveModeSelect>
    31cc:	2800      	cmp	r0, #0
    31ce:	d1e4      	bne.n	319a <CC_LibInit+0x36>
    31d0:	4b04      	ldr	r3, [pc, #16]	; (31e4 <CC_LibInit+0x80>)
    31d2:	6018      	str	r0, [r3, #0]
    31d4:	e7e5      	b.n	31a2 <CC_LibInit+0x3e>
    31d6:	bf00      	nop
    31d8:	50841928 	.word	0x50841928
    31dc:	50841a24 	.word	0x50841a24
    31e0:	20e00000 	.word	0x20e00000
    31e4:	50841a0c 	.word	0x50841a0c

000031e8 <CC_PalTrngParamGet>:
    31e8:	b118      	cbz	r0, 31f2 <CC_PalTrngParamGet+0xa>
    31ea:	b111      	cbz	r1, 31f2 <CC_PalTrngParamGet+0xa>
    31ec:	680b      	ldr	r3, [r1, #0]
    31ee:	2b1c      	cmp	r3, #28
    31f0:	d001      	beq.n	31f6 <CC_PalTrngParamGet+0xe>
    31f2:	2001      	movs	r0, #1
    31f4:	4770      	bx	lr
    31f6:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    31fa:	4a3a      	ldr	r2, [pc, #232]	; (32e4 <CC_PalTrngParamGet+0xfc>)
    31fc:	f8d3 1c10 	ldr.w	r1, [r3, #3088]	; 0xc10
    3200:	4291      	cmp	r1, r2
    3202:	d05a      	beq.n	32ba <CC_PalTrngParamGet+0xd2>
    3204:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
    3208:	3201      	adds	r2, #1
    320a:	d056      	beq.n	32ba <CC_PalTrngParamGet+0xd2>
    320c:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
    3210:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    3214:	6002      	str	r2, [r0, #0]
    3216:	f8d3 1c14 	ldr.w	r1, [r3, #3092]	; 0xc14
    321a:	4a33      	ldr	r2, [pc, #204]	; (32e8 <CC_PalTrngParamGet+0x100>)
    321c:	4291      	cmp	r1, r2
    321e:	d05e      	beq.n	32de <CC_PalTrngParamGet+0xf6>
    3220:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
    3224:	3201      	adds	r2, #1
    3226:	d05a      	beq.n	32de <CC_PalTrngParamGet+0xf6>
    3228:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
    322c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    3230:	6042      	str	r2, [r0, #4]
    3232:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    3236:	f512 7f94 	cmn.w	r2, #296	; 0x128
    323a:	d04d      	beq.n	32d8 <CC_PalTrngParamGet+0xf0>
    323c:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    3240:	3201      	adds	r2, #1
    3242:	d049      	beq.n	32d8 <CC_PalTrngParamGet+0xf0>
    3244:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    3248:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    324c:	6082      	str	r2, [r0, #8]
    324e:	f8d3 1c1c 	ldr.w	r1, [r3, #3100]	; 0xc1c
    3252:	4a26      	ldr	r2, [pc, #152]	; (32ec <CC_PalTrngParamGet+0x104>)
    3254:	4291      	cmp	r1, r2
    3256:	d03c      	beq.n	32d2 <CC_PalTrngParamGet+0xea>
    3258:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
    325c:	3201      	adds	r2, #1
    325e:	d038      	beq.n	32d2 <CC_PalTrngParamGet+0xea>
    3260:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
    3264:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    3268:	60c2      	str	r2, [r0, #12]
    326a:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    326e:	3270      	adds	r2, #112	; 0x70
    3270:	d02d      	beq.n	32ce <CC_PalTrngParamGet+0xe6>
    3272:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    3276:	3201      	adds	r2, #1
    3278:	d029      	beq.n	32ce <CC_PalTrngParamGet+0xe6>
    327a:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    327e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    3282:	6102      	str	r2, [r0, #16]
    3284:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    3288:	32af      	adds	r2, #175	; 0xaf
    328a:	d01e      	beq.n	32ca <CC_PalTrngParamGet+0xe2>
    328c:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    3290:	3201      	adds	r2, #1
    3292:	d01a      	beq.n	32ca <CC_PalTrngParamGet+0xe2>
    3294:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    3298:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    329c:	6142      	str	r2, [r0, #20]
    329e:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
    32a2:	4a13      	ldr	r2, [pc, #76]	; (32f0 <CC_PalTrngParamGet+0x108>)
    32a4:	4291      	cmp	r1, r2
    32a6:	d00b      	beq.n	32c0 <CC_PalTrngParamGet+0xd8>
    32a8:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
    32ac:	3201      	adds	r2, #1
    32ae:	d007      	beq.n	32c0 <CC_PalTrngParamGet+0xd8>
    32b0:	f8d3 3c08 	ldr.w	r3, [r3, #3080]	; 0xc08
    32b4:	6183      	str	r3, [r0, #24]
    32b6:	2000      	movs	r0, #0
    32b8:	4770      	bx	lr
    32ba:	f640 02fc 	movw	r2, #2300	; 0x8fc
    32be:	e7a7      	b.n	3210 <CC_PalTrngParamGet+0x28>
    32c0:	f240 3337 	movw	r3, #823	; 0x337
    32c4:	6183      	str	r3, [r0, #24]
    32c6:	2000      	movs	r0, #0
    32c8:	4770      	bx	lr
    32ca:	2251      	movs	r2, #81	; 0x51
    32cc:	e7e4      	b.n	3298 <CC_PalTrngParamGet+0xb0>
    32ce:	2290      	movs	r2, #144	; 0x90
    32d0:	e7d5      	b.n	327e <CC_PalTrngParamGet+0x96>
    32d2:	f642 1204 	movw	r2, #10500	; 0x2904
    32d6:	e7c5      	b.n	3264 <CC_PalTrngParamGet+0x7c>
    32d8:	f640 62d8 	movw	r2, #3800	; 0xed8
    32dc:	e7b4      	b.n	3248 <CC_PalTrngParamGet+0x60>
    32de:	f242 02d0 	movw	r2, #8400	; 0x20d0
    32e2:	e7a3      	b.n	322c <CC_PalTrngParamGet+0x44>
    32e4:	fffff8fc 	.word	0xfffff8fc
    32e8:	ffff20d0 	.word	0xffff20d0
    32ec:	ffff2904 	.word	0xffff2904
    32f0:	fffff337 	.word	0xfffff337

000032f4 <LLF_RND_AdaptiveProportionTest>:
    32f4:	b3a8      	cbz	r0, 3362 <LLF_RND_AdaptiveProportionTest+0x6e>
    32f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    32fa:	1e4c      	subs	r4, r1, #1
    32fc:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
    3300:	d22c      	bcs.n	335c <LLF_RND_AdaptiveProportionTest+0x68>
    3302:	b35b      	cbz	r3, 335c <LLF_RND_AdaptiveProportionTest+0x68>
    3304:	b352      	cbz	r2, 335c <LLF_RND_AdaptiveProportionTest+0x68>
    3306:	f04f 0c00 	mov.w	ip, #0
    330a:	00c9      	lsls	r1, r1, #3
    330c:	46e6      	mov	lr, ip
    330e:	4665      	mov	r5, ip
    3310:	4664      	mov	r4, ip
    3312:	1e4f      	subs	r7, r1, #1
    3314:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    3318:	e00c      	b.n	3334 <LLF_RND_AdaptiveProportionTest+0x40>
    331a:	42ab      	cmp	r3, r5
    331c:	d016      	beq.n	334c <LLF_RND_AdaptiveProportionTest+0x58>
    331e:	458e      	cmp	lr, r1
    3320:	d101      	bne.n	3326 <LLF_RND_AdaptiveProportionTest+0x32>
    3322:	f10c 0c01 	add.w	ip, ip, #1
    3326:	45a8      	cmp	r8, r5
    3328:	d016      	beq.n	3358 <LLF_RND_AdaptiveProportionTest+0x64>
    332a:	3401      	adds	r4, #1
    332c:	42bc      	cmp	r4, r7
    332e:	f105 0501 	add.w	r5, r5, #1
    3332:	d818      	bhi.n	3366 <LLF_RND_AdaptiveProportionTest+0x72>
    3334:	0961      	lsrs	r1, r4, #5
    3336:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    333a:	f004 061f 	and.w	r6, r4, #31
    333e:	40f1      	lsrs	r1, r6
    3340:	2e1f      	cmp	r6, #31
    3342:	bf18      	it	ne
    3344:	f001 0101 	andne.w	r1, r1, #1
    3348:	2c00      	cmp	r4, #0
    334a:	d1e6      	bne.n	331a <LLF_RND_AdaptiveProportionTest+0x26>
    334c:	2500      	movs	r5, #0
    334e:	45a8      	cmp	r8, r5
    3350:	468e      	mov	lr, r1
    3352:	f04f 0c01 	mov.w	ip, #1
    3356:	d1e8      	bne.n	332a <LLF_RND_AdaptiveProportionTest+0x36>
    3358:	4562      	cmp	r2, ip
    335a:	d2e6      	bcs.n	332a <LLF_RND_AdaptiveProportionTest+0x36>
    335c:	4803      	ldr	r0, [pc, #12]	; (336c <LLF_RND_AdaptiveProportionTest+0x78>)
    335e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3362:	4802      	ldr	r0, [pc, #8]	; (336c <LLF_RND_AdaptiveProportionTest+0x78>)
    3364:	4770      	bx	lr
    3366:	2000      	movs	r0, #0
    3368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    336c:	00f10c37 	.word	0x00f10c37

00003370 <getTrngSource>:
    3370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3374:	b08f      	sub	sp, #60	; 0x3c
    3376:	460d      	mov	r5, r1
    3378:	e9dd 4119 	ldrd	r4, r1, [sp, #100]	; 0x64
    337c:	4683      	mov	fp, r0
    337e:	2900      	cmp	r1, #0
    3380:	d157      	bne.n	3432 <getTrngSource+0xc2>
    3382:	6929      	ldr	r1, [r5, #16]
    3384:	9103      	str	r1, [sp, #12]
    3386:	2100      	movs	r1, #0
    3388:	601c      	str	r4, [r3, #0]
    338a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    338c:	6019      	str	r1, [r3, #0]
    338e:	2a00      	cmp	r2, #0
    3390:	f000 8122 	beq.w	35d8 <getTrngSource+0x268>
    3394:	4a81      	ldr	r2, [pc, #516]	; (359c <getTrngSource+0x22c>)
    3396:	4b82      	ldr	r3, [pc, #520]	; (35a0 <getTrngSource+0x230>)
    3398:	6811      	ldr	r1, [r2, #0]
    339a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    339c:	681b      	ldr	r3, [r3, #0]
    339e:	429a      	cmp	r2, r3
    33a0:	d157      	bne.n	3452 <getTrngSource+0xe2>
    33a2:	290a      	cmp	r1, #10
    33a4:	d155      	bne.n	3452 <getTrngSource+0xe2>
    33a6:	f89b 3003 	ldrb.w	r3, [fp, #3]
    33aa:	9306      	str	r3, [sp, #24]
    33ac:	9903      	ldr	r1, [sp, #12]
    33ae:	2304      	movs	r3, #4
    33b0:	4608      	mov	r0, r1
    33b2:	4a7c      	ldr	r2, [pc, #496]	; (35a4 <getTrngSource+0x234>)
    33b4:	9302      	str	r3, [sp, #8]
    33b6:	fba2 0200 	umull	r0, r2, r2, r0
    33ba:	0892      	lsrs	r2, r2, #2
    33bc:	00cb      	lsls	r3, r1, #3
    33be:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    33c2:	f104 0008 	add.w	r0, r4, #8
    33c6:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
    33ca:	3b01      	subs	r3, #1
    33cc:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 35a0 <getTrngSource+0x230>
    33d0:	f8df a200 	ldr.w	sl, [pc, #512]	; 35d4 <getTrngSource+0x264>
    33d4:	9004      	str	r0, [sp, #16]
    33d6:	9200      	str	r2, [sp, #0]
    33d8:	9305      	str	r3, [sp, #20]
    33da:	9b18      	ldr	r3, [sp, #96]	; 0x60
    33dc:	9c03      	ldr	r4, [sp, #12]
    33de:	601c      	str	r4, [r3, #0]
    33e0:	2c00      	cmp	r4, #0
    33e2:	f000 80cc 	beq.w	357e <getTrngSource+0x20e>
    33e6:	2600      	movs	r6, #0
    33e8:	9f04      	ldr	r7, [sp, #16]
    33ea:	f000 faa9 	bl	3940 <LLF_RND_TurnOffTrng>
    33ee:	2300      	movs	r3, #0
    33f0:	9307      	str	r3, [sp, #28]
    33f2:	9b06      	ldr	r3, [sp, #24]
    33f4:	f1bb 0f00 	cmp.w	fp, #0
    33f8:	d03a      	beq.n	3470 <getTrngSource+0x100>
    33fa:	2d00      	cmp	r5, #0
    33fc:	d034      	beq.n	3468 <getTrngSource+0xf8>
    33fe:	bb53      	cbnz	r3, 3456 <getTrngSource+0xe6>
    3400:	005b      	lsls	r3, r3, #1
    3402:	9306      	str	r3, [sp, #24]
    3404:	f1bb 0f00 	cmp.w	fp, #0
    3408:	d036      	beq.n	3478 <getTrngSource+0x108>
    340a:	2d00      	cmp	r5, #0
    340c:	d034      	beq.n	3478 <getTrngSource+0x108>
    340e:	b1e3      	cbz	r3, 344a <getTrngSource+0xda>
    3410:	a906      	add	r1, sp, #24
    3412:	4628      	mov	r0, r5
    3414:	f000 fa84 	bl	3920 <LLF_RND_GetFastestRosc>
    3418:	2800      	cmp	r0, #0
    341a:	f000 817d 	beq.w	3718 <getTrngSource+0x3a8>
    341e:	4b62      	ldr	r3, [pc, #392]	; (35a8 <getTrngSource+0x238>)
    3420:	4298      	cmp	r0, r3
    3422:	d012      	beq.n	344a <getTrngSource+0xda>
    3424:	9000      	str	r0, [sp, #0]
    3426:	f000 fa8b 	bl	3940 <LLF_RND_TurnOffTrng>
    342a:	9800      	ldr	r0, [sp, #0]
    342c:	b00f      	add	sp, #60	; 0x3c
    342e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3432:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    3436:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
    343a:	3001      	adds	r0, #1
    343c:	bf0c      	ite	eq
    343e:	f44f 7104 	moveq.w	r1, #528	; 0x210
    3442:	f8d1 1c0c 	ldrne.w	r1, [r1, #3084]	; 0xc0c
    3446:	9103      	str	r1, [sp, #12]
    3448:	e79d      	b.n	3386 <getTrngSource+0x16>
    344a:	6a2b      	ldr	r3, [r5, #32]
    344c:	b973      	cbnz	r3, 346c <getTrngSource+0xfc>
    344e:	4856      	ldr	r0, [pc, #344]	; (35a8 <getTrngSource+0x238>)
    3450:	e7e8      	b.n	3424 <getTrngSource+0xb4>
    3452:	4856      	ldr	r0, [pc, #344]	; (35ac <getTrngSource+0x23c>)
    3454:	e7e6      	b.n	3424 <getTrngSource+0xb4>
    3456:	a906      	add	r1, sp, #24
    3458:	4628      	mov	r0, r5
    345a:	f000 fa61 	bl	3920 <LLF_RND_GetFastestRosc>
    345e:	b168      	cbz	r0, 347c <getTrngSource+0x10c>
    3460:	4b53      	ldr	r3, [pc, #332]	; (35b0 <getTrngSource+0x240>)
    3462:	4298      	cmp	r0, r3
    3464:	d0de      	beq.n	3424 <getTrngSource+0xb4>
    3466:	9b06      	ldr	r3, [sp, #24]
    3468:	2b08      	cmp	r3, #8
    346a:	d1c9      	bne.n	3400 <getTrngSource+0x90>
    346c:	4851      	ldr	r0, [pc, #324]	; (35b4 <getTrngSource+0x244>)
    346e:	e7d9      	b.n	3424 <getTrngSource+0xb4>
    3470:	2b08      	cmp	r3, #8
    3472:	d0fb      	beq.n	346c <getTrngSource+0xfc>
    3474:	005b      	lsls	r3, r3, #1
    3476:	9306      	str	r3, [sp, #24]
    3478:	484f      	ldr	r0, [pc, #316]	; (35b8 <getTrngSource+0x248>)
    347a:	e7d3      	b.n	3424 <getTrngSource+0xb4>
    347c:	4629      	mov	r1, r5
    347e:	9806      	ldr	r0, [sp, #24]
    3480:	f000 fa30 	bl	38e4 <LLF_RND_GetRoscSampleCnt>
    3484:	2800      	cmp	r0, #0
    3486:	d1eb      	bne.n	3460 <getTrngSource+0xf0>
    3488:	9b06      	ldr	r3, [sp, #24]
    348a:	2b08      	cmp	r3, #8
    348c:	f000 810e 	beq.w	36ac <getTrngSource+0x33c>
    3490:	2b04      	cmp	r3, #4
    3492:	f000 8131 	beq.w	36f8 <getTrngSource+0x388>
    3496:	f1a3 0302 	sub.w	r3, r3, #2
    349a:	fab3 f383 	clz	r3, r3
    349e:	095b      	lsrs	r3, r3, #5
    34a0:	9301      	str	r3, [sp, #4]
    34a2:	2301      	movs	r3, #1
    34a4:	4619      	mov	r1, r3
    34a6:	4a45      	ldr	r2, [pc, #276]	; (35bc <getTrngSource+0x24c>)
    34a8:	6013      	str	r3, [r2, #0]
    34aa:	f842 3c84 	str.w	r3, [r2, #-132]
    34ae:	4b43      	ldr	r3, [pc, #268]	; (35bc <getTrngSource+0x24c>)
    34b0:	6019      	str	r1, [r3, #0]
    34b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    34b4:	f8c9 3000 	str.w	r3, [r9]
    34b8:	f8d9 2000 	ldr.w	r2, [r9]
    34bc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    34be:	429a      	cmp	r2, r3
    34c0:	d1f5      	bne.n	34ae <getTrngSource+0x13e>
    34c2:	f04f 0800 	mov.w	r8, #0
    34c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    34ca:	f8ca 8000 	str.w	r8, [sl]
    34ce:	f7ff fc3b 	bl	2d48 <CC_HalClearInterruptBit>
    34d2:	4a3b      	ldr	r2, [pc, #236]	; (35c0 <getTrngSource+0x250>)
    34d4:	4b3b      	ldr	r3, [pc, #236]	; (35c4 <getTrngSource+0x254>)
    34d6:	4640      	mov	r0, r8
    34d8:	601a      	str	r2, [r3, #0]
    34da:	f7ff fc43 	bl	2d64 <CC_HalMaskInterrupt>
    34de:	220a      	movs	r2, #10
    34e0:	9801      	ldr	r0, [sp, #4]
    34e2:	4939      	ldr	r1, [pc, #228]	; (35c8 <getTrngSource+0x258>)
    34e4:	4b2d      	ldr	r3, [pc, #180]	; (359c <getTrngSource+0x22c>)
    34e6:	6008      	str	r0, [r1, #0]
    34e8:	601a      	str	r2, [r3, #0]
    34ea:	692a      	ldr	r2, [r5, #16]
    34ec:	f1a8 3855 	sub.w	r8, r8, #1431655765	; 0x55555555
    34f0:	fba8 1202 	umull	r1, r2, r8, r2
    34f4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    34f6:	0912      	lsrs	r2, r2, #4
    34f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    34fc:	03db      	lsls	r3, r3, #15
    34fe:	fb03 f302 	mul.w	r3, r3, r2
    3502:	4a32      	ldr	r2, [pc, #200]	; (35cc <getTrngSource+0x25c>)
    3504:	099b      	lsrs	r3, r3, #6
    3506:	6013      	str	r3, [r2, #0]
    3508:	2301      	movs	r3, #1
    350a:	f8ca 3000 	str.w	r3, [sl]
    350e:	9906      	ldr	r1, [sp, #24]
    3510:	f8db 2000 	ldr.w	r2, [fp]
    3514:	020b      	lsls	r3, r1, #8
    3516:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    351a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    351e:	4313      	orrs	r3, r2
    3520:	f8cb 3000 	str.w	r3, [fp]
    3524:	a807      	add	r0, sp, #28
    3526:	f000 f9cd 	bl	38c4 <LLF_RND_WaitRngInterrupt>
    352a:	2800      	cmp	r0, #0
    352c:	d198      	bne.n	3460 <getTrngSource+0xf0>
    352e:	4b28      	ldr	r3, [pc, #160]	; (35d0 <getTrngSource+0x260>)
    3530:	fba8 2804 	umull	r2, r8, r8, r4
    3534:	681a      	ldr	r2, [r3, #0]
    3536:	3314      	adds	r3, #20
    3538:	9208      	str	r2, [sp, #32]
    353a:	f853 2c10 	ldr.w	r2, [r3, #-16]
    353e:	ebb6 0f98 	cmp.w	r6, r8, lsr #2
    3542:	9209      	str	r2, [sp, #36]	; 0x24
    3544:	f853 2c0c 	ldr.w	r2, [r3, #-12]
    3548:	920a      	str	r2, [sp, #40]	; 0x28
    354a:	f853 2c08 	ldr.w	r2, [r3, #-8]
    354e:	920b      	str	r2, [sp, #44]	; 0x2c
    3550:	f853 2c04 	ldr.w	r2, [r3, #-4]
    3554:	920c      	str	r2, [sp, #48]	; 0x30
    3556:	681b      	ldr	r3, [r3, #0]
    3558:	930d      	str	r3, [sp, #52]	; 0x34
    355a:	d101      	bne.n	3560 <getTrngSource+0x1f0>
    355c:	9b00      	ldr	r3, [sp, #0]
    355e:	b99b      	cbnz	r3, 3588 <getTrngSource+0x218>
    3560:	4638      	mov	r0, r7
    3562:	2218      	movs	r2, #24
    3564:	a908      	add	r1, sp, #32
    3566:	f7ff fb13 	bl	2b90 <CC_PalMemCopyPlat>
    356a:	3c18      	subs	r4, #24
    356c:	3718      	adds	r7, #24
    356e:	3601      	adds	r6, #1
    3570:	2c00      	cmp	r4, #0
    3572:	f47f af3a 	bne.w	33ea <getTrngSource+0x7a>
    3576:	9b04      	ldr	r3, [sp, #16]
    3578:	2b00      	cmp	r3, #0
    357a:	f040 809a 	bne.w	36b2 <getTrngSource+0x342>
    357e:	2300      	movs	r3, #0
    3580:	9a18      	ldr	r2, [sp, #96]	; 0x60
    3582:	6013      	str	r3, [r2, #0]
    3584:	9b06      	ldr	r3, [sp, #24]
    3586:	e76f      	b.n	3468 <getTrngSource+0xf8>
    3588:	461a      	mov	r2, r3
    358a:	4638      	mov	r0, r7
    358c:	a908      	add	r1, sp, #32
    358e:	1ae4      	subs	r4, r4, r3
    3590:	f7ff fafe 	bl	2b90 <CC_PalMemCopyPlat>
    3594:	9b00      	ldr	r3, [sp, #0]
    3596:	441f      	add	r7, r3
    3598:	e7e9      	b.n	356e <getTrngSource+0x1fe>
    359a:	bf00      	nop
    359c:	50841138 	.word	0x50841138
    35a0:	50841130 	.word	0x50841130
    35a4:	aaaaaaab 	.word	0xaaaaaaab
    35a8:	00f10c31 	.word	0x00f10c31
    35ac:	00f10c30 	.word	0x00f10c30
    35b0:	00f10c02 	.word	0x00f10c02
    35b4:	00f10c32 	.word	0x00f10c32
    35b8:	00f10c35 	.word	0x00f10c35
    35bc:	508411c4 	.word	0x508411c4
    35c0:	0ffffffe 	.word	0x0ffffffe
    35c4:	50841100 	.word	0x50841100
    35c8:	5084110c 	.word	0x5084110c
    35cc:	508411d8 	.word	0x508411d8
    35d0:	50841114 	.word	0x50841114
    35d4:	5084112c 	.word	0x5084112c
    35d8:	f1bb 0f00 	cmp.w	fp, #0
    35dc:	f43f af4c 	beq.w	3478 <getTrngSource+0x108>
    35e0:	2d00      	cmp	r5, #0
    35e2:	f43f af49 	beq.w	3478 <getTrngSource+0x108>
    35e6:	2301      	movs	r3, #1
    35e8:	a90e      	add	r1, sp, #56	; 0x38
    35ea:	f841 3d20 	str.w	r3, [r1, #-32]!
    35ee:	f8cb 2000 	str.w	r2, [fp]
    35f2:	4628      	mov	r0, r5
    35f4:	f000 f994 	bl	3920 <LLF_RND_GetFastestRosc>
    35f8:	2800      	cmp	r0, #0
    35fa:	f47f af13 	bne.w	3424 <getTrngSource+0xb4>
    35fe:	4629      	mov	r1, r5
    3600:	9806      	ldr	r0, [sp, #24]
    3602:	f000 f96f 	bl	38e4 <LLF_RND_GetRoscSampleCnt>
    3606:	2800      	cmp	r0, #0
    3608:	f47f af0c 	bne.w	3424 <getTrngSource+0xb4>
    360c:	9f06      	ldr	r7, [sp, #24]
    360e:	2f08      	cmp	r7, #8
    3610:	f000 80eb 	beq.w	37ea <getTrngSource+0x47a>
    3614:	2f04      	cmp	r7, #4
    3616:	f000 80ea 	beq.w	37ee <getTrngSource+0x47e>
    361a:	f1a7 0702 	sub.w	r7, r7, #2
    361e:	fab7 f787 	clz	r7, r7
    3622:	097f      	lsrs	r7, r7, #5
    3624:	2201      	movs	r2, #1
    3626:	4616      	mov	r6, r2
    3628:	4b73      	ldr	r3, [pc, #460]	; (37f8 <getTrngSource+0x488>)
    362a:	4974      	ldr	r1, [pc, #464]	; (37fc <getTrngSource+0x48c>)
    362c:	601a      	str	r2, [r3, #0]
    362e:	4618      	mov	r0, r3
    3630:	600a      	str	r2, [r1, #0]
    3632:	3b94      	subs	r3, #148	; 0x94
    3634:	6006      	str	r6, [r0, #0]
    3636:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    3638:	601a      	str	r2, [r3, #0]
    363a:	6819      	ldr	r1, [r3, #0]
    363c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    363e:	4291      	cmp	r1, r2
    3640:	d1f8      	bne.n	3634 <getTrngSource+0x2c4>
    3642:	f04f 0800 	mov.w	r8, #0
    3646:	4b6e      	ldr	r3, [pc, #440]	; (3800 <getTrngSource+0x490>)
    3648:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    364c:	f8c3 8000 	str.w	r8, [r3]
    3650:	f7ff fb7a 	bl	2d48 <CC_HalClearInterruptBit>
    3654:	4b6b      	ldr	r3, [pc, #428]	; (3804 <getTrngSource+0x494>)
    3656:	4a6c      	ldr	r2, [pc, #432]	; (3808 <getTrngSource+0x498>)
    3658:	4640      	mov	r0, r8
    365a:	601a      	str	r2, [r3, #0]
    365c:	f7ff fb82 	bl	2d64 <CC_HalMaskInterrupt>
    3660:	220a      	movs	r2, #10
    3662:	496a      	ldr	r1, [pc, #424]	; (380c <getTrngSource+0x49c>)
    3664:	4b6a      	ldr	r3, [pc, #424]	; (3810 <getTrngSource+0x4a0>)
    3666:	600f      	str	r7, [r1, #0]
    3668:	601a      	str	r2, [r3, #0]
    366a:	991a      	ldr	r1, [sp, #104]	; 0x68
    366c:	692b      	ldr	r3, [r5, #16]
    366e:	2901      	cmp	r1, #1
    3670:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    3672:	f000 80b1 	beq.w	37d8 <getTrngSource+0x468>
    3676:	4967      	ldr	r1, [pc, #412]	; (3814 <getTrngSource+0x4a4>)
    3678:	fba1 1303 	umull	r1, r3, r1, r3
    367c:	091b      	lsrs	r3, r3, #4
    367e:	2101      	movs	r1, #1
    3680:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    3684:	03d2      	lsls	r2, r2, #15
    3686:	fb03 f302 	mul.w	r3, r3, r2
    368a:	4a63      	ldr	r2, [pc, #396]	; (3818 <getTrngSource+0x4a8>)
    368c:	099b      	lsrs	r3, r3, #6
    368e:	6013      	str	r3, [r2, #0]
    3690:	4b5b      	ldr	r3, [pc, #364]	; (3800 <getTrngSource+0x490>)
    3692:	6019      	str	r1, [r3, #0]
    3694:	9906      	ldr	r1, [sp, #24]
    3696:	f8db 2000 	ldr.w	r2, [fp]
    369a:	020b      	lsls	r3, r1, #8
    369c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    36a0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    36a4:	4313      	orrs	r3, r2
    36a6:	f8cb 3000 	str.w	r3, [fp]
    36aa:	e67f      	b.n	33ac <getTrngSource+0x3c>
    36ac:	2303      	movs	r3, #3
    36ae:	9301      	str	r3, [sp, #4]
    36b0:	e6f7      	b.n	34a2 <getTrngSource+0x132>
    36b2:	9b03      	ldr	r3, [sp, #12]
    36b4:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
    36b8:	f63f af61 	bhi.w	357e <getTrngSource+0x20e>
    36bc:	e9dd 7c04 	ldrd	r7, ip, [sp, #16]
    36c0:	4620      	mov	r0, r4
    36c2:	4623      	mov	r3, r4
    36c4:	696e      	ldr	r6, [r5, #20]
    36c6:	e004      	b.n	36d2 <getTrngSource+0x362>
    36c8:	2001      	movs	r0, #1
    36ca:	3301      	adds	r3, #1
    36cc:	4563      	cmp	r3, ip
    36ce:	4614      	mov	r4, r2
    36d0:	d815      	bhi.n	36fe <getTrngSource+0x38e>
    36d2:	095a      	lsrs	r2, r3, #5
    36d4:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
    36d8:	f003 011f 	and.w	r1, r3, #31
    36dc:	40ca      	lsrs	r2, r1
    36de:	291f      	cmp	r1, #31
    36e0:	bf18      	it	ne
    36e2:	f002 0201 	andne.w	r2, r2, #1
    36e6:	2b00      	cmp	r3, #0
    36e8:	d0ee      	beq.n	36c8 <getTrngSource+0x358>
    36ea:	42a2      	cmp	r2, r4
    36ec:	d1ec      	bne.n	36c8 <getTrngSource+0x358>
    36ee:	3001      	adds	r0, #1
    36f0:	4286      	cmp	r6, r0
    36f2:	d1ea      	bne.n	36ca <getTrngSource+0x35a>
    36f4:	4849      	ldr	r0, [pc, #292]	; (381c <getTrngSource+0x4ac>)
    36f6:	e00b      	b.n	3710 <getTrngSource+0x3a0>
    36f8:	2302      	movs	r3, #2
    36fa:	9301      	str	r3, [sp, #4]
    36fc:	e6d1      	b.n	34a2 <getTrngSource+0x132>
    36fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
    3702:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
    3706:	69aa      	ldr	r2, [r5, #24]
    3708:	f7ff fdf4 	bl	32f4 <LLF_RND_AdaptiveProportionTest>
    370c:	2800      	cmp	r0, #0
    370e:	d05d      	beq.n	37cc <getTrngSource+0x45c>
    3710:	2300      	movs	r3, #0
    3712:	9a18      	ldr	r2, [sp, #96]	; 0x60
    3714:	6013      	str	r3, [r2, #0]
    3716:	e6a3      	b.n	3460 <getTrngSource+0xf0>
    3718:	4629      	mov	r1, r5
    371a:	9806      	ldr	r0, [sp, #24]
    371c:	f000 f8e2 	bl	38e4 <LLF_RND_GetRoscSampleCnt>
    3720:	2800      	cmp	r0, #0
    3722:	f47f ae7c 	bne.w	341e <getTrngSource+0xae>
    3726:	9c06      	ldr	r4, [sp, #24]
    3728:	2c08      	cmp	r4, #8
    372a:	d051      	beq.n	37d0 <getTrngSource+0x460>
    372c:	2c04      	cmp	r4, #4
    372e:	d051      	beq.n	37d4 <getTrngSource+0x464>
    3730:	f1a4 0402 	sub.w	r4, r4, #2
    3734:	fab4 f484 	clz	r4, r4
    3738:	0964      	lsrs	r4, r4, #5
    373a:	2301      	movs	r3, #1
    373c:	461e      	mov	r6, r3
    373e:	4619      	mov	r1, r3
    3740:	4a2d      	ldr	r2, [pc, #180]	; (37f8 <getTrngSource+0x488>)
    3742:	6013      	str	r3, [r2, #0]
    3744:	f842 3c84 	str.w	r3, [r2, #-132]
    3748:	4b2b      	ldr	r3, [pc, #172]	; (37f8 <getTrngSource+0x488>)
    374a:	6019      	str	r1, [r3, #0]
    374c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    374e:	f8c9 3000 	str.w	r3, [r9]
    3752:	f8d9 2000 	ldr.w	r2, [r9]
    3756:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3758:	429a      	cmp	r2, r3
    375a:	d1f5      	bne.n	3748 <getTrngSource+0x3d8>
    375c:	2700      	movs	r7, #0
    375e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3762:	f8ca 7000 	str.w	r7, [sl]
    3766:	f7ff faef 	bl	2d48 <CC_HalClearInterruptBit>
    376a:	4b26      	ldr	r3, [pc, #152]	; (3804 <getTrngSource+0x494>)
    376c:	4a26      	ldr	r2, [pc, #152]	; (3808 <getTrngSource+0x498>)
    376e:	4638      	mov	r0, r7
    3770:	601a      	str	r2, [r3, #0]
    3772:	f7ff faf7 	bl	2d64 <CC_HalMaskInterrupt>
    3776:	220a      	movs	r2, #10
    3778:	4924      	ldr	r1, [pc, #144]	; (380c <getTrngSource+0x49c>)
    377a:	4b25      	ldr	r3, [pc, #148]	; (3810 <getTrngSource+0x4a0>)
    377c:	600c      	str	r4, [r1, #0]
    377e:	601a      	str	r2, [r3, #0]
    3780:	692a      	ldr	r2, [r5, #16]
    3782:	4924      	ldr	r1, [pc, #144]	; (3814 <getTrngSource+0x4a4>)
    3784:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3786:	fba1 1202 	umull	r1, r2, r1, r2
    378a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    378e:	0912      	lsrs	r2, r2, #4
    3790:	03db      	lsls	r3, r3, #15
    3792:	fb03 f302 	mul.w	r3, r3, r2
    3796:	4a20      	ldr	r2, [pc, #128]	; (3818 <getTrngSource+0x4a8>)
    3798:	099b      	lsrs	r3, r3, #6
    379a:	6013      	str	r3, [r2, #0]
    379c:	f8ca 6000 	str.w	r6, [sl]
    37a0:	9b06      	ldr	r3, [sp, #24]
    37a2:	f8db 1000 	ldr.w	r1, [fp]
    37a6:	021a      	lsls	r2, r3, #8
    37a8:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
    37ac:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
    37b0:	431a      	orrs	r2, r3
    37b2:	0a13      	lsrs	r3, r2, #8
    37b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    37b8:	4313      	orrs	r3, r2
    37ba:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    37be:	f8cb 3000 	str.w	r3, [fp]
    37c2:	9b02      	ldr	r3, [sp, #8]
    37c4:	3b01      	subs	r3, #1
    37c6:	9302      	str	r3, [sp, #8]
    37c8:	f47f ae07 	bne.w	33da <getTrngSource+0x6a>
    37cc:	2000      	movs	r0, #0
    37ce:	e629      	b.n	3424 <getTrngSource+0xb4>
    37d0:	2403      	movs	r4, #3
    37d2:	e7b2      	b.n	373a <getTrngSource+0x3ca>
    37d4:	2402      	movs	r4, #2
    37d6:	e7b0      	b.n	373a <getTrngSource+0x3ca>
    37d8:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    37dc:	f8d3 1c0c 	ldr.w	r1, [r3, #3084]	; 0xc0c
    37e0:	3101      	adds	r1, #1
    37e2:	d006      	beq.n	37f2 <getTrngSource+0x482>
    37e4:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
    37e8:	e745      	b.n	3676 <getTrngSource+0x306>
    37ea:	2703      	movs	r7, #3
    37ec:	e71a      	b.n	3624 <getTrngSource+0x2b4>
    37ee:	2702      	movs	r7, #2
    37f0:	e718      	b.n	3624 <getTrngSource+0x2b4>
    37f2:	2316      	movs	r3, #22
    37f4:	e743      	b.n	367e <getTrngSource+0x30e>
    37f6:	bf00      	nop
    37f8:	508411c4 	.word	0x508411c4
    37fc:	50841140 	.word	0x50841140
    3800:	5084112c 	.word	0x5084112c
    3804:	50841100 	.word	0x50841100
    3808:	0ffffffe 	.word	0x0ffffffe
    380c:	5084110c 	.word	0x5084110c
    3810:	50841138 	.word	0x50841138
    3814:	aaaaaaab 	.word	0xaaaaaaab
    3818:	508411d8 	.word	0x508411d8
    381c:	00f10c36 	.word	0x00f10c36

00003820 <LLF_RND_GetTrngSource>:
    3820:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3824:	4c1b      	ldr	r4, [pc, #108]	; (3894 <LLF_RND_GetTrngSource+0x74>)
    3826:	b085      	sub	sp, #20
    3828:	4607      	mov	r7, r0
    382a:	e9dd 560d 	ldrd	r5, r6, [sp, #52]	; 0x34
    382e:	4688      	mov	r8, r1
    3830:	6820      	ldr	r0, [r4, #0]
    3832:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3836:	4691      	mov	r9, r2
    3838:	f7ff fa10 	bl	2c5c <CC_PalMutexLock>
    383c:	bb28      	cbnz	r0, 388a <LLF_RND_GetTrngSource+0x6a>
    383e:	2000      	movs	r0, #0
    3840:	f7ff fa3c 	bl	2cbc <CC_PalPowerSaveModeSelect>
    3844:	b9e8      	cbnz	r0, 3882 <LLF_RND_GetTrngSource+0x62>
    3846:	2300      	movs	r3, #0
    3848:	e9cd 5600 	strd	r5, r6, [sp]
    384c:	9302      	str	r3, [sp, #8]
    384e:	464a      	mov	r2, r9
    3850:	4641      	mov	r1, r8
    3852:	4638      	mov	r0, r7
    3854:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3856:	f7ff fd8b 	bl	3370 <getTrngSource>
    385a:	4605      	mov	r5, r0
    385c:	2001      	movs	r0, #1
    385e:	f7ff fa2d 	bl	2cbc <CC_PalPowerSaveModeSelect>
    3862:	b950      	cbnz	r0, 387a <LLF_RND_GetTrngSource+0x5a>
    3864:	6820      	ldr	r0, [r4, #0]
    3866:	f7ff fa01 	bl	2c6c <CC_PalMutexUnlock>
    386a:	b110      	cbz	r0, 3872 <LLF_RND_GetTrngSource+0x52>
    386c:	480a      	ldr	r0, [pc, #40]	; (3898 <LLF_RND_GetTrngSource+0x78>)
    386e:	f7ff fb8d 	bl	2f8c <CC_PalAbort>
    3872:	4628      	mov	r0, r5
    3874:	b005      	add	sp, #20
    3876:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    387a:	4808      	ldr	r0, [pc, #32]	; (389c <LLF_RND_GetTrngSource+0x7c>)
    387c:	f7ff fb86 	bl	2f8c <CC_PalAbort>
    3880:	e7f0      	b.n	3864 <LLF_RND_GetTrngSource+0x44>
    3882:	4807      	ldr	r0, [pc, #28]	; (38a0 <LLF_RND_GetTrngSource+0x80>)
    3884:	f7ff fb82 	bl	2f8c <CC_PalAbort>
    3888:	e7dd      	b.n	3846 <LLF_RND_GetTrngSource+0x26>
    388a:	4806      	ldr	r0, [pc, #24]	; (38a4 <LLF_RND_GetTrngSource+0x84>)
    388c:	f7ff fb7e 	bl	2f8c <CC_PalAbort>
    3890:	e7d5      	b.n	383e <LLF_RND_GetTrngSource+0x1e>
    3892:	bf00      	nop
    3894:	20000064 	.word	0x20000064
    3898:	00004a58 	.word	0x00004a58
    389c:	00004a90 	.word	0x00004a90
    38a0:	00004a70 	.word	0x00004a70
    38a4:	00004a40 	.word	0x00004a40

000038a8 <LLF_RND_RunTrngStartupTest>:
    38a8:	b510      	push	{r4, lr}
    38aa:	2401      	movs	r4, #1
    38ac:	b086      	sub	sp, #24
    38ae:	ab05      	add	r3, sp, #20
    38b0:	e9cd 2401 	strd	r2, r4, [sp, #4]
    38b4:	9300      	str	r3, [sp, #0]
    38b6:	2200      	movs	r2, #0
    38b8:	ab04      	add	r3, sp, #16
    38ba:	f7ff fd59 	bl	3370 <getTrngSource>
    38be:	b006      	add	sp, #24
    38c0:	bd10      	pop	{r4, pc}
    38c2:	bf00      	nop

000038c4 <LLF_RND_WaitRngInterrupt>:
    38c4:	b508      	push	{r3, lr}
    38c6:	4601      	mov	r1, r0
    38c8:	f44f 6080 	mov.w	r0, #1024	; 0x400
    38cc:	f7ff fa50 	bl	2d70 <CC_HalWaitInterruptRND>
    38d0:	2300      	movs	r3, #0
    38d2:	4902      	ldr	r1, [pc, #8]	; (38dc <LLF_RND_WaitRngInterrupt+0x18>)
    38d4:	4a02      	ldr	r2, [pc, #8]	; (38e0 <LLF_RND_WaitRngInterrupt+0x1c>)
    38d6:	600b      	str	r3, [r1, #0]
    38d8:	6013      	str	r3, [r2, #0]
    38da:	bd08      	pop	{r3, pc}
    38dc:	508411c8 	.word	0x508411c8
    38e0:	5084112c 	.word	0x5084112c

000038e4 <LLF_RND_GetRoscSampleCnt>:
    38e4:	3801      	subs	r0, #1
    38e6:	2807      	cmp	r0, #7
    38e8:	d815      	bhi.n	3916 <LLF_RND_GetRoscSampleCnt+0x32>
    38ea:	e8df f000 	tbb	[pc, r0]
    38ee:	0c10      	.short	0x0c10
    38f0:	14140814 	.word	0x14140814
    38f4:	0414      	.short	0x0414
    38f6:	68cb      	ldr	r3, [r1, #12]
    38f8:	2000      	movs	r0, #0
    38fa:	624b      	str	r3, [r1, #36]	; 0x24
    38fc:	4770      	bx	lr
    38fe:	688b      	ldr	r3, [r1, #8]
    3900:	2000      	movs	r0, #0
    3902:	624b      	str	r3, [r1, #36]	; 0x24
    3904:	4770      	bx	lr
    3906:	684b      	ldr	r3, [r1, #4]
    3908:	2000      	movs	r0, #0
    390a:	624b      	str	r3, [r1, #36]	; 0x24
    390c:	4770      	bx	lr
    390e:	680b      	ldr	r3, [r1, #0]
    3910:	2000      	movs	r0, #0
    3912:	624b      	str	r3, [r1, #36]	; 0x24
    3914:	4770      	bx	lr
    3916:	4801      	ldr	r0, [pc, #4]	; (391c <LLF_RND_GetRoscSampleCnt+0x38>)
    3918:	4770      	bx	lr
    391a:	bf00      	nop
    391c:	00f10c31 	.word	0x00f10c31

00003920 <LLF_RND_GetFastestRosc>:
    3920:	680b      	ldr	r3, [r1, #0]
    3922:	e002      	b.n	392a <LLF_RND_GetFastestRosc+0xa>
    3924:	2b08      	cmp	r3, #8
    3926:	600b      	str	r3, [r1, #0]
    3928:	d806      	bhi.n	3938 <LLF_RND_GetFastestRosc+0x18>
    392a:	6a02      	ldr	r2, [r0, #32]
    392c:	4213      	tst	r3, r2
    392e:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3932:	d0f7      	beq.n	3924 <LLF_RND_GetFastestRosc+0x4>
    3934:	2000      	movs	r0, #0
    3936:	4770      	bx	lr
    3938:	4800      	ldr	r0, [pc, #0]	; (393c <LLF_RND_GetFastestRosc+0x1c>)
    393a:	4770      	bx	lr
    393c:	00f10c31 	.word	0x00f10c31

00003940 <LLF_RND_TurnOffTrng>:
    3940:	2300      	movs	r3, #0
    3942:	4904      	ldr	r1, [pc, #16]	; (3954 <LLF_RND_TurnOffTrng+0x14>)
    3944:	4a04      	ldr	r2, [pc, #16]	; (3958 <LLF_RND_TurnOffTrng+0x18>)
    3946:	600b      	str	r3, [r1, #0]
    3948:	f44f 6080 	mov.w	r0, #1024	; 0x400
    394c:	6013      	str	r3, [r2, #0]
    394e:	f7ff b9fb 	b.w	2d48 <CC_HalClearInterruptBit>
    3952:	bf00      	nop
    3954:	5084112c 	.word	0x5084112c
    3958:	508411c4 	.word	0x508411c4

0000395c <main>:
 *  0 kB  |---------------------|
 */


void main(void)
{
    395c:	b508      	push	{r3, lr}
	spm_config();
    395e:	f7fd f8fb 	bl	b58 <spm_config>
	spm_jump();
}
    3962:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	spm_jump();
    3966:	f7fd b88d 	b.w	a84 <spm_jump>

0000396a <arch_printk_char_out>:
}
    396a:	2000      	movs	r0, #0
    396c:	4770      	bx	lr

0000396e <print_err>:
{
    396e:	b570      	push	{r4, r5, r6, lr}
    3970:	460d      	mov	r5, r1
    3972:	4604      	mov	r4, r0
	out('E', ctx);
    3974:	2045      	movs	r0, #69	; 0x45
    3976:	47a0      	blx	r4
	out('R', ctx);
    3978:	4629      	mov	r1, r5
    397a:	2052      	movs	r0, #82	; 0x52
    397c:	47a0      	blx	r4
	out('R', ctx);
    397e:	4629      	mov	r1, r5
    3980:	4623      	mov	r3, r4
}
    3982:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
    3986:	2052      	movs	r0, #82	; 0x52
    3988:	4718      	bx	r3

0000398a <z_vprintk>:
{
    398a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
    398e:	f04f 0800 	mov.w	r8, #0
{
    3992:	4606      	mov	r6, r0
    3994:	460f      	mov	r7, r1
	int min_width = -1;
    3996:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    399a:	46c1      	mov	r9, r8
{
    399c:	b08b      	sub	sp, #44	; 0x2c
    399e:	461c      	mov	r4, r3
	while (*fmt) {
    39a0:	1e53      	subs	r3, r2, #1
    39a2:	9302      	str	r3, [sp, #8]
			might_format = 0;
    39a4:	2500      	movs	r5, #0
					break;
    39a6:	e005      	b.n	39b4 <z_vprintk+0x2a>
		if (!might_format) {
    39a8:	b96d      	cbnz	r5, 39c6 <z_vprintk+0x3c>
			if (*fmt != '%') {
    39aa:	2825      	cmp	r0, #37	; 0x25
    39ac:	f000 814f 	beq.w	3c4e <z_vprintk+0x2c4>
				out((int)*fmt, ctx);
    39b0:	4639      	mov	r1, r7
    39b2:	47b0      	blx	r6
	while (*fmt) {
    39b4:	9b02      	ldr	r3, [sp, #8]
    39b6:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    39ba:	9302      	str	r3, [sp, #8]
    39bc:	2800      	cmp	r0, #0
    39be:	d1f3      	bne.n	39a8 <z_vprintk+0x1e>
}
    39c0:	b00b      	add	sp, #44	; 0x2c
    39c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
    39c6:	2864      	cmp	r0, #100	; 0x64
    39c8:	d06e      	beq.n	3aa8 <z_vprintk+0x11e>
    39ca:	d81a      	bhi.n	3a02 <z_vprintk+0x78>
    39cc:	2839      	cmp	r0, #57	; 0x39
    39ce:	d80a      	bhi.n	39e6 <z_vprintk+0x5c>
    39d0:	2831      	cmp	r0, #49	; 0x31
    39d2:	d260      	bcs.n	3a96 <z_vprintk+0x10c>
    39d4:	282d      	cmp	r0, #45	; 0x2d
    39d6:	f000 8140 	beq.w	3c5a <z_vprintk+0x2d0>
    39da:	2830      	cmp	r0, #48	; 0x30
    39dc:	d04c      	beq.n	3a78 <z_vprintk+0xee>
    39de:	2825      	cmp	r0, #37	; 0x25
    39e0:	d107      	bne.n	39f2 <z_vprintk+0x68>
				out((int)'%', ctx);
    39e2:	4639      	mov	r1, r7
    39e4:	e00b      	b.n	39fe <z_vprintk+0x74>
			switch (*fmt) {
    39e6:	2858      	cmp	r0, #88	; 0x58
    39e8:	f000 80bb 	beq.w	3b62 <z_vprintk+0x1d8>
    39ec:	2863      	cmp	r0, #99	; 0x63
    39ee:	f000 812a 	beq.w	3c46 <z_vprintk+0x2bc>
					out((int)'%', ctx);
    39f2:	4639      	mov	r1, r7
    39f4:	2025      	movs	r0, #37	; 0x25
    39f6:	47b0      	blx	r6
					out((int)*fmt, ctx);
    39f8:	4639      	mov	r1, r7
    39fa:	9b02      	ldr	r3, [sp, #8]
    39fc:	7818      	ldrb	r0, [r3, #0]
    39fe:	47b0      	blx	r6
    3a00:	e7d0      	b.n	39a4 <z_vprintk+0x1a>
			switch (*fmt) {
    3a02:	2870      	cmp	r0, #112	; 0x70
    3a04:	f000 80a3 	beq.w	3b4e <z_vprintk+0x1c4>
    3a08:	d811      	bhi.n	3a2e <z_vprintk+0xa4>
    3a0a:	2869      	cmp	r0, #105	; 0x69
    3a0c:	d04c      	beq.n	3aa8 <z_vprintk+0x11e>
    3a0e:	286c      	cmp	r0, #108	; 0x6c
    3a10:	d105      	bne.n	3a1e <z_vprintk+0x94>
				} else if (*fmt == 'l' && length_mod == 'l') {
    3a12:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    3a16:	d12a      	bne.n	3a6e <z_vprintk+0xe4>
					length_mod = 'L';
    3a18:	f04f 084c 	mov.w	r8, #76	; 0x4c
    3a1c:	e7ca      	b.n	39b4 <z_vprintk+0x2a>
			switch (*fmt) {
    3a1e:	2868      	cmp	r0, #104	; 0x68
    3a20:	d1e7      	bne.n	39f2 <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
    3a22:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
    3a26:	d122      	bne.n	3a6e <z_vprintk+0xe4>
					length_mod = 'H';
    3a28:	f04f 0848 	mov.w	r8, #72	; 0x48
    3a2c:	e7c2      	b.n	39b4 <z_vprintk+0x2a>
			switch (*fmt) {
    3a2e:	2875      	cmp	r0, #117	; 0x75
    3a30:	d071      	beq.n	3b16 <z_vprintk+0x18c>
    3a32:	d818      	bhi.n	3a66 <z_vprintk+0xdc>
    3a34:	2873      	cmp	r0, #115	; 0x73
    3a36:	d1dc      	bne.n	39f2 <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
    3a38:	f854 5b04 	ldr.w	r5, [r4], #4
				while (*s) {
    3a3c:	46ab      	mov	fp, r5
    3a3e:	465b      	mov	r3, fp
    3a40:	f81b 0b01 	ldrb.w	r0, [fp], #1
    3a44:	2800      	cmp	r0, #0
    3a46:	f040 80fb 	bne.w	3c40 <z_vprintk+0x2b6>
				if (padding == PAD_SPACE_AFTER) {
    3a4a:	f1b9 0f03 	cmp.w	r9, #3
    3a4e:	f040 810a 	bne.w	3c66 <z_vprintk+0x2dc>
					int remaining = min_width - (s - start);
    3a52:	1b5d      	subs	r5, r3, r5
    3a54:	ebaa 0505 	sub.w	r5, sl, r5
					while (remaining-- > 0) {
    3a58:	2d00      	cmp	r5, #0
    3a5a:	dda3      	ble.n	39a4 <z_vprintk+0x1a>
						out(' ', ctx);
    3a5c:	4639      	mov	r1, r7
    3a5e:	2020      	movs	r0, #32
    3a60:	47b0      	blx	r6
    3a62:	3d01      	subs	r5, #1
    3a64:	e7f8      	b.n	3a58 <z_vprintk+0xce>
			switch (*fmt) {
    3a66:	2878      	cmp	r0, #120	; 0x78
    3a68:	d07b      	beq.n	3b62 <z_vprintk+0x1d8>
    3a6a:	287a      	cmp	r0, #122	; 0x7a
    3a6c:	d1c1      	bne.n	39f2 <z_vprintk+0x68>
				} else if (length_mod == 0) {
    3a6e:	f1b8 0f00 	cmp.w	r8, #0
    3a72:	d1be      	bne.n	39f2 <z_vprintk+0x68>
    3a74:	4680      	mov	r8, r0
    3a76:	e79d      	b.n	39b4 <z_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
    3a78:	f1ba 0f00 	cmp.w	sl, #0
    3a7c:	da0e      	bge.n	3a9c <z_vprintk+0x112>
    3a7e:	f1b9 0f00 	cmp.w	r9, #0
    3a82:	f000 80ed 	beq.w	3c60 <z_vprintk+0x2d6>
					min_width = *fmt - '0';
    3a86:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    3a8a:	f1b9 0f00 	cmp.w	r9, #0
    3a8e:	bf08      	it	eq
    3a90:	f04f 0902 	moveq.w	r9, #2
    3a94:	e78e      	b.n	39b4 <z_vprintk+0x2a>
				if (min_width < 0) {
    3a96:	f1ba 0f00 	cmp.w	sl, #0
    3a9a:	dbf4      	blt.n	3a86 <z_vprintk+0xfc>
					min_width = 10 * min_width + *fmt - '0';
    3a9c:	230a      	movs	r3, #10
    3a9e:	fb03 0a0a 	mla	sl, r3, sl, r0
    3aa2:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
    3aa6:	e7f0      	b.n	3a8a <z_vprintk+0x100>
				if (length_mod == 'z') {
    3aa8:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
    3aac:	d102      	bne.n	3ab4 <z_vprintk+0x12a>
					d = va_arg(ap, int);
    3aae:	f854 5b04 	ldr.w	r5, [r4], #4
    3ab2:	e01f      	b.n	3af4 <z_vprintk+0x16a>
				} else if (length_mod == 'l') {
    3ab4:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    3ab8:	d0f9      	beq.n	3aae <z_vprintk+0x124>
				} else if (length_mod == 'L') {
    3aba:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    3abe:	d1f6      	bne.n	3aae <z_vprintk+0x124>
					long long lld = va_arg(ap, long long);
    3ac0:	3407      	adds	r4, #7
    3ac2:	f024 0407 	bic.w	r4, r4, #7
    3ac6:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (lld > __LONG_MAX__ ||
    3aca:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
    3ace:	9106      	str	r1, [sp, #24]
    3ad0:	f143 0100 	adc.w	r1, r3, #0
    3ad4:	9107      	str	r1, [sp, #28]
    3ad6:	2100      	movs	r1, #0
    3ad8:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
    3adc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3ae0:	4561      	cmp	r1, ip
    3ae2:	bf08      	it	eq
    3ae4:	4558      	cmpeq	r0, fp
    3ae6:	d204      	bcs.n	3af2 <z_vprintk+0x168>
						print_err(out, ctx);
    3ae8:	4639      	mov	r1, r7
    3aea:	4630      	mov	r0, r6
    3aec:	f7ff ff3f 	bl	396e <print_err>
						break;
    3af0:	e758      	b.n	39a4 <z_vprintk+0x1a>
					d = lld;
    3af2:	4615      	mov	r5, r2
				if (d < 0) {
    3af4:	2d00      	cmp	r5, #0
    3af6:	da05      	bge.n	3b04 <z_vprintk+0x17a>
					out((int)'-', ctx);
    3af8:	4639      	mov	r1, r7
    3afa:	202d      	movs	r0, #45	; 0x2d
    3afc:	47b0      	blx	r6
					d = -d;
    3afe:	426d      	negs	r5, r5
					min_width--;
    3b00:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
    3b04:	464b      	mov	r3, r9
    3b06:	462a      	mov	r2, r5
    3b08:	f8cd a000 	str.w	sl, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
    3b0c:	4639      	mov	r1, r7
    3b0e:	4630      	mov	r0, r6
    3b10:	f7fc fd48 	bl	5a4 <_printk_dec_ulong>
				break;
    3b14:	e746      	b.n	39a4 <z_vprintk+0x1a>
				if (length_mod == 'z') {
    3b16:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
    3b1a:	d102      	bne.n	3b22 <z_vprintk+0x198>
					u = va_arg(ap, unsigned int);
    3b1c:	f854 2b04 	ldr.w	r2, [r4], #4
    3b20:	e011      	b.n	3b46 <z_vprintk+0x1bc>
				} else if (length_mod == 'l') {
    3b22:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    3b26:	d0f9      	beq.n	3b1c <z_vprintk+0x192>
				} else if (length_mod == 'L') {
    3b28:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    3b2c:	d1f6      	bne.n	3b1c <z_vprintk+0x192>
					if (llu > ~0UL) {
    3b2e:	2100      	movs	r1, #0
    3b30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
					unsigned long long llu =
    3b34:	3407      	adds	r4, #7
    3b36:	f024 0407 	bic.w	r4, r4, #7
    3b3a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
    3b3e:	4299      	cmp	r1, r3
    3b40:	bf08      	it	eq
    3b42:	4290      	cmpeq	r0, r2
    3b44:	d3d0      	bcc.n	3ae8 <z_vprintk+0x15e>
				_printk_dec_ulong(out, ctx, u, padding,
    3b46:	f8cd a000 	str.w	sl, [sp]
    3b4a:	464b      	mov	r3, r9
    3b4c:	e7de      	b.n	3b0c <z_vprintk+0x182>
				out('0', ctx);
    3b4e:	4639      	mov	r1, r7
    3b50:	2030      	movs	r0, #48	; 0x30
    3b52:	47b0      	blx	r6
				out('x', ctx);
    3b54:	4639      	mov	r1, r7
    3b56:	2078      	movs	r0, #120	; 0x78
    3b58:	47b0      	blx	r6
					min_width = 8;
    3b5a:	f04f 0a08 	mov.w	sl, #8
				padding = PAD_ZERO_BEFORE;
    3b5e:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
    3b62:	9b02      	ldr	r3, [sp, #8]
    3b64:	781b      	ldrb	r3, [r3, #0]
    3b66:	2b70      	cmp	r3, #112	; 0x70
    3b68:	d104      	bne.n	3b74 <z_vprintk+0x1ea>
					x = va_arg(ap, unsigned int);
    3b6a:	f854 3b04 	ldr.w	r3, [r4], #4
    3b6e:	9304      	str	r3, [sp, #16]
    3b70:	2300      	movs	r3, #0
    3b72:	e00d      	b.n	3b90 <z_vprintk+0x206>
				} else if (length_mod == 'l') {
    3b74:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    3b78:	d0f7      	beq.n	3b6a <z_vprintk+0x1e0>
				} else if (length_mod == 'L') {
    3b7a:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    3b7e:	d1f4      	bne.n	3b6a <z_vprintk+0x1e0>
					x = va_arg(ap, unsigned long long);
    3b80:	3407      	adds	r4, #7
    3b82:	f024 0307 	bic.w	r3, r4, #7
    3b86:	461c      	mov	r4, r3
    3b88:	f854 2b08 	ldr.w	r2, [r4], #8
    3b8c:	685b      	ldr	r3, [r3, #4]
    3b8e:	9204      	str	r2, [sp, #16]
	int digits = 0;
    3b90:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
    3b92:	2210      	movs	r2, #16
	int shift = sizeof(num) * 8;
    3b94:	f04f 0b40 	mov.w	fp, #64	; 0x40
	int digits = 0;
    3b98:	9103      	str	r1, [sp, #12]
	int found_largest_digit = 0;
    3b9a:	9105      	str	r1, [sp, #20]
		shift -= 4;
    3b9c:	f1ab 0b04 	sub.w	fp, fp, #4
		nibble = (num >> shift) & 0xf;
    3ba0:	9804      	ldr	r0, [sp, #16]
    3ba2:	f1cb 0c20 	rsb	ip, fp, #32
    3ba6:	f1ab 0120 	sub.w	r1, fp, #32
    3baa:	fa20 f00b 	lsr.w	r0, r0, fp
    3bae:	fa03 fc0c 	lsl.w	ip, r3, ip
    3bb2:	ea40 000c 	orr.w	r0, r0, ip
    3bb6:	fa23 f101 	lsr.w	r1, r3, r1
    3bba:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
    3bbc:	f010 000f 	ands.w	r0, r0, #15
    3bc0:	d106      	bne.n	3bd0 <z_vprintk+0x246>
    3bc2:	9905      	ldr	r1, [sp, #20]
    3bc4:	b911      	cbnz	r1, 3bcc <z_vprintk+0x242>
    3bc6:	f1bb 0f00 	cmp.w	fp, #0
    3bca:	d122      	bne.n	3c12 <z_vprintk+0x288>
			nibble += nibble > 9 ? 87 : 48;
    3bcc:	2130      	movs	r1, #48	; 0x30
    3bce:	e003      	b.n	3bd8 <z_vprintk+0x24e>
    3bd0:	2809      	cmp	r0, #9
    3bd2:	bf8c      	ite	hi
    3bd4:	2157      	movhi	r1, #87	; 0x57
    3bd6:	2130      	movls	r1, #48	; 0x30
    3bd8:	4408      	add	r0, r1
			out((int)nibble, ctx);
    3bda:	b240      	sxtb	r0, r0
    3bdc:	4639      	mov	r1, r7
    3bde:	9308      	str	r3, [sp, #32]
    3be0:	9205      	str	r2, [sp, #20]
    3be2:	47b0      	blx	r6
			digits++;
    3be4:	9b03      	ldr	r3, [sp, #12]
	while (shift >= 4) {
    3be6:	9a05      	ldr	r2, [sp, #20]
			digits++;
    3be8:	3301      	adds	r3, #1
    3bea:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
    3bec:	9b08      	ldr	r3, [sp, #32]
    3bee:	f1bb 0f00 	cmp.w	fp, #0
    3bf2:	d123      	bne.n	3c3c <z_vprintk+0x2b2>
	if (padding == PAD_SPACE_AFTER) {
    3bf4:	f1b9 0f03 	cmp.w	r9, #3
    3bf8:	f47f aed4 	bne.w	39a4 <z_vprintk+0x1a>
		remaining = min_width * 2 - digits;
    3bfc:	9b03      	ldr	r3, [sp, #12]
    3bfe:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
    3c02:	2d00      	cmp	r5, #0
    3c04:	f77f aece 	ble.w	39a4 <z_vprintk+0x1a>
			out(' ', ctx);
    3c08:	4639      	mov	r1, r7
    3c0a:	2020      	movs	r0, #32
    3c0c:	47b0      	blx	r6
    3c0e:	3d01      	subs	r5, #1
    3c10:	e7f7      	b.n	3c02 <z_vprintk+0x278>
		if (remaining-- <= min_width) {
    3c12:	1e51      	subs	r1, r2, #1
    3c14:	4592      	cmp	sl, r2
    3c16:	9108      	str	r1, [sp, #32]
    3c18:	db07      	blt.n	3c2a <z_vprintk+0x2a0>
			if (padding == PAD_ZERO_BEFORE) {
    3c1a:	f1b9 0f01 	cmp.w	r9, #1
    3c1e:	d106      	bne.n	3c2e <z_vprintk+0x2a4>
				out('0', ctx);
    3c20:	4639      	mov	r1, r7
    3c22:	2030      	movs	r0, #48	; 0x30
    3c24:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
    3c26:	47b0      	blx	r6
    3c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
			nibble += nibble > 9 ? 87 : 48;
    3c2a:	9a08      	ldr	r2, [sp, #32]
    3c2c:	e7b6      	b.n	3b9c <z_vprintk+0x212>
			} else if (padding == PAD_SPACE_BEFORE) {
    3c2e:	f1b9 0f02 	cmp.w	r9, #2
    3c32:	d1fa      	bne.n	3c2a <z_vprintk+0x2a0>
    3c34:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
    3c36:	4639      	mov	r1, r7
    3c38:	2020      	movs	r0, #32
    3c3a:	e7f4      	b.n	3c26 <z_vprintk+0x29c>
			found_largest_digit = 1;
    3c3c:	9505      	str	r5, [sp, #20]
    3c3e:	e7ad      	b.n	3b9c <z_vprintk+0x212>
					out((int)(*s++), ctx);
    3c40:	4639      	mov	r1, r7
    3c42:	47b0      	blx	r6
    3c44:	e6fb      	b.n	3a3e <z_vprintk+0xb4>
				out(c, ctx);
    3c46:	4639      	mov	r1, r7
    3c48:	f854 0b04 	ldr.w	r0, [r4], #4
    3c4c:	e6d7      	b.n	39fe <z_vprintk+0x74>
				length_mod = 0;
    3c4e:	46a8      	mov	r8, r5
				padding = PAD_NONE;
    3c50:	46a9      	mov	r9, r5
				min_width = -1;
    3c52:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				might_format = 1;
    3c56:	2501      	movs	r5, #1
    3c58:	e6ac      	b.n	39b4 <z_vprintk+0x2a>
				padding = PAD_SPACE_AFTER;
    3c5a:	f04f 0903 	mov.w	r9, #3
    3c5e:	e6a9      	b.n	39b4 <z_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
    3c60:	f04f 0901 	mov.w	r9, #1
    3c64:	e6a6      	b.n	39b4 <z_vprintk+0x2a>
			might_format = 0;
    3c66:	4605      	mov	r5, r0
		++fmt;
    3c68:	e6a4      	b.n	39b4 <z_vprintk+0x2a>

00003c6a <printk>:
{
    3c6a:	b40f      	push	{r0, r1, r2, r3}
    3c6c:	b507      	push	{r0, r1, r2, lr}
    3c6e:	a904      	add	r1, sp, #16
    3c70:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    3c74:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    3c76:	f7fc fce7 	bl	648 <vprintk>
}
    3c7a:	b003      	add	sp, #12
    3c7c:	f85d eb04 	ldr.w	lr, [sp], #4
    3c80:	b004      	add	sp, #16
    3c82:	4770      	bx	lr

00003c84 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    3c84:	4604      	mov	r4, r0
    3c86:	b508      	push	{r3, lr}
    3c88:	4608      	mov	r0, r1
    3c8a:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    3c8c:	461a      	mov	r2, r3
    3c8e:	47a0      	blx	r4
	return z_impl_k_current_get();
    3c90:	f7fe fdb4 	bl	27fc <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    3c94:	f7fd fbb8 	bl	1408 <z_impl_k_thread_abort>

00003c98 <chunk_field>:
}

static inline size_t chunk_field(struct z_heap *h, chunkid_t c,
				 enum chunk_fields f)
{
	void *cmem = &h->buf[c];
    3c98:	6803      	ldr	r3, [r0, #0]
    3c9a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3

	if (big_heap(h)) {
    3c9e:	6883      	ldr	r3, [r0, #8]
    3ca0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((u32_t *)cmem)[f];
    3ca4:	bf2c      	ite	cs
    3ca6:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((u16_t *)cmem)[f];
    3caa:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
    3cae:	4770      	bx	lr

00003cb0 <chunk_set>:

static inline void chunk_set(struct z_heap *h, chunkid_t c,
			     enum chunk_fields f, chunkid_t val)
{
    3cb0:	b510      	push	{r4, lr}
	CHECK(c >= h->chunk0 && c < h->len);
	CHECK((val & ~((h->size_mask << 1) + 1)) == 0);
	CHECK((val & h->size_mask) < h->len);

	void *cmem = &h->buf[c];
    3cb2:	6804      	ldr	r4, [r0, #0]

	if (big_heap(h)) {
    3cb4:	6880      	ldr	r0, [r0, #8]
	void *cmem = &h->buf[c];
    3cb6:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if (big_heap(h)) {
    3cba:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((u32_t *)cmem)[f] = (u32_t) val;
    3cbe:	bf2c      	ite	cs
    3cc0:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		((u16_t *)cmem)[f] = (u16_t) val;
    3cc4:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
    3cc8:	bd10      	pop	{r4, pc}

00003cca <free_list_add>:
		chunk_set(h, second, FREE_PREV, first);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    3cca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3cce:	4604      	mov	r4, r0
	return (chunk_field(h, c, SIZE_AND_USED) & ~h->size_mask) != 0;
}

static ALWAYS_INLINE chunkid_t size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
    3cd0:	2200      	movs	r2, #0
    3cd2:	460d      	mov	r5, r1
    3cd4:	f7ff ffe0 	bl	3c98 <chunk_field>
    3cd8:	68e3      	ldr	r3, [r4, #12]
    3cda:	4018      	ands	r0, r3
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    3cdc:	68a3      	ldr	r3, [r4, #8]
}

static int bucket_idx(struct z_heap *h, size_t sz)
{
	/* A chunk of size 2 is the minimum size on big heaps */
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
    3cde:	fab0 f280 	clz	r2, r0
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    3ce2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    3ce6:	bf34      	ite	cc
    3ce8:	2000      	movcc	r0, #0
    3cea:	2001      	movcs	r0, #1
	int b = bucket_idx(h, size(h, c));

	if (h->buckets[b].list_size++ == 0) {
    3cec:	6863      	ldr	r3, [r4, #4]
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
    3cee:	f1c0 001f 	rsb	r0, r0, #31
    3cf2:	1a80      	subs	r0, r0, r2
    3cf4:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
    3cf8:	684a      	ldr	r2, [r1, #4]
    3cfa:	1c56      	adds	r6, r2, #1
    3cfc:	604e      	str	r6, [r1, #4]
    3cfe:	b9a2      	cbnz	r2, 3d2a <free_list_add+0x60>
		CHECK(h->buckets[b].next == 0);
		CHECK((h->avail_buckets & (1 << b)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << b);
    3d00:	2201      	movs	r2, #1
    3d02:	fa02 f100 	lsl.w	r1, r2, r0
    3d06:	6962      	ldr	r2, [r4, #20]
    3d08:	430a      	orrs	r2, r1
    3d0a:	6162      	str	r2, [r4, #20]
		h->buckets[b].next = c;
		chunk_set(h, c, FREE_PREV, c);
    3d0c:	4629      	mov	r1, r5
		h->buckets[b].next = c;
    3d0e:	f843 5030 	str.w	r5, [r3, r0, lsl #3]
		chunk_set(h, c, FREE_PREV, c);
    3d12:	2202      	movs	r2, #2
    3d14:	462b      	mov	r3, r5
    3d16:	4620      	mov	r0, r4
    3d18:	f7ff ffca 	bl	3cb0 <chunk_set>
		chunk_set(h, c, FREE_NEXT, c);
    3d1c:	2203      	movs	r2, #3
    3d1e:	4629      	mov	r1, r5
		chunkid_t first = free_prev(h, second);

		chunk_set(h, c, FREE_PREV, first);
		chunk_set(h, c, FREE_NEXT, second);
		chunk_set(h, first, FREE_NEXT, c);
		chunk_set(h, second, FREE_PREV, c);
    3d20:	4620      	mov	r0, r4
	}

	CHECK(h->avail_buckets & (1 << bucket_idx(h, size(h, c))));
}
    3d22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		chunk_set(h, second, FREE_PREV, c);
    3d26:	f7ff bfc3 	b.w	3cb0 <chunk_set>
		chunkid_t second = h->buckets[b].next;
    3d2a:	f853 6030 	ldr.w	r6, [r3, r0, lsl #3]
	return chunk_field(h, c, FREE_PREV);
    3d2e:	2202      	movs	r2, #2
    3d30:	4631      	mov	r1, r6
    3d32:	4620      	mov	r0, r4
    3d34:	f7ff ffb0 	bl	3c98 <chunk_field>
    3d38:	4607      	mov	r7, r0
		chunk_set(h, c, FREE_PREV, first);
    3d3a:	4603      	mov	r3, r0
    3d3c:	2202      	movs	r2, #2
    3d3e:	4629      	mov	r1, r5
    3d40:	4620      	mov	r0, r4
    3d42:	f7ff ffb5 	bl	3cb0 <chunk_set>
		chunk_set(h, c, FREE_NEXT, second);
    3d46:	4633      	mov	r3, r6
    3d48:	2203      	movs	r2, #3
    3d4a:	4629      	mov	r1, r5
    3d4c:	4620      	mov	r0, r4
    3d4e:	f7ff ffaf 	bl	3cb0 <chunk_set>
		chunk_set(h, first, FREE_NEXT, c);
    3d52:	2203      	movs	r2, #3
    3d54:	4639      	mov	r1, r7
    3d56:	462b      	mov	r3, r5
    3d58:	4620      	mov	r0, r4
    3d5a:	f7ff ffa9 	bl	3cb0 <chunk_set>
		chunk_set(h, second, FREE_PREV, c);
    3d5e:	2202      	movs	r2, #2
    3d60:	4631      	mov	r1, r6
    3d62:	e7dd      	b.n	3d20 <free_list_add+0x56>

00003d64 <sys_heap_init>:

	return NULL;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    3d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if __SIZEOF_SIZE_T__ > 4
	CHECK(bytes < 0x800000000ULL);
#endif

	/* Round the start up, the end down */
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
    3d66:	1dcc      	adds	r4, r1, #7
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
    3d68:	4411      	add	r1, r2

	heap->heap = (struct z_heap *)addr;
	h->buf = (u64_t *)addr;
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
	h->len = buf_sz;
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
    3d6a:	f647 72ff 	movw	r2, #32767	; 0x7fff
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
    3d6e:	f024 0407 	bic.w	r4, r4, #7
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
    3d72:	f021 0107 	bic.w	r1, r1, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    3d76:	1b09      	subs	r1, r1, r4
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
    3d78:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    3d7c:	ea4f 03d1 	mov.w	r3, r1, lsr #3
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
    3d80:	bf2c      	ite	cs
    3d82:	f06f 4100 	mvncs.w	r1, #2147483648	; 0x80000000
    3d86:	4611      	movcc	r1, r2
	heap->heap = (struct z_heap *)addr;
    3d88:	6004      	str	r4, [r0, #0]
	h->avail_buckets = 0;
    3d8a:	2000      	movs	r0, #0
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    3d8c:	4293      	cmp	r3, r2
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
    3d8e:	60e1      	str	r1, [r4, #12]
    3d90:	bf94      	ite	ls
    3d92:	2100      	movls	r1, #0
    3d94:	2101      	movhi	r1, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
    3d96:	fab3 f683 	clz	r6, r3
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    3d9a:	4617      	mov	r7, r2
				* sizeof(struct z_heap_bucket));

	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);

	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
		heap->heap->buckets[i].list_size = 0;
    3d9c:	4684      	mov	ip, r0
				* sizeof(struct z_heap_bucket));
    3d9e:	f1c1 0120 	rsb	r1, r1, #32
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
    3da2:	f104 0518 	add.w	r5, r4, #24
				* sizeof(struct z_heap_bucket));
    3da6:	1b89      	subs	r1, r1, r6
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
    3da8:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
	h->len = buf_sz;
    3dac:	e9c4 5301 	strd	r5, r3, [r4, #4]
	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
    3db0:	3103      	adds	r1, #3
	h->buf = (u64_t *)addr;
    3db2:	6024      	str	r4, [r4, #0]
	h->avail_buckets = 0;
    3db4:	6160      	str	r0, [r4, #20]
	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
    3db6:	6121      	str	r1, [r4, #16]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    3db8:	68a2      	ldr	r2, [r4, #8]
    3dba:	42ba      	cmp	r2, r7
    3dbc:	bf94      	ite	ls
    3dbe:	2200      	movls	r2, #0
    3dc0:	2201      	movhi	r2, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
    3dc2:	f1c2 021f 	rsb	r2, r2, #31
    3dc6:	1b92      	subs	r2, r2, r6
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
    3dc8:	4290      	cmp	r0, r2
    3dca:	dd0a      	ble.n	3de2 <sys_heap_init+0x7e>
		heap->heap->buckets[i].next = 0;
	}

	chunk_set(h, h->chunk0, SIZE_AND_USED, buf_sz - h->chunk0);
    3dcc:	1a5b      	subs	r3, r3, r1
    3dce:	4620      	mov	r0, r4
    3dd0:	2200      	movs	r2, #0
    3dd2:	f7ff ff6d 	bl	3cb0 <chunk_set>
	free_list_add(h, h->chunk0);
    3dd6:	6921      	ldr	r1, [r4, #16]
    3dd8:	4620      	mov	r0, r4
}
    3dda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, h->chunk0);
    3dde:	f7ff bf74 	b.w	3cca <free_list_add>
		heap->heap->buckets[i].list_size = 0;
    3de2:	f8c5 c004 	str.w	ip, [r5, #4]
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
    3de6:	3001      	adds	r0, #1
		heap->heap->buckets[i].next = 0;
    3de8:	f845 cb08 	str.w	ip, [r5], #8
    3dec:	e7e4      	b.n	3db8 <sys_heap_init+0x54>

00003dee <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    3dee:	4770      	bx	lr

00003df0 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
    3df0:	f7fd beaa 	b.w	1b48 <SystemInit>

00003df4 <get_status>:
	if (data->started) {
    3df4:	220c      	movs	r2, #12
	data = get_sub_data(dev, type);
    3df6:	68c3      	ldr	r3, [r0, #12]
	return &data->subsys[type];
    3df8:	b2c9      	uxtb	r1, r1
	if (data->started) {
    3dfa:	fb02 3101 	mla	r1, r2, r1, r3
    3dfe:	7a4b      	ldrb	r3, [r1, #9]
    3e00:	b923      	cbnz	r3, 3e0c <get_status+0x18>
	if (data->ref > 0) {
    3e02:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
    3e04:	fab0 f080 	clz	r0, r0
    3e08:	0940      	lsrs	r0, r0, #5
    3e0a:	4770      	bx	lr
    3e0c:	2002      	movs	r0, #2
}
    3e0e:	4770      	bx	lr

00003e10 <clock_stop>:
{
    3e10:	b570      	push	{r4, r5, r6, lr}
    3e12:	b2c9      	uxtb	r1, r1
	config = get_sub_config(dev, type);
    3e14:	6844      	ldr	r4, [r0, #4]
	data = get_sub_data(dev, type);
    3e16:	68c5      	ldr	r5, [r0, #12]
	__asm__ volatile(
    3e18:	f04f 0320 	mov.w	r3, #32
    3e1c:	f3ef 8611 	mrs	r6, BASEPRI
    3e20:	f383 8811 	msr	BASEPRI, r3
    3e24:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
    3e28:	220c      	movs	r2, #12
    3e2a:	434a      	muls	r2, r1
    3e2c:	18ab      	adds	r3, r5, r2
    3e2e:	7a18      	ldrb	r0, [r3, #8]
    3e30:	b190      	cbz	r0, 3e58 <clock_stop+0x48>
	data->ref--;
    3e32:	3801      	subs	r0, #1
    3e34:	b2c0      	uxtb	r0, r0
    3e36:	7218      	strb	r0, [r3, #8]
	if (data->ref == 0) {
    3e38:	b988      	cbnz	r0, 3e5e <clock_stop+0x4e>
		nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
    3e3a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3e3e:	2101      	movs	r1, #1
	list->head = NULL;
    3e40:	50a8      	str	r0, [r5, r2]
    3e42:	78e2      	ldrb	r2, [r4, #3]
	list->tail = NULL;
    3e44:	6058      	str	r0, [r3, #4]
    3e46:	f102 2250 	add.w	r2, r2, #1342197760	; 0x50005000
    3e4a:	6011      	str	r1, [r2, #0]
		data->started = false;
    3e4c:	7258      	strb	r0, [r3, #9]
	__asm__ volatile(
    3e4e:	f386 8811 	msr	BASEPRI, r6
    3e52:	f3bf 8f6f 	isb	sy
}
    3e56:	bd70      	pop	{r4, r5, r6, pc}
		err = -EALREADY;
    3e58:	f06f 0044 	mvn.w	r0, #68	; 0x44
    3e5c:	e7f7      	b.n	3e4e <clock_stop+0x3e>
	int err = 0;
    3e5e:	2000      	movs	r0, #0
    3e60:	e7f5      	b.n	3e4e <clock_stop+0x3e>

00003e62 <clock_async_start>:
{
    3e62:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	config = get_sub_config(dev, type);
    3e66:	6846      	ldr	r6, [r0, #4]
	return &config->subsys[type];
    3e68:	b2cf      	uxtb	r7, r1
	clk_data = get_sub_data(dev, type);
    3e6a:	f8d0 e00c 	ldr.w	lr, [r0, #12]
	if ((data != NULL)
    3e6e:	b14a      	cbz	r2, 3e84 <clock_async_start+0x22>
	sys_snode_t *item = sys_slist_peek_head(list);
    3e70:	230c      	movs	r3, #12
    3e72:	437b      	muls	r3, r7
    3e74:	f85e 3003 	ldr.w	r3, [lr, r3]
		if (item == node) {
    3e78:	429a      	cmp	r2, r3
    3e7a:	d052      	beq.n	3f22 <clock_async_start+0xc0>
Z_GENLIST_PEEK_NEXT(slist, snode)
    3e7c:	b113      	cbz	r3, 3e84 <clock_async_start+0x22>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3e7e:	681b      	ldr	r3, [r3, #0]
	} while (item);
    3e80:	2b00      	cmp	r3, #0
    3e82:	d1f9      	bne.n	3e78 <clock_async_start+0x16>
	__asm__ volatile(
    3e84:	f04f 0320 	mov.w	r3, #32
    3e88:	f3ef 8c11 	mrs	ip, BASEPRI
    3e8c:	f383 8811 	msr	BASEPRI, r3
    3e90:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
    3e94:	250c      	movs	r5, #12
    3e96:	437d      	muls	r5, r7
    3e98:	eb0e 0305 	add.w	r3, lr, r5
    3e9c:	7a1c      	ldrb	r4, [r3, #8]
    3e9e:	3401      	adds	r4, #1
    3ea0:	b2e4      	uxtb	r4, r4
    3ea2:	721c      	strb	r4, [r3, #8]
	__asm__ volatile(
    3ea4:	f38c 8811 	msr	BASEPRI, ip
    3ea8:	f3bf 8f6f 	isb	sy
	if (data) {
    3eac:	b35a      	cbz	r2, 3f06 <clock_async_start+0xa4>
    p_reg->INTENCLR = mask;
    3eae:	f04f 2c50 	mov.w	ip, #1342197760	; 0x50005000
    3eb2:	f04f 0803 	mov.w	r8, #3
    3eb6:	f8cc 8308 	str.w	r8, [ip, #776]	; 0x308
		already_started = clk_data->started;
    3eba:	f893 c009 	ldrb.w	ip, [r3, #9]
		if (!already_started) {
    3ebe:	f1bc 0f00 	cmp.w	ip, #0
    3ec2:	d115      	bne.n	3ef0 <clock_async_start+0x8e>
	__asm__ volatile(
    3ec4:	f04f 0820 	mov.w	r8, #32
    3ec8:	f3ef 8911 	mrs	r9, BASEPRI
    3ecc:	f388 8811 	msr	BASEPRI, r8
    3ed0:	f3bf 8f6f 	isb	sy
	parent->next = child;
    3ed4:	f8c2 c000 	str.w	ip, [r2]
Z_GENLIST_APPEND(slist, snode)
    3ed8:	f8d3 8004 	ldr.w	r8, [r3, #4]
    3edc:	f1b8 0f00 	cmp.w	r8, #0
    3ee0:	d11b      	bne.n	3f1a <clock_async_start+0xb8>
	list->tail = node;
    3ee2:	605a      	str	r2, [r3, #4]
	list->head = node;
    3ee4:	f84e 2005 	str.w	r2, [lr, r5]
	__asm__ volatile(
    3ee8:	f389 8811 	msr	BASEPRI, r9
    3eec:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
    3ef0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3ef4:	2503      	movs	r5, #3
    3ef6:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		if (already_started) {
    3efa:	f1bc 0f00 	cmp.w	ip, #0
    3efe:	d002      	beq.n	3f06 <clock_async_start+0xa4>
			data->cb(dev, subsys, data->user_data);
    3f00:	e9d2 3201 	ldrd	r3, r2, [r2, #4]
    3f04:	4798      	blx	r3
	if (ref == 1) {
    3f06:	2c01      	cmp	r4, #1
    3f08:	d105      	bne.n	3f16 <clock_async_start+0xb4>
		nrf_clock_task_trigger(NRF_CLOCK, config->start_tsk);
    3f0a:	eb06 0687 	add.w	r6, r6, r7, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3f0e:	78b3      	ldrb	r3, [r6, #2]
    3f10:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    3f14:	601c      	str	r4, [r3, #0]
	return 0;
    3f16:	2000      	movs	r0, #0
    3f18:	e005      	b.n	3f26 <clock_async_start+0xc4>
	parent->next = child;
    3f1a:	f8c8 2000 	str.w	r2, [r8]
	list->tail = node;
    3f1e:	605a      	str	r2, [r3, #4]
    3f20:	e7e2      	b.n	3ee8 <clock_async_start+0x86>
		return -EBUSY;
    3f22:	f06f 000f 	mvn.w	r0, #15
}
    3f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00003f2a <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
    3f2a:	2200      	movs	r2, #0
    3f2c:	f7ff bf99 	b.w	3e62 <clock_async_start>

00003f30 <clk_init>:
{
    3f30:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3f32:	2200      	movs	r2, #0
{
    3f34:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3f36:	2101      	movs	r1, #1
    3f38:	2005      	movs	r0, #5
    3f3a:	f7fd f85b 	bl	ff4 <z_arm_irq_priority_set>
	irq_enable(DT_INST_IRQN(0));
    3f3e:	2005      	movs	r0, #5
    3f40:	f7fd f848 	bl	fd4 <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    3f44:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3f48:	2202      	movs	r2, #2
    3f4a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
    3f4e:	2203      	movs	r2, #3
	list->head = NULL;
    3f50:	2000      	movs	r0, #0
    3f52:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		sys_slist_init(&(get_sub_data(dev, i)->list));
    3f56:	68e3      	ldr	r3, [r4, #12]
	list->tail = NULL;
    3f58:	e9c3 0000 	strd	r0, r0, [r3]
    3f5c:	68e3      	ldr	r3, [r4, #12]
    3f5e:	e9c3 0003 	strd	r0, r0, [r3, #12]
}
    3f62:	bd10      	pop	{r4, pc}

00003f64 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    3f64:	4770      	bx	lr

00003f66 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    3f66:	4770      	bx	lr

00003f68 <sys_clock_disable>:
    3f68:	4770      	bx	lr

00003f6a <spm_secure_services_init>:
	mbedtls_platform_context platform_ctx = {0};
    3f6a:	2300      	movs	r3, #0
{
    3f6c:	b507      	push	{r0, r1, r2, lr}
	err = mbedtls_platform_setup(&platform_ctx);
    3f6e:	a801      	add	r0, sp, #4
	mbedtls_platform_context platform_ctx = {0};
    3f70:	f88d 3004 	strb.w	r3, [sp, #4]
	err = mbedtls_platform_setup(&platform_ctx);
    3f74:	f7fe ff1a 	bl	2dac <mbedtls_platform_setup>
}
    3f78:	b003      	add	sp, #12
    3f7a:	f85d fb04 	ldr.w	pc, [sp], #4

00003f7e <__acle_se_spm_request_random_number>:
	if (len != MBEDTLS_ENTROPY_MAX_GATHER) {
    3f7e:	2990      	cmp	r1, #144	; 0x90
{
    3f80:	b508      	push	{r3, lr}
    3f82:	4613      	mov	r3, r2
	if (len != MBEDTLS_ENTROPY_MAX_GATHER) {
    3f84:	d139      	bne.n	3ffa <__acle_se_spm_request_random_number+0x7c>
	err = mbedtls_hardware_poll(NULL, output, len, olen);
    3f86:	460a      	mov	r2, r1
    3f88:	4601      	mov	r1, r0
    3f8a:	2000      	movs	r0, #0
    3f8c:	f7fe ff1a 	bl	2dc4 <mbedtls_hardware_poll>
}
    3f90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    3f94:	4671      	mov	r1, lr
    3f96:	4672      	mov	r2, lr
    3f98:	4673      	mov	r3, lr
    3f9a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    3f9e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    3fa2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    3fa6:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
    3faa:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
    3fae:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
    3fb2:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
    3fb6:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
    3fba:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
    3fbe:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
    3fc2:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
    3fc6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    3fca:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    3fce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    3fd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    3fd6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    3fda:	f38e 8c00 	msr	CPSR_fs, lr
    3fde:	b410      	push	{r4}
    3fe0:	eef1 ca10 	vmrs	ip, fpscr
    3fe4:	f64f 7460 	movw	r4, #65376	; 0xff60
    3fe8:	f6c0 74ff 	movt	r4, #4095	; 0xfff
    3fec:	ea0c 0c04 	and.w	ip, ip, r4
    3ff0:	eee1 ca10 	vmsr	fpscr, ip
    3ff4:	bc10      	pop	{r4}
    3ff6:	46f4      	mov	ip, lr
    3ff8:	4774      	bxns	lr
		return -EINVAL;
    3ffa:	f06f 0015 	mvn.w	r0, #21
    3ffe:	e7c7      	b.n	3f90 <__acle_se_spm_request_random_number+0x12>

00004000 <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    4000:	2000      	movs	r0, #0
    4002:	f7fc bb4d 	b.w	6a0 <sys_reboot>

00004006 <z_irq_spurious>:
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    4006:	2100      	movs	r1, #0
    4008:	2001      	movs	r0, #1
    400a:	f000 b82b 	b.w	4064 <z_arm_fatal_error>

0000400e <irq_target_state_set>:
 *
 * @return N/A
 */
void irq_target_state_set(unsigned int irq, int secure_state)
{
	if (secure_state) {
    400e:	b243      	sxtb	r3, r0
    4010:	b1a9      	cbz	r1, 403e <irq_target_state_set+0x30>
  if ((int32_t)(IRQn) >= 0)
    4012:	2b00      	cmp	r3, #0
    4014:	db12      	blt.n	403c <irq_target_state_set+0x2e>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] &= ~((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    4016:	2101      	movs	r1, #1
    4018:	095b      	lsrs	r3, r3, #5
    401a:	009b      	lsls	r3, r3, #2
    401c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    4020:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    4024:	f8d3 2280 	ldr.w	r2, [r3, #640]	; 0x280
    4028:	f000 001f 	and.w	r0, r0, #31
    402c:	fa01 f000 	lsl.w	r0, r1, r0
    4030:	ea22 0200 	bic.w	r2, r2, r0
    4034:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
    return((uint32_t)(((NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
    4038:	f8d3 3280 	ldr.w	r3, [r3, #640]	; 0x280
		/* Set target state to Non-Secure */
		if (NVIC_SetTargetState(irq) != 1) {
			__ASSERT(0, "NVIC SetTargetState error");
		}
	}
}
    403c:	4770      	bx	lr
  if ((int32_t)(IRQn) >= 0)
    403e:	2b00      	cmp	r3, #0
    4040:	dbfc      	blt.n	403c <irq_target_state_set+0x2e>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    4042:	2201      	movs	r2, #1
    4044:	095b      	lsrs	r3, r3, #5
    4046:	009b      	lsls	r3, r3, #2
    4048:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    404c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    4050:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
    4054:	f000 001f 	and.w	r0, r0, #31
    4058:	fa02 f000 	lsl.w	r0, r2, r0
    405c:	4308      	orrs	r0, r1
    405e:	f8c3 0280 	str.w	r0, [r3, #640]	; 0x280
    4062:	e7e9      	b.n	4038 <irq_target_state_set+0x2a>

00004064 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    4064:	f000 b926 	b.w	42b4 <z_fatal_error>

00004068 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    4068:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    406a:	6800      	ldr	r0, [r0, #0]
    406c:	f000 b922 	b.w	42b4 <z_fatal_error>

00004070 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    4070:	b508      	push	{r3, lr}
	handler();
    4072:	f7fd f823 	bl	10bc <z_SysNmiOnReset>
	z_arm_int_exit();
}
    4076:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    407a:	f7fd b999 	b.w	13b0 <z_arm_exc_exit>

0000407e <mpu_configure_region>:
{
    407e:	b530      	push	{r4, r5, lr}
	region_conf.base = new_region->start;
    4080:	680b      	ldr	r3, [r1, #0]
{
    4082:	b085      	sub	sp, #20
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    4084:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
    4086:	f89d 2008 	ldrb.w	r2, [sp, #8]
    408a:	890d      	ldrh	r5, [r1, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    408c:	3c01      	subs	r4, #1
	region_conf.base = new_region->start;
    408e:	9300      	str	r3, [sp, #0]
	p_attr->mair_idx = attr->mair_idx;
    4090:	8949      	ldrh	r1, [r1, #10]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    4092:	f023 031f 	bic.w	r3, r3, #31
    4096:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    4098:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
    409c:	f361 1247 	bfi	r2, r1, #5, #3
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    40a0:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
    40a4:	280f      	cmp	r0, #15
	p_attr->mair_idx = attr->mair_idx;
    40a6:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    40aa:	9303      	str	r3, [sp, #12]
    40ac:	4604      	mov	r4, r0
    40ae:	d805      	bhi.n	40bc <mpu_configure_region+0x3e>
	region_init(index, region_conf);
    40b0:	4669      	mov	r1, sp
    40b2:	f7fd f9f9 	bl	14a8 <region_init>
}
    40b6:	4620      	mov	r0, r4
    40b8:	b005      	add	sp, #20
    40ba:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    40bc:	f06f 0415 	mvn.w	r4, #21
	return region_allocate_and_init(index,
    40c0:	e7f9      	b.n	40b6 <mpu_configure_region+0x38>

000040c2 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    40c2:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    40c6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    40ca:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
    40cc:	bf08      	it	eq
    40ce:	f06f 0015 	mvneq.w	r0, #21
    40d2:	4770      	bx	lr

000040d4 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    40d4:	3801      	subs	r0, #1
    40d6:	3901      	subs	r1, #1
    40d8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    40dc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    40e0:	4293      	cmp	r3, r2
    40e2:	d101      	bne.n	40e8 <strcmp+0x14>
    40e4:	2b00      	cmp	r3, #0
    40e6:	d1f7      	bne.n	40d8 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    40e8:	1a98      	subs	r0, r3, r2
    40ea:	4770      	bx	lr

000040ec <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    40ec:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    40ee:	b15a      	cbz	r2, 4108 <memcmp+0x1c>
    40f0:	3901      	subs	r1, #1
    40f2:	1884      	adds	r4, r0, r2
    40f4:	f810 2b01 	ldrb.w	r2, [r0], #1
    40f8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    40fc:	42a0      	cmp	r0, r4
    40fe:	d001      	beq.n	4104 <memcmp+0x18>
    4100:	429a      	cmp	r2, r3
    4102:	d0f7      	beq.n	40f4 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    4104:	1ad0      	subs	r0, r2, r3
}
    4106:	bd10      	pop	{r4, pc}
		return 0;
    4108:	4610      	mov	r0, r2
    410a:	e7fc      	b.n	4106 <memcmp+0x1a>

0000410c <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    410c:	1a43      	subs	r3, r0, r1
    410e:	4293      	cmp	r3, r2
{
    4110:	b510      	push	{r4, lr}
    4112:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    4116:	d308      	bcc.n	412a <memmove+0x1e>
	char *dest = d;
    4118:	4602      	mov	r2, r0
    411a:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    411c:	429a      	cmp	r2, r3
    411e:	d00b      	beq.n	4138 <memmove+0x2c>
			*dest = *src;
    4120:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    4124:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
    4128:	e7f8      	b.n	411c <memmove+0x10>
    412a:	440a      	add	r2, r1
			dest[n] = src[n];
    412c:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
    4130:	428a      	cmp	r2, r1
			dest[n] = src[n];
    4132:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
    4136:	d1f9      	bne.n	412c <memmove+0x20>
		}
	}

	return d;
}
    4138:	bd10      	pop	{r4, pc}

0000413a <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    413a:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    413c:	ea81 0400 	eor.w	r4, r1, r0
    4140:	07a5      	lsls	r5, r4, #30
    4142:	4603      	mov	r3, r0
    4144:	d00b      	beq.n	415e <memcpy+0x24>
    4146:	3b01      	subs	r3, #1
    4148:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    414a:	4291      	cmp	r1, r2
    414c:	d11a      	bne.n	4184 <memcpy+0x4a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    414e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    4150:	2a00      	cmp	r2, #0
    4152:	d0fc      	beq.n	414e <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    4154:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
    4158:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
    415a:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
    415e:	079c      	lsls	r4, r3, #30
    4160:	d1f6      	bne.n	4150 <memcpy+0x16>
    4162:	0895      	lsrs	r5, r2, #2
    4164:	00ac      	lsls	r4, r5, #2
    4166:	1f1e      	subs	r6, r3, #4
    4168:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    416a:	42b9      	cmp	r1, r7
    416c:	d105      	bne.n	417a <memcpy+0x40>
    416e:	f06f 0603 	mvn.w	r6, #3
    4172:	4423      	add	r3, r4
    4174:	fb06 2205 	mla	r2, r6, r5, r2
    4178:	e7e5      	b.n	4146 <memcpy+0xc>
			*(d_word++) = *(s_word++);
    417a:	f851 cb04 	ldr.w	ip, [r1], #4
    417e:	f846 cf04 	str.w	ip, [r6, #4]!
			n -= sizeof(mem_word_t);
    4182:	e7f2      	b.n	416a <memcpy+0x30>
		*(d_byte++) = *(s_byte++);
    4184:	f811 4b01 	ldrb.w	r4, [r1], #1
    4188:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    418c:	e7dd      	b.n	414a <memcpy+0x10>

0000418e <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    418e:	4603      	mov	r3, r0
{
    4190:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
    4192:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    4194:	079c      	lsls	r4, r3, #30
    4196:	d110      	bne.n	41ba <memset+0x2c>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    4198:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    419c:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    41a0:	0894      	lsrs	r4, r2, #2
    41a2:	eb03 0684 	add.w	r6, r3, r4, lsl #2
    41a6:	42b3      	cmp	r3, r6
    41a8:	d10d      	bne.n	41c6 <memset+0x38>
    41aa:	f06f 0503 	mvn.w	r5, #3
    41ae:	fb05 2404 	mla	r4, r5, r4, r2
    41b2:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    41b4:	42a3      	cmp	r3, r4
    41b6:	d109      	bne.n	41cc <memset+0x3e>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    41b8:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    41ba:	2a00      	cmp	r2, #0
    41bc:	d0fc      	beq.n	41b8 <memset+0x2a>
		*(d_byte++) = c_byte;
    41be:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    41c2:	3a01      	subs	r2, #1
    41c4:	e7e6      	b.n	4194 <memset+0x6>
		*(d_word++) = c_word;
    41c6:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
    41ca:	e7ec      	b.n	41a6 <memset+0x18>
		*(d_byte++) = c_byte;
    41cc:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    41d0:	e7f0      	b.n	41b4 <memset+0x26>

000041d2 <_stdout_hook_default>:
}
    41d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    41d6:	4770      	bx	lr

000041d8 <uarte_nrfx_config_get>:
{
    41d8:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    41da:	68c2      	ldr	r2, [r0, #12]
    41dc:	e892 0003 	ldmia.w	r2, {r0, r1}
    41e0:	e883 0003 	stmia.w	r3, {r0, r1}
}
    41e4:	2000      	movs	r0, #0
    41e6:	4770      	bx	lr

000041e8 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    41e8:	6843      	ldr	r3, [r0, #4]
    41ea:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    41ec:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    41f0:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    41f4:	4770      	bx	lr

000041f6 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    41f6:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    41f8:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
    41fa:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    41fc:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    4200:	b138      	cbz	r0, 4212 <uarte_nrfx_poll_in+0x1c>
	*c = data->rx_data;
    4202:	7b12      	ldrb	r2, [r2, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4204:	2000      	movs	r0, #0
    4206:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4208:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    420a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    420e:	601a      	str	r2, [r3, #0]
	return 0;
    4210:	4770      	bx	lr
		return -1;
    4212:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    4216:	4770      	bx	lr

00004218 <uarte_nrfx_poll_out>:
{
    4218:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
    421c:	6843      	ldr	r3, [r0, #4]
{
    421e:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
    4222:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    4224:	68c6      	ldr	r6, [r0, #12]
	if (!k_is_in_isr()) {
    4226:	f000 f94c 	bl	44c2 <k_is_in_isr>
    422a:	b9c0      	cbnz	r0, 425e <uarte_nrfx_poll_out+0x46>
    422c:	2564      	movs	r5, #100	; 0x64
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    422e:	f04f 0801 	mov.w	r8, #1
    4232:	f106 0708 	add.w	r7, r6, #8
    4236:	e8d7 3fef 	ldaex	r3, [r7]
    423a:	2b00      	cmp	r3, #0
    423c:	d103      	bne.n	4246 <uarte_nrfx_poll_out+0x2e>
    423e:	e8c7 8fe2 	stlex	r2, r8, [r7]
    4242:	2a00      	cmp	r2, #0
    4244:	d1f7      	bne.n	4236 <uarte_nrfx_poll_out+0x1e>
		while (atomic_cas((atomic_t *) lock,
    4246:	d00c      	beq.n	4262 <uarte_nrfx_poll_out+0x4a>
	return z_impl_k_sleep(timeout);
    4248:	2021      	movs	r0, #33	; 0x21
    424a:	2100      	movs	r1, #0
    424c:	3d01      	subs	r5, #1
    424e:	f7fe fab5 	bl	27bc <z_impl_k_sleep>
			if (--safety_cnt == 0) {
    4252:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    4256:	d1ee      	bne.n	4236 <uarte_nrfx_poll_out+0x1e>
}
    4258:	b002      	add	sp, #8
    425a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*lock = 1;
    425e:	2301      	movs	r3, #1
    4260:	60b3      	str	r3, [r6, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4262:	2300      	movs	r3, #0
    4264:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    4268:	f10d 0307 	add.w	r3, sp, #7
    426c:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    4270:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4272:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    p_reg->TXD.MAXCNT = length;
    4276:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    427a:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    427c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX),
    4280:	b923      	cbnz	r3, 428c <uarte_nrfx_poll_out+0x74>
    4282:	2001      	movs	r0, #1
    4284:	f000 f814 	bl	42b0 <nrfx_busy_wait>
    4288:	3d01      	subs	r5, #1
    428a:	d1f7      	bne.n	427c <uarte_nrfx_poll_out+0x64>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    428c:	2301      	movs	r3, #1
    428e:	60e3      	str	r3, [r4, #12]
	*lock = 0;
    4290:	2300      	movs	r3, #0
    4292:	60b3      	str	r3, [r6, #8]
    4294:	e7e0      	b.n	4258 <uarte_nrfx_poll_out+0x40>

00004296 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    4296:	b508      	push	{r3, lr}
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
	sys_arch_reboot(0);
    4298:	2000      	movs	r0, #0
    429a:	f7fd f897 	bl	13cc <sys_arch_reboot>

0000429e <hw_cc310_init>:
#include <nrf_cc310_platform.h>

#if CONFIG_HW_CC310

static int hw_cc310_init(struct device *dev)
{
    429e:	b508      	push	{r3, lr}
	int res;

	__ASSERT_NO_MSG(dev != NULL);

	/* Set the RTOS abort APIs */
	nrf_cc310_platform_abort_init();
    42a0:	f7fc fdb0 	bl	e04 <nrf_cc310_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc310_platform_mutex_init();
    42a4:	f7fc fe32 	bl	f0c <nrf_cc310_platform_mutex_init>
	res = nrf_cc310_platform_init();
#else
	res = nrf_cc310_platform_init_no_rng();
#endif
	return res;
}
    42a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc310_platform_init_no_rng();
    42ac:	f7fe be42 	b.w	2f34 <nrf_cc310_platform_init_no_rng>

000042b0 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    42b0:	f000 b90d 	b.w	44ce <z_impl_k_busy_wait>

000042b4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    42b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    42b6:	4606      	mov	r6, r0
    42b8:	460f      	mov	r7, r1
	__asm__ volatile(
    42ba:	f04f 0320 	mov.w	r3, #32
    42be:	f3ef 8511 	mrs	r5, BASEPRI
    42c2:	f383 8811 	msr	BASEPRI, r3
    42c6:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    42ca:	f7fe fa97 	bl	27fc <z_impl_k_current_get>
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
    42ce:	4639      	mov	r1, r7
    42d0:	4604      	mov	r4, r0
    42d2:	4630      	mov	r0, r6
    42d4:	f7ff ffdf 	bl	4296 <k_sys_fatal_error_handler>
	__asm__ volatile(
    42d8:	f385 8811 	msr	BASEPRI, r5
    42dc:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    42e0:	4620      	mov	r0, r4
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
    42e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    42e6:	f7fd b88f 	b.w	1408 <z_impl_k_thread_abort>

000042ea <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
    42ea:	f7ff be3c 	b.w	3f66 <z_clock_idle_exit>

000042ee <k_mem_slab_init>:
{
    42ee:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    42f0:	2400      	movs	r4, #0
    42f2:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    42f4:	ea41 0402 	orr.w	r4, r1, r2
    42f8:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    42fc:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
    4300:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    4302:	d10c      	bne.n	431e <k_mem_slab_init+0x30>
	slab->free_list = NULL;
    4304:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    4306:	42a3      	cmp	r3, r4
    4308:	d103      	bne.n	4312 <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
    430a:	e9c0 0000 	strd	r0, r0, [r0]
    430e:	2000      	movs	r0, #0
}
    4310:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    4312:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    4314:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
    4316:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
    4318:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    431a:	4411      	add	r1, r2
    431c:	e7f3      	b.n	4306 <k_mem_slab_init+0x18>
		return -EINVAL;
    431e:	f06f 0015 	mvn.w	r0, #21
	return rc;
    4322:	e7f5      	b.n	4310 <k_mem_slab_init+0x22>

00004324 <z_impl_k_mutex_init>:
{
    4324:	4603      	mov	r3, r0
	mutex->owner = NULL;
    4326:	2000      	movs	r0, #0
    4328:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
    432c:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
    4330:	4770      	bx	lr

00004332 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    4332:	b921      	cbnz	r1, 433e <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4334:	f3ef 8005 	mrs	r0, IPSR
    4338:	b908      	cbnz	r0, 433e <z_reschedule+0xc>
    433a:	f7fc bdfd 	b.w	f38 <arch_swap>
    433e:	f381 8811 	msr	BASEPRI, r1
    4342:	f3bf 8f6f 	isb	sy
}
    4346:	4770      	bx	lr

00004348 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    4348:	4603      	mov	r3, r0
    434a:	b920      	cbnz	r0, 4356 <z_reschedule_irqlock+0xe>
    434c:	f3ef 8205 	mrs	r2, IPSR
    4350:	b90a      	cbnz	r2, 4356 <z_reschedule_irqlock+0xe>
    4352:	f7fc bdf1 	b.w	f38 <arch_swap>
    4356:	f383 8811 	msr	BASEPRI, r3
    435a:	f3bf 8f6f 	isb	sy
}
    435e:	4770      	bx	lr

00004360 <z_reschedule_unlocked>:
	__asm__ volatile(
    4360:	f04f 0320 	mov.w	r3, #32
    4364:	f3ef 8011 	mrs	r0, BASEPRI
    4368:	f383 8811 	msr	BASEPRI, r3
    436c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    4370:	f7ff bfea 	b.w	4348 <z_reschedule_irqlock>

00004374 <z_priq_dumb_best>:
	return list->head == list;
    4374:	6803      	ldr	r3, [r0, #0]
}
    4376:	4298      	cmp	r0, r3
    4378:	bf14      	ite	ne
    437a:	4618      	movne	r0, r3
    437c:	2000      	moveq	r0, #0
    437e:	4770      	bx	lr

00004380 <z_ready_thread>:
{
    4380:	b510      	push	{r4, lr}
    4382:	f04f 0320 	mov.w	r3, #32
    4386:	f3ef 8411 	mrs	r4, BASEPRI
    438a:	f383 8811 	msr	BASEPRI, r3
    438e:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
    4392:	f7fd ff9b 	bl	22cc <ready_thread>
	__asm__ volatile(
    4396:	f384 8811 	msr	BASEPRI, r4
    439a:	f3bf 8f6f 	isb	sy
}
    439e:	bd10      	pop	{r4, pc}

000043a0 <z_thread_timeout>:
	if (thread->base.pended_on != NULL) {
    43a0:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
    43a4:	b570      	push	{r4, r5, r6, lr}
    43a6:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    43a8:	f1a0 0518 	sub.w	r5, r0, #24
	if (thread->base.pended_on != NULL) {
    43ac:	b1cb      	cbz	r3, 43e2 <z_thread_timeout+0x42>
	__asm__ volatile(
    43ae:	f04f 0320 	mov.w	r3, #32
    43b2:	f3ef 8611 	mrs	r6, BASEPRI
    43b6:	f383 8811 	msr	BASEPRI, r3
    43ba:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    43be:	4629      	mov	r1, r5
    43c0:	f850 0c10 	ldr.w	r0, [r0, #-16]
    43c4:	f7fd ff2c 	bl	2220 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    43c8:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    43cc:	f023 0302 	bic.w	r3, r3, #2
    43d0:	f804 3c0b 	strb.w	r3, [r4, #-11]
		thread->base.pended_on = NULL;
    43d4:	2300      	movs	r3, #0
    43d6:	f844 3c10 	str.w	r3, [r4, #-16]
	__asm__ volatile(
    43da:	f386 8811 	msr	BASEPRI, r6
    43de:	f3bf 8f6f 	isb	sy
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    43e2:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	z_ready_thread(thread);
    43e6:	4628      	mov	r0, r5
    43e8:	f023 0314 	bic.w	r3, r3, #20
    43ec:	f804 3c0b 	strb.w	r3, [r4, #-11]
}
    43f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
    43f4:	f7ff bfc4 	b.w	4380 <z_ready_thread>

000043f8 <z_remove_thread_from_ready_q>:
{
    43f8:	b510      	push	{r4, lr}
	__asm__ volatile(
    43fa:	f04f 0320 	mov.w	r3, #32
    43fe:	f3ef 8411 	mrs	r4, BASEPRI
    4402:	f383 8811 	msr	BASEPRI, r3
    4406:	f3bf 8f6f 	isb	sy
		unready_thread(thread);
    440a:	f7fe f8b7 	bl	257c <unready_thread>
	__asm__ volatile(
    440e:	f384 8811 	msr	BASEPRI, r4
    4412:	f3bf 8f6f 	isb	sy
}
    4416:	bd10      	pop	{r4, pc}

00004418 <add_to_waitq_locked>:
{
    4418:	b538      	push	{r3, r4, r5, lr}
    441a:	4604      	mov	r4, r0
    441c:	460d      	mov	r5, r1
	unready_thread(thread);
    441e:	f7fe f8ad 	bl	257c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    4422:	7b63      	ldrb	r3, [r4, #13]
    4424:	f043 0302 	orr.w	r3, r3, #2
    4428:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    442a:	b17d      	cbz	r5, 444c <add_to_waitq_locked+0x34>
    442c:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    442e:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4430:	429d      	cmp	r5, r3
    4432:	d012      	beq.n	445a <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4434:	b18b      	cbz	r3, 445a <add_to_waitq_locked+0x42>
	if (thread_1->base.prio < thread_2->base.prio) {
    4436:	f994 200e 	ldrsb.w	r2, [r4, #14]
    443a:	f993 100e 	ldrsb.w	r1, [r3, #14]
    443e:	4291      	cmp	r1, r2
    4440:	dd05      	ble.n	444e <add_to_waitq_locked+0x36>
	node->prev = successor->prev;
    4442:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4444:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    4448:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    444a:	605c      	str	r4, [r3, #4]
}
    444c:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    444e:	6869      	ldr	r1, [r5, #4]
    4450:	428b      	cmp	r3, r1
    4452:	d002      	beq.n	445a <add_to_waitq_locked+0x42>
    4454:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4456:	2b00      	cmp	r3, #0
    4458:	d1ef      	bne.n	443a <add_to_waitq_locked+0x22>
	node->prev = list->tail;
    445a:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    445c:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
    445e:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    4460:	686b      	ldr	r3, [r5, #4]
    4462:	601c      	str	r4, [r3, #0]
	list->tail = node;
    4464:	606c      	str	r4, [r5, #4]
}
    4466:	e7f1      	b.n	444c <add_to_waitq_locked+0x34>

00004468 <z_unpend_first_thread>:
{
    4468:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    446a:	f04f 0320 	mov.w	r3, #32
    446e:	f3ef 8211 	mrs	r2, BASEPRI
    4472:	f383 8811 	msr	BASEPRI, r3
    4476:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    447a:	f7ff ff7b 	bl	4374 <z_priq_dumb_best>
    447e:	4604      	mov	r4, r0
	__asm__ volatile(
    4480:	f382 8811 	msr	BASEPRI, r2
    4484:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    4488:	b1c8      	cbz	r0, 44be <z_unpend_first_thread+0x56>
	__asm__ volatile(
    448a:	f04f 0320 	mov.w	r3, #32
    448e:	f3ef 8511 	mrs	r5, BASEPRI
    4492:	f383 8811 	msr	BASEPRI, r3
    4496:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    449a:	4601      	mov	r1, r0
    449c:	6880      	ldr	r0, [r0, #8]
    449e:	f7fd febf 	bl	2220 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    44a2:	7b63      	ldrb	r3, [r4, #13]
    44a4:	f023 0302 	bic.w	r3, r3, #2
    44a8:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
    44aa:	2300      	movs	r3, #0
    44ac:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    44ae:	f385 8811 	msr	BASEPRI, r5
    44b2:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
    44b6:	f104 0018 	add.w	r0, r4, #24
    44ba:	f000 f80a 	bl	44d2 <z_abort_timeout>
}
    44be:	4620      	mov	r0, r4
    44c0:	bd38      	pop	{r3, r4, r5, pc}

000044c2 <k_is_in_isr>:
    44c2:	f3ef 8005 	mrs	r0, IPSR
}
    44c6:	3000      	adds	r0, #0
    44c8:	bf18      	it	ne
    44ca:	2001      	movne	r0, #1
    44cc:	4770      	bx	lr

000044ce <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
    44ce:	f7fc b8dd 	b.w	68c <arch_busy_wait>

000044d2 <z_abort_timeout>:
{
    44d2:	b510      	push	{r4, lr}
	__asm__ volatile(
    44d4:	f04f 0220 	mov.w	r2, #32
    44d8:	f3ef 8411 	mrs	r4, BASEPRI
    44dc:	f382 8811 	msr	BASEPRI, r2
    44e0:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    44e4:	6803      	ldr	r3, [r0, #0]
    44e6:	b13b      	cbz	r3, 44f8 <z_abort_timeout+0x26>
			remove_timeout(to);
    44e8:	f7fe fa22 	bl	2930 <remove_timeout>
			ret = 0;
    44ec:	2000      	movs	r0, #0
	__asm__ volatile(
    44ee:	f384 8811 	msr	BASEPRI, r4
    44f2:	f3bf 8f6f 	isb	sy
}
    44f6:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    44f8:	f06f 0015 	mvn.w	r0, #21
    44fc:	e7f7      	b.n	44ee <z_abort_timeout+0x1c>

000044fe <z_get_next_timeout_expiry>:
{
    44fe:	b510      	push	{r4, lr}
	__asm__ volatile(
    4500:	f04f 0320 	mov.w	r3, #32
    4504:	f3ef 8411 	mrs	r4, BASEPRI
    4508:	f383 8811 	msr	BASEPRI, r3
    450c:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    4510:	f7fe fa22 	bl	2958 <next_timeout>
	__asm__ volatile(
    4514:	f384 8811 	msr	BASEPRI, r4
    4518:	f3bf 8f6f 	isb	sy
}
    451c:	bd10      	pop	{r4, pc}

0000451e <z_set_timeout_expiry>:
{
    451e:	b570      	push	{r4, r5, r6, lr}
    4520:	4604      	mov	r4, r0
    4522:	460e      	mov	r6, r1
	__asm__ volatile(
    4524:	f04f 0320 	mov.w	r3, #32
    4528:	f3ef 8511 	mrs	r5, BASEPRI
    452c:	f383 8811 	msr	BASEPRI, r3
    4530:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
    4534:	f7fe fa10 	bl	2958 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    4538:	2801      	cmp	r0, #1
    453a:	dd05      	ble.n	4548 <z_set_timeout_expiry+0x2a>
    453c:	42a0      	cmp	r0, r4
    453e:	dd03      	ble.n	4548 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
    4540:	4631      	mov	r1, r6
    4542:	4620      	mov	r0, r4
    4544:	f7fc f99a 	bl	87c <z_clock_set_timeout>
	__asm__ volatile(
    4548:	f385 8811 	msr	BASEPRI, r5
    454c:	f3bf 8f6f 	isb	sy
}
    4550:	bd70      	pop	{r4, r5, r6, pc}

00004552 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
    4552:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
    4554:	f7fe faec 	bl	2b30 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
    4558:	bd08      	pop	{r3, pc}

0000455a <k_heap_init>:
{
    455a:	b410      	push	{r4}
    455c:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    4560:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    4564:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
    4568:	f7ff bbfc 	b.w	3d64 <sys_heap_init>

0000456c <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
    456c:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

00005020 <spm_request_read-0x2fc0>:
	...

00007fe0 <spm_request_read>:
    7fe0:	e97f e97f 	sg
    7fe4:	f7f8 be50 	b.w	c88 <__acle_se_spm_request_read>

00007fe8 <spm_firmware_info>:
    7fe8:	e97f e97f 	sg
    7fec:	f7f8 bea4 	b.w	d38 <__acle_se_spm_firmware_info>

00007ff0 <spm_request_random_number>:
    7ff0:	e97f e97f 	sg
    7ff4:	f7fb bfc3 	b.w	3f7e <__acle_se_spm_request_random_number>
	...
